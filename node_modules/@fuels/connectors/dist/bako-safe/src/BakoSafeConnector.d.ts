import { type Asset, type FuelABI, FuelConnector, FuelConnectorEventTypes, type Network, type SelectNetworkArguments, type TransactionRequestLike } from 'fuels';
import { type BakoSafeConnectorConfig, BakoSafeConnectorEvents } from './types';
export declare class BakoSafeConnector extends FuelConnector {
    name: string;
    metadata: {
        image: {
            light: string;
            dark: string;
        };
        install: {
            action: string;
            link: string;
            description: string;
        };
    };
    installed: boolean;
    connected: boolean;
    external: boolean;
    events: {
        connectors: FuelConnectorEventTypes.connectors;
        currentConnector: FuelConnectorEventTypes.currentConnector;
        connection: FuelConnectorEventTypes.connection;
        accounts: FuelConnectorEventTypes.accounts;
        currentAccount: FuelConnectorEventTypes.currentAccount;
        networks: FuelConnectorEventTypes.networks;
        currentNetwork: FuelConnectorEventTypes.currentNetwork;
        assets: FuelConnectorEventTypes.assets;
        abis: FuelConnectorEventTypes.abis;
        DEFAULT: BakoSafeConnectorEvents.DEFAULT;
        CLIENT_DISCONNECTED: BakoSafeConnectorEvents.CLIENT_DISCONNECTED;
        CLIENT_CONNECTED: BakoSafeConnectorEvents.CLIENT_CONNECTED;
        TX_PENDING: BakoSafeConnectorEvents.TX_PENDING;
        TX_CONFIRMED: BakoSafeConnectorEvents.TX_CONFIRMED;
        TX_TIMEOUT: BakoSafeConnectorEvents.TX_TIMEOUT;
        AUTH_CONFIRMED: BakoSafeConnectorEvents.AUTH_CONFIRMED;
    };
    private readonly appUrl;
    private readonly host;
    private readonly api;
    private setupReady?;
    private socket?;
    private sessionId?;
    private dAppWindow?;
    private storage?;
    constructor(config?: BakoSafeConnectorConfig);
    private getStorage;
    private getSessionId;
    private checkWindow;
    /**
     * [important]
     * this.socket.emit -> emit message to the server
     * this.emit -> emit message to the dApp client
     */
    private setup;
    connect(): Promise<boolean>;
    sendTransaction(_address: string, _transaction: TransactionRequestLike): Promise<string>;
    ping(): Promise<boolean>;
    version(): Promise<{
        app: string;
        network: string;
    }>;
    isConnected(): Promise<any>;
    accounts(): Promise<any[]>;
    currentAccount(): Promise<any>;
    disconnect(): Promise<boolean>;
    currentNetwork(): Promise<Network>;
    networks(): Promise<Array<Network>>;
    assets(): Promise<Asset[]>;
    signMessage(_address: string, _message: string): Promise<string>;
    addAssets(_assets: Asset[]): Promise<boolean>;
    addAsset(_assets: Asset): Promise<boolean>;
    addNetwork(_networkUrl: string): Promise<boolean>;
    selectNetwork(_network: SelectNetworkArguments): Promise<boolean>;
    addABI(_contractId: string, _abi: FuelABI): Promise<boolean>;
    getABI(_id: string): Promise<FuelABI | null>;
    hasABI(_id: string): Promise<boolean>;
}
