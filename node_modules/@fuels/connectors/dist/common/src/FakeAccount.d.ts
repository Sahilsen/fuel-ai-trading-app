import type { Hash, Option } from './types';
export interface FakeAccount {
    generate: () => void;
    getAddress: () => Option<string, Hash>;
    getRawAddress: () => Uint8Array;
    signMessage: (message: Option<string, Uint8Array, Hash>) => Promise<Option<string, Uint8Array, Hash>>;
}
export declare class EthereumFakeAccount implements FakeAccount {
    private account;
    constructor();
    generate: () => void;
    getAddress: () => Option<string, Hash>;
    getRawAddress: () => Uint8Array;
    signMessage: (message: Option<string, Uint8Array, Hash>) => Promise<Option<string, Uint8Array, Hash>>;
}
export declare class SolanaFakeAccount implements FakeAccount {
    private keypair;
    constructor();
    generate: () => void;
    getAddress: () => Option<string, Hash>;
    getRawAddress: () => Uint8Array;
    private getSmallTxId;
    signMessage: (message: Option<string, Uint8Array, Hash>) => Promise<Option<string, Uint8Array, Hash>>;
}
