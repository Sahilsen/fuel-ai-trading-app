import { type FakeAccount } from './FakeAccount';
import type { Hash, Option } from './types';
export interface PredicateWalletAdapter {
    convertAddress: (address: string) => string;
    generateFakeAccount: () => FakeAccount;
    buildWitnessData: (account: FakeAccount, signature: Option<string, Uint8Array, Hash>) => Array<Option<string, Uint8Array, Hash>>;
}
export declare class EthereumWalletAdapter implements PredicateWalletAdapter {
    convertAddress: (address: string) => string;
    generateFakeAccount: () => FakeAccount;
    buildWitnessData: (_account: FakeAccount, signature: Option<string, Uint8Array, Hash>) => Array<Option<string, Uint8Array, Hash>>;
}
export declare class SolanaWalletAdapter implements PredicateWalletAdapter {
    convertAddress: (address: string) => string;
    generateFakeAccount: () => FakeAccount;
    buildWitnessData: (_account: FakeAccount, signature: Option<string, Uint8Array, Hash>) => Array<Option<string, Uint8Array, Hash>>;
}
