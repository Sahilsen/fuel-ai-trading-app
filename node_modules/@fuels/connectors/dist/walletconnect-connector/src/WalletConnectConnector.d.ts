import { type Config } from '@wagmi/core';
import { type ConnectorMetadata, FuelConnectorEventTypes, type FuelConnectorSendTxParams, type TransactionRequestLike, type TransactionResponse } from 'fuels';
import { type Maybe, PredicateConnector, type PredicateVersion, type PredicateWalletAdapter, type ProviderDictionary } from '@fuel-connectors/common';
import type { WalletConnectConfig } from './types';
export declare class WalletConnectConnector extends PredicateConnector {
    name: string;
    installed: boolean;
    events: typeof FuelConnectorEventTypes;
    metadata: ConnectorMetadata;
    private fuelProvider;
    private ethProvider;
    private web3Modal;
    private storage;
    private config;
    constructor(config: WalletConnectConfig);
    private loadPersistedConnection;
    private createModal;
    private modalFactory;
    private handleConnect;
    private setupWatchers;
    protected getWagmiConfig(): Maybe<Config>;
    protected getWalletAdapter(): PredicateWalletAdapter;
    protected getPredicateVersions(): Record<string, PredicateVersion>;
    protected configProviders(config?: WalletConnectConfig): Promise<void>;
    protected walletAccounts(): Promise<Array<string>>;
    protected getAccountAddress(): Promise<Maybe<string>>;
    protected getAccountAddresses(): Promise<Maybe<readonly string[]>>;
    protected requireConnection(): Promise<void>;
    protected getProviders(): Promise<ProviderDictionary>;
    connect(): Promise<boolean>;
    private getAccountValidations;
    private accountHasValidation;
    private requestSignatures;
    private requestSignature;
    disconnect(): Promise<boolean>;
    sendTransaction(address: string, transaction: TransactionRequestLike, params?: FuelConnectorSendTxParams): Promise<TransactionResponse>;
    private isValidPredicateAddress;
    private encodeTxId;
    private validateSignature;
    private signAndValidate;
    signMessageCustomCurve(message: string): Promise<{
        curve: string;
        signature: string;
    }>;
    static getFuelPredicateAddresses(ethAddress: string): {
        fuelAddress: `0x${string}`;
        evmPredicate: {
            generatedAt: 1738383921738 | 1728253389401 | 1725479113004;
            address: string;
        };
    }[];
}
