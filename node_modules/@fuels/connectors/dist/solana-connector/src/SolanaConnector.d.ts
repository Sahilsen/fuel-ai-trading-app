import { type Maybe, PredicateConnector, type PredicateVersion, type PredicateWalletAdapter, type ProviderDictionary } from '@fuel-connectors/common';
import { type ConnectorMetadata, FuelConnectorEventTypes, Provider as FuelProvider, type TransactionRequestLike, type TransactionResponse } from 'fuels';
import type { SolanaConfig } from './types';
import { SolanaConnectorEvents } from './types';
export declare class SolanaConnector extends PredicateConnector {
    name: string;
    events: {
        ERROR: SolanaConnectorEvents.ERROR;
        connectors: FuelConnectorEventTypes.connectors;
        currentConnector: FuelConnectorEventTypes.currentConnector;
        connection: FuelConnectorEventTypes.connection;
        accounts: FuelConnectorEventTypes.accounts;
        currentAccount: FuelConnectorEventTypes.currentAccount;
        networks: FuelConnectorEventTypes.networks;
        currentNetwork: FuelConnectorEventTypes.currentNetwork;
        assets: FuelConnectorEventTypes.assets;
        abis: FuelConnectorEventTypes.abis;
    };
    metadata: ConnectorMetadata;
    protected fuelProvider: FuelProvider;
    private web3Modal;
    private config;
    private svmAddress;
    private storage;
    private isPollingSignatureRequestActive;
    constructor(config: SolanaConfig);
    private _emitDisconnect;
    private _emitSignatureError;
    private _emitConnected;
    private modalFactory;
    private providerFactory;
    private setupWatchers;
    private createModal;
    protected requireConnection(): Promise<void>;
    protected getWalletAdapter(): PredicateWalletAdapter;
    protected getPredicateVersions(): Record<string, PredicateVersion>;
    protected configProviders(config?: SolanaConfig): Promise<void>;
    protected walletAccounts(): Promise<Array<string>>;
    protected getAccountAddress(): Maybe<string>;
    protected getProviders(): Promise<ProviderDictionary>;
    connect(): Promise<boolean>;
    disconnect(): Promise<boolean>;
    private encodeTxId;
    sendTransaction(address: string, transaction: TransactionRequestLike): Promise<string | TransactionResponse>;
    signMessageCustomCurve(message: string): Promise<{
        curve: string;
        signature: string;
    }>;
    static getFuelPredicateAddresses(svmAddress: string): {
        fuelAddress: `0x${string}`;
        svmPredicate: {
            generatedAt: 1725561405784 | 1728255070813;
            address: string;
        };
    }[];
    private accountHasValidation;
    isConnected(): Promise<boolean>;
}
