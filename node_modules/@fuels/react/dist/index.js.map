{"version":3,"sources":["../src/core/useNamedQuery.ts","../src/ui/Connect/index.tsx","../src/providers/FuelUIProvider.tsx","../src/hooks/useConnect.ts","../src/utils/queryKeys.ts","../src/config.ts","../src/utils/isNativeConnector.ts","../src/hooks/useConnectors.ts","../src/ui/Connect/utils/getImageUrl.tsx","../src/ui/Connect/components/Core/ConnectorIcon.tsx","../src/ui/Connect/components/Connector/Connector.tsx","../src/ui/Connect/components/Connector/styles.tsx","../src/ui/Connect/components/Connectors/Connectors.tsx","../src/ui/Connect/components/Connectors/Connector.tsx","../src/ui/Connect/components/Connectors/ConnectorBadge.tsx","../src/ui/Connect/components/Connectors/styles.tsx","../src/ui/Connect/styles.tsx","../src/icons/BackIcon.tsx","../src/icons/CloseIcon.tsx","../src/icons/CopyIcon.tsx","../src/ui/Connect/components/Connectors/ConnectorsLoader.tsx","../src/ui/Connect/components/Connector/Connecting.tsx","../src/icons/Spinner.tsx","../src/providers/FuelHooksProvider.tsx","../src/providers/FuelEventsWatcher.tsx","../src/ui/Connect/components/PredicateAddressDisclaimer/PredicateAddressDisclaimer.tsx","../src/ui/Connect/components/Core/DialogContent.tsx","../src/ui/Connect/components/Core/DialogFuel.tsx","../src/constants/themes.ts","../src/ui/Connect/components/Core/styles.tsx","../src/ui/Connect/components/PredicateExternalDisclaimer/styles.tsx","../src/ui/Connect/components/PredicateExternalDisclaimer/PredicateExternalDisclaimer.tsx","../src/providers/FuelProvider.tsx","../src/ui/Connect/components/Bridge/BridgeDialog.tsx","../src/icons/NoFundIcon.tsx","../src/ui/Connect/hooks/useNetworkConfigs.tsx","../src/ui/Connect/components/Network/NetworkDialog.tsx","../src/hooks/useIsSupportedNetwork.tsx","../src/hooks/useCurrentConnector.tsx","../src/hooks/useIsConnected.ts","../src/hooks/useNetwork.ts","../src/ui/Connect/components/Network/styles.tsx","../src/hooks/useAccount.ts","../src/hooks/useAccounts.ts","../src/hooks/useAddAssets.ts","../src/hooks/useAddNetwork.ts","../src/hooks/useAssets.ts","../src/hooks/useBalance.ts","../src/hooks/useProvider.ts","../src/hooks/useWallet.ts","../src/hooks/useChain.ts","../src/hooks/useContractRead.ts","../src/hooks/useDisconnect.ts","../src/hooks/useNetworks.ts","../../../node_modules/.pnpm/compare-versions@6.1.0/node_modules/compare-versions/src/utils.ts","../../../node_modules/.pnpm/compare-versions@6.1.0/node_modules/compare-versions/src/compareVersions.ts","../../../node_modules/.pnpm/compare-versions@6.1.0/node_modules/compare-versions/src/compare.ts","../src/hooks/useNodeInfo.ts","../src/hooks/useSelectNetwork.ts","../src/hooks/useSendTransaction.ts","../src/hooks/useTransaction.ts","../src/hooks/useTransactionReceipts.ts","../src/hooks/useChainId.ts","../src/hooks/useTransactionResult.ts"],"names":["useQuery","useMemo","createProxyHandler","name","target","prop","useNamedQuery","options","queryClient","query","Dialog","createContext","useCallback","useContext","useEffect","useState","useMutation","useConnect","fuel","useFuel","mutate","mutateAsync","mutateProps","connectorName","QUERY_KEYS","address","chainId","args","queryKey","assetId","providerUrl","id","url","networks","network","isConnected","MUTATION_KEYS","CHAIN_IDS","NATIVE_CONNECTORS","DEFAULT_NETWORK","BASE_NETWORK_CONFIGS","isNativeConnector","connector","useConnectors","jsx","FuelConnectContext","useConnectUI","context","sortConnectors","connectors","a","b","aInstalled","bInstalled","FuelUIProvider","fuelConfig","children","theme","uiConfig","isConnecting","isError","connectAsync","isLoadingConnectors","useIsConnected","setConnector","dialogRoute","setDialogRoute","isOpen","setOpen","error","setError","currentConnector","c","handleBack","handleRetryConnect","err","handleStartConnection","handleSelectConnector","isLoading","hasLoadedConnectors","handleConnect","handleCancel","css","contextValue","getImageUrl","image","ConnectorIcon","connectorMetadata","props","connectorTitleStyle","ConnectorTitle","connectorDescriptionStyle","ConnectorDescription","connectorFooterHelperStyle","ConnectorFooterHelper","connectorDescriptionErrorStyle","ConnectorDescriptionError","connectorImageStyle","ConnectorImage","connectorButtonStyle","ConnectorButton","href","style","connectorContentStyle","ConnectorContent","ConnectorButtonPrimary","jsxs","Connector","setRoute","action","link","description","actionText","memo","connectorItemStyle","ConnectorItem","connectorListStyle","ConnectorList","connectorNameStyle","ConnectorName","badgeStyle","BadgeInfo","BadgeSuccess","groupTitleStyle","GroupTitle","GroupLastTitle","isMobile","isFueletWebView","isFueletConnectorOnMobileBrowser","ConnectorBadge","connected","installed","isBlacklisted","_Connector","connect","index","e","BackIcon","size","CloseIcon","dialogHeaderStyle","DialogHeader","dialogTitleStyle","DialogTitle","dividerStyle","Divider","dialogMainStyle","DialogMain","backIconStyle","closeIconStyle","placeholderLoaderStyle","PlaceholderLoader","ConnectorsLoader","items","_","ALLOWED_MOBILE_CONNECTORS","Connectors","native","external","filteredConnectors","conn","shouldTitleGroups","Spinner","color","spinnerStyle","Fuel","useRef","useQueryClient","FuelEventsWatcher","onCurrentConnectorChange","onConnectorsChange","onCurrentAccountChange","onConnectionChange","onNetworkChange","onAccountsChange","onAssetsChange","FuelReactContext","FuelHooksProvider","PREDICATE_DISCLAIMER_KEY","PredicateAddressDisclaimer","cancel","Connecting","className","route","retryConnect","connectStep","setConnectStep","operation","cta","dialogContentStyle","DialogContent","DialogRadix","shared","light","dark","themes","getThemeVariables","colors","dialogOverlayStyle","DialogOverlay","fuelRootStyle","FuelRoot","DialogFuel","open","onOpenChange","isClient","setIsClient","disclaimerContainerStyle","DisclaimerContainer","disclaimerListStyle","DisclaimerList","PredicateExternalDisclaimer","_startConnection","back","ConnectRoutes","Connect","openState","NoFundIcon","useNetworkConfigs","n","BridgeDialog","provider","useProvider","bridgeHref","setBridgeHref","abort","isConnectOpen","isSupportedNetwork","useIsSupportedNetwork","account","useAccount","balance","useBalance","tempClose","setTempClose","shouldOpenBridge","state","Provider","useCurrentConnector","params","useNetwork","current","defaultVerticalMargin","containerStyle","Container","titleStyle","Title","headerStyle","Header","descriptionStyle","Description","middleDescriptionStyle","MiddleDescription","errorMessageStyle","ErrorMessage","buttonStyle","Button","buttonDisconnectStyle","ButtonDisconnect","orLabelStyle","OrLabel","buttonLoadingStyle","ButtonLoading","Fragment","NetworkDialog","disconnect","useDisconnect","selectNetwork","isPending","useSelectNetwork","chainName","handleSwitch","handleDisconnect","getErrorMessage","FuelProvider","_theme","_uiConfig","ui","_networks","useAccounts","useAddAssets","queryProps","assets","useAddNetwork","networkUrl","useAssets","Address","useWallet","_params","wallet","configuredNetwork","_address","setChainId","baseAssetId","useChain","Contract","isContract","contract","useContractRead","_contract","functionName","isContractInstance","f","attr","useNetworks","semver","validateAndParse","version","match","isWildcard","s","tryParse","v","forceType","compareStrings","ap","bp","compareSegments","i","r","compareVersions","v1","v2","n1","n2","p1","p2","compare","operator","assertValidOperator","res","operatorResMap","allowedOperators","op","useNodeInfo","queryParams","useSendTransaction","transaction","destination","useTransaction","txId","TransactionResponse","useChainId","useTransactionReceipts","response","receipts","useTransactionResult"],"mappings":"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","sourcesContent":["import type {\n  DefaultError,\n  DefinedUseQueryResult,\n  QueryClient,\n  QueryKey,\n  UseQueryOptions,\n  UseQueryResult,\n} from '@tanstack/react-query';\nimport { useQuery } from '@tanstack/react-query';\nimport { useMemo } from 'react';\n\ntype ExcludeData<T> = Omit<T, 'data'>;\ntype ExcludePlaceholderData<T> = Omit<T, 'placeholderData'>;\n\nexport type DefinedNamedUseQueryResult<\n  TName extends string,\n  TQueryFnData = unknown,\n  TError = DefaultError,\n> = ExcludeData<DefinedUseQueryResult<TQueryFnData, TError>> & {\n  [key in TName]: DefinedUseQueryResult<TQueryFnData, TError>['data'];\n};\n\n/**\n * TanStack Query parameters for external usage.\n * Parameters like `queryFn` and `queryKey` are used internally and you cannot override them.\n *\n * See docs for more information: https://tanstack.com/query/latest/docs/framework/react/reference/useQuery\n */\nexport interface UseNamedQueryParams<\n  TName extends string,\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'enabled' | 'initialData' | 'placeholderData'\n  > {\n  name?: TName;\n}\n\n/**\n * TanStack Query parameters for internal usage (inside @fuels/react).\n * This is only used for making the `placeholderData` property required.\n *\n * See docs for more information: https://tanstack.com/query/latest/docs/framework/react/reference/useQuery\n */\ninterface UseNamedQueryOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends ExcludePlaceholderData<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  > {\n  placeholderData: UseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey\n  >['placeholderData'];\n}\n\nfunction createProxyHandler<\n  TName extends string,\n  TData = unknown,\n  TError = DefaultError,\n>(name: TName) {\n  const handlers: ProxyHandler<UseQueryResult<TData, TError>> = {\n    get(target, prop) {\n      const shouldReplaceData = prop === name;\n      if (shouldReplaceData) {\n        return Reflect.get(target, 'data');\n      }\n\n      return Reflect.get(target, prop);\n    },\n  };\n\n  return handlers;\n}\n\n/**\n * useNamedQuery is a wrapper for useQuery that allows you to override the \"data\" property with a custom name.\n *\n * @param name a identifier to override \"data\" property with this name\n * @param options UseNamedQueryOptions\n * @returns useQuery\n */\nexport function useNamedQuery<\n  TName extends string,\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  name: TName,\n  options: UseNamedQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): DefinedNamedUseQueryResult<TName, TData, TError> {\n  const query = useQuery(options, queryClient);\n\n  const proxy = useMemo(() => {\n    return new Proxy(\n      query,\n      createProxyHandler(name),\n    ) as DefinedNamedUseQueryResult<TName, TData, TError>;\n  }, [name, query]);\n\n  return proxy;\n}\n","import * as Dialog from '@radix-ui/react-dialog';\n\nimport { Routes, useConnectUI } from '../../providers/FuelUIProvider';\nimport { Connector } from './components/Connector/Connector';\nimport { Connectors } from './components/Connectors';\nimport {\n  BackIcon,\n  CloseIcon,\n  DialogHeader,\n  DialogMain,\n  DialogTitle,\n  Divider,\n} from './styles';\n\nimport { Connecting } from './components/Connector/Connecting';\nimport { DialogContent } from './components/Core/DialogContent';\nimport { DialogFuel } from './components/Core/DialogFuel';\nimport { PredicateAddressDisclaimer } from './components/PredicateAddressDisclaimer/PredicateAddressDisclaimer';\nimport { PredicateExternalDisclaimer } from './components/PredicateExternalDisclaimer/PredicateExternalDisclaimer';\n\nconst ConnectRoutes = ({ route }: { route: Routes }) => {\n  switch (route) {\n    case Routes.List:\n      return <Connectors />;\n    case Routes.Install:\n      return <Connector />;\n    case Routes.PredicateExternalDisclaimer:\n      return <PredicateExternalDisclaimer />;\n    case Routes.PredicateAddressDisclaimer:\n      return <PredicateAddressDisclaimer />;\n    case Routes.Connecting:\n      return <Connecting />;\n    default:\n      return null;\n  }\n};\n\nexport function Connect() {\n  const {\n    theme,\n    cancel,\n    dialog: { isOpen, route, connector, back },\n  } = useConnectUI();\n\n  const handleOpenChange = (openState: boolean) => {\n    if (!openState) cancel();\n  };\n\n  return (\n    <DialogFuel open={isOpen} theme={theme} onOpenChange={handleOpenChange}>\n      <DialogContent data-connector={!!connector}>\n        <DialogHeader>\n          <BackIcon size={32} onClick={back} data-connector={!!connector} />\n          <DialogTitle>Connect Wallet</DialogTitle>\n          <Dialog.Close asChild>\n            <CloseIcon size={32} onClick={() => cancel()} />\n          </Dialog.Close>\n        </DialogHeader>\n        <Divider />\n        <DialogMain>\n          <ConnectRoutes route={route} />\n        </DialogMain>\n      </DialogContent>\n    </DialogFuel>\n  );\n}\n","import type { FuelConfig, FuelConnector } from 'fuels';\nimport {\n  type ReactNode,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\n\nimport { useConnect } from '../hooks/useConnect';\nimport { useConnectors } from '../hooks/useConnectors';\n\nimport { NATIVE_CONNECTORS } from '../config';\nimport { useIsConnected } from '../hooks';\nimport type { UIConfig } from '../types';\nimport { isNativeConnector } from '../utils';\n\nexport type FuelUIProviderProps = {\n  children?: ReactNode;\n  uiConfig: UIConfig;\n  fuelConfig: FuelConfig;\n  theme?: 'dark' | 'light';\n};\n\nexport enum Routes {\n  List = 'LIST',\n  Install = 'INSTALL',\n  Connecting = 'CONNECTING',\n  PredicateExternalDisclaimer = 'PREDICATE_EXTERNAL_DISCLAIMER',\n  PredicateAddressDisclaimer = 'PREDICATE_ADDRESS_DISCLAIMER',\n}\n\nexport type FuelUIContextType = {\n  isConnected: boolean;\n  uiConfig: UIConfig;\n  fuelConfig: FuelConfig;\n  theme: 'dark' | 'light';\n  connectors: Array<FuelConnector>;\n  isLoading: boolean;\n  isConnecting: boolean;\n  isError: boolean;\n  connect: () => void;\n  cancel: (params?: {\n    clean?: boolean;\n  }) => void;\n  setError: (error: Error | null) => void;\n  error: Error | null;\n  dialog: {\n    connector: FuelConnector | null;\n    isOpen: boolean;\n    back: () => void;\n    connect: (connector: FuelConnector) => void;\n    retryConnect: (connector: FuelConnector) => Promise<void>;\n    // @TODO: Remove this to use tiny router library\n    // react-router maybe too big for the bundle\n    route: Routes;\n    setRoute: (state: Routes) => void;\n    // @TODO: This is meant to be private but is not possible at this moment\n    _startConnection: (connector: FuelConnector) => void;\n  };\n};\n\nexport const FuelConnectContext = createContext<FuelUIContextType | null>(null);\n\nexport const useHasFuelConnectProvider = () => {\n  const context = useContext(FuelConnectContext);\n  return context !== undefined;\n};\n\nexport const useConnectUI = () => {\n  const context = useContext<FuelUIContextType | null>(FuelConnectContext);\n\n  if (!context) {\n    throw new Error('useConnectUI must be used within a FuelUIProvider');\n  }\n\n  return context;\n};\n\nconst sortConnectors = (connectors: FuelConnector[]): FuelConnector[] => {\n  return connectors.sort((a, b) => {\n    if (a.connected !== b.connected) {\n      return a.connected ? -1 : 1;\n    }\n\n    // Use temporary variables to represent \"installed\" status for sorting\n    const aInstalled = NATIVE_CONNECTORS.includes(a.name) && a.installed;\n    const bInstalled = NATIVE_CONNECTORS.includes(b.name) && b.installed;\n    if (aInstalled !== bInstalled) {\n      return aInstalled ? -1 : 1;\n    }\n\n    return a.name.localeCompare(b.name);\n  });\n};\n\nexport function FuelUIProvider({\n  fuelConfig,\n  children,\n  theme,\n  uiConfig,\n}: FuelUIProviderProps) {\n  const { isPending: isConnecting, isError, connectAsync } = useConnect();\n  const { connectors, isLoading: isLoadingConnectors } = useConnectors({\n    query: { select: sortConnectors },\n  });\n  const { isConnected } = useIsConnected();\n  const [connector, setConnector] = useState<FuelConnector | null>(null);\n  const [dialogRoute, setDialogRoute] = useState<Routes>(Routes.List);\n  const [isOpen, setOpen] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    if (!connector) return;\n    const currentConnector = connectors.find((c: FuelConnector) => {\n      return c.name === connector.name;\n    });\n    if (\n      currentConnector &&\n      connector.installed !== currentConnector?.installed\n    ) {\n      setConnector(currentConnector);\n    }\n  }, [connectors, connector]);\n\n  const handleBack = useCallback(() => {\n    setError(null);\n    setConnector(null);\n    setDialogRoute(Routes.List);\n  }, []);\n\n  const handleRetryConnect = useCallback(\n    async (connector: FuelConnector) => {\n      try {\n        setError(null);\n        await connectAsync(connector.name);\n      } catch (err) {\n        setError(err as Error);\n      }\n    },\n    [connectAsync],\n  );\n\n  const handleStartConnection = useCallback(\n    async (connector: FuelConnector) => {\n      setDialogRoute(Routes.Connecting);\n      await handleRetryConnect(connector);\n    },\n    [handleRetryConnect],\n  );\n\n  const handleSelectConnector = useCallback(\n    async (connector: FuelConnector) => {\n      setConnector(connector);\n      if (!connector.installed) {\n        setDialogRoute(Routes.Install);\n      } else if (isNativeConnector(connector)) {\n        handleStartConnection(connector);\n      } else {\n        setDialogRoute(Routes.PredicateExternalDisclaimer);\n      }\n    },\n    [handleStartConnection],\n  );\n\n  const isLoading = useMemo(() => {\n    const hasLoadedConnectors =\n      (fuelConfig.connectors || []).length > connectors.length;\n    return isLoadingConnectors || hasLoadedConnectors;\n  }, [connectors, isLoadingConnectors, fuelConfig]);\n\n  const handleConnect = useCallback(() => {\n    setConnector(null);\n    setError(null);\n    setDialogRoute(Routes.List);\n    setOpen(true);\n  }, []);\n\n  const handleCancel = useCallback(() => {\n    setError(null);\n    setOpen(false);\n  }, []);\n\n  useEffect(() => {\n    const css = document.createElement('style');\n    css.appendChild(\n      document.createTextNode(\n        `@import url(\"https://fonts.googleapis.com/css2?family=Inter:opsz,wght@14..32,100..900&display=swap\"); .fuel-connectors * { box-sizing: border-box; } .fuel-connectors .fuel-connectors-dialog-content:focus { outline: none; } @media (max-width: 430px) { .fuel-connectors .fuel-connectors-dialog-content { top: 50%; width: 100%; border-radius: 36px; } } .fuel-connectors .fuel-connectors-connector-item { transition: background-color 50ms cubic-bezier(0.16, 1, 0.3, 1); background-color: var(--fuel-connector-background); } .fuel-connectors .fuel-connectors-connector-item:active { opacity: 0.8; } .fuel-connectors .fuel-connectors-connector-item:hover { background-color: var(--fuel-connector-hover); } .fuel-connectors .fuel-connectors-connector-button { transition: background-color 50ms cubic-bezier(0.16, 1, 0.3, 1); background-color: var(--fuel-button-background); color: var(--fuel-color-bold); } .fuel-connectors .fuel-connectors-connector-button:visited { color: var(--fuel-color-bold); } .fuel-connectors .fuel-connectors-connector-button:hover { background-color: var(--fuel-button-background-hover); } .fuel-connectors .fuel-connectors-connector-button-primary { transition: background-color 50ms cubic-bezier(0.16, 1, 0.3, 1); background-color: var(--fuel-green-11); color: var(--fuel-black-color); } .fuel-connectors .fuel-connectors-connector-button-primary:visited { color: var(--fuel-black-color); } .fuel-connectors .fuel-connectors-connector-button-primary:hover { background-color: var(--fuel-green-11); } .fuel-connectors .fuel-connectors-back-icon { transition: background-color 50ms cubic-bezier(0.16, 1, 0.3, 1); } .fuel-connectors .fuel-connectors-back-icon[data-connector='false'] { visibility: hidden; } .fuel-connectors .fuel-connectors-back-icon:hover, .fuel-connectors .fuel-connectors-back-icon:active { opacity: 1; background-color: var(--fuel-connector-hover); } .fuel-connectors .fuel-connectors-close-icon { transition: background-color 50ms cubic-bezier(0.16, 1, 0.3, 1); } .fuel-connectors .fuel-connectors-close-icon:hover, .fuel-connectors .fuel-connectors-close-icon:active { opacity: 1; background-color: var(--fuel-connector-hover); } .fuel-connectors .fuel-connectors-button-base { cursor: pointer; } .fuel-connectors .fuel-connectors-button:disabled { cursor: not-allowed; } .fuel-connectors .fuel-connectors-button { transition: background-color 50ms cubic-bezier(0.16, 1, 0.3, 1); background-color: var(--fuel-green-11); } .fuel-connectors .fuel-connectors-button:disabled { background-color: var(--fuel-border-color); } .fuel-connectors .fuel-connectors-button-disconnect { transition: background-color 50ms cubic-bezier(0.16, 1, 0.3, 1); background-color: var(--fuel-button-background); } .fuel-connectors .fuel-connectors-button-disconnect:hover { background-color: var(--fuel-button-background-hover); } .fuel-connectors .fuel-connectors-link-underline:hover { text-decoration: underline; } @keyframes fuelOverlayShow { from { opacity: 0; } to { opacity: 1; } } @keyframes fuelSpin { from { transform: rotate(0deg); } to { transform: rotate(360deg); } } @keyframes fuelContentShow { from { opacity: 0; transform: translate(-50%, -48%) scale(0.96); } to { opacity: 1; transform: translate(-50%, -50%) scale(1); } } @keyframes fuelLoader { 0% { background-position: -468px 0 } 100% { background-position: 468px 0 } }`,\n      ),\n    );\n    document.head.appendChild(css);\n    return () => {\n      document.head.removeChild(css);\n    };\n  }, []);\n\n  const contextValue = useMemo(\n    () => ({\n      // General\n      theme: theme || 'light',\n      fuelConfig,\n      uiConfig,\n      error,\n      setError,\n      // Connection\n      isConnected: !!isConnected,\n      isConnecting,\n      // UI States\n      isLoading,\n      isError,\n      connectors,\n      // Actions\n      connect: handleConnect,\n      cancel: handleCancel,\n      // Dialog only\n      dialog: {\n        route: dialogRoute,\n        setRoute: setDialogRoute,\n        connector,\n        isOpen,\n        connect: handleSelectConnector,\n        retryConnect: handleRetryConnect,\n        back: handleBack,\n        _startConnection: handleStartConnection,\n      },\n    }),\n    [\n      theme,\n      fuelConfig,\n      uiConfig,\n      error,\n      isConnected,\n      isConnecting,\n      isLoading,\n      isError,\n      connectors,\n      connector,\n      dialogRoute,\n      isOpen,\n      handleCancel,\n      handleStartConnection,\n      handleSelectConnector,\n      handleConnect,\n      handleRetryConnect,\n      handleBack,\n    ],\n  );\n\n  return (\n    <FuelConnectContext.Provider value={contextValue}>\n      {children}\n    </FuelConnectContext.Provider>\n  );\n}\n","import { useMutation } from '@tanstack/react-query';\n\nimport { useFuel } from '../providers';\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook to handle connection to the Fuel network in the connected app.\n *\n * @params {object} The properties of the hook.\n * - `connectorName`: The connector's name to use in the connect function.\n *\n * @returns {object} An object containing:\n * - `connect`: function to connect to the Fuel Network synchronously.\n * - `connectAsync`: function to connect to the Fuel Network asynchronously.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useMutation | `...mutationProps`}: Destructured properties from `useMutation` result.\n *\n * @examples\n * To connect to the Fuel network\n * ```ts\n * const { connect } = useConnect();\n * connect('myConnector');\n * ```\n *\n * @example To connect to the Fuel network asynchronously\n * ```ts\n * const { connectAsync } = useConnect();\n * await connectAsync('myConnector');\n * ```\n *\n */\nexport const useConnect = () => {\n  const { fuel } = useFuel();\n\n  const { mutate, mutateAsync, ...mutateProps } = useMutation({\n    mutationFn: async (connectorName?: string | null) => {\n      if (connectorName) {\n        await fuel.selectConnector(connectorName);\n      }\n      return fuel.connect();\n    },\n  });\n\n  return {\n    connect: mutate,\n    connectAsync: mutateAsync,\n    ...mutateProps,\n  };\n};\n","import type { QueryKey } from '@tanstack/react-query';\nimport type { BytesLike, Network, Provider } from 'fuels';\nimport type { NetworkConfig } from '../types';\n\nexport const QUERY_KEYS = {\n  base: ['fuel'] as QueryKey,\n  account: (): QueryKey => {\n    return QUERY_KEYS.base.concat('account');\n  },\n  accounts: (): QueryKey => {\n    return QUERY_KEYS.base.concat('accounts');\n  },\n  assets: (): QueryKey => {\n    return QUERY_KEYS.base.concat('assets');\n  },\n  contract: (\n    address: string,\n    chainId: number | undefined,\n    args: string | undefined,\n  ): QueryKey => {\n    const queryKey = QUERY_KEYS.base.concat('contract').concat(address);\n    if (typeof args !== 'undefined') queryKey.push(args);\n    if (typeof chainId !== 'undefined') queryKey.push(chainId);\n    return queryKey;\n  },\n  chain: (): QueryKey => {\n    return QUERY_KEYS.base.concat('chain');\n  },\n  chainId: (): QueryKey => {\n    return QUERY_KEYS.base.concat('chain-id');\n  },\n  isConnected: (): QueryKey => {\n    return QUERY_KEYS.base.concat('isConnected');\n  },\n  networks: (): QueryKey => {\n    return QUERY_KEYS.base.concat('networks');\n  },\n  provider: (): QueryKey => {\n    return QUERY_KEYS.base.concat('provider');\n  },\n  balance: (\n    address?: string,\n    assetId?: BytesLike,\n    chainId?: number | undefined,\n  ): QueryKey => {\n    const queryKey = QUERY_KEYS.base.concat('balance');\n    if (address) queryKey.push(address);\n    if (assetId) queryKey.push(assetId);\n    if (chainId !== undefined) queryKey.push(chainId);\n    return queryKey;\n  },\n  wallet: (address?: string | null, providerUrl?: string | null): QueryKey => {\n    const queryKey = QUERY_KEYS.base.concat('wallet');\n    if (address) queryKey.push(address);\n    if (providerUrl) queryKey.push(providerUrl);\n    return queryKey;\n  },\n  transaction: (id?: string): QueryKey => {\n    const queryKey = QUERY_KEYS.base.concat('transaction');\n    if (id) queryKey.push(id);\n    return queryKey;\n  },\n  transactionReceipts: (id?: string, chainId?: number | null): QueryKey => {\n    const queryKey = QUERY_KEYS.transaction(id).concat('receipts');\n    if (chainId !== undefined) queryKey.push(chainId);\n    return queryKey;\n  },\n  transactionResult: (id?: string, chainId?: number | null): QueryKey => {\n    const queryKey = QUERY_KEYS.transaction(id).concat('result');\n    if (chainId !== undefined) queryKey.push(chainId);\n    return queryKey;\n  },\n  nodeInfo: (url?: string): QueryKey => {\n    const queryKey = QUERY_KEYS.base.concat('nodeInfo');\n    if (url) queryKey.push(url);\n    return queryKey;\n  },\n  connectorList: (): QueryKey => {\n    return QUERY_KEYS.base.concat('connectorList');\n  },\n  currentConnector: (): QueryKey => {\n    return QUERY_KEYS.base.concat(['currentConnector']);\n  },\n  currentNetwork: (): QueryKey => {\n    return QUERY_KEYS.base.concat('currentNetwork');\n  },\n  isSupportedNetwork: (\n    connectorName: string | null | undefined,\n    networks: Array<NetworkConfig>,\n    network: Partial<Network> | null,\n    isConnected: boolean,\n  ): QueryKey => {\n    const queryKey = QUERY_KEYS.base.concat('isSupportedNetwork');\n    if (connectorName) queryKey.push(connectorName);\n    if (networks) queryKey.push(networks);\n    if (network) queryKey.push(network);\n    if (isConnected) queryKey.push(isConnected);\n    return queryKey;\n  },\n};\n\nexport const MUTATION_KEYS = {\n  connect: 'connect',\n  addAssets: 'addAssets',\n  addNetwork: 'addNetwork',\n};\n","import { CHAIN_IDS } from 'fuels';\nimport type { NetworkConfig } from './types';\n\nexport const CONNECTOR_KEY = 'fuel-current-connector';\n\nexport const NATIVE_CONNECTORS = [\n  'Bako Safe',\n  'Burner Wallet',\n  'Fuel Wallet',\n  'Fuel Wallet Development',\n  'Fuelet Wallet',\n];\n\nexport const DEFAULT_NETWORK: NetworkConfig = {\n  chainId: CHAIN_IDS.fuel.mainnet,\n  url: 'https://mainnet.fuel.network/v1/graphql',\n  bridgeURL: 'https://app.fuel.network/bridge?from=eth&to=fuel&auto_close=true',\n};\n\nexport const BASE_NETWORK_CONFIGS: NetworkConfig[] = [\n  {\n    chainId: CHAIN_IDS.fuel.testnet,\n    url: 'https://testnet.fuel.network/v1/graphql',\n    bridgeURL:\n      'https://app-testnet.fuel.network/bridge?from=eth&to=fuel&auto_close=true',\n  },\n  {\n    chainId: CHAIN_IDS.fuel.devnet,\n    url: 'https://devnet.fuel.network/v1/graphql',\n    bridgeURL:\n      'https://app-devnet.fuel.network/bridge?from=eth&to=fuel&auto_close=true',\n  },\n  DEFAULT_NETWORK,\n];\n","import type { FuelConnector } from 'fuels';\nimport { NATIVE_CONNECTORS } from '../config';\n\nexport function isNativeConnector(connector: FuelConnector) {\n  return NATIVE_CONNECTORS.includes(connector?.name);\n}\n","import type { FuelConnector } from 'fuels';\nimport { type UseNamedQueryParams, useNamedQuery } from '../core';\nimport { useFuel } from '../providers';\nimport { QUERY_KEYS } from '../utils';\n\ntype UseConnectorsParams<TName extends string, TData> = {\n  /**\n   * Additional query parameters to customize the behavior of `useNamedQuery`.\n   */\n  query?: UseNamedQueryParams<TName, FuelConnector[], Error, TData>;\n};\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook to fetch a list of connectors in the connected app.\n *\n * @params {UseConnectorsParams<TName, TData>} Parameters to configure the hook.\n * - `query`: Additional query parameters to customize the behavior of `useNamedQuery`.\n *\n * @returns {object} An object containing:\n * - `connectors`: The list of available connectors.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.\n *\n * @examples\n * To fetch connectors:\n * ```ts\n * const { connectors } = useConnectors();\n * console.log(connectors);\n * ```\n */\nexport const useConnectors = <\n  TName extends string = string,\n  TData = FuelConnector[],\n>({\n  query,\n}: UseConnectorsParams<TName, TData> = {}) => {\n  const { fuel } = useFuel();\n\n  return useNamedQuery('connectors', {\n    queryKey: QUERY_KEYS.connectorList(),\n    queryFn: async () => {\n      return fuel.connectors();\n    },\n    placeholderData: [],\n    ...query,\n  });\n};\n","import type { ConnectorMetadata } from 'fuels';\n\nexport const getImageUrl = (connector: ConnectorMetadata, theme?: string) => {\n  const { image } = connector;\n  if (typeof image === 'object') {\n    return theme === 'dark' ? image.dark : image.light;\n  }\n  return image;\n};\n","import type { ConnectorMetadata } from 'fuels';\n\nimport type { SvgIconProps } from '../../../../types';\nimport { getImageUrl } from '../../utils/getImageUrl';\n\ntype ConnectorIconProps = {\n  connectorName: string;\n  connectorMetadata: ConnectorMetadata;\n} & SvgIconProps;\n\nexport function ConnectorIcon({\n  connectorName,\n  connectorMetadata,\n  ...props\n}: ConnectorIconProps) {\n  if (connectorMetadata.image) {\n    return (\n      <img\n        height={`${props.size}px`}\n        width={`${props.size}px`}\n        src={getImageUrl(connectorMetadata, props.theme)}\n        alt={`${connectorName} icon`}\n      />\n    );\n  }\n\n  return null;\n}\n","import { ConnectorIcon } from '../Core/ConnectorIcon';\n\nimport { useEffect } from 'react';\nimport { useConnectUI } from '../../../../providers';\nimport { Routes } from '../../../../providers/FuelUIProvider';\nimport {\n  ConnectorButtonPrimary,\n  ConnectorContent,\n  ConnectorDescription,\n  ConnectorFooterHelper,\n  ConnectorImage,\n  ConnectorTitle,\n} from './styles';\n\nexport function Connector() {\n  const {\n    theme,\n    dialog: { connector, setRoute },\n  } = useConnectUI();\n  if (!connector) return null;\n  const {\n    install: { action, link, description },\n  } = connector.metadata;\n\n  // Ping extension: if it's installed, it will trigger connector\n  useEffect(() => {\n    const ping = async () => {\n      const isInstalled = await connector.ping();\n      if (isInstalled) setRoute(Routes.Connecting);\n    };\n\n    ping();\n  }, [connector, setRoute]);\n\n  const actionText = action || 'Install';\n\n  return (\n    <div>\n      <ConnectorImage>\n        <ConnectorIcon\n          connectorMetadata={connector.metadata}\n          connectorName={connector.name}\n          size={100}\n          theme={theme}\n        />\n      </ConnectorImage>\n      <ConnectorContent>\n        <ConnectorTitle>{connector.name}</ConnectorTitle>\n        <ConnectorDescription>{description}</ConnectorDescription>\n      </ConnectorContent>\n      <ConnectorButtonPrimary href={link} target=\"_blank\">\n        {actionText}\n      </ConnectorButtonPrimary>\n      <ConnectorFooterHelper>\n        If you have installed it and it is not detected,\n        <br />\n        try refreshing the page.\n      </ConnectorFooterHelper>\n    </div>\n  );\n}\n","export const connectorTitleStyle: React.CSSProperties = {\n  textAlign: 'center',\n  fontSize: '1.2em',\n  fontWeight: 500,\n  color: 'var(--fuel-color-bold)',\n  margin: '0 0 0.4em 0',\n  padding: '0 1.8em',\n};\n\nexport const ConnectorTitle = ({ children }: React.PropsWithChildren) => {\n  return <h2 style={connectorTitleStyle}>{children}</h2>;\n};\n\nexport const connectorDescriptionStyle: React.CSSProperties = {\n  color: 'var(--fuel-gray-12)',\n  fontSize: '0.9em',\n  fontWeight: 400,\n  textAlign: 'center',\n  margin: '0 1.2em',\n  lineHeight: '1.2em',\n  padding: '0 2em',\n  opacity: 0.8,\n};\n\nexport const ConnectorDescription = ({ children }: React.PropsWithChildren) => {\n  return <p style={connectorDescriptionStyle}>{children}</p>;\n};\n\nconst connectorFooterHelperStyle: React.CSSProperties = {\n  color: 'var(--fuel-gray-12)',\n  fontSize: '0.8em',\n  fontWeight: 400,\n  textAlign: 'center',\n  margin: '2em auto 0',\n  lineHeight: '1.2em',\n  padding: '0 2em',\n  opacity: 0.5,\n};\n\nexport const ConnectorFooterHelper = ({\n  children,\n}: React.PropsWithChildren) => {\n  return <p style={connectorFooterHelperStyle}>{children}</p>;\n};\n\nconst connectorDescriptionErrorStyle: React.CSSProperties = {\n  ...connectorDescriptionStyle,\n  color: 'var(--fuel-color-error)',\n};\n\nexport const ConnectorDescriptionError = ({\n  children,\n}: React.PropsWithChildren) => {\n  return <p style={connectorDescriptionErrorStyle}>{children}</p>;\n};\n\nconst connectorImageStyle: React.CSSProperties = {\n  display: 'flex',\n  justifyContent: 'center',\n  height: '6.2em',\n  width: '100%',\n  marginTop: '1.6em',\n  marginBottom: '1.2em',\n};\n\nexport const ConnectorImage = ({ children }: React.PropsWithChildren) => {\n  return <div style={connectorImageStyle}>{children}</div>;\n};\n\nconst connectorButtonStyle: React.CSSProperties = {\n  display: 'flex',\n  boxSizing: 'border-box',\n  textDecoration: 'none',\n  cursor: 'pointer',\n  justifyContent: 'center',\n  alignItems: 'center',\n  margin: '0.4rem 1rem 0',\n  padding: '0.6rem 0',\n  fontSize: '0.875em',\n  borderRadius: 'var(--fuel-border-radius)',\n};\n\nexport const ConnectorButton = ({\n  href,\n  children,\n  style,\n  ...props\n}: React.AnchorHTMLAttributes<HTMLAnchorElement>) => {\n  return (\n    <a\n      href={href}\n      style={connectorButtonStyle}\n      {...props}\n      className=\"fuel-connectors-connector-button\"\n    >\n      {children}\n    </a>\n  );\n};\n\nexport const connectorContentStyle: React.CSSProperties = {\n  display: 'flex',\n  flexDirection: 'column',\n  gap: '8px',\n  marginBottom: '24px',\n};\n\nexport const ConnectorContent = ({ children }: React.PropsWithChildren) => {\n  return <div style={connectorContentStyle}>{children}</div>;\n};\n\nexport const ConnectorButtonPrimary = ({\n  href,\n  children,\n  ...props\n}: React.AnchorHTMLAttributes<HTMLAnchorElement>) => {\n  return (\n    <a\n      href={href}\n      style={connectorButtonStyle}\n      {...props}\n      className=\"fuel-connectors-connector-button-primary\"\n    >\n      {children}\n    </a>\n  );\n};\n","import { useMemo } from 'react';\nimport { useConnectUI } from '../../../../providers/FuelUIProvider';\n\nimport type { FuelConnector } from 'fuels';\nimport { NATIVE_CONNECTORS } from '../../../../config';\nimport { Connector } from './Connector';\nimport { ConnectorsLoader } from './ConnectorsLoader';\nimport { ConnectorList, GroupLastTitle, GroupTitle } from './styles';\n\ninterface GroupedConnectors {\n  native: FuelConnector[];\n  external: FuelConnector[];\n}\n\n// Allowed connectors for mobile platforms\nconst ALLOWED_MOBILE_CONNECTORS = [\n  'Fuelet Wallet',\n  'Burner Wallet',\n  'Ethereum Wallets',\n  'Solana Wallets',\n];\n\nexport function Connectors() {\n  const {\n    fuelConfig,\n    connectors,\n    isLoading,\n    theme,\n    dialog: { connect },\n  } = useConnectUI();\n\n  const isMobile = useMemo(() => {\n    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobile|mobile|CriOS/i.test(\n      navigator.userAgent,\n    );\n  }, []);\n  const { native, external } = useMemo<GroupedConnectors>(() => {\n    const filteredConnectors = isMobile\n      ? connectors.filter((conn) =>\n          ALLOWED_MOBILE_CONNECTORS.some((name) => name === conn.name),\n        )\n      : connectors;\n\n    const external = filteredConnectors.filter((conn) => {\n      return !NATIVE_CONNECTORS.includes(conn.name);\n    });\n    const native = filteredConnectors.filter((conn) => {\n      return NATIVE_CONNECTORS.includes(conn.name);\n    });\n\n    return {\n      native,\n      external,\n    };\n  }, [connectors, isMobile]);\n\n  const shouldTitleGroups = !!native.length && !!external.length;\n\n  if (isLoading) {\n    return (\n      <ConnectorList>\n        <ConnectorsLoader items={fuelConfig.connectors?.length || 2} />\n      </ConnectorList>\n    );\n  }\n\n  return (\n    <ConnectorList>\n      {shouldTitleGroups && <GroupTitle>Fuel Native Wallets</GroupTitle>}\n      {native.map((connector, index) => {\n        return (\n          <Connector\n            key={connector.name}\n            connect={connect}\n            theme={theme}\n            connector={connector}\n            index={index}\n          />\n        );\n      })}\n      {shouldTitleGroups && <GroupLastTitle>Non-Native Wallets</GroupLastTitle>}\n      {external.map((connector, index) => {\n        return (\n          <Connector\n            key={connector.name}\n            connect={connect}\n            theme={theme}\n            connector={connector}\n            index={index}\n          />\n        );\n      })}\n    </ConnectorList>\n  );\n}\n","import type { FuelConnector } from 'fuels';\nimport { memo } from 'react';\nimport type { FuelUIContextType } from '../../../../providers/FuelUIProvider';\nimport { ConnectorIcon } from '../Core/ConnectorIcon';\nimport { ConnectorBadge } from './ConnectorBadge';\nimport { ConnectorItem, ConnectorName } from './styles';\n\ninterface ConnectorProps {\n  connect: FuelUIContextType['dialog']['connect'];\n  theme: FuelUIContextType['theme'];\n  connector: FuelConnector;\n  index: number;\n}\n\nconst _Connector = ({ connect, theme, connector, index }: ConnectorProps) => {\n  return (\n    <ConnectorItem\n      tabIndex={index + 1}\n      key={connector.name}\n      aria-label={`Connect to ${connector.name}`}\n      data-installed={connector.installed}\n      data-connected={connector.connected}\n      onClick={(e) => {\n        e.preventDefault();\n        connect(connector);\n      }}\n    >\n      <ConnectorIcon\n        connectorMetadata={connector.metadata}\n        connectorName={connector.name}\n        size={32}\n        theme={theme}\n      />\n      <ConnectorName>{connector.name}</ConnectorName>\n      <ConnectorBadge\n        name={connector.name}\n        connected={connector.connected}\n        installed={connector.installed}\n      />\n    </ConnectorItem>\n  );\n};\n\nexport const Connector = memo(_Connector);\n","import type { FuelConnector } from 'fuels';\nimport { useMemo } from 'react';\nimport { NATIVE_CONNECTORS } from '../../../../config';\nimport { BadgeInfo, BadgeSuccess } from './styles';\n\nfunction isMobile() {\n  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobile|mobile|CriOS/i.test(\n    navigator.userAgent,\n  );\n}\n\nfunction isFueletWebView() {\n  return /FueletMobileApp/i.test(navigator.userAgent);\n}\n\nfunction isFueletConnectorOnMobileBrowser(connectorName: string) {\n  return connectorName === 'Fuelet Wallet' && isMobile() && !isFueletWebView();\n}\n\ninterface ConnectorBadgeProps {\n  name: FuelConnector['name'];\n  connected: FuelConnector['connected'];\n  installed: FuelConnector['installed'];\n}\n\nexport function ConnectorBadge({\n  name,\n  connected,\n  installed,\n}: ConnectorBadgeProps) {\n  const isBlacklisted = useMemo<boolean>(() => {\n    return !NATIVE_CONNECTORS.includes(name);\n  }, [name]);\n\n  if (connected) {\n    return <BadgeSuccess>Connected</BadgeSuccess>;\n  }\n\n  if (!isBlacklisted && installed && !isFueletConnectorOnMobileBrowser(name)) {\n    return <BadgeInfo>Installed</BadgeInfo>;\n  }\n\n  return null;\n}\n","const connectorItemStyle: React.CSSProperties = {\n  display: 'flex',\n  alignItems: 'center',\n  boxSizing: 'border-box',\n  cursor: 'pointer',\n  width: '100%',\n  gap: 'var(--fuel-items-gap)',\n  padding: '0.8em',\n  borderRadius: '16px',\n  fontWeight: 400,\n};\n\nexport const ConnectorItem = ({\n  children,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div\n      style={connectorItemStyle}\n      {...props}\n      className=\"fuel-connectors-connector-item\"\n    >\n      {children}\n    </div>\n  );\n};\n\nconst connectorListStyle: React.CSSProperties = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  gap: 'var(--fuel-items-gap)',\n  padding: '0px 14px',\n};\n\nexport const ConnectorList = ({ children }: React.PropsWithChildren) => {\n  return <div style={connectorListStyle}>{children}</div>;\n};\n\nconst connectorNameStyle: React.CSSProperties = {\n  fontSize: '0.875em',\n};\n\nexport const ConnectorName = ({ children }: React.PropsWithChildren) => {\n  return <div style={connectorNameStyle}>{children}</div>;\n};\n\nconst connectorImgStyle: React.CSSProperties = {\n  objectFit: 'cover',\n};\n\nexport const ConnectorImg = (\n  props: React.ImgHTMLAttributes<HTMLImageElement>,\n) => {\n  return <img {...props} alt={props.alt} style={connectorImgStyle} />;\n};\n\nconst badgeStyle: React.CSSProperties = {\n  borderRadius: 'var(--fuel-border-radius)',\n  fontSize: 'var(--fuel-font-size-xs)',\n  padding: '2px 8px',\n  textTransform: 'uppercase',\n  marginLeft: 'auto',\n};\n\nexport const BadgeInfo = ({ children }: React.PropsWithChildren) => {\n  const style: React.CSSProperties = {\n    ...badgeStyle,\n    backgroundColor: 'var(--fuel-blue-3)',\n    color: 'var(--fuel-blue-11)',\n  };\n\n  return <div style={style}>{children}</div>;\n};\n\nexport const BadgeSuccess = ({ children }: React.PropsWithChildren) => {\n  const style: React.CSSProperties = {\n    ...badgeStyle,\n    backgroundColor: 'var(--fuel-green-3)',\n    color: 'var(--fuel-green-11)',\n  };\n\n  return <div style={style}>{children}</div>;\n};\n\nconst groupTitleStyle: React.CSSProperties = {\n  width: '100%',\n  color: '#797979',\n  fontSize: 'var(--fuel-font-size-xs)',\n  fontStyle: 'normal',\n  fontWeight: 400,\n  margin: 0,\n};\n\nexport const GroupTitle = ({ children }: React.PropsWithChildren) => {\n  return <p style={groupTitleStyle}>{children}</p>;\n};\n\nexport const GroupLastTitle = ({ children }: React.PropsWithChildren) => {\n  const style: React.CSSProperties = {\n    ...groupTitleStyle,\n    marginTop: '14px',\n  };\n\n  return <p style={style}>{children}</p>;\n};\n","import * as Dialog from '@radix-ui/react-dialog';\n\nimport { BackIcon as CBackIcon } from '../../icons/BackIcon';\nimport { CloseIcon as CCloseIcon } from '../../icons/CloseIcon';\nimport { CopyIcon as CCopyIcon } from '../../icons/CopyIcon';\nimport type { SvgIconProps } from '../../types';\n\nconst dialogHeaderStyle: React.CSSProperties = {\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  paddingLeft: '16px',\n  paddingRight: '16px',\n};\n\nexport const DialogHeader = ({\n  children,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div style={dialogHeaderStyle} {...props}>\n      {children}\n    </div>\n  );\n};\n\nconst dialogTitleStyle: React.CSSProperties = {\n  padding: '8px 14px 12px',\n  margin: 0,\n  textAlign: 'center',\n  fontSize: 'var(--fuel-font-size)',\n  fontWeight: 500,\n};\n\nexport const DialogTitle = ({\n  children,\n  ...props\n}: React.HTMLAttributes<HTMLHeadingElement>) => {\n  return (\n    <Dialog.Title style={dialogTitleStyle} {...props}>\n      {children}\n    </Dialog.Title>\n  );\n};\n\nconst dividerStyle: React.CSSProperties = {\n  height: '1px',\n  width: '100%',\n  backgroundColor: 'var(--fuel-border-color)',\n  margin: '10px 0',\n  padding: 0,\n};\n\nexport const Divider = (props: React.HTMLAttributes<HTMLDivElement>) => {\n  return <div style={dividerStyle} {...props} />;\n};\n\nconst dialogMainStyle: React.CSSProperties = {\n  position: 'relative',\n  overflowY: 'auto',\n};\n\nexport const DialogMain = (props: React.HTMLAttributes<HTMLDivElement>) => {\n  return <div style={dialogMainStyle} {...props} />;\n};\n\nconst backIconStyle: React.CSSProperties = {\n  fill: 'var(--fuel-color)',\n  padding: '7px',\n  borderRadius: '12px',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  cursor: 'pointer',\n};\n\nexport const BackIcon = ({ size, ...props }: SvgIconProps) => {\n  return (\n    <CBackIcon\n      size={size}\n      style={backIconStyle}\n      {...props}\n      className=\"fuel-connectors-back-icon\"\n    />\n  );\n};\n\nconst closeIconStyle: React.CSSProperties = {\n  fill: 'var(--fuel-color)',\n  padding: '7px',\n  borderRadius: '12px',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  cursor: 'pointer',\n};\n\nexport const CloseIcon = ({ size, ...props }: SvgIconProps) => {\n  return (\n    <CCloseIcon\n      size={size}\n      style={closeIconStyle}\n      {...props}\n      className=\"fuel-connectors-close-icon\"\n    />\n  );\n};\n\nconst copyIconStyle: React.CSSProperties = {\n  fill: 'var(--fuel-color)',\n  padding: '7px',\n  borderRadius: '12px',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  cursor: 'pointer',\n};\n\nexport const CopyIcon = ({ size, ...props }: SvgIconProps) => {\n  return (\n    <CCopyIcon\n      size={size}\n      style={copyIconStyle}\n      {...props}\n      className=\"fuel-connectors-close-icon\"\n    />\n  );\n};\n\nconst placeholderLoaderStyle: React.CSSProperties = {\n  animationDuration: '1s',\n  animationFillMode: 'forwards',\n  animationIterationCount: 'infinite',\n  animationName: 'fuelLoader',\n  animationTimingFunction: 'linear',\n  backgroundColor: '#d1d5d9',\n  background: 'var(--fuel-loader-background)',\n  backgroundSize: '1000px 104px',\n  height: 'fit-content',\n  position: 'relative',\n  overflow: 'hidden',\n  color: 'transparent',\n  pointerEvents: 'none',\n};\n\nexport const PlaceholderLoader = ({\n  children,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div style={placeholderLoaderStyle} {...props}>\n      {children}\n    </div>\n  );\n};\n","import type { SvgIconProps } from '../types';\n\nexport function BackIcon({ size, ...props }: SvgIconProps) {\n  return (\n    <svg\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 16 16\"\n      {...props}\n    >\n      <title>Back Icon</title>\n      <path\n        fill=\"currentColor\"\n        fillRule=\"evenodd\"\n        d=\"M11.04 1.46a1 1 0 0 1 0 1.41L5.91 8l5.13 5.13a1 1 0 1 1-1.41 1.41L3.79 8.71a1 1 0 0 1 0-1.42l5.84-5.83a1 1 0 0 1 1.41 0Z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  );\n}\n","import type { SvgIconProps } from '../types';\n\nexport function CloseIcon({ size, ...props }: SvgIconProps) {\n  return (\n    <svg\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 16 16\"\n      {...props}\n    >\n      <title>Close Icon</title>\n      <path\n        fill=\"currentColor\"\n        fillRule=\"evenodd\"\n        d=\"M2.54 2.54a1 1 0 0 1 1.42 0L8 6.6l4.04-4.05a1 1 0 1 1 1.42 1.42L9.4 8l4.05 4.04a1 1 0 0 1-1.42 1.42L8 9.4l-4.04 4.05a1 1 0 0 1-1.42-1.42L6.6 8 2.54 3.96a1 1 0 0 1 0-1.42Z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  );\n}\n","import type { SvgIconProps } from '../types';\n\nexport function CopyIcon({ size, ...props }: SvgIconProps) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      {...props}\n    >\n      <title>Copy Icon</title>\n      <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M7 7m0 2.667a2.667 2.667 0 0 1 2.667 -2.667h8.666a2.667 2.667 0 0 1 2.667 2.667v8.666a2.667 2.667 0 0 1 -2.667 2.667h-8.666a2.667 2.667 0 0 1 -2.667 -2.667z\" />\n      <path d=\"M4.012 16.737a2.005 2.005 0 0 1 -1.012 -1.737v-10c0 -1.1 .9 -2 2 -2h10c.75 0 1.158 .385 1.5 1\" />\n    </svg>\n  );\n}\n","import { PlaceholderLoader } from '../../styles';\n\nimport { ConnectorItem, ConnectorName } from './styles';\n\ntype ConnectorsLoaderProps = {\n  items: number;\n};\n\nexport function ConnectorsLoader({ items }: ConnectorsLoaderProps) {\n  const itemsArray = Array.from({ length: items });\n  return itemsArray.map((_, index) => (\n    // biome-ignore lint/suspicious/noArrayIndexKey: This is a placeholder loader\n    <ConnectorItem key={index}>\n      <PlaceholderLoader>\n        <div style={{ height: 32, width: 32 }} />\n      </PlaceholderLoader>\n      <PlaceholderLoader>\n        <ConnectorName>Fuel Wallet</ConnectorName>\n      </PlaceholderLoader>\n    </ConnectorItem>\n  ));\n}\n","import { Routes, useConnectUI } from '../../../../providers/FuelUIProvider';\nimport { ConnectorIcon } from '../Core/ConnectorIcon';\n\nimport type { ConnectorEvent } from 'fuels';\nimport { useEffect, useMemo, useState } from 'react';\nimport { Spinner } from '../../../../icons/Spinner';\nimport { useFuel } from '../../../../providers/FuelHooksProvider';\nimport { isNativeConnector } from '../../../../utils/isNativeConnector';\nimport { PREDICATE_DISCLAIMER_KEY } from '../PredicateAddressDisclaimer/PredicateAddressDisclaimer';\nimport {\n  ConnectorButton,\n  ConnectorButtonPrimary,\n  ConnectorContent,\n  ConnectorDescription,\n  ConnectorDescriptionError,\n  ConnectorImage,\n  ConnectorTitle,\n} from './styles';\n\ntype ConnectorProps = {\n  className?: string;\n};\n\nexport interface CustomCurrentConnectorEvent extends ConnectorEvent {\n  metadata?: {\n    pendingSignature: boolean;\n  };\n}\n\nenum ConnectStep {\n  CONNECT = 'connect',\n  SIGN = 'sign',\n}\n\nexport function Connecting({ className }: ConnectorProps) {\n  const { fuel } = useFuel();\n  const {\n    error,\n    isConnecting,\n    theme,\n    cancel,\n    dialog: { route, setRoute, connector, retryConnect },\n    isConnected,\n  } = useConnectUI();\n\n  const [connectStep, setConnectStep] = useState<ConnectStep>(\n    ConnectStep.CONNECT,\n  );\n\n  const { description, operation, cta } = useMemo(() => {\n    if (connectStep === ConnectStep.CONNECT) {\n      return {\n        description: `Click on the button below to connect to ${location.origin}.`,\n        operation: 'connection',\n        cta: 'Connect',\n      };\n    }\n\n    return {\n      description:\n        'Sign this message to prove you own this wallet and proceed. Canceling will disconnect you.',\n      operation: 'signature',\n      cta: 'Sign',\n    };\n  }, [connectStep]);\n\n  // Auto-close connecting\n  useEffect(() => {\n    if (isConnected && route === Routes.Connecting && !isConnecting) {\n      // Connected to a native connector, we can close the dialog\n      if (connector && isNativeConnector(connector)) {\n        cancel();\n        return;\n      }\n\n      // If the connector is not native, let's check if we have already displayed the disclaimer\n      if (localStorage.getItem(PREDICATE_DISCLAIMER_KEY)) {\n        cancel();\n        return;\n      }\n\n      // So we need to show the disclaimer about predicates\n      setRoute(Routes.PredicateAddressDisclaimer);\n    }\n  }, [isConnected, connector, route, setRoute, isConnecting, cancel]);\n\n  // Switching to signing ownership mode\n  useEffect(() => {\n    const onCurrentConnectorChange = (e: CustomCurrentConnectorEvent) => {\n      if (e.metadata && 'pendingSignature' in e.metadata) {\n        setConnectStep(\n          e.metadata.pendingSignature ? ConnectStep.SIGN : ConnectStep.CONNECT,\n        );\n      }\n    };\n\n    fuel.on(fuel.events.currentConnector, onCurrentConnectorChange);\n\n    return () => {\n      fuel.off(fuel.events.currentConnector, onCurrentConnectorChange);\n    };\n  }, [fuel]);\n\n  if (!connector) return null;\n\n  return (\n    <div className={className}>\n      <ConnectorImage>\n        <ConnectorIcon\n          connectorMetadata={connector.metadata}\n          connectorName={connector.name}\n          size={100}\n          theme={theme}\n        />\n      </ConnectorImage>\n      <ConnectorContent>\n        <ConnectorTitle>{connector.name}</ConnectorTitle>\n        {isConnecting ? (\n          <ConnectorDescription>\n            Requesting {operation} to <br /> {connector.name}.\n          </ConnectorDescription>\n        ) : (\n          <ConnectorDescription>{description}</ConnectorDescription>\n        )}\n        {error && (\n          <ConnectorDescriptionError>{error.message}</ConnectorDescriptionError>\n        )}\n      </ConnectorContent>\n      {isConnecting ? (\n        <ConnectorButton>\n          <Spinner size={26} color=\"var(--fuel-loader-background)\" />\n        </ConnectorButton>\n      ) : (\n        <ConnectorButtonPrimary onClick={() => retryConnect(connector)}>\n          {cta}\n        </ConnectorButtonPrimary>\n      )}\n    </div>\n  );\n}\n","interface SpinnerProps {\n  size: number;\n  color: string;\n}\n\nexport const Spinner = ({ size, color }: SpinnerProps) => {\n  const spinnerStyle: React.CSSProperties = {\n    height: `${size}px`,\n    width: `${size}px`,\n    border: '4px solid rgba(0, 0, 0, 0.1)',\n    borderTopColor: color,\n    borderRadius: '50%',\n    animation: 'fuelSpin 1s infinite linear',\n  };\n\n  return <div style={spinnerStyle} />;\n};\n","import type { FuelConfig } from 'fuels';\nimport { Fuel } from 'fuels';\nimport type { ReactNode } from 'react';\nimport { createContext, useContext, useRef } from 'react';\n\nimport type { NetworkConfig } from '../types';\nimport { FuelEventsWatcher } from './FuelEventsWatcher';\n\ntype FuelProviderProps = {\n  children?: ReactNode;\n  fuelConfig?: FuelConfig;\n  networks: Array<NetworkConfig>;\n};\n\nexport type FuelReactContextType = {\n  fuel: Fuel;\n  networks: Array<NetworkConfig>;\n};\n\nexport const FuelReactContext = createContext<FuelReactContextType | null>(\n  null,\n);\n\nexport const useFuel = () => {\n  const context = useContext(FuelReactContext) as FuelReactContextType;\n  if (!context) {\n    throw new Error('useFuel must be used within a FuelHooksProvider');\n  }\n  return context;\n};\n\nexport const FuelHooksProvider = ({\n  children,\n  fuelConfig,\n  networks,\n}: FuelProviderProps) => {\n  const fuel = useRef<Fuel>(new Fuel(fuelConfig));\n  return (\n    <FuelReactContext.Provider value={{ fuel: fuel.current, networks }}>\n      <FuelEventsWatcher />\n      {children}\n    </FuelReactContext.Provider>\n  );\n};\n","import { useQueryClient } from '@tanstack/react-query';\nimport { useEffect } from 'react';\n\nimport { QUERY_KEYS } from '../utils';\n\nimport { useFuel } from './FuelHooksProvider';\n\nexport function FuelEventsWatcher() {\n  const { fuel } = useFuel();\n  const queryClient = useQueryClient();\n\n  function onCurrentConnectorChange() {\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.account() });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.isConnected() });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.wallet() });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.balance() });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.provider() });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.nodeInfo() });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.accounts() });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.currentConnector() });\n  }\n\n  async function onConnectorsChange() {\n    queryClient.resetQueries({\n      queryKey: QUERY_KEYS.connectorList(),\n      exact: true,\n    });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.currentConnector() });\n  }\n\n  function onCurrentAccountChange() {\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.account() });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.wallet() });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.balance() });\n  }\n\n  function onConnectionChange() {\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.currentConnector() });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.isConnected() });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.account() });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.wallet() });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.balance() });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.provider() });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.nodeInfo() });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.accounts() });\n    queryClient.resetQueries({\n      queryKey: QUERY_KEYS.connectorList(),\n      exact: true,\n    });\n  }\n\n  function onNetworkChange() {\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.currentNetwork() });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.networks() });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.provider() });\n    queryClient.invalidateQueries({\n      queryKey: QUERY_KEYS.transactionReceipts(),\n    });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.chain() });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.nodeInfo() });\n  }\n\n  function onAccountsChange() {\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.account() });\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.accounts() });\n  }\n\n  function onAssetsChange() {\n    queryClient.invalidateQueries({ queryKey: QUERY_KEYS.assets() });\n  }\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: We don't need to add all the dependencies here\n  useEffect(() => {\n    fuel.on(fuel.events.currentAccount, onCurrentAccountChange);\n    fuel.on(fuel.events.currentConnector, onCurrentConnectorChange);\n    fuel.on(fuel.events.connectors, onConnectorsChange);\n    fuel.on(fuel.events.connection, onConnectionChange);\n    fuel.on(fuel.events.accounts, onAccountsChange);\n    fuel.on(fuel.events.currentNetwork, onNetworkChange);\n    fuel.on(fuel.events.assets, onAssetsChange);\n\n    return () => {\n      fuel.off(fuel.events.currentConnector, onCurrentConnectorChange);\n      fuel.off(fuel.events.currentAccount, onCurrentAccountChange);\n      fuel.off(fuel.events.connectors, onConnectorsChange);\n      fuel.off(fuel.events.connection, onConnectionChange);\n      fuel.off(fuel.events.accounts, onAccountsChange);\n      fuel.off(fuel.events.currentNetwork, onNetworkChange);\n      fuel.off(fuel.events.assets, onAssetsChange);\n    };\n  }, [fuel, queryClient]);\n\n  return null;\n}\n","import { useConnectUI } from '../../../../providers/FuelUIProvider';\nimport { ConnectorButtonPrimary, ConnectorContent } from '../Connector/styles';\n\nexport const PREDICATE_DISCLAIMER_KEY = '@fuels/predicate-address-disclaimer';\n\nexport function PredicateAddressDisclaimer() {\n  const { cancel } = useConnectUI();\n\n  const onContinueToApplication = () => {\n    localStorage.setItem(PREDICATE_DISCLAIMER_KEY, Date.now().toString());\n    cancel();\n  };\n\n  return (\n    <div>\n      <ConnectorContent>\n        <div\n          style={{\n            color: 'var(--fuel-blue-a11)',\n            backgroundColor: 'var(--fuel-blue-a3)',\n            fontSize: 'var(--fuel-font-size-xs)',\n            margin: '0 1.2em',\n            border: '1px solid var(--fuel-blue-6)',\n            borderRadius: 'var(--fuel-border-radius)',\n            padding: 12,\n          }}\n        >\n          <b>Please Note:</b> EVM/SVM addresses will differ from your{' '}\n          <b>Fuel predicate address</b>. This is expected behavior.\n          <br />\n          <br />\n          For more details,{' '}\n          <a\n            href=\"https://github.com/FuelLabs/fuel-connectors/wiki\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            className=\"fuel-connectors-link-underline\"\n            style={{\n              fontWeight: 600,\n            }}\n          >\n            check our documentation\n          </a>\n          .\n        </div>\n      </ConnectorContent>\n\n      <ConnectorButtonPrimary onClick={onContinueToApplication}>\n        Continue to application\n      </ConnectorButtonPrimary>\n    </div>\n  );\n}\n","import * as Dialog from '@radix-ui/react-dialog';\n\nconst dialogContentStyle: React.CSSProperties = {\n  display: 'flex',\n  flexDirection: 'column',\n  overflow: 'hidden',\n  color: 'var(--fuel-color)',\n  userSelect: 'none',\n  maxHeight: 'calc(100% - 20px)',\n  backgroundColor: 'var(--fuel-dialog-background)',\n  position: 'fixed',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  borderRadius: '36px',\n  padding: '14px 0px',\n  paddingBottom: '36px',\n  animation: 'fuelContentShow 150ms cubic-bezier(0.16, 1, 0.3, 1)',\n  top: '50%',\n  width: '360px',\n  maxWidth: 'calc(100% - 20px)',\n  boxShadow:\n    'hsl(206 22% 7% / 35%) 0px 10px 38px -10px, hsl(206 22% 7% / 20%) 0px 10px 20px -15px',\n};\n\nexport const DialogContent = (props: Dialog.DialogContentProps) => {\n  return (\n    <Dialog.Content\n      style={dialogContentStyle}\n      {...props}\n      className=\"fuel-connectors-dialog-content\"\n      // Workaround to prevent closing dialog when interacting with WalletConnect Modal\n      onPointerDownOutside={(e) => {\n        const walletConnectDialog = document.querySelector('w3m-modal');\n        if (walletConnectDialog?.classList.contains('open')) {\n          e.preventDefault();\n        }\n      }}\n    />\n  );\n};\n","import * as DialogRadix from '@radix-ui/react-dialog';\nimport { useEffect, useState } from 'react';\nimport { getThemeVariables } from '../../../../constants/themes';\nimport { DialogOverlay, FuelRoot } from './styles';\n\nexport function DialogFuel({\n  children,\n  theme,\n  open,\n  onOpenChange,\n}: DialogRadix.DialogProps & { theme: 'dark' | 'light' }) {\n  // Fix hydration problem between nextjs render and frontend render\n  // UI was not getting updated and theme colors was set wrongly\n  // see more here https://nextjs.org/docs/messages/react-hydration-error\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  // Ensure that the dialog is only rendered on the client\n  if (!isClient) return null;\n\n  return (\n    <DialogRadix.Root open={open} onOpenChange={onOpenChange}>\n      <DialogRadix.Portal>\n        <DialogOverlay>\n          <FuelRoot style={getThemeVariables(theme)}>{children}</FuelRoot>\n        </DialogOverlay>\n      </DialogRadix.Portal>\n    </DialogRadix.Root>\n  );\n}\n","const shared = {\n  /* Fonts */\n  '--fuel-font-family':\n    '\"Inter\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif',\n  '--fuel-font-size': '16px',\n  '--fuel-font-size-xs': '12px',\n  '--fuel-letter-spacing': '-0.64px',\n  /* Spacing */\n  '--fuel-border-radius': '6px',\n  '--fuel-items-gap': '8px',\n  /* Border */\n  '--fuel-border': '1px solid var(--fuel-border-color)',\n  '--fuel-color-error': '#f25a68',\n} as React.CSSProperties;\n\nconst light = {\n  '--fuel-color': '#141414',\n  '--fuel-color-bold': '#000000',\n  '--fuel-dialog-background': 'white',\n  '--fuel-overlay-background': 'rgba(71,88,107,0.24)',\n  '--fuel-connector-background': 'rgb(250 250 250)',\n  '--fuel-connector-hover': 'rgb(241 243 244)',\n  '--fuel-border-color': 'hsl(210deg 9.52% 83.53%)',\n  '--fuel-border-hover': 'hsla(0, 0%, 78.04%, 1)',\n  '--fuel-button-background': 'rgb(220 220 220)',\n  '--fuel-button-background-hover': 'rgb(203 205 207)',\n  '--fuel-loader-background':\n    'linear-gradient(to right, hsl(0, 0%, 92%) 8%, hsl(0, 0%, 85%) 18%, hsl(0, 0%, 92%) 33%)',\n  '--fuel-green-3': '#D9FCE3',\n  '--fuel-green-11': '#008347',\n  '--fuel-blue-3': '#E6F4FE',\n  '--fuel-blue-6': '#ACD8FC',\n  '--fuel-blue-11': '#0D74CE',\n  '--fuel-blue-a3': 'color(display-p3 0.7686 0.898 1/0.334)',\n  '--fuel-blue-a11': 'color(display-p3 0 0.3059 0.7333/0.794)',\n  '--fuel-gray-10': '#838383',\n  '--fuel-gray-11': '#646464',\n  '--fuel-gray-12': '#202020',\n  '--fuel-separator-color': 'rgb(83 79 79 / 13%)',\n  '--fuel-black-color': '#FFFFFF',\n} as React.CSSProperties;\n\nconst dark = {\n  '--fuel-color': '#e4e7e7',\n  '--fuel-color-bold': '#ffffff',\n  '--fuel-dialog-background': 'rgb(25 26 26)',\n  '--fuel-overlay-background': 'rgba(20, 20, 20, 0.8)',\n  '--fuel-connector-background': 'rgba(255, 255, 255, 0.02)',\n  '--fuel-connector-hover': 'rgba(255, 255, 255, 0.05)',\n  '--fuel-border-color': 'rgba(255, 255, 255, 0.05)',\n  '--fuel-border-hover': 'hsla(0, 0%, 50%, 1)',\n  '--fuel-button-background': 'hsla(0, 0%, 30%, 1)',\n  '--fuel-button-background-hover': 'hsla(0, 0%, 40%, 1)',\n  '--fuel-loader-background':\n    'linear-gradient(to right, hsl(0, 0%, 20%) 8%, hsl(0, 0%, 25%) 18%, hsl(0, 0%, 20%) 33%)',\n  '--fuel-green-3': '#0F2E1B',\n  '--fuel-green-11': '#00DD75',\n  '--fuel-blue-3': '#0D2847',\n  '--fuel-blue-6': '#104D87',\n  '--fuel-blue-11': '#70B9FF',\n  '--fuel-blue-a3': 'color(display-p3 0.1216 0.4627 1/0.219)',\n  '--fuel-blue-a11': 'color(display-p3 0.5176 0.7373 1/0.975)',\n  '--fuel-gray-10': '#7b7b7b',\n  '--fuel-gray-11': '#b4b4b4',\n  '--fuel-gray-12': '#eee',\n  '--fuel-separator-color': 'rgb(165 165 165 / 13%)',\n  '--fuel-black-color': '#141414',\n} as React.CSSProperties;\n\nconst themes: Record<'light' | 'dark', React.CSSProperties> = {\n  light,\n  dark,\n};\n\nexport const getThemeVariables = (\n  theme: 'light' | 'dark',\n): React.CSSProperties => {\n  const colors = themes[theme];\n  return {\n    ...shared,\n    ...colors,\n  };\n};\n","import * as Dialog from '@radix-ui/react-dialog';\n\nconst dialogOverlayStyle: React.CSSProperties = {\n  backgroundColor: 'var(--fuel-overlay-background)',\n  position: 'fixed',\n  inset: 0,\n  animation: 'fuelOverlayShow 150ms cubic-bezier(0.16, 1, 0.3, 1)',\n};\n\nexport const DialogOverlay = ({ children }: React.PropsWithChildren) => {\n  return (\n    <Dialog.Overlay style={dialogOverlayStyle} asChild>\n      {children}\n    </Dialog.Overlay>\n  );\n};\n\ninterface FuelRootProps {\n  style: React.CSSProperties;\n}\n\nconst fuelRootStyle: React.CSSProperties = {\n  position: 'fixed',\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n  height: '100%',\n  width: '100%',\n  margin: 0,\n  padding: 0,\n  zIndex: 99,\n  fontFamily: 'var(--fuel-font-family)',\n  fontSize: 'var(--fuel-font-size)',\n};\n\nexport const FuelRoot = ({\n  style,\n  children,\n}: React.PropsWithChildren<FuelRootProps>) => {\n  return (\n    <div className=\"fuel-connectors\" style={{ ...fuelRootStyle, ...style }}>\n      {children}\n    </div>\n  );\n};\n","import { connectorContentStyle } from '../Connector/styles';\n\nexport const disclaimerContainerStyle: React.CSSProperties = {\n  ...connectorContentStyle,\n  gap: '12px',\n  borderLeft: '2px solid',\n  borderColor: '#F5CC00',\n  marginLeft: '1rem',\n  padding: '0.5em 2em',\n  fontSize: '1em',\n};\n\nexport const DisclaimerContainer = ({ children }: React.PropsWithChildren) => {\n  return <div style={disclaimerContainerStyle}>{children}</div>;\n};\n\nconst disclaimerListStyle: React.CSSProperties = {\n  fontWeight: 400,\n  textAlign: 'left',\n  margin: 0,\n  paddingInlineStart: '16px',\n  lineHeight: '1.4em',\n  opacity: 0.8,\n  listStyleType: 'disc',\n};\n\nexport const DisclaimerList = ({\n  children,\n  ...props\n}: React.HTMLAttributes<HTMLUListElement>) => {\n  return (\n    <ul\n      style={disclaimerListStyle}\n      {...props}\n      className=\"fuel-connectors-disclaimer-list\"\n    >\n      {children}\n    </ul>\n  );\n};\n","import { useConnectUI } from '../../../../providers/FuelUIProvider';\nimport {\n  ConnectorButton,\n  ConnectorButtonPrimary,\n  connectorDescriptionStyle,\n  connectorTitleStyle,\n} from '../Connector/styles';\nimport { DisclaimerContainer, DisclaimerList } from './styles';\n\nexport function PredicateExternalDisclaimer() {\n  const {\n    dialog: { connector, _startConnection, back },\n  } = useConnectUI();\n\n  if (!connector) return null;\n\n  return (\n    <div>\n      <DisclaimerContainer>\n        <h2\n          style={{\n            ...connectorTitleStyle,\n            color: 'var(--fuel-color-bold)',\n            fontSize: '1.2em',\n            textAlign: 'left',\n            margin: 0,\n            padding: 0,\n          }}\n        >\n          Non-Native Wallet\n        </h2>\n        <p\n          style={{\n            ...connectorDescriptionStyle,\n            fontSize: '0.9em',\n            textAlign: 'left',\n            margin: 0,\n            padding: 0,\n          }}\n        >\n          Fuel supports any wallet from Ethereum or Solana, but these wallets\n          have limited functionality for now:\n        </p>\n        <DisclaimerList>\n          <li>\n            <span\n              style={{\n                fontSize: '0.9em',\n                fontWeight: 600,\n                color: 'var(--fuel-gray-12)',\n              }}\n            >\n              Limited Balance Visibility\n            </span>\n            <br />\n            <span\n              style={{\n                fontSize: '0.8em',\n                color: 'var(--fuel-gray-11)',\n              }}\n            >\n              You cannot see balances natively in the wallet (e.g. Metamask).\n              You must visit the Fuel Block Explorer to see balances.\n            </span>\n          </li>\n          <li style={{ marginTop: 5, marginBottom: 5 }}>\n            <span\n              style={{\n                fontSize: '0.9em',\n                fontWeight: 600,\n                color: 'var(--fuel-gray-12)',\n              }}\n            >\n              Signatures are Blind\n            </span>\n            <br />\n            <span style={{ fontSize: '0.8em', color: 'var(--fuel-gray-11)' }}>\n              Ensure you only use trusted applications.\n            </span>\n          </li>\n          <li>\n            <span\n              style={{\n                fontSize: '0.9em',\n                fontWeight: 600,\n                color: 'var(--fuel-gray-12)',\n              }}\n            >\n              No Multi-Sigs\n            </span>\n            <br />\n            <span style={{ fontSize: '0.8em', color: 'var(--fuel-gray-11)' }}>\n              Multi-sigs and smart contract wallets (e.g. SAFE) are not\n              supported.\n            </span>\n          </li>\n        </DisclaimerList>\n      </DisclaimerContainer>\n      <ConnectorButtonPrimary onClick={() => _startConnection(connector)}>\n        Proceed\n      </ConnectorButtonPrimary>\n      <ConnectorButton onClick={() => back()}>\n        Select a Native Wallet\n      </ConnectorButton>\n    </div>\n  );\n}\n","import type { FuelConfig } from 'fuels';\n\nimport { Connect } from '../ui/Connect';\n\nimport { useMemo } from 'react';\nimport type { NetworkConfig, UIConfig } from '../types';\nimport { BridgeDialog } from '../ui/Connect/components/Bridge/BridgeDialog';\nimport { NetworkDialog } from '../ui/Connect/components/Network/NetworkDialog';\nimport { useNetworkConfigs } from '../ui/Connect/hooks/useNetworkConfigs';\nimport { FuelHooksProvider } from './FuelHooksProvider';\nimport { FuelUIProvider, type FuelUIProviderProps } from './FuelUIProvider';\n\nexport { useFuel } from './FuelHooksProvider';\nexport { useConnectUI } from './FuelUIProvider';\n\ntype FuelProviderProps = {\n  ui?: boolean;\n  uiConfig?: UIConfig;\n  fuelConfig: FuelConfig;\n  networks?: Array<NetworkConfig>;\n} & Pick<FuelUIProviderProps, 'theme' | 'children'>;\n\nexport function FuelProvider({\n  theme: _theme,\n  children,\n  fuelConfig,\n  uiConfig: _uiConfig,\n  ui = true,\n  networks: _networks,\n}: FuelProviderProps) {\n  const theme = _theme || 'light';\n  const { networks } = useNetworkConfigs(_networks);\n  const uiConfig = useMemo(\n    () =>\n      Object.assign(\n        {\n          suggestBridge: true,\n        },\n        _uiConfig ?? {},\n      ),\n    [_uiConfig],\n  );\n\n  if (ui) {\n    return (\n      <FuelHooksProvider fuelConfig={fuelConfig} networks={networks}>\n        <FuelUIProvider\n          theme={theme}\n          fuelConfig={fuelConfig}\n          uiConfig={uiConfig}\n        >\n          <Connect />\n          <NetworkDialog theme={theme} />\n          {uiConfig.suggestBridge && <BridgeDialog theme={theme} />}\n          {children}\n        </FuelUIProvider>\n      </FuelHooksProvider>\n    );\n  }\n  return (\n    <FuelHooksProvider fuelConfig={fuelConfig} networks={networks}>\n      {children}\n    </FuelHooksProvider>\n  );\n}\n","import * as Dialog from '@radix-ui/react-dialog';\nimport { useEffect, useMemo, useState } from 'react';\nimport {\n  useAccount,\n  useBalance,\n  useIsSupportedNetwork,\n  useProvider,\n} from '../../../../hooks';\nimport { NoFundIcon } from '../../../../icons/NoFundIcon';\nimport { useConnectUI } from '../../../../providers/FuelUIProvider';\nimport { useNetworkConfigs } from '../../hooks/useNetworkConfigs';\nimport {\n  BackIcon,\n  CloseIcon,\n  DialogHeader,\n  DialogMain,\n  DialogTitle,\n  Divider,\n} from '../../styles';\nimport {\n  ConnectorButton,\n  ConnectorButtonPrimary,\n  ConnectorContent,\n  ConnectorDescription,\n  ConnectorImage,\n  ConnectorTitle,\n} from '../Connector/styles';\nimport { DialogContent } from '../Core/DialogContent';\nimport { DialogFuel } from '../Core/DialogFuel';\n\ntype BridgeProps = {\n  theme: 'dark' | 'light';\n};\n\nexport function BridgeDialog({ theme }: BridgeProps) {\n  const { networks } = useNetworkConfigs();\n  const { provider } = useProvider();\n  const [bridgeHref, setBridgeHref] = useState<string | null>(null);\n\n  useEffect(() => {\n    let abort = false;\n    const fetchBridgeHref = async () => {\n      if (abort) return;\n      const chainId = await provider?.getChainId();\n      const network = networks.find((n) => n.chainId === chainId);\n      if (abort) return;\n      if (network?.bridgeURL) {\n        const url = new URL(network.bridgeURL);\n        url.searchParams.set('', 'true');\n        setBridgeHref(url.toString());\n      } else {\n        setBridgeHref(null);\n      }\n    };\n    fetchBridgeHref();\n    return () => {\n      abort = true;\n    };\n  }, [networks, provider]);\n  const {\n    isConnected,\n    uiConfig,\n    dialog: { isOpen: isConnectOpen },\n  } = useConnectUI();\n  const { isSupportedNetwork } = useIsSupportedNetwork();\n  const { account } = useAccount();\n  const { balance } = useBalance({ account });\n  const [tempClose, setTempClose] = useState(false);\n\n  const shouldOpenBridge = useMemo(() => {\n    if (tempClose) return false;\n    if (isConnectOpen) return false;\n    if (!bridgeHref) return false;\n    if (!uiConfig.suggestBridge) return false;\n    if (!isConnected) return false;\n    if (!isSupportedNetwork) return false;\n    return !!balance?.isZero();\n  }, [\n    uiConfig,\n    balance,\n    isSupportedNetwork,\n    isConnected,\n    tempClose,\n    bridgeHref,\n    isConnectOpen,\n  ]);\n\n  return (\n    <DialogFuel\n      open={shouldOpenBridge}\n      theme={theme}\n      onOpenChange={(state) => {\n        if (!state) {\n          setTempClose(true);\n        }\n      }}\n    >\n      <DialogContent data-connector={true}>\n        <DialogHeader>\n          <BackIcon size={32} data-connector={false} />\n          <DialogTitle>Bridge Funds</DialogTitle>\n          <Dialog.Close asChild>\n            <CloseIcon size={32} />\n          </Dialog.Close>\n        </DialogHeader>\n        <Divider />\n        <DialogMain>\n          <div>\n            <ConnectorImage>\n              <NoFundIcon size={100} theme={theme} />\n            </ConnectorImage>\n            <ConnectorContent>\n              <ConnectorTitle>\n                Bridge Funds <br /> to Fuel Ignition\n              </ConnectorTitle>\n              <ConnectorDescription>\n                Looks like you don't have ETH balance, bridge funds to Fuel\n                Ignition and use the application without stopping.\n              </ConnectorDescription>\n            </ConnectorContent>\n            <ConnectorButtonPrimary href={bridgeHref ?? ''} target=\"_blank\">\n              Bridge now\n            </ConnectorButtonPrimary>\n            <ConnectorButton onClick={() => setTempClose(true)}>\n              Continue to application\n            </ConnectorButton>\n          </div>\n        </DialogMain>\n      </DialogContent>\n    </DialogFuel>\n  );\n}\n","import type { SvgIconProps } from '../types';\n\nexport function NoFundIcon({ size, ...props }: SvgIconProps) {\n  return (\n    <svg\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 95 95\"\n      width={size}\n      height={size}\n      {...props}\n    >\n      <title>No Funds Icon</title>\n      <path\n        d=\"M46.88 90.124C30.395 90.124 20 74.39 20 46.679 20 18.97 30.395 3 46.88 3s26.88 15.969 26.88 43.68c0 27.71-10.395 43.444-26.88 43.444Zm0-13.15c8.505 0 13.44-11.038 13.44-30.295 0-6.223-.525-11.624-1.47-16.086L39.005 72.511c2.1 2.936 4.725 4.462 7.875 4.462ZM33.44 46.678c0 6.106.525 11.507 1.47 15.852l19.845-41.918c-2.1-2.936-4.725-4.462-7.875-4.462-8.505 0-13.44 11.154-13.44 30.528Z\"\n        fill=\"#EEE\"\n      />\n      <path\n        d=\"M67 91.281c5.523 0 10-4.876 10-10.89C77 74.376 72.523 69.5 67 69.5s-10 4.876-10 10.89c0 6.015 4.477 10.891 10 10.891Z\"\n        fill=\"#000\"\n      />\n      <path\n        d=\"M67 91.281c5.523 0 10-4.876 10-10.89C77 74.376 72.523 69.5 67 69.5s-10 4.876-10 10.89c0 6.015 4.477 10.891 10 10.891Z\"\n        fill=\"#627EEA\"\n      />\n      <path\n        d=\"M67 91.281c5.523 0 10-4.876 10-10.89C77 74.376 72.523 69.5 67 69.5s-10 4.876-10 10.89c0 6.015 4.477 10.891 10 10.891Z\"\n        fill=\"url(#a)\"\n        style={\n          {\n            'mix-blend-mode': 'soft-light',\n          } as React.CSSProperties\n        }\n      />\n      <path\n        d=\"M67.166 73.13v5.368l4.166 2.027-4.166-7.395Z\"\n        fill=\"#fff\"\n        fillOpacity=\".602\"\n      />\n      <path d=\"M67.166 73.13 63 80.525l4.166-2.027V73.13Z\" fill=\"#fff\" />\n      <path\n        d=\"M67.166 84.004v3.647l4.17-6.281-4.17 2.634Z\"\n        fill=\"#fff\"\n        fillOpacity=\".602\"\n      />\n      <path d=\"M67.166 87.65v-3.646L63 81.37l4.166 6.28Z\" fill=\"#fff\" />\n      <path\n        d=\"m67.166 83.16 4.166-2.635-4.166-2.026v4.66Z\"\n        fill=\"#fff\"\n        fillOpacity=\".2\"\n      />\n      <path\n        d=\"m63 80.525 4.166 2.634V78.5L63 80.525Z\"\n        fill=\"#fff\"\n        fillOpacity=\".602\"\n      />\n      <defs>\n        <linearGradient\n          id=\"a\"\n          x1=\"67\"\n          y1=\"69.5\"\n          x2=\"67\"\n          y2=\"91.281\"\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          <stop stopColor=\"#fff\" stopOpacity=\".5\" />\n          <stop offset=\"1\" stopOpacity=\".5\" />\n        </linearGradient>\n      </defs>\n    </svg>\n  );\n}\n","import { useMemo } from 'react';\nimport { BASE_NETWORK_CONFIGS, DEFAULT_NETWORK } from '../../../config';\nimport type { NetworkConfig } from '../../../types';\n\nexport function useNetworkConfigs(networks?: Array<NetworkConfig>) {\n  // Merge network configurations\n  const _networks = useMemo<NetworkConfig[]>(() => {\n    if (!networks) {\n      return [DEFAULT_NETWORK];\n    }\n\n    return networks.map((network) => {\n      if (!network.chainId) return network;\n      const defaultConfig = BASE_NETWORK_CONFIGS.find(\n        (n) => n.chainId === network.chainId,\n      );\n      return { ...defaultConfig, ...network };\n    });\n  }, [networks]);\n\n  return {\n    networks: _networks ?? [],\n  };\n}\n","import { useQuery } from '@tanstack/react-query';\nimport { Provider } from 'fuels';\nimport {\n  useCurrentConnector,\n  useDisconnect,\n  useIsConnected,\n  useSelectNetwork,\n} from '../../../../hooks';\nimport { useIsSupportedNetwork } from '../../../../hooks/useIsSupportedNetwork';\nimport { Spinner } from '../../../../icons/Spinner';\nimport { useFuel } from '../../../../providers';\nimport { DialogContent } from '../Core/DialogContent';\nimport { DialogFuel } from '../Core/DialogFuel';\nimport {\n  Button,\n  ButtonDisconnect,\n  ButtonLoading,\n  Container,\n  Description,\n  DialogMain,\n  Divider,\n  ErrorMessage,\n  Header,\n  MiddleDescription,\n  OrLabel,\n  Title,\n} from './styles';\n\nexport function NetworkDialog({\n  theme,\n}: {\n  theme: 'dark' | 'light';\n}) {\n  const { networks } = useFuel();\n  const { disconnect } = useDisconnect();\n  const { currentConnector } = useCurrentConnector();\n  const { isSupportedNetwork } = useIsSupportedNetwork();\n  const { selectNetwork, isError, error, isPending } = useSelectNetwork();\n  const { isConnected } = useIsConnected();\n  const { data: chainName } = useQuery({\n    queryKey: ['chainName', networks[0]],\n    queryFn: async () => {\n      if (networks[0].url) {\n        const provider = new Provider(networks[0].url);\n        return (await provider.getChain()).name;\n      }\n      return '';\n    },\n    placeholderData: '',\n  });\n\n  function handleSwitch() {\n    if (networks[0].chainId == null) return;\n    selectNetwork({ chainId: networks[0].chainId, url: networks[0].url });\n  }\n\n  function handleDisconnect() {\n    disconnect();\n  }\n\n  function getErrorMessage() {\n    if (\n      isError &&\n      (error?.message === 'Method not implemented.' ||\n        error?.message === 'Method not found')\n    ) {\n      return 'The selected Wallet does not support switching networks, please switch manually in your wallet.';\n    }\n    if (isError) {\n      return error?.message || 'Failed to switch network';\n    }\n    return '';\n  }\n\n  if (networks == null || !isConnected) {\n    return null;\n  }\n\n  return (\n    <DialogFuel open={!isSupportedNetwork && !!chainName} theme={theme}>\n      <DialogContent\n        data-connector={!!currentConnector}\n        // Disable closing when clicking outside the dialog\n        onPointerDownOutside={(e) => {\n          e.preventDefault();\n        }}\n        // Disable closing when pressing escape\n        onEscapeKeyDown={(e) => {\n          e.preventDefault();\n        }}\n      >\n        <DialogMain>\n          <Container>\n            <Header>\n              <Title>Network Switch Required</Title>\n              <Description>\n                This app does not support the current connected network.\n              </Description>\n              {chainName && (\n                <>\n                  <MiddleDescription>Switch to:</MiddleDescription>\n                  <MiddleDescription>\n                    <span style={{ fontWeight: 'bold' }}>{chainName}</span>\n                  </MiddleDescription>\n                </>\n              )}\n              {!!isError && <ErrorMessage>{getErrorMessage()}</ErrorMessage>}\n            </Header>\n            {!isPending && (\n              <Button\n                type=\"button\"\n                disabled={isPending}\n                onClick={handleSwitch}\n                value=\"Switch Network\"\n              />\n            )}\n            {isPending && (\n              <ButtonLoading>\n                <Spinner size={26} color=\"var(--fuel-loader-background)\" />\n              </ButtonLoading>\n            )}\n            <div\n              style={{\n                display: 'flex',\n                flexDirection: 'row',\n                alignItems: 'center',\n                gap: '6px',\n                width: '100%',\n              }}\n            >\n              <Divider />\n              <OrLabel>or</OrLabel>\n              <Divider />\n            </div>\n            <ButtonDisconnect\n              type=\"button\"\n              onClick={handleDisconnect}\n              value=\"Disconnect\"\n              color=\"var(--fuel-border-color)\"\n            />\n          </Container>\n        </DialogMain>\n      </DialogContent>\n    </DialogFuel>\n  );\n}\n","import { Provider } from 'fuels';\nimport { useMemo } from 'react';\nimport { type UseNamedQueryParams, useNamedQuery } from '../core';\nimport { useFuel } from '../providers';\nimport { QUERY_KEYS } from '../utils';\nimport { useCurrentConnector } from './useCurrentConnector';\nimport { useIsConnected } from './useIsConnected';\nimport { useNetwork } from './useNetwork';\n\ntype UseIsSupportedNetwork = {\n  /**\n   * Additional query parameters to customize the behavior of `useNamedQuery`.\n   */\n  query?: UseNamedQueryParams<'isSupportedNetwork', boolean, Error, boolean>;\n};\n\n/**\n * A hook to check if the current network, matches with provided networks config on FuelProvider.\n *\n * @returns {object} An object containing:\n * - `isSupportedNetwork`: The value if the current network is supported.\n *\n * @examples\n * To check if network is supported:\n * ```ts\n * const { isSupportedNetwork } = useIsSupportedNetwork();\n * console.log(isSupportedNetwork);\n * ```\n */\nexport function useIsSupportedNetwork(params?: UseIsSupportedNetwork) {\n  const { networks } = useFuel();\n  const { network } = useNetwork();\n  const { isConnected } = useIsConnected();\n  const { currentConnector } = useCurrentConnector();\n\n  return useNamedQuery('isSupportedNetwork', {\n    queryKey: QUERY_KEYS.isSupportedNetwork(\n      currentConnector?.name,\n      networks,\n      network,\n      isConnected,\n    ),\n    queryFn: async () => {\n      if (!currentConnector) return true;\n      if (!isConnected) return true;\n      if (!network) return true;\n      let chainId = network.chainId;\n      if (chainId == null) {\n        chainId = await new Provider(network.url).getChainId();\n      }\n      return !!networks.find((n) => n.chainId === chainId);\n    },\n    placeholderData: true,\n    ...params,\n  });\n}\n","import type { FuelConnector } from 'fuels';\nimport { type UseNamedQueryParams, useNamedQuery } from '../core';\nimport { useFuel } from '../providers';\nimport { QUERY_KEYS } from '../utils';\n\ntype UseCurrentConnectorParams<TName extends string, TData> = {\n  /**\n   * Additional query parameters to customize the behavior of `useNamedQuery`.\n   */\n  query?: UseNamedQueryParams<TName, FuelConnector | null, Error, TData>;\n};\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook to fetch a current Wallet Connector.\n *\n * @params {UseCurrentConnectorParams<TName, TData>} Parameters to configure the hook.\n * - `query`: Additional query parameters to customize the behavior of `useNamedQuery`.\n *\n * @returns {object} An object containing:\n * - `connectors`: The list of available connectors.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.\n *\n * @examples\n * To fetch current connector:\n * ```ts\n * const { currentConnector } = useCurrentConnector();\n * console.log(currentConnector);\n * ```\n */\nexport const useCurrentConnector = <\n  TName extends string = string,\n  TData = FuelConnector | null,\n>({\n  query,\n}: UseCurrentConnectorParams<TName, TData> = {}) => {\n  const { fuel } = useFuel();\n  return useNamedQuery('currentConnector', {\n    queryKey: QUERY_KEYS.currentConnector(),\n    queryFn: async () => {\n      const isConnected = await fuel.isConnected();\n      if (!isConnected) return null;\n      return fuel.currentConnector() ?? null;\n    },\n    placeholderData: null,\n    ...query,\n  });\n};\n","import { type UseNamedQueryParams, useNamedQuery } from '../core';\nimport { useFuel } from '../providers';\nimport { QUERY_KEYS } from '../utils';\n\ntype UseIsConnected = {\n  /**\n   * Additional query parameters to customize the behavior of `useNamedQuery`.\n   */\n  query?: UseNamedQueryParams<'network', boolean, Error, boolean>;\n};\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook to check the connection status with the connector.\n *\n * @returns {object} An object containing:\n * - `isConnected`: A boolean value indicating the connector is connected.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.\n *\n * @examples\n *  To check if a connection is established:\n * ```ts\n * const { isConnected } = useIsConnected();\n * ```\n */\nexport const useIsConnected = (params?: UseIsConnected) => {\n  const { fuel } = useFuel();\n  const query = useNamedQuery('isConnected', {\n    queryKey: QUERY_KEYS.isConnected(),\n    queryFn: async () => {\n      try {\n        const isConnected = await fuel.isConnected();\n        return isConnected || false;\n      } catch {\n        return false;\n      }\n    },\n    placeholderData: false,\n    ...params?.query,\n    // This is required for now as Fuelet is not triggering the connection event\n    refetchInterval: 1000,\n  });\n\n  return query;\n};\n","import type { Network } from 'fuels';\nimport { type UseNamedQueryParams, useNamedQuery } from '../core';\nimport { useFuel } from '../providers';\nimport { QUERY_KEYS } from '../utils';\nimport { useIsConnected } from './useIsConnected';\n\ntype UseNetwork = {\n  /**\n   * Additional query parameters to customize the behavior of `useNamedQuery`.\n   */\n  query?: UseNamedQueryParams<'network', Network | null, Error, Network | null>;\n};\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook to retrieve the current network information in the connected app.\n *\n * @returns {object} An object containing:\n * - `network`: The network information data.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.\n *\n * @examples\n *  To get the current network information\n * ```ts\n * const { network } = useNetwork();\n * console.log(network);\n * ```\n */\nexport const useNetwork = (params?: UseNetwork) => {\n  const { fuel } = useFuel();\n  const { isConnected } = useIsConnected();\n  return useNamedQuery('network', {\n    queryKey: QUERY_KEYS.currentNetwork(),\n    queryFn: async () => {\n      const current = await fuel.currentNetwork();\n      if (!current && isConnected) {\n        throw new Error('Network not found');\n      }\n      return current;\n    },\n    placeholderData: null,\n    refetchOnMount: true,\n    refetchInterval: (e) => {\n      if (!e.state.data || e.state.error) {\n        return 4000;\n      }\n      return false;\n    },\n    enabled: isConnected,\n    ...params?.query,\n  });\n};\n","const defaultVerticalMargin = '0.8em';\n\nconst dialogMainStyle: React.CSSProperties = {\n  position: 'relative',\n  padding: 'calc(0.8em + 4px) 16px 0.8em 16px',\n};\n\nexport const DialogMain = ({ children }: React.PropsWithChildren) => {\n  return <div style={dialogMainStyle}>{children}</div>;\n};\n\nconst containerStyle: React.CSSProperties = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  gap: 'var(--fuel-items-gap)',\n};\n\nexport const Container = ({ children }: React.PropsWithChildren) => {\n  return <div style={containerStyle}>{children}</div>;\n};\n\nconst titleStyle: React.CSSProperties = {\n  textAlign: 'center',\n  fontSize: '1.2em',\n  fontWeight: 500,\n  color: 'var(--fuel-color-bold)',\n  lineHeight: 1,\n};\n\nexport const Title = ({ children }: React.PropsWithChildren) => {\n  return <h2 style={titleStyle}>{children}</h2>;\n};\n\nconst dividerStyle: React.CSSProperties = {\n  height: '1px',\n  width: '100%',\n  backgroundColor: 'var(--fuel-separator-color)',\n  margin: '10px 0',\n  boxSizing: 'border-box',\n};\n\nexport const Divider = () => {\n  return <div style={dividerStyle} />;\n};\n\nconst headerStyle: React.CSSProperties = {\n  margin: '20px 20px 0 20px',\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  gap: defaultVerticalMargin,\n  marginBottom: defaultVerticalMargin,\n};\n\nexport const Header = ({ children }: React.PropsWithChildren) => {\n  return <div style={headerStyle}>{children}</div>;\n};\n\nconst descriptionStyle: React.CSSProperties = {\n  fontWeight: 400,\n  textAlign: 'center',\n  lineHeight: '1.2em',\n  color: 'var(--fuel-gray-11)',\n  marginBottom: '10px',\n  marginTop: '10px',\n};\n\nexport const Description = ({ children }: React.PropsWithChildren) => {\n  return <p style={descriptionStyle}>{children}</p>;\n};\n\nconst middleDescriptionStyle: React.CSSProperties = {\n  ...descriptionStyle,\n  marginBottom: '4px',\n  marginTop: '4px',\n};\n\nexport const MiddleDescription = ({ children }: React.PropsWithChildren) => {\n  return <p style={middleDescriptionStyle}>{children}</p>;\n};\n\nconst errorMessageStyle: React.CSSProperties = {\n  fontWeight: 400,\n  textAlign: 'center',\n  lineHeight: '1.2em',\n  opacity: 0.8,\n  color: 'var(--fuel-color-error)',\n};\n\nexport const ErrorMessage = ({ children }: React.PropsWithChildren) => {\n  return <div style={errorMessageStyle}>{children}</div>;\n};\n\nconst buttonStyle: React.CSSProperties = {\n  width: '100%',\n  height: '40px',\n  display: 'flex',\n  borderRadius: '11px',\n  textDecoration: 'none',\n  justifyContent: 'center',\n  alignItems: 'center',\n  margin: '0.4rem 0',\n  fontSize: '0.875em',\n  marginBottom: 0,\n  color: 'var(--fuel-black-color)',\n};\n\nexport const Button = (props: React.InputHTMLAttributes<HTMLInputElement>) => {\n  return (\n    <input\n      style={buttonStyle}\n      {...props}\n      className=\"fuel-connectors-button-base fuel-connectors-button\"\n    />\n  );\n};\n\nconst buttonDisconnectStyle: React.CSSProperties = {\n  ...buttonStyle,\n  backgroundColor: 'var(--fuel-button-background)',\n  color: 'var(--fuel-color-bold)',\n};\n\nexport const ButtonDisconnect = (\n  props: React.InputHTMLAttributes<HTMLInputElement>,\n) => {\n  return (\n    <input\n      style={buttonDisconnectStyle}\n      {...props}\n      className=\"fuel-connectors-button-base fuel-connectors-button-disconnect\"\n    />\n  );\n};\n\nconst orLabelStyle: React.CSSProperties = {\n  fontWeight: 400,\n  textAlign: 'center',\n  lineHeight: 1,\n  color: 'var(--fuel-gray-11)',\n};\n\nexport const OrLabel = ({ children }: React.PropsWithChildren) => {\n  return <div style={orLabelStyle}>{children}</div>;\n};\n\nconst buttonLoadingStyle: React.CSSProperties = {\n  ...buttonStyle,\n  marginBottom: 0,\n};\n\nexport const ButtonLoading = ({\n  children,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div\n      style={buttonLoadingStyle}\n      {...props}\n      className=\"fuel-connectors-button-base\"\n    >\n      {children}\n    </div>\n  );\n};\n","import { type UseNamedQueryParams, useNamedQuery } from '../core';\nimport { useFuel } from '../providers';\nimport { QUERY_KEYS } from '../utils';\n\ntype UseAccountParams<TName extends string, TData> = {\n  /**\n   * Additional query parameters to customize the behavior of `useNamedQuery`.\n   */\n  query?: UseNamedQueryParams<TName, TData, Error, TData>;\n};\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook to get the current account of the user in the connected app.\n *\n * @returns {object} An object containing:\n * - `account`: The current account of the user.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.\n *\n * @examples\n * ```ts\n * const { account } = useAccount();\n * console.log(account);\n * ```\n */\nexport const useAccount = (\n  params?: UseAccountParams<'account', string | null>,\n) => {\n  const { fuel } = useFuel();\n\n  return useNamedQuery('account', {\n    queryKey: QUERY_KEYS.account(),\n    queryFn: async () => {\n      try {\n        const currentFuelAccount = await fuel?.currentAccount();\n        return currentFuelAccount;\n      } catch (_error: unknown) {\n        return null;\n      }\n    },\n    placeholderData: null,\n    ...params?.query,\n  });\n};\n","import { type UseNamedQueryParams, useNamedQuery } from '../core';\nimport { useFuel } from '../providers';\nimport { QUERY_KEYS } from '../utils';\n\ntype UseAccountsParams<TName extends string, TData> = {\n  /**\n   * Additional query parameters to customize the behavior of `useNamedQuery`.\n   */\n  query?: UseNamedQueryParams<TName, TData, Error, TData>;\n};\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook to get the accounts of the user in the connected app.\n *\n * @returns {object} An object containing:\n * - `accounts`: User accounts.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.\n *\n * @examples\n * ```ts\n * const { accounts } = useAccounts();\n * console.log(accounts);\n * ```\n */\nexport const useAccounts = (\n  params?: UseAccountsParams<'accounts', string[]>,\n) => {\n  const { fuel } = useFuel();\n\n  return useNamedQuery('accounts', {\n    queryKey: QUERY_KEYS.accounts(),\n    queryFn: async () => {\n      try {\n        const accounts = await fuel.accounts();\n        return accounts;\n      } catch (_error: unknown) {\n        return [];\n      }\n    },\n    placeholderData: [],\n    ...params?.query,\n  });\n};\n","import { useMutation } from '@tanstack/react-query';\nimport type { Asset } from 'fuels';\n\nimport { useFuel } from '../providers';\nimport { MUTATION_KEYS } from '../utils';\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook to add one or more assets in the connected app asynchronously or synchronously.\n *\n * @returns {object} An object containing:\n * - `addAssets`: function to add assets synchronously.\n * - `addAssetsAsync`: function to add assets asynchronously.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useMutation | `...mutationProps`}: Destructured properties from `useMutation` result.\n *\n * @examples\n *  To add assets synchronously:\n * ```ts\n * const { addAssets } = useAddAssets();\n * addAssets(asset);\n * ```\n *\n * To add assets asynchronously:\n * ```ts\n * const { addAssetsAsync } = useAddAssets();\n * await addAssetsAsync([asset1, asset2]);\n * ```\n */\nexport const useAddAssets = () => {\n  const { fuel } = useFuel();\n\n  const { mutate, mutateAsync, ...queryProps } = useMutation({\n    mutationKey: [MUTATION_KEYS.addAssets],\n    mutationFn: async (assets: Asset | Asset[]) => {\n      if (Array.isArray(assets)) {\n        return fuel.addAssets(assets);\n      }\n      return fuel.addAsset(assets);\n    },\n  });\n\n  return {\n    addAssets: mutate,\n    addAssetsAsync: mutateAsync,\n    ...queryProps,\n  };\n};\n","import { useMutation } from '@tanstack/react-query';\n\nimport { useFuel } from '../providers';\nimport { MUTATION_KEYS } from '../utils';\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook to add a network in the connected app.\n *\n * @deprecated Use `useSelectNetwork` instead. This hook will be removed in the next major release.\n *\n * @returns {object} An object containing:\n * - `addNetwork`: function to add a network synchronously.\n * - `addNetworkAsync` function to add a network asynchronously.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useMutation | `...mutationProps`}: Destructured properties from `useMutation` result.\n *\n * @examples\n *  To add a network synchronously:\n * ```ts\n * const { addNetwork } = useAddNetwork();\n * addNetwork(network);\n * ```\n *\n * To add a network asynchronously:\n * ```ts\n * const { addNetworkAsync } = useAddNetwork();\n * await addNetworkAsync(network);\n * ```\n *\n */\nexport const useAddNetwork = () => {\n  const { fuel } = useFuel();\n\n  const { mutate, mutateAsync, ...queryProps } = useMutation({\n    mutationKey: [MUTATION_KEYS.addNetwork],\n    mutationFn: async (networkUrl: string) => {\n      return fuel.addNetwork(networkUrl);\n    },\n  });\n\n  return {\n    addNetwork: mutate,\n    addNetworkAsync: mutateAsync,\n    ...queryProps,\n  };\n};\n","import type { Asset } from 'fuels';\nimport { type UseNamedQueryParams, useNamedQuery } from '../core';\nimport { useFuel } from '../providers';\nimport { QUERY_KEYS } from '../utils';\n\ntype UseAssetsParams<TName extends string, TData> = {\n  /**\n   * Additional query parameters to customize the behavior of `useNamedQuery`.\n   */\n  query?: UseNamedQueryParams<TName, TData, Error, TData>;\n};\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook that returns assets of the user in the connected app.\n *\n * @returns {object} An object containing\n * - `assets`: User's assets.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.\n *\n * @examples\n * ```ts\n * const { assets } = useAssets();\n * console.log(assets);\n * ```\n */\nexport const useAssets = (params?: UseAssetsParams<'assets', Asset[]>) => {\n  const { fuel } = useFuel();\n\n  return useNamedQuery('assets', {\n    queryKey: QUERY_KEYS.assets(),\n    queryFn: async () => {\n      try {\n        const assets = await fuel.assets();\n        return assets;\n      } catch (_error: unknown) {\n        return [];\n      }\n    },\n    placeholderData: [],\n    ...params?.query,\n  });\n};\n","import type { BN, BytesLike } from 'fuels';\nimport { Address } from 'fuels';\n\nimport { type UseNamedQueryParams, useNamedQuery } from '../core';\nimport { QUERY_KEYS } from '../utils';\n\nimport { useEffect, useState } from 'react';\nimport { useProvider } from './useProvider';\n\ntype UseBalanceParams = {\n  /**\n   * The address to fetch the balance for.\n   * @deprecated Use `account` instead.\n   */\n  address?: string | null;\n  /**\n   * The account to fetch the balance for.\n   */\n  account?: string | null;\n  /**\n   * The asset ID to fetch the balance for.\n   */\n  assetId?: BytesLike;\n  /**\n   * Additional query parameters to customize the behavior of `useNamedQuery`.\n   */\n  query?: UseNamedQueryParams<'balance', BN | null, Error, BN | null>;\n};\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook that returns the balance of the user.\n *\n * @params {object} The options to fetch the balance for.\n * - `address`: The address to fetch the balance for.\n * - `assetId`: The asset ID to fetch the balance for.\n *\n * @returns {object} An object containing:\n * - `balance`: The balance of the user.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.\n *\n * @examples\n * ```ts\n * const { balance } = useBalance({address: '0x1234', assetId: '0x1234'});\n * console.log(balance.format());\n * ```\n */\nexport const useBalance = ({\n  address,\n  account,\n  assetId,\n  query,\n}: UseBalanceParams) => {\n  const { provider } = useProvider();\n  const _address = account ?? address ?? undefined;\n  const [chainId, setChainId] = useState<number | undefined>();\n\n  useEffect(() => {\n    const getChainId = async () => {\n      const chainId = await provider?.getChainId();\n      setChainId(chainId);\n    };\n    getChainId();\n  }, [provider]);\n\n  return useNamedQuery('balance', {\n    queryKey: QUERY_KEYS.balance(_address, assetId, chainId),\n    queryFn: async () => {\n      try {\n        if (!provider) throw new Error('Provider is needed');\n\n        const baseAssetId = assetId || (await provider.getBaseAssetId());\n        const currentFuelBalance = await provider.getBalance(\n          Address.fromString(_address || ''),\n          baseAssetId,\n        );\n        return currentFuelBalance || null;\n      } catch (_error: unknown) {\n        return null;\n      }\n    },\n    placeholderData: null,\n    enabled: !!provider && !!_address,\n    ...query,\n  });\n};\n","import type { Provider } from 'fuels';\nimport { useMemo } from 'react';\nimport type { UseNamedQueryParams } from '../core';\nimport { useWallet } from './useWallet';\n\ntype UseProviderParams = {\n  /**\n   * Additional query parameters to customize the behavior of `useNamedQuery`.\n   */\n  query?: UseNamedQueryParams<\n    'provider',\n    Provider | null,\n    Error,\n    Provider | null\n  >;\n};\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook to retrieve the current provider in the connected app.\n *\n * @returns {object} An object containing:\n * - `provider`: The provider data or `null`.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.\n *\n * @examples\n * To get the current provider:\n * ```ts\n * const { provider } = useProvider();\n * ```\n */\nexport const useProvider = (_params?: UseProviderParams) => {\n  const { wallet } = useWallet();\n\n  const provider = useMemo(() => {\n    return wallet?.provider;\n  }, [wallet?.provider, wallet?.provider.url]);\n\n  return { provider };\n};\n","import { type Account, Address, Provider } from 'fuels';\n\nimport {\n  type DefinedNamedUseQueryResult,\n  type UseNamedQueryParams,\n  useNamedQuery,\n} from '../core';\nimport { useFuel } from '../providers';\nimport { QUERY_KEYS } from '../utils';\nimport { useAccount } from './useAccount';\nimport { useNetwork } from './useNetwork';\n\ntype UseWalletParamsDeprecated = string | null;\n\ntype UseWalletParams = {\n  /**\n   * The wallet address to fetch. If not provided, the current account's address will be used.\n   */\n  account?: string | null;\n  /**\n   * Additional query parameters to customize the behavior of `useNamedQuery`.\n   */\n  query?: UseNamedQueryParams<'wallet', Account | null, Error, Account | null>;\n};\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook to fetch and manage a wallet by its address in the connected app.\n *\n * @params {object} The parameters to fetch a wallet.\n * - `address`: The wallet address to fetch. If not provided, the current account's address will be used.\n *\n * @returns {object} An object containing:\n * - `wallet`: The wallet or `null` if the wallet could not be fetched or the address is invalid.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.\n *\n * @examples\n * To get a wallet by address:\n * ```ts\n * const { wallet } = useWallet({ account: '0x...' });\n * ```\n * To get the current account's wallet:\n * ```ts\n * const { wallet } = useWallet();\n * ```\n */\nexport function useWallet(\n  params?: UseWalletParams,\n): DefinedNamedUseQueryResult<'wallet', Account | null, Error>;\n\n/**\n * @deprecated Use `useWallet({ account })` instead.\n */\nexport function useWallet(\n  params?: UseWalletParamsDeprecated,\n): DefinedNamedUseQueryResult<'wallet', Account | null, Error>;\n\nexport function useWallet(\n  params?: UseWalletParamsDeprecated | UseWalletParams,\n) {\n  const { fuel, networks } = useFuel();\n  const { network } = useNetwork();\n  const { account } = useAccount();\n\n  const _params: UseWalletParams =\n    typeof params === 'string' ? { account: params } : params ?? {};\n\n  const queried = useNamedQuery('wallet', {\n    queryKey: QUERY_KEYS.wallet(account, network?.url),\n    queryFn: async () => {\n      try {\n        if (!account || !network?.url) return null;\n        await Address.fromString(account);\n        const wallet = await fuel.getWallet(account);\n        const configuredNetwork = networks.find(\n          (n) => n.chainId === network.chainId,\n        );\n\n        if (configuredNetwork?.url && configuredNetwork.url !== network.url) {\n          // if the user configured a different network for the same chainId, we connect to the configured network instead\n          const provider = new Provider(configuredNetwork.url);\n          wallet.connect(provider);\n        }\n\n        return wallet;\n      } catch (_error: unknown) {\n        return null;\n      }\n    },\n    enabled: !!account && !!network?.url,\n    placeholderData: null,\n    ..._params.query,\n  });\n\n  return queried;\n}\n","// should import ChainInfo because of this error: https://github.com/FuelLabs/fuels-ts/issues/1054\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport type { ChainInfo } from 'fuels';\nimport type { UseNamedQueryParams } from '../core';\n\nimport { useNamedQuery } from '../core';\nimport { QUERY_KEYS } from '../utils';\n\nimport { useProvider } from './useProvider';\n\ntype UseChainParams<TName extends string, TData> = {\n  /**\n   * Additional query parameters to customize the behavior of `useNamedQuery`.\n   */\n  query?: UseNamedQueryParams<TName, TData, Error, TData>;\n};\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook that returns the chain info for the current provider.\n *\n * @returns {object} An object containing:\n * - `chain`: The current chain info.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.\n *\n * @examples\n * ```ts\n * const { chain } = useChain();\n * console.log(chain);\n * ```\n */\nexport const useChain = (\n  params?: UseChainParams<'chain', ChainInfo | null>,\n) => {\n  const { provider } = useProvider();\n\n  return useNamedQuery('chain', {\n    queryKey: QUERY_KEYS.chain(),\n    queryFn: async () => {\n      try {\n        const currentFuelChain = await provider?.getChain();\n        return currentFuelChain || null;\n      } catch (_error: unknown) {\n        return null;\n      }\n    },\n    placeholderData: null,\n    enabled: !!provider,\n    ...params?.query,\n  });\n};\n","import { type Address, Contract, type JsonAbi, type Provider } from 'fuels';\nimport { useEffect, useState } from 'react';\nimport { type UseNamedQueryParams, useNamedQuery } from '../core/useNamedQuery';\nimport { QUERY_KEYS } from '../utils';\n\ntype ContractReadWithInstanceProps<\n  C extends Contract,\n  F extends keyof C['functions'],\n> = {\n  contract: C;\n  functionName: F;\n  args?: Parameters<C['functions'][F]>;\n};\n\ntype ContractReadWithAbiProps<A extends JsonAbi> = {\n  contract: {\n    address: Address;\n    abi: A;\n    provider: Provider;\n  };\n  functionName: string;\n  args?: unknown[];\n};\n\ntype ContractReadProps<\n  A extends JsonAbi,\n  C extends Contract | ContractReadWithAbiProps<A>['contract'],\n  F extends C extends Contract ? keyof C['functions'] : string,\n> = C extends Contract\n  ? ContractReadWithInstanceProps<C, F>\n  : ContractReadWithAbiProps<A>;\n\nconst isContract = <A extends JsonAbi, C extends Contract>(\n  contract: Contract | ContractReadWithAbiProps<A>['contract'],\n): contract is C => {\n  return 'functions' in contract;\n};\n\n/**\n * A hook to read data from a smart contract in the connected app.\n *\n * @params {object} The properties of the hook.\n * - `contract`: The contract instance or contract data (address, ABI, and provider).\n * - `functionName`: The name of the function to call on the contract.\n * - `args`: The arguments to pass to the contract function.\n *\n * @returns {object} An object containing:\n * - The result of the contract function call.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.\n *\n * @throws {Error} Throws an error if the contract or function is invalid or if the function attempts to write to storage.\n *\n * @examples\n * To read data from a contract\n * ```ts\n * const { data } = useContractRead({\n *   contract: myContractInstance,\n *   functionName: 'getBalance',\n *   args: [userAddress],\n * });\n * console.log(data);\n * ```\n */\nexport const useContractRead = <\n  A extends JsonAbi,\n  C extends Contract | ContractReadWithAbiProps<A>['contract'],\n  F extends C extends Contract ? keyof C['functions'] : string,\n>({\n  contract: _contract,\n  functionName,\n  args,\n}: ContractReadProps<A, C, F>) => {\n  const isContractInstance = isContract(_contract);\n  const [chainId, setChainId] = useState<number | undefined>(undefined);\n  useEffect(() => {\n    const getChainId = async () => {\n      const chainId = await _contract?.provider?.getChainId();\n      setChainId(chainId);\n    };\n    getChainId();\n  }, [_contract]);\n\n  return useNamedQuery('contractRead', {\n    queryKey: QUERY_KEYS.contract(\n      isContractInstance\n        ? _contract?.id?.toString()\n        : _contract?.address?.toString(),\n      chainId,\n      args?.toString(),\n    ),\n    queryFn: async () => {\n      const isValid = isContractInstance\n        ? !!_contract && 'provider' in _contract\n        : !!_contract.abi && !!_contract.address && !!_contract.provider;\n\n      if (!isValid) {\n        throw new Error(\n          'Invalid input `contract` is required to read the contract',\n        );\n      }\n      const contract = isContractInstance\n        ? _contract\n        : new Contract(_contract.address, _contract.abi, _contract.provider);\n\n      if (!contract?.functions?.[functionName]) {\n        throw new Error(`Function ${functionName || ''} not found on contract`);\n      }\n\n      const wouldWriteToStorage =\n        contract.functions[functionName].isReadOnly?.() !== undefined\n          ? !contract.functions[functionName].isReadOnly()\n          : Object.values(contract.interface.functions)\n              .find((f) => f.name === functionName)\n              ?.attributes?.find((attr) => attr.name === 'storage')\n              ?.arguments?.includes('write');\n\n      if (wouldWriteToStorage) {\n        throw new Error(\n          'Methods that write to storage should not be called with useContractRead',\n        );\n      }\n\n      return args !== undefined\n        ? contract.functions[functionName](args)\n        : contract.functions[functionName]();\n    },\n    placeholderData: undefined,\n  });\n};\n","import { useMutation } from '@tanstack/react-query';\n\nimport { useFuel } from '../providers';\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook to disconnect from current connector.\n *\n * @returns {object} An object containing:\n * - `disconnect`: A function to trigger the disconnection process synchronously.\n * - `disconnectAsync`: A function to trigger the disconnection process asynchronously.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useMutation | `...mutationProps`}: Destructured properties from `useMutation` result.\n *\n * @examples\n * To disconnect synchronously:\n * ```ts\n * const { disconnect } = useDisconnect();\n * disconnect();\n * ```\n *\n * To disconnect asynchronously:\n * ```ts\n * const { disconnectAsync } = useDisconnect();\n * await disconnectAsync();\n * ```\n */\nexport const useDisconnect = () => {\n  const { fuel } = useFuel();\n\n  const { mutate, mutateAsync, ...mutateProps } = useMutation({\n    mutationFn: async () => {\n      return fuel?.disconnect();\n    },\n  });\n\n  return {\n    disconnect: mutate,\n    disconnectAsync: mutateAsync,\n    ...mutateProps,\n  };\n};\n","import type { Network } from 'fuels';\nimport { type UseNamedQueryParams, useNamedQuery } from '../core';\nimport { useFuel } from '../providers';\nimport { QUERY_KEYS } from '../utils';\n\ntype UseNetworkParams = {\n  /**\n   * Additional query parameters to customize the behavior of `useNamedQuery`.\n   */\n  query?: UseNamedQueryParams<\n    'networks',\n    Array<Network>,\n    Error,\n    Array<Network>\n  >;\n};\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook to retrieve all networks available in the connected app.\n *\n * @returns {object} An object containing:\n * - `networks`:  List of all networks available for the current connection.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.\n *\n * @examples\n *  To get the list of networks\n * ```ts\n * const { networks } = useNetworks();\n * console.log(networks);\n * ```\n */\nexport const useNetworks = (params?: UseNetworkParams) => {\n  const { fuel } = useFuel();\n\n  return useNamedQuery('networks', {\n    queryKey: QUERY_KEYS.networks(),\n    queryFn: fuel.networks,\n    placeholderData: [],\n    ...params?.query,\n  });\n};\n","/**\n * Allowed arithmetic operators\n */\nexport type CompareOperator = '>' | '>=' | '=' | '<' | '<=' | '!=';\n\nexport const semver =\n  /^[v^~<>=]*?(\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+))?(?:-([\\da-z\\-]+(?:\\.[\\da-z\\-]+)*))?(?:\\+[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?)?)?$/i;\n\nexport const validateAndParse = (version: string) => {\n  if (typeof version !== 'string') {\n    throw new TypeError('Invalid argument expected string');\n  }\n  const match = version.match(semver);\n  if (!match) {\n    throw new Error(\n      `Invalid argument not valid semver ('${version}' received)`\n    );\n  }\n  match.shift();\n  return match;\n};\n\nconst isWildcard = (s: string) => s === '*' || s === 'x' || s === 'X';\n\nconst tryParse = (v: string) => {\n  const n = parseInt(v, 10);\n  return isNaN(n) ? v : n;\n};\n\nconst forceType = (a: string | number, b: string | number) =>\n  typeof a !== typeof b ? [String(a), String(b)] : [a, b];\n\nconst compareStrings = (a: string, b: string) => {\n  if (isWildcard(a) || isWildcard(b)) return 0;\n  const [ap, bp] = forceType(tryParse(a), tryParse(b));\n  if (ap > bp) return 1;\n  if (ap < bp) return -1;\n  return 0;\n};\n\nexport const compareSegments = (\n  a: string | string[] | RegExpMatchArray,\n  b: string | string[] | RegExpMatchArray\n) => {\n  for (let i = 0; i < Math.max(a.length, b.length); i++) {\n    const r = compareStrings(a[i] || '0', b[i] || '0');\n    if (r !== 0) return r;\n  }\n  return 0;\n};\n","import { compareSegments, validateAndParse } from './utils';\n\n/**\n * Compare [semver](https://semver.org/) version strings to find greater, equal or lesser.\n * This library supports the full semver specification, including comparing versions with different number of digits like `1.0.0`, `1.0`, `1`, and pre-release versions like `1.0.0-alpha`.\n * @param v1 - First version to compare\n * @param v2 - Second version to compare\n * @returns Numeric value compatible with the [Array.sort(fn) interface](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters).\n */\nexport const compareVersions = (v1: string, v2: string) => {\n  // validate input and split into segments\n  const n1 = validateAndParse(v1);\n  const n2 = validateAndParse(v2);\n\n  // pop off the patch\n  const p1 = n1.pop();\n  const p2 = n2.pop();\n\n  // validate numbers\n  const r = compareSegments(n1, n2);\n  if (r !== 0) return r;\n\n  // validate pre-release\n  if (p1 && p2) {\n    return compareSegments(p1.split('.'), p2.split('.'));\n  } else if (p1 || p2) {\n    return p1 ? -1 : 1;\n  }\n\n  return 0;\n};\n","import { compareVersions } from './compareVersions';\nimport { CompareOperator } from './utils';\n\n/**\n * Compare [semver](https://semver.org/) version strings using the specified operator.\n *\n * @param v1 First version to compare\n * @param v2 Second version to compare\n * @param operator Allowed arithmetic operator to use\n * @returns `true` if the comparison between the firstVersion and the secondVersion satisfies the operator, `false` otherwise.\n *\n * @example\n * ```\n * compare('10.1.8', '10.0.4', '>'); // return true\n * compare('10.0.1', '10.0.1', '='); // return true\n * compare('10.1.1', '10.2.2', '<'); // return true\n * compare('10.1.1', '10.2.2', '<='); // return true\n * compare('10.1.1', '10.2.2', '>='); // return false\n * ```\n */\nexport const compare = (v1: string, v2: string, operator: CompareOperator) => {\n  // validate input operator\n  assertValidOperator(operator);\n\n  // since result of compareVersions can only be -1 or 0 or 1\n  // a simple map can be used to replace switch\n  const res = compareVersions(v1, v2);\n\n  return operatorResMap[operator].includes(res);\n};\n\nconst operatorResMap = {\n  '>': [1],\n  '>=': [0, 1],\n  '=': [0],\n  '<=': [-1, 0],\n  '<': [-1],\n  '!=': [-1, 1],\n};\n\nconst allowedOperators = Object.keys(operatorResMap);\n\nconst assertValidOperator = (op: string) => {\n  if (typeof op !== 'string') {\n    throw new TypeError(\n      `Invalid operator type, expected string but got ${typeof op}`\n    );\n  }\n  if (allowedOperators.indexOf(op) === -1) {\n    throw new Error(\n      `Invalid operator, expected one of ${allowedOperators.join('|')}`\n    );\n  }\n};\n","import { compare } from 'compare-versions';\n\nimport { type UseNamedQueryParams, useNamedQuery } from '../core';\nimport { QUERY_KEYS } from '../utils';\n\nimport type { NodeInfo } from 'fuels';\nimport { useProvider } from './useProvider';\n\ntype UseNodeInfoParams = {\n  /**\n   * The minimum version of the node that is considered compatible.\n   * Defaults to '0.0.0' if not provided.\n   */\n  version?: string;\n  /**\n   * Additional query parameters to customize the behavior of `useNamedQuery`.\n   */\n  query?: UseNamedQueryParams<\n    'nodeInfo',\n    NodeInfo | null,\n    Error,\n    NodeInfo | null\n  >;\n};\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook to fetch node information from the provider and check compatibility.\n *\n * @params {object} The parameters to configure the hook.\n * - `version`: The minimum version of the node that is considered compatible.\n *\n * @returns {object} An object containing:\n * - `nodeInfo`: The node information data or `null`.\n * - `isCompatible`: Whether the node is compatible with the specified version.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.\n *\n * @examples\n * To fetch node information and check compatibility\n * ```ts\n * const { nodeInfo, isCompatible } = useNodeInfo({ version: '1.2.3' });\n * ```\n */\nexport const useNodeInfo = ({\n  version = '0.0.0',\n  query: queryParams,\n}: UseNodeInfoParams = {}) => {\n  const { provider } = useProvider();\n\n  const query = useNamedQuery('nodeInfo', {\n    queryKey: QUERY_KEYS.nodeInfo(provider?.url),\n    queryFn: () => {\n      try {\n        return provider?.fetchNode() || null;\n      } catch (_error) {\n        return null;\n      }\n    },\n    placeholderData: null,\n    enabled: !!provider,\n    ...queryParams,\n  });\n\n  return new Proxy(query, {\n    get(target, prop) {\n      if (prop === 'isCompatible') {\n        if (target.nodeInfo?.nodeVersion) {\n          return compare(target.nodeInfo?.nodeVersion, version, '>=');\n        }\n\n        return null;\n      }\n\n      return Reflect.get(target, prop);\n    },\n  }) as typeof query & {\n    isCompatible: boolean;\n  };\n};\n","import { useMutation } from '@tanstack/react-query';\nimport { useFuel } from '../providers';\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook to add a network in the connected app.\n *\n * @returns {object} An object containing:\n * - `selectNetwork`: function to add a network synchronously.\n * - `selectNetworkAsync` function to add a network asynchronously.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useMutation | `...mutationProps`}: Destructured properties from `useMutation` result.\n *\n * @examples\n *  To select a network synchronously:\n * ```ts\n * const { selectNetwork } = useSelectNetwork();\n * selectNetwork(network);\n * ```\n *\n * To select a network asynchronously:\n * ```ts\n * const { selectNetworkAsync } = useSelectNetwork();\n * await selectNetworkAsync(network);\n * ```\n *\n */\nexport const useSelectNetwork = () => {\n  const { fuel } = useFuel();\n\n  const { mutate, mutateAsync, ...queryProps } = useMutation({\n    mutationFn: fuel.selectNetwork,\n  });\n\n  return {\n    selectNetwork: mutate,\n    selectNetworkAsync: mutateAsync,\n    ...queryProps,\n  };\n};\n","import { useMutation } from '@tanstack/react-query';\nimport { Address, type TransactionRequestLike } from 'fuels';\n\nimport { useFuel } from '../providers';\n\ntype MutationParams = {\n  /**\n   * The address to send the transaction to. Can be a string or an Address.\n   */\n  address: string | Address;\n  /**\n   * The transaction request object that defines the transaction details.\n   */\n  transaction: TransactionRequestLike;\n};\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook to send transactions in the connected app.\n *\n * @params {Object} The parameters to send a transaction.\n * - `address`: The address to send the transaction to.\n * - `transaction`: The transaction request object that defines the transaction details.\n *\n * @returns {Object} Methods to send transactions.\n * - `sendTransaction`: function to send a transaction synchronously.\n * - `sendTransactionAsync`: function to send a transaction asynchronously.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useMutation | `...mutationProps`}: Destructured properties from `useMutation` result.\n *\n * @examples\n * To send a transaction synchronously:\n * ```ts\n * const { sendTransaction } = useSendTransaction();\n * sendTransaction({ address: '0x...', transaction: {...} });\n * ```\n *\n * To send a transaction asynchronously:\n * ```ts\n * const { sendTransactionAsync } = useSendTransaction();\n * await sendTransactionAsync({ address: '0x...', transaction: {...} });\n * ```\n */\nexport const useSendTransaction = () => {\n  const { fuel } = useFuel();\n\n  const { mutate, mutateAsync, ...queryProps } = useMutation({\n    mutationFn: ({ address, transaction }: MutationParams) => {\n      const destination = Address.fromDynamicInput(address).toString();\n      return fuel.sendTransaction(destination, transaction);\n    },\n  });\n\n  return {\n    sendTransaction: mutate,\n    sendTransactionAsync: mutateAsync,\n    ...queryProps,\n  };\n};\n","// TODO: fix this import when sdk error gets fixed: https://github.com/FuelLabs/fuels-ts/issues/1054\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport type * as fuels from 'fuels';\n\nimport { useNamedQuery } from '../core';\nimport { useFuel } from '../providers';\nimport { QUERY_KEYS } from '../utils';\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook to fetch transaction details using a transaction ID.\n *\n * @params {string} The parameters to fetch the transaction.\n * - `txId`: A string value representing the transaction ID.\n *\n * @returns {object} An object containing:\n * - `transaction`: The transaction details retrieved from the provider, or `null` if not found.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.\n *\n * @examples\n * To fetch transaction details:\n * ```ts\n * const { transaction, error, isLoading } = useTransaction('0x1234');\n * ```\n */\nexport const useTransaction = (txId?: string) => {\n  const { fuel } = useFuel();\n\n  return useNamedQuery('transaction', {\n    queryKey: QUERY_KEYS.transaction(txId),\n    queryFn: async () => {\n      try {\n        const provider = await fuel?.getProvider();\n        if (!provider) return null;\n        const response = await provider.getTransaction(txId || '');\n        return response;\n      } catch (_error: unknown) {\n        return null;\n      }\n    },\n    placeholderData: null,\n    enabled: !!txId,\n  });\n};\n","import { TransactionResponse } from 'fuels';\n// should import BN because of this TS error: https://github.com/microsoft/TypeScript/issues/47663\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport type { TransactionResult } from 'fuels';\n\nimport { type UseNamedQueryParams, useNamedQuery } from '../core';\nimport { QUERY_KEYS } from '../utils';\nimport { useChainId } from './useChainId';\nimport { useProvider } from './useProvider';\n\ntype UseTransactionReceiptsParams<TTransactionType = void> = {\n  /**\n   * The transaction ID to fetch the receipts for.\n   */\n  txId?: string;\n  /**\n   * Additional query parameters to customize the behavior of `useNamedQuery`.\n   */\n  /**\n   * Additional query parameters to customize the behavior of `useNamedQuery`.\n   */\n  query?: UseNamedQueryParams<\n    'transactionReceipts',\n    TransactionResult<TTransactionType>['receipts'] | null,\n    Error,\n    TransactionResult<TTransactionType>['receipts'] | null\n  >;\n};\n\n/**\n * @deprecated\n *\n * Use `useTransactionResult` instead with `select` function in the `query` parameter.\n */\nexport const useTransactionReceipts = <TTransactionType = void>({\n  txId,\n  query,\n}: UseTransactionReceiptsParams<TTransactionType>) => {\n  const { provider } = useProvider();\n  const { chainId } = useChainId();\n\n  return useNamedQuery('transactionReceipts', {\n    queryKey: QUERY_KEYS.transactionReceipts(txId, chainId),\n    queryFn: async () => {\n      try {\n        if (!provider) return null;\n\n        const response = new TransactionResponse(\n          txId || '',\n          provider,\n          await provider.getChainId(),\n        );\n        if (!response) return null;\n\n        const { receipts } = await response.waitForResult();\n        return receipts || null;\n      } catch (_error: unknown) {\n        return null;\n      }\n    },\n    placeholderData: null,\n    enabled: !!txId,\n    ...query,\n  });\n};\n","// should import ChainInfo because of this error: https://github.com/FuelLabs/fuels-ts/issues/1054\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport type { ChainInfo } from 'fuels';\nimport type { UseNamedQueryParams } from '../core';\n\nimport { useNamedQuery } from '../core';\nimport { QUERY_KEYS } from '../utils';\n\nimport { useProvider } from './useProvider';\n\ntype UseChainParams<TName extends string, TData> = {\n  /**\n   * Additional query parameters to customize the behavior of `useNamedQuery`.\n   */\n  query?: UseNamedQueryParams<TName, TData, Error, TData>;\n};\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook that returns the chain ID for the current provider.\n *\n * @returns {object} An object containing:\n * - `chainId`: The current chain ID.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.\n *\n * @examples\n * ```ts\n * const { chainId } = useChainId();\n * console.log(chainId);\n * ```\n */\nexport const useChainId = (\n  params?: UseChainParams<'chainId', number | null>,\n) => {\n  const { provider } = useProvider();\n\n  return useNamedQuery('chainId', {\n    queryKey: QUERY_KEYS.chainId(),\n    queryFn: async () => {\n      try {\n        const currentFuelChain = await provider?.getChainId();\n        return currentFuelChain || null;\n      } catch (_error: unknown) {\n        return null;\n      }\n    },\n    placeholderData: null,\n    enabled: !!provider,\n    ...params?.query,\n  });\n};\n","import {\n  TransactionResponse,\n  type TransactionResult,\n  type TransactionType,\n} from 'fuels';\n\nimport { type UseNamedQueryParams, useNamedQuery } from '../core';\nimport { useFuel } from '../providers';\nimport { QUERY_KEYS } from '../utils';\nimport { useChainId } from './useChainId';\nimport { useProvider } from './useProvider';\n\ntype UseTransactionResultParams<\n  TTransactionType extends TransactionType,\n  TName extends string,\n  TData,\n> = {\n  /**\n   * The ID of the transaction to retrieve the result for.\n   */\n  txId?: string;\n  /**\n   * Additional query parameters to customize the behavior of `useNamedQuery`.\n   */\n  query?: UseNamedQueryParams<\n    TName,\n    TransactionResult<TTransactionType> | null,\n    Error,\n    TData\n  >;\n};\n\n// @TODO: Add a link to fuel connector's documentation.\n/**\n * A hook to fetch the result of a specific transaction in the connected app.\n *\n * @params {UseTransactionResultParams<TTransactionType, TName, TData>} Parameters to configure the hook.\n * - `txId`: A string value representing the transaction ID.\n * - `query`: Additional query parameters to customize the behavior of `useNamedQuery`.\n *\n * @returns {object} An object containing\n * - `transactionResult`: The result of the transaction or `null`.\n * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.\n *\n * @examples\n * To fetch the result of a transaction:\n * ```ts\n * const { transactionResult } = useTransactionResult({\n *   txId: '0x...',\n * });\n * console.log(transactionResult);\n * ```\n */\nexport const useTransactionResult = <\n  TTransactionType extends TransactionType,\n  TName extends string = string,\n  TData = TransactionResult<TTransactionType> | null,\n>({\n  txId = '',\n  query = {},\n}: UseTransactionResultParams<TTransactionType, TName, TData>) => {\n  const { provider } = useProvider();\n  const { chainId } = useChainId();\n  const { name = 'transactionResult', ...options } = query;\n\n  return useNamedQuery(name, {\n    queryKey: QUERY_KEYS.transactionResult(txId, chainId),\n    queryFn: async () => {\n      if (!provider) return null;\n\n      const txResult = new TransactionResponse(\n        txId,\n        provider,\n        await provider.getChainId(),\n      );\n      const data = await txResult.waitForResult<TTransactionType>();\n\n      return data || null;\n    },\n    placeholderData: null,\n    enabled: !!txId,\n    ...options,\n  });\n};\n"]}