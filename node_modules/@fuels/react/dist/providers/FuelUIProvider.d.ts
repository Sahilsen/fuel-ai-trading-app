import type { FuelConfig, FuelConnector } from 'fuels';
import { type ReactNode } from 'react';
import type { UIConfig } from '../types';
export type FuelUIProviderProps = {
    children?: ReactNode;
    uiConfig: UIConfig;
    fuelConfig: FuelConfig;
    theme?: 'dark' | 'light';
};
export declare enum Routes {
    List = "LIST",
    Install = "INSTALL",
    Connecting = "CONNECTING",
    PredicateExternalDisclaimer = "PREDICATE_EXTERNAL_DISCLAIMER",
    PredicateAddressDisclaimer = "PREDICATE_ADDRESS_DISCLAIMER"
}
export type FuelUIContextType = {
    isConnected: boolean;
    uiConfig: UIConfig;
    fuelConfig: FuelConfig;
    theme: 'dark' | 'light';
    connectors: Array<FuelConnector>;
    isLoading: boolean;
    isConnecting: boolean;
    isError: boolean;
    connect: () => void;
    cancel: (params?: {
        clean?: boolean;
    }) => void;
    setError: (error: Error | null) => void;
    error: Error | null;
    dialog: {
        connector: FuelConnector | null;
        isOpen: boolean;
        back: () => void;
        connect: (connector: FuelConnector) => void;
        retryConnect: (connector: FuelConnector) => Promise<void>;
        route: Routes;
        setRoute: (state: Routes) => void;
        _startConnection: (connector: FuelConnector) => void;
    };
};
export declare const FuelConnectContext: import("react").Context<FuelUIContextType | null>;
export declare const useHasFuelConnectProvider: () => boolean;
export declare const useConnectUI: () => FuelUIContextType;
export declare function FuelUIProvider({ fuelConfig, children, theme, uiConfig, }: FuelUIProviderProps): import("react/jsx-runtime").JSX.Element;
