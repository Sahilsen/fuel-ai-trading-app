/**
 * A hook to handle connection to the Fuel network in the connected app.
 *
 * @params {object} The properties of the hook.
 * - `connectorName`: The connector's name to use in the connect function.
 *
 * @returns {object} An object containing:
 * - `connect`: function to connect to the Fuel Network synchronously.
 * - `connectAsync`: function to connect to the Fuel Network asynchronously.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useMutation | `...mutationProps`}: Destructured properties from `useMutation` result.
 *
 * @examples
 * To connect to the Fuel network
 * ```ts
 * const { connect } = useConnect();
 * connect('myConnector');
 * ```
 *
 * @example To connect to the Fuel network asynchronously
 * ```ts
 * const { connectAsync } = useConnect();
 * await connectAsync('myConnector');
 * ```
 *
 */
export declare const useConnect: () => {
    data: undefined;
    variables: undefined;
    error: null;
    isError: false;
    isIdle: true;
    isPending: false;
    isSuccess: false;
    status: "idle";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    connect: import("@tanstack/react-query").UseMutateFunction<boolean, Error, string | null | undefined, unknown>;
    connectAsync: import("@tanstack/react-query").UseMutateAsyncFunction<boolean, Error, string | null | undefined, unknown>;
} | {
    data: undefined;
    variables: string | null | undefined;
    error: null;
    isError: false;
    isIdle: false;
    isPending: true;
    isSuccess: false;
    status: "pending";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    connect: import("@tanstack/react-query").UseMutateFunction<boolean, Error, string | null | undefined, unknown>;
    connectAsync: import("@tanstack/react-query").UseMutateAsyncFunction<boolean, Error, string | null | undefined, unknown>;
} | {
    data: undefined;
    error: Error;
    variables: string | null | undefined;
    isError: true;
    isIdle: false;
    isPending: false;
    isSuccess: false;
    status: "error";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    connect: import("@tanstack/react-query").UseMutateFunction<boolean, Error, string | null | undefined, unknown>;
    connectAsync: import("@tanstack/react-query").UseMutateAsyncFunction<boolean, Error, string | null | undefined, unknown>;
} | {
    data: boolean;
    error: null;
    variables: string | null | undefined;
    isError: false;
    isIdle: false;
    isPending: false;
    isSuccess: true;
    status: "success";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    connect: import("@tanstack/react-query").UseMutateFunction<boolean, Error, string | null | undefined, unknown>;
    connectAsync: import("@tanstack/react-query").UseMutateAsyncFunction<boolean, Error, string | null | undefined, unknown>;
};
