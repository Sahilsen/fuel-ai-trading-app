import type { TransactionResult } from 'fuels';
import { type UseNamedQueryParams } from '../core';
type UseTransactionReceiptsParams<TTransactionType = void> = {
    /**
     * The transaction ID to fetch the receipts for.
     */
    txId?: string;
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<'transactionReceipts', TransactionResult<TTransactionType>['receipts'] | null, Error, TransactionResult<TTransactionType>['receipts'] | null>;
};
/**
 * @deprecated
 *
 * Use `useTransactionResult` instead with `select` function in the `query` parameter.
 */
export declare const useTransactionReceipts: <TTransactionType = void>({ txId, query, }: UseTransactionReceiptsParams<TTransactionType>) => import("../core").DefinedNamedUseQueryResult<"transactionReceipts", import("fuels").TransactionResultReceipt[] | null, Error>;
export {};
