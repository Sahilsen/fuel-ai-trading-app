import type { BN, BytesLike } from 'fuels';
import { type UseNamedQueryParams } from '../core';
type UseBalanceParams = {
    /**
     * The address to fetch the balance for.
     * @deprecated Use `account` instead.
     */
    address?: string | null;
    /**
     * The account to fetch the balance for.
     */
    account?: string | null;
    /**
     * The asset ID to fetch the balance for.
     */
    assetId?: BytesLike;
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<'balance', BN | null, Error, BN | null>;
};
/**
 * A hook that returns the balance of the user.
 *
 * @params {object} The options to fetch the balance for.
 * - `address`: The address to fetch the balance for.
 * - `assetId`: The asset ID to fetch the balance for.
 *
 * @returns {object} An object containing:
 * - `balance`: The balance of the user.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @examples
 * ```ts
 * const { balance } = useBalance({address: '0x1234', assetId: '0x1234'});
 * console.log(balance.format());
 * ```
 */
export declare const useBalance: ({ address, account, assetId, query, }: UseBalanceParams) => import("../core").DefinedNamedUseQueryResult<"balance", BN | null, Error>;
export {};
