/**
 * A hook to disconnect from current connector.
 *
 * @returns {object} An object containing:
 * - `disconnect`: A function to trigger the disconnection process synchronously.
 * - `disconnectAsync`: A function to trigger the disconnection process asynchronously.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useMutation | `...mutationProps`}: Destructured properties from `useMutation` result.
 *
 * @examples
 * To disconnect synchronously:
 * ```ts
 * const { disconnect } = useDisconnect();
 * disconnect();
 * ```
 *
 * To disconnect asynchronously:
 * ```ts
 * const { disconnectAsync } = useDisconnect();
 * await disconnectAsync();
 * ```
 */
export declare const useDisconnect: () => {
    data: undefined;
    variables: undefined;
    error: null;
    isError: false;
    isIdle: true;
    isPending: false;
    isSuccess: false;
    status: "idle";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    disconnect: import("@tanstack/react-query").UseMutateFunction<boolean, Error, void, unknown>;
    disconnectAsync: import("@tanstack/react-query").UseMutateAsyncFunction<boolean, Error, void, unknown>;
} | {
    data: undefined;
    variables: void;
    error: null;
    isError: false;
    isIdle: false;
    isPending: true;
    isSuccess: false;
    status: "pending";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    disconnect: import("@tanstack/react-query").UseMutateFunction<boolean, Error, void, unknown>;
    disconnectAsync: import("@tanstack/react-query").UseMutateAsyncFunction<boolean, Error, void, unknown>;
} | {
    data: undefined;
    error: Error;
    variables: void;
    isError: true;
    isIdle: false;
    isPending: false;
    isSuccess: false;
    status: "error";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    disconnect: import("@tanstack/react-query").UseMutateFunction<boolean, Error, void, unknown>;
    disconnectAsync: import("@tanstack/react-query").UseMutateAsyncFunction<boolean, Error, void, unknown>;
} | {
    data: boolean;
    error: null;
    variables: void;
    isError: false;
    isIdle: false;
    isPending: false;
    isSuccess: true;
    status: "success";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    disconnect: import("@tanstack/react-query").UseMutateFunction<boolean, Error, void, unknown>;
    disconnectAsync: import("@tanstack/react-query").UseMutateAsyncFunction<boolean, Error, void, unknown>;
};
