import { type Address, Contract, type JsonAbi, type Provider } from 'fuels';
type ContractReadWithInstanceProps<C extends Contract, F extends keyof C['functions']> = {
    contract: C;
    functionName: F;
    args?: Parameters<C['functions'][F]>;
};
type ContractReadWithAbiProps<A extends JsonAbi> = {
    contract: {
        address: Address;
        abi: A;
        provider: Provider;
    };
    functionName: string;
    args?: unknown[];
};
type ContractReadProps<A extends JsonAbi, C extends Contract | ContractReadWithAbiProps<A>['contract'], F extends C extends Contract ? keyof C['functions'] : string> = C extends Contract ? ContractReadWithInstanceProps<C, F> : ContractReadWithAbiProps<A>;
/**
 * A hook to read data from a smart contract in the connected app.
 *
 * @params {object} The properties of the hook.
 * - `contract`: The contract instance or contract data (address, ABI, and provider).
 * - `functionName`: The name of the function to call on the contract.
 * - `args`: The arguments to pass to the contract function.
 *
 * @returns {object} An object containing:
 * - The result of the contract function call.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @throws {Error} Throws an error if the contract or function is invalid or if the function attempts to write to storage.
 *
 * @examples
 * To read data from a contract
 * ```ts
 * const { data } = useContractRead({
 *   contract: myContractInstance,
 *   functionName: 'getBalance',
 *   args: [userAddress],
 * });
 * console.log(data);
 * ```
 */
export declare const useContractRead: <A extends JsonAbi, C extends Contract | {
    address: Address;
    abi: A;
    provider: Provider;
}, F extends C extends Contract ? keyof C["functions"] : string>({ contract: _contract, functionName, args, }: ContractReadProps<A, C, F>) => import("../core/useNamedQuery").DefinedNamedUseQueryResult<"contractRead", import("fuels").FunctionInvocationScope<any[], any>, Error>;
export {};
