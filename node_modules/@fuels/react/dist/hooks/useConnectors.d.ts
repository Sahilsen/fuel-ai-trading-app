import type { FuelConnector } from 'fuels';
import { type UseNamedQueryParams } from '../core';
type UseConnectorsParams<TName extends string, TData> = {
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<TName, FuelConnector[], Error, TData>;
};
/**
 * A hook to fetch a list of connectors in the connected app.
 *
 * @params {UseConnectorsParams<TName, TData>} Parameters to configure the hook.
 * - `query`: Additional query parameters to customize the behavior of `useNamedQuery`.
 *
 * @returns {object} An object containing:
 * - `connectors`: The list of available connectors.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @examples
 * To fetch connectors:
 * ```ts
 * const { connectors } = useConnectors();
 * console.log(connectors);
 * ```
 */
export declare const useConnectors: <TName extends string = string, TData = FuelConnector[]>({ query, }?: UseConnectorsParams<TName, TData>) => import("../core").DefinedNamedUseQueryResult<"connectors", TData, Error>;
export {};
