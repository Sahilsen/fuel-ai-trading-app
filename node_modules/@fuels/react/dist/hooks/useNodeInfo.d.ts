import { type UseNamedQueryParams } from '../core';
import type { NodeInfo } from 'fuels';
type UseNodeInfoParams = {
    /**
     * The minimum version of the node that is considered compatible.
     * Defaults to '0.0.0' if not provided.
     */
    version?: string;
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<'nodeInfo', NodeInfo | null, Error, NodeInfo | null>;
};
/**
 * A hook to fetch node information from the provider and check compatibility.
 *
 * @params {object} The parameters to configure the hook.
 * - `version`: The minimum version of the node that is considered compatible.
 *
 * @returns {object} An object containing:
 * - `nodeInfo`: The node information data or `null`.
 * - `isCompatible`: Whether the node is compatible with the specified version.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @examples
 * To fetch node information and check compatibility
 * ```ts
 * const { nodeInfo, isCompatible } = useNodeInfo({ version: '1.2.3' });
 * ```
 */
export declare const useNodeInfo: ({ version, query: queryParams, }?: UseNodeInfoParams) => {
    error: Error | null;
    isError: boolean;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: boolean;
    isSuccess: boolean;
    status: "error" | "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions | undefined) => Promise<import("@tanstack/react-query").QueryObserverResult<NodeInfo | null, Error>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
} & {
    nodeInfo: NodeInfo | null;
} & {
    isCompatible: boolean;
};
export {};
