import { Address, type TransactionRequestLike } from 'fuels';
type MutationParams = {
    /**
     * The address to send the transaction to. Can be a string or an Address.
     */
    address: string | Address;
    /**
     * The transaction request object that defines the transaction details.
     */
    transaction: TransactionRequestLike;
};
/**
 * A hook to send transactions in the connected app.
 *
 * @params {Object} The parameters to send a transaction.
 * - `address`: The address to send the transaction to.
 * - `transaction`: The transaction request object that defines the transaction details.
 *
 * @returns {Object} Methods to send transactions.
 * - `sendTransaction`: function to send a transaction synchronously.
 * - `sendTransactionAsync`: function to send a transaction asynchronously.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useMutation | `...mutationProps`}: Destructured properties from `useMutation` result.
 *
 * @examples
 * To send a transaction synchronously:
 * ```ts
 * const { sendTransaction } = useSendTransaction();
 * sendTransaction({ address: '0x...', transaction: {...} });
 * ```
 *
 * To send a transaction asynchronously:
 * ```ts
 * const { sendTransactionAsync } = useSendTransaction();
 * await sendTransactionAsync({ address: '0x...', transaction: {...} });
 * ```
 */
export declare const useSendTransaction: () => {
    data: undefined;
    variables: undefined;
    error: null;
    isError: false;
    isIdle: true;
    isPending: false;
    isSuccess: false;
    status: "idle";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    sendTransaction: import("@tanstack/react-query").UseMutateFunction<string | import("fuels").TransactionResponse, Error, MutationParams, unknown>;
    sendTransactionAsync: import("@tanstack/react-query").UseMutateAsyncFunction<string | import("fuels").TransactionResponse, Error, MutationParams, unknown>;
} | {
    data: undefined;
    variables: MutationParams;
    error: null;
    isError: false;
    isIdle: false;
    isPending: true;
    isSuccess: false;
    status: "pending";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    sendTransaction: import("@tanstack/react-query").UseMutateFunction<string | import("fuels").TransactionResponse, Error, MutationParams, unknown>;
    sendTransactionAsync: import("@tanstack/react-query").UseMutateAsyncFunction<string | import("fuels").TransactionResponse, Error, MutationParams, unknown>;
} | {
    data: undefined;
    error: Error;
    variables: MutationParams;
    isError: true;
    isIdle: false;
    isPending: false;
    isSuccess: false;
    status: "error";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    sendTransaction: import("@tanstack/react-query").UseMutateFunction<string | import("fuels").TransactionResponse, Error, MutationParams, unknown>;
    sendTransactionAsync: import("@tanstack/react-query").UseMutateAsyncFunction<string | import("fuels").TransactionResponse, Error, MutationParams, unknown>;
} | {
    data: string | import("fuels").TransactionResponse;
    error: null;
    variables: MutationParams;
    isError: false;
    isIdle: false;
    isPending: false;
    isSuccess: true;
    status: "success";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    sendTransaction: import("@tanstack/react-query").UseMutateFunction<string | import("fuels").TransactionResponse, Error, MutationParams, unknown>;
    sendTransactionAsync: import("@tanstack/react-query").UseMutateAsyncFunction<string | import("fuels").TransactionResponse, Error, MutationParams, unknown>;
};
export {};
