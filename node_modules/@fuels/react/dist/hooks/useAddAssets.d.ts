import type { Asset } from 'fuels';
/**
 * A hook to add one or more assets in the connected app asynchronously or synchronously.
 *
 * @returns {object} An object containing:
 * - `addAssets`: function to add assets synchronously.
 * - `addAssetsAsync`: function to add assets asynchronously.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useMutation | `...mutationProps`}: Destructured properties from `useMutation` result.
 *
 * @examples
 *  To add assets synchronously:
 * ```ts
 * const { addAssets } = useAddAssets();
 * addAssets(asset);
 * ```
 *
 * To add assets asynchronously:
 * ```ts
 * const { addAssetsAsync } = useAddAssets();
 * await addAssetsAsync([asset1, asset2]);
 * ```
 */
export declare const useAddAssets: () => {
    data: undefined;
    variables: undefined;
    error: null;
    isError: false;
    isIdle: true;
    isPending: false;
    isSuccess: false;
    status: "idle";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    addAssets: import("@tanstack/react-query").UseMutateFunction<boolean, Error, Asset | Asset[], unknown>;
    addAssetsAsync: import("@tanstack/react-query").UseMutateAsyncFunction<boolean, Error, Asset | Asset[], unknown>;
} | {
    data: undefined;
    variables: Asset | Asset[];
    error: null;
    isError: false;
    isIdle: false;
    isPending: true;
    isSuccess: false;
    status: "pending";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    addAssets: import("@tanstack/react-query").UseMutateFunction<boolean, Error, Asset | Asset[], unknown>;
    addAssetsAsync: import("@tanstack/react-query").UseMutateAsyncFunction<boolean, Error, Asset | Asset[], unknown>;
} | {
    data: undefined;
    error: Error;
    variables: Asset | Asset[];
    isError: true;
    isIdle: false;
    isPending: false;
    isSuccess: false;
    status: "error";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    addAssets: import("@tanstack/react-query").UseMutateFunction<boolean, Error, Asset | Asset[], unknown>;
    addAssetsAsync: import("@tanstack/react-query").UseMutateAsyncFunction<boolean, Error, Asset | Asset[], unknown>;
} | {
    data: boolean;
    error: null;
    variables: Asset | Asset[];
    isError: false;
    isIdle: false;
    isPending: false;
    isSuccess: true;
    status: "success";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    addAssets: import("@tanstack/react-query").UseMutateFunction<boolean, Error, Asset | Asset[], unknown>;
    addAssetsAsync: import("@tanstack/react-query").UseMutateAsyncFunction<boolean, Error, Asset | Asset[], unknown>;
};
