import * as _tanstack_react_query from '@tanstack/react-query';
import { DefaultError, DefinedUseQueryResult, QueryKey, UseQueryOptions, QueryClient } from '@tanstack/react-query';
import * as fuels from 'fuels';
import { Asset, BN, BytesLike, ChainInfo, JsonAbi, Contract, Address, Provider, FuelConnector, Network, NodeInfo, TransactionRequestLike, TransactionResult, TransactionType, Account, FuelConfig, Fuel } from 'fuels';
import * as react_jsx_runtime from 'react/jsx-runtime';
import { ReactNode } from 'react';

type ExcludeData<T> = Omit<T, 'data'>;
type ExcludePlaceholderData<T> = Omit<T, 'placeholderData'>;
type DefinedNamedUseQueryResult<TName extends string, TQueryFnData = unknown, TError = DefaultError> = ExcludeData<DefinedUseQueryResult<TQueryFnData, TError>> & {
    [key in TName]: DefinedUseQueryResult<TQueryFnData, TError>['data'];
};
/**
 * TanStack Query parameters for external usage.
 * Parameters like `queryFn` and `queryKey` are used internally and you cannot override them.
 *
 * See docs for more information: https://tanstack.com/query/latest/docs/framework/react/reference/useQuery
 */
interface UseNamedQueryParams<TName extends string, TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey> extends Omit<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>, 'queryKey' | 'queryFn' | 'enabled' | 'initialData' | 'placeholderData'> {
    name?: TName;
}
/**
 * TanStack Query parameters for internal usage (inside @fuels/react).
 * This is only used for making the `placeholderData` property required.
 *
 * See docs for more information: https://tanstack.com/query/latest/docs/framework/react/reference/useQuery
 */
interface UseNamedQueryOptions<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey> extends ExcludePlaceholderData<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>> {
    placeholderData: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>['placeholderData'];
}
/**
 * useNamedQuery is a wrapper for useQuery that allows you to override the "data" property with a custom name.
 *
 * @param name a identifier to override "data" property with this name
 * @param options UseNamedQueryOptions
 * @returns useQuery
 */
declare function useNamedQuery<TName extends string, TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(name: TName, options: UseNamedQueryOptions<TQueryFnData, TError, TData, TQueryKey>, queryClient?: QueryClient): DefinedNamedUseQueryResult<TName, TData, TError>;

type UseAccountParams<TName extends string, TData> = {
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<TName, TData, Error, TData>;
};
/**
 * A hook to get the current account of the user in the connected app.
 *
 * @returns {object} An object containing:
 * - `account`: The current account of the user.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @examples
 * ```ts
 * const { account } = useAccount();
 * console.log(account);
 * ```
 */
declare const useAccount: (params?: UseAccountParams<'account', string | null>) => DefinedNamedUseQueryResult<"account", string | null, Error>;

type UseAccountsParams<TName extends string, TData> = {
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<TName, TData, Error, TData>;
};
/**
 * A hook to get the accounts of the user in the connected app.
 *
 * @returns {object} An object containing:
 * - `accounts`: User accounts.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @examples
 * ```ts
 * const { accounts } = useAccounts();
 * console.log(accounts);
 * ```
 */
declare const useAccounts: (params?: UseAccountsParams<'accounts', string[]>) => DefinedNamedUseQueryResult<"accounts", string[], Error>;

/**
 * A hook to add one or more assets in the connected app asynchronously or synchronously.
 *
 * @returns {object} An object containing:
 * - `addAssets`: function to add assets synchronously.
 * - `addAssetsAsync`: function to add assets asynchronously.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useMutation | `...mutationProps`}: Destructured properties from `useMutation` result.
 *
 * @examples
 *  To add assets synchronously:
 * ```ts
 * const { addAssets } = useAddAssets();
 * addAssets(asset);
 * ```
 *
 * To add assets asynchronously:
 * ```ts
 * const { addAssetsAsync } = useAddAssets();
 * await addAssetsAsync([asset1, asset2]);
 * ```
 */
declare const useAddAssets: () => {
    data: undefined;
    variables: undefined;
    error: null;
    isError: false;
    isIdle: true;
    isPending: false;
    isSuccess: false;
    status: "idle";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    addAssets: _tanstack_react_query.UseMutateFunction<boolean, Error, Asset | Asset[], unknown>;
    addAssetsAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, Error, Asset | Asset[], unknown>;
} | {
    data: undefined;
    variables: Asset | Asset[];
    error: null;
    isError: false;
    isIdle: false;
    isPending: true;
    isSuccess: false;
    status: "pending";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    addAssets: _tanstack_react_query.UseMutateFunction<boolean, Error, Asset | Asset[], unknown>;
    addAssetsAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, Error, Asset | Asset[], unknown>;
} | {
    data: undefined;
    error: Error;
    variables: Asset | Asset[];
    isError: true;
    isIdle: false;
    isPending: false;
    isSuccess: false;
    status: "error";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    addAssets: _tanstack_react_query.UseMutateFunction<boolean, Error, Asset | Asset[], unknown>;
    addAssetsAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, Error, Asset | Asset[], unknown>;
} | {
    data: boolean;
    error: null;
    variables: Asset | Asset[];
    isError: false;
    isIdle: false;
    isPending: false;
    isSuccess: true;
    status: "success";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    addAssets: _tanstack_react_query.UseMutateFunction<boolean, Error, Asset | Asset[], unknown>;
    addAssetsAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, Error, Asset | Asset[], unknown>;
};

/**
 * A hook to add a network in the connected app.
 *
 * @deprecated Use `useSelectNetwork` instead. This hook will be removed in the next major release.
 *
 * @returns {object} An object containing:
 * - `addNetwork`: function to add a network synchronously.
 * - `addNetworkAsync` function to add a network asynchronously.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useMutation | `...mutationProps`}: Destructured properties from `useMutation` result.
 *
 * @examples
 *  To add a network synchronously:
 * ```ts
 * const { addNetwork } = useAddNetwork();
 * addNetwork(network);
 * ```
 *
 * To add a network asynchronously:
 * ```ts
 * const { addNetworkAsync } = useAddNetwork();
 * await addNetworkAsync(network);
 * ```
 *
 */
declare const useAddNetwork: () => {
    data: undefined;
    variables: undefined;
    error: null;
    isError: false;
    isIdle: true;
    isPending: false;
    isSuccess: false;
    status: "idle";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    addNetwork: _tanstack_react_query.UseMutateFunction<boolean, Error, string, unknown>;
    addNetworkAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, Error, string, unknown>;
} | {
    data: undefined;
    variables: string;
    error: null;
    isError: false;
    isIdle: false;
    isPending: true;
    isSuccess: false;
    status: "pending";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    addNetwork: _tanstack_react_query.UseMutateFunction<boolean, Error, string, unknown>;
    addNetworkAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, Error, string, unknown>;
} | {
    data: undefined;
    error: Error;
    variables: string;
    isError: true;
    isIdle: false;
    isPending: false;
    isSuccess: false;
    status: "error";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    addNetwork: _tanstack_react_query.UseMutateFunction<boolean, Error, string, unknown>;
    addNetworkAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, Error, string, unknown>;
} | {
    data: boolean;
    error: null;
    variables: string;
    isError: false;
    isIdle: false;
    isPending: false;
    isSuccess: true;
    status: "success";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    addNetwork: _tanstack_react_query.UseMutateFunction<boolean, Error, string, unknown>;
    addNetworkAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, Error, string, unknown>;
};

type UseAssetsParams<TName extends string, TData> = {
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<TName, TData, Error, TData>;
};
/**
 * A hook that returns assets of the user in the connected app.
 *
 * @returns {object} An object containing
 * - `assets`: User's assets.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @examples
 * ```ts
 * const { assets } = useAssets();
 * console.log(assets);
 * ```
 */
declare const useAssets: (params?: UseAssetsParams<'assets', Asset[]>) => DefinedNamedUseQueryResult<"assets", Asset[], Error>;

type UseBalanceParams = {
    /**
     * The address to fetch the balance for.
     * @deprecated Use `account` instead.
     */
    address?: string | null;
    /**
     * The account to fetch the balance for.
     */
    account?: string | null;
    /**
     * The asset ID to fetch the balance for.
     */
    assetId?: BytesLike;
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<'balance', BN | null, Error, BN | null>;
};
/**
 * A hook that returns the balance of the user.
 *
 * @params {object} The options to fetch the balance for.
 * - `address`: The address to fetch the balance for.
 * - `assetId`: The asset ID to fetch the balance for.
 *
 * @returns {object} An object containing:
 * - `balance`: The balance of the user.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @examples
 * ```ts
 * const { balance } = useBalance({address: '0x1234', assetId: '0x1234'});
 * console.log(balance.format());
 * ```
 */
declare const useBalance: ({ address, account, assetId, query, }: UseBalanceParams) => DefinedNamedUseQueryResult<"balance", BN | null, Error>;

type UseChainParams$1<TName extends string, TData> = {
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<TName, TData, Error, TData>;
};
/**
 * A hook that returns the chain info for the current provider.
 *
 * @returns {object} An object containing:
 * - `chain`: The current chain info.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @examples
 * ```ts
 * const { chain } = useChain();
 * console.log(chain);
 * ```
 */
declare const useChain: (params?: UseChainParams$1<'chain', ChainInfo | null>) => DefinedNamedUseQueryResult<"chain", ChainInfo | null, Error>;

/**
 * A hook to handle connection to the Fuel network in the connected app.
 *
 * @params {object} The properties of the hook.
 * - `connectorName`: The connector's name to use in the connect function.
 *
 * @returns {object} An object containing:
 * - `connect`: function to connect to the Fuel Network synchronously.
 * - `connectAsync`: function to connect to the Fuel Network asynchronously.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useMutation | `...mutationProps`}: Destructured properties from `useMutation` result.
 *
 * @examples
 * To connect to the Fuel network
 * ```ts
 * const { connect } = useConnect();
 * connect('myConnector');
 * ```
 *
 * @example To connect to the Fuel network asynchronously
 * ```ts
 * const { connectAsync } = useConnect();
 * await connectAsync('myConnector');
 * ```
 *
 */
declare const useConnect: () => {
    data: undefined;
    variables: undefined;
    error: null;
    isError: false;
    isIdle: true;
    isPending: false;
    isSuccess: false;
    status: "idle";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    connect: _tanstack_react_query.UseMutateFunction<boolean, Error, string | null | undefined, unknown>;
    connectAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, Error, string | null | undefined, unknown>;
} | {
    data: undefined;
    variables: string | null | undefined;
    error: null;
    isError: false;
    isIdle: false;
    isPending: true;
    isSuccess: false;
    status: "pending";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    connect: _tanstack_react_query.UseMutateFunction<boolean, Error, string | null | undefined, unknown>;
    connectAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, Error, string | null | undefined, unknown>;
} | {
    data: undefined;
    error: Error;
    variables: string | null | undefined;
    isError: true;
    isIdle: false;
    isPending: false;
    isSuccess: false;
    status: "error";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    connect: _tanstack_react_query.UseMutateFunction<boolean, Error, string | null | undefined, unknown>;
    connectAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, Error, string | null | undefined, unknown>;
} | {
    data: boolean;
    error: null;
    variables: string | null | undefined;
    isError: false;
    isIdle: false;
    isPending: false;
    isSuccess: true;
    status: "success";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    connect: _tanstack_react_query.UseMutateFunction<boolean, Error, string | null | undefined, unknown>;
    connectAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, Error, string | null | undefined, unknown>;
};

type ContractReadWithInstanceProps<C extends Contract, F extends keyof C['functions']> = {
    contract: C;
    functionName: F;
    args?: Parameters<C['functions'][F]>;
};
type ContractReadWithAbiProps<A extends JsonAbi> = {
    contract: {
        address: Address;
        abi: A;
        provider: Provider;
    };
    functionName: string;
    args?: unknown[];
};
type ContractReadProps<A extends JsonAbi, C extends Contract | ContractReadWithAbiProps<A>['contract'], F extends C extends Contract ? keyof C['functions'] : string> = C extends Contract ? ContractReadWithInstanceProps<C, F> : ContractReadWithAbiProps<A>;
/**
 * A hook to read data from a smart contract in the connected app.
 *
 * @params {object} The properties of the hook.
 * - `contract`: The contract instance or contract data (address, ABI, and provider).
 * - `functionName`: The name of the function to call on the contract.
 * - `args`: The arguments to pass to the contract function.
 *
 * @returns {object} An object containing:
 * - The result of the contract function call.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @throws {Error} Throws an error if the contract or function is invalid or if the function attempts to write to storage.
 *
 * @examples
 * To read data from a contract
 * ```ts
 * const { data } = useContractRead({
 *   contract: myContractInstance,
 *   functionName: 'getBalance',
 *   args: [userAddress],
 * });
 * console.log(data);
 * ```
 */
declare const useContractRead: <A extends JsonAbi, C extends Contract | {
    address: Address;
    abi: A;
    provider: Provider;
}, F extends C extends Contract ? keyof C["functions"] : string>({ contract: _contract, functionName, args, }: ContractReadProps<A, C, F>) => DefinedNamedUseQueryResult<"contractRead", fuels.FunctionInvocationScope<any[], any>, Error>;

type UseConnectorsParams<TName extends string, TData> = {
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<TName, FuelConnector[], Error, TData>;
};
/**
 * A hook to fetch a list of connectors in the connected app.
 *
 * @params {UseConnectorsParams<TName, TData>} Parameters to configure the hook.
 * - `query`: Additional query parameters to customize the behavior of `useNamedQuery`.
 *
 * @returns {object} An object containing:
 * - `connectors`: The list of available connectors.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @examples
 * To fetch connectors:
 * ```ts
 * const { connectors } = useConnectors();
 * console.log(connectors);
 * ```
 */
declare const useConnectors: <TName extends string = string, TData = FuelConnector[]>({ query, }?: UseConnectorsParams<TName, TData>) => DefinedNamedUseQueryResult<"connectors", TData, Error>;

/**
 * A hook to disconnect from current connector.
 *
 * @returns {object} An object containing:
 * - `disconnect`: A function to trigger the disconnection process synchronously.
 * - `disconnectAsync`: A function to trigger the disconnection process asynchronously.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useMutation | `...mutationProps`}: Destructured properties from `useMutation` result.
 *
 * @examples
 * To disconnect synchronously:
 * ```ts
 * const { disconnect } = useDisconnect();
 * disconnect();
 * ```
 *
 * To disconnect asynchronously:
 * ```ts
 * const { disconnectAsync } = useDisconnect();
 * await disconnectAsync();
 * ```
 */
declare const useDisconnect: () => {
    data: undefined;
    variables: undefined;
    error: null;
    isError: false;
    isIdle: true;
    isPending: false;
    isSuccess: false;
    status: "idle";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    disconnect: _tanstack_react_query.UseMutateFunction<boolean, Error, void, unknown>;
    disconnectAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, Error, void, unknown>;
} | {
    data: undefined;
    variables: void;
    error: null;
    isError: false;
    isIdle: false;
    isPending: true;
    isSuccess: false;
    status: "pending";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    disconnect: _tanstack_react_query.UseMutateFunction<boolean, Error, void, unknown>;
    disconnectAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, Error, void, unknown>;
} | {
    data: undefined;
    error: Error;
    variables: void;
    isError: true;
    isIdle: false;
    isPending: false;
    isSuccess: false;
    status: "error";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    disconnect: _tanstack_react_query.UseMutateFunction<boolean, Error, void, unknown>;
    disconnectAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, Error, void, unknown>;
} | {
    data: boolean;
    error: null;
    variables: void;
    isError: false;
    isIdle: false;
    isPending: false;
    isSuccess: true;
    status: "success";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    disconnect: _tanstack_react_query.UseMutateFunction<boolean, Error, void, unknown>;
    disconnectAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, Error, void, unknown>;
};

type UseIsConnected = {
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<'network', boolean, Error, boolean>;
};
/**
 * A hook to check the connection status with the connector.
 *
 * @returns {object} An object containing:
 * - `isConnected`: A boolean value indicating the connector is connected.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @examples
 *  To check if a connection is established:
 * ```ts
 * const { isConnected } = useIsConnected();
 * ```
 */
declare const useIsConnected: (params?: UseIsConnected) => DefinedNamedUseQueryResult<"isConnected", boolean, Error>;

type UseNetwork = {
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<'network', Network | null, Error, Network | null>;
};
/**
 * A hook to retrieve the current network information in the connected app.
 *
 * @returns {object} An object containing:
 * - `network`: The network information data.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @examples
 *  To get the current network information
 * ```ts
 * const { network } = useNetwork();
 * console.log(network);
 * ```
 */
declare const useNetwork: (params?: UseNetwork) => DefinedNamedUseQueryResult<"network", Network | null, Error>;

type UseNetworkParams = {
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<'networks', Array<Network>, Error, Array<Network>>;
};
/**
 * A hook to retrieve all networks available in the connected app.
 *
 * @returns {object} An object containing:
 * - `networks`:  List of all networks available for the current connection.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @examples
 *  To get the list of networks
 * ```ts
 * const { networks } = useNetworks();
 * console.log(networks);
 * ```
 */
declare const useNetworks: (params?: UseNetworkParams) => DefinedNamedUseQueryResult<"networks", Network[], Error>;

type UseNodeInfoParams = {
    /**
     * The minimum version of the node that is considered compatible.
     * Defaults to '0.0.0' if not provided.
     */
    version?: string;
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<'nodeInfo', NodeInfo | null, Error, NodeInfo | null>;
};
/**
 * A hook to fetch node information from the provider and check compatibility.
 *
 * @params {object} The parameters to configure the hook.
 * - `version`: The minimum version of the node that is considered compatible.
 *
 * @returns {object} An object containing:
 * - `nodeInfo`: The node information data or `null`.
 * - `isCompatible`: Whether the node is compatible with the specified version.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @examples
 * To fetch node information and check compatibility
 * ```ts
 * const { nodeInfo, isCompatible } = useNodeInfo({ version: '1.2.3' });
 * ```
 */
declare const useNodeInfo: ({ version, query: queryParams, }?: UseNodeInfoParams) => {
    error: Error | null;
    isError: boolean;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: boolean;
    isSuccess: boolean;
    status: "error" | "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: _tanstack_react_query.RefetchOptions | undefined) => Promise<_tanstack_react_query.QueryObserverResult<NodeInfo | null, Error>>;
    fetchStatus: _tanstack_react_query.FetchStatus;
} & {
    nodeInfo: NodeInfo | null;
} & {
    isCompatible: boolean;
};

type UseProviderParams = {
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<'provider', Provider | null, Error, Provider | null>;
};
/**
 * A hook to retrieve the current provider in the connected app.
 *
 * @returns {object} An object containing:
 * - `provider`: The provider data or `null`.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @examples
 * To get the current provider:
 * ```ts
 * const { provider } = useProvider();
 * ```
 */
declare const useProvider: (_params?: UseProviderParams) => {
    provider: Provider | undefined;
};

/**
 * A hook to add a network in the connected app.
 *
 * @returns {object} An object containing:
 * - `selectNetwork`: function to add a network synchronously.
 * - `selectNetworkAsync` function to add a network asynchronously.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useMutation | `...mutationProps`}: Destructured properties from `useMutation` result.
 *
 * @examples
 *  To select a network synchronously:
 * ```ts
 * const { selectNetwork } = useSelectNetwork();
 * selectNetwork(network);
 * ```
 *
 * To select a network asynchronously:
 * ```ts
 * const { selectNetworkAsync } = useSelectNetwork();
 * await selectNetworkAsync(network);
 * ```
 *
 */
declare const useSelectNetwork: () => {
    data: undefined;
    variables: undefined;
    error: null;
    isError: false;
    isIdle: true;
    isPending: false;
    isSuccess: false;
    status: "idle";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    selectNetwork: _tanstack_react_query.UseMutateFunction<boolean, Error, fuels.SelectNetworkArguments, unknown>;
    selectNetworkAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, Error, fuels.SelectNetworkArguments, unknown>;
} | {
    data: undefined;
    variables: fuels.SelectNetworkArguments;
    error: null;
    isError: false;
    isIdle: false;
    isPending: true;
    isSuccess: false;
    status: "pending";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    selectNetwork: _tanstack_react_query.UseMutateFunction<boolean, Error, fuels.SelectNetworkArguments, unknown>;
    selectNetworkAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, Error, fuels.SelectNetworkArguments, unknown>;
} | {
    data: undefined;
    error: Error;
    variables: fuels.SelectNetworkArguments;
    isError: true;
    isIdle: false;
    isPending: false;
    isSuccess: false;
    status: "error";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    selectNetwork: _tanstack_react_query.UseMutateFunction<boolean, Error, fuels.SelectNetworkArguments, unknown>;
    selectNetworkAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, Error, fuels.SelectNetworkArguments, unknown>;
} | {
    data: boolean;
    error: null;
    variables: fuels.SelectNetworkArguments;
    isError: false;
    isIdle: false;
    isPending: false;
    isSuccess: true;
    status: "success";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    selectNetwork: _tanstack_react_query.UseMutateFunction<boolean, Error, fuels.SelectNetworkArguments, unknown>;
    selectNetworkAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, Error, fuels.SelectNetworkArguments, unknown>;
};

type MutationParams = {
    /**
     * The address to send the transaction to. Can be a string or an Address.
     */
    address: string | Address;
    /**
     * The transaction request object that defines the transaction details.
     */
    transaction: TransactionRequestLike;
};
/**
 * A hook to send transactions in the connected app.
 *
 * @params {Object} The parameters to send a transaction.
 * - `address`: The address to send the transaction to.
 * - `transaction`: The transaction request object that defines the transaction details.
 *
 * @returns {Object} Methods to send transactions.
 * - `sendTransaction`: function to send a transaction synchronously.
 * - `sendTransactionAsync`: function to send a transaction asynchronously.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useMutation | `...mutationProps`}: Destructured properties from `useMutation` result.
 *
 * @examples
 * To send a transaction synchronously:
 * ```ts
 * const { sendTransaction } = useSendTransaction();
 * sendTransaction({ address: '0x...', transaction: {...} });
 * ```
 *
 * To send a transaction asynchronously:
 * ```ts
 * const { sendTransactionAsync } = useSendTransaction();
 * await sendTransactionAsync({ address: '0x...', transaction: {...} });
 * ```
 */
declare const useSendTransaction: () => {
    data: undefined;
    variables: undefined;
    error: null;
    isError: false;
    isIdle: true;
    isPending: false;
    isSuccess: false;
    status: "idle";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    sendTransaction: _tanstack_react_query.UseMutateFunction<string | fuels.TransactionResponse, Error, MutationParams, unknown>;
    sendTransactionAsync: _tanstack_react_query.UseMutateAsyncFunction<string | fuels.TransactionResponse, Error, MutationParams, unknown>;
} | {
    data: undefined;
    variables: MutationParams;
    error: null;
    isError: false;
    isIdle: false;
    isPending: true;
    isSuccess: false;
    status: "pending";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    sendTransaction: _tanstack_react_query.UseMutateFunction<string | fuels.TransactionResponse, Error, MutationParams, unknown>;
    sendTransactionAsync: _tanstack_react_query.UseMutateAsyncFunction<string | fuels.TransactionResponse, Error, MutationParams, unknown>;
} | {
    data: undefined;
    error: Error;
    variables: MutationParams;
    isError: true;
    isIdle: false;
    isPending: false;
    isSuccess: false;
    status: "error";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    sendTransaction: _tanstack_react_query.UseMutateFunction<string | fuels.TransactionResponse, Error, MutationParams, unknown>;
    sendTransactionAsync: _tanstack_react_query.UseMutateAsyncFunction<string | fuels.TransactionResponse, Error, MutationParams, unknown>;
} | {
    data: string | fuels.TransactionResponse;
    error: null;
    variables: MutationParams;
    isError: false;
    isIdle: false;
    isPending: false;
    isSuccess: true;
    status: "success";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    sendTransaction: _tanstack_react_query.UseMutateFunction<string | fuels.TransactionResponse, Error, MutationParams, unknown>;
    sendTransactionAsync: _tanstack_react_query.UseMutateAsyncFunction<string | fuels.TransactionResponse, Error, MutationParams, unknown>;
};

/**
 * A hook to fetch transaction details using a transaction ID.
 *
 * @params {string} The parameters to fetch the transaction.
 * - `txId`: A string value representing the transaction ID.
 *
 * @returns {object} An object containing:
 * - `transaction`: The transaction details retrieved from the provider, or `null` if not found.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @examples
 * To fetch transaction details:
 * ```ts
 * const { transaction, error, isLoading } = useTransaction('0x1234');
 * ```
 */
declare const useTransaction: (txId?: string) => DefinedNamedUseQueryResult<"transaction", (Partial<Omit<fuels.TransactionScript, "type">> & Partial<Omit<fuels.TransactionCreate, "type">> & Partial<Omit<fuels.TransactionMint, "type">> & Partial<Omit<fuels.TransactionUpgrade, "type">> & Partial<Omit<fuels.TransactionUpload, "type">> & Partial<Omit<fuels.TransactionBlob, "type">> & {
    type: fuels.TransactionType;
}) | null, Error>;

type UseTransactionReceiptsParams<TTransactionType = void> = {
    /**
     * The transaction ID to fetch the receipts for.
     */
    txId?: string;
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<'transactionReceipts', TransactionResult<TTransactionType>['receipts'] | null, Error, TransactionResult<TTransactionType>['receipts'] | null>;
};
/**
 * @deprecated
 *
 * Use `useTransactionResult` instead with `select` function in the `query` parameter.
 */
declare const useTransactionReceipts: <TTransactionType = void>({ txId, query, }: UseTransactionReceiptsParams<TTransactionType>) => DefinedNamedUseQueryResult<"transactionReceipts", fuels.TransactionResultReceipt[] | null, Error>;

type UseTransactionResultParams<TTransactionType extends TransactionType, TName extends string, TData> = {
    /**
     * The ID of the transaction to retrieve the result for.
     */
    txId?: string;
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<TName, TransactionResult<TTransactionType> | null, Error, TData>;
};
/**
 * A hook to fetch the result of a specific transaction in the connected app.
 *
 * @params {UseTransactionResultParams<TTransactionType, TName, TData>} Parameters to configure the hook.
 * - `txId`: A string value representing the transaction ID.
 * - `query`: Additional query parameters to customize the behavior of `useNamedQuery`.
 *
 * @returns {object} An object containing
 * - `transactionResult`: The result of the transaction or `null`.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @examples
 * To fetch the result of a transaction:
 * ```ts
 * const { transactionResult } = useTransactionResult({
 *   txId: '0x...',
 * });
 * console.log(transactionResult);
 * ```
 */
declare const useTransactionResult: <TTransactionType extends TransactionType, TName extends string = string, TData = TransactionResult<TTransactionType> | null>({ txId, query, }: UseTransactionResultParams<TTransactionType, TName, TData>) => DefinedNamedUseQueryResult<TName | "transactionResult", TData, Error>;

type UseWalletParamsDeprecated = string | null;
type UseWalletParams = {
    /**
     * The wallet address to fetch. If not provided, the current account's address will be used.
     */
    account?: string | null;
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<'wallet', Account | null, Error, Account | null>;
};
/**
 * A hook to fetch and manage a wallet by its address in the connected app.
 *
 * @params {object} The parameters to fetch a wallet.
 * - `address`: The wallet address to fetch. If not provided, the current account's address will be used.
 *
 * @returns {object} An object containing:
 * - `wallet`: The wallet or `null` if the wallet could not be fetched or the address is invalid.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @examples
 * To get a wallet by address:
 * ```ts
 * const { wallet } = useWallet({ account: '0x...' });
 * ```
 * To get the current account's wallet:
 * ```ts
 * const { wallet } = useWallet();
 * ```
 */
declare function useWallet(params?: UseWalletParams): DefinedNamedUseQueryResult<'wallet', Account | null, Error>;
/**
 * @deprecated Use `useWallet({ account })` instead.
 */
declare function useWallet(params?: UseWalletParamsDeprecated): DefinedNamedUseQueryResult<'wallet', Account | null, Error>;

type UseCurrentConnectorParams<TName extends string, TData> = {
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<TName, FuelConnector | null, Error, TData>;
};
/**
 * A hook to fetch a current Wallet Connector.
 *
 * @params {UseCurrentConnectorParams<TName, TData>} Parameters to configure the hook.
 * - `query`: Additional query parameters to customize the behavior of `useNamedQuery`.
 *
 * @returns {object} An object containing:
 * - `connectors`: The list of available connectors.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @examples
 * To fetch current connector:
 * ```ts
 * const { currentConnector } = useCurrentConnector();
 * console.log(currentConnector);
 * ```
 */
declare const useCurrentConnector: <TName extends string = string, TData = FuelConnector | null>({ query, }?: UseCurrentConnectorParams<TName, TData>) => DefinedNamedUseQueryResult<"currentConnector", TData, Error>;

type UseIsSupportedNetwork = {
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<'isSupportedNetwork', boolean, Error, boolean>;
};
/**
 * A hook to check if the current network, matches with provided networks config on FuelProvider.
 *
 * @returns {object} An object containing:
 * - `isSupportedNetwork`: The value if the current network is supported.
 *
 * @examples
 * To check if network is supported:
 * ```ts
 * const { isSupportedNetwork } = useIsSupportedNetwork();
 * console.log(isSupportedNetwork);
 * ```
 */
declare function useIsSupportedNetwork(params?: UseIsSupportedNetwork): DefinedNamedUseQueryResult<"isSupportedNetwork", boolean, Error>;

type UseChainParams<TName extends string, TData> = {
    /**
     * Additional query parameters to customize the behavior of `useNamedQuery`.
     */
    query?: UseNamedQueryParams<TName, TData, Error, TData>;
};
/**
 * A hook that returns the chain ID for the current provider.
 *
 * @returns {object} An object containing:
 * - `chainId`: The current chain ID.
 * - {@link https://tanstack.com/query/latest/docs/framework/react/reference/useQuery | `...queryProps`}: Destructured properties from `useQuery` result.
 *
 * @examples
 * ```ts
 * const { chainId } = useChainId();
 * console.log(chainId);
 * ```
 */
declare const useChainId: (params?: UseChainParams<'chainId', number | null>) => DefinedNamedUseQueryResult<"chainId", number | null, Error>;

type Connector = {
    name: string;
    image: string | {
        light: string;
        dark: string;
    };
    connector: string;
    install: {
        action: string;
        link: string;
        description: string;
    };
    installed: boolean;
};
interface NetworkConfig extends Partial<Network> {
    bridgeURL?: string;
}
type UIConfig = {
    suggestBridge?: boolean;
};
type SvgIconProps = {
    theme?: string;
    style?: React.CSSProperties;
    className?: string;
    onClick?: () => void;
    size: number;
};
type ConnectorList = Array<Connector>;

declare const QUERY_KEYS: {
    base: QueryKey;
    account: () => QueryKey;
    accounts: () => QueryKey;
    assets: () => QueryKey;
    contract: (address: string, chainId: number | undefined, args: string | undefined) => QueryKey;
    chain: () => QueryKey;
    chainId: () => QueryKey;
    isConnected: () => QueryKey;
    networks: () => QueryKey;
    provider: () => QueryKey;
    balance: (address?: string, assetId?: BytesLike, chainId?: number | undefined) => QueryKey;
    wallet: (address?: string | null, providerUrl?: string | null) => QueryKey;
    transaction: (id?: string) => QueryKey;
    transactionReceipts: (id?: string, chainId?: number | null) => QueryKey;
    transactionResult: (id?: string, chainId?: number | null) => QueryKey;
    nodeInfo: (url?: string) => QueryKey;
    connectorList: () => QueryKey;
    currentConnector: () => QueryKey;
    currentNetwork: () => QueryKey;
    isSupportedNetwork: (connectorName: string | null | undefined, networks: Array<NetworkConfig>, network: Partial<Network> | null, isConnected: boolean) => QueryKey;
};
declare const MUTATION_KEYS: {
    connect: string;
    addAssets: string;
    addNetwork: string;
};

declare function isNativeConnector(connector: FuelConnector): boolean;

type FuelUIProviderProps = {
    children?: ReactNode;
    uiConfig: UIConfig;
    fuelConfig: FuelConfig;
    theme?: 'dark' | 'light';
};
declare enum Routes {
    List = "LIST",
    Install = "INSTALL",
    Connecting = "CONNECTING",
    PredicateExternalDisclaimer = "PREDICATE_EXTERNAL_DISCLAIMER",
    PredicateAddressDisclaimer = "PREDICATE_ADDRESS_DISCLAIMER"
}
type FuelUIContextType = {
    isConnected: boolean;
    uiConfig: UIConfig;
    fuelConfig: FuelConfig;
    theme: 'dark' | 'light';
    connectors: Array<FuelConnector>;
    isLoading: boolean;
    isConnecting: boolean;
    isError: boolean;
    connect: () => void;
    cancel: (params?: {
        clean?: boolean;
    }) => void;
    setError: (error: Error | null) => void;
    error: Error | null;
    dialog: {
        connector: FuelConnector | null;
        isOpen: boolean;
        back: () => void;
        connect: (connector: FuelConnector) => void;
        retryConnect: (connector: FuelConnector) => Promise<void>;
        route: Routes;
        setRoute: (state: Routes) => void;
        _startConnection: (connector: FuelConnector) => void;
    };
};
declare const useConnectUI: () => FuelUIContextType;

type FuelReactContextType = {
    fuel: Fuel;
    networks: Array<NetworkConfig>;
};
declare const useFuel: () => FuelReactContextType;

type FuelProviderProps = {
    ui?: boolean;
    uiConfig?: UIConfig;
    fuelConfig: FuelConfig;
    networks?: Array<NetworkConfig>;
} & Pick<FuelUIProviderProps, 'theme' | 'children'>;
declare function FuelProvider({ theme: _theme, children, fuelConfig, uiConfig: _uiConfig, ui, networks: _networks, }: FuelProviderProps): react_jsx_runtime.JSX.Element;

export { type Connector, type ConnectorList, type DefinedNamedUseQueryResult, FuelProvider, MUTATION_KEYS, type NetworkConfig, QUERY_KEYS, type SvgIconProps, type UIConfig, type UseNamedQueryParams, isNativeConnector, useAccount, useAccounts, useAddAssets, useAddNetwork, useAssets, useBalance, useChain, useChainId, useConnect, useConnectUI, useConnectors, useContractRead, useCurrentConnector, useDisconnect, useFuel, useIsConnected, useIsSupportedNetwork, useNamedQuery, useNetwork, useNetworks, useNodeInfo, useProvider, useSelectNetwork, useSendTransaction, useTransaction, useTransactionReceipts, useTransactionResult, useWallet };
