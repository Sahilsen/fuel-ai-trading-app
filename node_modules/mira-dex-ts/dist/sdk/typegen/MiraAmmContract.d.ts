import { Contract, Interface } from "fuels";
import type { Provider, Account, Address, StorageSlot, BigNumberish, BN, Bytes, FunctionFragment, InvokeFunction, StdString } from 'fuels';
import type { Option, Enum } from "./common";
export declare enum AccessErrorInput {
    NotOwner = "NotOwner"
}
export declare enum AccessErrorOutput {
    NotOwner = "NotOwner"
}
export type AmmErrorInput = Enum<{
    InsufficientLiquidity: undefined;
    NoLiquidityAdded: undefined;
    CannotAddLessThanMinimumLiquidity: undefined;
    CurveInvariantViolation: [BigNumberish, BigNumberish];
}>;
export type AmmErrorOutput = Enum<{
    InsufficientLiquidity: void;
    NoLiquidityAdded: void;
    CannotAddLessThanMinimumLiquidity: void;
    CurveInvariantViolation: [BN, BN];
}>;
export type IdentityInput = Enum<{
    Address: AddressInput;
    ContractId: ContractIdInput;
}>;
export type IdentityOutput = Enum<{
    Address: AddressOutput;
    ContractId: ContractIdOutput;
}>;
export declare enum InitializationErrorInput {
    CannotReinitialized = "CannotReinitialized"
}
export declare enum InitializationErrorOutput {
    CannotReinitialized = "CannotReinitialized"
}
export type InputErrorInput = Enum<{
    PoolAlreadyExists: [AssetIdInput, AssetIdInput, boolean];
    PoolDoesNotExist: [AssetIdInput, AssetIdInput, boolean];
    InvalidAsset: AssetIdInput;
    ZeroInputAmount: undefined;
    ZeroOutputAmount: undefined;
    IdenticalAssets: undefined;
    UnsortedAssetPair: undefined;
    LPTokenHashCollision: undefined;
    NotAdmin: undefined;
    ProtocolFeesAreTooHigh: undefined;
    PoolInvariantViolation: [];
    AssetSymbolNotSet: AssetIdInput;
    AssetDecimalsNotSet: AssetIdInput;
}>;
export type InputErrorOutput = Enum<{
    PoolAlreadyExists: [AssetIdOutput, AssetIdOutput, boolean];
    PoolDoesNotExist: [AssetIdOutput, AssetIdOutput, boolean];
    InvalidAsset: AssetIdOutput;
    ZeroInputAmount: void;
    ZeroOutputAmount: void;
    IdenticalAssets: void;
    UnsortedAssetPair: void;
    LPTokenHashCollision: void;
    NotAdmin: void;
    ProtocolFeesAreTooHigh: void;
    PoolInvariantViolation: [];
    AssetSymbolNotSet: AssetIdOutput;
    AssetDecimalsNotSet: AssetIdOutput;
}>;
export declare enum ReentrancyErrorInput {
    NonReentrant = "NonReentrant"
}
export declare enum ReentrancyErrorOutput {
    NonReentrant = "NonReentrant"
}
export type StateInput = Enum<{
    Uninitialized: undefined;
    Initialized: IdentityInput;
    Revoked: undefined;
}>;
export type StateOutput = Enum<{
    Uninitialized: void;
    Initialized: IdentityOutput;
    Revoked: void;
}>;
export type AddressInput = {
    bits: string;
};
export type AddressOutput = AddressInput;
export type AssetInput = {
    id: AssetIdInput;
    amount: BigNumberish;
};
export type AssetOutput = {
    id: AssetIdOutput;
    amount: BN;
};
export type AssetIdInput = {
    bits: string;
};
export type AssetIdOutput = AssetIdInput;
export type BurnEventInput = {
    pool_id: [AssetIdInput, AssetIdInput, boolean];
    recipient: IdentityInput;
    liquidity: AssetInput;
    asset_0_out: BigNumberish;
    asset_1_out: BigNumberish;
};
export type BurnEventOutput = {
    pool_id: [AssetIdOutput, AssetIdOutput, boolean];
    recipient: IdentityOutput;
    liquidity: AssetOutput;
    asset_0_out: BN;
    asset_1_out: BN;
};
export type ContractIdInput = {
    bits: string;
};
export type ContractIdOutput = ContractIdInput;
export type CreatePoolEventInput = {
    pool_id: [AssetIdInput, AssetIdInput, boolean];
    decimals_0: BigNumberish;
    decimals_1: BigNumberish;
};
export type CreatePoolEventOutput = {
    pool_id: [AssetIdOutput, AssetIdOutput, boolean];
    decimals_0: number;
    decimals_1: number;
};
export type MintEventInput = {
    pool_id: [AssetIdInput, AssetIdInput, boolean];
    recipient: IdentityInput;
    liquidity: AssetInput;
    asset_0_in: BigNumberish;
    asset_1_in: BigNumberish;
};
export type MintEventOutput = {
    pool_id: [AssetIdOutput, AssetIdOutput, boolean];
    recipient: IdentityOutput;
    liquidity: AssetOutput;
    asset_0_in: BN;
    asset_1_in: BN;
};
export type OwnershipSetInput = {
    new_owner: IdentityInput;
};
export type OwnershipSetOutput = {
    new_owner: IdentityOutput;
};
export type OwnershipTransferredInput = {
    new_owner: IdentityInput;
    previous_owner: IdentityInput;
};
export type OwnershipTransferredOutput = {
    new_owner: IdentityOutput;
    previous_owner: IdentityOutput;
};
export type PoolMetadataInput = {
    reserve_0: BigNumberish;
    reserve_1: BigNumberish;
    liquidity: AssetInput;
    decimals_0: BigNumberish;
    decimals_1: BigNumberish;
};
export type PoolMetadataOutput = {
    reserve_0: BN;
    reserve_1: BN;
    liquidity: AssetOutput;
    decimals_0: number;
    decimals_1: number;
};
export type SetDecimalsEventInput = {
    asset: AssetIdInput;
    decimals: BigNumberish;
    sender: IdentityInput;
};
export type SetDecimalsEventOutput = {
    asset: AssetIdOutput;
    decimals: number;
    sender: IdentityOutput;
};
export type SetNameEventInput = {
    asset: AssetIdInput;
    name: Option<StdString>;
    sender: IdentityInput;
};
export type SetNameEventOutput = {
    asset: AssetIdOutput;
    name: Option<StdString>;
    sender: IdentityOutput;
};
export type SetSymbolEventInput = {
    asset: AssetIdInput;
    symbol: Option<StdString>;
    sender: IdentityInput;
};
export type SetSymbolEventOutput = {
    asset: AssetIdOutput;
    symbol: Option<StdString>;
    sender: IdentityOutput;
};
export type SwapEventInput = {
    pool_id: [AssetIdInput, AssetIdInput, boolean];
    recipient: IdentityInput;
    asset_0_in: BigNumberish;
    asset_1_in: BigNumberish;
    asset_0_out: BigNumberish;
    asset_1_out: BigNumberish;
};
export type SwapEventOutput = {
    pool_id: [AssetIdOutput, AssetIdOutput, boolean];
    recipient: IdentityOutput;
    asset_0_in: BN;
    asset_1_in: BN;
    asset_0_out: BN;
    asset_1_out: BN;
};
export type TotalSupplyEventInput = {
    asset: AssetIdInput;
    supply: BigNumberish;
    sender: IdentityInput;
};
export type TotalSupplyEventOutput = {
    asset: AssetIdOutput;
    supply: BN;
    sender: IdentityOutput;
};
export type MiraAmmContractConfigurables = Partial<{
    LP_FEE_VOLATILE: BigNumberish;
    LP_FEE_STABLE: BigNumberish;
}>;
export declare class MiraAmmContractInterface extends Interface {
    constructor();
    functions: {
        owner: FunctionFragment;
        decimals: FunctionFragment;
        name: FunctionFragment;
        symbol: FunctionFragment;
        total_assets: FunctionFragment;
        total_supply: FunctionFragment;
        burn: FunctionFragment;
        create_pool: FunctionFragment;
        fees: FunctionFragment;
        hook: FunctionFragment;
        mint: FunctionFragment;
        pool_metadata: FunctionFragment;
        set_hook: FunctionFragment;
        set_protocol_fees: FunctionFragment;
        swap: FunctionFragment;
        transfer_ownership: FunctionFragment;
    };
}
export declare class MiraAmmContract extends Contract {
    static readonly abi: {
        programType: string;
        specVersion: string;
        encodingVersion: string;
        concreteTypes: ({
            type: string;
            concreteTypeId: string;
            metadataTypeId?: undefined;
            typeArguments?: undefined;
        } | {
            type: string;
            concreteTypeId: string;
            metadataTypeId: number;
            typeArguments?: undefined;
        } | {
            type: string;
            concreteTypeId: string;
            metadataTypeId: number;
            typeArguments: string[];
        })[];
        metadataTypes: ({
            type: string;
            metadataTypeId: number;
            components: ({
                name: string;
                typeId: number;
            } | {
                name: string;
                typeId: string;
            })[];
            typeParameters?: undefined;
        } | {
            type: string;
            metadataTypeId: number;
            components: ({
                name: string;
                typeId: string;
            } | {
                name: string;
                typeId: number;
            })[];
            typeParameters: number[];
        } | {
            type: string;
            metadataTypeId: number;
            components?: undefined;
            typeParameters?: undefined;
        } | {
            type: string;
            metadataTypeId: number;
            components: ({
                name: string;
                typeId: number;
                typeArguments?: undefined;
            } | {
                name: string;
                typeId: number;
                typeArguments: {
                    name: string;
                    typeId: number;
                }[];
            })[];
            typeParameters?: undefined;
        })[];
        functions: {
            inputs: {
                name: string;
                concreteTypeId: string;
            }[];
            name: string;
            output: string;
            attributes: {
                name: string;
                arguments: string[];
            }[];
        }[];
        loggedTypes: {
            logId: string;
            concreteTypeId: string;
        }[];
        messagesTypes: never[];
        configurables: {
            name: string;
            concreteTypeId: string;
            offset: number;
        }[];
    };
    static readonly storageSlots: StorageSlot[];
    interface: MiraAmmContractInterface;
    functions: {
        owner: InvokeFunction<[], StateOutput>;
        decimals: InvokeFunction<[asset: AssetIdInput], Option<number>>;
        name: InvokeFunction<[asset: AssetIdInput], Option<StdString>>;
        symbol: InvokeFunction<[asset: AssetIdInput], Option<StdString>>;
        total_assets: InvokeFunction<[], BN>;
        total_supply: InvokeFunction<[asset: AssetIdInput], Option<BN>>;
        burn: InvokeFunction<[pool_id: [AssetIdInput, AssetIdInput, boolean], to: IdentityInput], [BN, BN]>;
        create_pool: InvokeFunction<[token_0_contract_id: ContractIdInput, token_0_sub_id: string, token_1_contract_id: ContractIdInput, token_1_sub_id: string, is_stable: boolean], [AssetIdOutput, AssetIdOutput, boolean]>;
        fees: InvokeFunction<[], [BN, BN, BN, BN]>;
        hook: InvokeFunction<[], Option<ContractIdOutput>>;
        mint: InvokeFunction<[pool_id: [AssetIdInput, AssetIdInput, boolean], to: IdentityInput], AssetOutput>;
        pool_metadata: InvokeFunction<[pool_id: [AssetIdInput, AssetIdInput, boolean]], Option<PoolMetadataOutput>>;
        set_hook: InvokeFunction<[contract_id?: Option<ContractIdInput>], void>;
        set_protocol_fees: InvokeFunction<[volatile_fee: BigNumberish, stable_fee: BigNumberish], void>;
        swap: InvokeFunction<[pool_id: [AssetIdInput, AssetIdInput, boolean], asset_0_out: BigNumberish, asset_1_out: BigNumberish, to: IdentityInput, data?: Option<Bytes>], void>;
        transfer_ownership: InvokeFunction<[new_owner: IdentityInput], void>;
    };
    constructor(id: string | Address, accountOrProvider: Account | Provider);
}
