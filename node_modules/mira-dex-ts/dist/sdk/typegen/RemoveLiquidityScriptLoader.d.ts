import { Account, BigNumberish, BN, Script } from 'fuels';
import type { Enum } from "./common";
export type IdentityInput = Enum<{
    Address: AddressInput;
    ContractId: ContractIdInput;
}>;
export type IdentityOutput = Enum<{
    Address: AddressOutput;
    ContractId: ContractIdOutput;
}>;
export type AddressInput = {
    bits: string;
};
export type AddressOutput = AddressInput;
export type AssetIdInput = {
    bits: string;
};
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = {
    bits: string;
};
export type ContractIdOutput = ContractIdInput;
export type RemoveLiquidityScriptLoaderInputs = [pool_id: [AssetIdInput, AssetIdInput, boolean], liquidity: BigNumberish, amount_0_min: BigNumberish, amount_1_min: BigNumberish, recipient: IdentityInput, deadline: BigNumberish];
export type RemoveLiquidityScriptLoaderOutput = [BN, BN];
export type RemoveLiquidityScriptLoaderConfigurables = Partial<{
    AMM_CONTRACT_ID: ContractIdInput;
}>;
export declare class RemoveLiquidityScriptLoader extends Script<RemoveLiquidityScriptLoaderInputs, RemoveLiquidityScriptLoaderOutput> {
    static readonly abi: {
        programType: string;
        specVersion: string;
        encodingVersion: string;
        concreteTypes: ({
            type: string;
            concreteTypeId: string;
            metadataTypeId: number;
        } | {
            type: string;
            concreteTypeId: string;
            metadataTypeId?: undefined;
        })[];
        metadataTypes: ({
            type: string;
            metadataTypeId: number;
            components: {
                name: string;
                typeId: string;
            }[];
        } | {
            type: string;
            metadataTypeId: number;
            components: {
                name: string;
                typeId: number;
            }[];
        } | {
            type: string;
            metadataTypeId: number;
            components?: undefined;
        })[];
        functions: {
            inputs: {
                name: string;
                concreteTypeId: string;
            }[];
            name: string;
            output: string;
            attributes: null;
        }[];
        loggedTypes: {
            logId: string;
            concreteTypeId: string;
        }[];
        messagesTypes: never[];
        configurables: {
            name: string;
            concreteTypeId: string;
            offset: number;
        }[];
    };
    static readonly bytecode: any;
    constructor(wallet: Account);
}
