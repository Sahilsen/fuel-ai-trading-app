import {
  require_browser_ponyfill
} from "./chunk-CKWBFEDU.js";
import {
  require_events
} from "./chunk-NPY75PGV.js";
import {
  require_buffer
} from "./chunk-SKMNXGXP.js";
import {
  __commonJS,
  __export,
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet,
  __publicField,
  __toESM
} from "./chunk-ONY6HBPH.js";

// node_modules/@fuel-ts/math/node_modules/bn.js/lib/bn.js
var require_bn = __commonJS({
  "node_modules/@fuel-ts/math/node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert3(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN2(number, base, endian) {
        if (BN2.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN2;
      } else {
        exports2.BN = BN2;
      }
      BN2.BN = BN2;
      BN2.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer().Buffer;
        }
      } catch (e) {
      }
      BN2.isBN = function isBN(num2) {
        if (num2 instanceof BN2) {
          return true;
        }
        return num2 !== null && typeof num2 === "object" && num2.constructor.wordSize === BN2.wordSize && Array.isArray(num2.words);
      };
      BN2.max = function max5(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN2.min = function min3(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN2.prototype._init = function init2(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert3(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN2.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert3(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base, endian);
      };
      BN2.prototype._initArray = function _initArray(number, base, endian) {
        assert3(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert3(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN2.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul2) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul2;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert3(c >= 0 && b < mul2, "Invalid character");
          r += b;
        }
        return r;
      }
      BN2.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod2 = total % limbLen;
        var end = Math.min(total, total - mod2) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod2 !== 0) {
          var pow3 = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod2; i++) {
            pow3 *= base;
          }
          this.imuln(pow3);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN2.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move2(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN2.prototype._move = function _move(dest) {
        move2(dest, this);
      };
      BN2.prototype.clone = function clone3() {
        var r = new BN2(null);
        this.copy(r);
        return r;
      };
      BN2.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN2.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN2.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN2.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect2;
        } catch (e) {
          BN2.prototype.inspect = inspect2;
        }
      } else {
        BN2.prototype.inspect = inspect2;
      }
      function inspect2() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN2.prototype.toString = function toString4(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert3(false, "Base should be between 2 and 36");
      };
      BN2.prototype.toNumber = function toNumber2() {
        var ret2 = this.words[0];
        if (this.length === 2) {
          ret2 += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret2 += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert3(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret2 : ret2;
      };
      BN2.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN2.prototype.toBuffer = function toBuffer(endian, length3) {
          return this.toArrayLike(Buffer2, endian, length3);
        };
      }
      BN2.prototype.toArray = function toArray(endian, length3) {
        return this.toArrayLike(Array, endian, length3);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length3) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length3 || Math.max(1, byteLength);
        assert3(byteLength <= reqLength, "byte array longer than desired length");
        assert3(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN2.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN2.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN2.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN2.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN2.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN2.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num2) {
        var w = new Array(num2.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num2.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN2.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };
      BN2.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN2.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN2.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN2.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN2.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN2.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN2.prototype.iuor = function iuor(num2) {
        while (this.length < num2.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num2.length; i++) {
          this.words[i] = this.words[i] | num2.words[i];
        }
        return this._strip();
      };
      BN2.prototype.ior = function ior(num2) {
        assert3((this.negative | num2.negative) === 0);
        return this.iuor(num2);
      };
      BN2.prototype.or = function or4(num2) {
        if (this.length > num2.length) return this.clone().ior(num2);
        return num2.clone().ior(this);
      };
      BN2.prototype.uor = function uor(num2) {
        if (this.length > num2.length) return this.clone().iuor(num2);
        return num2.clone().iuor(this);
      };
      BN2.prototype.iuand = function iuand(num2) {
        var b;
        if (this.length > num2.length) {
          b = num2;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num2.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN2.prototype.iand = function iand(num2) {
        assert3((this.negative | num2.negative) === 0);
        return this.iuand(num2);
      };
      BN2.prototype.and = function and4(num2) {
        if (this.length > num2.length) return this.clone().iand(num2);
        return num2.clone().iand(this);
      };
      BN2.prototype.uand = function uand(num2) {
        if (this.length > num2.length) return this.clone().iuand(num2);
        return num2.clone().iuand(this);
      };
      BN2.prototype.iuxor = function iuxor(num2) {
        var a;
        var b;
        if (this.length > num2.length) {
          a = this;
          b = num2;
        } else {
          a = num2;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN2.prototype.ixor = function ixor(num2) {
        assert3((this.negative | num2.negative) === 0);
        return this.iuxor(num2);
      };
      BN2.prototype.xor = function xor4(num2) {
        if (this.length > num2.length) return this.clone().ixor(num2);
        return num2.clone().ixor(this);
      };
      BN2.prototype.uxor = function uxor(num2) {
        if (this.length > num2.length) return this.clone().iuxor(num2);
        return num2.clone().iuxor(this);
      };
      BN2.prototype.inotn = function inotn(width) {
        assert3(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN2.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN2.prototype.setn = function setn(bit, val) {
        assert3(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN2.prototype.iadd = function iadd(num2) {
        var r;
        if (this.negative !== 0 && num2.negative === 0) {
          this.negative = 0;
          r = this.isub(num2);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num2.negative !== 0) {
          num2.negative = 0;
          r = this.isub(num2);
          num2.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num2.length) {
          a = this;
          b = num2;
        } else {
          a = num2;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN2.prototype.add = function add5(num2) {
        var res;
        if (num2.negative !== 0 && this.negative === 0) {
          num2.negative = 0;
          res = this.sub(num2);
          num2.negative ^= 1;
          return res;
        } else if (num2.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num2.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num2.length) return this.clone().iadd(num2);
        return num2.clone().iadd(this);
      };
      BN2.prototype.isub = function isub(num2) {
        if (num2.negative !== 0) {
          num2.negative = 0;
          var r = this.iadd(num2);
          num2.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num2);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num2);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num2;
        } else {
          a = num2;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN2.prototype.sub = function sub2(num2) {
        return this.clone().isub(num2);
      };
      function smallMulTo(self, num2, out) {
        out.negative = num2.negative ^ self.negative;
        var len = self.length + num2.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self.words[0] | 0;
        var b = num2.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num2.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self.words[i] | 0;
            b = num2.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self, num2, out) {
        var a = self.words;
        var b = num2.words;
        var o3 = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b22 = b[2] | 0;
        var bl2 = b22 & 8191;
        var bh2 = b22 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b42 = b[4] | 0;
        var bl4 = b42 & 8191;
        var bh4 = b42 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b82 = b[8] | 0;
        var bl8 = b82 & 8191;
        var bh8 = b82 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num2.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o3[0] = w0;
        o3[1] = w1;
        o3[2] = w2;
        o3[3] = w3;
        o3[4] = w4;
        o3[5] = w5;
        o3[6] = w6;
        o3[7] = w7;
        o3[8] = w8;
        o3[9] = w9;
        o3[10] = w10;
        o3[11] = w11;
        o3[12] = w12;
        o3[13] = w13;
        o3[14] = w14;
        o3[15] = w15;
        o3[16] = w16;
        o3[17] = w17;
        o3[18] = w18;
        if (c !== 0) {
          o3[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self, num2, out) {
        out.negative = num2.negative ^ self.negative;
        out.length = self.length + num2.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num2.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num2.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self, num2, out) {
        return bigMulTo(self, num2, out);
      }
      BN2.prototype.mulTo = function mulTo(num2, out) {
        var res;
        var len = this.length + num2.length;
        if (this.length === 10 && num2.length === 10) {
          res = comb10MulTo(this, num2, out);
        } else if (len < 63) {
          res = smallMulTo(this, num2, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num2, out);
        } else {
          res = jumboMulTo(this, num2, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN2.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws2, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws2[2 * i + 1] / N) * 8192 + Math.round(ws2[2 * i] / N) + carry;
          ws2[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws2;
      };
      FFTM.prototype.convert13b = function convert13b(ws2, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws2[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert3(carry === 0);
        assert3((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN2.prototype.mul = function mul2(num2) {
        var out = new BN2(null);
        out.words = new Array(this.length + num2.length);
        return this.mulTo(num2, out);
      };
      BN2.prototype.mulf = function mulf(num2) {
        var out = new BN2(null);
        out.words = new Array(this.length + num2.length);
        return jumboMulTo(this, num2, out);
      };
      BN2.prototype.imul = function imul(num2) {
        return this.clone().mulTo(num2, this);
      };
      BN2.prototype.imuln = function imuln(num2) {
        var isNegNum = num2 < 0;
        if (isNegNum) num2 = -num2;
        assert3(typeof num2 === "number");
        assert3(num2 < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num2;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN2.prototype.muln = function muln(num2) {
        return this.clone().imuln(num2);
      };
      BN2.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN2.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN2.prototype.pow = function pow3(num2) {
        var w = toBitArray(num2);
        if (w.length === 0) return new BN2(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN2.prototype.iushln = function iushln(bits2) {
        assert3(typeof bits2 === "number" && bits2 >= 0);
        var r = bits2 % 26;
        var s = (bits2 - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN2.prototype.ishln = function ishln(bits2) {
        assert3(this.negative === 0);
        return this.iushln(bits2);
      };
      BN2.prototype.iushrn = function iushrn(bits2, hint, extended) {
        assert3(typeof bits2 === "number" && bits2 >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits2 % 26;
        var s = Math.min((bits2 - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN2.prototype.ishrn = function ishrn(bits2, hint, extended) {
        assert3(this.negative === 0);
        return this.iushrn(bits2, hint, extended);
      };
      BN2.prototype.shln = function shln(bits2) {
        return this.clone().ishln(bits2);
      };
      BN2.prototype.ushln = function ushln(bits2) {
        return this.clone().iushln(bits2);
      };
      BN2.prototype.shrn = function shrn(bits2) {
        return this.clone().ishrn(bits2);
      };
      BN2.prototype.ushrn = function ushrn(bits2) {
        return this.clone().iushrn(bits2);
      };
      BN2.prototype.testn = function testn(bit) {
        assert3(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN2.prototype.imaskn = function imaskn(bits2) {
        assert3(typeof bits2 === "number" && bits2 >= 0);
        var r = bits2 % 26;
        var s = (bits2 - r) / 26;
        assert3(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN2.prototype.maskn = function maskn(bits2) {
        return this.clone().imaskn(bits2);
      };
      BN2.prototype.iaddn = function iaddn(num2) {
        assert3(typeof num2 === "number");
        assert3(num2 < 67108864);
        if (num2 < 0) return this.isubn(-num2);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num2) {
            this.words[0] = num2 - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num2);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num2);
      };
      BN2.prototype._iaddn = function _iaddn(num2) {
        this.words[0] += num2;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN2.prototype.isubn = function isubn(num2) {
        assert3(typeof num2 === "number");
        assert3(num2 < 67108864);
        if (num2 < 0) return this.iaddn(-num2);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num2);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num2;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN2.prototype.addn = function addn(num2) {
        return this.clone().iaddn(num2);
      };
      BN2.prototype.subn = function subn(num2) {
        return this.clone().isubn(num2);
      };
      BN2.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN2.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN2.prototype._ishlnsubmul = function _ishlnsubmul(num2, mul2, shift) {
        var len = num2.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num2.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num2.words[i] | 0) * mul2;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this._strip();
        assert3(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN2.prototype._wordDiv = function _wordDiv(num2, mode) {
        var shift = this.length - num2.length;
        var a = this.clone();
        var b = num2;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN2(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN2.prototype.divmod = function divmod(num2, mode, positive) {
        assert3(!num2.isZero());
        if (this.isZero()) {
          return {
            div: new BN2(0),
            mod: new BN2(0)
          };
        }
        var div2, mod2, res;
        if (this.negative !== 0 && num2.negative === 0) {
          res = this.neg().divmod(num2, mode);
          if (mode !== "mod") {
            div2 = res.div.neg();
          }
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.iadd(num2);
            }
          }
          return {
            div: div2,
            mod: mod2
          };
        }
        if (this.negative === 0 && num2.negative !== 0) {
          res = this.divmod(num2.neg(), mode);
          if (mode !== "mod") {
            div2 = res.div.neg();
          }
          return {
            div: div2,
            mod: res.mod
          };
        }
        if ((this.negative & num2.negative) !== 0) {
          res = this.neg().divmod(num2.neg(), mode);
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.isub(num2);
            }
          }
          return {
            div: res.div,
            mod: mod2
          };
        }
        if (num2.length > this.length || this.cmp(num2) < 0) {
          return {
            div: new BN2(0),
            mod: this
          };
        }
        if (num2.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num2.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN2(this.modrn(num2.words[0]))
            };
          }
          return {
            div: this.divn(num2.words[0]),
            mod: new BN2(this.modrn(num2.words[0]))
          };
        }
        return this._wordDiv(num2, mode);
      };
      BN2.prototype.div = function div2(num2) {
        return this.divmod(num2, "div", false).div;
      };
      BN2.prototype.mod = function mod2(num2) {
        return this.divmod(num2, "mod", false).mod;
      };
      BN2.prototype.umod = function umod(num2) {
        return this.divmod(num2, "mod", true).mod;
      };
      BN2.prototype.divRound = function divRound(num2) {
        var dm = this.divmod(num2);
        if (dm.mod.isZero()) return dm.div;
        var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num2) : dm.mod;
        var half = num2.ushrn(1);
        var r2 = num2.andln(1);
        var cmp = mod2.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN2.prototype.modrn = function modrn(num2) {
        var isNegNum = num2 < 0;
        if (isNegNum) num2 = -num2;
        assert3(num2 <= 67108863);
        var p = (1 << 26) % num2;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num2;
        }
        return isNegNum ? -acc : acc;
      };
      BN2.prototype.modn = function modn(num2) {
        return this.modrn(num2);
      };
      BN2.prototype.idivn = function idivn(num2) {
        var isNegNum = num2 < 0;
        if (isNegNum) num2 = -num2;
        assert3(num2 <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num2 | 0;
          carry = w % num2;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN2.prototype.divn = function divn(num2) {
        return this.clone().idivn(num2);
      };
      BN2.prototype.egcd = function egcd(p) {
        assert3(p.negative === 0);
        assert3(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN2(1);
        var B = new BN2(0);
        var C = new BN2(0);
        var D = new BN2(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN2.prototype._invmp = function _invmp(p) {
        assert3(p.negative === 0);
        assert3(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN2(1);
        var x2 = new BN2(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN2.prototype.gcd = function gcd(num2) {
        if (this.isZero()) return num2.abs();
        if (num2.isZero()) return this.abs();
        var a = this.clone();
        var b = num2.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN2.prototype.invm = function invm(num2) {
        return this.egcd(num2).a.umod(num2);
      };
      BN2.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN2.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN2.prototype.andln = function andln(num2) {
        return this.words[0] & num2;
      };
      BN2.prototype.bincn = function bincn(bit) {
        assert3(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN2.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN2.prototype.cmpn = function cmpn(num2) {
        var negative = num2 < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num2 = -num2;
          }
          assert3(num2 <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num2 ? 0 : w < num2 ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN2.prototype.cmp = function cmp(num2) {
        if (this.negative !== 0 && num2.negative === 0) return -1;
        if (this.negative === 0 && num2.negative !== 0) return 1;
        var res = this.ucmp(num2);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN2.prototype.ucmp = function ucmp(num2) {
        if (this.length > num2.length) return 1;
        if (this.length < num2.length) return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num2.words[i] | 0;
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN2.prototype.gtn = function gtn(num2) {
        return this.cmpn(num2) === 1;
      };
      BN2.prototype.gt = function gt5(num2) {
        return this.cmp(num2) === 1;
      };
      BN2.prototype.gten = function gten(num2) {
        return this.cmpn(num2) >= 0;
      };
      BN2.prototype.gte = function gte4(num2) {
        return this.cmp(num2) >= 0;
      };
      BN2.prototype.ltn = function ltn(num2) {
        return this.cmpn(num2) === -1;
      };
      BN2.prototype.lt = function lt4(num2) {
        return this.cmp(num2) === -1;
      };
      BN2.prototype.lten = function lten(num2) {
        return this.cmpn(num2) <= 0;
      };
      BN2.prototype.lte = function lte3(num2) {
        return this.cmp(num2) <= 0;
      };
      BN2.prototype.eqn = function eqn(num2) {
        return this.cmpn(num2) === 0;
      };
      BN2.prototype.eq = function eq3(num2) {
        return this.cmp(num2) === 0;
      };
      BN2.red = function red(num2) {
        return new Red(num2);
      };
      BN2.prototype.toRed = function toRed(ctx) {
        assert3(!this.red, "Already a number in reduction context");
        assert3(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN2.prototype.fromRed = function fromRed() {
        assert3(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN2.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN2.prototype.forceRed = function forceRed(ctx) {
        assert3(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN2.prototype.redAdd = function redAdd(num2) {
        assert3(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num2);
      };
      BN2.prototype.redIAdd = function redIAdd(num2) {
        assert3(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num2);
      };
      BN2.prototype.redSub = function redSub(num2) {
        assert3(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num2);
      };
      BN2.prototype.redISub = function redISub(num2) {
        assert3(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num2);
      };
      BN2.prototype.redShl = function redShl(num2) {
        assert3(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num2);
      };
      BN2.prototype.redMul = function redMul(num2) {
        assert3(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num2);
        return this.red.mul(this, num2);
      };
      BN2.prototype.redIMul = function redIMul(num2) {
        assert3(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num2);
        return this.red.imul(this, num2);
      };
      BN2.prototype.redSqr = function redSqr() {
        assert3(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN2.prototype.redISqr = function redISqr() {
        assert3(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN2.prototype.redSqrt = function redSqrt() {
        assert3(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN2.prototype.redInvm = function redInvm() {
        assert3(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN2.prototype.redNeg = function redNeg() {
        assert3(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN2.prototype.redPow = function redPow(num2) {
        assert3(this.red && !num2.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num2);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN2(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN2(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN2(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num2) {
        var r = num2;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split3(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num2) {
        return num2.imul(this.k);
      };
      function K2562() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K2562, MPrime);
      K2562.prototype.split = function split3(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K2562.prototype.imulK = function imulK(num2) {
        num2.words[num2.length] = 0;
        num2.words[num2.length + 1] = 0;
        num2.length += 2;
        var lo = 0;
        for (var i = 0; i < num2.length; i++) {
          var w = num2.words[i] | 0;
          lo += w * 977;
          num2.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num2.words[num2.length - 1] === 0) {
          num2.length--;
          if (num2.words[num2.length - 1] === 0) {
            num2.length--;
          }
        }
        return num2;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num2) {
        var carry = 0;
        for (var i = 0; i < num2.length; i++) {
          var hi = (num2.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num2.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num2.words[num2.length++] = carry;
        }
        return num2;
      };
      BN2._prime = function prime(name) {
        if (primes[name]) return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K2562();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN2._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert3(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert3(a.negative === 0, "red works only with positives");
        assert3(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert3((a.negative | b.negative) === 0, "red works only with positives");
        assert3(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move2(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add5(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub2(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num2) {
        this._verify1(a);
        return this.imod(a.ushln(num2));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul2(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert3(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow3 = this.m.add(new BN2(1)).iushrn(2);
          return this.pow(a, pow3);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert3(!q.isZero());
        var one = new BN2(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN2(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert3(i < m);
          var b = this.pow(c, new BN2(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow3(a, num2) {
        if (num2.isZero()) return new BN2(1).toRed(this);
        if (num2.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN2(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num2.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num2.length - 1; i >= 0; i--) {
          var word = num2.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num2) {
        var r = num2.umod(this.m);
        return r === num2 ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num2) {
        var res = num2.clone();
        res.red = null;
        return res;
      };
      BN2.mont = function mont(num2) {
        return new Mont(num2);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN2(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num2) {
        return this.imod(num2.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num2) {
        var r = this.imod(num2.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul2(a, b) {
        if (a.isZero() || b.isZero()) return new BN2(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/@fuel-ts/versions/dist/index.mjs
var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
function getBuiltinVersions() {
  return {
    FUEL_CORE: "0.41.9",
    FORC: "0.67.0",
    FUELS: "0.100.3"
  };
}
__name(getBuiltinVersions, "getBuiltinVersions");
function parseVersion(version2) {
  const [major, minor, patch] = version2.split(".").map((v) => parseInt(v, 10));
  return { major, minor, patch };
}
__name(parseVersion, "parseVersion");
function versionDiffs(version1, version2) {
  const semver1 = parseVersion(version1);
  const semver2 = parseVersion(version2);
  const major = semver1.major - semver2.major;
  const minor = semver1.minor - semver2.minor;
  const patch = semver1.patch - semver2.patch;
  return {
    major,
    minor,
    patch,
    fullVersionDiff: major || minor || patch
  };
}
__name(versionDiffs, "versionDiffs");
function gt(version1, version2) {
  const { fullVersionDiff } = versionDiffs(version1, version2);
  return fullVersionDiff > 0;
}
__name(gt, "gt");
function eq(version1, version2) {
  const { fullVersionDiff } = versionDiffs(version1, version2);
  return fullVersionDiff === 0;
}
__name(eq, "eq");
function gte(version1, version2) {
  const { fullVersionDiff } = versionDiffs(version1, version2);
  return fullVersionDiff >= 0;
}
__name(gte, "gte");
function majorEq(version1, version2) {
  const { major } = versionDiffs(version1, version2);
  return major === 0;
}
__name(majorEq, "majorEq");
function minorEq(version1, version2) {
  const { minor } = versionDiffs(version1, version2);
  return minor === 0;
}
__name(minorEq, "minorEq");
function patchEq(version1, version2) {
  const { patch } = versionDiffs(version1, version2);
  return patch === 0;
}
__name(patchEq, "patchEq");
function checkFuelCoreVersionCompatibility(networkVersion) {
  const { FUEL_CORE: supportedVersion } = getBuiltinVersions();
  if (/^\d+\.\d+\.\d+\D+/m.test(networkVersion)) {
    console.warn(`You're running against an unreleased fuel-core version: ${networkVersion}. Things may work as expected, but it's not guaranteed. Please use a released version.      
This unreleased fuel-core build may include features and updates not yet supported by this version of the TS-SDK.`);
  }
  return {
    supportedVersion,
    isMajorSupported: majorEq(networkVersion, supportedVersion),
    isMinorSupported: minorEq(networkVersion, supportedVersion),
    isPatchSupported: patchEq(networkVersion, supportedVersion)
  };
}
__name(checkFuelCoreVersionCompatibility, "checkFuelCoreVersionCompatibility");
var versions = getBuiltinVersions();

// node_modules/@fuel-ts/errors/dist/index.mjs
var __defProp2 = Object.defineProperty;
var __name2 = (target, value) => __defProp2(target, "name", { value, configurable: true });
var ErrorCode = ((ErrorCode2) => {
  ErrorCode2["NO_ABIS_FOUND"] = "no-abis-found";
  ErrorCode2["ABI_TYPES_AND_VALUES_MISMATCH"] = "abi-types-and-values-mismatch";
  ErrorCode2["ABI_MAIN_METHOD_MISSING"] = "abi-main-method-missing";
  ErrorCode2["INVALID_COMPONENT"] = "invalid-component";
  ErrorCode2["CONFIGURABLE_NOT_FOUND"] = "configurable-not-found";
  ErrorCode2["TYPE_NOT_FOUND"] = "type-not-found";
  ErrorCode2["LOG_TYPE_NOT_FOUND"] = "log-type-not-found";
  ErrorCode2["TYPE_NOT_SUPPORTED"] = "type-not-supported";
  ErrorCode2["INVALID_DECODE_VALUE"] = "invalid-decode-value";
  ErrorCode2["JSON_ABI_ERROR"] = "json-abi-error";
  ErrorCode2["TYPE_ID_NOT_FOUND"] = "type-id-not-found";
  ErrorCode2["BIN_FILE_NOT_FOUND"] = "bin-file-not-found";
  ErrorCode2["CODER_NOT_FOUND"] = "coder-not-found";
  ErrorCode2["INVALID_DATA"] = "invalid-data";
  ErrorCode2["FUNCTION_NOT_FOUND"] = "function-not-found";
  ErrorCode2["UNSUPPORTED_ENCODING_VERSION"] = "unsupported-encoding-version";
  ErrorCode2["TIMEOUT_EXCEEDED"] = "timeout-exceeded";
  ErrorCode2["CONFIG_FILE_NOT_FOUND"] = "config-file-not-found";
  ErrorCode2["CONFIG_FILE_ALREADY_EXISTS"] = "config-file-already-exists";
  ErrorCode2["WORKSPACE_NOT_DETECTED"] = "workspace-not-detected";
  ErrorCode2["INVALID_ADDRESS"] = "invalid-address";
  ErrorCode2["INVALID_EVM_ADDRESS"] = "invalid-evm-address";
  ErrorCode2["INVALID_B256_ADDRESS"] = "invalid-b256-address";
  ErrorCode2["CHAIN_INFO_CACHE_EMPTY"] = "chain-info-cache-empty";
  ErrorCode2["NODE_INFO_CACHE_EMPTY"] = "node-info-cache-empty";
  ErrorCode2["MISSING_PROVIDER"] = "missing-provider";
  ErrorCode2["INVALID_PROVIDER"] = "invalid-provider";
  ErrorCode2["CONNECTION_REFUSED"] = "connection-refused";
  ErrorCode2["INVALID_URL"] = "invalid-url";
  ErrorCode2["UNSUPPORTED_FEATURE"] = "unsupported-feature";
  ErrorCode2["INVALID_PUBLIC_KEY"] = "invalid-public-key";
  ErrorCode2["WALLET_MANAGER_ERROR"] = "wallet-manager-error";
  ErrorCode2["HD_WALLET_ERROR"] = "hd-wallet-error";
  ErrorCode2["MISSING_CONNECTOR"] = "missing-connector";
  ErrorCode2["PARSE_FAILED"] = "parse-failed";
  ErrorCode2["ENCODE_ERROR"] = "encode-error";
  ErrorCode2["DECODE_ERROR"] = "decode-error";
  ErrorCode2["ENV_DEPENDENCY_MISSING"] = "env-dependency-missing";
  ErrorCode2["INVALID_TTL"] = "invalid-ttl";
  ErrorCode2["INVALID_INPUT_PARAMETERS"] = "invalid-input-parameters";
  ErrorCode2["NOT_IMPLEMENTED"] = "not-implemented";
  ErrorCode2["NOT_SUPPORTED"] = "not-supported";
  ErrorCode2["CONVERTING_FAILED"] = "converting-error";
  ErrorCode2["ELEMENT_NOT_FOUND"] = "element-not-found";
  ErrorCode2["MISSING_REQUIRED_PARAMETER"] = "missing-required-parameter";
  ErrorCode2["INVALID_REQUEST"] = "invalid-request";
  ErrorCode2["INVALID_TRANSFER_AMOUNT"] = "invalid-transfer-amount";
  ErrorCode2["INSUFFICIENT_FUNDS_OR_MAX_COINS"] = "not-enough-funds-or-max-coins-reached";
  ErrorCode2["INVALID_CREDENTIALS"] = "invalid-credentials";
  ErrorCode2["HASHER_LOCKED"] = "hasher-locked";
  ErrorCode2["GAS_PRICE_TOO_LOW"] = "gas-price-too-low";
  ErrorCode2["GAS_LIMIT_TOO_LOW"] = "gas-limit-too-low";
  ErrorCode2["MAX_FEE_TOO_LOW"] = "max-fee-too-low";
  ErrorCode2["TRANSACTION_NOT_FOUND"] = "transaction-not-found";
  ErrorCode2["TRANSACTION_FAILED"] = "transaction-failed";
  ErrorCode2["INVALID_CONFIGURABLE_CONSTANTS"] = "invalid-configurable-constants";
  ErrorCode2["INVALID_TRANSACTION_INPUT"] = "invalid-transaction-input";
  ErrorCode2["INVALID_TRANSACTION_OUTPUT"] = "invalid-transaction-output";
  ErrorCode2["INVALID_TRANSACTION_STATUS"] = "invalid-transaction-status";
  ErrorCode2["UNSUPPORTED_TRANSACTION_TYPE"] = "unsupported-transaction-type";
  ErrorCode2["TRANSACTION_ERROR"] = "transaction-error";
  ErrorCode2["INVALID_POLICY_TYPE"] = "invalid-policy-type";
  ErrorCode2["DUPLICATED_POLICY"] = "duplicated-policy";
  ErrorCode2["TRANSACTION_SQUEEZED_OUT"] = "transaction-squeezed-out";
  ErrorCode2["CONTRACT_SIZE_EXCEEDS_LIMIT"] = "contract-size-exceeds-limit";
  ErrorCode2["INVALID_CHUNK_SIZE_MULTIPLIER"] = "invalid-chunk-size-multiplier";
  ErrorCode2["MAX_INPUTS_EXCEEDED"] = "max-inputs-exceeded";
  ErrorCode2["FUNDS_TOO_LOW"] = "funds-too-low";
  ErrorCode2["MAX_OUTPUTS_EXCEEDED"] = "max-outputs-exceeded";
  ErrorCode2["ASSET_BURN_DETECTED"] = "asset-burn-detected";
  ErrorCode2["INVALID_RECEIPT_TYPE"] = "invalid-receipt-type";
  ErrorCode2["INVALID_WORD_LIST"] = "invalid-word-list";
  ErrorCode2["INVALID_MNEMONIC"] = "invalid-mnemonic";
  ErrorCode2["INVALID_ENTROPY"] = "invalid-entropy";
  ErrorCode2["INVALID_SEED"] = "invalid-seed";
  ErrorCode2["INVALID_CHECKSUM"] = "invalid-checksum";
  ErrorCode2["INVALID_PASSWORD"] = "invalid-password";
  ErrorCode2["ACCOUNT_REQUIRED"] = "account-required";
  ErrorCode2["UNLOCKED_WALLET_REQUIRED"] = "unlocked-wallet-required";
  ErrorCode2["ASSET_NOT_FOUND"] = "asset-not-found";
  ErrorCode2["NUMBER_TOO_BIG"] = "number-too-big";
  ErrorCode2["ERROR_BUILDING_BLOCK_EXPLORER_URL"] = "error-building-block-explorer-url";
  ErrorCode2["VITEPRESS_PLUGIN_ERROR"] = "vitepress-plugin-error";
  ErrorCode2["SCRIPT_REVERTED"] = "script-reverted";
  ErrorCode2["SCRIPT_RETURN_INVALID_TYPE"] = "script-return-invalid-type";
  ErrorCode2["STREAM_PARSING_ERROR"] = "stream-parsing-error";
  ErrorCode2["NODE_LAUNCH_FAILED"] = "node-launch-failed";
  ErrorCode2["UNKNOWN"] = "unknown";
  return ErrorCode2;
})(ErrorCode || {});
var _a;
var FuelError = (_a = class extends Error {
  constructor(code, message, metadata = {}, rawError = null) {
    super(message);
    __publicField(this, "VERSIONS", versions);
    __publicField(this, "metadata");
    __publicField(this, "rawError");
    __publicField(this, "code");
    this.code = code;
    this.name = "FuelError";
    this.metadata = metadata;
    this.rawError = rawError;
  }
  static parse(e) {
    const error = e;
    if (error.code === void 0) {
      throw new _a(
        "parse-failed",
        "Failed to parse the error object. The required 'code' property is missing."
      );
    }
    const enumValues = Object.values(ErrorCode);
    const codeIsKnown = enumValues.includes(error.code);
    if (!codeIsKnown) {
      throw new _a(
        "parse-failed",
        `Unknown error code: ${error.code}. Accepted codes: ${enumValues.join(", ")}.`
      );
    }
    return new _a(error.code, error.message);
  }
  toObject() {
    const { code, name, message, metadata, VERSIONS, rawError } = this;
    return { code, name, message, metadata, VERSIONS, rawError };
  }
}, __name2(_a, "FuelError"), __publicField(_a, "CODES", ErrorCode), _a);

// node_modules/@fuel-ts/math/dist/index.mjs
var import_bn = __toESM(require_bn(), 1);
var __defProp3 = Object.defineProperty;
var __name3 = (target, value) => __defProp3(target, "name", { value, configurable: true });
var DEFAULT_PRECISION = 9;
var DEFAULT_MIN_PRECISION = 3;
var DEFAULT_DECIMAL_UNITS = 9;
var _a2;
var BN = (_a2 = class extends import_bn.default {
  constructor(value, base, endian) {
    let bnValue = value;
    let bnBase = base;
    if (_a2.isBN(value)) {
      bnValue = value.toArray();
    } else if (typeof value === "string" && value.slice(0, 2) === "0x") {
      bnValue = value.substring(2);
      bnBase = base || "hex";
    }
    if (typeof bnValue === "number" && bnValue > Number.MAX_SAFE_INTEGER) {
      throw new FuelError(
        ErrorCode.NUMBER_TOO_BIG,
        `Value ${bnValue} is too large to be represented as a number, use string instead.`
      );
    }
    super(bnValue == null ? 0 : bnValue, bnBase, endian);
    __publicField(this, "MAX_U64", "0xFFFFFFFFFFFFFFFF");
  }
  // ANCHOR: HELPERS
  // make sure we always include `0x` in hex strings
  toString(base, length3) {
    const output = super.toString(base, length3);
    if (base === 16 || base === "hex") {
      return `0x${output}`;
    }
    return output;
  }
  toHex(bytesPadding) {
    const bytes = bytesPadding || 0;
    const bytesLength = bytes * 2;
    if (this.isNeg()) {
      throw new FuelError(ErrorCode.CONVERTING_FAILED, "Cannot convert negative value to hex.");
    }
    if (bytesPadding && this.byteLength() > bytesPadding) {
      throw new FuelError(
        ErrorCode.CONVERTING_FAILED,
        `Provided value ${this} is too large. It should fit within ${bytesPadding} bytes.`
      );
    }
    return this.toString(16, bytesLength);
  }
  toBytes(bytesPadding) {
    if (this.isNeg()) {
      throw new FuelError(ErrorCode.CONVERTING_FAILED, "Cannot convert negative value to bytes.");
    }
    return Uint8Array.from(this.toArray(void 0, bytesPadding));
  }
  toJSON() {
    return this.toString(16);
  }
  valueOf() {
    return this.toString();
  }
  format(options) {
    const {
      units = DEFAULT_DECIMAL_UNITS,
      precision: initialPrecision = DEFAULT_PRECISION,
      minPrecision: initialMinPrecision = DEFAULT_MIN_PRECISION
    } = options || {};
    if (units === 0) {
      return this.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }
    const minPrecision = initialMinPrecision > initialPrecision ? initialPrecision : initialMinPrecision;
    const precision = initialPrecision > initialMinPrecision ? initialPrecision : initialMinPrecision;
    const formattedUnits = this.formatUnits(units);
    const [integerPart, fractionalPart = ""] = formattedUnits.split(".");
    const formattedInteger = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    if (precision === 0) {
      return formattedInteger;
    }
    let formattedFractional = fractionalPart.replace(/0+$/, "");
    if (formattedFractional.length > precision) {
      if (integerPart === "0") {
        const firstNonZeroIndex = formattedFractional.search(/[1-9]/);
        if (firstNonZeroIndex >= 0 && firstNonZeroIndex < precision) {
          formattedFractional = formattedFractional.slice(0, precision);
        } else {
          formattedFractional = formattedFractional.slice(0, firstNonZeroIndex + 1);
        }
      } else {
        formattedFractional = formattedFractional.slice(0, precision);
      }
    } else {
      formattedFractional = formattedFractional.slice(0, precision);
    }
    if (formattedFractional.length < minPrecision) {
      formattedFractional = formattedFractional.padEnd(minPrecision, "0");
    }
    if (formattedFractional === "" && minPrecision === 0) {
      return formattedInteger;
    }
    return formattedFractional ? `${formattedInteger}.${formattedFractional}` : formattedInteger;
  }
  formatUnits(units = DEFAULT_DECIMAL_UNITS) {
    const valueString = this.toString();
    const valueLength = valueString.length;
    if (valueLength <= units) {
      const paddedZeros = "0".repeat(units - valueLength);
      return `0.${paddedZeros}${valueString}`;
    }
    const integerPart = valueString.slice(0, valueLength - units);
    const fractionalPart = valueString.slice(valueLength - units);
    return `${integerPart}.${fractionalPart}`;
  }
  // END ANCHOR: HELPERS
  // ANCHOR: OVERRIDES to accept better inputs
  add(v) {
    return this.caller(v, "add");
  }
  pow(v) {
    return this.caller(v, "pow");
  }
  sub(v) {
    return this.caller(v, "sub");
  }
  div(v) {
    return this.caller(v, "div");
  }
  mul(v) {
    return this.caller(v, "mul");
  }
  mod(v) {
    return this.caller(v, "mod");
  }
  divRound(v) {
    return this.caller(v, "divRound");
  }
  lt(v) {
    return this.caller(v, "lt");
  }
  lte(v) {
    return this.caller(v, "lte");
  }
  gt(v) {
    return this.caller(v, "gt");
  }
  gte(v) {
    return this.caller(v, "gte");
  }
  eq(v) {
    return this.caller(v, "eq");
  }
  cmp(v) {
    return this.caller(v, "cmp");
  }
  // END ANCHOR: OVERRIDES to accept better inputs
  // ANCHOR: OVERRIDES to output our BN type
  sqr() {
    return new _a2(super.sqr().toArray());
  }
  neg() {
    return new _a2(super.neg().toArray());
  }
  abs() {
    return new _a2(super.abs().toArray());
  }
  toTwos(width) {
    return new _a2(super.toTwos(width).toArray());
  }
  fromTwos(width) {
    return new _a2(super.fromTwos(width).toArray());
  }
  // END ANCHOR: OVERRIDES to output our BN type
  // ANCHOR: OVERRIDES to avoid losing references
  caller(v, methodName) {
    const output = super[methodName](new _a2(v));
    if (_a2.isBN(output)) {
      return new _a2(output.toArray());
    }
    if (typeof output === "boolean") {
      return output;
    }
    return output;
  }
  clone() {
    return new _a2(this.toArray());
  }
  mulTo(num2, out) {
    const output = new import_bn.default(this.toArray()).mulTo(num2, out);
    return new _a2(output.toArray());
  }
  egcd(p) {
    const { a, b, gcd } = new import_bn.default(this.toArray()).egcd(p);
    return {
      a: new _a2(a.toArray()),
      b: new _a2(b.toArray()),
      gcd: new _a2(gcd.toArray())
    };
  }
  divmod(num2, mode, positive) {
    const { div: div2, mod: mod2 } = new import_bn.default(this.toArray()).divmod(new _a2(num2), mode, positive);
    return {
      div: new _a2(div2 == null ? void 0 : div2.toArray()),
      mod: new _a2(mod2 == null ? void 0 : mod2.toArray())
    };
  }
  maxU64() {
    return this.gte(this.MAX_U64) ? new _a2(this.MAX_U64) : this;
  }
  max(num2) {
    return this.gte(num2) ? new _a2(num2) : this;
  }
  normalizeZeroToOne() {
    return this.isZero() ? new _a2(1) : this;
  }
  // END ANCHOR: OVERRIDES to avoid losing references
}, __name3(_a2, "BN"), _a2);
var bn = __name3((value, base, endian) => new BN(value, base, endian), "bn");
bn.parseUnits = (value, units = DEFAULT_DECIMAL_UNITS) => {
  const valueToParse = value === "." ? "0." : value;
  const [valueUnits = "0", valueDecimals = "0"] = valueToParse.split(".");
  const length3 = valueDecimals.length;
  if (units === 0) {
    const valueWithoutDecimals = valueToParse.replace(",", "").split(".")[0];
    return bn(valueWithoutDecimals);
  }
  if (length3 > units) {
    throw new FuelError(
      ErrorCode.CONVERTING_FAILED,
      `Decimal can't have more than ${units} digits.`
    );
  }
  const decimals = Array.from({ length: units }).fill("0");
  decimals.splice(0, length3, valueDecimals);
  const amount = `${valueUnits.replaceAll(",", "")}${decimals.join("")}`;
  return bn(amount);
};
function toFixed(value, options) {
  const { precision = DEFAULT_PRECISION, minPrecision = DEFAULT_MIN_PRECISION } = options || {};
  const [valueUnits = "0", valueDecimals = "0"] = String(value || "0.0").split(".");
  const groupRegex = /(\d)(?=(\d{3})+\b)/g;
  const units = valueUnits.replace(groupRegex, "$1,");
  let decimals = valueDecimals.slice(0, precision);
  if (minPrecision < precision) {
    const trimmedDecimal = decimals.match(/.*[1-9]{1}/);
    const lastNonZeroIndex = (trimmedDecimal == null ? void 0 : trimmedDecimal[0].length) || 0;
    const keepChars = Math.max(minPrecision, lastNonZeroIndex);
    decimals = decimals.slice(0, keepChars);
  }
  const decimalPortion = decimals ? `.${decimals}` : "";
  return `${units}${decimalPortion}`;
}
__name3(toFixed, "toFixed");
function toNumber(value) {
  return bn(value).toNumber();
}
__name3(toNumber, "toNumber");
function toHex(value, bytesPadding) {
  return bn(value).toHex(bytesPadding);
}
__name3(toHex, "toHex");
function toBytes(value, bytesPadding) {
  return bn(value).toBytes(bytesPadding);
}
__name3(toBytes, "toBytes");
function formatUnits(value, units) {
  return bn(value).formatUnits(units);
}
__name3(formatUnits, "formatUnits");
function format(value, options) {
  return bn(value).format(options);
}
__name3(format, "format");
function max(...numbers) {
  return numbers.reduce((prev, cur) => bn(cur).gt(prev) ? bn(cur) : prev, bn(0));
}
__name3(max, "max");
function multiply(...numbers) {
  return bn(Math.ceil(numbers.reduce((a, b) => bn(a).mul(b), bn(1)).toNumber()));
}
__name3(multiply, "multiply");

// node_modules/fflate/esm/browser.js
var ch2 = {};
var wk = function(c, id, msg, transfer, cb2) {
  var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([
    c + ';addEventListener("error",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'
  ], { type: "text/javascript" }))));
  w.onmessage = function(e) {
    var d = e.data, ed = d.$e$;
    if (ed) {
      var err2 = new Error(ed[0]);
      err2["code"] = ed[1];
      err2.stack = ed[2];
      cb2(err2, null);
    } else
      cb2(null, d);
  };
  w.postMessage(msg, transfer);
  return w;
};
var u8 = Uint8Array;
var u16 = Uint16Array;
var i32 = Int32Array;
var fleb = new u8([
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  1,
  1,
  1,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  4,
  4,
  4,
  4,
  5,
  5,
  5,
  5,
  0,
  /* unused */
  0,
  0,
  /* impossible */
  0
]);
var fdeb = new u8([
  0,
  0,
  0,
  0,
  1,
  1,
  2,
  2,
  3,
  3,
  4,
  4,
  5,
  5,
  6,
  6,
  7,
  7,
  8,
  8,
  9,
  9,
  10,
  10,
  11,
  11,
  12,
  12,
  13,
  13,
  /* unused */
  0,
  0
]);
var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
var freb = function(eb, start) {
  var b = new u16(31);
  for (var i = 0; i < 31; ++i) {
    b[i] = start += 1 << eb[i - 1];
  }
  var r = new i32(b[30]);
  for (var i = 1; i < 30; ++i) {
    for (var j = b[i]; j < b[i + 1]; ++j) {
      r[j] = j - b[i] << 5 | i;
    }
  }
  return { b, r };
};
var _a3 = freb(fleb, 2);
var fl = _a3.b;
var revfl = _a3.r;
fl[28] = 258, revfl[258] = 28;
var _b = freb(fdeb, 0);
var fd = _b.b;
var revfd = _b.r;
var rev = new u16(32768);
for (i = 0; i < 32768; ++i) {
  x = (i & 43690) >> 1 | (i & 21845) << 1;
  x = (x & 52428) >> 2 | (x & 13107) << 2;
  x = (x & 61680) >> 4 | (x & 3855) << 4;
  rev[i] = ((x & 65280) >> 8 | (x & 255) << 8) >> 1;
}
var x;
var i;
var hMap = function(cd, mb, r) {
  var s = cd.length;
  var i = 0;
  var l = new u16(mb);
  for (; i < s; ++i) {
    if (cd[i])
      ++l[cd[i] - 1];
  }
  var le = new u16(mb);
  for (i = 1; i < mb; ++i) {
    le[i] = le[i - 1] + l[i - 1] << 1;
  }
  var co;
  if (r) {
    co = new u16(1 << mb);
    var rvb = 15 - mb;
    for (i = 0; i < s; ++i) {
      if (cd[i]) {
        var sv = i << 4 | cd[i];
        var r_1 = mb - cd[i];
        var v = le[cd[i] - 1]++ << r_1;
        for (var m = v | (1 << r_1) - 1; v <= m; ++v) {
          co[rev[v] >> rvb] = sv;
        }
      }
    }
  } else {
    co = new u16(s);
    for (i = 0; i < s; ++i) {
      if (cd[i]) {
        co[i] = rev[le[cd[i] - 1]++] >> 15 - cd[i];
      }
    }
  }
  return co;
};
var flt = new u8(288);
for (i = 0; i < 144; ++i)
  flt[i] = 8;
var i;
for (i = 144; i < 256; ++i)
  flt[i] = 9;
var i;
for (i = 256; i < 280; ++i)
  flt[i] = 7;
var i;
for (i = 280; i < 288; ++i)
  flt[i] = 8;
var i;
var fdt = new u8(32);
for (i = 0; i < 32; ++i)
  fdt[i] = 5;
var i;
var flm = hMap(flt, 9, 0);
var flrm = hMap(flt, 9, 1);
var fdm = hMap(fdt, 5, 0);
var fdrm = hMap(fdt, 5, 1);
var max2 = function(a) {
  var m = a[0];
  for (var i = 1; i < a.length; ++i) {
    if (a[i] > m)
      m = a[i];
  }
  return m;
};
var bits = function(d, p, m) {
  var o3 = p / 8 | 0;
  return (d[o3] | d[o3 + 1] << 8) >> (p & 7) & m;
};
var bits16 = function(d, p) {
  var o3 = p / 8 | 0;
  return (d[o3] | d[o3 + 1] << 8 | d[o3 + 2] << 16) >> (p & 7);
};
var shft = function(p) {
  return (p + 7) / 8 | 0;
};
var slc = function(v, s, e) {
  if (s == null || s < 0)
    s = 0;
  if (e == null || e > v.length)
    e = v.length;
  return new u8(v.subarray(s, e));
};
var ec = [
  "unexpected EOF",
  "invalid block type",
  "invalid length/literal",
  "invalid distance",
  "stream finished",
  "no stream handler",
  ,
  "no callback",
  "invalid UTF-8 data",
  "extra field too long",
  "date not in range 1980-2099",
  "filename too long",
  "stream finishing",
  "invalid zip data"
  // determined by unknown compression method
];
var err = function(ind, msg, nt) {
  var e = new Error(msg || ec[ind]);
  e.code = ind;
  if (Error.captureStackTrace)
    Error.captureStackTrace(e, err);
  if (!nt)
    throw e;
  return e;
};
var inflt = function(dat, st, buf, dict) {
  var sl = dat.length, dl = dict ? dict.length : 0;
  if (!sl || st.f && !st.l)
    return buf || new u8(0);
  var noBuf = !buf;
  var resize = noBuf || st.i != 2;
  var noSt = st.i;
  if (noBuf)
    buf = new u8(sl * 3);
  var cbuf = function(l2) {
    var bl = buf.length;
    if (l2 > bl) {
      var nbuf = new u8(Math.max(bl * 2, l2));
      nbuf.set(buf);
      buf = nbuf;
    }
  };
  var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
  var tbts = sl * 8;
  do {
    if (!lm) {
      final = bits(dat, pos, 1);
      var type3 = bits(dat, pos + 1, 3);
      pos += 3;
      if (!type3) {
        var s = shft(pos) + 4, l = dat[s - 4] | dat[s - 3] << 8, t = s + l;
        if (t > sl) {
          if (noSt)
            err(0);
          break;
        }
        if (resize)
          cbuf(bt + l);
        buf.set(dat.subarray(s, t), bt);
        st.b = bt += l, st.p = pos = t * 8, st.f = final;
        continue;
      } else if (type3 == 1)
        lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
      else if (type3 == 2) {
        var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
        var tl = hLit + bits(dat, pos + 5, 31) + 1;
        pos += 14;
        var ldt = new u8(tl);
        var clt = new u8(19);
        for (var i = 0; i < hcLen; ++i) {
          clt[clim[i]] = bits(dat, pos + i * 3, 7);
        }
        pos += hcLen * 3;
        var clb = max2(clt), clbmsk = (1 << clb) - 1;
        var clm = hMap(clt, clb, 1);
        for (var i = 0; i < tl; ) {
          var r = clm[bits(dat, pos, clbmsk)];
          pos += r & 15;
          var s = r >> 4;
          if (s < 16) {
            ldt[i++] = s;
          } else {
            var c = 0, n = 0;
            if (s == 16)
              n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];
            else if (s == 17)
              n = 3 + bits(dat, pos, 7), pos += 3;
            else if (s == 18)
              n = 11 + bits(dat, pos, 127), pos += 7;
            while (n--)
              ldt[i++] = c;
          }
        }
        var lt4 = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
        lbt = max2(lt4);
        dbt = max2(dt);
        lm = hMap(lt4, lbt, 1);
        dm = hMap(dt, dbt, 1);
      } else
        err(1);
      if (pos > tbts) {
        if (noSt)
          err(0);
        break;
      }
    }
    if (resize)
      cbuf(bt + 131072);
    var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
    var lpos = pos;
    for (; ; lpos = pos) {
      var c = lm[bits16(dat, pos) & lms], sym = c >> 4;
      pos += c & 15;
      if (pos > tbts) {
        if (noSt)
          err(0);
        break;
      }
      if (!c)
        err(2);
      if (sym < 256)
        buf[bt++] = sym;
      else if (sym == 256) {
        lpos = pos, lm = null;
        break;
      } else {
        var add5 = sym - 254;
        if (sym > 264) {
          var i = sym - 257, b = fleb[i];
          add5 = bits(dat, pos, (1 << b) - 1) + fl[i];
          pos += b;
        }
        var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;
        if (!d)
          err(3);
        pos += d & 15;
        var dt = fd[dsym];
        if (dsym > 3) {
          var b = fdeb[dsym];
          dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
        }
        if (pos > tbts) {
          if (noSt)
            err(0);
          break;
        }
        if (resize)
          cbuf(bt + 131072);
        var end = bt + add5;
        if (bt < dt) {
          var shift = dl - dt, dend = Math.min(dt, end);
          if (shift + bt < 0)
            err(3);
          for (; bt < dend; ++bt)
            buf[bt] = dict[shift + bt];
        }
        for (; bt < end; ++bt)
          buf[bt] = buf[bt - dt];
      }
    }
    st.l = lm, st.p = lpos, st.b = bt, st.f = final;
    if (lm)
      final = 1, st.m = lbt, st.d = dm, st.n = dbt;
  } while (!final);
  return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);
};
var wbits = function(d, p, v) {
  v <<= p & 7;
  var o3 = p / 8 | 0;
  d[o3] |= v;
  d[o3 + 1] |= v >> 8;
};
var wbits16 = function(d, p, v) {
  v <<= p & 7;
  var o3 = p / 8 | 0;
  d[o3] |= v;
  d[o3 + 1] |= v >> 8;
  d[o3 + 2] |= v >> 16;
};
var hTree = function(d, mb) {
  var t = [];
  for (var i = 0; i < d.length; ++i) {
    if (d[i])
      t.push({ s: i, f: d[i] });
  }
  var s = t.length;
  var t2 = t.slice();
  if (!s)
    return { t: et, l: 0 };
  if (s == 1) {
    var v = new u8(t[0].s + 1);
    v[t[0].s] = 1;
    return { t: v, l: 1 };
  }
  t.sort(function(a, b) {
    return a.f - b.f;
  });
  t.push({ s: -1, f: 25001 });
  var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;
  t[0] = { s: -1, f: l.f + r.f, l, r };
  while (i1 != s - 1) {
    l = t[t[i0].f < t[i2].f ? i0++ : i2++];
    r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];
    t[i1++] = { s: -1, f: l.f + r.f, l, r };
  }
  var maxSym = t2[0].s;
  for (var i = 1; i < s; ++i) {
    if (t2[i].s > maxSym)
      maxSym = t2[i].s;
  }
  var tr2 = new u16(maxSym + 1);
  var mbt = ln(t[i1 - 1], tr2, 0);
  if (mbt > mb) {
    var i = 0, dt = 0;
    var lft = mbt - mb, cst = 1 << lft;
    t2.sort(function(a, b) {
      return tr2[b.s] - tr2[a.s] || a.f - b.f;
    });
    for (; i < s; ++i) {
      var i2_1 = t2[i].s;
      if (tr2[i2_1] > mb) {
        dt += cst - (1 << mbt - tr2[i2_1]);
        tr2[i2_1] = mb;
      } else
        break;
    }
    dt >>= lft;
    while (dt > 0) {
      var i2_2 = t2[i].s;
      if (tr2[i2_2] < mb)
        dt -= 1 << mb - tr2[i2_2]++ - 1;
      else
        ++i;
    }
    for (; i >= 0 && dt; --i) {
      var i2_3 = t2[i].s;
      if (tr2[i2_3] == mb) {
        --tr2[i2_3];
        ++dt;
      }
    }
    mbt = mb;
  }
  return { t: new u8(tr2), l: mbt };
};
var ln = function(n, l, d) {
  return n.s == -1 ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1)) : l[n.s] = d;
};
var lc = function(c) {
  var s = c.length;
  while (s && !c[--s])
    ;
  var cl = new u16(++s);
  var cli = 0, cln = c[0], cls = 1;
  var w = function(v) {
    cl[cli++] = v;
  };
  for (var i = 1; i <= s; ++i) {
    if (c[i] == cln && i != s)
      ++cls;
    else {
      if (!cln && cls > 2) {
        for (; cls > 138; cls -= 138)
          w(32754);
        if (cls > 2) {
          w(cls > 10 ? cls - 11 << 5 | 28690 : cls - 3 << 5 | 12305);
          cls = 0;
        }
      } else if (cls > 3) {
        w(cln), --cls;
        for (; cls > 6; cls -= 6)
          w(8304);
        if (cls > 2)
          w(cls - 3 << 5 | 8208), cls = 0;
      }
      while (cls--)
        w(cln);
      cls = 1;
      cln = c[i];
    }
  }
  return { c: cl.subarray(0, cli), n: s };
};
var clen = function(cf, cl) {
  var l = 0;
  for (var i = 0; i < cl.length; ++i)
    l += cf[i] * cl[i];
  return l;
};
var wfblk = function(out, pos, dat) {
  var s = dat.length;
  var o3 = shft(pos + 2);
  out[o3] = s & 255;
  out[o3 + 1] = s >> 8;
  out[o3 + 2] = out[o3] ^ 255;
  out[o3 + 3] = out[o3 + 1] ^ 255;
  for (var i = 0; i < s; ++i)
    out[o3 + i + 4] = dat[i];
  return (o3 + 4 + s) * 8;
};
var wblk = function(dat, out, final, syms, lf, df, eb, li, bs, bl, p) {
  wbits(out, p++, final);
  ++lf[256];
  var _a103 = hTree(lf, 15), dlt = _a103.t, mlb = _a103.l;
  var _b2 = hTree(df, 15), ddt = _b2.t, mdb = _b2.l;
  var _c = lc(dlt), lclt = _c.c, nlc = _c.n;
  var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;
  var lcfreq = new u16(19);
  for (var i = 0; i < lclt.length; ++i)
    ++lcfreq[lclt[i] & 31];
  for (var i = 0; i < lcdt.length; ++i)
    ++lcfreq[lcdt[i] & 31];
  var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;
  var nlcc = 19;
  for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)
    ;
  var flen = bl + 5 << 3;
  var ftlen = clen(lf, flt) + clen(df, fdt) + eb;
  var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];
  if (bs >= 0 && flen <= ftlen && flen <= dtlen)
    return wfblk(out, p, dat.subarray(bs, bs + bl));
  var lm, ll, dm, dl;
  wbits(out, p, 1 + (dtlen < ftlen)), p += 2;
  if (dtlen < ftlen) {
    lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;
    var llm = hMap(lct, mlcb, 0);
    wbits(out, p, nlc - 257);
    wbits(out, p + 5, ndc - 1);
    wbits(out, p + 10, nlcc - 4);
    p += 14;
    for (var i = 0; i < nlcc; ++i)
      wbits(out, p + 3 * i, lct[clim[i]]);
    p += 3 * nlcc;
    var lcts = [lclt, lcdt];
    for (var it = 0; it < 2; ++it) {
      var clct = lcts[it];
      for (var i = 0; i < clct.length; ++i) {
        var len = clct[i] & 31;
        wbits(out, p, llm[len]), p += lct[len];
        if (len > 15)
          wbits(out, p, clct[i] >> 5 & 127), p += clct[i] >> 12;
      }
    }
  } else {
    lm = flm, ll = flt, dm = fdm, dl = fdt;
  }
  for (var i = 0; i < li; ++i) {
    var sym = syms[i];
    if (sym > 255) {
      var len = sym >> 18 & 31;
      wbits16(out, p, lm[len + 257]), p += ll[len + 257];
      if (len > 7)
        wbits(out, p, sym >> 23 & 31), p += fleb[len];
      var dst = sym & 31;
      wbits16(out, p, dm[dst]), p += dl[dst];
      if (dst > 3)
        wbits16(out, p, sym >> 5 & 8191), p += fdeb[dst];
    } else {
      wbits16(out, p, lm[sym]), p += ll[sym];
    }
  }
  wbits16(out, p, lm[256]);
  return p + ll[256];
};
var deo = new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);
var et = new u8(0);
var dflt = function(dat, lvl, plvl, pre, post, st) {
  var s = st.z || dat.length;
  var o3 = new u8(pre + s + 5 * (1 + Math.ceil(s / 7e3)) + post);
  var w = o3.subarray(pre, o3.length - post);
  var lst = st.l;
  var pos = (st.r || 0) & 7;
  if (lvl) {
    if (pos)
      w[0] = st.r >> 3;
    var opt = deo[lvl - 1];
    var n = opt >> 13, c = opt & 8191;
    var msk_1 = (1 << plvl) - 1;
    var prev = st.p || new u16(32768), head2 = st.h || new u16(msk_1 + 1);
    var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;
    var hsh = function(i2) {
      return (dat[i2] ^ dat[i2 + 1] << bs1_1 ^ dat[i2 + 2] << bs2_1) & msk_1;
    };
    var syms = new i32(25e3);
    var lf = new u16(288), df = new u16(32);
    var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;
    for (; i + 2 < s; ++i) {
      var hv = hsh(i);
      var imod = i & 32767, pimod = head2[hv];
      prev[imod] = pimod;
      head2[hv] = imod;
      if (wi <= i) {
        var rem = s - i;
        if ((lc_1 > 7e3 || li > 24576) && (rem > 423 || !lst)) {
          pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);
          li = lc_1 = eb = 0, bs = i;
          for (var j = 0; j < 286; ++j)
            lf[j] = 0;
          for (var j = 0; j < 30; ++j)
            df[j] = 0;
        }
        var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;
        if (rem > 2 && hv == hsh(i - dif)) {
          var maxn = Math.min(n, rem) - 1;
          var maxd = Math.min(32767, i);
          var ml = Math.min(258, rem);
          while (dif <= maxd && --ch_1 && imod != pimod) {
            if (dat[i + l] == dat[i + l - dif]) {
              var nl = 0;
              for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)
                ;
              if (nl > l) {
                l = nl, d = dif;
                if (nl > maxn)
                  break;
                var mmd = Math.min(dif, nl - 2);
                var md = 0;
                for (var j = 0; j < mmd; ++j) {
                  var ti = i - dif + j & 32767;
                  var pti = prev[ti];
                  var cd = ti - pti & 32767;
                  if (cd > md)
                    md = cd, pimod = ti;
                }
              }
            }
            imod = pimod, pimod = prev[imod];
            dif += imod - pimod & 32767;
          }
        }
        if (d) {
          syms[li++] = 268435456 | revfl[l] << 18 | revfd[d];
          var lin = revfl[l] & 31, din = revfd[d] & 31;
          eb += fleb[lin] + fdeb[din];
          ++lf[257 + lin];
          ++df[din];
          wi = i + l;
          ++lc_1;
        } else {
          syms[li++] = dat[i];
          ++lf[dat[i]];
        }
      }
    }
    for (i = Math.max(i, wi); i < s; ++i) {
      syms[li++] = dat[i];
      ++lf[dat[i]];
    }
    pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);
    if (!lst) {
      st.r = pos & 7 | w[pos / 8 | 0] << 3;
      pos -= 7;
      st.h = head2, st.p = prev, st.i = i, st.w = wi;
    }
  } else {
    for (var i = st.w || 0; i < s + lst; i += 65535) {
      var e = i + 65535;
      if (e >= s) {
        w[pos / 8 | 0] = lst;
        e = s;
      }
      pos = wfblk(w, pos + 1, dat.subarray(i, e));
    }
    st.i = s;
  }
  return slc(o3, 0, pre + shft(pos) + post);
};
var crct = function() {
  var t = new Int32Array(256);
  for (var i = 0; i < 256; ++i) {
    var c = i, k = 9;
    while (--k)
      c = (c & 1 && -306674912) ^ c >>> 1;
    t[i] = c;
  }
  return t;
}();
var crc = function() {
  var c = -1;
  return {
    p: function(d) {
      var cr = c;
      for (var i = 0; i < d.length; ++i)
        cr = crct[cr & 255 ^ d[i]] ^ cr >>> 8;
      c = cr;
    },
    d: function() {
      return ~c;
    }
  };
};
var adler = function() {
  var a = 1, b = 0;
  return {
    p: function(d) {
      var n = a, m = b;
      var l = d.length | 0;
      for (var i = 0; i != l; ) {
        var e = Math.min(i + 2655, l);
        for (; i < e; ++i)
          m += n += d[i];
        n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);
      }
      a = n, b = m;
    },
    d: function() {
      a %= 65521, b %= 65521;
      return (a & 255) << 24 | (a & 65280) << 8 | (b & 255) << 8 | b >> 8;
    }
  };
};
var dopt = function(dat, opt, pre, post, st) {
  if (!st) {
    st = { l: 1 };
    if (opt.dictionary) {
      var dict = opt.dictionary.subarray(-32768);
      var newDat = new u8(dict.length + dat.length);
      newDat.set(dict);
      newDat.set(dat, dict.length);
      dat = newDat;
      st.w = dict.length;
    }
  }
  return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? st.l ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 20 : 12 + opt.mem, pre, post, st);
};
var mrg = function(a, b) {
  var o3 = {};
  for (var k in a)
    o3[k] = a[k];
  for (var k in b)
    o3[k] = b[k];
  return o3;
};
var wcln = function(fn, fnStr, td2) {
  var dt = fn();
  var st = fn.toString();
  var ks = st.slice(st.indexOf("[") + 1, st.lastIndexOf("]")).replace(/\s+/g, "").split(",");
  for (var i = 0; i < dt.length; ++i) {
    var v = dt[i], k = ks[i];
    if (typeof v == "function") {
      fnStr += ";" + k + "=";
      var st_1 = v.toString();
      if (v.prototype) {
        if (st_1.indexOf("[native code]") != -1) {
          var spInd = st_1.indexOf(" ", 8) + 1;
          fnStr += st_1.slice(spInd, st_1.indexOf("(", spInd));
        } else {
          fnStr += st_1;
          for (var t in v.prototype)
            fnStr += ";" + k + ".prototype." + t + "=" + v.prototype[t].toString();
        }
      } else
        fnStr += st_1;
    } else
      td2[k] = v;
  }
  return fnStr;
};
var ch = [];
var cbfs = function(v) {
  var tl = [];
  for (var k in v) {
    if (v[k].buffer) {
      tl.push((v[k] = new v[k].constructor(v[k])).buffer);
    }
  }
  return tl;
};
var wrkr = function(fns, init2, id, cb2) {
  if (!ch[id]) {
    var fnStr = "", td_1 = {}, m = fns.length - 1;
    for (var i = 0; i < m; ++i)
      fnStr = wcln(fns[i], fnStr, td_1);
    ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };
  }
  var td2 = mrg({}, ch[id].e);
  return wk(ch[id].c + ";onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=" + init2.toString() + "}", id, td2, cbfs(td2), cb2);
};
var bInflt = function() {
  return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max2, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt];
};
var bDflt = function() {
  return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf];
};
var guze = function() {
  return [gzs, gzl];
};
var zule = function() {
  return [zls];
};
var pbf = function(msg) {
  return postMessage(msg, [msg.buffer]);
};
var gopt = function(o3) {
  return o3 && {
    out: o3.size && new u8(o3.size),
    dictionary: o3.dictionary
  };
};
var astrm = function(strm) {
  strm.ondata = function(dat, final) {
    return postMessage([dat, final], [dat.buffer]);
  };
  return function(ev) {
    if (ev.data.length) {
      strm.push(ev.data[0], ev.data[1]);
      postMessage([ev.data[0].length]);
    } else
      strm.flush();
  };
};
var astrmify = function(fns, strm, opts, init2, id, flush, ext) {
  var t;
  var w = wrkr(fns, init2, id, function(err2, dat) {
    if (err2)
      w.terminate(), strm.ondata.call(strm, err2);
    else if (!Array.isArray(dat))
      ext(dat);
    else if (dat.length == 1) {
      strm.queuedSize -= dat[0];
      if (strm.ondrain)
        strm.ondrain(dat[0]);
    } else {
      if (dat[1])
        w.terminate();
      strm.ondata.call(strm, err2, dat[0], dat[1]);
    }
  });
  w.postMessage(opts);
  strm.queuedSize = 0;
  strm.push = function(d, f2) {
    if (!strm.ondata)
      err(5);
    if (t)
      strm.ondata(err(4, 0, 1), null, !!f2);
    strm.queuedSize += d.length;
    w.postMessage([d, t = f2], [d.buffer]);
  };
  strm.terminate = function() {
    w.terminate();
  };
  if (flush) {
    strm.flush = function() {
      w.postMessage([]);
    };
  }
};
var b2 = function(d, b) {
  return d[b] | d[b + 1] << 8;
};
var b4 = function(d, b) {
  return (d[b] | d[b + 1] << 8 | d[b + 2] << 16 | d[b + 3] << 24) >>> 0;
};
var b8 = function(d, b) {
  return b4(d, b) + b4(d, b + 4) * 4294967296;
};
var wbytes = function(d, b, v) {
  for (; v; ++b)
    d[b] = v, v >>>= 8;
};
var gzh = function(c, o3) {
  var fn = o3.filename;
  c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o3.level < 2 ? 4 : o3.level == 9 ? 2 : 0, c[9] = 3;
  if (o3.mtime != 0)
    wbytes(c, 4, Math.floor(new Date(o3.mtime || Date.now()) / 1e3));
  if (fn) {
    c[3] = 8;
    for (var i = 0; i <= fn.length; ++i)
      c[i + 10] = fn.charCodeAt(i);
  }
};
var gzs = function(d) {
  if (d[0] != 31 || d[1] != 139 || d[2] != 8)
    err(6, "invalid gzip data");
  var flg = d[3];
  var st = 10;
  if (flg & 4)
    st += (d[10] | d[11] << 8) + 2;
  for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])
    ;
  return st + (flg & 2);
};
var gzl = function(d) {
  var l = d.length;
  return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;
};
var gzhl = function(o3) {
  return 10 + (o3.filename ? o3.filename.length + 1 : 0);
};
var zlh = function(c, o3) {
  var lv = o3.level, fl2 = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;
  c[0] = 120, c[1] = fl2 << 6 | (o3.dictionary && 32);
  c[1] |= 31 - (c[0] << 8 | c[1]) % 31;
  if (o3.dictionary) {
    var h = adler();
    h.p(o3.dictionary);
    wbytes(c, 2, h.d());
  }
};
var zls = function(d, dict) {
  if ((d[0] & 15) != 8 || d[0] >> 4 > 7 || (d[0] << 8 | d[1]) % 31)
    err(6, "invalid zlib data");
  if ((d[1] >> 5 & 1) == +!dict)
    err(6, "invalid zlib data: " + (d[1] & 32 ? "need" : "unexpected") + " dictionary");
  return (d[1] >> 3 & 4) + 2;
};
function StrmOpt(opts, cb2) {
  if (typeof opts == "function")
    cb2 = opts, opts = {};
  this.ondata = cb2;
  return opts;
}
var Deflate = function() {
  function Deflate2(opts, cb2) {
    if (typeof opts == "function")
      cb2 = opts, opts = {};
    this.ondata = cb2;
    this.o = opts || {};
    this.s = { l: 0, i: 32768, w: 32768, z: 32768 };
    this.b = new u8(98304);
    if (this.o.dictionary) {
      var dict = this.o.dictionary.subarray(-32768);
      this.b.set(dict, 32768 - dict.length);
      this.s.i = 32768 - dict.length;
    }
  }
  Deflate2.prototype.p = function(c, f2) {
    this.ondata(dopt(c, this.o, 0, 0, this.s), f2);
  };
  Deflate2.prototype.push = function(chunk, final) {
    if (!this.ondata)
      err(5);
    if (this.s.l)
      err(4);
    var endLen = chunk.length + this.s.z;
    if (endLen > this.b.length) {
      if (endLen > 2 * this.b.length - 32768) {
        var newBuf = new u8(endLen & -32768);
        newBuf.set(this.b.subarray(0, this.s.z));
        this.b = newBuf;
      }
      var split3 = this.b.length - this.s.z;
      this.b.set(chunk.subarray(0, split3), this.s.z);
      this.s.z = this.b.length;
      this.p(this.b, false);
      this.b.set(this.b.subarray(-32768));
      this.b.set(chunk.subarray(split3), 32768);
      this.s.z = chunk.length - split3 + 32768;
      this.s.i = 32766, this.s.w = 32768;
    } else {
      this.b.set(chunk, this.s.z);
      this.s.z += chunk.length;
    }
    this.s.l = final & 1;
    if (this.s.z > this.s.w + 8191 || final) {
      this.p(this.b, final || false);
      this.s.w = this.s.i, this.s.i -= 2;
    }
  };
  Deflate2.prototype.flush = function() {
    if (!this.ondata)
      err(5);
    if (this.s.l)
      err(4);
    this.p(this.b, false);
    this.s.w = this.s.i, this.s.i -= 2;
  };
  return Deflate2;
}();
var AsyncDeflate = /* @__PURE__ */ function() {
  function AsyncDeflate2(opts, cb2) {
    astrmify([
      bDflt,
      function() {
        return [astrm, Deflate];
      }
    ], this, StrmOpt.call(this, opts, cb2), function(ev) {
      var strm = new Deflate(ev.data);
      onmessage = astrm(strm);
    }, 6, 1);
  }
  return AsyncDeflate2;
}();
function deflateSync(data, opts) {
  return dopt(data, opts || {}, 0, 0);
}
var Inflate = function() {
  function Inflate2(opts, cb2) {
    if (typeof opts == "function")
      cb2 = opts, opts = {};
    this.ondata = cb2;
    var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);
    this.s = { i: 0, b: dict ? dict.length : 0 };
    this.o = new u8(32768);
    this.p = new u8(0);
    if (dict)
      this.o.set(dict);
  }
  Inflate2.prototype.e = function(c) {
    if (!this.ondata)
      err(5);
    if (this.d)
      err(4);
    if (!this.p.length)
      this.p = c;
    else if (c.length) {
      var n = new u8(this.p.length + c.length);
      n.set(this.p), n.set(c, this.p.length), this.p = n;
    }
  };
  Inflate2.prototype.c = function(final) {
    this.s.i = +(this.d = final || false);
    var bts = this.s.b;
    var dt = inflt(this.p, this.s, this.o);
    this.ondata(slc(dt, bts, this.s.b), this.d);
    this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;
    this.p = slc(this.p, this.s.p / 8 | 0), this.s.p &= 7;
  };
  Inflate2.prototype.push = function(chunk, final) {
    this.e(chunk), this.c(final);
  };
  return Inflate2;
}();
var AsyncInflate = /* @__PURE__ */ function() {
  function AsyncInflate2(opts, cb2) {
    astrmify([
      bInflt,
      function() {
        return [astrm, Inflate];
      }
    ], this, StrmOpt.call(this, opts, cb2), function(ev) {
      var strm = new Inflate(ev.data);
      onmessage = astrm(strm);
    }, 7, 0);
  }
  return AsyncInflate2;
}();
function inflateSync(data, opts) {
  return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);
}
var Gzip = function() {
  function Gzip2(opts, cb2) {
    this.c = crc();
    this.l = 0;
    this.v = 1;
    Deflate.call(this, opts, cb2);
  }
  Gzip2.prototype.push = function(chunk, final) {
    this.c.p(chunk);
    this.l += chunk.length;
    Deflate.prototype.push.call(this, chunk, final);
  };
  Gzip2.prototype.p = function(c, f2) {
    var raw = dopt(c, this.o, this.v && gzhl(this.o), f2 && 8, this.s);
    if (this.v)
      gzh(raw, this.o), this.v = 0;
    if (f2)
      wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);
    this.ondata(raw, f2);
  };
  Gzip2.prototype.flush = function() {
    Deflate.prototype.flush.call(this);
  };
  return Gzip2;
}();
function gzipSync(data, opts) {
  if (!opts)
    opts = {};
  var c = crc(), l = data.length;
  c.p(data);
  var d = dopt(data, opts, gzhl(opts), 8), s = d.length;
  return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;
}
var Gunzip = function() {
  function Gunzip2(opts, cb2) {
    this.v = 1;
    this.r = 0;
    Inflate.call(this, opts, cb2);
  }
  Gunzip2.prototype.push = function(chunk, final) {
    Inflate.prototype.e.call(this, chunk);
    this.r += chunk.length;
    if (this.v) {
      var p = this.p.subarray(this.v - 1);
      var s = p.length > 3 ? gzs(p) : 4;
      if (s > p.length) {
        if (!final)
          return;
      } else if (this.v > 1 && this.onmember) {
        this.onmember(this.r - p.length);
      }
      this.p = p.subarray(s), this.v = 0;
    }
    Inflate.prototype.c.call(this, final);
    if (this.s.f && !this.s.l && !final) {
      this.v = shft(this.s.p) + 9;
      this.s = { i: 0 };
      this.o = new u8(0);
      this.push(new u8(0), final);
    }
  };
  return Gunzip2;
}();
var AsyncGunzip = /* @__PURE__ */ function() {
  function AsyncGunzip2(opts, cb2) {
    var _this = this;
    astrmify([
      bInflt,
      guze,
      function() {
        return [astrm, Inflate, Gunzip];
      }
    ], this, StrmOpt.call(this, opts, cb2), function(ev) {
      var strm = new Gunzip(ev.data);
      strm.onmember = function(offset) {
        return postMessage(offset);
      };
      onmessage = astrm(strm);
    }, 9, 0, function(offset) {
      return _this.onmember && _this.onmember(offset);
    });
  }
  return AsyncGunzip2;
}();
function gunzipSync(data, opts) {
  var st = gzs(data);
  if (st + 8 > data.length)
    err(6, "invalid gzip data");
  return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);
}
var Zlib = function() {
  function Zlib2(opts, cb2) {
    this.c = adler();
    this.v = 1;
    Deflate.call(this, opts, cb2);
  }
  Zlib2.prototype.push = function(chunk, final) {
    this.c.p(chunk);
    Deflate.prototype.push.call(this, chunk, final);
  };
  Zlib2.prototype.p = function(c, f2) {
    var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f2 && 4, this.s);
    if (this.v)
      zlh(raw, this.o), this.v = 0;
    if (f2)
      wbytes(raw, raw.length - 4, this.c.d());
    this.ondata(raw, f2);
  };
  Zlib2.prototype.flush = function() {
    Deflate.prototype.flush.call(this);
  };
  return Zlib2;
}();
var Unzlib = function() {
  function Unzlib2(opts, cb2) {
    Inflate.call(this, opts, cb2);
    this.v = opts && opts.dictionary ? 2 : 1;
  }
  Unzlib2.prototype.push = function(chunk, final) {
    Inflate.prototype.e.call(this, chunk);
    if (this.v) {
      if (this.p.length < 6 && !final)
        return;
      this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;
    }
    if (final) {
      if (this.p.length < 4)
        err(6, "invalid zlib data");
      this.p = this.p.subarray(0, -4);
    }
    Inflate.prototype.c.call(this, final);
  };
  return Unzlib2;
}();
var AsyncUnzlib = /* @__PURE__ */ function() {
  function AsyncUnzlib2(opts, cb2) {
    astrmify([
      bInflt,
      zule,
      function() {
        return [astrm, Inflate, Unzlib];
      }
    ], this, StrmOpt.call(this, opts, cb2), function(ev) {
      var strm = new Unzlib(ev.data);
      onmessage = astrm(strm);
    }, 11, 0);
  }
  return AsyncUnzlib2;
}();
var Decompress = function() {
  function Decompress2(opts, cb2) {
    this.o = StrmOpt.call(this, opts, cb2) || {};
    this.G = Gunzip;
    this.I = Inflate;
    this.Z = Unzlib;
  }
  Decompress2.prototype.i = function() {
    var _this = this;
    this.s.ondata = function(dat, final) {
      _this.ondata(dat, final);
    };
  };
  Decompress2.prototype.push = function(chunk, final) {
    if (!this.ondata)
      err(5);
    if (!this.s) {
      if (this.p && this.p.length) {
        var n = new u8(this.p.length + chunk.length);
        n.set(this.p), n.set(chunk, this.p.length);
      } else
        this.p = chunk;
      if (this.p.length > 2) {
        this.s = this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8 ? new this.G(this.o) : (this.p[0] & 15) != 8 || this.p[0] >> 4 > 7 || (this.p[0] << 8 | this.p[1]) % 31 ? new this.I(this.o) : new this.Z(this.o);
        this.i();
        this.s.push(this.p, final);
        this.p = null;
      }
    } else
      this.s.push(chunk, final);
  };
  return Decompress2;
}();
var AsyncDecompress = function() {
  function AsyncDecompress2(opts, cb2) {
    Decompress.call(this, opts, cb2);
    this.queuedSize = 0;
    this.G = AsyncGunzip;
    this.I = AsyncInflate;
    this.Z = AsyncUnzlib;
  }
  AsyncDecompress2.prototype.i = function() {
    var _this = this;
    this.s.ondata = function(err2, dat, final) {
      _this.ondata(err2, dat, final);
    };
    this.s.ondrain = function(size) {
      _this.queuedSize -= size;
      if (_this.ondrain)
        _this.ondrain(size);
    };
  };
  AsyncDecompress2.prototype.push = function(chunk, final) {
    this.queuedSize += chunk.length;
    Decompress.prototype.push.call(this, chunk, final);
  };
  return AsyncDecompress2;
}();
var te = typeof TextEncoder != "undefined" && new TextEncoder();
var td = typeof TextDecoder != "undefined" && new TextDecoder();
var tds = 0;
try {
  td.decode(et, { stream: true });
  tds = 1;
} catch (e) {
}
var dutf8 = function(d) {
  for (var r = "", i = 0; ; ) {
    var c = d[i++];
    var eb = (c > 127) + (c > 223) + (c > 239);
    if (i + eb > d.length)
      return { s: r, r: slc(d, i - 1) };
    if (!eb)
      r += String.fromCharCode(c);
    else if (eb == 3) {
      c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | d[i++] & 63) - 65536, r += String.fromCharCode(55296 | c >> 10, 56320 | c & 1023);
    } else if (eb & 1)
      r += String.fromCharCode((c & 31) << 6 | d[i++] & 63);
    else
      r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | d[i++] & 63);
  }
};
var DecodeUTF8 = function() {
  function DecodeUTF82(cb2) {
    this.ondata = cb2;
    if (tds)
      this.t = new TextDecoder();
    else
      this.p = et;
  }
  DecodeUTF82.prototype.push = function(chunk, final) {
    if (!this.ondata)
      err(5);
    final = !!final;
    if (this.t) {
      this.ondata(this.t.decode(chunk, { stream: true }), final);
      if (final) {
        if (this.t.decode().length)
          err(8);
        this.t = null;
      }
      return;
    }
    if (!this.p)
      err(4);
    var dat = new u8(this.p.length + chunk.length);
    dat.set(this.p);
    dat.set(chunk, this.p.length);
    var _a103 = dutf8(dat), s = _a103.s, r = _a103.r;
    if (final) {
      if (r.length)
        err(8);
      this.p = null;
    } else
      this.p = r;
    this.ondata(s, final);
  };
  return DecodeUTF82;
}();
var EncodeUTF8 = function() {
  function EncodeUTF82(cb2) {
    this.ondata = cb2;
  }
  EncodeUTF82.prototype.push = function(chunk, final) {
    if (!this.ondata)
      err(5);
    if (this.d)
      err(4);
    this.ondata(strToU8(chunk), this.d = final || false);
  };
  return EncodeUTF82;
}();
function strToU8(str, latin1) {
  if (latin1) {
    var ar_1 = new u8(str.length);
    for (var i = 0; i < str.length; ++i)
      ar_1[i] = str.charCodeAt(i);
    return ar_1;
  }
  if (te)
    return te.encode(str);
  var l = str.length;
  var ar = new u8(str.length + (str.length >> 1));
  var ai = 0;
  var w = function(v) {
    ar[ai++] = v;
  };
  for (var i = 0; i < l; ++i) {
    if (ai + 5 > ar.length) {
      var n = new u8(ai + 8 + (l - i << 1));
      n.set(ar);
      ar = n;
    }
    var c = str.charCodeAt(i);
    if (c < 128 || latin1)
      w(c);
    else if (c < 2048)
      w(192 | c >> 6), w(128 | c & 63);
    else if (c > 55295 && c < 57344)
      c = 65536 + (c & 1023 << 10) | str.charCodeAt(++i) & 1023, w(240 | c >> 18), w(128 | c >> 12 & 63), w(128 | c >> 6 & 63), w(128 | c & 63);
    else
      w(224 | c >> 12), w(128 | c >> 6 & 63), w(128 | c & 63);
  }
  return slc(ar, 0, ai);
}
function strFromU8(dat, latin1) {
  if (latin1) {
    var r = "";
    for (var i = 0; i < dat.length; i += 16384)
      r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));
    return r;
  } else if (td) {
    return td.decode(dat);
  } else {
    var _a103 = dutf8(dat), s = _a103.s, r = _a103.r;
    if (r.length)
      err(8);
    return s;
  }
}
var dbf = function(l) {
  return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0;
};
var z64e = function(d, b) {
  for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))
    ;
  return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];
};
var exfl = function(ex) {
  var le = 0;
  if (ex) {
    for (var k in ex) {
      var l = ex[k].length;
      if (l > 65535)
        err(9);
      le += l + 4;
    }
  }
  return le;
};
var wzh = function(d, b, f2, fn, u, c, ce, co) {
  var fl2 = fn.length, ex = f2.extra, col = co && co.length;
  var exl = exfl(ex);
  wbytes(d, b, ce != null ? 33639248 : 67324752), b += 4;
  if (ce != null)
    d[b++] = 20, d[b++] = f2.os;
  d[b] = 20, b += 2;
  d[b++] = f2.flag << 1 | (c < 0 && 8), d[b++] = u && 8;
  d[b++] = f2.compression & 255, d[b++] = f2.compression >> 8;
  var dt = new Date(f2.mtime == null ? Date.now() : f2.mtime), y = dt.getFullYear() - 1980;
  if (y < 0 || y > 119)
    err(10);
  wbytes(d, b, y << 25 | dt.getMonth() + 1 << 21 | dt.getDate() << 16 | dt.getHours() << 11 | dt.getMinutes() << 5 | dt.getSeconds() >> 1), b += 4;
  if (c != -1) {
    wbytes(d, b, f2.crc);
    wbytes(d, b + 4, c < 0 ? -c - 2 : c);
    wbytes(d, b + 8, f2.size);
  }
  wbytes(d, b + 12, fl2);
  wbytes(d, b + 14, exl), b += 16;
  if (ce != null) {
    wbytes(d, b, col);
    wbytes(d, b + 6, f2.attrs);
    wbytes(d, b + 10, ce), b += 14;
  }
  d.set(fn, b);
  b += fl2;
  if (exl) {
    for (var k in ex) {
      var exf = ex[k], l = exf.length;
      wbytes(d, b, +k);
      wbytes(d, b + 2, l);
      d.set(exf, b + 4), b += 4 + l;
    }
  }
  if (col)
    d.set(co, b), b += col;
  return b;
};
var wzf = function(o3, b, c, d, e) {
  wbytes(o3, b, 101010256);
  wbytes(o3, b + 8, c);
  wbytes(o3, b + 10, c);
  wbytes(o3, b + 12, d);
  wbytes(o3, b + 16, e);
};
var ZipPassThrough = function() {
  function ZipPassThrough2(filename) {
    this.filename = filename;
    this.c = crc();
    this.size = 0;
    this.compression = 0;
  }
  ZipPassThrough2.prototype.process = function(chunk, final) {
    this.ondata(null, chunk, final);
  };
  ZipPassThrough2.prototype.push = function(chunk, final) {
    if (!this.ondata)
      err(5);
    this.c.p(chunk);
    this.size += chunk.length;
    if (final)
      this.crc = this.c.d();
    this.process(chunk, final || false);
  };
  return ZipPassThrough2;
}();
var ZipDeflate = function() {
  function ZipDeflate2(filename, opts) {
    var _this = this;
    if (!opts)
      opts = {};
    ZipPassThrough.call(this, filename);
    this.d = new Deflate(opts, function(dat, final) {
      _this.ondata(null, dat, final);
    });
    this.compression = 8;
    this.flag = dbf(opts.level);
  }
  ZipDeflate2.prototype.process = function(chunk, final) {
    try {
      this.d.push(chunk, final);
    } catch (e) {
      this.ondata(e, null, final);
    }
  };
  ZipDeflate2.prototype.push = function(chunk, final) {
    ZipPassThrough.prototype.push.call(this, chunk, final);
  };
  return ZipDeflate2;
}();
var AsyncZipDeflate = function() {
  function AsyncZipDeflate2(filename, opts) {
    var _this = this;
    if (!opts)
      opts = {};
    ZipPassThrough.call(this, filename);
    this.d = new AsyncDeflate(opts, function(err2, dat, final) {
      _this.ondata(err2, dat, final);
    });
    this.compression = 8;
    this.flag = dbf(opts.level);
    this.terminate = this.d.terminate;
  }
  AsyncZipDeflate2.prototype.process = function(chunk, final) {
    this.d.push(chunk, final);
  };
  AsyncZipDeflate2.prototype.push = function(chunk, final) {
    ZipPassThrough.prototype.push.call(this, chunk, final);
  };
  return AsyncZipDeflate2;
}();
var Zip = function() {
  function Zip2(cb2) {
    this.ondata = cb2;
    this.u = [];
    this.d = 1;
  }
  Zip2.prototype.add = function(file) {
    var _this = this;
    if (!this.ondata)
      err(5);
    if (this.d & 2)
      this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);
    else {
      var f2 = strToU8(file.filename), fl_1 = f2.length;
      var com = file.comment, o3 = com && strToU8(com);
      var u = fl_1 != file.filename.length || o3 && com.length != o3.length;
      var hl_1 = fl_1 + exfl(file.extra) + 30;
      if (fl_1 > 65535)
        this.ondata(err(11, 0, 1), null, false);
      var header = new u8(hl_1);
      wzh(header, 0, file, f2, u, -1);
      var chks_1 = [header];
      var pAll_1 = function() {
        for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {
          var chk = chks_2[_i];
          _this.ondata(null, chk, false);
        }
        chks_1 = [];
      };
      var tr_1 = this.d;
      this.d = 0;
      var ind_1 = this.u.length;
      var uf_1 = mrg(file, {
        f: f2,
        u,
        o: o3,
        t: function() {
          if (file.terminate)
            file.terminate();
        },
        r: function() {
          pAll_1();
          if (tr_1) {
            var nxt = _this.u[ind_1 + 1];
            if (nxt)
              nxt.r();
            else
              _this.d = 1;
          }
          tr_1 = 1;
        }
      });
      var cl_1 = 0;
      file.ondata = function(err2, dat, final) {
        if (err2) {
          _this.ondata(err2, dat, final);
          _this.terminate();
        } else {
          cl_1 += dat.length;
          chks_1.push(dat);
          if (final) {
            var dd = new u8(16);
            wbytes(dd, 0, 134695760);
            wbytes(dd, 4, file.crc);
            wbytes(dd, 8, cl_1);
            wbytes(dd, 12, file.size);
            chks_1.push(dd);
            uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;
            if (tr_1)
              uf_1.r();
            tr_1 = 1;
          } else if (tr_1)
            pAll_1();
        }
      };
      this.u.push(uf_1);
    }
  };
  Zip2.prototype.end = function() {
    var _this = this;
    if (this.d & 2) {
      this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);
      return;
    }
    if (this.d)
      this.e();
    else
      this.u.push({
        r: function() {
          if (!(_this.d & 1))
            return;
          _this.u.splice(-1, 1);
          _this.e();
        },
        t: function() {
        }
      });
    this.d = 3;
  };
  Zip2.prototype.e = function() {
    var bt = 0, l = 0, tl = 0;
    for (var _i = 0, _a103 = this.u; _i < _a103.length; _i++) {
      var f2 = _a103[_i];
      tl += 46 + f2.f.length + exfl(f2.extra) + (f2.o ? f2.o.length : 0);
    }
    var out = new u8(tl + 22);
    for (var _b2 = 0, _c = this.u; _b2 < _c.length; _b2++) {
      var f2 = _c[_b2];
      wzh(out, bt, f2, f2.f, f2.u, -f2.c - 2, l, f2.o);
      bt += 46 + f2.f.length + exfl(f2.extra) + (f2.o ? f2.o.length : 0), l += f2.b;
    }
    wzf(out, bt, this.u.length, tl, l);
    this.ondata(null, out, true);
    this.d = 2;
  };
  Zip2.prototype.terminate = function() {
    for (var _i = 0, _a103 = this.u; _i < _a103.length; _i++) {
      var f2 = _a103[_i];
      f2.t();
    }
    this.d = 2;
  };
  return Zip2;
}();
var UnzipPassThrough = function() {
  function UnzipPassThrough2() {
  }
  UnzipPassThrough2.prototype.push = function(data, final) {
    this.ondata(null, data, final);
  };
  UnzipPassThrough2.compression = 0;
  return UnzipPassThrough2;
}();
var UnzipInflate = function() {
  function UnzipInflate2() {
    var _this = this;
    this.i = new Inflate(function(dat, final) {
      _this.ondata(null, dat, final);
    });
  }
  UnzipInflate2.prototype.push = function(data, final) {
    try {
      this.i.push(data, final);
    } catch (e) {
      this.ondata(e, null, final);
    }
  };
  UnzipInflate2.compression = 8;
  return UnzipInflate2;
}();
var AsyncUnzipInflate = function() {
  function AsyncUnzipInflate2(_, sz) {
    var _this = this;
    if (sz < 32e4) {
      this.i = new Inflate(function(dat, final) {
        _this.ondata(null, dat, final);
      });
    } else {
      this.i = new AsyncInflate(function(err2, dat, final) {
        _this.ondata(err2, dat, final);
      });
      this.terminate = this.i.terminate;
    }
  }
  AsyncUnzipInflate2.prototype.push = function(data, final) {
    if (this.i.terminate)
      data = slc(data, 0);
    this.i.push(data, final);
  };
  AsyncUnzipInflate2.compression = 8;
  return AsyncUnzipInflate2;
}();
var Unzip = function() {
  function Unzip2(cb2) {
    this.onfile = cb2;
    this.k = [];
    this.o = {
      0: UnzipPassThrough
    };
    this.p = et;
  }
  Unzip2.prototype.push = function(chunk, final) {
    var _this = this;
    if (!this.onfile)
      err(5);
    if (!this.p)
      err(4);
    if (this.c > 0) {
      var len = Math.min(this.c, chunk.length);
      var toAdd = chunk.subarray(0, len);
      this.c -= len;
      if (this.d)
        this.d.push(toAdd, !this.c);
      else
        this.k[0].push(toAdd);
      chunk = chunk.subarray(len);
      if (chunk.length)
        return this.push(chunk, final);
    } else {
      var f2 = 0, i = 0, is3 = void 0, buf = void 0;
      if (!this.p.length)
        buf = chunk;
      else if (!chunk.length)
        buf = this.p;
      else {
        buf = new u8(this.p.length + chunk.length);
        buf.set(this.p), buf.set(chunk, this.p.length);
      }
      var l = buf.length, oc = this.c, add5 = oc && this.d;
      var _loop_2 = function() {
        var _a103;
        var sig = b4(buf, i);
        if (sig == 67324752) {
          f2 = 1, is3 = i;
          this_1.d = null;
          this_1.c = 0;
          var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);
          if (l > i + 30 + fnl + es) {
            var chks_3 = [];
            this_1.k.unshift(chks_3);
            f2 = 2;
            var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);
            var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);
            if (sc_1 == 4294967295) {
              _a103 = dd ? [-2] : z64e(buf, i), sc_1 = _a103[0], su_1 = _a103[1];
            } else if (dd)
              sc_1 = -1;
            i += es;
            this_1.c = sc_1;
            var d_1;
            var file_1 = {
              name: fn_1,
              compression: cmp_1,
              start: function() {
                if (!file_1.ondata)
                  err(5);
                if (!sc_1)
                  file_1.ondata(null, et, true);
                else {
                  var ctr = _this.o[cmp_1];
                  if (!ctr)
                    file_1.ondata(err(14, "unknown compression type " + cmp_1, 1), null, false);
                  d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);
                  d_1.ondata = function(err2, dat3, final2) {
                    file_1.ondata(err2, dat3, final2);
                  };
                  for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {
                    var dat2 = chks_4[_i];
                    d_1.push(dat2, false);
                  }
                  if (_this.k[0] == chks_3 && _this.c)
                    _this.d = d_1;
                  else
                    d_1.push(et, true);
                }
              },
              terminate: function() {
                if (d_1 && d_1.terminate)
                  d_1.terminate();
              }
            };
            if (sc_1 >= 0)
              file_1.size = sc_1, file_1.originalSize = su_1;
            this_1.onfile(file_1);
          }
          return "break";
        } else if (oc) {
          if (sig == 134695760) {
            is3 = i += 12 + (oc == -2 && 8), f2 = 3, this_1.c = 0;
            return "break";
          } else if (sig == 33639248) {
            is3 = i -= 4, f2 = 3, this_1.c = 0;
            return "break";
          }
        }
      };
      var this_1 = this;
      for (; i < l - 4; ++i) {
        var state_1 = _loop_2();
        if (state_1 === "break")
          break;
      }
      this.p = et;
      if (oc < 0) {
        var dat = f2 ? buf.subarray(0, is3 - 12 - (oc == -2 && 8) - (b4(buf, is3 - 16) == 134695760 && 4)) : buf.subarray(0, i);
        if (add5)
          add5.push(dat, !!f2);
        else
          this.k[+(f2 == 2)].push(dat);
      }
      if (f2 & 2)
        return this.push(buf.subarray(i), final);
      this.p = buf.subarray(i);
    }
    if (final) {
      if (this.c)
        err(13);
      this.p = null;
    }
  };
  Unzip2.prototype.register = function(decoder) {
    this.o[decoder.compression] = decoder;
  };
  return Unzip2;
}();

// node_modules/@fuel-ts/utils/dist/index.mjs
var __defProp4 = Object.defineProperty;
var __name4 = (target, value) => __defProp4(target, "name", { value, configurable: true });
var capitalizeString = __name4((str) => {
  if (!str.length) {
    return str;
  }
  return str[0].toUpperCase() + str.slice(1);
}, "capitalizeString");
var chunkAndPadBytes = __name4((bytes, chunkSize) => {
  const chunks = [];
  for (let offset = 0; offset < bytes.length; offset += chunkSize) {
    const chunk = new Uint8Array(chunkSize);
    chunk.set(bytes.slice(offset, offset + chunkSize));
    chunks.push(chunk);
  }
  const lastChunk = chunks[chunks.length - 1];
  const remainingBytes = bytes.length % chunkSize;
  const paddedChunkLength = remainingBytes + (8 - remainingBytes % 8) % 8;
  const newChunk = lastChunk.slice(0, paddedChunkLength);
  chunks[chunks.length - 1] = newChunk;
  return chunks;
}, "chunkAndPadBytes");
var arrayify = __name4((value, name, copy = true) => {
  if (value instanceof Uint8Array) {
    if (copy) {
      return new Uint8Array(value);
    }
    return value;
  }
  if (typeof value === "string" && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {
    const result = new Uint8Array((value.length - 2) / 2);
    let offset = 2;
    for (let i = 0; i < result.length; i++) {
      result[i] = parseInt(value.substring(offset, offset + 2), 16);
      offset += 2;
    }
    return result;
  }
  const nameMessage = name ? ` ${name} -` : "";
  const message = `invalid data:${nameMessage} ${value}
If you are attempting to transform a hex value, please make sure it is being passed as a string and wrapped in quotes.`;
  throw new FuelError(ErrorCode.INVALID_DATA, message);
}, "arrayify");
var concatBytes = __name4((arrays) => {
  const byteArrays = arrays.map((array) => {
    if (array instanceof Uint8Array) {
      return array;
    }
    return Uint8Array.from(array);
  });
  const totalSize = byteArrays.reduce((accum, item) => accum + item.length, 0);
  const concatenated = new Uint8Array(totalSize);
  byteArrays.reduce((offset, object) => {
    concatenated.set(object, offset);
    return offset + object.length;
  }, 0);
  return concatenated;
}, "concatBytes");
var concat = __name4((arrays) => {
  const bytes = arrays.map((v) => arrayify(v));
  return concatBytes(bytes);
}, "concat");
var HexCharacters = "0123456789abcdef";
function hexlify(data) {
  const bytes = arrayify(data);
  let result = "0x";
  for (let i = 0; i < bytes.length; i++) {
    const v = bytes[i];
    result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
  }
  return result;
}
__name4(hexlify, "hexlify");
var normalizeString = __name4((str) => {
  const transformations = [
    (s) => s.replace(/\s+/g, "-"),
    // spaces to -
    (s) => s.replace(/\./g, "-"),
    // dots to -
    (s) => s.replace(/_/g, "-"),
    // underscore to -
    (s) => s.replace(/-[a-z]/g, (match3) => match3.slice(-1).toUpperCase()),
    // delete '-' and capitalize the letter after them
    (s) => s.replace(/-/g, ""),
    // delete any '-' left
    (s) => s.replace(/^\d+/, ""),
    // removes leading digits
    (s) => s[0].toUpperCase() + s.slice(1)
    // capitalize first letter
  ];
  const output = transformations.reduce((s, t) => t(s), str);
  if (output === "") {
    const errMsg = `The provided string '${str}' results in an empty output after`.concat(
      ` normalization, therefore, it can't normalize string.`
    );
    throw new FuelError(ErrorCode.PARSE_FAILED, errMsg);
  }
  return output;
}, "normalizeString");
var TAI64_LEAP_SECONDS = 37;
var TAI64_UNIX_OFFSET = BigInt(2 ** 62) + BigInt(TAI64_LEAP_SECONDS);
var msToSeconds = __name4((ms) => Math.floor(ms / 1e3), "msToSeconds");
var secondsToMs = __name4((seconds) => seconds * 1e3, "secondsToMs");
var tai64ToUnixSeconds = __name4((tai64) => Number(BigInt(tai64) - TAI64_UNIX_OFFSET), "tai64ToUnixSeconds");
var unixSecondsToTai64 = __name4((unixSeconds) => String(BigInt(unixSeconds) + TAI64_UNIX_OFFSET), "unixSecondsToTai64");
var tai64ToUnixMilliseconds = __name4((tai64) => secondsToMs(tai64ToUnixSeconds(tai64)), "tai64ToUnixMilliseconds");
var _a4;
var DateTime = (_a4 = class extends Date {
  /**
   * Generates a new DateTime instance from a Tai64 timestamp.
   *
   * @param tai64 - Tai64 timestamp
   * @returns a new DateTime instance
   */
  static fromTai64(tai64) {
    return new _a4(tai64ToUnixMilliseconds(tai64));
  }
  /**
   * @param unixMilliseconds - unix milliseconds timestamp
   * @returns a new DateTime instance
   */
  static fromUnixMilliseconds(unixMilliseconds) {
    return new _a4(unixMilliseconds);
  }
  /**
   * @param unixSeconds - unix seconds timestamp
   * @returns a new DateTime instance
   */
  static fromUnixSeconds(unixSeconds) {
    return new _a4(secondsToMs(unixSeconds));
  }
  /**
   * Hide the constructor to prevent direct instantiation.
   */
  constructor(date) {
    super(date);
  }
  /**
   * Returns the Tai64 timestamp.
   *
   * @returns the Tai64 timestamp
   */
  toTai64() {
    return unixSecondsToTai64(this.toUnixSeconds());
  }
  /**
   * @returns the unix milliseconds timestamp
   */
  toUnixMilliseconds() {
    return this.getTime();
  }
  /**
   * @returns the unix seconds timestamp
   */
  toUnixSeconds() {
    return msToSeconds(this.getTime());
  }
}, __name4(_a4, "DateTime"), __publicField(_a4, "TAI64_NULL", ""), _a4);
function sleep(time2) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(true);
    }, time2);
  });
}
__name4(sleep, "sleep");
var chainConfig_default = {
  chain_name: "local_testnet",
  consensus_parameters: {
    V2: {
      tx_params: {
        V1: {
          max_inputs: 255,
          max_outputs: 255,
          max_witnesses: 255,
          max_gas_per_tx: 3e7,
          max_size: 112640,
          max_bytecode_subsections: 256
        }
      },
      predicate_params: {
        V1: {
          max_predicate_length: 24576,
          max_predicate_data_length: 24576,
          max_message_data_length: 102400,
          max_gas_per_predicate: 1e6
        }
      },
      script_params: {
        V1: {
          max_script_length: 102400,
          max_script_data_length: 102400
        }
      },
      contract_params: {
        V1: {
          contract_max_size: 112640,
          max_storage_slots: 1760
        }
      },
      fee_params: {
        V1: {
          gas_price_factor: 115e4,
          gas_per_byte: 63
        }
      },
      chain_id: 0,
      gas_costs: {
        V4: {
          add: 2,
          addi: 2,
          and: 2,
          andi: 2,
          bal: 274,
          bhei: 2,
          bhsh: 2,
          burn: 7566,
          cb: 2,
          cfsi: 2,
          div: 2,
          divi: 2,
          eck1: 1489,
          ecr1: 20513,
          eq: 2,
          exp: 2,
          expi: 2,
          flag: 2,
          gm: 2,
          gt: 2,
          gtf: 3,
          ji: 2,
          jmp: 2,
          jne: 2,
          jnei: 2,
          jnzi: 2,
          jmpf: 2,
          jmpb: 2,
          jnzf: 2,
          jnzb: 2,
          jnef: 2,
          jneb: 2,
          lb: 2,
          log: 80,
          lt: 2,
          lw: 2,
          mint: 6566,
          mlog: 2,
          mod: 2,
          modi: 2,
          move: 2,
          movi: 1,
          mroo: 3,
          mul: 2,
          muli: 2,
          mldv: 3,
          noop: 1,
          not: 2,
          or: 1,
          ori: 2,
          poph: 2,
          popl: 2,
          pshh: 5,
          pshl: 5,
          ret_contract: 43,
          rvrt_contract: 39,
          sb: 2,
          sll: 2,
          slli: 2,
          srl: 2,
          srli: 2,
          srw: 237,
          sub: 2,
          subi: 2,
          sw: 2,
          sww: 5708,
          time: 106,
          tr: 9253,
          tro: 7199,
          wdcm: 2,
          wqcm: 2,
          wdop: 2,
          wqop: 3,
          wdml: 3,
          wqml: 3,
          wddv: 3,
          wqdv: 4,
          wdmd: 6,
          wqmd: 9,
          wdam: 6,
          wqam: 6,
          wdmm: 6,
          wqmm: 6,
          xor: 2,
          xori: 2,
          ecop: 2,
          aloc: {
            LightOperation: {
              base: 2,
              units_per_gas: 35
            }
          },
          bsiz: {
            LightOperation: {
              base: 25,
              units_per_gas: 564
            }
          },
          bldd: {
            LightOperation: {
              base: 33,
              units_per_gas: 130
            }
          },
          cfe: {
            LightOperation: {
              base: 10,
              units_per_gas: 62
            }
          },
          cfei: {
            LightOperation: {
              base: 10,
              units_per_gas: 66
            }
          },
          call: {
            LightOperation: {
              base: 6934,
              units_per_gas: 14
            }
          },
          ccp: {
            LightOperation: {
              base: 21,
              units_per_gas: 155
            }
          },
          croo: {
            LightOperation: {
              base: 69,
              units_per_gas: 4
            }
          },
          csiz: {
            LightOperation: {
              base: 25,
              units_per_gas: 580
            }
          },
          ed19: {
            LightOperation: {
              base: 3232,
              units_per_gas: 7
            }
          },
          k256: {
            LightOperation: {
              base: 21,
              units_per_gas: 6
            }
          },
          ldc: {
            LightOperation: {
              base: 84,
              units_per_gas: 113
            }
          },
          logd: {
            LightOperation: {
              base: 278,
              units_per_gas: 5
            }
          },
          mcl: {
            LightOperation: {
              base: 2,
              units_per_gas: 1282
            }
          },
          mcli: {
            LightOperation: {
              base: 2,
              units_per_gas: 1250
            }
          },
          mcp: {
            LightOperation: {
              base: 3,
              units_per_gas: 385
            }
          },
          mcpi: {
            LightOperation: {
              base: 7,
              units_per_gas: 585
            }
          },
          meq: {
            LightOperation: {
              base: 2,
              units_per_gas: 1234
            }
          },
          retd_contract: {
            LightOperation: {
              base: 227,
              units_per_gas: 5
            }
          },
          s256: {
            LightOperation: {
              base: 25,
              units_per_gas: 5
            }
          },
          scwq: {
            HeavyOperation: {
              base: 5666,
              gas_per_unit: 6628
            }
          },
          smo: {
            LightOperation: {
              base: 14635,
              units_per_gas: 3
            }
          },
          srwq: {
            HeavyOperation: {
              base: 245,
              gas_per_unit: 243
            }
          },
          swwq: {
            HeavyOperation: {
              base: 5661,
              gas_per_unit: 5776
            }
          },
          epar: {
            HeavyOperation: {
              base: 5661,
              gas_per_unit: 5776
            }
          },
          contract_root: {
            LightOperation: {
              base: 24,
              units_per_gas: 3
            }
          },
          state_root: {
            HeavyOperation: {
              base: 189,
              gas_per_unit: 96
            }
          },
          new_storage_per_byte: 63,
          vm_initialization: {
            LightOperation: {
              base: 3127,
              units_per_gas: 61
            }
          }
        }
      },
      base_asset_id: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07",
      block_gas_limit: 3e7,
      block_transaction_size_limit: 260096,
      privileged_address: "0000000000000000000000000000000000000000000000000000000000000000"
    }
  },
  consensus: {
    PoA: {
      signing_key: "0x94ffcc53b892684acefaebc8a3d4a595e528a8cf664eeb3ef36f1020b0809d0d"
    }
  }
};
var metadata_default = {
  chain_config: "chainConfig.json",
  table_encoding: {
    Json: {
      filepath: "stateConfig.json"
    }
  }
};
var stateConfig_default = {
  coins: [],
  messages: [],
  contracts: [],
  blobs: [],
  block_height: 0,
  da_block_height: 0
};
var defaultSnapshotConfigs = {
  chainConfig: chainConfig_default,
  metadata: metadata_default,
  stateConfig: stateConfig_default
};
var defaultConsensusKey = "0xa449b1ffee0e2205fa924c6740cc48b3b473aa28587df6dab12abc245d1f5298";
function isDefined(value) {
  return value !== void 0;
}
__name4(isDefined, "isDefined");
var BN_0 = bn(0);
var BN_58 = bn(58);
var Alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var Lookup = null;
function getAlpha(letter) {
  if (Lookup == null) {
    Lookup = {};
    for (let i = 0; i < Alphabet.length; i++) {
      Lookup[Alphabet[i]] = bn(i);
    }
  }
  const result = Lookup[letter];
  if (result == null) {
    throw new FuelError(ErrorCode.INVALID_DATA, `invalid base58 value ${letter}`);
  }
  return bn(result);
}
__name4(getAlpha, "getAlpha");
function encodeBase58(_value) {
  const bytes = arrayify(_value);
  let value = bn(bytes);
  let result = "";
  while (value.gt(BN_0)) {
    result = Alphabet[Number(value.mod(BN_58))] + result;
    value = value.div(BN_58);
  }
  for (let i = 0; i < bytes.length; i++) {
    if (bytes[i]) {
      break;
    }
    result = Alphabet[0] + result;
  }
  return result;
}
__name4(encodeBase58, "encodeBase58");
function decodeBase58(value) {
  let result = BN_0;
  for (let i = 0; i < value.length; i++) {
    result = result.mul(BN_58);
    result = result.add(getAlpha(value[i].toString()));
  }
  return result;
}
__name4(decodeBase58, "decodeBase58");
function dataSlice(data, start, end) {
  const bytes = arrayify(data);
  if (end != null && end > bytes.length) {
    throw new FuelError(ErrorCode.INVALID_DATA, "cannot slice beyond data bounds");
  }
  return hexlify(bytes.slice(start == null ? 0 : start, end == null ? bytes.length : end));
}
__name4(dataSlice, "dataSlice");
function toUtf8Bytes(stri, form = true) {
  let str = stri;
  if (form) {
    str = stri.normalize("NFC");
  }
  const result = [];
  for (let i = 0; i < str.length; i += 1) {
    const c = str.charCodeAt(i);
    if (c < 128) {
      result.push(c);
    } else if (c < 2048) {
      result.push(c >> 6 | 192);
      result.push(c & 63 | 128);
    } else if ((c & 64512) === 55296) {
      i += 1;
      const c2 = str.charCodeAt(i);
      if (i >= str.length || (c2 & 64512) !== 56320) {
        throw new FuelError(
          ErrorCode.INVALID_INPUT_PARAMETERS,
          "Invalid UTF-8 in the input string."
        );
      }
      const pair3 = 65536 + ((c & 1023) << 10) + (c2 & 1023);
      result.push(pair3 >> 18 | 240);
      result.push(pair3 >> 12 & 63 | 128);
      result.push(pair3 >> 6 & 63 | 128);
      result.push(pair3 & 63 | 128);
    } else {
      result.push(c >> 12 | 224);
      result.push(c >> 6 & 63 | 128);
      result.push(c & 63 | 128);
    }
  }
  return new Uint8Array(result);
}
__name4(toUtf8Bytes, "toUtf8Bytes");
function onError(reason, offset, bytes, output, badCodepoint) {
  console.log(`invalid codepoint at offset ${offset}; ${reason}, bytes: ${bytes}`);
  return offset;
}
__name4(onError, "onError");
function helper(codePoints) {
  return codePoints.map((codePoint) => {
    if (codePoint <= 65535) {
      return String.fromCharCode(codePoint);
    }
    codePoint -= 65536;
    return String.fromCharCode(
      (codePoint >> 10 & 1023) + 55296,
      (codePoint & 1023) + 56320
    );
  }).join("");
}
__name4(helper, "helper");
function getUtf8CodePoints(_bytes) {
  const bytes = arrayify(_bytes, "bytes");
  const result = [];
  let i = 0;
  while (i < bytes.length) {
    const c = bytes[i++];
    if (c >> 7 === 0) {
      result.push(c);
      continue;
    }
    let extraLength = null;
    let overlongMask = null;
    if ((c & 224) === 192) {
      extraLength = 1;
      overlongMask = 127;
    } else if ((c & 240) === 224) {
      extraLength = 2;
      overlongMask = 2047;
    } else if ((c & 248) === 240) {
      extraLength = 3;
      overlongMask = 65535;
    } else {
      if ((c & 192) === 128) {
        i += onError("UNEXPECTED_CONTINUE", i - 1, bytes, result);
      } else {
        i += onError("BAD_PREFIX", i - 1, bytes, result);
      }
      continue;
    }
    if (i - 1 + extraLength >= bytes.length) {
      i += onError("OVERRUN", i - 1, bytes, result);
      continue;
    }
    let res = c & (1 << 8 - extraLength - 1) - 1;
    for (let j = 0; j < extraLength; j++) {
      const nextChar = bytes[i];
      if ((nextChar & 192) !== 128) {
        i += onError("MISSING_CONTINUE", i, bytes, result);
        res = null;
        break;
      }
      res = res << 6 | nextChar & 63;
      i++;
    }
    if (res === null) {
      continue;
    }
    if (res > 1114111) {
      i += onError("OUT_OF_RANGE", i - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res >= 55296 && res <= 57343) {
      i += onError("UTF16_SURROGATE", i - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res <= overlongMask) {
      i += onError("OVERLONG", i - 1 - extraLength, bytes, result, res);
      continue;
    }
    result.push(res);
  }
  return result;
}
__name4(getUtf8CodePoints, "getUtf8CodePoints");
function toUtf8String(bytes) {
  return helper(getUtf8CodePoints(bytes));
}
__name4(toUtf8String, "toUtf8String");
var compressBytecode = __name4((bytecodeAsBinary) => {
  if (!bytecodeAsBinary) {
    return "";
  }
  const bytecodeCompressBytes = arrayify(bytecodeAsBinary);
  const bytecodeCompressGzipped = gzipSync(bytecodeCompressBytes, { mtime: 0 });
  const bytecodeCompressBinary = String.fromCharCode.apply(
    null,
    new Uint8Array(bytecodeCompressGzipped)
  );
  const bytecodeCompressEncoded = btoa(bytecodeCompressBinary);
  return bytecodeCompressEncoded;
}, "compressBytecode");
var decompressBytecode = __name4((bytecodeAsBase64) => {
  const bytecodeDecompressBinary = atob(bytecodeAsBase64);
  const bytecodeDecompressDecoded = new Uint8Array(bytecodeDecompressBinary.length).map(
    (_, i) => bytecodeDecompressBinary.charCodeAt(i)
  );
  const bytecodeDecompressBytes = gunzipSync(bytecodeDecompressDecoded);
  return bytecodeDecompressBytes;
}, "decompressBytecode");
function assertUnreachable(_x) {
  throw new Error("Didn't expect to get here");
}
__name4(assertUnreachable, "assertUnreachable");

// node_modules/@fuel-ts/crypto/node_modules/@noble/hashes/esm/_assert.js
function anumber(n) {
  if (!Number.isSafeInteger(n) || n < 0)
    throw new Error("positive integer expected, got " + n);
}
function isBytes(a) {
  return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
}
function abytes(b, ...lengths) {
  if (!isBytes(b))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b.length);
}
function ahash(h) {
  if (typeof h !== "function" || typeof h.create !== "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  anumber(h.outputLen);
  anumber(h.blockLen);
}
function aexists(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function aoutput(out, instance) {
  abytes(out);
  const min3 = instance.outputLen;
  if (out.length < min3) {
    throw new Error("digestInto() expects output buffer of length at least " + min3);
  }
}

// node_modules/@fuel-ts/crypto/node_modules/@noble/hashes/esm/crypto.js
var crypto2 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;

// node_modules/@fuel-ts/crypto/node_modules/@noble/hashes/esm/utils.js
function u32(arr) {
  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
}
function createView(arr) {
  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
}
function rotr(word, shift) {
  return word << 32 - shift | word >>> shift;
}
function rotl(word, shift) {
  return word << shift | word >>> 32 - shift >>> 0;
}
var isLE = (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
function byteSwap(word) {
  return word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
}
function byteSwap32(arr) {
  for (let i = 0; i < arr.length; i++) {
    arr[i] = byteSwap(arr[i]);
  }
}
var hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
function utf8ToBytes(str) {
  if (typeof str !== "string")
    throw new Error("utf8ToBytes expected string, got " + typeof str);
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes2(data) {
  if (typeof data === "string")
    data = utf8ToBytes(data);
  abytes(data);
  return data;
}
var Hash = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function checkOpts(defaults, opts) {
  if (opts !== void 0 && {}.toString.call(opts) !== "[object Object]")
    throw new Error("Options should be object or undefined");
  const merged = Object.assign(defaults, opts);
  return merged;
}
function wrapConstructor(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function wrapXOFConstructorWithOpts(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}

// node_modules/@fuel-ts/crypto/node_modules/@noble/hashes/esm/hmac.js
var HMAC = class extends Hash {
  constructor(hash2, _key) {
    super();
    this.finished = false;
    this.destroyed = false;
    ahash(hash2);
    const key = toBytes2(_key);
    this.iHash = hash2.create();
    if (typeof this.iHash.update !== "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen;
    this.outputLen = this.iHash.outputLen;
    const blockLen = this.blockLen;
    const pad3 = new Uint8Array(blockLen);
    pad3.set(key.length > blockLen ? hash2.create().update(key).digest() : key);
    for (let i = 0; i < pad3.length; i++)
      pad3[i] ^= 54;
    this.iHash.update(pad3);
    this.oHash = hash2.create();
    for (let i = 0; i < pad3.length; i++)
      pad3[i] ^= 54 ^ 92;
    this.oHash.update(pad3);
    pad3.fill(0);
  }
  update(buf) {
    aexists(this);
    this.iHash.update(buf);
    return this;
  }
  digestInto(out) {
    aexists(this);
    abytes(out, this.outputLen);
    this.finished = true;
    this.iHash.digestInto(out);
    this.oHash.update(out);
    this.oHash.digestInto(out);
    this.destroy();
  }
  digest() {
    const out = new Uint8Array(this.oHash.outputLen);
    this.digestInto(out);
    return out;
  }
  _cloneInto(to) {
    to || (to = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
    to = to;
    to.finished = finished;
    to.destroyed = destroyed;
    to.blockLen = blockLen;
    to.outputLen = outputLen;
    to.oHash = oHash._cloneInto(to.oHash);
    to.iHash = iHash._cloneInto(to.iHash);
    return to;
  }
  destroy() {
    this.destroyed = true;
    this.oHash.destroy();
    this.iHash.destroy();
  }
};
var hmac = (hash2, key, message) => new HMAC(hash2, key).update(message).digest();
hmac.create = (hash2, key) => new HMAC(hash2, key);

// node_modules/@fuel-ts/crypto/node_modules/@noble/hashes/esm/pbkdf2.js
function pbkdf2Init(hash2, _password, _salt, _opts) {
  ahash(hash2);
  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);
  const { c, dkLen, asyncTick } = opts;
  anumber(c);
  anumber(dkLen);
  anumber(asyncTick);
  if (c < 1)
    throw new Error("PBKDF2: iterations (c) should be >= 1");
  const password = toBytes2(_password);
  const salt = toBytes2(_salt);
  const DK = new Uint8Array(dkLen);
  const PRF = hmac.create(hash2, password);
  const PRFSalt = PRF._cloneInto().update(salt);
  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
}
function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
  PRF.destroy();
  PRFSalt.destroy();
  if (prfW)
    prfW.destroy();
  u.fill(0);
  return DK;
}
function pbkdf2(hash2, password, salt, opts) {
  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash2, password, salt, opts);
  let prfW;
  const arr = new Uint8Array(4);
  const view3 = createView(arr);
  const u = new Uint8Array(PRF.outputLen);
  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
    const Ti = DK.subarray(pos, pos + PRF.outputLen);
    view3.setInt32(0, ti, false);
    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
    Ti.set(u.subarray(0, Ti.length));
    for (let ui = 1; ui < c; ui++) {
      PRF._cloneInto(prfW).update(u).digestInto(u);
      for (let i = 0; i < Ti.length; i++)
        Ti[i] ^= u[i];
    }
  }
  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}

// node_modules/@fuel-ts/crypto/node_modules/@noble/hashes/esm/_md.js
function setBigUint64(view3, byteOffset, value, isLE5) {
  if (typeof view3.setBigUint64 === "function")
    return view3.setBigUint64(byteOffset, value, isLE5);
  const _32n2 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n2 & _u32_max);
  const wl = Number(value & _u32_max);
  const h = isLE5 ? 4 : 0;
  const l = isLE5 ? 0 : 4;
  view3.setUint32(byteOffset + h, wh, isLE5);
  view3.setUint32(byteOffset + l, wl, isLE5);
}
function Chi(a, b, c) {
  return a & b ^ ~a & c;
}
function Maj(a, b, c) {
  return a & b ^ a & c ^ b & c;
}
var HashMD = class extends Hash {
  constructor(blockLen, outputLen, padOffset, isLE5) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE5;
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView(this.buffer);
  }
  update(data) {
    aexists(this);
    const { view: view3, buffer, blockLen } = this;
    data = toBytes2(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take3 = Math.min(blockLen - this.pos, len - pos);
      if (take3 === blockLen) {
        const dataView = createView(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer.set(data.subarray(pos, pos + take3), this.pos);
      this.pos += take3;
      pos += take3;
      if (this.pos === blockLen) {
        this.process(view3, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    aexists(this);
    aoutput(out, this);
    this.finished = true;
    const { buffer, view: view3, blockLen, isLE: isLE5 } = this;
    let { pos } = this;
    buffer[pos++] = 128;
    this.buffer.subarray(pos).fill(0);
    if (this.padOffset > blockLen - pos) {
      this.process(view3, 0);
      pos = 0;
    }
    for (let i = pos; i < blockLen; i++)
      buffer[i] = 0;
    setBigUint64(view3, blockLen - 8, BigInt(this.length * 8), isLE5);
    this.process(view3, 0);
    const oview = createView(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state = this.get();
    if (outLen > state.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i = 0; i < outLen; i++)
      oview.setUint32(4 * i, state[i], isLE5);
  }
  digest() {
    const { buffer, outputLen } = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    to || (to = new this.constructor());
    to.set(...this.get());
    const { blockLen, buffer, length: length3, finished, destroyed, pos } = this;
    to.length = length3;
    to.pos = pos;
    to.finished = finished;
    to.destroyed = destroyed;
    if (length3 % blockLen)
      to.buffer.set(buffer);
    return to;
  }
};

// node_modules/@fuel-ts/crypto/node_modules/@noble/hashes/esm/sha256.js
var SHA256_K = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var SHA256_IV = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
var SHA256_W = new Uint32Array(64);
var SHA256 = class extends HashMD {
  constructor() {
    super(64, 32, 8, false);
    this.A = SHA256_IV[0] | 0;
    this.B = SHA256_IV[1] | 0;
    this.C = SHA256_IV[2] | 0;
    this.D = SHA256_IV[3] | 0;
    this.E = SHA256_IV[4] | 0;
    this.F = SHA256_IV[5] | 0;
    this.G = SHA256_IV[6] | 0;
    this.H = SHA256_IV[7] | 0;
  }
  get() {
    const { A, B, C, D, E, F, G, H } = this;
    return [A, B, C, D, E, F, G, H];
  }
  // prettier-ignore
  set(A, B, C, D, E, F, G, H) {
    this.A = A | 0;
    this.B = B | 0;
    this.C = C | 0;
    this.D = D | 0;
    this.E = E | 0;
    this.F = F | 0;
    this.G = G | 0;
    this.H = H | 0;
  }
  process(view3, offset) {
    for (let i = 0; i < 16; i++, offset += 4)
      SHA256_W[i] = view3.getUint32(offset, false);
    for (let i = 16; i < 64; i++) {
      const W15 = SHA256_W[i - 15];
      const W2 = SHA256_W[i - 2];
      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
      SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
    }
    let { A, B, C, D, E, F, G, H } = this;
    for (let i = 0; i < 64; i++) {
      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
      const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
      const T2 = sigma0 + Maj(A, B, C) | 0;
      H = G;
      G = F;
      F = E;
      E = D + T1 | 0;
      D = C;
      C = B;
      B = A;
      A = T1 + T2 | 0;
    }
    A = A + this.A | 0;
    B = B + this.B | 0;
    C = C + this.C | 0;
    D = D + this.D | 0;
    E = E + this.E | 0;
    F = F + this.F | 0;
    G = G + this.G | 0;
    H = H + this.H | 0;
    this.set(A, B, C, D, E, F, G, H);
  }
  roundClean() {
    SHA256_W.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    this.buffer.fill(0);
  }
};
var SHA224 = class extends SHA256 {
  constructor() {
    super();
    this.A = 3238371032 | 0;
    this.B = 914150663 | 0;
    this.C = 812702999 | 0;
    this.D = 4144912697 | 0;
    this.E = 4290775857 | 0;
    this.F = 1750603025 | 0;
    this.G = 1694076839 | 0;
    this.H = 3204075428 | 0;
    this.outputLen = 28;
  }
};
var sha256 = wrapConstructor(() => new SHA256());
var sha224 = wrapConstructor(() => new SHA224());

// node_modules/@fuel-ts/crypto/node_modules/@noble/hashes/esm/scrypt.js
function XorAndSalsa(prev, pi, input, ii, out, oi) {
  let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
  let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
  let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
  let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
  let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
  let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
  let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
  let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
  let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
  for (let i = 0; i < 8; i += 2) {
    x04 ^= rotl(x00 + x12 | 0, 7);
    x08 ^= rotl(x04 + x00 | 0, 9);
    x12 ^= rotl(x08 + x04 | 0, 13);
    x00 ^= rotl(x12 + x08 | 0, 18);
    x09 ^= rotl(x05 + x01 | 0, 7);
    x13 ^= rotl(x09 + x05 | 0, 9);
    x01 ^= rotl(x13 + x09 | 0, 13);
    x05 ^= rotl(x01 + x13 | 0, 18);
    x14 ^= rotl(x10 + x06 | 0, 7);
    x02 ^= rotl(x14 + x10 | 0, 9);
    x06 ^= rotl(x02 + x14 | 0, 13);
    x10 ^= rotl(x06 + x02 | 0, 18);
    x03 ^= rotl(x15 + x11 | 0, 7);
    x07 ^= rotl(x03 + x15 | 0, 9);
    x11 ^= rotl(x07 + x03 | 0, 13);
    x15 ^= rotl(x11 + x07 | 0, 18);
    x01 ^= rotl(x00 + x03 | 0, 7);
    x02 ^= rotl(x01 + x00 | 0, 9);
    x03 ^= rotl(x02 + x01 | 0, 13);
    x00 ^= rotl(x03 + x02 | 0, 18);
    x06 ^= rotl(x05 + x04 | 0, 7);
    x07 ^= rotl(x06 + x05 | 0, 9);
    x04 ^= rotl(x07 + x06 | 0, 13);
    x05 ^= rotl(x04 + x07 | 0, 18);
    x11 ^= rotl(x10 + x09 | 0, 7);
    x08 ^= rotl(x11 + x10 | 0, 9);
    x09 ^= rotl(x08 + x11 | 0, 13);
    x10 ^= rotl(x09 + x08 | 0, 18);
    x12 ^= rotl(x15 + x14 | 0, 7);
    x13 ^= rotl(x12 + x15 | 0, 9);
    x14 ^= rotl(x13 + x12 | 0, 13);
    x15 ^= rotl(x14 + x13 | 0, 18);
  }
  out[oi++] = y00 + x00 | 0;
  out[oi++] = y01 + x01 | 0;
  out[oi++] = y02 + x02 | 0;
  out[oi++] = y03 + x03 | 0;
  out[oi++] = y04 + x04 | 0;
  out[oi++] = y05 + x05 | 0;
  out[oi++] = y06 + x06 | 0;
  out[oi++] = y07 + x07 | 0;
  out[oi++] = y08 + x08 | 0;
  out[oi++] = y09 + x09 | 0;
  out[oi++] = y10 + x10 | 0;
  out[oi++] = y11 + x11 | 0;
  out[oi++] = y12 + x12 | 0;
  out[oi++] = y13 + x13 | 0;
  out[oi++] = y14 + x14 | 0;
  out[oi++] = y15 + x15 | 0;
}
function BlockMix(input, ii, out, oi, r) {
  let head2 = oi + 0;
  let tail2 = oi + 16 * r;
  for (let i = 0; i < 16; i++)
    out[tail2 + i] = input[ii + (2 * r - 1) * 16 + i];
  for (let i = 0; i < r; i++, head2 += 16, ii += 16) {
    XorAndSalsa(out, tail2, input, ii, out, head2);
    if (i > 0)
      tail2 += 16;
    XorAndSalsa(out, head2, input, ii += 16, out, tail2);
  }
}
function scryptInit(password, salt, _opts) {
  const opts = checkOpts({
    dkLen: 32,
    asyncTick: 10,
    maxmem: 1024 ** 3 + 1024
  }, _opts);
  const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
  anumber(N);
  anumber(r);
  anumber(p);
  anumber(dkLen);
  anumber(asyncTick);
  anumber(maxmem);
  if (onProgress !== void 0 && typeof onProgress !== "function")
    throw new Error("progressCb should be function");
  const blockSize = 128 * r;
  const blockSize32 = blockSize / 4;
  if (N <= 1 || (N & N - 1) !== 0 || N > 2 ** 32) {
    throw new Error("Scrypt: N must be larger than 1, a power of 2, and less than 2^32");
  }
  if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {
    throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
  }
  if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
    throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
  }
  const memUsed = blockSize * (N + p);
  if (memUsed > maxmem) {
    throw new Error("Scrypt: memused is bigger than maxMem. Expected 128 * r * (N + p) > maxmem of " + maxmem);
  }
  const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });
  const B32 = u32(B);
  const V = u32(new Uint8Array(blockSize * N));
  const tmp = u32(new Uint8Array(blockSize));
  let blockMixCb = () => {
  };
  if (onProgress) {
    const totalBlockMix = 2 * N * p;
    const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
    let blockMixCnt = 0;
    blockMixCb = () => {
      blockMixCnt++;
      if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
        onProgress(blockMixCnt / totalBlockMix);
    };
  }
  return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
}
function scryptOutput(password, dkLen, B, V, tmp) {
  const res = pbkdf2(sha256, password, B, { c: 1, dkLen });
  B.fill(0);
  V.fill(0);
  tmp.fill(0);
  return res;
}
function scrypt(password, salt, opts) {
  const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
  if (!isLE)
    byteSwap32(B32);
  for (let pi = 0; pi < p; pi++) {
    const Pi2 = blockSize32 * pi;
    for (let i = 0; i < blockSize32; i++)
      V[i] = B32[Pi2 + i];
    for (let i = 0, pos = 0; i < N - 1; i++) {
      BlockMix(V, pos, V, pos += blockSize32, r);
      blockMixCb();
    }
    BlockMix(V, (N - 1) * blockSize32, B32, Pi2, r);
    blockMixCb();
    for (let i = 0; i < N; i++) {
      const j = B32[Pi2 + blockSize32 - 16] % N;
      for (let k = 0; k < blockSize32; k++)
        tmp[k] = B32[Pi2 + k] ^ V[j * blockSize32 + k];
      BlockMix(tmp, 0, B32, Pi2, r);
      blockMixCb();
    }
  }
  if (!isLE)
    byteSwap32(B32);
  return scryptOutput(password, dkLen, B, V, tmp);
}

// node_modules/@fuel-ts/crypto/node_modules/@noble/hashes/esm/_u64.js
var U32_MASK64 = BigInt(2 ** 32 - 1);
var _32n = BigInt(32);
function fromBig(n, le = false) {
  if (le)
    return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
  return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
}
function split(lst, le = false) {
  let Ah = new Uint32Array(lst.length);
  let Al = new Uint32Array(lst.length);
  for (let i = 0; i < lst.length; i++) {
    const { h, l } = fromBig(lst[i], le);
    [Ah[i], Al[i]] = [h, l];
  }
  return [Ah, Al];
}
var toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
var shrSH = (h, _l, s) => h >>> s;
var shrSL = (h, l, s) => h << 32 - s | l >>> s;
var rotrSH = (h, l, s) => h >>> s | l << 32 - s;
var rotrSL = (h, l, s) => h << 32 - s | l >>> s;
var rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
var rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
var rotr32H = (_h, l) => l;
var rotr32L = (h, _l) => h;
var rotlSH = (h, l, s) => h << s | l >>> 32 - s;
var rotlSL = (h, l, s) => l << s | h >>> 32 - s;
var rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
var rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;
function add(Ah, Al, Bh, Bl) {
  const l = (Al >>> 0) + (Bl >>> 0);
  return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
}
var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
var u64 = {
  fromBig,
  split,
  toBig,
  shrSH,
  shrSL,
  rotrSH,
  rotrSL,
  rotrBH,
  rotrBL,
  rotr32H,
  rotr32L,
  rotlSH,
  rotlSL,
  rotlBH,
  rotlBL,
  add,
  add3L,
  add3H,
  add4L,
  add4H,
  add5H,
  add5L
};
var u64_default = u64;

// node_modules/@fuel-ts/crypto/node_modules/@noble/hashes/esm/sha3.js
var SHA3_PI = [];
var SHA3_ROTL = [];
var _SHA3_IOTA = [];
var _0n = BigInt(0);
var _1n = BigInt(1);
var _2n = BigInt(2);
var _7n = BigInt(7);
var _256n = BigInt(256);
var _0x71n = BigInt(113);
for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
  [x, y] = [y, (2 * x + 3 * y) % 5];
  SHA3_PI.push(2 * (5 * y + x));
  SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
  let t = _0n;
  for (let j = 0; j < 7; j++) {
    R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
    if (R & _2n)
      t ^= _1n << (_1n << BigInt(j)) - _1n;
  }
  _SHA3_IOTA.push(t);
}
var [SHA3_IOTA_H, SHA3_IOTA_L] = split(_SHA3_IOTA, true);
var rotlH = (h, l, s) => s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s);
var rotlL = (h, l, s) => s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s);
function keccakP(s, rounds = 24) {
  const B = new Uint32Array(5 * 2);
  for (let round = 24 - rounds; round < 24; round++) {
    for (let x = 0; x < 10; x++)
      B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
    for (let x = 0; x < 10; x += 2) {
      const idx1 = (x + 8) % 10;
      const idx0 = (x + 2) % 10;
      const B0 = B[idx0];
      const B1 = B[idx0 + 1];
      const Th = rotlH(B0, B1, 1) ^ B[idx1];
      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
      for (let y = 0; y < 50; y += 10) {
        s[x + y] ^= Th;
        s[x + y + 1] ^= Tl;
      }
    }
    let curH = s[2];
    let curL = s[3];
    for (let t = 0; t < 24; t++) {
      const shift = SHA3_ROTL[t];
      const Th = rotlH(curH, curL, shift);
      const Tl = rotlL(curH, curL, shift);
      const PI = SHA3_PI[t];
      curH = s[PI];
      curL = s[PI + 1];
      s[PI] = Th;
      s[PI + 1] = Tl;
    }
    for (let y = 0; y < 50; y += 10) {
      for (let x = 0; x < 10; x++)
        B[x] = s[y + x];
      for (let x = 0; x < 10; x++)
        s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
    }
    s[0] ^= SHA3_IOTA_H[round];
    s[1] ^= SHA3_IOTA_L[round];
  }
  B.fill(0);
}
var Keccak = class _Keccak extends Hash {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
    super();
    this.blockLen = blockLen;
    this.suffix = suffix;
    this.outputLen = outputLen;
    this.enableXOF = enableXOF;
    this.rounds = rounds;
    this.pos = 0;
    this.posOut = 0;
    this.finished = false;
    this.destroyed = false;
    anumber(outputLen);
    if (0 >= this.blockLen || this.blockLen >= 200)
      throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200);
    this.state32 = u32(this.state);
  }
  keccak() {
    if (!isLE)
      byteSwap32(this.state32);
    keccakP(this.state32, this.rounds);
    if (!isLE)
      byteSwap32(this.state32);
    this.posOut = 0;
    this.pos = 0;
  }
  update(data) {
    aexists(this);
    const { blockLen, state } = this;
    data = toBytes2(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take3 = Math.min(blockLen - this.pos, len - pos);
      for (let i = 0; i < take3; i++)
        state[this.pos++] ^= data[pos++];
      if (this.pos === blockLen)
        this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state, suffix, pos, blockLen } = this;
    state[pos] ^= suffix;
    if ((suffix & 128) !== 0 && pos === blockLen - 1)
      this.keccak();
    state[blockLen - 1] ^= 128;
    this.keccak();
  }
  writeInto(out) {
    aexists(this, false);
    abytes(out);
    this.finish();
    const bufferOut = this.state;
    const { blockLen } = this;
    for (let pos = 0, len = out.length; pos < len; ) {
      if (this.posOut >= blockLen)
        this.keccak();
      const take3 = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take3), pos);
      this.posOut += take3;
      pos += take3;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(out);
  }
  xof(bytes) {
    anumber(bytes);
    return this.xofInto(new Uint8Array(bytes));
  }
  digestInto(out) {
    aoutput(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true;
    this.state.fill(0);
  }
  _cloneInto(to) {
    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
    to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
    to.state32.set(this.state32);
    to.pos = this.pos;
    to.posOut = this.posOut;
    to.finished = this.finished;
    to.rounds = rounds;
    to.suffix = suffix;
    to.outputLen = outputLen;
    to.enableXOF = enableXOF;
    to.destroyed = this.destroyed;
    return to;
  }
};
var gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
var sha3_224 = gen(6, 144, 224 / 8);
var sha3_256 = gen(6, 136, 256 / 8);
var sha3_384 = gen(6, 104, 384 / 8);
var sha3_512 = gen(6, 72, 512 / 8);
var keccak_224 = gen(1, 144, 224 / 8);
var keccak_256 = gen(1, 136, 256 / 8);
var keccak_384 = gen(1, 104, 384 / 8);
var keccak_512 = gen(1, 72, 512 / 8);
var genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
var shake128 = genShake(31, 168, 128 / 8);
var shake256 = genShake(31, 136, 256 / 8);

// node_modules/@fuel-ts/crypto/node_modules/@noble/hashes/esm/ripemd160.js
var Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
var Id = new Uint8Array(new Array(16).fill(0).map((_, i) => i));
var Pi = Id.map((i) => (9 * i + 5) % 16);
var idxL = [Id];
var idxR = [Pi];
for (let i = 0; i < 4; i++)
  for (let j of [idxL, idxR])
    j.push(j[i].map((k) => Rho[k]));
var shifts = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i) => new Uint8Array(i));
var shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));
var shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));
var Kl = new Uint32Array([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr = new Uint32Array([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function f(group, x, y, z) {
  if (group === 0)
    return x ^ y ^ z;
  else if (group === 1)
    return x & y | ~x & z;
  else if (group === 2)
    return (x | ~y) ^ z;
  else if (group === 3)
    return x & z | y & ~z;
  else
    return x ^ (y | ~z);
}
var R_BUF = new Uint32Array(16);
var RIPEMD160 = class extends HashMD {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2, h3, h4 } = this;
    return [h0, h1, h2, h3, h4];
  }
  set(h0, h1, h2, h3, h4) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h2 | 0;
    this.h3 = h3 | 0;
    this.h4 = h4 | 0;
  }
  process(view3, offset) {
    for (let i = 0; i < 16; i++, offset += 4)
      R_BUF[i] = view3.getUint32(offset, true);
    let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl[group], hbr = Kr[group];
      const rl = idxL[group], rr = idxR[group];
      const sl = shiftsL[group], sr = shiftsR[group];
      for (let i = 0; i < 16; i++) {
        const tl = rotl(al + f(group, bl, cl, dl) + R_BUF[rl[i]] + hbl, sl[i]) + el | 0;
        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i = 0; i < 16; i++) {
        const tr2 = rotl(ar + f(rGroup, br, cr, dr) + R_BUF[rr[i]] + hbr, sr[i]) + er | 0;
        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr2;
      }
    }
    this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
  }
  roundClean() {
    R_BUF.fill(0);
  }
  destroy() {
    this.destroyed = true;
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd160 = wrapConstructor(() => new RIPEMD160());

// node_modules/@fuel-ts/crypto/node_modules/@noble/hashes/esm/sha512.js
var [SHA512_Kh, SHA512_Kl] = (() => u64_default.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((n) => BigInt(n))))();
var SHA512_W_H = new Uint32Array(80);
var SHA512_W_L = new Uint32Array(80);
var SHA512 = class extends HashMD {
  constructor() {
    super(128, 64, 16, false);
    this.Ah = 1779033703 | 0;
    this.Al = 4089235720 | 0;
    this.Bh = 3144134277 | 0;
    this.Bl = 2227873595 | 0;
    this.Ch = 1013904242 | 0;
    this.Cl = 4271175723 | 0;
    this.Dh = 2773480762 | 0;
    this.Dl = 1595750129 | 0;
    this.Eh = 1359893119 | 0;
    this.El = 2917565137 | 0;
    this.Fh = 2600822924 | 0;
    this.Fl = 725511199 | 0;
    this.Gh = 528734635 | 0;
    this.Gl = 4215389547 | 0;
    this.Hh = 1541459225 | 0;
    this.Hl = 327033209 | 0;
  }
  // prettier-ignore
  get() {
    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
  }
  // prettier-ignore
  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
    this.Ah = Ah | 0;
    this.Al = Al | 0;
    this.Bh = Bh | 0;
    this.Bl = Bl | 0;
    this.Ch = Ch | 0;
    this.Cl = Cl | 0;
    this.Dh = Dh | 0;
    this.Dl = Dl | 0;
    this.Eh = Eh | 0;
    this.El = El | 0;
    this.Fh = Fh | 0;
    this.Fl = Fl | 0;
    this.Gh = Gh | 0;
    this.Gl = Gl | 0;
    this.Hh = Hh | 0;
    this.Hl = Hl | 0;
  }
  process(view3, offset) {
    for (let i = 0; i < 16; i++, offset += 4) {
      SHA512_W_H[i] = view3.getUint32(offset);
      SHA512_W_L[i] = view3.getUint32(offset += 4);
    }
    for (let i = 16; i < 80; i++) {
      const W15h = SHA512_W_H[i - 15] | 0;
      const W15l = SHA512_W_L[i - 15] | 0;
      const s0h = u64_default.rotrSH(W15h, W15l, 1) ^ u64_default.rotrSH(W15h, W15l, 8) ^ u64_default.shrSH(W15h, W15l, 7);
      const s0l = u64_default.rotrSL(W15h, W15l, 1) ^ u64_default.rotrSL(W15h, W15l, 8) ^ u64_default.shrSL(W15h, W15l, 7);
      const W2h = SHA512_W_H[i - 2] | 0;
      const W2l = SHA512_W_L[i - 2] | 0;
      const s1h = u64_default.rotrSH(W2h, W2l, 19) ^ u64_default.rotrBH(W2h, W2l, 61) ^ u64_default.shrSH(W2h, W2l, 6);
      const s1l = u64_default.rotrSL(W2h, W2l, 19) ^ u64_default.rotrBL(W2h, W2l, 61) ^ u64_default.shrSL(W2h, W2l, 6);
      const SUMl = u64_default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
      const SUMh = u64_default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
      SHA512_W_H[i] = SUMh | 0;
      SHA512_W_L[i] = SUMl | 0;
    }
    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    for (let i = 0; i < 80; i++) {
      const sigma1h = u64_default.rotrSH(Eh, El, 14) ^ u64_default.rotrSH(Eh, El, 18) ^ u64_default.rotrBH(Eh, El, 41);
      const sigma1l = u64_default.rotrSL(Eh, El, 14) ^ u64_default.rotrSL(Eh, El, 18) ^ u64_default.rotrBL(Eh, El, 41);
      const CHIh = Eh & Fh ^ ~Eh & Gh;
      const CHIl = El & Fl ^ ~El & Gl;
      const T1ll = u64_default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
      const T1h = u64_default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
      const T1l = T1ll | 0;
      const sigma0h = u64_default.rotrSH(Ah, Al, 28) ^ u64_default.rotrBH(Ah, Al, 34) ^ u64_default.rotrBH(Ah, Al, 39);
      const sigma0l = u64_default.rotrSL(Ah, Al, 28) ^ u64_default.rotrBL(Ah, Al, 34) ^ u64_default.rotrBL(Ah, Al, 39);
      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
      Hh = Gh | 0;
      Hl = Gl | 0;
      Gh = Fh | 0;
      Gl = Fl | 0;
      Fh = Eh | 0;
      Fl = El | 0;
      ({ h: Eh, l: El } = u64_default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
      Dh = Ch | 0;
      Dl = Cl | 0;
      Ch = Bh | 0;
      Cl = Bl | 0;
      Bh = Ah | 0;
      Bl = Al | 0;
      const All = u64_default.add3L(T1l, sigma0l, MAJl);
      Ah = u64_default.add3H(All, T1h, sigma0h, MAJh);
      Al = All | 0;
    }
    ({ h: Ah, l: Al } = u64_default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
    ({ h: Bh, l: Bl } = u64_default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
    ({ h: Ch, l: Cl } = u64_default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
    ({ h: Dh, l: Dl } = u64_default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
    ({ h: Eh, l: El } = u64_default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
    ({ h: Fh, l: Fl } = u64_default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
    ({ h: Gh, l: Gl } = u64_default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
    ({ h: Hh, l: Hl } = u64_default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
  }
  roundClean() {
    SHA512_W_H.fill(0);
    SHA512_W_L.fill(0);
  }
  destroy() {
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var SHA512_224 = class extends SHA512 {
  constructor() {
    super();
    this.Ah = 2352822216 | 0;
    this.Al = 424955298 | 0;
    this.Bh = 1944164710 | 0;
    this.Bl = 2312950998 | 0;
    this.Ch = 502970286 | 0;
    this.Cl = 855612546 | 0;
    this.Dh = 1738396948 | 0;
    this.Dl = 1479516111 | 0;
    this.Eh = 258812777 | 0;
    this.El = 2077511080 | 0;
    this.Fh = 2011393907 | 0;
    this.Fl = 79989058 | 0;
    this.Gh = 1067287976 | 0;
    this.Gl = 1780299464 | 0;
    this.Hh = 286451373 | 0;
    this.Hl = 2446758561 | 0;
    this.outputLen = 28;
  }
};
var SHA512_256 = class extends SHA512 {
  constructor() {
    super();
    this.Ah = 573645204 | 0;
    this.Al = 4230739756 | 0;
    this.Bh = 2673172387 | 0;
    this.Bl = 3360449730 | 0;
    this.Ch = 596883563 | 0;
    this.Cl = 1867755857 | 0;
    this.Dh = 2520282905 | 0;
    this.Dl = 1497426621 | 0;
    this.Eh = 2519219938 | 0;
    this.El = 2827943907 | 0;
    this.Fh = 3193839141 | 0;
    this.Fl = 1401305490 | 0;
    this.Gh = 721525244 | 0;
    this.Gl = 746961066 | 0;
    this.Hh = 246885852 | 0;
    this.Hl = 2177182882 | 0;
    this.outputLen = 32;
  }
};
var SHA384 = class extends SHA512 {
  constructor() {
    super();
    this.Ah = 3418070365 | 0;
    this.Al = 3238371032 | 0;
    this.Bh = 1654270250 | 0;
    this.Bl = 914150663 | 0;
    this.Ch = 2438529370 | 0;
    this.Cl = 812702999 | 0;
    this.Dh = 355462360 | 0;
    this.Dl = 4144912697 | 0;
    this.Eh = 1731405415 | 0;
    this.El = 4290775857 | 0;
    this.Fh = 2394180231 | 0;
    this.Fl = 1750603025 | 0;
    this.Gh = 3675008525 | 0;
    this.Gl = 1694076839 | 0;
    this.Hh = 1203062813 | 0;
    this.Hl = 3204075428 | 0;
    this.outputLen = 48;
  }
};
var sha512 = wrapConstructor(() => new SHA512());
var sha512_224 = wrapConstructor(() => new SHA512_224());
var sha512_256 = wrapConstructor(() => new SHA512_256());
var sha384 = wrapConstructor(() => new SHA384());

// node_modules/@fuel-ts/crypto/dist/index.browser.mjs
var __defProp5 = Object.defineProperty;
var __name5 = (target, value) => __defProp5(target, "name", { value, configurable: true });
var scrypt2 = __name5((params) => {
  const { password, salt, n, p, r, dklen } = params;
  const derivedKey = scrypt(password, salt, { N: n, r, p, dkLen: dklen });
  return derivedKey;
}, "scrypt");
var keccak256 = __name5((data) => keccak_256(data), "keccak256");
function ripemd1602(_data) {
  const data = arrayify(_data, "data");
  return ripemd160(data);
}
__name5(ripemd1602, "ripemd160");
var bufferFromString = __name5((string, encoding = "base64") => {
  switch (encoding) {
    case "utf-8": {
      return new TextEncoder().encode(string);
    }
    case "base64": {
      const binaryString = atob(string);
      const len = binaryString.length;
      const bytes = new Uint8Array(len).map((_, i) => binaryString.charCodeAt(i));
      return bytes;
    }
    case "hex":
    default: {
      const bufferLength = string.length / 2;
      const buffer = new Uint8Array(bufferLength).map((_, i) => {
        const startIndex = i * 2;
        const byteValue = parseInt(string.substring(startIndex, startIndex + 2), 16);
        return byteValue;
      });
      return buffer;
    }
  }
}, "bufferFromString");
var pbkdf22 = __name5((password, salt, iterations, keylen, algo) => {
  const algorithm = { sha256, sha512 }[algo];
  return hexlify(pbkdf2(algorithm, password, salt, { c: iterations, dkLen: keylen }));
}, "pbkdf2");
var { crypto: crypto22, btoa: btoa2 } = globalThis;
if (!crypto22) {
  throw new FuelError(
    ErrorCode.ENV_DEPENDENCY_MISSING,
    `Could not find 'crypto' in current browser environment.`
  );
}
if (!btoa2) {
  throw new FuelError(
    ErrorCode.ENV_DEPENDENCY_MISSING,
    `Could not find 'btoa' in current browser environment.`
  );
}
var randomBytes = __name5((length3) => {
  const randomValues = crypto22.getRandomValues(new Uint8Array(length3));
  return randomValues;
}, "randomBytes");
var stringFromBuffer = __name5((buffer, encoding = "base64") => {
  switch (encoding) {
    case "utf-8": {
      return new TextDecoder().decode(buffer);
    }
    case "base64": {
      const binary3 = String.fromCharCode.apply(null, new Uint8Array(buffer));
      return btoa2(binary3);
    }
    case "hex":
    default: {
      let hexString = "";
      for (let i = 0; i < buffer.length; i += 1) {
        const hex = buffer[i].toString(16);
        hexString += hex.length === 1 ? `0${hex}` : hex;
      }
      return hexString;
    }
  }
}, "stringFromBuffer");
var ALGORITHM = "AES-CTR";
var keyFromPassword = __name5((password, saltBuffer) => {
  const passBuffer = bufferFromString(String(password).normalize("NFKC"), "utf-8");
  const key = pbkdf22(passBuffer, saltBuffer, 1e5, 32, "sha256");
  return arrayify(key);
}, "keyFromPassword");
var encrypt = __name5(async (password, data) => {
  const iv = randomBytes(16);
  const salt = randomBytes(32);
  const secret = keyFromPassword(password, salt);
  const dataString = JSON.stringify(data);
  const dataBuffer = bufferFromString(dataString, "utf-8");
  const alg = {
    name: ALGORITHM,
    counter: iv,
    length: 64
  };
  const key = await crypto.subtle.importKey("raw", secret, alg, false, ["encrypt"]);
  const encBuffer = await crypto.subtle.encrypt(alg, key, dataBuffer);
  return {
    data: stringFromBuffer(new Uint8Array(encBuffer)),
    iv: stringFromBuffer(iv),
    salt: stringFromBuffer(salt)
  };
}, "encrypt");
var decrypt = __name5(async (password, keystore) => {
  const iv = bufferFromString(keystore.iv);
  const salt = bufferFromString(keystore.salt);
  const secret = keyFromPassword(password, salt);
  const encryptedText = bufferFromString(keystore.data);
  const alg = {
    name: ALGORITHM,
    counter: iv,
    length: 64
  };
  const key = await crypto.subtle.importKey("raw", secret, alg, false, ["decrypt"]);
  const ptBuffer = await crypto.subtle.decrypt(alg, key, encryptedText);
  const decryptedData = new TextDecoder().decode(ptBuffer);
  try {
    return JSON.parse(decryptedData);
  } catch {
    throw new FuelError(ErrorCode.INVALID_CREDENTIALS, "Invalid credentials.");
  }
}, "decrypt");
var encryptJsonWalletData = __name5(async (data, key, iv) => {
  const subtle = crypto22.subtle;
  const keyBuffer = new Uint8Array(key.subarray(0, 16));
  const ivBuffer = iv;
  const dataBuffer = data;
  const cryptoKey = await subtle.importKey(
    "raw",
    keyBuffer,
    { name: "AES-CTR", length: 128 },
    false,
    ["encrypt", "decrypt"]
  );
  const encrypted = await subtle.encrypt(
    { name: "AES-CTR", counter: ivBuffer, length: 128 },
    cryptoKey,
    dataBuffer
  );
  return new Uint8Array(encrypted);
}, "encryptJsonWalletData");
var decryptJsonWalletData = __name5(async (data, key, iv) => {
  const subtle = crypto22.subtle;
  const keyBuffer = new Uint8Array(key.subarray(0, 16)).buffer;
  const ivBuffer = new Uint8Array(iv).buffer;
  const dataBuffer = new Uint8Array(data).buffer;
  const cryptoKey = await subtle.importKey(
    "raw",
    keyBuffer,
    { name: "AES-CTR", length: 128 },
    false,
    ["encrypt", "decrypt"]
  );
  const decrypted = await subtle.decrypt(
    { name: "AES-CTR", counter: ivBuffer, length: 128 },
    cryptoKey,
    dataBuffer
  );
  return new Uint8Array(decrypted);
}, "decryptJsonWalletData");
var computeHmac = __name5((algorithm, key, data) => {
  const hash2 = algorithm === "sha256" ? sha256 : sha512;
  const signature = hmac.create(hash2, key).update(data).digest();
  return hexlify(signature);
}, "computeHmac");
var randomUUID = __name5(() => crypto22.randomUUID(), "randomUUID");
var api = {
  bufferFromString,
  stringFromBuffer,
  decrypt,
  encrypt,
  keyFromPassword,
  randomBytes,
  scrypt: scrypt2,
  keccak256,
  decryptJsonWalletData,
  encryptJsonWalletData,
  computeHmac,
  pbkdf2: pbkdf22,
  ripemd160: ripemd1602,
  randomUUID
};
var browser_default = api;
var {
  bufferFromString: bufferFromString2,
  decrypt: decrypt2,
  encrypt: encrypt2,
  keyFromPassword: keyFromPassword2,
  randomBytes: randomBytes2,
  stringFromBuffer: stringFromBuffer2,
  scrypt: scrypt22,
  keccak256: keccak2562,
  decryptJsonWalletData: decryptJsonWalletData2,
  encryptJsonWalletData: encryptJsonWalletData2,
  pbkdf2: pbkdf222,
  computeHmac: computeHmac2,
  ripemd160: ripemd16022,
  randomUUID: randomUUID2
} = browser_default;

// node_modules/@fuel-ts/hasher/node_modules/@noble/hashes/esm/_assert.js
function isBytes2(a) {
  return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
}
function abytes2(b, ...lengths) {
  if (!isBytes2(b))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b.length);
}
function aexists2(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function aoutput2(out, instance) {
  abytes2(out);
  const min3 = instance.outputLen;
  if (out.length < min3) {
    throw new Error("digestInto() expects output buffer of length at least " + min3);
  }
}

// node_modules/@fuel-ts/hasher/node_modules/@noble/hashes/esm/crypto.js
var crypto3 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;

// node_modules/@fuel-ts/hasher/node_modules/@noble/hashes/esm/utils.js
function createView2(arr) {
  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
}
function rotr2(word, shift) {
  return word << 32 - shift | word >>> shift;
}
var isLE2 = (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
var hexes2 = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
function utf8ToBytes2(str) {
  if (typeof str !== "string")
    throw new Error("utf8ToBytes expected string, got " + typeof str);
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes3(data) {
  if (typeof data === "string")
    data = utf8ToBytes2(data);
  abytes2(data);
  return data;
}
var Hash2 = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function wrapConstructor2(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes3(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}

// node_modules/@fuel-ts/hasher/node_modules/@noble/hashes/esm/_md.js
function setBigUint642(view3, byteOffset, value, isLE5) {
  if (typeof view3.setBigUint64 === "function")
    return view3.setBigUint64(byteOffset, value, isLE5);
  const _32n2 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n2 & _u32_max);
  const wl = Number(value & _u32_max);
  const h = isLE5 ? 4 : 0;
  const l = isLE5 ? 0 : 4;
  view3.setUint32(byteOffset + h, wh, isLE5);
  view3.setUint32(byteOffset + l, wl, isLE5);
}
function Chi2(a, b, c) {
  return a & b ^ ~a & c;
}
function Maj2(a, b, c) {
  return a & b ^ a & c ^ b & c;
}
var HashMD2 = class extends Hash2 {
  constructor(blockLen, outputLen, padOffset, isLE5) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE5;
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView2(this.buffer);
  }
  update(data) {
    aexists2(this);
    const { view: view3, buffer, blockLen } = this;
    data = toBytes3(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take3 = Math.min(blockLen - this.pos, len - pos);
      if (take3 === blockLen) {
        const dataView = createView2(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer.set(data.subarray(pos, pos + take3), this.pos);
      this.pos += take3;
      pos += take3;
      if (this.pos === blockLen) {
        this.process(view3, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    aexists2(this);
    aoutput2(out, this);
    this.finished = true;
    const { buffer, view: view3, blockLen, isLE: isLE5 } = this;
    let { pos } = this;
    buffer[pos++] = 128;
    this.buffer.subarray(pos).fill(0);
    if (this.padOffset > blockLen - pos) {
      this.process(view3, 0);
      pos = 0;
    }
    for (let i = pos; i < blockLen; i++)
      buffer[i] = 0;
    setBigUint642(view3, blockLen - 8, BigInt(this.length * 8), isLE5);
    this.process(view3, 0);
    const oview = createView2(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state = this.get();
    if (outLen > state.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i = 0; i < outLen; i++)
      oview.setUint32(4 * i, state[i], isLE5);
  }
  digest() {
    const { buffer, outputLen } = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    to || (to = new this.constructor());
    to.set(...this.get());
    const { blockLen, buffer, length: length3, finished, destroyed, pos } = this;
    to.length = length3;
    to.pos = pos;
    to.finished = finished;
    to.destroyed = destroyed;
    if (length3 % blockLen)
      to.buffer.set(buffer);
    return to;
  }
};

// node_modules/@fuel-ts/hasher/node_modules/@noble/hashes/esm/sha256.js
var SHA256_K2 = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var SHA256_IV2 = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
var SHA256_W2 = new Uint32Array(64);
var SHA2562 = class extends HashMD2 {
  constructor() {
    super(64, 32, 8, false);
    this.A = SHA256_IV2[0] | 0;
    this.B = SHA256_IV2[1] | 0;
    this.C = SHA256_IV2[2] | 0;
    this.D = SHA256_IV2[3] | 0;
    this.E = SHA256_IV2[4] | 0;
    this.F = SHA256_IV2[5] | 0;
    this.G = SHA256_IV2[6] | 0;
    this.H = SHA256_IV2[7] | 0;
  }
  get() {
    const { A, B, C, D, E, F, G, H } = this;
    return [A, B, C, D, E, F, G, H];
  }
  // prettier-ignore
  set(A, B, C, D, E, F, G, H) {
    this.A = A | 0;
    this.B = B | 0;
    this.C = C | 0;
    this.D = D | 0;
    this.E = E | 0;
    this.F = F | 0;
    this.G = G | 0;
    this.H = H | 0;
  }
  process(view3, offset) {
    for (let i = 0; i < 16; i++, offset += 4)
      SHA256_W2[i] = view3.getUint32(offset, false);
    for (let i = 16; i < 64; i++) {
      const W15 = SHA256_W2[i - 15];
      const W2 = SHA256_W2[i - 2];
      const s0 = rotr2(W15, 7) ^ rotr2(W15, 18) ^ W15 >>> 3;
      const s1 = rotr2(W2, 17) ^ rotr2(W2, 19) ^ W2 >>> 10;
      SHA256_W2[i] = s1 + SHA256_W2[i - 7] + s0 + SHA256_W2[i - 16] | 0;
    }
    let { A, B, C, D, E, F, G, H } = this;
    for (let i = 0; i < 64; i++) {
      const sigma1 = rotr2(E, 6) ^ rotr2(E, 11) ^ rotr2(E, 25);
      const T1 = H + sigma1 + Chi2(E, F, G) + SHA256_K2[i] + SHA256_W2[i] | 0;
      const sigma0 = rotr2(A, 2) ^ rotr2(A, 13) ^ rotr2(A, 22);
      const T2 = sigma0 + Maj2(A, B, C) | 0;
      H = G;
      G = F;
      F = E;
      E = D + T1 | 0;
      D = C;
      C = B;
      B = A;
      A = T1 + T2 | 0;
    }
    A = A + this.A | 0;
    B = B + this.B | 0;
    C = C + this.C | 0;
    D = D + this.D | 0;
    E = E + this.E | 0;
    F = F + this.F | 0;
    G = G + this.G | 0;
    H = H + this.H | 0;
    this.set(A, B, C, D, E, F, G, H);
  }
  roundClean() {
    SHA256_W2.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    this.buffer.fill(0);
  }
};
var SHA2242 = class extends SHA2562 {
  constructor() {
    super();
    this.A = 3238371032 | 0;
    this.B = 914150663 | 0;
    this.C = 812702999 | 0;
    this.D = 4144912697 | 0;
    this.E = 4290775857 | 0;
    this.F = 1750603025 | 0;
    this.G = 1694076839 | 0;
    this.H = 3204075428 | 0;
    this.outputLen = 28;
  }
};
var sha2562 = wrapConstructor2(() => new SHA2562());
var sha2242 = wrapConstructor2(() => new SHA2242());

// node_modules/@fuel-ts/hasher/dist/index.mjs
var __defProp6 = Object.defineProperty;
var __name6 = (target, value) => __defProp6(target, "name", { value, configurable: true });
var MESSAGE_PREFIX = "Fuel Signed Message:\n";
function sha2563(data) {
  return hexlify(sha2562(arrayify(data)));
}
__name6(sha2563, "sha256");
function hash(data) {
  return sha2563(data);
}
__name6(hash, "hash");
function uint64ToBytesBE(value) {
  const bigIntValue = BigInt(value);
  const buffer = new ArrayBuffer(8);
  const dataView = new DataView(buffer);
  dataView.setBigUint64(0, bigIntValue, false);
  return new Uint8Array(dataView.buffer);
}
__name6(uint64ToBytesBE, "uint64ToBytesBE");
function hashMessage(message) {
  if (typeof message === "string") {
    return sha2563(toUtf8Bytes(message));
  }
  const { personalSign } = message;
  const messageBytes = typeof personalSign === "string" ? toUtf8Bytes(personalSign) : personalSign;
  const payload = concat([
    toUtf8Bytes(MESSAGE_PREFIX),
    toUtf8Bytes(String(messageBytes.length)),
    messageBytes
  ]);
  return hexlify(sha2563(payload));
}
__name6(hashMessage, "hashMessage");

// node_modules/@fuel-ts/abi-coder/dist/index.mjs
var __defProp7 = Object.defineProperty;
var __name7 = (target, value) => __defProp7(target, "name", { value, configurable: true });
var _a5;
var Coder = (_a5 = class {
  constructor(name, type3, encodedLength) {
    __publicField(this, "name");
    __publicField(this, "type");
    __publicField(this, "encodedLength");
    this.name = name;
    this.type = type3;
    this.encodedLength = encodedLength;
  }
}, __name7(_a5, "Coder"), _a5);
var U8_CODER_TYPE = "u8";
var U16_CODER_TYPE = "u16";
var U32_CODER_TYPE = "u32";
var U64_CODER_TYPE = "u64";
var U256_CODER_TYPE = "u256";
var RAW_PTR_CODER_TYPE = "raw untyped ptr";
var RAW_SLICE_CODER_TYPE = "raw untyped slice";
var BOOL_CODER_TYPE = "bool";
var B256_CODER_TYPE = "b256";
var B512_CODER_TYPE = "struct std::b512::B512";
var OPTION_CODER_TYPE = "enum std::option::Option";
var VEC_CODER_TYPE = "struct std::vec::Vec";
var BYTES_CODER_TYPE = "struct std::bytes::Bytes";
var STD_STRING_CODER_TYPE = "struct std::string::String";
var STR_SLICE_CODER_TYPE = "str";
var VOID_TYPE = "()";
var optionRegEx = /^enum (std::option::)?Option$/m;
var stringRegEx = /^str\[(?<length>[0-9]+)\]/;
var arrayRegEx = /^\[(?<item>[\w\s\\[\]]+);\s*(?<length>[0-9]+)\]/;
var structRegEx = /^struct.+/;
var enumRegEx = /^enum.+$/;
var tupleRegEx = /^\((?<items>.*)\)$/;
var genericRegEx = /^generic.+$/;
var fullNameRegExMatch = /([^\s]+)$/m;
var ENCODING_V1 = "1";
var WORD_SIZE = 8;
var BYTES_32 = 32;
var UTXO_ID_LEN = BYTES_32 + 2;
var ASSET_ID_LEN = BYTES_32;
var CONTRACT_ID_LEN = BYTES_32;
var ADDRESS_LEN = BYTES_32;
var NONCE_LEN = BYTES_32;
var TX_LEN = WORD_SIZE * 4;
var TX_POINTER_LEN = WORD_SIZE * 2;
var MAX_BYTES = 2 ** 32 - 1;
var calculateVmTxMemory = __name7(({ maxInputs }) => BYTES_32 + // Tx ID
ASSET_ID_LEN + // Base asset ID
// Asset ID/Balance coin input pairs
maxInputs * (ASSET_ID_LEN + WORD_SIZE) + WORD_SIZE, "calculateVmTxMemory");
var SCRIPT_FIXED_SIZE = WORD_SIZE + // Identifier
WORD_SIZE + // Gas limit
WORD_SIZE + // Script size
WORD_SIZE + // Script data size
WORD_SIZE + // Policies
WORD_SIZE + // Inputs size
WORD_SIZE + // Outputs size
WORD_SIZE + // Witnesses size
BYTES_32;
var INPUT_COIN_FIXED_SIZE = WORD_SIZE + // Identifier
TX_LEN + // Utxo Length
WORD_SIZE + // Output Index
ADDRESS_LEN + // Owner
WORD_SIZE + // Amount
ASSET_ID_LEN + // Asset id
TX_POINTER_LEN + // TxPointer
WORD_SIZE + // Witnesses index
WORD_SIZE + // Predicate size
WORD_SIZE + // Predicate data size
WORD_SIZE;
var INPUT_MESSAGE_FIXED_SIZE = WORD_SIZE + // Identifier
ADDRESS_LEN + // Sender
ADDRESS_LEN + // Recipient
WORD_SIZE + // Amount
NONCE_LEN + // Nonce
WORD_SIZE + // witness_index
WORD_SIZE + // Data size
WORD_SIZE + // Predicate size
WORD_SIZE + // Predicate data size
WORD_SIZE;
var isUint8Array = __name7((value) => value instanceof Uint8Array, "isUint8Array");
var hasNestedOption = __name7((coders) => {
  const array = Array.isArray(coders) ? coders : Object.values(coders);
  for (const node of array) {
    if (node.type === OPTION_CODER_TYPE) {
      return true;
    }
    if ("coder" in node && node.coder.type === OPTION_CODER_TYPE) {
      return true;
    }
    if ("coders" in node) {
      const child = hasNestedOption(node.coders);
      if (child) {
        return true;
      }
    }
  }
  return false;
}, "hasNestedOption");
var _hasNestedOption, _a6;
var ArrayCoder = (_a6 = class extends Coder {
  constructor(coder, length3) {
    super("array", `[${coder.type}; ${length3}]`, length3 * coder.encodedLength);
    __publicField(this, "coder");
    __publicField(this, "length");
    __privateAdd(this, _hasNestedOption);
    this.coder = coder;
    this.length = length3;
    __privateSet(this, _hasNestedOption, hasNestedOption([coder]));
  }
  encode(value) {
    if (!Array.isArray(value)) {
      throw new FuelError(ErrorCode.ENCODE_ERROR, `Expected array value.`);
    }
    if (this.length !== value.length) {
      throw new FuelError(ErrorCode.ENCODE_ERROR, `Types/values length mismatch.`);
    }
    return concat(Array.from(value).map((v) => this.coder.encode(v)));
  }
  decode(data, offset) {
    if (!__privateGet(this, _hasNestedOption) && data.length < this.encodedLength || data.length > MAX_BYTES) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid array data size.`);
    }
    let newOffset = offset;
    const decodedValue = Array(this.length).fill(0).map(() => {
      let decoded;
      [decoded, newOffset] = this.coder.decode(data, newOffset);
      return decoded;
    });
    return [decodedValue, newOffset];
  }
}, _hasNestedOption = new WeakMap(), __name7(_a6, "ArrayCoder"), _a6);
var _a7;
var B256Coder = (_a7 = class extends Coder {
  constructor() {
    super("b256", "b256", WORD_SIZE * 4);
  }
  encode(value) {
    let encodedValue;
    try {
      encodedValue = arrayify(value);
    } catch (error) {
      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);
    }
    if (encodedValue.length !== this.encodedLength) {
      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);
    }
    return encodedValue;
  }
  decode(data, offset) {
    if (data.length < this.encodedLength) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid b256 data size.`);
    }
    let bytes = data.slice(offset, offset + this.encodedLength);
    const decoded = bn(bytes);
    if (decoded.isZero()) {
      bytes = new Uint8Array(32);
    }
    if (bytes.length !== this.encodedLength) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid b256 byte data size.`);
    }
    return [toHex(bytes, 32), offset + 32];
  }
}, __name7(_a7, "B256Coder"), _a7);
var _a8;
var B512Coder = (_a8 = class extends Coder {
  constructor() {
    super("b512", "struct B512", WORD_SIZE * 8);
  }
  encode(value) {
    let encodedValue;
    try {
      encodedValue = arrayify(value);
    } catch (error) {
      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);
    }
    if (encodedValue.length !== this.encodedLength) {
      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);
    }
    return encodedValue;
  }
  decode(data, offset) {
    if (data.length < this.encodedLength) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid b512 data size.`);
    }
    let bytes = data.slice(offset, offset + this.encodedLength);
    const decoded = bn(bytes);
    if (decoded.isZero()) {
      bytes = new Uint8Array(64);
    }
    if (bytes.length !== this.encodedLength) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid b512 byte data size.`);
    }
    return [toHex(bytes, this.encodedLength), offset + this.encodedLength];
  }
}, __name7(_a8, "B512Coder"), _a8);
var encodedLengths = {
  u64: WORD_SIZE,
  u256: WORD_SIZE * 4
};
var _a9;
var BigNumberCoder = (_a9 = class extends Coder {
  constructor(baseType) {
    super("bigNumber", baseType, encodedLengths[baseType]);
  }
  encode(value) {
    let bytes;
    if (typeof value === "number" && value > Number.MAX_SAFE_INTEGER) {
      throw new FuelError(
        ErrorCode.ENCODE_ERROR,
        `Invalid ${this.type} type - number value is too large. Number can only safely handle up to 53 bits.`
      );
    }
    try {
      bytes = toBytes(value, this.encodedLength);
    } catch (error) {
      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);
    }
    return bytes;
  }
  decode(data, offset) {
    if (data.length < this.encodedLength) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid ${this.type} data size.`);
    }
    let bytes = data.slice(offset, offset + this.encodedLength);
    bytes = bytes.slice(0, this.encodedLength);
    if (bytes.length !== this.encodedLength) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid ${this.type} byte data size.`);
    }
    return [bn(bytes), offset + this.encodedLength];
  }
}, __name7(_a9, "BigNumberCoder"), _a9);
var _a10;
var BooleanCoder = (_a10 = class extends Coder {
  constructor(options = {
    padToWordSize: false
  }) {
    const encodedLength = options.padToWordSize ? WORD_SIZE : 1;
    super("boolean", "boolean", encodedLength);
    __publicField(this, "options");
    this.options = options;
  }
  encode(value) {
    const isTrueBool = value === true || value === false;
    if (!isTrueBool) {
      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid boolean value.`);
    }
    return toBytes(value ? 1 : 0, this.encodedLength);
  }
  decode(data, offset) {
    if (data.length < this.encodedLength) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid boolean data size.`);
    }
    const bytes = bn(data.slice(offset, offset + this.encodedLength));
    if (bytes.isZero()) {
      return [false, offset + this.encodedLength];
    }
    if (!bytes.eq(bn(1))) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid boolean value.`);
    }
    return [true, offset + this.encodedLength];
  }
}, __name7(_a10, "BooleanCoder"), _a10);
var _a11;
var ByteCoder = (_a11 = class extends Coder {
  constructor() {
    super("struct", "struct Bytes", WORD_SIZE);
  }
  encode(value) {
    const bytes = value instanceof Uint8Array ? value : new Uint8Array(value);
    const lengthBytes = new BigNumberCoder("u64").encode(bytes.length);
    return new Uint8Array([...lengthBytes, ...bytes]);
  }
  decode(data, offset) {
    if (data.length < WORD_SIZE) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid byte data size.`);
    }
    const offsetAndLength = offset + WORD_SIZE;
    const lengthBytes = data.slice(offset, offsetAndLength);
    const length3 = bn(new BigNumberCoder("u64").decode(lengthBytes, 0)[0]).toNumber();
    const dataBytes = data.slice(offsetAndLength, offsetAndLength + length3);
    if (dataBytes.length !== length3) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid bytes byte data size.`);
    }
    return [dataBytes, offsetAndLength + length3];
  }
}, __name7(_a11, "ByteCoder"), __publicField(_a11, "memorySize", 1), _a11);
var _caseIndexCoder, _encodedValueSize, _shouldValidateLength, __this_instances, isNativeEnum_fn, encodeNativeEnum_fn, decodeNativeEnum_fn, _a12;
var EnumCoder = (_a12 = class extends Coder {
  constructor(name, coders) {
    const caseIndexCoder = new BigNumberCoder("u64");
    const encodedValueSize = Object.values(coders).reduce(
      (min3, coder) => Math.min(min3, coder.encodedLength),
      0
    );
    super(`enum ${name}`, `enum ${name}`, caseIndexCoder.encodedLength + encodedValueSize);
    __privateAdd(this, __this_instances);
    __publicField(this, "name");
    __publicField(this, "coders");
    __privateAdd(this, _caseIndexCoder);
    __privateAdd(this, _encodedValueSize);
    __privateAdd(this, _shouldValidateLength);
    this.name = name;
    this.coders = coders;
    __privateSet(this, _caseIndexCoder, caseIndexCoder);
    __privateSet(this, _encodedValueSize, encodedValueSize);
    __privateSet(this, _shouldValidateLength, !(optionRegEx.test(this.type) || hasNestedOption(coders)));
  }
  encode(value) {
    if (typeof value === "string" && this.coders[value]) {
      return __privateMethod(this, __this_instances, encodeNativeEnum_fn).call(this, value);
    }
    const [caseKey, ...empty3] = Object.keys(value);
    if (!caseKey) {
      throw new FuelError(ErrorCode.INVALID_DECODE_VALUE, "A field for the case must be provided.");
    }
    if (empty3.length !== 0) {
      throw new FuelError(ErrorCode.INVALID_DECODE_VALUE, "Only one field must be provided.");
    }
    const valueCoder = this.coders[caseKey];
    const caseIndex = Object.keys(this.coders).indexOf(caseKey);
    if (caseIndex === -1) {
      const validCases = Object.keys(this.coders).map((v) => `'${v}'`).join(", ");
      throw new FuelError(
        ErrorCode.INVALID_DECODE_VALUE,
        `Invalid case '${caseKey}'. Valid cases: ${validCases}.`
      );
    }
    const encodedValue = valueCoder.encode(value[caseKey]);
    return new Uint8Array([...__privateGet(this, _caseIndexCoder).encode(caseIndex), ...encodedValue]);
  }
  decode(data, offset) {
    if (__privateGet(this, _shouldValidateLength) && data.length < this.encodedLength) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid enum data size.`);
    }
    const caseBytes = new BigNumberCoder("u64").decode(data, offset)[0];
    const caseIndex = toNumber(caseBytes);
    const caseKey = Object.keys(this.coders)[caseIndex];
    if (!caseKey) {
      throw new FuelError(
        ErrorCode.INVALID_DECODE_VALUE,
        `Invalid caseIndex "${caseIndex}". Valid cases: ${Object.keys(this.coders)}.`
      );
    }
    const valueCoder = this.coders[caseKey];
    const offsetAndCase = offset + __privateGet(this, _caseIndexCoder).encodedLength;
    if (__privateGet(this, _shouldValidateLength) && data.length < offsetAndCase + valueCoder.encodedLength) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid enum data size.`);
    }
    const [decoded, newOffset] = valueCoder.decode(data, offsetAndCase);
    if (__privateMethod(this, __this_instances, isNativeEnum_fn).call(this, this.coders[caseKey])) {
      return __privateMethod(this, __this_instances, decodeNativeEnum_fn).call(this, caseKey, newOffset);
    }
    return [{ [caseKey]: decoded }, newOffset];
  }
}, _caseIndexCoder = new WeakMap(), _encodedValueSize = new WeakMap(), _shouldValidateLength = new WeakMap(), __this_instances = new WeakSet(), // Checks that we're handling a native enum that is of type void.
isNativeEnum_fn = function(coder) {
  return this.type !== OPTION_CODER_TYPE && coder.type === VOID_TYPE;
}, encodeNativeEnum_fn = function(value) {
  const valueCoder = this.coders[value];
  const encodedValue = valueCoder.encode([]);
  const caseIndex = Object.keys(this.coders).indexOf(value);
  const padding = new Uint8Array(__privateGet(this, _encodedValueSize) - valueCoder.encodedLength);
  return concat([__privateGet(this, _caseIndexCoder).encode(caseIndex), padding, encodedValue]);
}, decodeNativeEnum_fn = function(caseKey, newOffset) {
  return [caseKey, newOffset];
}, __name7(_a12, "EnumCoder"), _a12);
var getLength = __name7((baseType) => {
  switch (baseType) {
    case "u8":
      return 1;
    case "u16":
      return 2;
    case "u32":
      return 4;
    default:
      throw new FuelError(ErrorCode.TYPE_NOT_SUPPORTED, `Invalid number type: ${baseType}`);
  }
}, "getLength");
var _a13;
var NumberCoder = (_a13 = class extends Coder {
  constructor(baseType, options = {
    padToWordSize: false
  }) {
    const length3 = options.padToWordSize ? WORD_SIZE : getLength(baseType);
    super("number", baseType, length3);
    __publicField(this, "baseType");
    __publicField(this, "options");
    this.baseType = baseType;
    this.options = options;
  }
  encode(value) {
    let bytes;
    try {
      bytes = toBytes(value);
    } catch (error) {
      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.baseType}.`);
    }
    if (bytes.length > this.encodedLength) {
      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.baseType}, too many bytes.`);
    }
    return toBytes(bytes, this.encodedLength);
  }
  decode(data, offset) {
    if (data.length < this.encodedLength) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid number data size.`);
    }
    const bytes = data.slice(offset, offset + this.encodedLength);
    if (bytes.length !== this.encodedLength) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid number byte data size.`);
    }
    return [toNumber(bytes), offset + this.encodedLength];
  }
}, __name7(_a13, "NumberCoder"), _a13);
var _a14;
var OptionCoder = (_a14 = class extends EnumCoder {
  encode(value) {
    const result = super.encode(this.toSwayOption(value));
    return result;
  }
  toSwayOption(input) {
    if (input !== void 0) {
      return { Some: input };
    }
    return { None: [] };
  }
  decode(data, offset) {
    const [decoded, newOffset] = super.decode(data, offset);
    return [this.toOption(decoded), newOffset];
  }
  toOption(output) {
    if (output && "Some" in output) {
      return output.Some;
    }
    return void 0;
  }
}, __name7(_a14, "OptionCoder"), _a14);
var _a15;
var RawSliceCoder = (_a15 = class extends Coder {
  constructor() {
    super("raw untyped slice", "raw untyped slice", WORD_SIZE);
  }
  encode(value) {
    if (!Array.isArray(value)) {
      throw new FuelError(ErrorCode.ENCODE_ERROR, `Expected array value.`);
    }
    const internalCoder = new ArrayCoder(new NumberCoder("u8"), value.length);
    const bytes = internalCoder.encode(value);
    const lengthBytes = new BigNumberCoder("u64").encode(bytes.length);
    return new Uint8Array([...lengthBytes, ...bytes]);
  }
  decode(data, offset) {
    if (data.length < this.encodedLength) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid raw slice data size.`);
    }
    const offsetAndLength = offset + WORD_SIZE;
    const lengthBytes = data.slice(offset, offsetAndLength);
    const length3 = bn(new BigNumberCoder("u64").decode(lengthBytes, 0)[0]).toNumber();
    const dataBytes = data.slice(offsetAndLength, offsetAndLength + length3);
    if (dataBytes.length !== length3) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid raw slice byte data size.`);
    }
    const internalCoder = new ArrayCoder(new NumberCoder("u8"), length3);
    const [decodedValue] = internalCoder.decode(dataBytes, 0);
    return [decodedValue, offsetAndLength + length3];
  }
}, __name7(_a15, "RawSliceCoder"), _a15);
var _a16;
var StdStringCoder = (_a16 = class extends Coder {
  constructor() {
    super("struct", "struct String", WORD_SIZE);
  }
  encode(value) {
    const bytes = toUtf8Bytes(value);
    const lengthBytes = new BigNumberCoder("u64").encode(value.length);
    return new Uint8Array([...lengthBytes, ...bytes]);
  }
  decode(data, offset) {
    if (data.length < this.encodedLength) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid std string data size.`);
    }
    const offsetAndLength = offset + WORD_SIZE;
    const lengthBytes = data.slice(offset, offsetAndLength);
    const length3 = bn(new BigNumberCoder("u64").decode(lengthBytes, 0)[0]).toNumber();
    const dataBytes = data.slice(offsetAndLength, offsetAndLength + length3);
    if (dataBytes.length !== length3) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid std string byte data size.`);
    }
    return [toUtf8String(dataBytes), offsetAndLength + length3];
  }
}, __name7(_a16, "StdStringCoder"), __publicField(_a16, "memorySize", 1), _a16);
var _a17;
var StrSliceCoder = (_a17 = class extends Coder {
  constructor() {
    super("strSlice", "str", WORD_SIZE);
  }
  encode(value) {
    const bytes = toUtf8Bytes(value);
    const lengthBytes = new BigNumberCoder("u64").encode(value.length);
    return new Uint8Array([...lengthBytes, ...bytes]);
  }
  decode(data, offset) {
    if (data.length < this.encodedLength) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid string slice data size.`);
    }
    const offsetAndLength = offset + WORD_SIZE;
    const lengthBytes = data.slice(offset, offsetAndLength);
    const length3 = bn(new BigNumberCoder("u64").decode(lengthBytes, 0)[0]).toNumber();
    const bytes = data.slice(offsetAndLength, offsetAndLength + length3);
    if (bytes.length !== length3) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid string slice byte data size.`);
    }
    return [toUtf8String(bytes), offsetAndLength + length3];
  }
}, __name7(_a17, "StrSliceCoder"), __publicField(_a17, "memorySize", 1), _a17);
var _a18;
var StringCoder = (_a18 = class extends Coder {
  constructor(length3) {
    super("string", `str[${length3}]`, length3);
  }
  encode(value) {
    if (value.length !== this.encodedLength) {
      throw new FuelError(ErrorCode.ENCODE_ERROR, `Value length mismatch during encode.`);
    }
    return toUtf8Bytes(value);
  }
  decode(data, offset) {
    if (data.length < this.encodedLength) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid string data size.`);
    }
    const bytes = data.slice(offset, offset + this.encodedLength);
    if (bytes.length !== this.encodedLength) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid string byte data size.`);
    }
    return [toUtf8String(bytes), offset + this.encodedLength];
  }
}, __name7(_a18, "StringCoder"), _a18);
var _hasNestedOption2, _a19;
var StructCoder = (_a19 = class extends Coder {
  constructor(name, coders) {
    const encodedLength = Object.values(coders).reduce(
      (acc, coder) => acc + coder.encodedLength,
      0
    );
    super("struct", `struct ${name}`, encodedLength);
    __publicField(this, "name");
    __publicField(this, "coders");
    __privateAdd(this, _hasNestedOption2);
    this.name = name;
    this.coders = coders;
    __privateSet(this, _hasNestedOption2, hasNestedOption(coders));
  }
  encode(value) {
    return concatBytes(
      Object.keys(this.coders).map((fieldName) => {
        const fieldCoder = this.coders[fieldName];
        const fieldValue = value[fieldName];
        if (!(fieldCoder instanceof OptionCoder) && fieldValue == null) {
          throw new FuelError(
            ErrorCode.ENCODE_ERROR,
            `Invalid ${this.type}. Field "${fieldName}" not present.`
          );
        }
        return fieldCoder.encode(fieldValue);
      })
    );
  }
  decode(data, offset) {
    if (!__privateGet(this, _hasNestedOption2) && data.length < this.encodedLength) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid struct data size.`);
    }
    let newOffset = offset;
    const decodedValue = Object.keys(this.coders).reduce((obj, fieldName) => {
      const fieldCoder = this.coders[fieldName];
      let decoded;
      [decoded, newOffset] = fieldCoder.decode(data, newOffset);
      obj[fieldName] = decoded;
      return obj;
    }, {});
    return [decodedValue, newOffset];
  }
}, _hasNestedOption2 = new WeakMap(), __name7(_a19, "StructCoder"), _a19);
var _hasNestedOption3, _a20;
var TupleCoder = (_a20 = class extends Coder {
  constructor(coders) {
    const encodedLength = coders.reduce((acc, coder) => acc + coder.encodedLength, 0);
    super("tuple", `(${coders.map((coder) => coder.type).join(", ")})`, encodedLength);
    __publicField(this, "coders");
    __privateAdd(this, _hasNestedOption3);
    this.coders = coders;
    __privateSet(this, _hasNestedOption3, hasNestedOption(coders));
  }
  encode(value) {
    if (this.coders.length !== value.length) {
      throw new FuelError(ErrorCode.ENCODE_ERROR, `Types/values length mismatch.`);
    }
    return concatBytes(this.coders.map((coder, i) => coder.encode(value[i])));
  }
  decode(data, offset) {
    if (!__privateGet(this, _hasNestedOption3) && data.length < this.encodedLength) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid tuple data size.`);
    }
    let newOffset = offset;
    const decodedValue = this.coders.map((coder) => {
      let decoded;
      [decoded, newOffset] = coder.decode(data, newOffset);
      return decoded;
    });
    return [decodedValue, newOffset];
  }
}, _hasNestedOption3 = new WeakMap(), __name7(_a20, "TupleCoder"), _a20);
var _hasNestedOption4, _a21;
var VecCoder = (_a21 = class extends Coder {
  constructor(coder) {
    super("struct", `struct Vec`, WORD_SIZE);
    __publicField(this, "coder");
    __privateAdd(this, _hasNestedOption4);
    this.coder = coder;
    __privateSet(this, _hasNestedOption4, hasNestedOption([coder]));
  }
  encode(value) {
    if (!Array.isArray(value) && !isUint8Array(value)) {
      throw new FuelError(
        ErrorCode.ENCODE_ERROR,
        `Expected array value, or a Uint8Array. You can use arrayify to convert a value to a Uint8Array.`
      );
    }
    const lengthCoder = new BigNumberCoder("u64");
    if (isUint8Array(value)) {
      return new Uint8Array([...lengthCoder.encode(value.length), ...value]);
    }
    const bytes = value.map((v) => this.coder.encode(v));
    const lengthBytes = lengthCoder.encode(value.length);
    return new Uint8Array([...lengthBytes, ...concatBytes(bytes)]);
  }
  decode(data, offset) {
    if (!__privateGet(this, _hasNestedOption4) && data.length < this.encodedLength || data.length > MAX_BYTES) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid vec data size.`);
    }
    const offsetAndLength = offset + WORD_SIZE;
    const lengthBytes = data.slice(offset, offsetAndLength);
    const length3 = bn(new BigNumberCoder("u64").decode(lengthBytes, 0)[0]).toNumber();
    const dataLength = length3 * this.coder.encodedLength;
    const dataBytes = data.slice(offsetAndLength, offsetAndLength + dataLength);
    if (!__privateGet(this, _hasNestedOption4) && dataBytes.length !== dataLength) {
      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid vec byte data size.`);
    }
    let newOffset = offsetAndLength;
    const chunks = [];
    for (let i = 0; i < length3; i++) {
      const [decoded, optionOffset] = this.coder.decode(data, newOffset);
      chunks.push(decoded);
      newOffset = optionOffset;
    }
    return [chunks, newOffset];
  }
}, _hasNestedOption4 = new WeakMap(), __name7(_a21, "VecCoder"), _a21);
var getEncodingVersion = __name7((encoding) => {
  switch (encoding) {
    case void 0:
    case ENCODING_V1:
      return ENCODING_V1;
    default:
      throw new FuelError(
        ErrorCode.UNSUPPORTED_ENCODING_VERSION,
        `Encoding version '${encoding}' is unsupported.`
      );
  }
}, "getEncodingVersion");
var findTypeById = __name7((abi2, typeId) => {
  const type3 = abi2.types.find((t) => t.typeId === typeId);
  if (!type3) {
    throw new FuelError(
      ErrorCode.TYPE_NOT_FOUND,
      `Type with typeId '${typeId}' doesn't exist in the ABI.`
    );
  }
  return type3;
}, "findTypeById");
var findNonVoidInputs = __name7((abi2, inputs) => inputs.filter((input) => findTypeById(abi2, input.type).type !== VOID_TYPE), "findNonVoidInputs");
var findVectorBufferArgument = __name7((components) => {
  var _a103;
  const bufferComponent = components.find((c) => c.name === "buf");
  const bufferTypeArgument = (_a103 = bufferComponent == null ? void 0 : bufferComponent.originalTypeArguments) == null ? void 0 : _a103[0];
  if (!bufferComponent || !bufferTypeArgument) {
    throw new FuelError(
      ErrorCode.INVALID_COMPONENT,
      `The Vec type provided is missing or has a malformed 'buf' component.`
    );
  }
  return bufferTypeArgument;
}, "findVectorBufferArgument");
var _a22;
var ResolvedAbiType = (_a22 = class {
  constructor(abi2, argument) {
    __publicField(this, "abi");
    __publicField(this, "name");
    __publicField(this, "type");
    __publicField(this, "originalTypeArguments");
    __publicField(this, "components");
    this.abi = abi2;
    this.name = argument.name;
    const jsonABIType = findTypeById(abi2, argument.type);
    if (jsonABIType.type.length > 256) {
      throw new FuelError(
        ErrorCode.INVALID_COMPONENT,
        `The provided ABI type is too long: ${jsonABIType.type}.`
      );
    }
    this.type = jsonABIType.type;
    this.originalTypeArguments = argument.typeArguments;
    this.components = _a22.getResolvedGenericComponents(
      abi2,
      argument,
      jsonABIType.components,
      jsonABIType.typeParameters ?? _a22.getImplicitGenericTypeParameters(abi2, jsonABIType.components)
    );
  }
  static getResolvedGenericComponents(abi2, arg, components, typeParameters) {
    if (components === null) {
      return null;
    }
    if (typeParameters === null || typeParameters.length === 0) {
      return components.map((c) => new _a22(abi2, c));
    }
    const typeParametersAndArgsMap = typeParameters.reduce(
      (obj, typeParameter, typeParameterIndex) => {
        var _a103;
        const o3 = { ...obj };
        o3[typeParameter] = structuredClone(
          (_a103 = arg.typeArguments) == null ? void 0 : _a103[typeParameterIndex]
        );
        return o3;
      },
      {}
    );
    const resolvedComponents = this.resolveGenericArgTypes(
      abi2,
      components,
      typeParametersAndArgsMap
    );
    return resolvedComponents.map((c) => new _a22(abi2, c));
  }
  static resolveGenericArgTypes(abi2, args, typeParametersAndArgsMap) {
    return args.map((arg) => {
      if (typeParametersAndArgsMap[arg.type] !== void 0) {
        return {
          ...typeParametersAndArgsMap[arg.type],
          name: arg.name
        };
      }
      if (arg.typeArguments) {
        return {
          ...structuredClone(arg),
          typeArguments: this.resolveGenericArgTypes(
            abi2,
            arg.typeArguments,
            typeParametersAndArgsMap
          )
        };
      }
      const argType = findTypeById(abi2, arg.type);
      const implicitTypeParameters = this.getImplicitGenericTypeParameters(abi2, argType.components);
      if (implicitTypeParameters && implicitTypeParameters.length > 0) {
        return {
          ...structuredClone(arg),
          typeArguments: implicitTypeParameters.map((itp) => typeParametersAndArgsMap[itp])
        };
      }
      return arg;
    });
  }
  static getImplicitGenericTypeParameters(abi2, args, implicitGenericParametersParam) {
    if (!Array.isArray(args)) {
      return null;
    }
    const implicitGenericParameters = implicitGenericParametersParam ?? [];
    args.forEach((a) => {
      const argType = findTypeById(abi2, a.type);
      if (genericRegEx.test(argType.type)) {
        implicitGenericParameters.push(argType.typeId);
        return;
      }
      if (!Array.isArray(a.typeArguments)) {
        return;
      }
      this.getImplicitGenericTypeParameters(abi2, a.typeArguments, implicitGenericParameters);
    });
    return implicitGenericParameters.length > 0 ? implicitGenericParameters : null;
  }
  getSignature() {
    const prefix = this.getArgSignaturePrefix();
    const content = this.getArgSignatureContent();
    return `${prefix}${content}`;
  }
  getArgSignaturePrefix() {
    const structMatch = structRegEx.test(this.type);
    if (structMatch) {
      return "s";
    }
    const arrayMatch = arrayRegEx.test(this.type);
    if (arrayMatch) {
      return "a";
    }
    const enumMatch = enumRegEx.test(this.type);
    if (enumMatch) {
      return "e";
    }
    return "";
  }
  getArgSignatureContent() {
    var _a103, _b2;
    if (this.type === "raw untyped ptr") {
      return "rawptr";
    }
    if (this.type === "raw untyped slice") {
      return "rawslice";
    }
    const strMatch = (_a103 = stringRegEx.exec(this.type)) == null ? void 0 : _a103.groups;
    if (strMatch) {
      return `str[${strMatch.length}]`;
    }
    if (this.components === null) {
      return this.type;
    }
    const arrayMatch = (_b2 = arrayRegEx.exec(this.type)) == null ? void 0 : _b2.groups;
    if (arrayMatch) {
      return `[${this.components[0].getSignature()};${arrayMatch.length}]`;
    }
    const typeArgumentsSignature = this.originalTypeArguments !== null ? `<${this.originalTypeArguments.map((a) => new _a22(this.abi, a).getSignature()).join(",")}>` : "";
    const componentsSignature = `(${this.components.map((c) => c.getSignature()).join(",")})`;
    return `${typeArgumentsSignature}${componentsSignature}`;
  }
}, __name7(_a22, "ResolvedAbiType"), _a22);
var _a23;
var VoidCoder = (_a23 = class extends Coder {
  constructor() {
    super("void", VOID_TYPE, 0);
  }
  encode(_value) {
    return new Uint8Array([]);
  }
  decode(_data, offset) {
    return [void 0, offset];
  }
}, __name7(_a23, "VoidCoder"), _a23);
function getCoders(components, options) {
  const { getCoder: getCoder2 } = options;
  return components.reduce((obj, component) => {
    const o3 = obj;
    o3[component.name] = getCoder2(component, options);
    return o3;
  }, {});
}
__name7(getCoders, "getCoders");
var getCoder = __name7((resolvedAbiType, _options) => {
  var _a103, _b2, _c, _d;
  switch (resolvedAbiType.type) {
    case U8_CODER_TYPE:
    case U16_CODER_TYPE:
    case U32_CODER_TYPE:
      return new NumberCoder(resolvedAbiType.type);
    case U64_CODER_TYPE:
    case RAW_PTR_CODER_TYPE:
      return new BigNumberCoder("u64");
    case U256_CODER_TYPE:
      return new BigNumberCoder("u256");
    case RAW_SLICE_CODER_TYPE:
      return new RawSliceCoder();
    case BOOL_CODER_TYPE:
      return new BooleanCoder();
    case B256_CODER_TYPE:
      return new B256Coder();
    case B512_CODER_TYPE:
      return new B512Coder();
    case BYTES_CODER_TYPE:
      return new ByteCoder();
    case STD_STRING_CODER_TYPE:
      return new StdStringCoder();
    case STR_SLICE_CODER_TYPE:
      return new StrSliceCoder();
    case VOID_TYPE:
      return new VoidCoder();
    default:
      break;
  }
  const stringMatch = (_a103 = stringRegEx.exec(resolvedAbiType.type)) == null ? void 0 : _a103.groups;
  if (stringMatch) {
    const length3 = parseInt(stringMatch.length, 10);
    return new StringCoder(length3);
  }
  const components = resolvedAbiType.components;
  const arrayMatch = (_b2 = arrayRegEx.exec(resolvedAbiType.type)) == null ? void 0 : _b2.groups;
  if (arrayMatch) {
    const length3 = parseInt(arrayMatch.length, 10);
    const arg = components[0];
    if (!arg) {
      throw new FuelError(
        ErrorCode.INVALID_COMPONENT,
        `The provided Array type is missing an item of 'component'.`
      );
    }
    const arrayElementCoder = getCoder(arg);
    return new ArrayCoder(arrayElementCoder, length3);
  }
  if (resolvedAbiType.type === VEC_CODER_TYPE) {
    const arg = findVectorBufferArgument(components);
    const argType = new ResolvedAbiType(resolvedAbiType.abi, arg);
    const itemCoder = getCoder(argType, { encoding: ENCODING_V1 });
    return new VecCoder(itemCoder);
  }
  const coderName = (_c = resolvedAbiType.type.match(fullNameRegExMatch)) == null ? void 0 : _c[0];
  const structMatch = structRegEx.test(resolvedAbiType.type);
  if (structMatch && coderName) {
    const coders = getCoders(components, { getCoder });
    return new StructCoder(coderName, coders);
  }
  const enumMatch = enumRegEx.test(resolvedAbiType.type);
  if (enumMatch && coderName) {
    const coders = getCoders(components, { getCoder });
    const isOptionEnum = resolvedAbiType.type === OPTION_CODER_TYPE;
    if (isOptionEnum) {
      return new OptionCoder(coderName, coders);
    }
    return new EnumCoder(coderName, coders);
  }
  const tupleMatch = (_d = tupleRegEx.exec(resolvedAbiType.type)) == null ? void 0 : _d.groups;
  if (tupleMatch) {
    const coders = components.map((component) => getCoder(component, { encoding: ENCODING_V1 }));
    return new TupleCoder(coders);
  }
  throw new FuelError(
    ErrorCode.CODER_NOT_FOUND,
    `Coder not found: ${JSON.stringify(resolvedAbiType)}.`
  );
}, "getCoder");
function getCoderForEncoding(encoding = ENCODING_V1) {
  switch (encoding) {
    case ENCODING_V1:
      return getCoder;
    default:
      throw new FuelError(
        ErrorCode.UNSUPPORTED_ENCODING_VERSION,
        `Encoding version ${encoding} is unsupported.`
      );
  }
}
__name7(getCoderForEncoding, "getCoderForEncoding");
var _a24;
var AbiCoder = (_a24 = class {
  static getCoder(abi2, argument, options = {
    padToWordSize: false
  }) {
    const resolvedAbiType = new ResolvedAbiType(abi2, argument);
    return getCoderForEncoding(options.encoding)(resolvedAbiType, options);
  }
  static encode(abi2, argument, value, options) {
    return this.getCoder(abi2, argument, options).encode(value);
  }
  static decode(abi2, argument, data, offset, options) {
    return this.getCoder(abi2, argument, options).decode(data, offset);
  }
}, __name7(_a24, "AbiCoder"), _a24);
var getFunctionInputs = __name7((params) => {
  const { jsonAbi, inputs } = params;
  let isMandatory = false;
  return inputs.reduceRight((result, input) => {
    const type3 = findTypeById(jsonAbi, input.type);
    isMandatory = isMandatory || type3.type !== VOID_TYPE && !optionRegEx.test(type3.type);
    return [{ ...input, isOptional: !isMandatory }, ...result];
  }, []);
}, "getFunctionInputs");
var padValuesWithUndefined = __name7((values3, inputs) => {
  if (values3.length >= inputs.length) {
    return values3;
  }
  const paddedValues = values3.slice();
  paddedValues.length = inputs.length;
  paddedValues.fill(void 0, values3.length);
  return paddedValues;
}, "padValuesWithUndefined");
var _a25;
var FunctionFragment = (_a25 = class {
  constructor(jsonAbi, fn) {
    __publicField(this, "signature");
    __publicField(this, "selector");
    __publicField(this, "selectorBytes");
    __publicField(this, "encoding");
    __publicField(this, "name");
    __publicField(this, "jsonFn");
    __publicField(this, "attributes");
    __publicField(this, "jsonAbiOld");
    __publicField(this, "jsonFnOld");
    this.jsonFn = fn;
    this.jsonAbiOld = jsonAbi;
    this.jsonFnOld = jsonAbi.functions.find((f2) => f2.name === fn.name);
    this.name = fn.name;
    this.signature = _a25.getSignature(this.jsonAbiOld, this.jsonFnOld);
    this.selector = _a25.getFunctionSelector(this.signature);
    this.selectorBytes = new StdStringCoder().encode(this.name);
    this.encoding = getEncodingVersion(jsonAbi.encoding);
    this.attributes = this.jsonFn.attributes ?? [];
  }
  static getSignature(abi2, fn) {
    const inputsSignatures = fn.inputs.map(
      (input) => new ResolvedAbiType(abi2, input).getSignature()
    );
    return `${fn.name}(${inputsSignatures.join(",")})`;
  }
  static getFunctionSelector(functionSignature) {
    const hashedFunctionSignature = sha2563(bufferFromString2(functionSignature, "utf-8"));
    return bn(hashedFunctionSignature.slice(0, 10)).toHex(8);
  }
  encodeArguments(values3) {
    const inputs = getFunctionInputs({ jsonAbi: this.jsonAbiOld, inputs: this.jsonFnOld.inputs });
    const mandatoryInputLength = inputs.filter((i) => !i.isOptional).length;
    if (values3.length < mandatoryInputLength) {
      throw new FuelError(
        ErrorCode.ABI_TYPES_AND_VALUES_MISMATCH,
        `Invalid number of arguments. Expected a minimum of ${mandatoryInputLength} arguments, received ${values3.length}`
      );
    }
    const coders = this.jsonFnOld.inputs.map(
      (t) => AbiCoder.getCoder(this.jsonAbiOld, t, {
        encoding: this.encoding
      })
    );
    const argumentValues = padValuesWithUndefined(values3, this.jsonFn.inputs);
    return new TupleCoder(coders).encode(argumentValues);
  }
  decodeArguments(data) {
    const bytes = arrayify(data);
    const nonVoidInputs = findNonVoidInputs(this.jsonAbiOld, this.jsonFnOld.inputs);
    if (nonVoidInputs.length === 0) {
      if (bytes.length === 0) {
        return void 0;
      }
      throw new FuelError(
        ErrorCode.DECODE_ERROR,
        `Types/values length mismatch during decode. ${JSON.stringify({
          count: {
            types: this.jsonFn.inputs.length,
            nonVoidInputs: nonVoidInputs.length,
            values: bytes.length
          },
          value: {
            args: this.jsonFn.inputs,
            nonVoidInputs,
            values: bytes
          }
        })}`
      );
    }
    const result = this.jsonFnOld.inputs.reduce(
      (obj, input) => {
        const coder = AbiCoder.getCoder(this.jsonAbiOld, input, { encoding: this.encoding });
        const [decodedValue, decodedOffset] = coder.decode(bytes, obj.offset);
        return {
          decoded: [...obj.decoded, decodedValue],
          offset: decodedOffset
        };
      },
      { decoded: [], offset: 0 }
    );
    return result.decoded;
  }
  decodeOutput(data) {
    const bytes = arrayify(data);
    const coder = AbiCoder.getCoder(this.jsonAbiOld, this.jsonFnOld.output, {
      encoding: this.encoding
    });
    return coder.decode(bytes, 0);
  }
  /**
   * Checks if the function is read-only i.e. it only reads from storage, does not write to it.
   *
   * @returns True if the function is read-only or pure, false otherwise.
   */
  isReadOnly() {
    var _a103;
    const storageAttribute = this.attributes.find((attr) => attr.name === "storage");
    return !((_a103 = storageAttribute == null ? void 0 : storageAttribute.arguments) == null ? void 0 : _a103.includes("write"));
  }
}, __name7(_a25, "FunctionFragment"), _a25);
var findTypeByConcreteId = __name7((types, id) => types.find((x) => x.concreteTypeId === id), "findTypeByConcreteId");
var findConcreteTypeById = __name7((abi2, id) => abi2.concreteTypes.find((x) => x.concreteTypeId === id), "findConcreteTypeById");
function finsertTypeIdByConcreteTypeId(abi2, types, id) {
  const concreteType = findConcreteTypeById(abi2, id);
  if (concreteType.metadataTypeId !== void 0) {
    return concreteType.metadataTypeId;
  }
  const type3 = findTypeByConcreteId(types, id);
  if (type3) {
    return type3.typeId;
  }
  types.push({
    typeId: types.length,
    type: concreteType.type,
    components: parseComponents(concreteType.components),
    concreteTypeId: id,
    typeParameters: concreteType.typeParameters ?? null,
    originalConcreteTypeId: concreteType == null ? void 0 : concreteType.concreteTypeId
  });
  return types.length - 1;
}
__name7(finsertTypeIdByConcreteTypeId, "finsertTypeIdByConcreteTypeId");
function parseFunctionTypeArguments(abi2, types, concreteType) {
  var _a103;
  return ((_a103 = concreteType.typeArguments) == null ? void 0 : _a103.map((cTypeId) => {
    const self = findConcreteTypeById(abi2, cTypeId);
    const type3 = !isNaN(cTypeId) ? cTypeId : finsertTypeIdByConcreteTypeId(abi2, types, cTypeId);
    return {
      name: "",
      type: type3,
      // originalTypeId: cTypeId,
      typeArguments: parseFunctionTypeArguments(abi2, types, self)
    };
  })) ?? null;
}
__name7(parseFunctionTypeArguments, "parseFunctionTypeArguments");
function parseConcreteType(abi2, types, concreteTypeId, name) {
  const type3 = finsertTypeIdByConcreteTypeId(abi2, types, concreteTypeId);
  const concrete = findConcreteTypeById(abi2, concreteTypeId);
  return {
    name: name ?? "",
    type: type3,
    // concreteTypeId,
    typeArguments: parseFunctionTypeArguments(abi2, types, concrete)
  };
}
__name7(parseConcreteType, "parseConcreteType");
function parseComponents(abi2, types, components) {
  return (components == null ? void 0 : components.map((component) => {
    const { typeId, name, typeArguments } = component;
    const type3 = !isNaN(typeId) ? typeId : finsertTypeIdByConcreteTypeId(abi2, types, typeId);
    return {
      name,
      type: type3,
      // originalTypeId: typeId,
      typeArguments: parseComponents(abi2, types, typeArguments)
    };
  })) ?? null;
}
__name7(parseComponents, "parseComponents");
function transpileAbi(abi2) {
  if (!abi2.specVersion) {
    return abi2;
  }
  const types = [];
  abi2.metadataTypes.forEach((m) => {
    const t = {
      typeId: m.metadataTypeId,
      type: m.type,
      components: m.components ?? (m.type === "()" ? [] : null),
      typeParameters: m.typeParameters ?? null
    };
    types.push(t);
  });
  types.forEach((t) => {
    t.components = parseComponents(abi2, types, t.components);
  });
  const functions = abi2.functions.map((fn) => {
    const inputs = fn.inputs.map(
      ({ concreteTypeId, name }) => parseConcreteType(abi2, types, concreteTypeId, name)
    );
    const output = parseConcreteType(abi2, types, fn.output, "");
    return { ...fn, inputs, output };
  });
  const configurables = abi2.configurables.map((conf) => ({
    name: conf.name,
    configurableType: parseConcreteType(abi2, types, conf.concreteTypeId),
    offset: conf.offset
  }));
  const loggedTypes = abi2.loggedTypes.map((log2) => ({
    logId: log2.logId,
    loggedType: parseConcreteType(abi2, types, log2.concreteTypeId)
  }));
  const transpiled = {
    encoding: abi2.encodingVersion,
    types,
    functions,
    loggedTypes,
    messagesTypes: abi2.messagesTypes,
    configurables
  };
  return transpiled;
}
__name7(transpileAbi, "transpileAbi");
var _a26;
var Interface = (_a26 = class {
  constructor(jsonAbi) {
    __publicField(this, "functions");
    __publicField(this, "configurables");
    __publicField(this, "jsonAbi");
    __publicField(this, "encoding");
    __publicField(this, "jsonAbiOld");
    this.jsonAbi = jsonAbi;
    this.encoding = getEncodingVersion(jsonAbi.encodingVersion);
    this.jsonAbiOld = transpileAbi(jsonAbi);
    this.functions = Object.fromEntries(
      this.jsonAbi.functions.map((fn) => [fn.name, new FunctionFragment(this.jsonAbiOld, fn)])
    );
    this.configurables = Object.fromEntries(this.jsonAbi.configurables.map((x) => [x.name, x]));
  }
  /**
   * Returns function fragment for a dynamic input.
   * @param nameOrSignatureOrSelector - name (e.g. 'transfer'), signature (e.g. 'transfer(address,uint256)') or selector (e.g. '0x00000000a9059cbb') of the function fragment
   */
  getFunction(nameOrSignatureOrSelector) {
    const fn = Object.values(this.functions).find(
      (f2) => f2.name === nameOrSignatureOrSelector || f2.signature === nameOrSignatureOrSelector || f2.selector === nameOrSignatureOrSelector
    );
    if (fn !== void 0) {
      return fn;
    }
    throw new FuelError(
      ErrorCode.FUNCTION_NOT_FOUND,
      `function ${nameOrSignatureOrSelector} not found: ${JSON.stringify(fn)}.`
    );
  }
  // Decode the result of a function call
  decodeFunctionResult(functionFragment, data) {
    const fragment = typeof functionFragment === "string" ? this.getFunction(functionFragment) : functionFragment;
    return fragment.decodeOutput(data);
  }
  decodeLog(data, logId) {
    const loggedType = this.jsonAbiOld.loggedTypes.find((type3) => type3.logId === logId);
    if (!loggedType) {
      throw new FuelError(
        ErrorCode.LOG_TYPE_NOT_FOUND,
        `Log type with logId '${logId}' doesn't exist in the ABI.`
      );
    }
    return AbiCoder.decode(this.jsonAbiOld, loggedType.loggedType, arrayify(data), 0, {
      encoding: this.encoding
    });
  }
  encodeConfigurable(name, value) {
    const configurable = this.jsonAbiOld.configurables.find((c) => c.name === name);
    if (!configurable) {
      throw new FuelError(
        ErrorCode.CONFIGURABLE_NOT_FOUND,
        `A configurable with the '${name}' was not found in the ABI.`
      );
    }
    return AbiCoder.encode(this.jsonAbiOld, configurable.configurableType, value, {
      encoding: this.encoding
    });
  }
  encodeType(concreteTypeId, value) {
    const typeArg = parseConcreteType(
      this.jsonAbi,
      this.jsonAbiOld.types,
      concreteTypeId,
      ""
    );
    return AbiCoder.encode(this.jsonAbiOld, typeArg, value, {
      encoding: this.encoding
    });
  }
  decodeType(concreteTypeId, data) {
    const typeArg = parseConcreteType(
      this.jsonAbi,
      this.jsonAbiOld.types,
      concreteTypeId,
      ""
    );
    return AbiCoder.decode(this.jsonAbiOld, typeArg, data, 0, { encoding: this.encoding });
  }
}, __name7(_a26, "Interface"), _a26);
var decodeScriptData = __name7((scriptData, abi2) => {
  const [amount, amountOffset] = new BigNumberCoder("u64").decode(scriptData, 0);
  const [assetId, assetIdOffset] = new B256Coder().decode(scriptData, amountOffset);
  const [contractId, contractIdOffset] = new B256Coder().decode(scriptData, assetIdOffset);
  const [functionSelector, functionSelectorOffset] = new StdStringCoder().decode(
    scriptData,
    contractIdOffset + WORD_SIZE + WORD_SIZE
  );
  const functionArgsBytes = scriptData.slice(functionSelectorOffset);
  const functionArgs = abi2 ? new Interface(abi2).getFunction(functionSelector).decodeArguments(functionArgsBytes) : void 0;
  return {
    amount,
    assetId,
    contractId,
    functionSelector,
    functionArgs
  };
}, "decodeScriptData");

// node_modules/@fuel-ts/address/node_modules/@noble/hashes/esm/_assert.js
function isBytes3(a) {
  return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
}
function abytes3(b, ...lengths) {
  if (!isBytes3(b))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b.length);
}
function aexists3(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function aoutput3(out, instance) {
  abytes3(out);
  const min3 = instance.outputLen;
  if (out.length < min3) {
    throw new Error("digestInto() expects output buffer of length at least " + min3);
  }
}

// node_modules/@fuel-ts/address/node_modules/@noble/hashes/esm/crypto.js
var crypto4 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;

// node_modules/@fuel-ts/address/node_modules/@noble/hashes/esm/utils.js
function createView3(arr) {
  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
}
function rotr3(word, shift) {
  return word << 32 - shift | word >>> shift;
}
var isLE3 = (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
var hexes3 = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
function utf8ToBytes3(str) {
  if (typeof str !== "string")
    throw new Error("utf8ToBytes expected string, got " + typeof str);
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes4(data) {
  if (typeof data === "string")
    data = utf8ToBytes3(data);
  abytes3(data);
  return data;
}
var Hash3 = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function wrapConstructor3(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes4(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}

// node_modules/@fuel-ts/address/node_modules/@noble/hashes/esm/_md.js
function setBigUint643(view3, byteOffset, value, isLE5) {
  if (typeof view3.setBigUint64 === "function")
    return view3.setBigUint64(byteOffset, value, isLE5);
  const _32n2 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n2 & _u32_max);
  const wl = Number(value & _u32_max);
  const h = isLE5 ? 4 : 0;
  const l = isLE5 ? 0 : 4;
  view3.setUint32(byteOffset + h, wh, isLE5);
  view3.setUint32(byteOffset + l, wl, isLE5);
}
function Chi3(a, b, c) {
  return a & b ^ ~a & c;
}
function Maj3(a, b, c) {
  return a & b ^ a & c ^ b & c;
}
var HashMD3 = class extends Hash3 {
  constructor(blockLen, outputLen, padOffset, isLE5) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE5;
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView3(this.buffer);
  }
  update(data) {
    aexists3(this);
    const { view: view3, buffer, blockLen } = this;
    data = toBytes4(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take3 = Math.min(blockLen - this.pos, len - pos);
      if (take3 === blockLen) {
        const dataView = createView3(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer.set(data.subarray(pos, pos + take3), this.pos);
      this.pos += take3;
      pos += take3;
      if (this.pos === blockLen) {
        this.process(view3, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    aexists3(this);
    aoutput3(out, this);
    this.finished = true;
    const { buffer, view: view3, blockLen, isLE: isLE5 } = this;
    let { pos } = this;
    buffer[pos++] = 128;
    this.buffer.subarray(pos).fill(0);
    if (this.padOffset > blockLen - pos) {
      this.process(view3, 0);
      pos = 0;
    }
    for (let i = pos; i < blockLen; i++)
      buffer[i] = 0;
    setBigUint643(view3, blockLen - 8, BigInt(this.length * 8), isLE5);
    this.process(view3, 0);
    const oview = createView3(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state = this.get();
    if (outLen > state.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i = 0; i < outLen; i++)
      oview.setUint32(4 * i, state[i], isLE5);
  }
  digest() {
    const { buffer, outputLen } = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    to || (to = new this.constructor());
    to.set(...this.get());
    const { blockLen, buffer, length: length3, finished, destroyed, pos } = this;
    to.length = length3;
    to.pos = pos;
    to.finished = finished;
    to.destroyed = destroyed;
    if (length3 % blockLen)
      to.buffer.set(buffer);
    return to;
  }
};

// node_modules/@fuel-ts/address/node_modules/@noble/hashes/esm/sha256.js
var SHA256_K3 = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var SHA256_IV3 = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
var SHA256_W3 = new Uint32Array(64);
var SHA2563 = class extends HashMD3 {
  constructor() {
    super(64, 32, 8, false);
    this.A = SHA256_IV3[0] | 0;
    this.B = SHA256_IV3[1] | 0;
    this.C = SHA256_IV3[2] | 0;
    this.D = SHA256_IV3[3] | 0;
    this.E = SHA256_IV3[4] | 0;
    this.F = SHA256_IV3[5] | 0;
    this.G = SHA256_IV3[6] | 0;
    this.H = SHA256_IV3[7] | 0;
  }
  get() {
    const { A, B, C, D, E, F, G, H } = this;
    return [A, B, C, D, E, F, G, H];
  }
  // prettier-ignore
  set(A, B, C, D, E, F, G, H) {
    this.A = A | 0;
    this.B = B | 0;
    this.C = C | 0;
    this.D = D | 0;
    this.E = E | 0;
    this.F = F | 0;
    this.G = G | 0;
    this.H = H | 0;
  }
  process(view3, offset) {
    for (let i = 0; i < 16; i++, offset += 4)
      SHA256_W3[i] = view3.getUint32(offset, false);
    for (let i = 16; i < 64; i++) {
      const W15 = SHA256_W3[i - 15];
      const W2 = SHA256_W3[i - 2];
      const s0 = rotr3(W15, 7) ^ rotr3(W15, 18) ^ W15 >>> 3;
      const s1 = rotr3(W2, 17) ^ rotr3(W2, 19) ^ W2 >>> 10;
      SHA256_W3[i] = s1 + SHA256_W3[i - 7] + s0 + SHA256_W3[i - 16] | 0;
    }
    let { A, B, C, D, E, F, G, H } = this;
    for (let i = 0; i < 64; i++) {
      const sigma1 = rotr3(E, 6) ^ rotr3(E, 11) ^ rotr3(E, 25);
      const T1 = H + sigma1 + Chi3(E, F, G) + SHA256_K3[i] + SHA256_W3[i] | 0;
      const sigma0 = rotr3(A, 2) ^ rotr3(A, 13) ^ rotr3(A, 22);
      const T2 = sigma0 + Maj3(A, B, C) | 0;
      H = G;
      G = F;
      F = E;
      E = D + T1 | 0;
      D = C;
      C = B;
      B = A;
      A = T1 + T2 | 0;
    }
    A = A + this.A | 0;
    B = B + this.B | 0;
    C = C + this.C | 0;
    D = D + this.D | 0;
    E = E + this.E | 0;
    F = F + this.F | 0;
    G = G + this.G | 0;
    H = H + this.H | 0;
    this.set(A, B, C, D, E, F, G, H);
  }
  roundClean() {
    SHA256_W3.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    this.buffer.fill(0);
  }
};
var SHA2243 = class extends SHA2563 {
  constructor() {
    super();
    this.A = 3238371032 | 0;
    this.B = 914150663 | 0;
    this.C = 812702999 | 0;
    this.D = 4144912697 | 0;
    this.E = 4290775857 | 0;
    this.F = 1750603025 | 0;
    this.G = 1694076839 | 0;
    this.H = 3204075428 | 0;
    this.outputLen = 28;
  }
};
var sha2564 = wrapConstructor3(() => new SHA2563());
var sha2243 = wrapConstructor3(() => new SHA2243());

// node_modules/@fuel-ts/address/dist/index.mjs
var __defProp8 = Object.defineProperty;
var __name8 = (target, value) => __defProp8(target, "name", { value, configurable: true });
function isB256(address) {
  return address.length === 66 && /(0x)[0-9a-f]{64}$/i.test(address);
}
__name8(isB256, "isB256");
function isPublicKey(address) {
  return address.length === 130 && /(0x)[0-9a-f]{128}$/i.test(address);
}
__name8(isPublicKey, "isPublicKey");
function isEvmAddress(address) {
  return address.length === 42 && /(0x)[0-9a-f]{40}$/i.test(address);
}
__name8(isEvmAddress, "isEvmAddress");
function normalizeB256(address) {
  return address.toLowerCase();
}
__name8(normalizeB256, "normalizeB256");
function isAddress(address) {
  return "b256Address" in address;
}
__name8(isAddress, "isAddress");
var addressify = __name8((addressLike) => {
  if (isAddress(addressLike)) {
    return addressLike;
  }
  if ("address" in addressLike && isAddress(addressLike.address)) {
    return addressLike.address;
  }
  if ("id" in addressLike && isAddress(addressLike.id)) {
    return addressLike.id;
  }
  throw new FuelError(FuelError.CODES.INVALID_ADDRESS, "Invalid address");
}, "addressify");
var getRandomB256 = __name8(() => hexlify(randomBytes2(32)), "getRandomB256");
var toB256AddressEvm = __name8((b256) => {
  try {
    if (!isB256(b256)) {
      throw new FuelError(FuelError.CODES.INVALID_B256_ADDRESS, `Invalid B256 Address: ${b256}.`);
    }
    const evmBytes = arrayify(b256).slice(12);
    const paddedBytes = new Uint8Array(12).fill(0);
    return hexlify(concat([paddedBytes, evmBytes]));
  } catch (error) {
    throw new FuelError(
      FuelError.CODES.PARSE_FAILED,
      `Cannot generate EVM Address B256 from: ${b256}.`
    );
  }
}, "toB256AddressEvm");
var padFirst12BytesOfEvmAddress = __name8((address) => {
  if (!isEvmAddress(address)) {
    throw new FuelError(FuelError.CODES.INVALID_EVM_ADDRESS, "Invalid EVM address format.");
  }
  return address.replace("0x", "0x000000000000000000000000");
}, "padFirst12BytesOfEvmAddress");
var fromEvmAddressToB256 = __name8((address) => padFirst12BytesOfEvmAddress(address), "fromEvmAddressToB256");
var fromPublicKeyToB256 = __name8((publicKey) => {
  if (!isPublicKey(publicKey)) {
    throw new FuelError(FuelError.CODES.INVALID_PUBLIC_KEY, `Invalid Public Key: ${publicKey}.`);
  }
  return hexlify(sha2564(arrayify(publicKey)));
}, "fromPublicKeyToB256");
var fromDynamicInputToB256 = __name8((address) => {
  if (typeof address !== "string" && "toB256" in address) {
    return address.toB256();
  }
  if (isB256(address)) {
    return address;
  }
  if (isPublicKey(address)) {
    return fromPublicKeyToB256(address);
  }
  if (isEvmAddress(address)) {
    return fromEvmAddressToB256(address);
  }
  throw new FuelError(
    FuelError.CODES.PARSE_FAILED,
    `Unknown address format: only 'B256', 'Public Key (512)', or 'EVM Address' are supported.`
  );
}, "fromDynamicInputToB256");
var _a27;
var Address = (_a27 = class {
  // #endregion address-2
  /**
   * @param address - A B256 address, public key, EVM address, or Address instance
   */
  constructor(address) {
    // #region address-2
    __publicField(this, "b256Address");
    const b256Address = fromDynamicInputToB256(address);
    this.b256Address = normalizeB256(b256Address);
  }
  /**
   * Takes an B256 Address and returns back an checksum address.
   * The implementation follows the ERC-55 https://github.com/ethereum/ercs/blob/master/ERCS/erc-55.md.
   *
   * @returns A new `ChecksumAddress` instance
   */
  toChecksum() {
    return _a27.toChecksum(this.b256Address);
  }
  /**
   * Returns the `b256Address` property
   */
  toAddress() {
    return this.b256Address;
  }
  /**
   * Returns the B256 hash address as a string
   *
   * @returns The B256 address
   */
  toB256() {
    return this.b256Address;
  }
  /**
   * Returns the B256 hash address as a Uint8Array
   *
   * @returns The B256 address as a Uint8Array
   */
  toBytes() {
    return arrayify(this.b256Address);
  }
  /**
   * Returns the B256 hash address as a string
   *
   * @returns The B256 address
   */
  toHexString() {
    return this.toB256();
  }
  /**
   * returns the address `checksum` as a string
   *
   * @returns The `b256Address` property as a string
   */
  toString() {
    return this.toChecksum();
  }
  /**
   * Converts and returns the `b256Address` property as a string
   * @returns The `b256Address` property as a JSON string
   */
  toJSON() {
    return this.b256Address;
  }
  /**
   * Converts to an EVM address
   *
   * @returns an {@link EvmAddress | `EvmAddress`} representation of the address
   */
  toEvmAddress() {
    return {
      bits: toB256AddressEvm(this.b256Address)
    };
  }
  /**
   * Wraps the B256 property and returns as an `AssetId`.
   * @returns The B256 property as an {@link AssetId | `AssetId`}
   */
  toAssetId() {
    return {
      bits: this.b256Address
    };
  }
  /**
   * Wraps the B256 address `checksum` and returns it as a string
   * @returns The B256 address `checksum` as a string
   */
  valueOf() {
    return this.toChecksum();
  }
  /**
   * Compares this the `b256Address` property to another for direct equality
   * @param other - Another address to compare against
   * @returns The equality of the comparison
   */
  equals(other) {
    return this.toChecksum() === other.toChecksum();
  }
  /**
   * Takes a Public Key, hashes it, and creates an `Address`
   *
   * @param publicKey - A wallets public key
   * @returns A new `Address` instance
   *
   * @deprecated Use `new Address` instead
   */
  static fromPublicKey(publicKey) {
    const b256Address = fromPublicKeyToB256(publicKey);
    return new _a27(b256Address);
  }
  /**
   * Takes a B256 Address and creates an `Address`
   *
   * @param b256Address - A b256 hash
   * @returns A new `Address` instance
   *
   * @deprecated Use `new Address` instead
   */
  static fromB256(b256Address) {
    if (!isB256(b256Address)) {
      throw new FuelError(
        FuelError.CODES.INVALID_B256_ADDRESS,
        `Invalid B256 Address: ${b256Address}.`
      );
    }
    return new _a27(b256Address);
  }
  /**
   * Creates an `Address` with a randomized `b256Address` property
   *
   * @returns A new `Address` instance
   */
  static fromRandom() {
    return new _a27(getRandomB256());
  }
  /**
   * Takes an ambiguous string and attempts to create an `Address`
   *
   * @param address - An ambiguous string
   * @returns A new `Address` instance
   *
   * @deprecated Use `new Address` instead
   */
  static fromString(address) {
    return new _a27(address);
  }
  /**
   * Takes an ambiguous string or address and creates an `Address`
   *
   * @returns a new `Address` instance
   *
   * @deprecated Use `new Address` instead
   */
  static fromAddressOrString(address) {
    return new _a27(address);
  }
  /**
   * Takes a dynamic string or `Address` and creates an `Address`
   *
   * @param addressId - A string containing B256, or Public Key
   * @throws Error - Unknown address if the format is not recognized
   * @returns A new `Address` instance
   *
   * @deprecated Use `new Address` instead
   */
  static fromDynamicInput(address) {
    return new _a27(address);
  }
  /**
   * Takes an Evm Address and returns back an `Address`
   *
   * @returns A new `Address` instance
   *
   * @deprecated Use `new Address` instead
   */
  static fromEvmAddress(evmAddress) {
    if (!isEvmAddress(evmAddress)) {
      throw new FuelError(
        FuelError.CODES.INVALID_EVM_ADDRESS,
        `Invalid Evm Address: ${evmAddress}.`
      );
    }
    return new _a27(evmAddress);
  }
  /**
   * Takes an ChecksumAddress and validates if it is a valid checksum address.
   *
   * @returns A `boolean` instance indicating if the address is valid.
   */
  static isChecksumValid(address) {
    let addressParsed = address;
    if (!address.startsWith("0x")) {
      addressParsed = `0x${address}`;
    }
    if (addressParsed.trim().length !== 66) {
      return false;
    }
    return _a27.toChecksum(hexlify(addressParsed)) === addressParsed;
  }
  /** @hidden */
  static toChecksum(address) {
    if (!isB256(address)) {
      throw new FuelError(
        FuelError.CODES.INVALID_B256_ADDRESS,
        `Invalid B256 Address: ${address}.`
      );
    }
    const addressHex = hexlify(address).toLowerCase().slice(2);
    const checksum = sha2564(addressHex);
    let ret2 = "0x";
    for (let i = 0; i < 32; ++i) {
      const byte = checksum[i];
      const ha = addressHex.charAt(i * 2);
      const hb = addressHex.charAt(i * 2 + 1);
      ret2 += (byte & 240) >= 128 ? ha.toUpperCase() : ha;
      ret2 += (byte & 15) >= 8 ? hb.toUpperCase() : hb;
    }
    return ret2;
  }
}, __name8(_a27, "Address"), _a27);

// node_modules/@fuel-ts/transactions/dist/index.mjs
var __defProp9 = Object.defineProperty;
var __name9 = (target, value) => __defProp9(target, "name", { value, configurable: true });
var _paddingLength, _a28;
var ByteArrayCoder = (_a28 = class extends Coder {
  constructor(length3) {
    const paddingLength = (8 - length3 % 8) % 8;
    const encodedLength = length3 + paddingLength;
    super(
      "ByteArray",
      // While this might sound like a [u8; N] coder it's actually not.
      // A [u8; N] coder would pad every u8 to 8 bytes which would
      // make every u8 have the same size as a u64.
      // We are packing four u8s into u64s here, avoiding this padding.
      `[u64; ${encodedLength / 4}]`,
      encodedLength
    );
    __publicField(this, "length");
    __privateAdd(this, _paddingLength);
    this.length = length3;
    __privateSet(this, _paddingLength, paddingLength);
  }
  encode(value) {
    const parts = [];
    const data = arrayify(value);
    parts.push(data);
    if (__privateGet(this, _paddingLength)) {
      parts.push(new Uint8Array(__privateGet(this, _paddingLength)));
    }
    return concat(parts);
  }
  decode(data, offset) {
    let decoded;
    let o3 = offset;
    [decoded, o3] = [hexlify(data.slice(o3, o3 + this.length)), o3 + this.length];
    const value = decoded;
    if (__privateGet(this, _paddingLength)) {
      [decoded, o3] = [null, o3 + __privateGet(this, _paddingLength)];
    }
    return [value, o3];
  }
}, _paddingLength = new WeakMap(), __name9(_a28, "ByteArrayCoder"), _a28);
var _a29;
var TxPointerCoder = (_a29 = class extends StructCoder {
  constructor() {
    super("TxPointer", {
      blockHeight: new NumberCoder("u32", { padToWordSize: true }),
      txIndex: new NumberCoder("u16", { padToWordSize: true })
    });
  }
  static decodeFromGqlScalar(value) {
    if (value.length !== 12) {
      throw new FuelError(
        ErrorCode.DECODE_ERROR,
        `Invalid TxPointer scalar string length ${value.length}. It must have length 12.`
      );
    }
    const [blockHeight, txIndex] = [value.substring(0, 8), value.substring(8)];
    return {
      blockHeight: parseInt(blockHeight, 16),
      txIndex: parseInt(txIndex, 16)
    };
  }
}, __name9(_a29, "TxPointerCoder"), _a29);
var InputType = ((InputType2) => {
  InputType2[InputType2["Coin"] = 0] = "Coin";
  InputType2[InputType2["Contract"] = 1] = "Contract";
  InputType2[InputType2["Message"] = 2] = "Message";
  return InputType2;
})(InputType || {});
var _a30;
var InputCoinCoder = (_a30 = class extends Coder {
  constructor() {
    super("InputCoin", "struct InputCoin", 0);
  }
  encode(value) {
    const parts = [];
    parts.push(new B256Coder().encode(value.txID));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.outputIndex));
    parts.push(new B256Coder().encode(value.owner));
    parts.push(new BigNumberCoder("u64").encode(value.amount));
    parts.push(new B256Coder().encode(value.assetId));
    parts.push(new TxPointerCoder().encode(value.txPointer));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.witnessIndex));
    parts.push(new BigNumberCoder("u64").encode(value.predicateGasUsed));
    parts.push(new BigNumberCoder("u64").encode(value.predicateLength));
    parts.push(new BigNumberCoder("u64").encode(value.predicateDataLength));
    parts.push(new ByteArrayCoder(value.predicateLength.toNumber()).encode(value.predicate));
    parts.push(
      new ByteArrayCoder(value.predicateDataLength.toNumber()).encode(value.predicateData)
    );
    return concat(parts);
  }
  decode(data, offset) {
    let decoded;
    let o3 = offset;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const txID = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const outputIndex = decoded;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const owner = decoded;
    [decoded, o3] = new BigNumberCoder("u64").decode(data, o3);
    const amount = decoded;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const assetId = decoded;
    [decoded, o3] = new TxPointerCoder().decode(data, o3);
    const txPointer = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const witnessIndex = Number(decoded);
    [decoded, o3] = new BigNumberCoder("u64").decode(data, o3);
    const predicateGasUsed = decoded;
    [decoded, o3] = new BigNumberCoder("u64").decode(data, o3);
    const predicateLength = decoded;
    [decoded, o3] = new BigNumberCoder("u64").decode(data, o3);
    const predicateDataLength = decoded;
    [decoded, o3] = new ByteArrayCoder(predicateLength.toNumber()).decode(data, o3);
    const predicate = decoded;
    [decoded, o3] = new ByteArrayCoder(predicateDataLength.toNumber()).decode(data, o3);
    const predicateData = decoded;
    return [
      {
        type: 0,
        txID,
        outputIndex,
        owner,
        amount,
        assetId,
        txPointer,
        witnessIndex,
        predicateGasUsed,
        predicateLength,
        predicateDataLength,
        predicate,
        predicateData
      },
      o3
    ];
  }
}, __name9(_a30, "InputCoinCoder"), _a30);
var _a31;
var InputContractCoder = (_a31 = class extends Coder {
  constructor() {
    super("InputContract", "struct InputContract", 0);
  }
  encode(value) {
    const parts = [];
    parts.push(new B256Coder().encode(value.txID));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.outputIndex));
    parts.push(new B256Coder().encode(value.balanceRoot));
    parts.push(new B256Coder().encode(value.stateRoot));
    parts.push(new TxPointerCoder().encode(value.txPointer));
    parts.push(new B256Coder().encode(value.contractID));
    return concat(parts);
  }
  decode(data, offset) {
    let decoded;
    let o3 = offset;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const txID = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const outputIndex = decoded;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const balanceRoot = decoded;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const stateRoot = decoded;
    [decoded, o3] = new TxPointerCoder().decode(data, o3);
    const txPointer = decoded;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const contractID = decoded;
    return [
      {
        type: 1,
        txID,
        outputIndex,
        balanceRoot,
        stateRoot,
        txPointer,
        contractID
      },
      o3
    ];
  }
}, __name9(_a31, "InputContractCoder"), _a31);
var _a32;
var InputMessageCoder = (_a32 = class extends Coder {
  constructor() {
    super("InputMessage", "struct InputMessage", 0);
  }
  static getMessageId(value) {
    const parts = [];
    parts.push(new ByteArrayCoder(32).encode(value.sender));
    parts.push(new ByteArrayCoder(32).encode(value.recipient));
    parts.push(new ByteArrayCoder(32).encode(value.nonce));
    parts.push(new BigNumberCoder("u64").encode(value.amount));
    parts.push(arrayify(value.data || "0x"));
    return sha2563(concat(parts));
  }
  static encodeData(messageData) {
    const bytes = arrayify(messageData || "0x");
    const dataLength = bytes.length;
    return new ByteArrayCoder(dataLength).encode(bytes);
  }
  encode(value) {
    const parts = [];
    const data = _a32.encodeData(value.data);
    parts.push(new ByteArrayCoder(32).encode(value.sender));
    parts.push(new ByteArrayCoder(32).encode(value.recipient));
    parts.push(new BigNumberCoder("u64").encode(value.amount));
    parts.push(new ByteArrayCoder(32).encode(value.nonce));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.witnessIndex));
    parts.push(new BigNumberCoder("u64").encode(value.predicateGasUsed));
    parts.push(new BigNumberCoder("u64").encode(data.length));
    parts.push(new BigNumberCoder("u64").encode(value.predicateLength));
    parts.push(new BigNumberCoder("u64").encode(value.predicateDataLength));
    parts.push(new ByteArrayCoder(data.length).encode(data));
    parts.push(new ByteArrayCoder(value.predicateLength.toNumber()).encode(value.predicate));
    parts.push(
      new ByteArrayCoder(value.predicateDataLength.toNumber()).encode(value.predicateData)
    );
    return concat(parts);
  }
  static decodeData(messageData) {
    const bytes = arrayify(messageData);
    const dataLength = bytes.length;
    const [data] = new ByteArrayCoder(dataLength).decode(bytes, 0);
    return arrayify(data);
  }
  decode(data, offset) {
    let decoded;
    let o3 = offset;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const sender = decoded;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const recipient = decoded;
    [decoded, o3] = new BigNumberCoder("u64").decode(data, o3);
    const amount = decoded;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const nonce = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const witnessIndex = Number(decoded);
    [decoded, o3] = new BigNumberCoder("u64").decode(data, o3);
    const predicateGasUsed = decoded;
    [decoded, o3] = new NumberCoder("u32", { padToWordSize: true }).decode(data, o3);
    const dataLength = decoded;
    [decoded, o3] = new BigNumberCoder("u64").decode(data, o3);
    const predicateLength = decoded;
    [decoded, o3] = new BigNumberCoder("u64").decode(data, o3);
    const predicateDataLength = decoded;
    [decoded, o3] = new ByteArrayCoder(dataLength).decode(data, o3);
    const messageData = decoded;
    [decoded, o3] = new ByteArrayCoder(predicateLength.toNumber()).decode(data, o3);
    const predicate = decoded;
    [decoded, o3] = new ByteArrayCoder(predicateDataLength.toNumber()).decode(data, o3);
    const predicateData = decoded;
    return [
      {
        type: 2,
        sender,
        recipient,
        amount,
        witnessIndex,
        nonce,
        predicateGasUsed,
        dataLength,
        predicateLength,
        predicateDataLength,
        data: messageData,
        predicate,
        predicateData
      },
      o3
    ];
  }
}, __name9(_a32, "InputMessageCoder"), _a32);
var _a33;
var InputCoder = (_a33 = class extends Coder {
  constructor() {
    super("Input", "struct Input", 0);
  }
  encode(value) {
    const parts = [];
    parts.push(new NumberCoder("u8", { padToWordSize: true }).encode(value.type));
    const { type: type3 } = value;
    switch (type3) {
      case 0: {
        parts.push(new InputCoinCoder().encode(value));
        break;
      }
      case 1: {
        parts.push(new InputContractCoder().encode(value));
        break;
      }
      case 2: {
        parts.push(new InputMessageCoder().encode(value));
        break;
      }
      default: {
        throw new FuelError(
          ErrorCode.INVALID_TRANSACTION_INPUT,
          `Invalid transaction input type: ${type3}.`
        );
      }
    }
    return concat(parts);
  }
  decode(data, offset) {
    let decoded;
    let o3 = offset;
    [decoded, o3] = new NumberCoder("u8", { padToWordSize: true }).decode(data, o3);
    const type3 = decoded;
    switch (type3) {
      case 0: {
        [decoded, o3] = new InputCoinCoder().decode(data, o3);
        return [decoded, o3];
      }
      case 1: {
        [decoded, o3] = new InputContractCoder().decode(data, o3);
        return [decoded, o3];
      }
      case 2: {
        [decoded, o3] = new InputMessageCoder().decode(data, o3);
        return [decoded, o3];
      }
      default: {
        throw new FuelError(
          ErrorCode.INVALID_TRANSACTION_INPUT,
          `Invalid transaction input type: ${type3}.`
        );
      }
    }
  }
}, __name9(_a33, "InputCoder"), _a33);
var OutputType = ((OutputType2) => {
  OutputType2[OutputType2["Coin"] = 0] = "Coin";
  OutputType2[OutputType2["Contract"] = 1] = "Contract";
  OutputType2[OutputType2["Change"] = 2] = "Change";
  OutputType2[OutputType2["Variable"] = 3] = "Variable";
  OutputType2[OutputType2["ContractCreated"] = 4] = "ContractCreated";
  return OutputType2;
})(OutputType || {});
var _a34;
var OutputCoinCoder = (_a34 = class extends Coder {
  constructor() {
    super("OutputCoin", "struct OutputCoin", 0);
  }
  encode(value) {
    const parts = [];
    parts.push(new B256Coder().encode(value.to));
    parts.push(new BigNumberCoder("u64").encode(value.amount));
    parts.push(new B256Coder().encode(value.assetId));
    return concat(parts);
  }
  decode(data, offset) {
    let decoded;
    let o3 = offset;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const to = decoded;
    [decoded, o3] = new BigNumberCoder("u64").decode(data, o3);
    const amount = decoded;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const assetId = decoded;
    return [
      {
        type: 0,
        to,
        amount,
        assetId
      },
      o3
    ];
  }
}, __name9(_a34, "OutputCoinCoder"), _a34);
var _a35;
var OutputContractCoder = (_a35 = class extends Coder {
  constructor() {
    super("OutputContract", "struct OutputContract", 0);
  }
  encode(value) {
    const parts = [];
    parts.push(new NumberCoder("u8", { padToWordSize: true }).encode(value.inputIndex));
    parts.push(new B256Coder().encode(value.balanceRoot));
    parts.push(new B256Coder().encode(value.stateRoot));
    return concat(parts);
  }
  decode(data, offset) {
    let decoded;
    let o3 = offset;
    [decoded, o3] = new NumberCoder("u8", { padToWordSize: true }).decode(data, o3);
    const inputIndex = decoded;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const balanceRoot = decoded;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const stateRoot = decoded;
    return [
      {
        type: 1,
        inputIndex,
        balanceRoot,
        stateRoot
      },
      o3
    ];
  }
}, __name9(_a35, "OutputContractCoder"), _a35);
var _a36;
var OutputChangeCoder = (_a36 = class extends Coder {
  constructor() {
    super("OutputChange", "struct OutputChange", 0);
  }
  encode(value) {
    const parts = [];
    parts.push(new B256Coder().encode(value.to));
    parts.push(new BigNumberCoder("u64").encode(value.amount));
    parts.push(new B256Coder().encode(value.assetId));
    return concat(parts);
  }
  decode(data, offset) {
    let decoded;
    let o3 = offset;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const to = decoded;
    [decoded, o3] = new BigNumberCoder("u64").decode(data, o3);
    const amount = decoded;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const assetId = decoded;
    return [
      {
        type: 2,
        to,
        amount,
        assetId
      },
      o3
    ];
  }
}, __name9(_a36, "OutputChangeCoder"), _a36);
var _a37;
var OutputVariableCoder = (_a37 = class extends Coder {
  constructor() {
    super("OutputVariable", "struct OutputVariable", 0);
  }
  encode(value) {
    const parts = [];
    parts.push(new B256Coder().encode(value.to));
    parts.push(new BigNumberCoder("u64").encode(value.amount));
    parts.push(new B256Coder().encode(value.assetId));
    return concat(parts);
  }
  decode(data, offset) {
    let decoded;
    let o3 = offset;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const to = decoded;
    [decoded, o3] = new BigNumberCoder("u64").decode(data, o3);
    const amount = decoded;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const assetId = decoded;
    return [
      {
        type: 3,
        to,
        amount,
        assetId
      },
      o3
    ];
  }
}, __name9(_a37, "OutputVariableCoder"), _a37);
var _a38;
var OutputContractCreatedCoder = (_a38 = class extends Coder {
  constructor() {
    super("OutputContractCreated", "struct OutputContractCreated", 0);
  }
  encode(value) {
    const parts = [];
    parts.push(new B256Coder().encode(value.contractId));
    parts.push(new B256Coder().encode(value.stateRoot));
    return concat(parts);
  }
  decode(data, offset) {
    let decoded;
    let o3 = offset;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const contractId = decoded;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const stateRoot = decoded;
    return [
      {
        type: 4,
        contractId,
        stateRoot
      },
      o3
    ];
  }
}, __name9(_a38, "OutputContractCreatedCoder"), _a38);
var _a39;
var OutputCoder = (_a39 = class extends Coder {
  constructor() {
    super("Output", " struct Output", 0);
  }
  encode(value) {
    const parts = [];
    parts.push(new NumberCoder("u8", { padToWordSize: true }).encode(value.type));
    const { type: type3 } = value;
    switch (type3) {
      case 0: {
        parts.push(new OutputCoinCoder().encode(value));
        break;
      }
      case 1: {
        parts.push(new OutputContractCoder().encode(value));
        break;
      }
      case 2: {
        parts.push(new OutputChangeCoder().encode(value));
        break;
      }
      case 3: {
        parts.push(new OutputVariableCoder().encode(value));
        break;
      }
      case 4: {
        parts.push(new OutputContractCreatedCoder().encode(value));
        break;
      }
      default: {
        throw new FuelError(
          ErrorCode.INVALID_TRANSACTION_OUTPUT,
          `Invalid transaction output type: ${type3}.`
        );
      }
    }
    return concat(parts);
  }
  decode(data, offset) {
    let decoded;
    let o3 = offset;
    [decoded, o3] = new NumberCoder("u8", { padToWordSize: true }).decode(data, o3);
    const type3 = decoded;
    switch (type3) {
      case 0: {
        [decoded, o3] = new OutputCoinCoder().decode(data, o3);
        return [decoded, o3];
      }
      case 1: {
        [decoded, o3] = new OutputContractCoder().decode(data, o3);
        return [decoded, o3];
      }
      case 2: {
        [decoded, o3] = new OutputChangeCoder().decode(data, o3);
        return [decoded, o3];
      }
      case 3: {
        [decoded, o3] = new OutputVariableCoder().decode(data, o3);
        return [decoded, o3];
      }
      case 4: {
        [decoded, o3] = new OutputContractCreatedCoder().decode(data, o3);
        return [decoded, o3];
      }
      default: {
        throw new FuelError(
          ErrorCode.INVALID_TRANSACTION_OUTPUT,
          `Invalid transaction output type: ${type3}.`
        );
      }
    }
  }
}, __name9(_a39, "OutputCoder"), _a39);
var PolicyType = ((PolicyType2) => {
  PolicyType2[PolicyType2["Tip"] = 1] = "Tip";
  PolicyType2[PolicyType2["WitnessLimit"] = 2] = "WitnessLimit";
  PolicyType2[PolicyType2["Maturity"] = 4] = "Maturity";
  PolicyType2[PolicyType2["MaxFee"] = 8] = "MaxFee";
  PolicyType2[PolicyType2["Expiration"] = 16] = "Expiration";
  return PolicyType2;
})(PolicyType || {});
var sortPolicies = __name9((policies) => policies.sort((a, b) => a.type - b.type), "sortPolicies");
function validateDuplicatedPolicies(policies) {
  const seenTypes = /* @__PURE__ */ new Set();
  policies.forEach((policy) => {
    if (seenTypes.has(policy.type)) {
      throw new FuelError(
        ErrorCode.DUPLICATED_POLICY,
        `Duplicate policy type found: ${8}`
      );
    }
    seenTypes.add(policy.type);
  });
}
__name9(validateDuplicatedPolicies, "validateDuplicatedPolicies");
var _a40;
var PoliciesCoder = (_a40 = class extends Coder {
  constructor() {
    super("Policies", "array Policy", 0);
  }
  encode(policies) {
    validateDuplicatedPolicies(policies);
    const sortedPolicies = sortPolicies(policies);
    const parts = [];
    sortedPolicies.forEach(({ data, type: type3 }) => {
      switch (type3) {
        case 8:
        case 1:
        case 2:
          parts.push(new BigNumberCoder("u64").encode(data));
          break;
        case 4:
        case 16:
          parts.push(new NumberCoder("u32", { padToWordSize: true }).encode(data));
          break;
        default: {
          throw new FuelError(ErrorCode.INVALID_POLICY_TYPE, `Invalid policy type: ${type3}`);
        }
      }
    });
    return concat(parts);
  }
  decode(data, offset, policyTypes) {
    let o3 = offset;
    const policies = [];
    if (policyTypes & 1) {
      const [tip, nextOffset] = new BigNumberCoder("u64").decode(data, o3);
      o3 = nextOffset;
      policies.push({ type: 1, data: tip });
    }
    if (policyTypes & 2) {
      const [witnessLimit, nextOffset] = new BigNumberCoder("u64").decode(data, o3);
      o3 = nextOffset;
      policies.push({ type: 2, data: witnessLimit });
    }
    if (policyTypes & 4) {
      const [maturity, nextOffset] = new NumberCoder("u32", { padToWordSize: true }).decode(
        data,
        o3
      );
      o3 = nextOffset;
      policies.push({ type: 4, data: maturity });
    }
    if (policyTypes & 8) {
      const [maxFee, nextOffset] = new BigNumberCoder("u64").decode(data, o3);
      o3 = nextOffset;
      policies.push({ type: 8, data: maxFee });
    }
    if (policyTypes & 16) {
      const [expiration, nextOffset] = new NumberCoder("u32", { padToWordSize: true }).decode(
        data,
        o3
      );
      o3 = nextOffset;
      policies.push({ type: 16, data: expiration });
    }
    return [policies, o3];
  }
}, __name9(_a40, "PoliciesCoder"), _a40);
var ReceiptType = ((ReceiptType2) => {
  ReceiptType2[ReceiptType2["Call"] = 0] = "Call";
  ReceiptType2[ReceiptType2["Return"] = 1] = "Return";
  ReceiptType2[ReceiptType2["ReturnData"] = 2] = "ReturnData";
  ReceiptType2[ReceiptType2["Panic"] = 3] = "Panic";
  ReceiptType2[ReceiptType2["Revert"] = 4] = "Revert";
  ReceiptType2[ReceiptType2["Log"] = 5] = "Log";
  ReceiptType2[ReceiptType2["LogData"] = 6] = "LogData";
  ReceiptType2[ReceiptType2["Transfer"] = 7] = "Transfer";
  ReceiptType2[ReceiptType2["TransferOut"] = 8] = "TransferOut";
  ReceiptType2[ReceiptType2["ScriptResult"] = 9] = "ScriptResult";
  ReceiptType2[ReceiptType2["MessageOut"] = 10] = "MessageOut";
  ReceiptType2[ReceiptType2["Mint"] = 11] = "Mint";
  ReceiptType2[ReceiptType2["Burn"] = 12] = "Burn";
  return ReceiptType2;
})(ReceiptType || {});
var getMintedAssetId = __name9((contractId, subId) => {
  const contractIdBytes = arrayify(contractId);
  const subIdBytes = arrayify(subId);
  return sha2563(concat([contractIdBytes, subIdBytes]));
}, "getMintedAssetId");
var createAssetId = __name9((contractId, subId) => ({
  bits: getMintedAssetId(contractId, subId)
}), "createAssetId");
var getMessageId = __name9((value) => {
  const parts = [];
  parts.push(new ByteArrayCoder(32).encode(value.sender));
  parts.push(new ByteArrayCoder(32).encode(value.recipient));
  parts.push(new ByteArrayCoder(32).encode(value.nonce));
  parts.push(new BigNumberCoder("u64").encode(value.amount));
  parts.push(arrayify(value.data || "0x"));
  return sha2563(concat(parts));
}, "getMessageId");
var _a41;
var StorageSlotCoder = (_a41 = class extends StructCoder {
  constructor() {
    super("StorageSlot", {
      key: new B256Coder(),
      value: new B256Coder()
    });
  }
}, __name9(_a41, "StorageSlotCoder"), _a41);
var UpgradePurposeTypeEnum = ((UpgradePurposeTypeEnum2) => {
  UpgradePurposeTypeEnum2[UpgradePurposeTypeEnum2["ConsensusParameters"] = 0] = "ConsensusParameters";
  UpgradePurposeTypeEnum2[UpgradePurposeTypeEnum2["StateTransition"] = 1] = "StateTransition";
  return UpgradePurposeTypeEnum2;
})(UpgradePurposeTypeEnum || {});
var _a42;
var UpgradePurposeCoder = (_a42 = class extends Coder {
  constructor() {
    super("UpgradePurpose", "UpgradePurpose", 0);
  }
  encode(upgradePurposeType) {
    const parts = [];
    const { type: type3 } = upgradePurposeType;
    parts.push(new NumberCoder("u8", { padToWordSize: true }).encode(type3));
    switch (type3) {
      case 0: {
        const data = upgradePurposeType.data;
        parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(data.witnessIndex));
        parts.push(new B256Coder().encode(data.checksum));
        break;
      }
      case 1: {
        const data = upgradePurposeType.data;
        parts.push(new B256Coder().encode(data.bytecodeRoot));
        break;
      }
      default: {
        throw new FuelError(
          ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,
          `Unsupported transaction type: ${type3}`
        );
      }
    }
    return concat(parts);
  }
  decode(data, offset) {
    let o3 = offset;
    let decoded;
    [decoded, o3] = new NumberCoder("u8", { padToWordSize: true }).decode(data, o3);
    const type3 = decoded;
    switch (type3) {
      case 0: {
        [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
        const witnessIndex = decoded;
        [decoded, o3] = new B256Coder().decode(data, o3);
        const checksum = decoded;
        return [{ type: type3, data: { witnessIndex, checksum } }, o3];
      }
      case 1: {
        [decoded, o3] = new B256Coder().decode(data, o3);
        const bytecodeRoot = decoded;
        return [{ type: type3, data: { bytecodeRoot } }, o3];
      }
      default: {
        throw new FuelError(
          ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,
          `Unsupported transaction type: ${type3}`
        );
      }
    }
  }
}, __name9(_a42, "UpgradePurposeCoder"), _a42);
var _a43;
var WitnessCoder = (_a43 = class extends Coder {
  constructor() {
    super(
      "Witness",
      // Types of dynamic length are not supported in the ABI
      "unknown",
      0
    );
  }
  encode(value) {
    const parts = [];
    parts.push(new NumberCoder("u32", { padToWordSize: true }).encode(value.dataLength));
    parts.push(new ByteArrayCoder(value.dataLength).encode(value.data));
    return concat(parts);
  }
  decode(data, offset) {
    let decoded;
    let o3 = offset;
    [decoded, o3] = new NumberCoder("u32", { padToWordSize: true }).decode(data, o3);
    const dataLength = decoded;
    [decoded, o3] = new ByteArrayCoder(dataLength).decode(data, o3);
    const witnessData = decoded;
    return [
      {
        dataLength,
        data: witnessData
      },
      o3
    ];
  }
}, __name9(_a43, "WitnessCoder"), _a43);
var TransactionType = ((TransactionType2) => {
  TransactionType2[TransactionType2["Script"] = 0] = "Script";
  TransactionType2[TransactionType2["Create"] = 1] = "Create";
  TransactionType2[TransactionType2["Mint"] = 2] = "Mint";
  TransactionType2[TransactionType2["Upgrade"] = 3] = "Upgrade";
  TransactionType2[TransactionType2["Upload"] = 4] = "Upload";
  TransactionType2[TransactionType2["Blob"] = 5] = "Blob";
  return TransactionType2;
})(TransactionType || {});
var _a44;
var TransactionScriptCoder = (_a44 = class extends Coder {
  constructor() {
    super("TransactionScript", "struct TransactionScript", 0);
  }
  encode(value) {
    const parts = [];
    parts.push(new BigNumberCoder("u64").encode(value.scriptGasLimit));
    parts.push(new B256Coder().encode(value.receiptsRoot));
    parts.push(new BigNumberCoder("u64").encode(value.scriptLength));
    parts.push(new BigNumberCoder("u64").encode(value.scriptDataLength));
    parts.push(new NumberCoder("u32", { padToWordSize: true }).encode(value.policyTypes));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.inputsCount));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.outputsCount));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.witnessesCount));
    parts.push(new ByteArrayCoder(value.scriptLength.toNumber()).encode(value.script));
    parts.push(new ByteArrayCoder(value.scriptDataLength.toNumber()).encode(value.scriptData));
    parts.push(new PoliciesCoder().encode(value.policies));
    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));
    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));
    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));
    return concat(parts);
  }
  decode(data, offset) {
    let decoded;
    let o3 = offset;
    [decoded, o3] = new BigNumberCoder("u64").decode(data, o3);
    const scriptGasLimit = decoded;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const receiptsRoot = decoded;
    [decoded, o3] = new BigNumberCoder("u64").decode(data, o3);
    const scriptLength = decoded;
    [decoded, o3] = new BigNumberCoder("u64").decode(data, o3);
    const scriptDataLength = decoded;
    [decoded, o3] = new NumberCoder("u32", { padToWordSize: true }).decode(data, o3);
    const policyTypes = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const inputsCount = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const outputsCount = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const witnessesCount = decoded;
    [decoded, o3] = new ByteArrayCoder(scriptLength.toNumber()).decode(data, o3);
    const script = decoded;
    [decoded, o3] = new ByteArrayCoder(scriptDataLength.toNumber()).decode(data, o3);
    const scriptData = decoded;
    [decoded, o3] = new PoliciesCoder().decode(data, o3, policyTypes);
    const policies = decoded;
    [decoded, o3] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o3);
    const inputs = decoded;
    [decoded, o3] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o3);
    const outputs = decoded;
    [decoded, o3] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o3);
    const witnesses = decoded;
    return [
      {
        type: 0,
        scriptGasLimit,
        scriptLength,
        scriptDataLength,
        policyTypes,
        inputsCount,
        outputsCount,
        witnessesCount,
        receiptsRoot,
        script,
        scriptData,
        policies,
        inputs,
        outputs,
        witnesses
      },
      o3
    ];
  }
}, __name9(_a44, "TransactionScriptCoder"), _a44);
var _a45;
var TransactionCreateCoder = (_a45 = class extends Coder {
  constructor() {
    super("TransactionCreate", "struct TransactionCreate", 0);
  }
  encode(value) {
    const parts = [];
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.bytecodeWitnessIndex));
    parts.push(new B256Coder().encode(value.salt));
    parts.push(new BigNumberCoder("u64").encode(value.storageSlotsCount));
    parts.push(new NumberCoder("u32", { padToWordSize: true }).encode(value.policyTypes));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.inputsCount));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.outputsCount));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.witnessesCount));
    parts.push(
      new ArrayCoder(new StorageSlotCoder(), value.storageSlotsCount.toNumber()).encode(
        value.storageSlots
      )
    );
    parts.push(new PoliciesCoder().encode(value.policies));
    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));
    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));
    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));
    return concat(parts);
  }
  decode(data, offset) {
    let decoded;
    let o3 = offset;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const bytecodeWitnessIndex = decoded;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const salt = decoded;
    [decoded, o3] = new BigNumberCoder("u64").decode(data, o3);
    const storageSlotsCount = decoded;
    [decoded, o3] = new NumberCoder("u32", { padToWordSize: true }).decode(data, o3);
    const policyTypes = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const inputsCount = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const outputsCount = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const witnessesCount = decoded;
    [decoded, o3] = new ArrayCoder(new StorageSlotCoder(), storageSlotsCount.toNumber()).decode(
      data,
      o3
    );
    const storageSlots2 = decoded;
    [decoded, o3] = new PoliciesCoder().decode(data, o3, policyTypes);
    const policies = decoded;
    [decoded, o3] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o3);
    const inputs = decoded;
    [decoded, o3] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o3);
    const outputs = decoded;
    [decoded, o3] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o3);
    const witnesses = decoded;
    return [
      {
        type: 1,
        bytecodeWitnessIndex,
        policyTypes,
        storageSlotsCount,
        inputsCount,
        outputsCount,
        witnessesCount,
        salt,
        policies,
        storageSlots: storageSlots2,
        inputs,
        outputs,
        witnesses
      },
      o3
    ];
  }
}, __name9(_a45, "TransactionCreateCoder"), _a45);
var _a46;
var TransactionMintCoder = (_a46 = class extends Coder {
  constructor() {
    super("TransactionMint", "struct TransactionMint", 0);
  }
  encode(value) {
    const parts = [];
    parts.push(new TxPointerCoder().encode(value.txPointer));
    parts.push(new InputContractCoder().encode(value.inputContract));
    parts.push(new OutputContractCoder().encode(value.outputContract));
    parts.push(new BigNumberCoder("u64").encode(value.mintAmount));
    parts.push(new B256Coder().encode(value.mintAssetId));
    parts.push(new BigNumberCoder("u64").encode(value.gasPrice));
    return concat(parts);
  }
  decode(data, offset) {
    let decoded;
    let o3 = offset;
    [decoded, o3] = new TxPointerCoder().decode(data, o3);
    const txPointer = decoded;
    [decoded, o3] = new InputContractCoder().decode(data, o3);
    const inputContract = decoded;
    [decoded, o3] = new OutputContractCoder().decode(data, o3);
    const outputContract = decoded;
    [decoded, o3] = new BigNumberCoder("u64").decode(data, o3);
    const mintAmount = decoded;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const mintAssetId = decoded;
    [decoded, o3] = new BigNumberCoder("u64").decode(data, o3);
    const gasPrice = decoded;
    return [
      {
        type: 2,
        txPointer,
        inputContract,
        outputContract,
        mintAmount,
        mintAssetId,
        gasPrice
      },
      o3
    ];
  }
}, __name9(_a46, "TransactionMintCoder"), _a46);
var _a47;
var TransactionUpgradeCoder = (_a47 = class extends Coder {
  constructor() {
    super("TransactionUpgrade", "struct TransactionUpgrade", 0);
  }
  encode(value) {
    const parts = [];
    parts.push(new UpgradePurposeCoder().encode(value.upgradePurpose));
    parts.push(new NumberCoder("u32", { padToWordSize: true }).encode(value.policyTypes));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.inputsCount));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.outputsCount));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.witnessesCount));
    parts.push(new PoliciesCoder().encode(value.policies));
    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));
    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));
    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));
    return concat(parts);
  }
  decode(data, offset) {
    let decoded;
    let o3 = offset;
    [decoded, o3] = new UpgradePurposeCoder().decode(data, o3);
    const upgradePurpose = decoded;
    [decoded, o3] = new NumberCoder("u32", { padToWordSize: true }).decode(data, o3);
    const policyTypes = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const inputsCount = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const outputsCount = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const witnessesCount = decoded;
    [decoded, o3] = new PoliciesCoder().decode(data, o3, policyTypes);
    const policies = decoded;
    [decoded, o3] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o3);
    const inputs = decoded;
    [decoded, o3] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o3);
    const outputs = decoded;
    [decoded, o3] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o3);
    const witnesses = decoded;
    return [
      {
        type: 3,
        upgradePurpose,
        policyTypes,
        inputsCount,
        outputsCount,
        witnessesCount,
        policies,
        inputs,
        outputs,
        witnesses
      },
      o3
    ];
  }
}, __name9(_a47, "TransactionUpgradeCoder"), _a47);
var _a48;
var TransactionUploadCoder = (_a48 = class extends Coder {
  constructor() {
    super("TransactionUpload", "struct TransactionUpload", 0);
  }
  encode(value) {
    const parts = [];
    parts.push(new B256Coder().encode(value.root));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.witnessIndex));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.subsectionIndex));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.subsectionsNumber));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.proofSetCount));
    parts.push(new NumberCoder("u32", { padToWordSize: true }).encode(value.policyTypes));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.inputsCount));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.outputsCount));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.witnessesCount));
    parts.push(new ArrayCoder(new B256Coder(), value.proofSetCount).encode(value.proofSet));
    parts.push(new PoliciesCoder().encode(value.policies));
    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));
    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));
    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));
    return concat(parts);
  }
  decode(data, offset) {
    let decoded;
    let o3 = offset;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const root = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const witnessIndex = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const subsectionIndex = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const subsectionsNumber = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const proofSetCount = decoded;
    [decoded, o3] = new NumberCoder("u32", { padToWordSize: true }).decode(data, o3);
    const policyTypes = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const inputsCount = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const outputsCount = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const witnessesCount = decoded;
    [decoded, o3] = new ArrayCoder(new B256Coder(), proofSetCount).decode(data, o3);
    const proofSet = decoded;
    [decoded, o3] = new PoliciesCoder().decode(data, o3, policyTypes);
    const policies = decoded;
    [decoded, o3] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o3);
    const inputs = decoded;
    [decoded, o3] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o3);
    const outputs = decoded;
    [decoded, o3] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o3);
    const witnesses = decoded;
    return [
      {
        type: 4,
        root,
        witnessIndex,
        subsectionIndex,
        subsectionsNumber,
        proofSetCount,
        policyTypes,
        inputsCount,
        outputsCount,
        witnessesCount,
        proofSet,
        policies,
        inputs,
        outputs,
        witnesses
      },
      o3
    ];
  }
}, __name9(_a48, "TransactionUploadCoder"), _a48);
var _a49;
var TransactionBlobCoder = (_a49 = class extends Coder {
  constructor() {
    super("TransactionBlob", "struct TransactionBlob", 0);
  }
  encode(value) {
    const parts = [];
    parts.push(new B256Coder().encode(value.blobId));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.witnessIndex));
    parts.push(new NumberCoder("u32", { padToWordSize: true }).encode(value.policyTypes));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.inputsCount));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.outputsCount));
    parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.witnessesCount));
    parts.push(new PoliciesCoder().encode(value.policies));
    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));
    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));
    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));
    return concat(parts);
  }
  decode(data, offset) {
    let decoded;
    let o3 = offset;
    [decoded, o3] = new B256Coder().decode(data, o3);
    const blobId = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const witnessIndex = decoded;
    [decoded, o3] = new NumberCoder("u32", { padToWordSize: true }).decode(data, o3);
    const policyTypes = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const inputsCount = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const outputsCount = decoded;
    [decoded, o3] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o3);
    const witnessesCount = decoded;
    [decoded, o3] = new PoliciesCoder().decode(data, o3, policyTypes);
    const policies = decoded;
    [decoded, o3] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o3);
    const inputs = decoded;
    [decoded, o3] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o3);
    const outputs = decoded;
    [decoded, o3] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o3);
    const witnesses = decoded;
    return [
      {
        type: 5,
        blobId,
        witnessIndex,
        policyTypes,
        inputsCount,
        outputsCount,
        witnessesCount,
        policies,
        inputs,
        outputs,
        witnesses
      },
      o3
    ];
  }
}, __name9(_a49, "TransactionBlobCoder"), _a49);
var _a50;
var TransactionCoder = (_a50 = class extends Coder {
  constructor() {
    super("Transaction", "struct Transaction", 0);
  }
  encode(value) {
    const parts = [];
    parts.push(new NumberCoder("u8", { padToWordSize: true }).encode(value.type));
    const { type: type3 } = value;
    switch (value.type) {
      case 0: {
        parts.push(
          new TransactionScriptCoder().encode(value)
        );
        break;
      }
      case 1: {
        parts.push(
          new TransactionCreateCoder().encode(value)
        );
        break;
      }
      case 2: {
        parts.push(new TransactionMintCoder().encode(value));
        break;
      }
      case 3: {
        parts.push(
          new TransactionUpgradeCoder().encode(value)
        );
        break;
      }
      case 4: {
        parts.push(
          new TransactionUploadCoder().encode(value)
        );
        break;
      }
      case 5: {
        parts.push(new TransactionBlobCoder().encode(value));
        break;
      }
      default: {
        throw new FuelError(
          ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,
          `Unsupported transaction type: ${type3}`
        );
      }
    }
    return concat(parts);
  }
  decode(data, offset) {
    let decoded;
    let o3 = offset;
    [decoded, o3] = new NumberCoder("u8", { padToWordSize: true }).decode(data, o3);
    const type3 = decoded;
    switch (type3) {
      case 0: {
        [decoded, o3] = new TransactionScriptCoder().decode(data, o3);
        return [decoded, o3];
      }
      case 1: {
        [decoded, o3] = new TransactionCreateCoder().decode(data, o3);
        return [decoded, o3];
      }
      case 2: {
        [decoded, o3] = new TransactionMintCoder().decode(data, o3);
        return [decoded, o3];
      }
      case 3: {
        [decoded, o3] = new TransactionUpgradeCoder().decode(data, o3);
        return [decoded, o3];
      }
      case 4: {
        [decoded, o3] = new TransactionUploadCoder().decode(data, o3);
        return [decoded, o3];
      }
      case 5: {
        [decoded, o3] = new TransactionBlobCoder().decode(data, o3);
        return [decoded, o3];
      }
      default: {
        throw new FuelError(
          ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,
          `Unsupported transaction type: ${type3}`
        );
      }
    }
  }
}, __name9(_a50, "TransactionCoder"), _a50);
var _a51;
var UtxoIdCoder = (_a51 = class extends StructCoder {
  constructor() {
    super("UtxoId", {
      transactionId: new B256Coder(),
      outputIndex: new NumberCoder("u16", { padToWordSize: true })
    });
  }
}, __name9(_a51, "UtxoIdCoder"), _a51);

// node_modules/ramda/es/internal/_isPlaceholder.js
function _isPlaceholder(a) {
  return a != null && typeof a === "object" && a["@@functional/placeholder"] === true;
}

// node_modules/ramda/es/internal/_curry1.js
function _curry1(fn) {
  return function f1(a) {
    if (arguments.length === 0 || _isPlaceholder(a)) {
      return f1;
    } else {
      return fn.apply(this, arguments);
    }
  };
}

// node_modules/ramda/es/internal/_curry2.js
function _curry2(fn) {
  return function f2(a, b) {
    switch (arguments.length) {
      case 0:
        return f2;
      case 1:
        return _isPlaceholder(a) ? f2 : _curry1(function(_b2) {
          return fn(a, _b2);
        });
      default:
        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function(_a103) {
          return fn(_a103, b);
        }) : _isPlaceholder(b) ? _curry1(function(_b2) {
          return fn(a, _b2);
        }) : fn(a, b);
    }
  };
}

// node_modules/ramda/es/add.js
var add2 = _curry2(function add3(a, b) {
  return Number(a) + Number(b);
});
var add_default = add2;

// node_modules/ramda/es/internal/_concat.js
function _concat(set1, set22) {
  set1 = set1 || [];
  set22 = set22 || [];
  var idx;
  var len1 = set1.length;
  var len2 = set22.length;
  var result = [];
  idx = 0;
  while (idx < len1) {
    result[result.length] = set1[idx];
    idx += 1;
  }
  idx = 0;
  while (idx < len2) {
    result[result.length] = set22[idx];
    idx += 1;
  }
  return result;
}

// node_modules/ramda/es/internal/_arity.js
function _arity(n, fn) {
  switch (n) {
    case 0:
      return function() {
        return fn.apply(this, arguments);
      };
    case 1:
      return function(a0) {
        return fn.apply(this, arguments);
      };
    case 2:
      return function(a0, a1) {
        return fn.apply(this, arguments);
      };
    case 3:
      return function(a0, a1, a2) {
        return fn.apply(this, arguments);
      };
    case 4:
      return function(a0, a1, a2, a3) {
        return fn.apply(this, arguments);
      };
    case 5:
      return function(a0, a1, a2, a3, a4) {
        return fn.apply(this, arguments);
      };
    case 6:
      return function(a0, a1, a2, a3, a4, a5) {
        return fn.apply(this, arguments);
      };
    case 7:
      return function(a0, a1, a2, a3, a4, a5, a6) {
        return fn.apply(this, arguments);
      };
    case 8:
      return function(a0, a1, a2, a3, a4, a5, a6, a7) {
        return fn.apply(this, arguments);
      };
    case 9:
      return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {
        return fn.apply(this, arguments);
      };
    case 10:
      return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
        return fn.apply(this, arguments);
      };
    default:
      throw new Error("First argument to _arity must be a non-negative integer no greater than ten");
  }
}

// node_modules/ramda/es/internal/_curryN.js
function _curryN(length3, received, fn) {
  return function() {
    var combined = [];
    var argsIdx = 0;
    var left = length3;
    var combinedIdx = 0;
    var hasPlaceholder = false;
    while (combinedIdx < received.length || argsIdx < arguments.length) {
      var result;
      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {
        result = received[combinedIdx];
      } else {
        result = arguments[argsIdx];
        argsIdx += 1;
      }
      combined[combinedIdx] = result;
      if (!_isPlaceholder(result)) {
        left -= 1;
      } else {
        hasPlaceholder = true;
      }
      combinedIdx += 1;
    }
    return !hasPlaceholder && left <= 0 ? fn.apply(this, combined) : _arity(Math.max(0, left), _curryN(length3, combined, fn));
  };
}

// node_modules/ramda/es/curryN.js
var curryN = _curry2(function curryN2(length3, fn) {
  if (length3 === 1) {
    return _curry1(fn);
  }
  return _arity(length3, _curryN(length3, [], fn));
});
var curryN_default = curryN;

// node_modules/ramda/es/addIndex.js
var addIndex = _curry1(function addIndex2(fn) {
  return curryN_default(fn.length, function() {
    var idx = 0;
    var origFn = arguments[0];
    var list = arguments[arguments.length - 1];
    var args = Array.prototype.slice.call(arguments, 0);
    args[0] = function() {
      var result = origFn.apply(this, _concat(arguments, [idx, list]));
      idx += 1;
      return result;
    };
    return fn.apply(this, args);
  });
});

// node_modules/ramda/es/addIndexRight.js
var addIndexRight = _curry1(function addIndex3(fn) {
  return curryN_default(fn.length, function() {
    var origFn = arguments[0];
    var list = arguments[arguments.length - 1];
    var idx = list.length - 1;
    var args = Array.prototype.slice.call(arguments, 0);
    args[0] = function() {
      var result = origFn.apply(this, _concat(arguments, [idx, list]));
      idx -= 1;
      return result;
    };
    return fn.apply(this, args);
  });
});

// node_modules/ramda/es/internal/_curry3.js
function _curry3(fn) {
  return function f3(a, b, c) {
    switch (arguments.length) {
      case 0:
        return f3;
      case 1:
        return _isPlaceholder(a) ? f3 : _curry2(function(_b2, _c) {
          return fn(a, _b2, _c);
        });
      case 2:
        return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function(_a103, _c) {
          return fn(_a103, b, _c);
        }) : _isPlaceholder(b) ? _curry2(function(_b2, _c) {
          return fn(a, _b2, _c);
        }) : _curry1(function(_c) {
          return fn(a, b, _c);
        });
      default:
        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function(_a103, _b2) {
          return fn(_a103, _b2, c);
        }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function(_a103, _c) {
          return fn(_a103, b, _c);
        }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function(_b2, _c) {
          return fn(a, _b2, _c);
        }) : _isPlaceholder(a) ? _curry1(function(_a103) {
          return fn(_a103, b, c);
        }) : _isPlaceholder(b) ? _curry1(function(_b2) {
          return fn(a, _b2, c);
        }) : _isPlaceholder(c) ? _curry1(function(_c) {
          return fn(a, b, _c);
        }) : fn(a, b, c);
    }
  };
}

// node_modules/ramda/es/adjust.js
var adjust = _curry3(function adjust2(idx, fn, list) {
  var len = list.length;
  if (idx >= len || idx < -len) {
    return list;
  }
  var _idx = (len + idx) % len;
  var _list = _concat(list);
  _list[_idx] = fn(list[_idx]);
  return _list;
});
var adjust_default = adjust;

// node_modules/ramda/es/internal/_isArray.js
var isArray_default = Array.isArray || function _isArray(val) {
  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === "[object Array]";
};

// node_modules/ramda/es/internal/_isTransformer.js
function _isTransformer(obj) {
  return obj != null && typeof obj["@@transducer/step"] === "function";
}

// node_modules/ramda/es/internal/_dispatchable.js
function _dispatchable(methodNames, transducerCreator, fn) {
  return function() {
    if (arguments.length === 0) {
      return fn();
    }
    var obj = arguments[arguments.length - 1];
    if (!isArray_default(obj)) {
      var idx = 0;
      while (idx < methodNames.length) {
        if (typeof obj[methodNames[idx]] === "function") {
          return obj[methodNames[idx]].apply(obj, Array.prototype.slice.call(arguments, 0, -1));
        }
        idx += 1;
      }
      if (_isTransformer(obj)) {
        var transducer = transducerCreator.apply(null, Array.prototype.slice.call(arguments, 0, -1));
        return transducer(obj);
      }
    }
    return fn.apply(this, arguments);
  };
}

// node_modules/ramda/es/internal/_reduced.js
function _reduced(x) {
  return x && x["@@transducer/reduced"] ? x : {
    "@@transducer/value": x,
    "@@transducer/reduced": true
  };
}

// node_modules/ramda/es/internal/_xfBase.js
var xfBase_default = {
  init: function() {
    return this.xf["@@transducer/init"]();
  },
  result: function(result) {
    return this.xf["@@transducer/result"](result);
  }
};

// node_modules/ramda/es/internal/_xall.js
var XAll = function() {
  function XAll2(f2, xf) {
    this.xf = xf;
    this.f = f2;
    this.all = true;
  }
  XAll2.prototype["@@transducer/init"] = xfBase_default.init;
  XAll2.prototype["@@transducer/result"] = function(result) {
    if (this.all) {
      result = this.xf["@@transducer/step"](result, true);
    }
    return this.xf["@@transducer/result"](result);
  };
  XAll2.prototype["@@transducer/step"] = function(result, input) {
    if (!this.f(input)) {
      this.all = false;
      result = _reduced(this.xf["@@transducer/step"](result, false));
    }
    return result;
  };
  return XAll2;
}();
function _xall(f2) {
  return function(xf) {
    return new XAll(f2, xf);
  };
}

// node_modules/ramda/es/all.js
var all = _curry2(_dispatchable(["all"], _xall, function all2(fn, list) {
  var idx = 0;
  while (idx < list.length) {
    if (!fn(list[idx])) {
      return false;
    }
    idx += 1;
  }
  return true;
}));
var all_default = all;

// node_modules/ramda/es/internal/_arrayFromIterator.js
function _arrayFromIterator(iter) {
  var list = [];
  var next;
  while (!(next = iter.next()).done) {
    list.push(next.value);
  }
  return list;
}

// node_modules/ramda/es/internal/_includesWith.js
function _includesWith(pred, x, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    if (pred(x, list[idx])) {
      return true;
    }
    idx += 1;
  }
  return false;
}

// node_modules/ramda/es/internal/_functionName.js
function _functionName(f2) {
  var match3 = String(f2).match(/^function (\w*)/);
  return match3 == null ? "" : match3[1];
}

// node_modules/ramda/es/internal/_has.js
function _has(prop3, obj) {
  return Object.prototype.hasOwnProperty.call(obj, prop3);
}

// node_modules/ramda/es/internal/_objectIs.js
function _objectIs(a, b) {
  if (a === b) {
    return a !== 0 || 1 / a === 1 / b;
  } else {
    return a !== a && b !== b;
  }
}
var objectIs_default = typeof Object.is === "function" ? Object.is : _objectIs;

// node_modules/ramda/es/internal/_isArguments.js
var toString = Object.prototype.toString;
var _isArguments = function() {
  return toString.call(arguments) === "[object Arguments]" ? function _isArguments2(x) {
    return toString.call(x) === "[object Arguments]";
  } : function _isArguments2(x) {
    return _has("callee", x);
  };
}();
var isArguments_default = _isArguments;

// node_modules/ramda/es/keys.js
var hasEnumBug = !{
  toString: null
}.propertyIsEnumerable("toString");
var nonEnumerableProps = ["constructor", "valueOf", "isPrototypeOf", "toString", "propertyIsEnumerable", "hasOwnProperty", "toLocaleString"];
var hasArgsEnumBug = function() {
  "use strict";
  return arguments.propertyIsEnumerable("length");
}();
var contains = function contains2(list, item) {
  var idx = 0;
  while (idx < list.length) {
    if (list[idx] === item) {
      return true;
    }
    idx += 1;
  }
  return false;
};
var keys = typeof Object.keys === "function" && !hasArgsEnumBug ? _curry1(function keys2(obj) {
  return Object(obj) !== obj ? [] : Object.keys(obj);
}) : _curry1(function keys3(obj) {
  if (Object(obj) !== obj) {
    return [];
  }
  var prop3, nIdx;
  var ks = [];
  var checkArgsLength = hasArgsEnumBug && isArguments_default(obj);
  for (prop3 in obj) {
    if (_has(prop3, obj) && (!checkArgsLength || prop3 !== "length")) {
      ks[ks.length] = prop3;
    }
  }
  if (hasEnumBug) {
    nIdx = nonEnumerableProps.length - 1;
    while (nIdx >= 0) {
      prop3 = nonEnumerableProps[nIdx];
      if (_has(prop3, obj) && !contains(ks, prop3)) {
        ks[ks.length] = prop3;
      }
      nIdx -= 1;
    }
  }
  return ks;
});
var keys_default = keys;

// node_modules/ramda/es/type.js
var type = _curry1(function type2(val) {
  return val === null ? "Null" : val === void 0 ? "Undefined" : Object.prototype.toString.call(val).slice(8, -1);
});
var type_default = type;

// node_modules/ramda/es/internal/_equals.js
function _uniqContentEquals(aIterator, bIterator, stackA, stackB) {
  var a = _arrayFromIterator(aIterator);
  var b = _arrayFromIterator(bIterator);
  function eq3(_a103, _b2) {
    return _equals(_a103, _b2, stackA.slice(), stackB.slice());
  }
  return !_includesWith(function(b3, aItem) {
    return !_includesWith(eq3, aItem, b3);
  }, b, a);
}
function _equals(a, b, stackA, stackB) {
  if (objectIs_default(a, b)) {
    return true;
  }
  var typeA = type_default(a);
  if (typeA !== type_default(b)) {
    return false;
  }
  if (typeof a["fantasy-land/equals"] === "function" || typeof b["fantasy-land/equals"] === "function") {
    return typeof a["fantasy-land/equals"] === "function" && a["fantasy-land/equals"](b) && typeof b["fantasy-land/equals"] === "function" && b["fantasy-land/equals"](a);
  }
  if (typeof a.equals === "function" || typeof b.equals === "function") {
    return typeof a.equals === "function" && a.equals(b) && typeof b.equals === "function" && b.equals(a);
  }
  switch (typeA) {
    case "Arguments":
    case "Array":
    case "Object":
      if (typeof a.constructor === "function" && _functionName(a.constructor) === "Promise") {
        return a === b;
      }
      break;
    case "Boolean":
    case "Number":
    case "String":
      if (!(typeof a === typeof b && objectIs_default(a.valueOf(), b.valueOf()))) {
        return false;
      }
      break;
    case "Date":
      if (!objectIs_default(a.valueOf(), b.valueOf())) {
        return false;
      }
      break;
    case "Error":
      return a.name === b.name && a.message === b.message;
    case "RegExp":
      if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {
        return false;
      }
      break;
  }
  var idx = stackA.length - 1;
  while (idx >= 0) {
    if (stackA[idx] === a) {
      return stackB[idx] === b;
    }
    idx -= 1;
  }
  switch (typeA) {
    case "Map":
      if (a.size !== b.size) {
        return false;
      }
      return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));
    case "Set":
      if (a.size !== b.size) {
        return false;
      }
      return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));
    case "Arguments":
    case "Array":
    case "Object":
    case "Boolean":
    case "Number":
    case "String":
    case "Date":
    case "Error":
    case "RegExp":
    case "Int8Array":
    case "Uint8Array":
    case "Uint8ClampedArray":
    case "Int16Array":
    case "Uint16Array":
    case "Int32Array":
    case "Uint32Array":
    case "Float32Array":
    case "Float64Array":
    case "ArrayBuffer":
      break;
    default:
      return false;
  }
  var keysA = keys_default(a);
  if (keysA.length !== keys_default(b).length) {
    return false;
  }
  var extendedStackA = stackA.concat([a]);
  var extendedStackB = stackB.concat([b]);
  idx = keysA.length - 1;
  while (idx >= 0) {
    var key = keysA[idx];
    if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {
      return false;
    }
    idx -= 1;
  }
  return true;
}

// node_modules/ramda/es/equals.js
var equals = _curry2(function equals2(a, b) {
  return _equals(a, b, [], []);
});
var equals_default = equals;

// node_modules/ramda/es/internal/_indexOf.js
function _indexOf(list, a, idx) {
  var inf, item;
  if (typeof list.indexOf === "function") {
    switch (typeof a) {
      case "number":
        if (a === 0) {
          inf = 1 / a;
          while (idx < list.length) {
            item = list[idx];
            if (item === 0 && 1 / item === inf) {
              return idx;
            }
            idx += 1;
          }
          return -1;
        } else if (a !== a) {
          while (idx < list.length) {
            item = list[idx];
            if (typeof item === "number" && item !== item) {
              return idx;
            }
            idx += 1;
          }
          return -1;
        }
        return list.indexOf(a, idx);
      case "string":
      case "boolean":
      case "function":
      case "undefined":
        return list.indexOf(a, idx);
      case "object":
        if (a === null) {
          return list.indexOf(a, idx);
        }
    }
  }
  while (idx < list.length) {
    if (equals_default(list[idx], a)) {
      return idx;
    }
    idx += 1;
  }
  return -1;
}

// node_modules/ramda/es/internal/_includes.js
function _includes(a, list) {
  return _indexOf(list, a, 0) >= 0;
}

// node_modules/ramda/es/internal/_map.js
function _map(fn, functor) {
  var idx = 0;
  var len = functor.length;
  var result = Array(len);
  while (idx < len) {
    result[idx] = fn(functor[idx]);
    idx += 1;
  }
  return result;
}

// node_modules/ramda/es/internal/_quote.js
function _quote(s) {
  var escaped = s.replace(/\\/g, "\\\\").replace(/[\b]/g, "\\b").replace(/\f/g, "\\f").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t").replace(/\v/g, "\\v").replace(/\0/g, "\\0");
  return '"' + escaped.replace(/"/g, '\\"') + '"';
}

// node_modules/ramda/es/internal/_toISOString.js
var pad = function pad2(n) {
  return (n < 10 ? "0" : "") + n;
};
var _toISOString = typeof Date.prototype.toISOString === "function" ? function _toISOString2(d) {
  return d.toISOString();
} : function _toISOString3(d) {
  return d.getUTCFullYear() + "-" + pad(d.getUTCMonth() + 1) + "-" + pad(d.getUTCDate()) + "T" + pad(d.getUTCHours()) + ":" + pad(d.getUTCMinutes()) + ":" + pad(d.getUTCSeconds()) + "." + (d.getUTCMilliseconds() / 1e3).toFixed(3).slice(2, 5) + "Z";
};
var toISOString_default = _toISOString;

// node_modules/ramda/es/internal/_complement.js
function _complement(f2) {
  return function() {
    return !f2.apply(this, arguments);
  };
}

// node_modules/ramda/es/internal/_arrayReduce.js
function _arrayReduce(reducer, acc, list) {
  var index = 0;
  var length3 = list.length;
  while (index < length3) {
    acc = reducer(acc, list[index]);
    index += 1;
  }
  return acc;
}

// node_modules/ramda/es/internal/_filter.js
function _filter(fn, list) {
  var idx = 0;
  var len = list.length;
  var result = [];
  while (idx < len) {
    if (fn(list[idx])) {
      result[result.length] = list[idx];
    }
    idx += 1;
  }
  return result;
}

// node_modules/ramda/es/internal/_isObject.js
function _isObject(x) {
  return Object.prototype.toString.call(x) === "[object Object]";
}

// node_modules/ramda/es/internal/_xfilter.js
var XFilter = function() {
  function XFilter2(f2, xf) {
    this.xf = xf;
    this.f = f2;
  }
  XFilter2.prototype["@@transducer/init"] = xfBase_default.init;
  XFilter2.prototype["@@transducer/result"] = xfBase_default.result;
  XFilter2.prototype["@@transducer/step"] = function(result, input) {
    return this.f(input) ? this.xf["@@transducer/step"](result, input) : result;
  };
  return XFilter2;
}();
function _xfilter(f2) {
  return function(xf) {
    return new XFilter(f2, xf);
  };
}

// node_modules/ramda/es/filter.js
var filter = _curry2(_dispatchable(["fantasy-land/filter", "filter"], _xfilter, function(pred, filterable) {
  return _isObject(filterable) ? _arrayReduce(function(acc, key) {
    if (pred(filterable[key])) {
      acc[key] = filterable[key];
    }
    return acc;
  }, {}, keys_default(filterable)) : (
    // else
    _filter(pred, filterable)
  );
}));
var filter_default = filter;

// node_modules/ramda/es/reject.js
var reject = _curry2(function reject2(pred, filterable) {
  return filter_default(_complement(pred), filterable);
});
var reject_default = reject;

// node_modules/ramda/es/internal/_toString.js
function _toString(x, seen) {
  var recur = function recur2(y) {
    var xs = seen.concat([x]);
    return _includes(y, xs) ? "<Circular>" : _toString(y, xs);
  };
  var mapPairs = function(obj, keys4) {
    return _map(function(k) {
      return _quote(k) + ": " + recur(obj[k]);
    }, keys4.slice().sort());
  };
  switch (Object.prototype.toString.call(x)) {
    case "[object Arguments]":
      return "(function() { return arguments; }(" + _map(recur, x).join(", ") + "))";
    case "[object Array]":
      return "[" + _map(recur, x).concat(mapPairs(x, reject_default(function(k) {
        return /^\d+$/.test(k);
      }, keys_default(x)))).join(", ") + "]";
    case "[object Boolean]":
      return typeof x === "object" ? "new Boolean(" + recur(x.valueOf()) + ")" : x.toString();
    case "[object Date]":
      return "new Date(" + (isNaN(x.valueOf()) ? recur(NaN) : _quote(toISOString_default(x))) + ")";
    case "[object Map]":
      return "new Map(" + recur(Array.from(x)) + ")";
    case "[object Null]":
      return "null";
    case "[object Number]":
      return typeof x === "object" ? "new Number(" + recur(x.valueOf()) + ")" : 1 / x === -Infinity ? "-0" : x.toString(10);
    case "[object Set]":
      return "new Set(" + recur(Array.from(x).sort()) + ")";
    case "[object String]":
      return typeof x === "object" ? "new String(" + recur(x.valueOf()) + ")" : _quote(x);
    case "[object Undefined]":
      return "undefined";
    default:
      if (typeof x.toString === "function") {
        var repr = x.toString();
        if (repr !== "[object Object]") {
          return repr;
        }
      }
      return "{" + mapPairs(x, keys_default(x)).join(", ") + "}";
  }
}

// node_modules/ramda/es/toString.js
var toString2 = _curry1(function toString3(val) {
  return _toString(val, []);
});
var toString_default = toString2;

// node_modules/ramda/es/max.js
var max3 = _curry2(function max4(a, b) {
  if (a === b) {
    return b;
  }
  function safeMax(x, y) {
    if (x > y !== y > x) {
      return y > x ? y : x;
    }
    return void 0;
  }
  var maxByValue = safeMax(a, b);
  if (maxByValue !== void 0) {
    return maxByValue;
  }
  var maxByType = safeMax(typeof a, typeof b);
  if (maxByType !== void 0) {
    return maxByType === typeof a ? a : b;
  }
  var stringA = toString_default(a);
  var maxByStringValue = safeMax(stringA, toString_default(b));
  if (maxByStringValue !== void 0) {
    return maxByStringValue === stringA ? a : b;
  }
  return b;
});
var max_default = max3;

// node_modules/ramda/es/internal/_xmap.js
var XMap = function() {
  function XMap2(f2, xf) {
    this.xf = xf;
    this.f = f2;
  }
  XMap2.prototype["@@transducer/init"] = xfBase_default.init;
  XMap2.prototype["@@transducer/result"] = xfBase_default.result;
  XMap2.prototype["@@transducer/step"] = function(result, input) {
    return this.xf["@@transducer/step"](result, this.f(input));
  };
  return XMap2;
}();
var _xmap = function _xmap2(f2) {
  return function(xf) {
    return new XMap(f2, xf);
  };
};
var xmap_default = _xmap;

// node_modules/ramda/es/map.js
var map = _curry2(_dispatchable(["fantasy-land/map", "map"], xmap_default, function map2(fn, functor) {
  switch (Object.prototype.toString.call(functor)) {
    case "[object Function]":
      return curryN_default(functor.length, function() {
        return fn.call(this, functor.apply(this, arguments));
      });
    case "[object Object]":
      return _arrayReduce(function(acc, key) {
        acc[key] = fn(functor[key]);
        return acc;
      }, {}, keys_default(functor));
    default:
      return _map(fn, functor);
  }
}));
var map_default = map;

// node_modules/ramda/es/internal/_isInteger.js
var isInteger_default = Number.isInteger || function _isInteger(n) {
  return n << 0 === n;
};

// node_modules/ramda/es/internal/_isString.js
function _isString(x) {
  return Object.prototype.toString.call(x) === "[object String]";
}

// node_modules/ramda/es/internal/_nth.js
function _nth(offset, list) {
  var idx = offset < 0 ? list.length + offset : offset;
  return _isString(list) ? list.charAt(idx) : list[idx];
}

// node_modules/ramda/es/prop.js
var prop = _curry2(function prop2(p, obj) {
  if (obj == null) {
    return;
  }
  return isInteger_default(p) ? _nth(p, obj) : obj[p];
});
var prop_default = prop;

// node_modules/ramda/es/pluck.js
var pluck = _curry2(function pluck2(p, list) {
  return map_default(prop_default(p), list);
});
var pluck_default = pluck;

// node_modules/ramda/es/internal/_isArrayLike.js
var _isArrayLike = _curry1(function isArrayLike(x) {
  if (isArray_default(x)) {
    return true;
  }
  if (!x) {
    return false;
  }
  if (typeof x !== "object") {
    return false;
  }
  if (_isString(x)) {
    return false;
  }
  if (x.length === 0) {
    return true;
  }
  if (x.length > 0) {
    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
  }
  return false;
});
var isArrayLike_default = _isArrayLike;

// node_modules/ramda/es/internal/_createReduce.js
var symIterator = typeof Symbol !== "undefined" ? Symbol.iterator : "@@iterator";
function _createReduce(arrayReduce, methodReduce, iterableReduce) {
  return function _reduce2(xf, acc, list) {
    if (isArrayLike_default(list)) {
      return arrayReduce(xf, acc, list);
    }
    if (list == null) {
      return acc;
    }
    if (typeof list["fantasy-land/reduce"] === "function") {
      return methodReduce(xf, acc, list, "fantasy-land/reduce");
    }
    if (list[symIterator] != null) {
      return iterableReduce(xf, acc, list[symIterator]());
    }
    if (typeof list.next === "function") {
      return iterableReduce(xf, acc, list);
    }
    if (typeof list.reduce === "function") {
      return methodReduce(xf, acc, list, "reduce");
    }
    throw new TypeError("reduce: list must be array or iterable");
  };
}

// node_modules/ramda/es/internal/_xArrayReduce.js
function _xArrayReduce(xf, acc, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    acc = xf["@@transducer/step"](acc, list[idx]);
    if (acc && acc["@@transducer/reduced"]) {
      acc = acc["@@transducer/value"];
      break;
    }
    idx += 1;
  }
  return xf["@@transducer/result"](acc);
}

// node_modules/ramda/es/bind.js
var bind = _curry2(function bind2(fn, thisObj) {
  return _arity(fn.length, function() {
    return fn.apply(thisObj, arguments);
  });
});
var bind_default = bind;

// node_modules/ramda/es/internal/_xReduce.js
function _xIterableReduce(xf, acc, iter) {
  var step = iter.next();
  while (!step.done) {
    acc = xf["@@transducer/step"](acc, step.value);
    if (acc && acc["@@transducer/reduced"]) {
      acc = acc["@@transducer/value"];
      break;
    }
    step = iter.next();
  }
  return xf["@@transducer/result"](acc);
}
function _xMethodReduce(xf, acc, obj, methodName) {
  return xf["@@transducer/result"](obj[methodName](bind_default(xf["@@transducer/step"], xf), acc));
}
var _xReduce = _createReduce(_xArrayReduce, _xMethodReduce, _xIterableReduce);
var xReduce_default = _xReduce;

// node_modules/ramda/es/internal/_xwrap.js
var XWrap = function() {
  function XWrap2(fn) {
    this.f = fn;
  }
  XWrap2.prototype["@@transducer/init"] = function() {
    throw new Error("init not implemented on XWrap");
  };
  XWrap2.prototype["@@transducer/result"] = function(acc) {
    return acc;
  };
  XWrap2.prototype["@@transducer/step"] = function(acc, x) {
    return this.f(acc, x);
  };
  return XWrap2;
}();
function _xwrap(fn) {
  return new XWrap(fn);
}

// node_modules/ramda/es/reduce.js
var reduce = _curry3(function(xf, acc, list) {
  return xReduce_default(typeof xf === "function" ? _xwrap(xf) : xf, acc, list);
});
var reduce_default = reduce;

// node_modules/ramda/es/allPass.js
var allPass = _curry1(function allPass2(preds) {
  return curryN_default(reduce_default(max_default, 0, pluck_default("length", preds)), function() {
    var idx = 0;
    var len = preds.length;
    while (idx < len) {
      if (!preds[idx].apply(this, arguments)) {
        return false;
      }
      idx += 1;
    }
    return true;
  });
});

// node_modules/ramda/es/always.js
var always = _curry1(function always2(val) {
  return function() {
    return val;
  };
});
var always_default = always;

// node_modules/ramda/es/and.js
var and = _curry2(function and2(a, b) {
  return a && b;
});
var and_default = and;

// node_modules/ramda/es/internal/_xany.js
var XAny = function() {
  function XAny2(f2, xf) {
    this.xf = xf;
    this.f = f2;
    this.any = false;
  }
  XAny2.prototype["@@transducer/init"] = xfBase_default.init;
  XAny2.prototype["@@transducer/result"] = function(result) {
    if (!this.any) {
      result = this.xf["@@transducer/step"](result, false);
    }
    return this.xf["@@transducer/result"](result);
  };
  XAny2.prototype["@@transducer/step"] = function(result, input) {
    if (this.f(input)) {
      this.any = true;
      result = _reduced(this.xf["@@transducer/step"](result, true));
    }
    return result;
  };
  return XAny2;
}();
function _xany(f2) {
  return function(xf) {
    return new XAny(f2, xf);
  };
}

// node_modules/ramda/es/any.js
var any = _curry2(_dispatchable(["any"], _xany, function any2(fn, list) {
  var idx = 0;
  while (idx < list.length) {
    if (fn(list[idx])) {
      return true;
    }
    idx += 1;
  }
  return false;
}));

// node_modules/ramda/es/anyPass.js
var anyPass = _curry1(function anyPass2(preds) {
  return curryN_default(reduce_default(max_default, 0, pluck_default("length", preds)), function() {
    var idx = 0;
    var len = preds.length;
    while (idx < len) {
      if (preds[idx].apply(this, arguments)) {
        return true;
      }
      idx += 1;
    }
    return false;
  });
});

// node_modules/ramda/es/internal/_reduce.js
function _iterableReduce(reducer, acc, iter) {
  var step = iter.next();
  while (!step.done) {
    acc = reducer(acc, step.value);
    step = iter.next();
  }
  return acc;
}
function _methodReduce(reducer, acc, obj, methodName) {
  return obj[methodName](reducer, acc);
}
var _reduce = _createReduce(_arrayReduce, _methodReduce, _iterableReduce);
var reduce_default2 = _reduce;

// node_modules/ramda/es/ap.js
var ap = _curry2(function ap2(applyF, applyX) {
  return typeof applyX["fantasy-land/ap"] === "function" ? applyX["fantasy-land/ap"](applyF) : typeof applyF.ap === "function" ? applyF.ap(applyX) : typeof applyF === "function" ? function(x) {
    return applyF(x)(applyX(x));
  } : reduce_default2(function(acc, f2) {
    return _concat(acc, map_default(f2, applyX));
  }, [], applyF);
});
var ap_default = ap;

// node_modules/ramda/es/internal/_aperture.js
function _aperture(n, list) {
  var idx = 0;
  var limit = list.length - (n - 1);
  var acc = new Array(limit >= 0 ? limit : 0);
  while (idx < limit) {
    acc[idx] = Array.prototype.slice.call(list, idx, idx + n);
    idx += 1;
  }
  return acc;
}

// node_modules/ramda/es/internal/_xaperture.js
var XAperture = function() {
  function XAperture2(n, xf) {
    this.xf = xf;
    this.pos = 0;
    this.full = false;
    this.acc = new Array(n);
  }
  XAperture2.prototype["@@transducer/init"] = xfBase_default.init;
  XAperture2.prototype["@@transducer/result"] = function(result) {
    this.acc = null;
    return this.xf["@@transducer/result"](result);
  };
  XAperture2.prototype["@@transducer/step"] = function(result, input) {
    this.store(input);
    return this.full ? this.xf["@@transducer/step"](result, this.getCopy()) : result;
  };
  XAperture2.prototype.store = function(input) {
    this.acc[this.pos] = input;
    this.pos += 1;
    if (this.pos === this.acc.length) {
      this.pos = 0;
      this.full = true;
    }
  };
  XAperture2.prototype.getCopy = function() {
    return _concat(Array.prototype.slice.call(this.acc, this.pos), Array.prototype.slice.call(this.acc, 0, this.pos));
  };
  return XAperture2;
}();
function _xaperture(n) {
  return function(xf) {
    return new XAperture(n, xf);
  };
}

// node_modules/ramda/es/aperture.js
var aperture = _curry2(_dispatchable([], _xaperture, _aperture));

// node_modules/ramda/es/append.js
var append = _curry2(function append2(el, list) {
  return _concat(list, [el]);
});

// node_modules/ramda/es/apply.js
var apply = _curry2(function apply2(fn, args) {
  return fn.apply(this, args);
});
var apply_default = apply;

// node_modules/ramda/es/values.js
var values = _curry1(function values2(obj) {
  var props3 = keys_default(obj);
  var len = props3.length;
  var vals = [];
  var idx = 0;
  while (idx < len) {
    vals[idx] = obj[props3[idx]];
    idx += 1;
  }
  return vals;
});
var values_default = values;

// node_modules/ramda/es/applySpec.js
function mapValues(fn, obj) {
  return isArray_default(obj) ? obj.map(fn) : keys_default(obj).reduce(function(acc, key) {
    acc[key] = fn(obj[key]);
    return acc;
  }, {});
}
var applySpec = _curry1(function applySpec2(spec) {
  spec = mapValues(function(v) {
    return typeof v == "function" ? v : applySpec2(v);
  }, spec);
  return curryN_default(reduce_default(max_default, 0, pluck_default("length", values_default(spec))), function() {
    var args = arguments;
    return mapValues(function(f2) {
      return apply_default(f2, args);
    }, spec);
  });
});

// node_modules/ramda/es/applyTo.js
var applyTo = _curry2(function applyTo2(x, f2) {
  return f2(x);
});
var applyTo_default = applyTo;

// node_modules/ramda/es/ascend.js
var ascend = _curry3(function ascend2(fn, a, b) {
  var aa = fn(a);
  var bb = fn(b);
  return aa < bb ? -1 : aa > bb ? 1 : 0;
});

// node_modules/ramda/es/curry.js
var curry = _curry1(function curry2(fn) {
  return curryN_default(fn.length, fn);
});
var curry_default = curry;

// node_modules/ramda/es/ascendNatural.js
var ascendNatural = curry_default(function ascendNatural2(locales, fn, a, b) {
  const aa = fn(a);
  const bb = fn(b);
  return aa.localeCompare(bb, locales, {
    numeric: true
  });
});

// node_modules/ramda/es/internal/_assoc.js
function _assoc(prop3, val, obj) {
  if (isInteger_default(prop3) && isArray_default(obj)) {
    var arr = [].concat(obj);
    arr[prop3] = val;
    return arr;
  }
  var result = {};
  for (var p in obj) {
    result[p] = obj[p];
  }
  result[prop3] = val;
  return result;
}

// node_modules/ramda/es/isNil.js
var isNil = _curry1(function isNil2(x) {
  return x == null;
});
var isNil_default = isNil;

// node_modules/ramda/es/assocPath.js
var assocPath = _curry3(function assocPath2(path2, val, obj) {
  if (path2.length === 0) {
    return val;
  }
  var idx = path2[0];
  if (path2.length > 1) {
    var nextObj = !isNil_default(obj) && _has(idx, obj) && typeof obj[idx] === "object" ? obj[idx] : isInteger_default(path2[1]) ? [] : {};
    val = assocPath2(Array.prototype.slice.call(path2, 1), val, nextObj);
  }
  return _assoc(idx, val, obj);
});
var assocPath_default = assocPath;

// node_modules/ramda/es/assoc.js
var assoc = _curry3(function assoc2(prop3, val, obj) {
  return assocPath_default([prop3], val, obj);
});
var assoc_default = assoc;

// node_modules/ramda/es/nAry.js
var nAry = _curry2(function nAry2(n, fn) {
  switch (n) {
    case 0:
      return function() {
        return fn.call(this);
      };
    case 1:
      return function(a0) {
        return fn.call(this, a0);
      };
    case 2:
      return function(a0, a1) {
        return fn.call(this, a0, a1);
      };
    case 3:
      return function(a0, a1, a2) {
        return fn.call(this, a0, a1, a2);
      };
    case 4:
      return function(a0, a1, a2, a3) {
        return fn.call(this, a0, a1, a2, a3);
      };
    case 5:
      return function(a0, a1, a2, a3, a4) {
        return fn.call(this, a0, a1, a2, a3, a4);
      };
    case 6:
      return function(a0, a1, a2, a3, a4, a5) {
        return fn.call(this, a0, a1, a2, a3, a4, a5);
      };
    case 7:
      return function(a0, a1, a2, a3, a4, a5, a6) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6);
      };
    case 8:
      return function(a0, a1, a2, a3, a4, a5, a6, a7) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);
      };
    case 9:
      return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);
      };
    case 10:
      return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
      };
    default:
      throw new Error("First argument to nAry must be a non-negative integer no greater than ten");
  }
});
var nAry_default = nAry;

// node_modules/ramda/es/binary.js
var binary = _curry1(function binary2(fn) {
  return nAry_default(2, fn);
});

// node_modules/ramda/es/internal/_isFunction.js
function _isFunction(x) {
  var type3 = Object.prototype.toString.call(x);
  return type3 === "[object Function]" || type3 === "[object AsyncFunction]" || type3 === "[object GeneratorFunction]" || type3 === "[object AsyncGeneratorFunction]";
}

// node_modules/ramda/es/liftN.js
var liftN = _curry2(function liftN2(arity, fn) {
  var lifted = curryN_default(arity, fn);
  return curryN_default(arity, function() {
    return _arrayReduce(ap_default, map_default(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));
  });
});
var liftN_default = liftN;

// node_modules/ramda/es/lift.js
var lift = _curry1(function lift2(fn) {
  return liftN_default(fn.length, fn);
});
var lift_default = lift;

// node_modules/ramda/es/both.js
var both = _curry2(function both2(f2, g) {
  return _isFunction(f2) ? function _both() {
    return f2.apply(this, arguments) && g.apply(this, arguments);
  } : lift_default(and_default)(f2, g);
});

// node_modules/ramda/es/call.js
var call = _curry1(function call2(fn) {
  return fn.apply(this, Array.prototype.slice.call(arguments, 1));
});

// node_modules/ramda/es/internal/_makeFlat.js
function _makeFlat(recursive) {
  return function flatt(list) {
    var value, jlen, j;
    var result = [];
    var idx = 0;
    var ilen = list.length;
    while (idx < ilen) {
      if (isArrayLike_default(list[idx])) {
        value = recursive ? flatt(list[idx]) : list[idx];
        j = 0;
        jlen = value.length;
        while (j < jlen) {
          result[result.length] = value[j];
          j += 1;
        }
      } else {
        result[result.length] = list[idx];
      }
      idx += 1;
    }
    return result;
  };
}

// node_modules/ramda/es/internal/_forceReduced.js
function _forceReduced(x) {
  return {
    "@@transducer/value": x,
    "@@transducer/reduced": true
  };
}

// node_modules/ramda/es/internal/_flatCat.js
var tInit = "@@transducer/init";
var tStep = "@@transducer/step";
var tResult = "@@transducer/result";
var XPreservingReduced = function() {
  function XPreservingReduced2(xf) {
    this.xf = xf;
  }
  XPreservingReduced2.prototype[tInit] = xfBase_default.init;
  XPreservingReduced2.prototype[tResult] = xfBase_default.result;
  XPreservingReduced2.prototype[tStep] = function(result, input) {
    var ret2 = this.xf[tStep](result, input);
    return ret2["@@transducer/reduced"] ? _forceReduced(ret2) : ret2;
  };
  return XPreservingReduced2;
}();
var XFlatCat = function() {
  function XFlatCat2(xf) {
    this.xf = new XPreservingReduced(xf);
  }
  XFlatCat2.prototype[tInit] = xfBase_default.init;
  XFlatCat2.prototype[tResult] = xfBase_default.result;
  XFlatCat2.prototype[tStep] = function(result, input) {
    return !isArrayLike_default(input) ? _xArrayReduce(this.xf, result, [input]) : xReduce_default(this.xf, result, input);
  };
  return XFlatCat2;
}();
var _flatCat = function _xcat(xf) {
  return new XFlatCat(xf);
};
var flatCat_default = _flatCat;

// node_modules/ramda/es/internal/_xchain.js
function _xchain(f2) {
  return function(xf) {
    return xmap_default(f2)(flatCat_default(xf));
  };
}

// node_modules/ramda/es/chain.js
var chain = _curry2(_dispatchable(["fantasy-land/chain", "chain"], _xchain, function chain2(fn, monad) {
  if (typeof monad === "function") {
    return function(x) {
      return fn(monad(x))(x);
    };
  }
  return _makeFlat(false)(map_default(fn, monad));
}));
var chain_default = chain;

// node_modules/ramda/es/clamp.js
var clamp = _curry3(function clamp2(min3, max5, value) {
  if (min3 > max5) {
    throw new Error("min must not be greater than max in clamp(min, max, value)");
  }
  return value < min3 ? min3 : value > max5 ? max5 : value;
});

// node_modules/ramda/es/internal/_cloneRegExp.js
function _cloneRegExp(pattern) {
  return new RegExp(pattern.source, pattern.flags ? pattern.flags : (pattern.global ? "g" : "") + (pattern.ignoreCase ? "i" : "") + (pattern.multiline ? "m" : "") + (pattern.sticky ? "y" : "") + (pattern.unicode ? "u" : "") + (pattern.dotAll ? "s" : ""));
}

// node_modules/ramda/es/internal/_clone.js
function _clone(value, deep, map3) {
  map3 || (map3 = new _ObjectMap());
  if (_isPrimitive(value)) {
    return value;
  }
  var copy = function copy2(copiedValue) {
    var cachedCopy = map3.get(value);
    if (cachedCopy) {
      return cachedCopy;
    }
    map3.set(value, copiedValue);
    for (var key in value) {
      if (Object.prototype.hasOwnProperty.call(value, key)) {
        copiedValue[key] = deep ? _clone(value[key], true, map3) : value[key];
      }
    }
    return copiedValue;
  };
  switch (type_default(value)) {
    case "Object":
      return copy(Object.create(Object.getPrototypeOf(value)));
    case "Array":
      return copy(Array(value.length));
    case "Date":
      return new Date(value.valueOf());
    case "RegExp":
      return _cloneRegExp(value);
    case "Int8Array":
    case "Uint8Array":
    case "Uint8ClampedArray":
    case "Int16Array":
    case "Uint16Array":
    case "Int32Array":
    case "Uint32Array":
    case "Float32Array":
    case "Float64Array":
    case "BigInt64Array":
    case "BigUint64Array":
      return value.slice();
    default:
      return value;
  }
}
function _isPrimitive(param) {
  var type3 = typeof param;
  return param == null || type3 != "object" && type3 != "function";
}
var _ObjectMap = function() {
  function _ObjectMap2() {
    this.map = {};
    this.length = 0;
  }
  _ObjectMap2.prototype.set = function(key, value) {
    var hashedKey = this.hash(key);
    var bucket = this.map[hashedKey];
    if (!bucket) {
      this.map[hashedKey] = bucket = [];
    }
    bucket.push([key, value]);
    this.length += 1;
  };
  _ObjectMap2.prototype.hash = function(key) {
    var hashedKey = [];
    for (var value in key) {
      hashedKey.push(Object.prototype.toString.call(key[value]));
    }
    return hashedKey.join();
  };
  _ObjectMap2.prototype.get = function(key) {
    if (this.length <= 180) {
      for (var p in this.map) {
        var bucket = this.map[p];
        for (var i = 0; i < bucket.length; i += 1) {
          var element = bucket[i];
          if (element[0] === key) {
            return element[1];
          }
        }
      }
      return;
    }
    var hashedKey = this.hash(key);
    var bucket = this.map[hashedKey];
    if (!bucket) {
      return;
    }
    for (var i = 0; i < bucket.length; i += 1) {
      var element = bucket[i];
      if (element[0] === key) {
        return element[1];
      }
    }
  };
  return _ObjectMap2;
}();

// node_modules/ramda/es/clone.js
var clone = _curry1(function clone2(value) {
  return value != null && typeof value.clone === "function" ? value.clone() : _clone(value, true);
});
var clone_default = clone;

// node_modules/ramda/es/collectBy.js
var collectBy = _curry2(function collectBy2(fn, list) {
  var group = reduce_default2(function(o3, x) {
    var tag2 = fn(x);
    if (o3[tag2] === void 0) {
      o3[tag2] = [];
    }
    o3[tag2].push(x);
    return o3;
  }, {}, list);
  var newList = [];
  for (var tag in group) {
    newList.push(group[tag]);
  }
  return newList;
});

// node_modules/ramda/es/comparator.js
var comparator = _curry1(function comparator2(pred) {
  return function(a, b) {
    return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;
  };
});

// node_modules/ramda/es/not.js
var not = _curry1(function not2(a) {
  return !a;
});
var not_default = not;

// node_modules/ramda/es/complement.js
var complement = lift_default(not_default);

// node_modules/ramda/es/internal/_pipe.js
function _pipe(f2, g) {
  return function() {
    return g.call(this, f2.apply(this, arguments));
  };
}

// node_modules/ramda/es/internal/_checkForMethod.js
function _checkForMethod(methodname, fn) {
  return function() {
    var length3 = arguments.length;
    if (length3 === 0) {
      return fn();
    }
    var obj = arguments[length3 - 1];
    return isArray_default(obj) || typeof obj[methodname] !== "function" ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length3 - 1));
  };
}

// node_modules/ramda/es/slice.js
var slice = _curry3(_checkForMethod("slice", function slice2(fromIndex, toIndex, list) {
  return Array.prototype.slice.call(list, fromIndex, toIndex);
}));
var slice_default = slice;

// node_modules/ramda/es/tail.js
var tail = _curry1(_checkForMethod("tail", slice_default(1, Infinity)));
var tail_default = tail;

// node_modules/ramda/es/pipe.js
function pipe() {
  if (arguments.length === 0) {
    throw new Error("pipe requires at least one argument");
  }
  return _arity(arguments[0].length, reduce_default(_pipe, arguments[0], tail_default(arguments)));
}

// node_modules/ramda/es/reverse.js
var reverse = _curry1(function reverse2(list) {
  return _isString(list) ? list.split("").reverse().join("") : Array.prototype.slice.call(list, 0).reverse();
});
var reverse_default = reverse;

// node_modules/ramda/es/compose.js
function compose() {
  if (arguments.length === 0) {
    throw new Error("compose requires at least one argument");
  }
  return pipe.apply(this, reverse_default(arguments));
}

// node_modules/ramda/es/head.js
var head = _curry1(function(list) {
  return _nth(0, list);
});
var head_default = head;

// node_modules/ramda/es/internal/_identity.js
function _identity(x) {
  return x;
}

// node_modules/ramda/es/identity.js
var identity = _curry1(_identity);
var identity_default = identity;

// node_modules/ramda/es/pipeWith.js
var pipeWith = _curry2(function pipeWith2(xf, list) {
  if (list.length <= 0) {
    return identity_default;
  }
  var headList = head_default(list);
  var tailList = tail_default(list);
  return _arity(headList.length, function() {
    return reduce_default2(function(result, f2) {
      return xf.call(this, f2, result);
    }, headList.apply(this, arguments), tailList);
  });
});
var pipeWith_default = pipeWith;

// node_modules/ramda/es/composeWith.js
var composeWith = _curry2(function composeWith2(xf, list) {
  return pipeWith_default.apply(this, [xf, reverse_default(list)]);
});

// node_modules/ramda/es/concat.js
var concat2 = _curry2(function concat3(a, b) {
  if (isArray_default(a)) {
    if (isArray_default(b)) {
      return a.concat(b);
    }
    throw new TypeError(toString_default(b) + " is not an array");
  }
  if (_isString(a)) {
    if (_isString(b)) {
      return a + b;
    }
    throw new TypeError(toString_default(b) + " is not a string");
  }
  if (a != null && _isFunction(a["fantasy-land/concat"])) {
    return a["fantasy-land/concat"](b);
  }
  if (a != null && _isFunction(a.concat)) {
    return a.concat(b);
  }
  throw new TypeError(toString_default(a) + ' does not have a method named "concat" or "fantasy-land/concat"');
});
var concat_default = concat2;

// node_modules/ramda/es/cond.js
var cond = _curry1(function cond2(pairs) {
  var arity = reduce_default(max_default, 0, map_default(function(pair3) {
    return pair3[0].length;
  }, pairs));
  return _arity(arity, function() {
    var idx = 0;
    while (idx < pairs.length) {
      if (pairs[idx][0].apply(this, arguments)) {
        return pairs[idx][1].apply(this, arguments);
      }
      idx += 1;
    }
  });
});

// node_modules/ramda/es/constructN.js
var constructN = _curry2(function constructN2(n, Fn) {
  if (n > 10) {
    throw new Error("Constructor with greater than ten arguments");
  }
  if (n === 0) {
    return function() {
      return new Fn();
    };
  }
  return curry_default(nAry_default(n, function($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
    switch (n) {
      case 1:
        return new Fn($0);
      case 2:
        return new Fn($0, $1);
      case 3:
        return new Fn($0, $1, $2);
      case 4:
        return new Fn($0, $1, $2, $3);
      case 5:
        return new Fn($0, $1, $2, $3, $4);
      case 6:
        return new Fn($0, $1, $2, $3, $4, $5);
      case 7:
        return new Fn($0, $1, $2, $3, $4, $5, $6);
      case 8:
        return new Fn($0, $1, $2, $3, $4, $5, $6, $7);
      case 9:
        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);
      case 10:
        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);
    }
  }));
});
var constructN_default = constructN;

// node_modules/ramda/es/construct.js
var construct = _curry1(function construct2(Fn) {
  return constructN_default(Fn.length, Fn);
});

// node_modules/ramda/es/converge.js
var converge = _curry2(function converge2(after, fns) {
  return curryN_default(reduce_default(max_default, 0, pluck_default("length", fns)), function() {
    var args = arguments;
    var context = this;
    return after.apply(context, _map(function(fn) {
      return fn.apply(context, args);
    }, fns));
  });
});
var converge_default = converge;

// node_modules/ramda/es/count.js
var count = curry_default(function(pred, list) {
  return reduce_default2(function(a, e) {
    return pred(e) ? a + 1 : a;
  }, 0, list);
});

// node_modules/ramda/es/internal/_xreduceBy.js
var XReduceBy = function() {
  function XReduceBy2(valueFn, valueAcc, keyFn, xf) {
    this.valueFn = valueFn;
    this.valueAcc = valueAcc;
    this.keyFn = keyFn;
    this.xf = xf;
    this.inputs = {};
  }
  XReduceBy2.prototype["@@transducer/init"] = xfBase_default.init;
  XReduceBy2.prototype["@@transducer/result"] = function(result) {
    var key;
    for (key in this.inputs) {
      if (_has(key, this.inputs)) {
        result = this.xf["@@transducer/step"](result, this.inputs[key]);
        if (result["@@transducer/reduced"]) {
          result = result["@@transducer/value"];
          break;
        }
      }
    }
    this.inputs = null;
    return this.xf["@@transducer/result"](result);
  };
  XReduceBy2.prototype["@@transducer/step"] = function(result, input) {
    var key = this.keyFn(input);
    this.inputs[key] = this.inputs[key] || [key, _clone(this.valueAcc, false)];
    this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);
    return result;
  };
  return XReduceBy2;
}();
function _xreduceBy(valueFn, valueAcc, keyFn) {
  return function(xf) {
    return new XReduceBy(valueFn, valueAcc, keyFn, xf);
  };
}

// node_modules/ramda/es/reduceBy.js
var reduceBy = _curryN(4, [], _dispatchable([], _xreduceBy, function reduceBy2(valueFn, valueAcc, keyFn, list) {
  var xf = _xwrap(function(acc, elt) {
    var key = keyFn(elt);
    var value = valueFn(_has(key, acc) ? acc[key] : _clone(valueAcc, false), elt);
    if (value && value["@@transducer/reduced"]) {
      return _reduced(acc);
    }
    acc[key] = value;
    return acc;
  });
  return xReduce_default(xf, {}, list);
}));
var reduceBy_default = reduceBy;

// node_modules/ramda/es/countBy.js
var countBy = reduceBy_default(function(acc, elem) {
  return acc + 1;
}, 0);

// node_modules/ramda/es/dec.js
var dec = add_default(-1);

// node_modules/ramda/es/defaultTo.js
var defaultTo = _curry2(function defaultTo2(d, v) {
  return v == null || v !== v ? d : v;
});
var defaultTo_default = defaultTo;

// node_modules/ramda/es/descend.js
var descend = _curry3(function descend2(fn, a, b) {
  var aa = fn(a);
  var bb = fn(b);
  return aa > bb ? -1 : aa < bb ? 1 : 0;
});

// node_modules/ramda/es/descendNatural.js
var descendNatural = curry_default(function descendNatural2(locales, fn, a, b) {
  const aa = fn(a);
  const bb = fn(b);
  return bb.localeCompare(aa, locales, {
    numeric: true
  });
});

// node_modules/ramda/es/internal/_Set.js
var _Set = function() {
  function _Set2() {
    this._nativeSet = typeof Set === "function" ? /* @__PURE__ */ new Set() : null;
    this._items = {};
  }
  _Set2.prototype.add = function(item) {
    return !hasOrAdd(item, true, this);
  };
  _Set2.prototype.has = function(item) {
    return hasOrAdd(item, false, this);
  };
  return _Set2;
}();
function hasOrAdd(item, shouldAdd, set3) {
  var type3 = typeof item;
  var prevSize, newSize;
  switch (type3) {
    case "string":
    case "number":
      if (item === 0 && 1 / item === -Infinity) {
        if (set3._items["-0"]) {
          return true;
        } else {
          if (shouldAdd) {
            set3._items["-0"] = true;
          }
          return false;
        }
      }
      if (set3._nativeSet !== null) {
        if (shouldAdd) {
          prevSize = set3._nativeSet.size;
          set3._nativeSet.add(item);
          newSize = set3._nativeSet.size;
          return newSize === prevSize;
        } else {
          return set3._nativeSet.has(item);
        }
      } else {
        if (!(type3 in set3._items)) {
          if (shouldAdd) {
            set3._items[type3] = {};
            set3._items[type3][item] = true;
          }
          return false;
        } else if (item in set3._items[type3]) {
          return true;
        } else {
          if (shouldAdd) {
            set3._items[type3][item] = true;
          }
          return false;
        }
      }
    case "boolean":
      if (type3 in set3._items) {
        var bIdx = item ? 1 : 0;
        if (set3._items[type3][bIdx]) {
          return true;
        } else {
          if (shouldAdd) {
            set3._items[type3][bIdx] = true;
          }
          return false;
        }
      } else {
        if (shouldAdd) {
          set3._items[type3] = item ? [false, true] : [true, false];
        }
        return false;
      }
    case "function":
      if (set3._nativeSet !== null) {
        if (shouldAdd) {
          prevSize = set3._nativeSet.size;
          set3._nativeSet.add(item);
          newSize = set3._nativeSet.size;
          return newSize === prevSize;
        } else {
          return set3._nativeSet.has(item);
        }
      } else {
        if (!(type3 in set3._items)) {
          if (shouldAdd) {
            set3._items[type3] = [item];
          }
          return false;
        }
        if (!_includes(item, set3._items[type3])) {
          if (shouldAdd) {
            set3._items[type3].push(item);
          }
          return false;
        }
        return true;
      }
    case "undefined":
      if (set3._items[type3]) {
        return true;
      } else {
        if (shouldAdd) {
          set3._items[type3] = true;
        }
        return false;
      }
    case "object":
      if (item === null) {
        if (!set3._items["null"]) {
          if (shouldAdd) {
            set3._items["null"] = true;
          }
          return false;
        }
        return true;
      }
    default:
      type3 = Object.prototype.toString.call(item);
      if (!(type3 in set3._items)) {
        if (shouldAdd) {
          set3._items[type3] = [item];
        }
        return false;
      }
      if (!_includes(item, set3._items[type3])) {
        if (shouldAdd) {
          set3._items[type3].push(item);
        }
        return false;
      }
      return true;
  }
}
var Set_default = _Set;

// node_modules/ramda/es/difference.js
var difference = _curry2(function difference2(first, second) {
  var out = [];
  var idx = 0;
  var firstLen = first.length;
  var secondLen = second.length;
  var toFilterOut = new Set_default();
  for (var i = 0; i < secondLen; i += 1) {
    toFilterOut.add(second[i]);
  }
  while (idx < firstLen) {
    if (toFilterOut.add(first[idx])) {
      out[out.length] = first[idx];
    }
    idx += 1;
  }
  return out;
});
var difference_default = difference;

// node_modules/ramda/es/differenceWith.js
var differenceWith = _curry3(function differenceWith2(pred, first, second) {
  var out = [];
  var idx = 0;
  var firstLen = first.length;
  while (idx < firstLen) {
    if (!_includesWith(pred, first[idx], second) && !_includesWith(pred, first[idx], out)) {
      out.push(first[idx]);
    }
    idx += 1;
  }
  return out;
});
var differenceWith_default = differenceWith;

// node_modules/ramda/es/remove.js
var remove = _curry3(function remove2(start, count2, list) {
  var result = Array.prototype.slice.call(list, 0);
  result.splice(start, count2);
  return result;
});
var remove_default = remove;

// node_modules/ramda/es/internal/_dissoc.js
function _dissoc(prop3, obj) {
  if (obj == null) {
    return obj;
  }
  if (isInteger_default(prop3) && isArray_default(obj)) {
    return remove_default(prop3, 1, obj);
  }
  var result = {};
  for (var p in obj) {
    result[p] = obj[p];
  }
  delete result[prop3];
  return result;
}

// node_modules/ramda/es/dissocPath.js
function _shallowCloneObject(prop3, obj) {
  if (isInteger_default(prop3) && isArray_default(obj)) {
    return [].concat(obj);
  }
  var result = {};
  for (var p in obj) {
    result[p] = obj[p];
  }
  return result;
}
var dissocPath = _curry2(function dissocPath2(path2, obj) {
  if (obj == null) {
    return obj;
  }
  switch (path2.length) {
    case 0:
      return obj;
    case 1:
      return _dissoc(path2[0], obj);
    default:
      var head2 = path2[0];
      var tail2 = Array.prototype.slice.call(path2, 1);
      if (obj[head2] == null) {
        return _shallowCloneObject(head2, obj);
      } else {
        return assoc_default(head2, dissocPath2(tail2, obj[head2]), obj);
      }
  }
});
var dissocPath_default = dissocPath;

// node_modules/ramda/es/dissoc.js
var dissoc = _curry2(function dissoc2(prop3, obj) {
  return dissocPath_default([prop3], obj);
});

// node_modules/ramda/es/divide.js
var divide = _curry2(function divide2(a, b) {
  return a / b;
});

// node_modules/ramda/es/internal/_xdrop.js
var XDrop = function() {
  function XDrop2(n, xf) {
    this.xf = xf;
    this.n = n;
  }
  XDrop2.prototype["@@transducer/init"] = xfBase_default.init;
  XDrop2.prototype["@@transducer/result"] = xfBase_default.result;
  XDrop2.prototype["@@transducer/step"] = function(result, input) {
    if (this.n > 0) {
      this.n -= 1;
      return result;
    }
    return this.xf["@@transducer/step"](result, input);
  };
  return XDrop2;
}();
function _xdrop(n) {
  return function(xf) {
    return new XDrop(n, xf);
  };
}

// node_modules/ramda/es/drop.js
var drop = _curry2(_dispatchable(["drop"], _xdrop, function drop2(n, xs) {
  return slice_default(Math.max(0, n), Infinity, xs);
}));
var drop_default = drop;

// node_modules/ramda/es/internal/_xtake.js
var XTake = function() {
  function XTake2(n, xf) {
    this.xf = xf;
    this.n = n;
    this.i = 0;
  }
  XTake2.prototype["@@transducer/init"] = xfBase_default.init;
  XTake2.prototype["@@transducer/result"] = xfBase_default.result;
  XTake2.prototype["@@transducer/step"] = function(result, input) {
    this.i += 1;
    var ret2 = this.n === 0 ? result : this.xf["@@transducer/step"](result, input);
    return this.n >= 0 && this.i >= this.n ? _reduced(ret2) : ret2;
  };
  return XTake2;
}();
function _xtake(n) {
  return function(xf) {
    return new XTake(n, xf);
  };
}

// node_modules/ramda/es/take.js
var take = _curry2(_dispatchable(["take"], _xtake, function take2(n, xs) {
  return slice_default(0, n < 0 ? Infinity : n, xs);
}));
var take_default = take;

// node_modules/ramda/es/internal/_dropLast.js
function dropLast(n, xs) {
  return take_default(n < xs.length ? xs.length - n : 0, xs);
}

// node_modules/ramda/es/internal/_xdropLast.js
var XDropLast = function() {
  function XDropLast2(n, xf) {
    if (n <= 0) {
      return xf;
    }
    this.xf = xf;
    this.pos = 0;
    this.full = false;
    this.acc = new Array(n);
  }
  XDropLast2.prototype["@@transducer/init"] = xfBase_default.init;
  XDropLast2.prototype["@@transducer/result"] = function(result) {
    this.acc = null;
    return this.xf["@@transducer/result"](result);
  };
  XDropLast2.prototype["@@transducer/step"] = function(result, input) {
    if (this.full) {
      result = this.xf["@@transducer/step"](result, this.acc[this.pos]);
    }
    this.store(input);
    return result;
  };
  XDropLast2.prototype.store = function(input) {
    this.acc[this.pos] = input;
    this.pos += 1;
    if (this.pos === this.acc.length) {
      this.pos = 0;
      this.full = true;
    }
  };
  return XDropLast2;
}();
function _xdropLast(n) {
  return function(xf) {
    return new XDropLast(n, xf);
  };
}

// node_modules/ramda/es/dropLast.js
var dropLast2 = _curry2(_dispatchable([], _xdropLast, dropLast));

// node_modules/ramda/es/internal/_dropLastWhile.js
function dropLastWhile(pred, xs) {
  var idx = xs.length - 1;
  while (idx >= 0 && pred(xs[idx])) {
    idx -= 1;
  }
  return slice_default(0, idx + 1, xs);
}

// node_modules/ramda/es/internal/_xdropLastWhile.js
var XDropLastWhile = function() {
  function XDropLastWhile2(fn, xf) {
    this.f = fn;
    this.retained = [];
    this.xf = xf;
  }
  XDropLastWhile2.prototype["@@transducer/init"] = xfBase_default.init;
  XDropLastWhile2.prototype["@@transducer/result"] = function(result) {
    this.retained = null;
    return this.xf["@@transducer/result"](result);
  };
  XDropLastWhile2.prototype["@@transducer/step"] = function(result, input) {
    return this.f(input) ? this.retain(result, input) : this.flush(result, input);
  };
  XDropLastWhile2.prototype.flush = function(result, input) {
    result = xReduce_default(this.xf, result, this.retained);
    this.retained = [];
    return this.xf["@@transducer/step"](result, input);
  };
  XDropLastWhile2.prototype.retain = function(result, input) {
    this.retained.push(input);
    return result;
  };
  return XDropLastWhile2;
}();
function _xdropLastWhile(fn) {
  return function(xf) {
    return new XDropLastWhile(fn, xf);
  };
}

// node_modules/ramda/es/dropLastWhile.js
var dropLastWhile2 = _curry2(_dispatchable([], _xdropLastWhile, dropLastWhile));

// node_modules/ramda/es/internal/_xdropRepeatsWith.js
var XDropRepeatsWith = function() {
  function XDropRepeatsWith2(pred, xf) {
    this.xf = xf;
    this.pred = pred;
    this.lastValue = void 0;
    this.seenFirstValue = false;
  }
  XDropRepeatsWith2.prototype["@@transducer/init"] = xfBase_default.init;
  XDropRepeatsWith2.prototype["@@transducer/result"] = xfBase_default.result;
  XDropRepeatsWith2.prototype["@@transducer/step"] = function(result, input) {
    var sameAsLast = false;
    if (!this.seenFirstValue) {
      this.seenFirstValue = true;
    } else if (this.pred(this.lastValue, input)) {
      sameAsLast = true;
    }
    this.lastValue = input;
    return sameAsLast ? result : this.xf["@@transducer/step"](result, input);
  };
  return XDropRepeatsWith2;
}();
function _xdropRepeatsWith(pred) {
  return function(xf) {
    return new XDropRepeatsWith(pred, xf);
  };
}

// node_modules/ramda/es/last.js
var last = _curry1(function(list) {
  return _nth(-1, list);
});
var last_default = last;

// node_modules/ramda/es/dropRepeatsWith.js
var dropRepeatsWith = _curry2(_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith2(pred, list) {
  var result = [];
  var idx = 1;
  var len = list.length;
  if (len !== 0) {
    result[0] = list[0];
    while (idx < len) {
      if (!pred(last_default(result), list[idx])) {
        result[result.length] = list[idx];
      }
      idx += 1;
    }
  }
  return result;
}));
var dropRepeatsWith_default = dropRepeatsWith;

// node_modules/ramda/es/dropRepeats.js
var dropRepeats = _curry1(_dispatchable([], function() {
  return _xdropRepeatsWith(equals_default);
}, dropRepeatsWith_default(equals_default)));

// node_modules/ramda/es/eqBy.js
var eqBy = _curry3(function eqBy2(f2, x, y) {
  return equals_default(f2(x), f2(y));
});
var eqBy_default = eqBy;

// node_modules/ramda/es/dropRepeatsBy.js
var dropRepeatsBy = _curry2(function(fn, list) {
  return _dispatchable([], function() {
    return _xdropRepeatsWith(eqBy_default(fn));
  }, dropRepeatsWith_default(eqBy_default(fn)))(list);
});

// node_modules/ramda/es/internal/_xdropWhile.js
var XDropWhile = function() {
  function XDropWhile2(f2, xf) {
    this.xf = xf;
    this.f = f2;
  }
  XDropWhile2.prototype["@@transducer/init"] = xfBase_default.init;
  XDropWhile2.prototype["@@transducer/result"] = xfBase_default.result;
  XDropWhile2.prototype["@@transducer/step"] = function(result, input) {
    if (this.f) {
      if (this.f(input)) {
        return result;
      }
      this.f = null;
    }
    return this.xf["@@transducer/step"](result, input);
  };
  return XDropWhile2;
}();
function _xdropWhile(f2) {
  return function(xf) {
    return new XDropWhile(f2, xf);
  };
}

// node_modules/ramda/es/dropWhile.js
var dropWhile = _curry2(_dispatchable(["dropWhile"], _xdropWhile, function dropWhile2(pred, xs) {
  var idx = 0;
  var len = xs.length;
  while (idx < len && pred(xs[idx])) {
    idx += 1;
  }
  return slice_default(idx, Infinity, xs);
}));

// node_modules/ramda/es/or.js
var or = _curry2(function or2(a, b) {
  return a || b;
});
var or_default = or;

// node_modules/ramda/es/either.js
var either = _curry2(function either2(f2, g) {
  return _isFunction(f2) ? function _either() {
    return f2.apply(this, arguments) || g.apply(this, arguments);
  } : lift_default(or_default)(f2, g);
});

// node_modules/ramda/es/internal/_isTypedArray.js
function _isTypedArray(val) {
  var type3 = Object.prototype.toString.call(val);
  return type3 === "[object Uint8ClampedArray]" || type3 === "[object Int8Array]" || type3 === "[object Uint8Array]" || type3 === "[object Int16Array]" || type3 === "[object Uint16Array]" || type3 === "[object Int32Array]" || type3 === "[object Uint32Array]" || type3 === "[object Float32Array]" || type3 === "[object Float64Array]" || type3 === "[object BigInt64Array]" || type3 === "[object BigUint64Array]";
}

// node_modules/ramda/es/empty.js
var empty = _curry1(function empty2(x) {
  return x != null && typeof x["fantasy-land/empty"] === "function" ? x["fantasy-land/empty"]() : x != null && x.constructor != null && typeof x.constructor["fantasy-land/empty"] === "function" ? x.constructor["fantasy-land/empty"]() : x != null && typeof x.empty === "function" ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === "function" ? x.constructor.empty() : isArray_default(x) ? [] : _isString(x) ? "" : _isObject(x) ? {} : isArguments_default(x) ? /* @__PURE__ */ function() {
    return arguments;
  }() : _isTypedArray(x) ? x.constructor.from("") : void 0;
});
var empty_default = empty;

// node_modules/ramda/es/takeLast.js
var takeLast = _curry2(function takeLast2(n, xs) {
  return drop_default(n >= 0 ? xs.length - n : 0, xs);
});
var takeLast_default = takeLast;

// node_modules/ramda/es/endsWith.js
var endsWith = _curry2(function(suffix, list) {
  return equals_default(takeLast_default(suffix.length, list), suffix);
});

// node_modules/ramda/es/eqProps.js
var eqProps = _curry3(function eqProps2(prop3, obj1, obj2) {
  return equals_default(obj1[prop3], obj2[prop3]);
});

// node_modules/ramda/es/evolve.js
var evolve = _curry2(function evolve2(transformations, object) {
  if (!_isObject(object) && !isArray_default(object)) {
    return object;
  }
  var result = object instanceof Array ? [] : {};
  var transformation, key, type3;
  for (key in object) {
    transformation = transformations[key];
    type3 = typeof transformation;
    result[key] = type3 === "function" ? transformation(object[key]) : transformation && type3 === "object" ? evolve2(transformation, object[key]) : object[key];
  }
  return result;
});

// node_modules/ramda/es/internal/_xfind.js
var XFind = function() {
  function XFind2(f2, xf) {
    this.xf = xf;
    this.f = f2;
    this.found = false;
  }
  XFind2.prototype["@@transducer/init"] = xfBase_default.init;
  XFind2.prototype["@@transducer/result"] = function(result) {
    if (!this.found) {
      result = this.xf["@@transducer/step"](result, void 0);
    }
    return this.xf["@@transducer/result"](result);
  };
  XFind2.prototype["@@transducer/step"] = function(result, input) {
    if (this.f(input)) {
      this.found = true;
      result = _reduced(this.xf["@@transducer/step"](result, input));
    }
    return result;
  };
  return XFind2;
}();
function _xfind(f2) {
  return function(xf) {
    return new XFind(f2, xf);
  };
}

// node_modules/ramda/es/find.js
var find = _curry2(_dispatchable(["find"], _xfind, function find2(fn, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    if (fn(list[idx])) {
      return list[idx];
    }
    idx += 1;
  }
}));

// node_modules/ramda/es/internal/_xfindIndex.js
var XFindIndex = function() {
  function XFindIndex2(f2, xf) {
    this.xf = xf;
    this.f = f2;
    this.idx = -1;
    this.found = false;
  }
  XFindIndex2.prototype["@@transducer/init"] = xfBase_default.init;
  XFindIndex2.prototype["@@transducer/result"] = function(result) {
    if (!this.found) {
      result = this.xf["@@transducer/step"](result, -1);
    }
    return this.xf["@@transducer/result"](result);
  };
  XFindIndex2.prototype["@@transducer/step"] = function(result, input) {
    this.idx += 1;
    if (this.f(input)) {
      this.found = true;
      result = _reduced(this.xf["@@transducer/step"](result, this.idx));
    }
    return result;
  };
  return XFindIndex2;
}();
function _xfindIndex(f2) {
  return function(xf) {
    return new XFindIndex(f2, xf);
  };
}

// node_modules/ramda/es/findIndex.js
var findIndex = _curry2(_dispatchable([], _xfindIndex, function findIndex2(fn, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    if (fn(list[idx])) {
      return idx;
    }
    idx += 1;
  }
  return -1;
}));

// node_modules/ramda/es/internal/_xfindLast.js
var XFindLast = function() {
  function XFindLast2(f2, xf) {
    this.xf = xf;
    this.f = f2;
  }
  XFindLast2.prototype["@@transducer/init"] = xfBase_default.init;
  XFindLast2.prototype["@@transducer/result"] = function(result) {
    return this.xf["@@transducer/result"](this.xf["@@transducer/step"](result, this.last));
  };
  XFindLast2.prototype["@@transducer/step"] = function(result, input) {
    if (this.f(input)) {
      this.last = input;
    }
    return result;
  };
  return XFindLast2;
}();
function _xfindLast(f2) {
  return function(xf) {
    return new XFindLast(f2, xf);
  };
}

// node_modules/ramda/es/findLast.js
var findLast = _curry2(_dispatchable([], _xfindLast, function findLast2(fn, list) {
  var idx = list.length - 1;
  while (idx >= 0) {
    if (fn(list[idx])) {
      return list[idx];
    }
    idx -= 1;
  }
}));

// node_modules/ramda/es/internal/_xfindLastIndex.js
var XFindLastIndex = function() {
  function XFindLastIndex2(f2, xf) {
    this.xf = xf;
    this.f = f2;
    this.idx = -1;
    this.lastIdx = -1;
  }
  XFindLastIndex2.prototype["@@transducer/init"] = xfBase_default.init;
  XFindLastIndex2.prototype["@@transducer/result"] = function(result) {
    return this.xf["@@transducer/result"](this.xf["@@transducer/step"](result, this.lastIdx));
  };
  XFindLastIndex2.prototype["@@transducer/step"] = function(result, input) {
    this.idx += 1;
    if (this.f(input)) {
      this.lastIdx = this.idx;
    }
    return result;
  };
  return XFindLastIndex2;
}();
function _xfindLastIndex(f2) {
  return function(xf) {
    return new XFindLastIndex(f2, xf);
  };
}

// node_modules/ramda/es/findLastIndex.js
var findLastIndex = _curry2(_dispatchable([], _xfindLastIndex, function findLastIndex2(fn, list) {
  var idx = list.length - 1;
  while (idx >= 0) {
    if (fn(list[idx])) {
      return idx;
    }
    idx -= 1;
  }
  return -1;
}));

// node_modules/ramda/es/flatten.js
var flatten = _curry1(_makeFlat(true));

// node_modules/ramda/es/flip.js
var flip = _curry1(function flip2(fn) {
  return curryN_default(fn.length, function(a, b) {
    var args = Array.prototype.slice.call(arguments, 0);
    args[0] = b;
    args[1] = a;
    return fn.apply(this, args);
  });
});
var flip_default = flip;

// node_modules/ramda/es/flow.js
var flow = _curry2(function flow2(seed, pipeline) {
  return reduce_default2(applyTo_default, seed, pipeline);
});

// node_modules/ramda/es/forEach.js
var forEach = _curry2(_checkForMethod("forEach", function forEach2(fn, list) {
  var len = list.length;
  var idx = 0;
  while (idx < len) {
    fn(list[idx]);
    idx += 1;
  }
  return list;
}));

// node_modules/ramda/es/forEachObjIndexed.js
var forEachObjIndexed = _curry2(function forEachObjIndexed2(fn, obj) {
  var keyList = keys_default(obj);
  var idx = 0;
  while (idx < keyList.length) {
    var key = keyList[idx];
    fn(obj[key], key, obj);
    idx += 1;
  }
  return obj;
});

// node_modules/ramda/es/fromPairs.js
var fromPairs = _curry1(function fromPairs2(pairs) {
  var result = {};
  var idx = 0;
  while (idx < pairs.length) {
    result[pairs[idx][0]] = pairs[idx][1];
    idx += 1;
  }
  return result;
});

// node_modules/ramda/es/groupBy.js
var groupBy = _curry2(_checkForMethod("groupBy", reduceBy_default(function(acc, item) {
  acc.push(item);
  return acc;
}, [])));

// node_modules/ramda/es/groupWith.js
var groupWith = _curry2(function(fn, list) {
  var res = [];
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    var nextidx = idx + 1;
    while (nextidx < len && fn(list[nextidx - 1], list[nextidx])) {
      nextidx += 1;
    }
    res.push(list.slice(idx, nextidx));
    idx = nextidx;
  }
  return res;
});

// node_modules/ramda/es/gt.js
var gt2 = _curry2(function gt3(a, b) {
  return a > b;
});

// node_modules/ramda/es/gte.js
var gte2 = _curry2(function gte3(a, b) {
  return a >= b;
});

// node_modules/ramda/es/hasPath.js
var hasPath = _curry2(function hasPath2(_path2, obj) {
  if (_path2.length === 0 || isNil_default(obj)) {
    return false;
  }
  var val = obj;
  var idx = 0;
  while (idx < _path2.length) {
    if (!isNil_default(val) && _has(_path2[idx], val)) {
      val = val[_path2[idx]];
      idx += 1;
    } else {
      return false;
    }
  }
  return true;
});
var hasPath_default = hasPath;

// node_modules/ramda/es/has.js
var has = _curry2(function has2(prop3, obj) {
  return hasPath_default([prop3], obj);
});

// node_modules/ramda/es/hasIn.js
var hasIn = _curry2(function hasIn2(prop3, obj) {
  if (isNil_default(obj)) {
    return false;
  }
  return prop3 in obj;
});

// node_modules/ramda/es/ifElse.js
var ifElse = _curry3(function ifElse2(condition, onTrue, onFalse) {
  return curryN_default(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {
    return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);
  });
});

// node_modules/ramda/es/inc.js
var inc = add_default(1);

// node_modules/ramda/es/includes.js
var includes = _curry2(_includes);

// node_modules/ramda/es/indexBy.js
var indexBy = reduceBy_default(function(acc, elem) {
  return elem;
}, null);

// node_modules/ramda/es/indexOf.js
var indexOf = _curry2(function indexOf2(target, xs) {
  return typeof xs.indexOf === "function" && !isArray_default(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);
});

// node_modules/ramda/es/init.js
var init = slice_default(0, -1);

// node_modules/ramda/es/innerJoin.js
var innerJoin = _curry3(function innerJoin2(pred, xs, ys) {
  return _filter(function(x) {
    return _includesWith(pred, x, ys);
  }, xs);
});

// node_modules/ramda/es/insert.js
var insert = _curry3(function insert2(idx, elt, list) {
  idx = idx < list.length && idx >= 0 ? idx : list.length;
  var result = Array.prototype.slice.call(list, 0);
  result.splice(idx, 0, elt);
  return result;
});

// node_modules/ramda/es/insertAll.js
var insertAll = _curry3(function insertAll2(idx, elts, list) {
  idx = idx < list.length && idx >= 0 ? idx : list.length;
  return [].concat(Array.prototype.slice.call(list, 0, idx), elts, Array.prototype.slice.call(list, idx));
});

// node_modules/ramda/es/internal/_xuniqBy.js
var XUniqBy = function() {
  function XUniqBy2(f2, xf) {
    this.xf = xf;
    this.f = f2;
    this.set = new Set_default();
  }
  XUniqBy2.prototype["@@transducer/init"] = xfBase_default.init;
  XUniqBy2.prototype["@@transducer/result"] = xfBase_default.result;
  XUniqBy2.prototype["@@transducer/step"] = function(result, input) {
    return this.set.add(this.f(input)) ? this.xf["@@transducer/step"](result, input) : result;
  };
  return XUniqBy2;
}();
function _xuniqBy(f2) {
  return function(xf) {
    return new XUniqBy(f2, xf);
  };
}

// node_modules/ramda/es/uniqBy.js
var uniqBy = _curry2(_dispatchable([], _xuniqBy, function(fn, list) {
  var set3 = new Set_default();
  var result = [];
  var idx = 0;
  var appliedItem, item;
  while (idx < list.length) {
    item = list[idx];
    appliedItem = fn(item);
    if (set3.add(appliedItem)) {
      result.push(item);
    }
    idx += 1;
  }
  return result;
}));
var uniqBy_default = uniqBy;

// node_modules/ramda/es/uniq.js
var uniq = uniqBy_default(identity_default);
var uniq_default = uniq;

// node_modules/ramda/es/intersection.js
var intersection = _curry2(function intersection2(list1, list2) {
  var toKeep = new Set_default();
  for (var i = 0; i < list1.length; i += 1) {
    toKeep.add(list1[i]);
  }
  return uniq_default(_filter(toKeep.has.bind(toKeep), list2));
});

// node_modules/ramda/es/intersperse.js
var intersperse = _curry2(_checkForMethod("intersperse", function _intersperse(separator, list) {
  var length3 = list.length;
  if (length3 === 0) {
    return [];
  }
  var out = Array(length3 * 2 - 1);
  var idx = 0;
  while (idx < length3) {
    var i = idx * 2;
    if (idx === length3 - 1) {
      out[i] = list[idx];
    } else {
      out[i] = list[idx];
      out[i + 1] = separator;
    }
    idx += 1;
  }
  return out;
}));

// node_modules/ramda/es/internal/_objectAssign.js
function _objectAssign(target) {
  if (target == null) {
    throw new TypeError("Cannot convert undefined or null to object");
  }
  var output = Object(target);
  var idx = 1;
  var length3 = arguments.length;
  while (idx < length3) {
    var source = arguments[idx];
    if (source != null) {
      for (var nextKey in source) {
        if (_has(nextKey, source)) {
          output[nextKey] = source[nextKey];
        }
      }
    }
    idx += 1;
  }
  return output;
}
var objectAssign_default = typeof Object.assign === "function" ? Object.assign : _objectAssign;

// node_modules/ramda/es/objOf.js
var objOf = _curry2(function objOf2(key, val) {
  var obj = {};
  obj[key] = val;
  return obj;
});
var objOf_default = objOf;

// node_modules/ramda/es/internal/_stepCat.js
var _stepCatArray = {
  "@@transducer/init": Array,
  "@@transducer/step": function(xs, x) {
    xs.push(x);
    return xs;
  },
  "@@transducer/result": _identity
};
var _stepCatString = {
  "@@transducer/init": String,
  "@@transducer/step": function(a, b) {
    return a + b;
  },
  "@@transducer/result": _identity
};
var _stepCatObject = {
  "@@transducer/init": Object,
  "@@transducer/step": function(result, input) {
    return objectAssign_default(result, isArrayLike_default(input) ? objOf_default(input[0], input[1]) : input);
  },
  "@@transducer/result": _identity
};
function _stepCat(obj) {
  if (_isTransformer(obj)) {
    return obj;
  }
  if (isArrayLike_default(obj)) {
    return _stepCatArray;
  }
  if (typeof obj === "string") {
    return _stepCatString;
  }
  if (typeof obj === "object") {
    return _stepCatObject;
  }
  throw new Error("Cannot create transformer for " + obj);
}

// node_modules/ramda/es/into.js
var into = _curry3(function into2(acc, transducer, list) {
  var xf = transducer(_isTransformer(acc) ? acc : _stepCat(acc));
  return xReduce_default(xf, xf["@@transducer/init"](), list);
});

// node_modules/ramda/es/invert.js
var invert = _curry1(function invert2(obj) {
  var props3 = keys_default(obj);
  var len = props3.length;
  var idx = 0;
  var out = {};
  while (idx < len) {
    var key = props3[idx];
    var val = obj[key];
    var list = _has(val, out) ? out[val] : out[val] = [];
    list[list.length] = key;
    idx += 1;
  }
  return out;
});

// node_modules/ramda/es/invertObj.js
var invertObj = _curry1(function invertObj2(obj) {
  var props3 = keys_default(obj);
  var len = props3.length;
  var idx = 0;
  var out = {};
  while (idx < len) {
    var key = props3[idx];
    out[obj[key]] = key;
    idx += 1;
  }
  return out;
});

// node_modules/ramda/es/invoker.js
var invoker = _curry2(function invoker2(arity, method) {
  return curryN_default(arity + 1, function() {
    var target = arguments[arity];
    if (target != null && _isFunction(target[method])) {
      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));
    }
    throw new TypeError(toString_default(target) + ' does not have a method named "' + method + '"');
  });
});
var invoker_default = invoker;

// node_modules/ramda/es/is.js
var is = _curry2(function is2(Ctor, val) {
  return val instanceof Ctor || val != null && (val.constructor === Ctor || Ctor.name === "Object" && typeof val === "object");
});
var is_default = is;

// node_modules/ramda/es/isEmpty.js
var isEmpty = _curry1(function isEmpty2(x) {
  return x != null && equals_default(x, empty_default(x));
});
var isEmpty_default = isEmpty;

// node_modules/ramda/es/isNotEmpty.js
var isNotEmpty = _curry1(function isNotEmpty2(x) {
  return !isEmpty_default(x);
});

// node_modules/ramda/es/isNotNil.js
var isNotNil = _curry1(function isNotNil2(x) {
  return !isNil_default(x);
});

// node_modules/ramda/es/join.js
var join = invoker_default(1, "join");

// node_modules/ramda/es/juxt.js
var juxt = _curry1(function juxt2(fns) {
  return converge_default(function() {
    return Array.prototype.slice.call(arguments, 0);
  }, fns);
});
var juxt_default = juxt;

// node_modules/ramda/es/keysIn.js
var keysIn = _curry1(function keysIn2(obj) {
  var prop3;
  var ks = [];
  for (prop3 in obj) {
    ks[ks.length] = prop3;
  }
  return ks;
});

// node_modules/ramda/es/lastIndexOf.js
var lastIndexOf = _curry2(function lastIndexOf2(target, xs) {
  if (typeof xs.lastIndexOf === "function" && !isArray_default(xs)) {
    return xs.lastIndexOf(target);
  } else {
    var idx = xs.length - 1;
    while (idx >= 0) {
      if (equals_default(xs[idx], target)) {
        return idx;
      }
      idx -= 1;
    }
    return -1;
  }
});

// node_modules/ramda/es/internal/_isNumber.js
function _isNumber(x) {
  return Object.prototype.toString.call(x) === "[object Number]";
}

// node_modules/ramda/es/length.js
var length = _curry1(function length2(list) {
  return list != null && _isNumber(list.length) ? list.length : NaN;
});
var length_default = length;

// node_modules/ramda/es/lens.js
var lens = _curry2(function lens2(getter, setter) {
  return function(toFunctorFn) {
    return function(target) {
      return map_default(function(focus) {
        return setter(focus, target);
      }, toFunctorFn(getter(target)));
    };
  };
});
var lens_default = lens;

// node_modules/ramda/es/update.js
var update = _curry3(function update2(idx, x, list) {
  return adjust_default(idx, always_default(x), list);
});
var update_default = update;

// node_modules/ramda/es/lensIndex.js
var lensIndex = _curry1(function lensIndex2(n) {
  return lens_default(function(val) {
    return _nth(n, val);
  }, update_default(n));
});

// node_modules/ramda/es/internal/_path.js
function _path(pathAr, obj) {
  var val = obj;
  for (var i = 0; i < pathAr.length; i += 1) {
    if (val == null) {
      return void 0;
    }
    var p = pathAr[i];
    if (isInteger_default(p)) {
      val = _nth(p, val);
    } else {
      val = val[p];
    }
  }
  return val;
}

// node_modules/ramda/es/lensPath.js
var lensPath = _curry1(function lensPath2(p) {
  return lens_default(function(val) {
    return _path(p, val);
  }, assocPath_default(p));
});

// node_modules/ramda/es/lensProp.js
var lensProp = _curry1(function lensProp2(k) {
  return lens_default(prop_default(k), assoc_default(k));
});

// node_modules/ramda/es/lt.js
var lt = _curry2(function lt2(a, b) {
  return a < b;
});

// node_modules/ramda/es/lte.js
var lte = _curry2(function lte2(a, b) {
  return a <= b;
});

// node_modules/ramda/es/mapAccum.js
var mapAccum = _curry3(function mapAccum2(fn, acc, list) {
  var idx = 0;
  var len = list.length;
  var result = Array(len);
  var tuple = [acc];
  while (idx < len) {
    tuple = fn(tuple[0], list[idx]);
    result[idx] = tuple[1];
    idx += 1;
  }
  return [tuple[0], result];
});

// node_modules/ramda/es/mapAccumRight.js
var mapAccumRight = _curry3(function mapAccumRight2(fn, acc, list) {
  var idx = list.length - 1;
  var result = Array(list.length);
  var tuple = [acc];
  while (idx >= 0) {
    tuple = fn(tuple[0], list[idx]);
    result[idx] = tuple[1];
    idx -= 1;
  }
  return [tuple[0], result];
});

// node_modules/ramda/es/mapObjIndexed.js
var mapObjIndexed = _curry2(function mapObjIndexed2(fn, obj) {
  return _arrayReduce(function(acc, key) {
    acc[key] = fn(obj[key], key, obj);
    return acc;
  }, {}, keys_default(obj));
});

// node_modules/ramda/es/match.js
var match = _curry2(function match2(rx, str) {
  return str.match(rx) || [];
});

// node_modules/ramda/es/mathMod.js
var mathMod = _curry2(function mathMod2(m, p) {
  if (!isInteger_default(m)) {
    return NaN;
  }
  if (!isInteger_default(p) || p < 1) {
    return NaN;
  }
  return (m % p + p) % p;
});

// node_modules/ramda/es/maxBy.js
var maxBy = _curry3(function maxBy2(f2, a, b) {
  var resultB = f2(b);
  return max_default(f2(a), resultB) === resultB ? b : a;
});

// node_modules/ramda/es/sum.js
var sum = reduce_default(add_default, 0);
var sum_default = sum;

// node_modules/ramda/es/mean.js
var mean = _curry1(function mean2(list) {
  return sum_default(list) / list.length;
});
var mean_default = mean;

// node_modules/ramda/es/median.js
var median = _curry1(function median2(list) {
  var len = list.length;
  if (len === 0) {
    return NaN;
  }
  var width = 2 - len % 2;
  var idx = (len - width) / 2;
  return mean_default(Array.prototype.slice.call(list, 0).sort(function(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }).slice(idx, idx + width));
});

// node_modules/ramda/es/memoizeWith.js
var memoizeWith = _curry2(function memoizeWith2(keyGen, fn) {
  var cache2 = {};
  return _arity(fn.length, function() {
    var key = keyGen.apply(this, arguments);
    if (!_has(key, cache2)) {
      cache2[key] = fn.apply(this, arguments);
    }
    return cache2[key];
  });
});

// node_modules/ramda/es/mergeAll.js
var mergeAll = _curry1(function mergeAll2(list) {
  return objectAssign_default.apply(null, [{}].concat(list));
});

// node_modules/ramda/es/mergeWithKey.js
var mergeWithKey = _curry3(function mergeWithKey2(fn, l, r) {
  var result = {};
  var k;
  l = l || {};
  r = r || {};
  for (k in l) {
    if (_has(k, l)) {
      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];
    }
  }
  for (k in r) {
    if (_has(k, r) && !_has(k, result)) {
      result[k] = r[k];
    }
  }
  return result;
});
var mergeWithKey_default = mergeWithKey;

// node_modules/ramda/es/mergeDeepWithKey.js
var mergeDeepWithKey = _curry3(function mergeDeepWithKey2(fn, lObj, rObj) {
  return mergeWithKey_default(function(k, lVal, rVal) {
    if (_isObject(lVal) && _isObject(rVal)) {
      return mergeDeepWithKey2(fn, lVal, rVal);
    } else {
      return fn(k, lVal, rVal);
    }
  }, lObj, rObj);
});
var mergeDeepWithKey_default = mergeDeepWithKey;

// node_modules/ramda/es/mergeDeepLeft.js
var mergeDeepLeft = _curry2(function mergeDeepLeft2(lObj, rObj) {
  return mergeDeepWithKey_default(function(k, lVal, rVal) {
    return lVal;
  }, lObj, rObj);
});

// node_modules/ramda/es/mergeDeepRight.js
var mergeDeepRight = _curry2(function mergeDeepRight2(lObj, rObj) {
  return mergeDeepWithKey_default(function(k, lVal, rVal) {
    return rVal;
  }, lObj, rObj);
});
var mergeDeepRight_default = mergeDeepRight;

// node_modules/ramda/es/mergeDeepWith.js
var mergeDeepWith = _curry3(function mergeDeepWith2(fn, lObj, rObj) {
  return mergeDeepWithKey_default(function(k, lVal, rVal) {
    return fn(lVal, rVal);
  }, lObj, rObj);
});

// node_modules/ramda/es/mergeLeft.js
var mergeLeft = _curry2(function mergeLeft2(l, r) {
  return objectAssign_default({}, r, l);
});

// node_modules/ramda/es/mergeRight.js
var mergeRight = _curry2(function mergeRight2(l, r) {
  return objectAssign_default({}, l, r);
});

// node_modules/ramda/es/mergeWith.js
var mergeWith = _curry3(function mergeWith2(fn, l, r) {
  return mergeWithKey_default(function(_, _l, _r) {
    return fn(_l, _r);
  }, l, r);
});

// node_modules/ramda/es/min.js
var min = _curry2(function min2(a, b) {
  if (a === b) {
    return a;
  }
  function safeMin(x, y) {
    if (x < y !== y < x) {
      return y < x ? y : x;
    }
    return void 0;
  }
  var minByValue = safeMin(a, b);
  if (minByValue !== void 0) {
    return minByValue;
  }
  var minByType = safeMin(typeof a, typeof b);
  if (minByType !== void 0) {
    return minByType === typeof a ? a : b;
  }
  var stringA = toString_default(a);
  var minByStringValue = safeMin(stringA, toString_default(b));
  if (minByStringValue !== void 0) {
    return minByStringValue === stringA ? a : b;
  }
  return a;
});
var min_default = min;

// node_modules/ramda/es/minBy.js
var minBy = _curry3(function minBy2(f2, a, b) {
  var resultB = f2(b);
  return min_default(f2(a), resultB) === resultB ? b : a;
});

// node_modules/ramda/es/internal/_modify.js
function _modify(prop3, fn, obj) {
  if (isInteger_default(prop3) && isArray_default(obj)) {
    var arr = [].concat(obj);
    arr[prop3] = fn(arr[prop3]);
    return arr;
  }
  var result = {};
  for (var p in obj) {
    result[p] = obj[p];
  }
  result[prop3] = fn(result[prop3]);
  return result;
}

// node_modules/ramda/es/modifyPath.js
var modifyPath = _curry3(function modifyPath2(path2, fn, object) {
  if (!_isObject(object) && !isArray_default(object)) {
    return object;
  }
  if (path2.length === 0) {
    return fn(object);
  }
  var idx = path2[0];
  if (!_has(idx, object)) {
    return object;
  }
  if (path2.length === 1) {
    return _modify(idx, fn, object);
  }
  var val = modifyPath2(Array.prototype.slice.call(path2, 1), fn, object[idx]);
  if (val === object[idx]) {
    return object;
  }
  return _assoc(idx, val, object);
});
var modifyPath_default = modifyPath;

// node_modules/ramda/es/modify.js
var modify = _curry3(function modify2(prop3, fn, object) {
  return modifyPath_default([prop3], fn, object);
});

// node_modules/ramda/es/modulo.js
var modulo = _curry2(function modulo2(a, b) {
  return a % b;
});

// node_modules/ramda/es/move.js
var move = _curry3(function(from, to, list) {
  var length3 = list.length;
  var result = list.slice();
  var positiveFrom = from < 0 ? length3 + from : from;
  var positiveTo = to < 0 ? length3 + to : to;
  var item = result.splice(positiveFrom, 1);
  return positiveFrom < 0 || positiveFrom >= list.length || positiveTo < 0 || positiveTo >= list.length ? list : [].concat(result.slice(0, positiveTo)).concat(item).concat(result.slice(positiveTo, list.length));
});

// node_modules/ramda/es/multiply.js
var multiply2 = _curry2(function multiply3(a, b) {
  return a * b;
});
var multiply_default = multiply2;

// node_modules/ramda/es/partialObject.js
var partialObject = _curry2((f2, o3) => (props3) => f2.call(void 0, mergeDeepRight_default(o3, props3)));

// node_modules/ramda/es/negate.js
var negate = _curry1(function negate2(n) {
  return -n;
});

// node_modules/ramda/es/none.js
var none = _curry2(function none2(fn, input) {
  return all_default(_complement(fn), input);
});

// node_modules/ramda/es/nth.js
var nth = _curry2(_nth);

// node_modules/ramda/es/nthArg.js
var nthArg = _curry1(function nthArg2(n) {
  var arity = n < 0 ? 1 : n + 1;
  return curryN_default(arity, function() {
    return _nth(n, arguments);
  });
});

// node_modules/ramda/es/o.js
var o = _curry3(function o2(f2, g, x) {
  return f2(g(x));
});

// node_modules/ramda/es/of.js
var of = _curry2(function of2(Ctor, val) {
  return typeof Ctor["fantasy-land/of"] === "function" ? Ctor["fantasy-land/of"](val) : typeof Ctor.of === "function" ? Ctor.of(val) : [val];
});

// node_modules/ramda/es/omit.js
var omit = _curry2(function omit2(names, obj) {
  var result = {};
  var index = {};
  var idx = 0;
  var len = names.length;
  while (idx < len) {
    index[names[idx]] = 1;
    idx += 1;
  }
  for (var prop3 in obj) {
    if (!index.hasOwnProperty(prop3)) {
      result[prop3] = obj[prop3];
    }
  }
  return result;
});

// node_modules/ramda/es/on.js
var on = _curryN(4, [], function on2(f2, g, a, b) {
  return f2(g(a), g(b));
});

// node_modules/ramda/es/once.js
var once = _curry1(function once2(fn) {
  var called = false;
  var result;
  return _arity(fn.length, function() {
    if (called) {
      return result;
    }
    called = true;
    result = fn.apply(this, arguments);
    return result;
  });
});

// node_modules/ramda/es/internal/_assertPromise.js
function _assertPromise(name, p) {
  if (p == null || !_isFunction(p.then)) {
    throw new TypeError("`" + name + "` expected a Promise, received " + _toString(p, []));
  }
}

// node_modules/ramda/es/otherwise.js
var otherwise = _curry2(function otherwise2(f2, p) {
  _assertPromise("otherwise", p);
  return p.then(null, f2);
});

// node_modules/ramda/es/over.js
var Identity = function(x) {
  return {
    value: x,
    map: function(f2) {
      return Identity(f2(x));
    }
  };
};
var over = _curry3(function over2(lens3, f2, x) {
  return lens3(function(y) {
    return Identity(f2(y));
  })(x).value;
});
var over_default = over;

// node_modules/ramda/es/pair.js
var pair = _curry2(function pair2(fst, snd) {
  return [fst, snd];
});

// node_modules/ramda/es/internal/_createPartialApplicator.js
function _createPartialApplicator(concat4) {
  return _curry2(function(fn, args) {
    return _arity(Math.max(0, fn.length - args.length), function() {
      return fn.apply(this, concat4(args, arguments));
    });
  });
}

// node_modules/ramda/es/partial.js
var partial = _createPartialApplicator(_concat);

// node_modules/ramda/es/partialRight.js
var partialRight = _createPartialApplicator(flip_default(_concat));

// node_modules/ramda/es/partition.js
var partition = juxt_default([filter_default, reject_default]);

// node_modules/ramda/es/path.js
var path = _curry2(_path);

// node_modules/ramda/es/paths.js
var paths = _curry2(function paths2(pathsArray, obj) {
  return pathsArray.map(function(paths3) {
    var val = obj;
    var idx = 0;
    var p;
    while (idx < paths3.length) {
      if (val == null) {
        return;
      }
      p = paths3[idx];
      val = isInteger_default(p) ? _nth(p, val) : val[p];
      idx += 1;
    }
    return val;
  });
});

// node_modules/ramda/es/pathEq.js
var pathEq = _curry3(function pathEq2(val, pathAr, obj) {
  return equals_default(_path(pathAr, obj), val);
});

// node_modules/ramda/es/pathOr.js
var pathOr = _curry3(function pathOr2(d, p, obj) {
  return defaultTo_default(d, _path(p, obj));
});

// node_modules/ramda/es/pathSatisfies.js
var pathSatisfies = _curry3(function pathSatisfies2(pred, propPath, obj) {
  return pred(_path(propPath, obj));
});

// node_modules/ramda/es/pick.js
var pick = _curry2(function pick2(names, obj) {
  var result = {};
  var idx = 0;
  while (idx < names.length) {
    if (names[idx] in obj) {
      result[names[idx]] = obj[names[idx]];
    }
    idx += 1;
  }
  return result;
});

// node_modules/ramda/es/pickAll.js
var pickAll = _curry2(function pickAll2(names, obj) {
  var result = {};
  var idx = 0;
  var len = names.length;
  while (idx < len) {
    var name = names[idx];
    result[name] = obj[name];
    idx += 1;
  }
  return result;
});
var pickAll_default = pickAll;

// node_modules/ramda/es/pickBy.js
var pickBy = _curry2(function pickBy2(test3, obj) {
  var result = {};
  for (var prop3 in obj) {
    if (test3(obj[prop3], prop3, obj)) {
      result[prop3] = obj[prop3];
    }
  }
  return result;
});

// node_modules/ramda/es/prepend.js
var prepend = _curry2(function prepend2(el, list) {
  return _concat([el], list);
});
var prepend_default = prepend;

// node_modules/ramda/es/product.js
var product = reduce_default(multiply_default, 1);

// node_modules/ramda/es/useWith.js
var useWith = _curry2(function useWith2(fn, transformers) {
  return curryN_default(transformers.length, function() {
    var args = [];
    var idx = 0;
    while (idx < transformers.length) {
      args.push(transformers[idx].call(this, arguments[idx]));
      idx += 1;
    }
    return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));
  });
});
var useWith_default = useWith;

// node_modules/ramda/es/project.js
var project = useWith_default(_map, [pickAll_default, identity_default]);

// node_modules/ramda/es/internal/_promap.js
function _promap(f2, g, profunctor) {
  return function(x) {
    return g(profunctor(f2(x)));
  };
}

// node_modules/ramda/es/internal/_xpromap.js
var XPromap = function() {
  function XPromap2(f2, g, xf) {
    this.xf = xf;
    this.f = f2;
    this.g = g;
  }
  XPromap2.prototype["@@transducer/init"] = xfBase_default.init;
  XPromap2.prototype["@@transducer/result"] = xfBase_default.result;
  XPromap2.prototype["@@transducer/step"] = function(result, input) {
    return this.xf["@@transducer/step"](result, _promap(this.f, this.g, input));
  };
  return XPromap2;
}();
function _xpromap(f2, g) {
  return function(xf) {
    return new XPromap(f2, g, xf);
  };
}

// node_modules/ramda/es/promap.js
var promap = _curry3(_dispatchable(["fantasy-land/promap", "promap"], _xpromap, _promap));

// node_modules/ramda/es/propEq.js
var propEq = _curry3(function propEq2(val, name, obj) {
  return equals_default(val, prop_default(name, obj));
});

// node_modules/ramda/es/propIs.js
var propIs = _curry3(function propIs2(type3, name, obj) {
  return is_default(type3, prop_default(name, obj));
});

// node_modules/ramda/es/propOr.js
var propOr = _curry3(function propOr2(val, p, obj) {
  return defaultTo_default(val, prop_default(p, obj));
});

// node_modules/ramda/es/propSatisfies.js
var propSatisfies = _curry3(function propSatisfies2(pred, name, obj) {
  return pred(prop_default(name, obj));
});

// node_modules/ramda/es/props.js
var props = _curry2(function props2(ps, obj) {
  return ps.map(function(p) {
    return prop_default(p, obj);
  });
});

// node_modules/ramda/es/range.js
var range = _curry2(function range2(from, to) {
  if (!(_isNumber(from) && _isNumber(to))) {
    throw new TypeError("Both arguments to range must be numbers");
  }
  var result = Array(from < to ? to - from : 0);
  var finish = from < 0 ? to + Math.abs(from) : to - from;
  var idx = 0;
  while (idx < finish) {
    result[idx] = idx + from;
    idx += 1;
  }
  return result;
});

// node_modules/ramda/es/reduceRight.js
var reduceRight = _curry3(function reduceRight2(fn, acc, list) {
  var idx = list.length - 1;
  while (idx >= 0) {
    acc = fn(list[idx], acc);
    if (acc && acc["@@transducer/reduced"]) {
      acc = acc["@@transducer/value"];
      break;
    }
    idx -= 1;
  }
  return acc;
});
var reduceRight_default = reduceRight;

// node_modules/ramda/es/reduceWhile.js
var reduceWhile = _curryN(4, [], function _reduceWhile(pred, fn, a, list) {
  var xf = _xwrap(function(acc, x) {
    return pred(acc, x) ? fn(acc, x) : _reduced(acc);
  });
  return xReduce_default(xf, a, list);
});

// node_modules/ramda/es/reduced.js
var reduced = _curry1(_reduced);

// node_modules/ramda/es/times.js
var times = _curry2(function times2(fn, n) {
  var len = Number(n);
  if (len < 0 || isNaN(len)) {
    throw new RangeError("n must be a non-negative number");
  }
  var idx = 0;
  var list = Array(len);
  while (idx < len) {
    list[idx] = fn(idx);
    idx += 1;
  }
  return list;
});
var times_default = times;

// node_modules/ramda/es/repeat.js
var repeat = _curry2(function repeat2(value, n) {
  return times_default(always_default(value), n);
});

// node_modules/ramda/es/replace.js
var replace = _curry3(function replace2(regex, replacement, str) {
  return str.replace(regex, replacement);
});

// node_modules/ramda/es/internal/_xscan.js
var tInit2 = "@@transducer/init";
var tStep2 = "@@transducer/step";
var XScan = function() {
  function XScan2(reducer, acc, xf) {
    this.xf = xf;
    this.f = reducer;
    this.acc = acc;
  }
  XScan2.prototype[tInit2] = function() {
    return this.xf[tStep2](this.xf[tInit2](), this.acc);
  };
  XScan2.prototype["@@transducer/result"] = xfBase_default.result;
  XScan2.prototype[tStep2] = function(result, input) {
    if (result["@@transducer/reduced"]) {
      return result;
    }
    this.acc = this.f(this.acc, input);
    return this.xf[tStep2](result, this.acc);
  };
  return XScan2;
}();
var _xscan = _curry3(function _xscan2(reducer, acc, xf) {
  return new XScan(reducer, acc, xf);
});
var xscan_default = _xscan;

// node_modules/ramda/es/scan.js
var scan = _curry3(_dispatchable([], xscan_default, function scan2(fn, acc, list) {
  var idx = 0;
  var len = list.length;
  var result = Array(len + 1);
  result[0] = acc;
  while (idx < len) {
    acc = fn(acc, list[idx]);
    result[idx + 1] = acc;
    idx += 1;
  }
  return result;
}));

// node_modules/ramda/es/sequence.js
var sequence = _curry2(function sequence2(F, traversable) {
  var of3 = typeof F["fantasy-land/of"] === "function" ? F["fantasy-land/of"] : typeof F.of === "function" ? F.of : F;
  var TypeRep = {
    "fantasy-land/of": of3
  };
  return typeof traversable["fantasy-land/traverse"] === "function" ? traversable["fantasy-land/traverse"](TypeRep, _identity) : typeof traversable.traverse === "function" ? traversable.traverse(TypeRep, _identity) : reduceRight_default(function(x, acc) {
    return ap_default(map_default(prepend_default, x), acc);
  }, of3([]), traversable);
});
var sequence_default = sequence;

// node_modules/ramda/es/set.js
var set = _curry3(function set2(lens3, v, x) {
  return over_default(lens3, always_default(v), x);
});

// node_modules/ramda/es/sort.js
var sort = _curry2(function sort2(comparator3, list) {
  return Array.prototype.slice.call(list, 0).sort(comparator3);
});

// node_modules/ramda/es/sortBy.js
var sortBy = _curry2(function sortBy2(fn, list) {
  return Array.prototype.slice.call(list, 0).sort(function(a, b) {
    var aa = fn(a);
    var bb = fn(b);
    return aa < bb ? -1 : aa > bb ? 1 : 0;
  });
});

// node_modules/ramda/es/sortWith.js
var sortWith = _curry2(function sortWith2(fns, list) {
  return Array.prototype.slice.call(list, 0).sort(function(a, b) {
    var result = 0;
    var i = 0;
    while (result === 0 && i < fns.length) {
      result = fns[i](a, b);
      i += 1;
    }
    return result;
  });
});

// node_modules/ramda/es/split.js
var split2 = invoker_default(1, "split");

// node_modules/ramda/es/splitAt.js
var splitAt = _curry2(function splitAt2(index, array) {
  return [slice_default(0, index, array), slice_default(index, length_default(array), array)];
});

// node_modules/ramda/es/splitEvery.js
var splitEvery = _curry2(function splitEvery2(n, list) {
  if (n <= 0) {
    throw new Error("First argument to splitEvery must be a positive integer");
  }
  var result = [];
  var idx = 0;
  while (idx < list.length) {
    result.push(slice_default(idx, idx += n, list));
  }
  return result;
});

// node_modules/ramda/es/splitWhen.js
var splitWhen = _curry2(function splitWhen2(pred, list) {
  var idx = 0;
  var len = list.length;
  var prefix = [];
  while (idx < len && !pred(list[idx])) {
    prefix.push(list[idx]);
    idx += 1;
  }
  return [prefix, Array.prototype.slice.call(list, idx)];
});

// node_modules/ramda/es/splitWhenever.js
var splitWhenever = _curryN(2, [], function splitWhenever2(pred, list) {
  var acc = [];
  var curr = [];
  for (var i = 0; i < list.length; i = i + 1) {
    if (!pred(list[i])) {
      curr.push(list[i]);
    }
    if ((i < list.length - 1 && pred(list[i + 1]) || i === list.length - 1) && curr.length > 0) {
      acc.push(curr);
      curr = [];
    }
  }
  return acc;
});

// node_modules/ramda/es/startsWith.js
var startsWith = _curry2(function(prefix, list) {
  return equals_default(take_default(prefix.length, list), prefix);
});

// node_modules/ramda/es/subtract.js
var subtract = _curry2(function subtract2(a, b) {
  return Number(a) - Number(b);
});

// node_modules/ramda/es/swap.js
var swapObject = function(indexA, indexB, o3) {
  var copy = clone_default(o3);
  var properties = Object.getOwnPropertyNames(copy);
  if (properties.includes(indexA) && properties.includes(indexB)) {
    var tmp = copy[indexA];
    copy[indexA] = copy[indexB];
    copy[indexB] = tmp;
  }
  return copy;
};
var swapList = function(indexA, indexB, list) {
  var length3 = list.length;
  var result = list.slice();
  var positiveIndexA = indexA < 0 ? length3 + indexA : indexA;
  var positiveIndexB = indexB < 0 ? length3 + indexB : indexB;
  var positiveMin = Math.min(positiveIndexA, positiveIndexB);
  var positiveMax = Math.max(positiveIndexA, positiveIndexB);
  if (positiveIndexA < 0 || positiveIndexA > length3) {
    return result;
  }
  if (positiveIndexB < 0 || positiveIndexB > length3) {
    return result;
  }
  if (positiveIndexA === positiveIndexB) {
    return result;
  }
  result = [].concat(result.slice(0, positiveMin)).concat([result[positiveMax]]).concat(result.slice(positiveMin + 1, positiveMax)).concat([result[positiveMin]]).concat(result.slice(positiveMax + 1, length3));
  return result;
};
var swapString = function(indexA, indexB, s) {
  var result = swapList(indexA, indexB, s);
  return isArray_default(result) ? result.join("") : result;
};
var swap = _curry3(function(indexA, indexB, o3) {
  if (isArray_default(o3)) {
    return swapList(indexA, indexB, o3);
  } else if (_isString(o3)) {
    return swapString(indexA, indexB, o3);
  } else {
    return swapObject(indexA, indexB, o3);
  }
});

// node_modules/ramda/es/symmetricDifference.js
var symmetricDifference = _curry2(function symmetricDifference2(list1, list2) {
  return concat_default(difference_default(list1, list2), difference_default(list2, list1));
});

// node_modules/ramda/es/symmetricDifferenceWith.js
var symmetricDifferenceWith = _curry3(function symmetricDifferenceWith2(pred, list1, list2) {
  return concat_default(differenceWith_default(pred, list1, list2), differenceWith_default(pred, list2, list1));
});

// node_modules/ramda/es/takeLastWhile.js
var takeLastWhile = _curry2(function takeLastWhile2(fn, xs) {
  var idx = xs.length - 1;
  while (idx >= 0 && fn(xs[idx])) {
    idx -= 1;
  }
  return slice_default(idx + 1, Infinity, xs);
});

// node_modules/ramda/es/internal/_xtakeWhile.js
var XTakeWhile = function() {
  function XTakeWhile2(f2, xf) {
    this.xf = xf;
    this.f = f2;
  }
  XTakeWhile2.prototype["@@transducer/init"] = xfBase_default.init;
  XTakeWhile2.prototype["@@transducer/result"] = xfBase_default.result;
  XTakeWhile2.prototype["@@transducer/step"] = function(result, input) {
    return this.f(input) ? this.xf["@@transducer/step"](result, input) : _reduced(result);
  };
  return XTakeWhile2;
}();
function _xtakeWhile(f2) {
  return function(xf) {
    return new XTakeWhile(f2, xf);
  };
}

// node_modules/ramda/es/takeWhile.js
var takeWhile = _curry2(_dispatchable(["takeWhile"], _xtakeWhile, function takeWhile2(fn, xs) {
  var idx = 0;
  var len = xs.length;
  while (idx < len && fn(xs[idx])) {
    idx += 1;
  }
  return slice_default(0, idx, xs);
}));

// node_modules/ramda/es/internal/_xtap.js
var XTap = function() {
  function XTap2(f2, xf) {
    this.xf = xf;
    this.f = f2;
  }
  XTap2.prototype["@@transducer/init"] = xfBase_default.init;
  XTap2.prototype["@@transducer/result"] = xfBase_default.result;
  XTap2.prototype["@@transducer/step"] = function(result, input) {
    this.f(input);
    return this.xf["@@transducer/step"](result, input);
  };
  return XTap2;
}();
function _xtap(f2) {
  return function(xf) {
    return new XTap(f2, xf);
  };
}

// node_modules/ramda/es/tap.js
var tap = _curry2(_dispatchable([], _xtap, function tap2(fn, x) {
  fn(x);
  return x;
}));

// node_modules/ramda/es/internal/_isRegExp.js
function _isRegExp(x) {
  return Object.prototype.toString.call(x) === "[object RegExp]";
}

// node_modules/ramda/es/test.js
var test = _curry2(function test2(pattern, str) {
  if (!_isRegExp(pattern)) {
    throw new TypeError("‘test’ requires a value of type RegExp as its first argument; received " + toString_default(pattern));
  }
  return _cloneRegExp(pattern).test(str);
});

// node_modules/ramda/es/andThen.js
var andThen = _curry2(function andThen2(f2, p) {
  _assertPromise("andThen", p);
  return p.then(f2);
});

// node_modules/ramda/es/toLower.js
var toLower = invoker_default(0, "toLowerCase");

// node_modules/ramda/es/toPairs.js
var toPairs = _curry1(function toPairs2(obj) {
  var pairs = [];
  for (var prop3 in obj) {
    if (_has(prop3, obj)) {
      pairs[pairs.length] = [prop3, obj[prop3]];
    }
  }
  return pairs;
});

// node_modules/ramda/es/toPairsIn.js
var toPairsIn = _curry1(function toPairsIn2(obj) {
  var pairs = [];
  for (var prop3 in obj) {
    pairs[pairs.length] = [prop3, obj[prop3]];
  }
  return pairs;
});

// node_modules/ramda/es/toUpper.js
var toUpper = invoker_default(0, "toUpperCase");

// node_modules/ramda/es/transduce.js
var transduce = curryN_default(4, function transduce2(xf, fn, acc, list) {
  return xReduce_default(xf(typeof fn === "function" ? _xwrap(fn) : fn), acc, list);
});

// node_modules/ramda/es/transpose.js
var transpose = _curry1(function transpose2(outerlist) {
  var i = 0;
  var result = [];
  while (i < outerlist.length) {
    var innerlist = outerlist[i];
    var j = 0;
    while (j < innerlist.length) {
      if (typeof result[j] === "undefined") {
        result[j] = [];
      }
      result[j].push(innerlist[j]);
      j += 1;
    }
    i += 1;
  }
  return result;
});

// node_modules/ramda/es/traverse.js
var traverse = _curry3(function traverse2(F, f2, traversable) {
  var of3 = typeof F["fantasy-land/of"] === "function" ? F["fantasy-land/of"] : typeof F.of === "function" ? F.of : F;
  var TypeRep = {
    "fantasy-land/of": of3
  };
  return typeof traversable["fantasy-land/traverse"] === "function" ? traversable["fantasy-land/traverse"](TypeRep, f2) : typeof traversable.traverse === "function" ? traversable.traverse(TypeRep, f2) : sequence_default(TypeRep, map_default(f2, traversable));
});

// node_modules/ramda/es/trim.js
var ws = "	\n\v\f\r                　\u2028\u2029\uFEFF";
var zeroWidth = "​";
var hasProtoTrim = typeof String.prototype.trim === "function";
var trim = !hasProtoTrim || ws.trim() || !zeroWidth.trim() ? _curry1(function trim2(str) {
  var beginRx = new RegExp("^[" + ws + "][" + ws + "]*");
  var endRx = new RegExp("[" + ws + "][" + ws + "]*$");
  return str.replace(beginRx, "").replace(endRx, "");
}) : _curry1(function trim3(str) {
  return str.trim();
});

// node_modules/ramda/es/tryCatch.js
var tryCatch = _curry2(function _tryCatch(tryer, catcher) {
  return _arity(tryer.length, function() {
    try {
      return tryer.apply(this, arguments);
    } catch (e) {
      return catcher.apply(this, _concat([e], arguments));
    }
  });
});

// node_modules/ramda/es/unapply.js
var unapply = _curry1(function unapply2(fn) {
  return function() {
    return fn(Array.prototype.slice.call(arguments, 0));
  };
});

// node_modules/ramda/es/unary.js
var unary = _curry1(function unary2(fn) {
  return nAry_default(1, fn);
});

// node_modules/ramda/es/uncurryN.js
var uncurryN = _curry2(function uncurryN2(depth, fn) {
  return curryN_default(depth, function() {
    var currentDepth = 1;
    var value = fn;
    var idx = 0;
    var endIdx;
    while (currentDepth <= depth && typeof value === "function") {
      endIdx = currentDepth === depth ? arguments.length : idx + value.length;
      value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));
      currentDepth += 1;
      idx = endIdx;
    }
    return value;
  });
});

// node_modules/ramda/es/unfold.js
var unfold = _curry2(function unfold2(fn, seed) {
  var pair3 = fn(seed);
  var result = [];
  while (pair3 && pair3.length) {
    result[result.length] = pair3[0];
    pair3 = fn(pair3[1]);
  }
  return result;
});

// node_modules/ramda/es/union.js
var union = _curry2(compose(uniq_default, _concat));

// node_modules/ramda/es/internal/_xuniqWith.js
var XUniqWith = function() {
  function XUniqWith2(pred, xf) {
    this.xf = xf;
    this.pred = pred;
    this.items = [];
  }
  XUniqWith2.prototype["@@transducer/init"] = xfBase_default.init;
  XUniqWith2.prototype["@@transducer/result"] = xfBase_default.result;
  XUniqWith2.prototype["@@transducer/step"] = function(result, input) {
    if (_includesWith(this.pred, input, this.items)) {
      return result;
    } else {
      this.items.push(input);
      return this.xf["@@transducer/step"](result, input);
    }
  };
  return XUniqWith2;
}();
function _xuniqWith(pred) {
  return function(xf) {
    return new XUniqWith(pred, xf);
  };
}

// node_modules/ramda/es/uniqWith.js
var uniqWith = _curry2(_dispatchable([], _xuniqWith, function(pred, list) {
  var idx = 0;
  var len = list.length;
  var result = [];
  var item;
  while (idx < len) {
    item = list[idx];
    if (!_includesWith(pred, item, result)) {
      result[result.length] = item;
    }
    idx += 1;
  }
  return result;
}));
var uniqWith_default = uniqWith;

// node_modules/ramda/es/unionWith.js
var unionWith = _curry3(function unionWith2(pred, list1, list2) {
  return uniqWith_default(pred, _concat(list1, list2));
});

// node_modules/ramda/es/unless.js
var unless = _curry3(function unless2(pred, whenFalseFn, x) {
  return pred(x) ? x : whenFalseFn(x);
});

// node_modules/ramda/es/unnest.js
var unnest = chain_default(_identity);

// node_modules/ramda/es/until.js
var until = _curry3(function until2(pred, fn, init2) {
  var val = init2;
  while (!pred(val)) {
    val = fn(val);
  }
  return val;
});

// node_modules/ramda/es/unwind.js
var unwind = _curry2(function(key, object) {
  if (!(key in object && isArray_default(object[key]))) {
    return [object];
  }
  return _map(function(item) {
    return _assoc(key, item, object);
  }, object[key]);
});

// node_modules/ramda/es/valuesIn.js
var valuesIn = _curry1(function valuesIn2(obj) {
  var prop3;
  var vs = [];
  for (prop3 in obj) {
    vs[vs.length] = obj[prop3];
  }
  return vs;
});

// node_modules/ramda/es/view.js
var Const = function(x) {
  return {
    value: x,
    "fantasy-land/map": function() {
      return this;
    }
  };
};
var view = _curry2(function view2(lens3, x) {
  return lens3(Const)(x).value;
});

// node_modules/ramda/es/when.js
var when = _curry3(function when2(pred, whenTrueFn, x) {
  return pred(x) ? whenTrueFn(x) : x;
});

// node_modules/ramda/es/where.js
var where = _curry2(function where2(spec, testObj) {
  for (var prop3 in spec) {
    if (_has(prop3, spec) && !spec[prop3](testObj[prop3])) {
      return false;
    }
  }
  return true;
});
var where_default = where;

// node_modules/ramda/es/whereAny.js
var whereAny = _curry2(function whereAny2(spec, testObj) {
  for (var prop3 in spec) {
    if (_has(prop3, spec) && spec[prop3](testObj[prop3])) {
      return true;
    }
  }
  return false;
});

// node_modules/ramda/es/whereEq.js
var whereEq = _curry2(function whereEq2(spec, testObj) {
  return where_default(map_default(equals_default, spec), testObj);
});

// node_modules/ramda/es/without.js
var without = _curry2(function without2(xs, list) {
  var toRemove = new Set_default();
  for (var i = 0; i < xs.length; i += 1) {
    toRemove.add(xs[i]);
  }
  return reject_default(toRemove.has.bind(toRemove), list);
});

// node_modules/ramda/es/xor.js
var xor = _curry2(function xor2(a, b) {
  return Boolean(!a ^ !b);
});

// node_modules/ramda/es/xprod.js
var xprod = _curry2(function xprod2(a, b) {
  var i = 0;
  var ilen = a.length;
  var j;
  var jlen = b.length;
  var result = Array(ilen * jlen);
  while (i < ilen) {
    j = 0;
    while (j < jlen) {
      result[i * jlen + j] = [a[i], b[j]];
      j += 1;
    }
    i += 1;
  }
  return result;
});

// node_modules/ramda/es/zip.js
var zip = _curry2(function zip2(a, b) {
  var len = Math.min(a.length, b.length);
  var rv = Array(len);
  var idx = 0;
  while (idx < len) {
    rv[idx] = [a[idx], b[idx]];
    idx += 1;
  }
  return rv;
});

// node_modules/ramda/es/zipObj.js
var zipObj = _curry2(function zipObj2(keys4, values3) {
  var idx = 0;
  var len = Math.min(keys4.length, values3.length);
  var out = {};
  while (idx < len) {
    out[keys4[idx]] = values3[idx];
    idx += 1;
  }
  return out;
});

// node_modules/ramda/es/zipWith.js
var zipWith = _curry3(function zipWith2(fn, a, b) {
  var len = Math.min(a.length, b.length);
  var rv = Array(len);
  var idx = 0;
  while (idx < len) {
    rv[idx] = fn(a[idx], b[idx]);
    idx += 1;
  }
  return rv;
});

// node_modules/ramda/es/thunkify.js
var thunkify = _curry1(function thunkify2(fn) {
  return curryN_default(fn.length, function createThunk() {
    var fnArgs = arguments;
    return function invokeThunk() {
      return fn.apply(this, fnArgs);
    };
  });
});

// node_modules/graphql-request/build/esm/defaultJsonSerializer.js
var defaultJsonSerializer = JSON;

// node_modules/graphql-request/build/esm/helpers.js
var uppercase = (str) => str.toUpperCase();
var HeadersInstanceToPlainObject = (headers) => {
  const o3 = {};
  headers.forEach((v, k) => {
    o3[k] = v;
  });
  return o3;
};

// node_modules/graphql-request/build/esm/parseArgs.js
var parseRequestArgs = (documentOrOptions, variables, requestHeaders) => {
  return documentOrOptions.document ? documentOrOptions : {
    document: documentOrOptions,
    variables,
    requestHeaders,
    signal: void 0
  };
};
var parseRawRequestArgs = (queryOrOptions, variables, requestHeaders) => {
  return queryOrOptions.query ? queryOrOptions : {
    query: queryOrOptions,
    variables,
    requestHeaders,
    signal: void 0
  };
};
var parseBatchRequestArgs = (documentsOrOptions, requestHeaders) => {
  return documentsOrOptions.documents ? documentsOrOptions : {
    documents: documentsOrOptions,
    requestHeaders,
    signal: void 0
  };
};

// node_modules/graphql/version.mjs
var versionInfo = Object.freeze({
  major: 16,
  minor: 10,
  patch: 0,
  preReleaseTag: null
});

// node_modules/graphql/jsutils/devAssert.mjs
function devAssert(condition, message) {
  const booleanCondition = Boolean(condition);
  if (!booleanCondition) {
    throw new Error(message);
  }
}

// node_modules/graphql/jsutils/isObjectLike.mjs
function isObjectLike(value) {
  return typeof value == "object" && value !== null;
}

// node_modules/graphql/jsutils/invariant.mjs
function invariant(condition, message) {
  const booleanCondition = Boolean(condition);
  if (!booleanCondition) {
    throw new Error(
      message != null ? message : "Unexpected invariant triggered."
    );
  }
}

// node_modules/graphql/language/location.mjs
var LineRegExp = /\r\n|[\n\r]/g;
function getLocation(source, position) {
  let lastLineStart = 0;
  let line = 1;
  for (const match3 of source.body.matchAll(LineRegExp)) {
    typeof match3.index === "number" || invariant(false);
    if (match3.index >= position) {
      break;
    }
    lastLineStart = match3.index + match3[0].length;
    line += 1;
  }
  return {
    line,
    column: position + 1 - lastLineStart
  };
}

// node_modules/graphql/language/printLocation.mjs
function printLocation(location) {
  return printSourceLocation(
    location.source,
    getLocation(location.source, location.start)
  );
}
function printSourceLocation(source, sourceLocation) {
  const firstLineColumnOffset = source.locationOffset.column - 1;
  const body = "".padStart(firstLineColumnOffset) + source.body;
  const lineIndex = sourceLocation.line - 1;
  const lineOffset = source.locationOffset.line - 1;
  const lineNum = sourceLocation.line + lineOffset;
  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
  const columnNum = sourceLocation.column + columnOffset;
  const locationStr = `${source.name}:${lineNum}:${columnNum}
`;
  const lines = body.split(/\r\n|[\n\r]/g);
  const locationLine = lines[lineIndex];
  if (locationLine.length > 120) {
    const subLineIndex = Math.floor(columnNum / 80);
    const subLineColumnNum = columnNum % 80;
    const subLines = [];
    for (let i = 0; i < locationLine.length; i += 80) {
      subLines.push(locationLine.slice(i, i + 80));
    }
    return locationStr + printPrefixedLines([
      [`${lineNum} |`, subLines[0]],
      ...subLines.slice(1, subLineIndex + 1).map((subLine) => ["|", subLine]),
      ["|", "^".padStart(subLineColumnNum)],
      ["|", subLines[subLineIndex + 1]]
    ]);
  }
  return locationStr + printPrefixedLines([
    // Lines specified like this: ["prefix", "string"],
    [`${lineNum - 1} |`, lines[lineIndex - 1]],
    [`${lineNum} |`, locationLine],
    ["|", "^".padStart(columnNum)],
    [`${lineNum + 1} |`, lines[lineIndex + 1]]
  ]);
}
function printPrefixedLines(lines) {
  const existingLines = lines.filter(([_, line]) => line !== void 0);
  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));
  return existingLines.map(([prefix, line]) => prefix.padStart(padLen) + (line ? " " + line : "")).join("\n");
}

// node_modules/graphql/error/GraphQLError.mjs
function toNormalizedOptions(args) {
  const firstArg = args[0];
  if (firstArg == null || "kind" in firstArg || "length" in firstArg) {
    return {
      nodes: firstArg,
      source: args[1],
      positions: args[2],
      path: args[3],
      originalError: args[4],
      extensions: args[5]
    };
  }
  return firstArg;
}
var GraphQLError = class _GraphQLError extends Error {
  /**
   * An array of `{ line, column }` locations within the source GraphQL document
   * which correspond to this error.
   *
   * Errors during validation often contain multiple locations, for example to
   * point out two things with the same name. Errors during execution include a
   * single location, the field which produced the error.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */
  /**
   * An array describing the JSON-path into the execution response which
   * corresponds to this error. Only included for errors during execution.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */
  /**
   * An array of GraphQL AST Nodes corresponding to this error.
   */
  /**
   * The source GraphQL document for the first location of this error.
   *
   * Note that if this Error represents more than one node, the source may not
   * represent nodes after the first node.
   */
  /**
   * An array of character offsets within the source GraphQL document
   * which correspond to this error.
   */
  /**
   * The original error thrown from a field resolver during execution.
   */
  /**
   * Extension fields to add to the formatted error.
   */
  /**
   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.
   */
  constructor(message, ...rawArgs) {
    var _this$nodes, _nodeLocations$, _ref;
    const { nodes, source, positions, path: path2, originalError, extensions } = toNormalizedOptions(rawArgs);
    super(message);
    this.name = "GraphQLError";
    this.path = path2 !== null && path2 !== void 0 ? path2 : void 0;
    this.originalError = originalError !== null && originalError !== void 0 ? originalError : void 0;
    this.nodes = undefinedIfEmpty(
      Array.isArray(nodes) ? nodes : nodes ? [nodes] : void 0
    );
    const nodeLocations = undefinedIfEmpty(
      (_this$nodes = this.nodes) === null || _this$nodes === void 0 ? void 0 : _this$nodes.map((node) => node.loc).filter((loc) => loc != null)
    );
    this.source = source !== null && source !== void 0 ? source : nodeLocations === null || nodeLocations === void 0 ? void 0 : (_nodeLocations$ = nodeLocations[0]) === null || _nodeLocations$ === void 0 ? void 0 : _nodeLocations$.source;
    this.positions = positions !== null && positions !== void 0 ? positions : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map((loc) => loc.start);
    this.locations = positions && source ? positions.map((pos) => getLocation(source, pos)) : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map((loc) => getLocation(loc.source, loc.start));
    const originalExtensions = isObjectLike(
      originalError === null || originalError === void 0 ? void 0 : originalError.extensions
    ) ? originalError === null || originalError === void 0 ? void 0 : originalError.extensions : void 0;
    this.extensions = (_ref = extensions !== null && extensions !== void 0 ? extensions : originalExtensions) !== null && _ref !== void 0 ? _ref : /* @__PURE__ */ Object.create(null);
    Object.defineProperties(this, {
      message: {
        writable: true,
        enumerable: true
      },
      name: {
        enumerable: false
      },
      nodes: {
        enumerable: false
      },
      source: {
        enumerable: false
      },
      positions: {
        enumerable: false
      },
      originalError: {
        enumerable: false
      }
    });
    if (originalError !== null && originalError !== void 0 && originalError.stack) {
      Object.defineProperty(this, "stack", {
        value: originalError.stack,
        writable: true,
        configurable: true
      });
    } else if (Error.captureStackTrace) {
      Error.captureStackTrace(this, _GraphQLError);
    } else {
      Object.defineProperty(this, "stack", {
        value: Error().stack,
        writable: true,
        configurable: true
      });
    }
  }
  get [Symbol.toStringTag]() {
    return "GraphQLError";
  }
  toString() {
    let output = this.message;
    if (this.nodes) {
      for (const node of this.nodes) {
        if (node.loc) {
          output += "\n\n" + printLocation(node.loc);
        }
      }
    } else if (this.source && this.locations) {
      for (const location of this.locations) {
        output += "\n\n" + printSourceLocation(this.source, location);
      }
    }
    return output;
  }
  toJSON() {
    const formattedError = {
      message: this.message
    };
    if (this.locations != null) {
      formattedError.locations = this.locations;
    }
    if (this.path != null) {
      formattedError.path = this.path;
    }
    if (this.extensions != null && Object.keys(this.extensions).length > 0) {
      formattedError.extensions = this.extensions;
    }
    return formattedError;
  }
};
function undefinedIfEmpty(array) {
  return array === void 0 || array.length === 0 ? void 0 : array;
}

// node_modules/graphql/error/syntaxError.mjs
function syntaxError(source, position, description) {
  return new GraphQLError(`Syntax Error: ${description}`, {
    source,
    positions: [position]
  });
}

// node_modules/graphql/language/ast.mjs
var Location = class {
  /**
   * The character offset at which this Node begins.
   */
  /**
   * The character offset at which this Node ends.
   */
  /**
   * The Token at which this Node begins.
   */
  /**
   * The Token at which this Node ends.
   */
  /**
   * The Source document the AST represents.
   */
  constructor(startToken, endToken, source) {
    this.start = startToken.start;
    this.end = endToken.end;
    this.startToken = startToken;
    this.endToken = endToken;
    this.source = source;
  }
  get [Symbol.toStringTag]() {
    return "Location";
  }
  toJSON() {
    return {
      start: this.start,
      end: this.end
    };
  }
};
var Token = class {
  /**
   * The kind of Token.
   */
  /**
   * The character offset at which this Node begins.
   */
  /**
   * The character offset at which this Node ends.
   */
  /**
   * The 1-indexed line number on which this Token appears.
   */
  /**
   * The 1-indexed column number at which this Token begins.
   */
  /**
   * For non-punctuation tokens, represents the interpreted value of the token.
   *
   * Note: is undefined for punctuation tokens, but typed as string for
   * convenience in the parser.
   */
  /**
   * Tokens exist as nodes in a double-linked-list amongst all tokens
   * including ignored tokens. <SOF> is always the first node and <EOF>
   * the last.
   */
  constructor(kind, start, end, line, column, value) {
    this.kind = kind;
    this.start = start;
    this.end = end;
    this.line = line;
    this.column = column;
    this.value = value;
    this.prev = null;
    this.next = null;
  }
  get [Symbol.toStringTag]() {
    return "Token";
  }
  toJSON() {
    return {
      kind: this.kind,
      value: this.value,
      line: this.line,
      column: this.column
    };
  }
};
var QueryDocumentKeys = {
  Name: [],
  Document: ["definitions"],
  OperationDefinition: [
    "name",
    "variableDefinitions",
    "directives",
    "selectionSet"
  ],
  VariableDefinition: ["variable", "type", "defaultValue", "directives"],
  Variable: ["name"],
  SelectionSet: ["selections"],
  Field: ["alias", "name", "arguments", "directives", "selectionSet"],
  Argument: ["name", "value"],
  FragmentSpread: ["name", "directives"],
  InlineFragment: ["typeCondition", "directives", "selectionSet"],
  FragmentDefinition: [
    "name",
    // Note: fragment variable definitions are deprecated and will removed in v17.0.0
    "variableDefinitions",
    "typeCondition",
    "directives",
    "selectionSet"
  ],
  IntValue: [],
  FloatValue: [],
  StringValue: [],
  BooleanValue: [],
  NullValue: [],
  EnumValue: [],
  ListValue: ["values"],
  ObjectValue: ["fields"],
  ObjectField: ["name", "value"],
  Directive: ["name", "arguments"],
  NamedType: ["name"],
  ListType: ["type"],
  NonNullType: ["type"],
  SchemaDefinition: ["description", "directives", "operationTypes"],
  OperationTypeDefinition: ["type"],
  ScalarTypeDefinition: ["description", "name", "directives"],
  ObjectTypeDefinition: [
    "description",
    "name",
    "interfaces",
    "directives",
    "fields"
  ],
  FieldDefinition: ["description", "name", "arguments", "type", "directives"],
  InputValueDefinition: [
    "description",
    "name",
    "type",
    "defaultValue",
    "directives"
  ],
  InterfaceTypeDefinition: [
    "description",
    "name",
    "interfaces",
    "directives",
    "fields"
  ],
  UnionTypeDefinition: ["description", "name", "directives", "types"],
  EnumTypeDefinition: ["description", "name", "directives", "values"],
  EnumValueDefinition: ["description", "name", "directives"],
  InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
  DirectiveDefinition: ["description", "name", "arguments", "locations"],
  SchemaExtension: ["directives", "operationTypes"],
  ScalarTypeExtension: ["name", "directives"],
  ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
  InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
  UnionTypeExtension: ["name", "directives", "types"],
  EnumTypeExtension: ["name", "directives", "values"],
  InputObjectTypeExtension: ["name", "directives", "fields"]
};
var kindValues = new Set(Object.keys(QueryDocumentKeys));
function isNode(maybeNode) {
  const maybeKind = maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;
  return typeof maybeKind === "string" && kindValues.has(maybeKind);
}
var OperationTypeNode;
(function(OperationTypeNode2) {
  OperationTypeNode2["QUERY"] = "query";
  OperationTypeNode2["MUTATION"] = "mutation";
  OperationTypeNode2["SUBSCRIPTION"] = "subscription";
})(OperationTypeNode || (OperationTypeNode = {}));

// node_modules/graphql/language/directiveLocation.mjs
var DirectiveLocation;
(function(DirectiveLocation2) {
  DirectiveLocation2["QUERY"] = "QUERY";
  DirectiveLocation2["MUTATION"] = "MUTATION";
  DirectiveLocation2["SUBSCRIPTION"] = "SUBSCRIPTION";
  DirectiveLocation2["FIELD"] = "FIELD";
  DirectiveLocation2["FRAGMENT_DEFINITION"] = "FRAGMENT_DEFINITION";
  DirectiveLocation2["FRAGMENT_SPREAD"] = "FRAGMENT_SPREAD";
  DirectiveLocation2["INLINE_FRAGMENT"] = "INLINE_FRAGMENT";
  DirectiveLocation2["VARIABLE_DEFINITION"] = "VARIABLE_DEFINITION";
  DirectiveLocation2["SCHEMA"] = "SCHEMA";
  DirectiveLocation2["SCALAR"] = "SCALAR";
  DirectiveLocation2["OBJECT"] = "OBJECT";
  DirectiveLocation2["FIELD_DEFINITION"] = "FIELD_DEFINITION";
  DirectiveLocation2["ARGUMENT_DEFINITION"] = "ARGUMENT_DEFINITION";
  DirectiveLocation2["INTERFACE"] = "INTERFACE";
  DirectiveLocation2["UNION"] = "UNION";
  DirectiveLocation2["ENUM"] = "ENUM";
  DirectiveLocation2["ENUM_VALUE"] = "ENUM_VALUE";
  DirectiveLocation2["INPUT_OBJECT"] = "INPUT_OBJECT";
  DirectiveLocation2["INPUT_FIELD_DEFINITION"] = "INPUT_FIELD_DEFINITION";
})(DirectiveLocation || (DirectiveLocation = {}));

// node_modules/graphql/language/kinds.mjs
var Kind;
(function(Kind2) {
  Kind2["NAME"] = "Name";
  Kind2["DOCUMENT"] = "Document";
  Kind2["OPERATION_DEFINITION"] = "OperationDefinition";
  Kind2["VARIABLE_DEFINITION"] = "VariableDefinition";
  Kind2["SELECTION_SET"] = "SelectionSet";
  Kind2["FIELD"] = "Field";
  Kind2["ARGUMENT"] = "Argument";
  Kind2["FRAGMENT_SPREAD"] = "FragmentSpread";
  Kind2["INLINE_FRAGMENT"] = "InlineFragment";
  Kind2["FRAGMENT_DEFINITION"] = "FragmentDefinition";
  Kind2["VARIABLE"] = "Variable";
  Kind2["INT"] = "IntValue";
  Kind2["FLOAT"] = "FloatValue";
  Kind2["STRING"] = "StringValue";
  Kind2["BOOLEAN"] = "BooleanValue";
  Kind2["NULL"] = "NullValue";
  Kind2["ENUM"] = "EnumValue";
  Kind2["LIST"] = "ListValue";
  Kind2["OBJECT"] = "ObjectValue";
  Kind2["OBJECT_FIELD"] = "ObjectField";
  Kind2["DIRECTIVE"] = "Directive";
  Kind2["NAMED_TYPE"] = "NamedType";
  Kind2["LIST_TYPE"] = "ListType";
  Kind2["NON_NULL_TYPE"] = "NonNullType";
  Kind2["SCHEMA_DEFINITION"] = "SchemaDefinition";
  Kind2["OPERATION_TYPE_DEFINITION"] = "OperationTypeDefinition";
  Kind2["SCALAR_TYPE_DEFINITION"] = "ScalarTypeDefinition";
  Kind2["OBJECT_TYPE_DEFINITION"] = "ObjectTypeDefinition";
  Kind2["FIELD_DEFINITION"] = "FieldDefinition";
  Kind2["INPUT_VALUE_DEFINITION"] = "InputValueDefinition";
  Kind2["INTERFACE_TYPE_DEFINITION"] = "InterfaceTypeDefinition";
  Kind2["UNION_TYPE_DEFINITION"] = "UnionTypeDefinition";
  Kind2["ENUM_TYPE_DEFINITION"] = "EnumTypeDefinition";
  Kind2["ENUM_VALUE_DEFINITION"] = "EnumValueDefinition";
  Kind2["INPUT_OBJECT_TYPE_DEFINITION"] = "InputObjectTypeDefinition";
  Kind2["DIRECTIVE_DEFINITION"] = "DirectiveDefinition";
  Kind2["SCHEMA_EXTENSION"] = "SchemaExtension";
  Kind2["SCALAR_TYPE_EXTENSION"] = "ScalarTypeExtension";
  Kind2["OBJECT_TYPE_EXTENSION"] = "ObjectTypeExtension";
  Kind2["INTERFACE_TYPE_EXTENSION"] = "InterfaceTypeExtension";
  Kind2["UNION_TYPE_EXTENSION"] = "UnionTypeExtension";
  Kind2["ENUM_TYPE_EXTENSION"] = "EnumTypeExtension";
  Kind2["INPUT_OBJECT_TYPE_EXTENSION"] = "InputObjectTypeExtension";
})(Kind || (Kind = {}));

// node_modules/graphql/language/characterClasses.mjs
function isWhiteSpace(code) {
  return code === 9 || code === 32;
}
function isDigit(code) {
  return code >= 48 && code <= 57;
}
function isLetter(code) {
  return code >= 97 && code <= 122 || // A-Z
  code >= 65 && code <= 90;
}
function isNameStart(code) {
  return isLetter(code) || code === 95;
}
function isNameContinue(code) {
  return isLetter(code) || isDigit(code) || code === 95;
}

// node_modules/graphql/language/blockString.mjs
function dedentBlockStringLines(lines) {
  var _firstNonEmptyLine2;
  let commonIndent = Number.MAX_SAFE_INTEGER;
  let firstNonEmptyLine = null;
  let lastNonEmptyLine = -1;
  for (let i = 0; i < lines.length; ++i) {
    var _firstNonEmptyLine;
    const line = lines[i];
    const indent2 = leadingWhitespace(line);
    if (indent2 === line.length) {
      continue;
    }
    firstNonEmptyLine = (_firstNonEmptyLine = firstNonEmptyLine) !== null && _firstNonEmptyLine !== void 0 ? _firstNonEmptyLine : i;
    lastNonEmptyLine = i;
    if (i !== 0 && indent2 < commonIndent) {
      commonIndent = indent2;
    }
  }
  return lines.map((line, i) => i === 0 ? line : line.slice(commonIndent)).slice(
    (_firstNonEmptyLine2 = firstNonEmptyLine) !== null && _firstNonEmptyLine2 !== void 0 ? _firstNonEmptyLine2 : 0,
    lastNonEmptyLine + 1
  );
}
function leadingWhitespace(str) {
  let i = 0;
  while (i < str.length && isWhiteSpace(str.charCodeAt(i))) {
    ++i;
  }
  return i;
}
function printBlockString(value, options) {
  const escapedValue = value.replace(/"""/g, '\\"""');
  const lines = escapedValue.split(/\r\n|[\n\r]/g);
  const isSingleLine = lines.length === 1;
  const forceLeadingNewLine = lines.length > 1 && lines.slice(1).every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0)));
  const hasTrailingTripleQuotes = escapedValue.endsWith('\\"""');
  const hasTrailingQuote = value.endsWith('"') && !hasTrailingTripleQuotes;
  const hasTrailingSlash = value.endsWith("\\");
  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;
  const printAsMultipleLines = !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability
  (!isSingleLine || value.length > 70 || forceTrailingNewline || forceLeadingNewLine || hasTrailingTripleQuotes);
  let result = "";
  const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));
  if (printAsMultipleLines && !skipLeadingNewLine || forceLeadingNewLine) {
    result += "\n";
  }
  result += escapedValue;
  if (printAsMultipleLines || forceTrailingNewline) {
    result += "\n";
  }
  return '"""' + result + '"""';
}

// node_modules/graphql/language/tokenKind.mjs
var TokenKind;
(function(TokenKind2) {
  TokenKind2["SOF"] = "<SOF>";
  TokenKind2["EOF"] = "<EOF>";
  TokenKind2["BANG"] = "!";
  TokenKind2["DOLLAR"] = "$";
  TokenKind2["AMP"] = "&";
  TokenKind2["PAREN_L"] = "(";
  TokenKind2["PAREN_R"] = ")";
  TokenKind2["SPREAD"] = "...";
  TokenKind2["COLON"] = ":";
  TokenKind2["EQUALS"] = "=";
  TokenKind2["AT"] = "@";
  TokenKind2["BRACKET_L"] = "[";
  TokenKind2["BRACKET_R"] = "]";
  TokenKind2["BRACE_L"] = "{";
  TokenKind2["PIPE"] = "|";
  TokenKind2["BRACE_R"] = "}";
  TokenKind2["NAME"] = "Name";
  TokenKind2["INT"] = "Int";
  TokenKind2["FLOAT"] = "Float";
  TokenKind2["STRING"] = "String";
  TokenKind2["BLOCK_STRING"] = "BlockString";
  TokenKind2["COMMENT"] = "Comment";
})(TokenKind || (TokenKind = {}));

// node_modules/graphql/language/lexer.mjs
var Lexer = class {
  /**
   * The previously focused non-ignored token.
   */
  /**
   * The currently focused non-ignored token.
   */
  /**
   * The (1-indexed) line containing the current token.
   */
  /**
   * The character offset at which the current line begins.
   */
  constructor(source) {
    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);
    this.source = source;
    this.lastToken = startOfFileToken;
    this.token = startOfFileToken;
    this.line = 1;
    this.lineStart = 0;
  }
  get [Symbol.toStringTag]() {
    return "Lexer";
  }
  /**
   * Advances the token stream to the next non-ignored token.
   */
  advance() {
    this.lastToken = this.token;
    const token = this.token = this.lookahead();
    return token;
  }
  /**
   * Looks ahead and returns the next non-ignored token, but does not change
   * the state of Lexer.
   */
  lookahead() {
    let token = this.token;
    if (token.kind !== TokenKind.EOF) {
      do {
        if (token.next) {
          token = token.next;
        } else {
          const nextToken = readNextToken(this, token.end);
          token.next = nextToken;
          nextToken.prev = token;
          token = nextToken;
        }
      } while (token.kind === TokenKind.COMMENT);
    }
    return token;
  }
};
function isPunctuatorTokenKind(kind) {
  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;
}
function isUnicodeScalarValue(code) {
  return code >= 0 && code <= 55295 || code >= 57344 && code <= 1114111;
}
function isSupplementaryCodePoint(body, location) {
  return isLeadingSurrogate(body.charCodeAt(location)) && isTrailingSurrogate(body.charCodeAt(location + 1));
}
function isLeadingSurrogate(code) {
  return code >= 55296 && code <= 56319;
}
function isTrailingSurrogate(code) {
  return code >= 56320 && code <= 57343;
}
function printCodePointAt(lexer, location) {
  const code = lexer.source.body.codePointAt(location);
  if (code === void 0) {
    return TokenKind.EOF;
  } else if (code >= 32 && code <= 126) {
    const char = String.fromCodePoint(code);
    return char === '"' ? `'"'` : `"${char}"`;
  }
  return "U+" + code.toString(16).toUpperCase().padStart(4, "0");
}
function createToken(lexer, kind, start, end, value) {
  const line = lexer.line;
  const col = 1 + start - lexer.lineStart;
  return new Token(kind, start, end, line, col, value);
}
function readNextToken(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start;
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    switch (code) {
      case 65279:
      case 9:
      case 32:
      case 44:
        ++position;
        continue;
      case 10:
        ++position;
        ++lexer.line;
        lexer.lineStart = position;
        continue;
      case 13:
        if (body.charCodeAt(position + 1) === 10) {
          position += 2;
        } else {
          ++position;
        }
        ++lexer.line;
        lexer.lineStart = position;
        continue;
      case 35:
        return readComment(lexer, position);
      case 33:
        return createToken(lexer, TokenKind.BANG, position, position + 1);
      case 36:
        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);
      case 38:
        return createToken(lexer, TokenKind.AMP, position, position + 1);
      case 40:
        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);
      case 41:
        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);
      case 46:
        if (body.charCodeAt(position + 1) === 46 && body.charCodeAt(position + 2) === 46) {
          return createToken(lexer, TokenKind.SPREAD, position, position + 3);
        }
        break;
      case 58:
        return createToken(lexer, TokenKind.COLON, position, position + 1);
      case 61:
        return createToken(lexer, TokenKind.EQUALS, position, position + 1);
      case 64:
        return createToken(lexer, TokenKind.AT, position, position + 1);
      case 91:
        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);
      case 93:
        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);
      case 123:
        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);
      case 124:
        return createToken(lexer, TokenKind.PIPE, position, position + 1);
      case 125:
        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);
      case 34:
        if (body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
          return readBlockString(lexer, position);
        }
        return readString(lexer, position);
    }
    if (isDigit(code) || code === 45) {
      return readNumber(lexer, position, code);
    }
    if (isNameStart(code)) {
      return readName(lexer, position);
    }
    throw syntaxError(
      lexer.source,
      position,
      code === 39 ? `Unexpected single quote character ('), did you mean to use a double quote (")?` : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position) ? `Unexpected character: ${printCodePointAt(lexer, position)}.` : `Invalid character: ${printCodePointAt(lexer, position)}.`
    );
  }
  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);
}
function readComment(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start + 1;
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    if (code === 10 || code === 13) {
      break;
    }
    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      break;
    }
  }
  return createToken(
    lexer,
    TokenKind.COMMENT,
    start,
    position,
    body.slice(start + 1, position)
  );
}
function readNumber(lexer, start, firstCode) {
  const body = lexer.source.body;
  let position = start;
  let code = firstCode;
  let isFloat = false;
  if (code === 45) {
    code = body.charCodeAt(++position);
  }
  if (code === 48) {
    code = body.charCodeAt(++position);
    if (isDigit(code)) {
      throw syntaxError(
        lexer.source,
        position,
        `Invalid number, unexpected digit after 0: ${printCodePointAt(
          lexer,
          position
        )}.`
      );
    }
  } else {
    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 46) {
    isFloat = true;
    code = body.charCodeAt(++position);
    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 69 || code === 101) {
    isFloat = true;
    code = body.charCodeAt(++position);
    if (code === 43 || code === 45) {
      code = body.charCodeAt(++position);
    }
    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 46 || isNameStart(code)) {
    throw syntaxError(
      lexer.source,
      position,
      `Invalid number, expected digit but got: ${printCodePointAt(
        lexer,
        position
      )}.`
    );
  }
  return createToken(
    lexer,
    isFloat ? TokenKind.FLOAT : TokenKind.INT,
    start,
    position,
    body.slice(start, position)
  );
}
function readDigits(lexer, start, firstCode) {
  if (!isDigit(firstCode)) {
    throw syntaxError(
      lexer.source,
      start,
      `Invalid number, expected digit but got: ${printCodePointAt(
        lexer,
        start
      )}.`
    );
  }
  const body = lexer.source.body;
  let position = start + 1;
  while (isDigit(body.charCodeAt(position))) {
    ++position;
  }
  return position;
}
function readString(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start + 1;
  let chunkStart = position;
  let value = "";
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    if (code === 34) {
      value += body.slice(chunkStart, position);
      return createToken(lexer, TokenKind.STRING, start, position + 1, value);
    }
    if (code === 92) {
      value += body.slice(chunkStart, position);
      const escape = body.charCodeAt(position + 1) === 117 ? body.charCodeAt(position + 2) === 123 ? readEscapedUnicodeVariableWidth(lexer, position) : readEscapedUnicodeFixedWidth(lexer, position) : readEscapedCharacter(lexer, position);
      value += escape.value;
      position += escape.size;
      chunkStart = position;
      continue;
    }
    if (code === 10 || code === 13) {
      break;
    }
    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      throw syntaxError(
        lexer.source,
        position,
        `Invalid character within String: ${printCodePointAt(
          lexer,
          position
        )}.`
      );
    }
  }
  throw syntaxError(lexer.source, position, "Unterminated string.");
}
function readEscapedUnicodeVariableWidth(lexer, position) {
  const body = lexer.source.body;
  let point = 0;
  let size = 3;
  while (size < 12) {
    const code = body.charCodeAt(position + size++);
    if (code === 125) {
      if (size < 5 || !isUnicodeScalarValue(point)) {
        break;
      }
      return {
        value: String.fromCodePoint(point),
        size
      };
    }
    point = point << 4 | readHexDigit(code);
    if (point < 0) {
      break;
    }
  }
  throw syntaxError(
    lexer.source,
    position,
    `Invalid Unicode escape sequence: "${body.slice(
      position,
      position + size
    )}".`
  );
}
function readEscapedUnicodeFixedWidth(lexer, position) {
  const body = lexer.source.body;
  const code = read16BitHexCode(body, position + 2);
  if (isUnicodeScalarValue(code)) {
    return {
      value: String.fromCodePoint(code),
      size: 6
    };
  }
  if (isLeadingSurrogate(code)) {
    if (body.charCodeAt(position + 6) === 92 && body.charCodeAt(position + 7) === 117) {
      const trailingCode = read16BitHexCode(body, position + 8);
      if (isTrailingSurrogate(trailingCode)) {
        return {
          value: String.fromCodePoint(code, trailingCode),
          size: 12
        };
      }
    }
  }
  throw syntaxError(
    lexer.source,
    position,
    `Invalid Unicode escape sequence: "${body.slice(position, position + 6)}".`
  );
}
function read16BitHexCode(body, position) {
  return readHexDigit(body.charCodeAt(position)) << 12 | readHexDigit(body.charCodeAt(position + 1)) << 8 | readHexDigit(body.charCodeAt(position + 2)) << 4 | readHexDigit(body.charCodeAt(position + 3));
}
function readHexDigit(code) {
  return code >= 48 && code <= 57 ? code - 48 : code >= 65 && code <= 70 ? code - 55 : code >= 97 && code <= 102 ? code - 87 : -1;
}
function readEscapedCharacter(lexer, position) {
  const body = lexer.source.body;
  const code = body.charCodeAt(position + 1);
  switch (code) {
    case 34:
      return {
        value: '"',
        size: 2
      };
    case 92:
      return {
        value: "\\",
        size: 2
      };
    case 47:
      return {
        value: "/",
        size: 2
      };
    case 98:
      return {
        value: "\b",
        size: 2
      };
    case 102:
      return {
        value: "\f",
        size: 2
      };
    case 110:
      return {
        value: "\n",
        size: 2
      };
    case 114:
      return {
        value: "\r",
        size: 2
      };
    case 116:
      return {
        value: "	",
        size: 2
      };
  }
  throw syntaxError(
    lexer.source,
    position,
    `Invalid character escape sequence: "${body.slice(
      position,
      position + 2
    )}".`
  );
}
function readBlockString(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let lineStart = lexer.lineStart;
  let position = start + 3;
  let chunkStart = position;
  let currentLine = "";
  const blockLines = [];
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
      currentLine += body.slice(chunkStart, position);
      blockLines.push(currentLine);
      const token = createToken(
        lexer,
        TokenKind.BLOCK_STRING,
        start,
        position + 3,
        // Return a string of the lines joined with U+000A.
        dedentBlockStringLines(blockLines).join("\n")
      );
      lexer.line += blockLines.length - 1;
      lexer.lineStart = lineStart;
      return token;
    }
    if (code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {
      currentLine += body.slice(chunkStart, position);
      chunkStart = position + 1;
      position += 4;
      continue;
    }
    if (code === 10 || code === 13) {
      currentLine += body.slice(chunkStart, position);
      blockLines.push(currentLine);
      if (code === 13 && body.charCodeAt(position + 1) === 10) {
        position += 2;
      } else {
        ++position;
      }
      currentLine = "";
      chunkStart = position;
      lineStart = position;
      continue;
    }
    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      throw syntaxError(
        lexer.source,
        position,
        `Invalid character within String: ${printCodePointAt(
          lexer,
          position
        )}.`
      );
    }
  }
  throw syntaxError(lexer.source, position, "Unterminated string.");
}
function readName(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start + 1;
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    if (isNameContinue(code)) {
      ++position;
    } else {
      break;
    }
  }
  return createToken(
    lexer,
    TokenKind.NAME,
    start,
    position,
    body.slice(start, position)
  );
}

// node_modules/graphql/jsutils/inspect.mjs
var MAX_ARRAY_LENGTH = 10;
var MAX_RECURSIVE_DEPTH = 2;
function inspect(value) {
  return formatValue(value, []);
}
function formatValue(value, seenValues) {
  switch (typeof value) {
    case "string":
      return JSON.stringify(value);
    case "function":
      return value.name ? `[function ${value.name}]` : "[function]";
    case "object":
      return formatObjectValue(value, seenValues);
    default:
      return String(value);
  }
}
function formatObjectValue(value, previouslySeenValues) {
  if (value === null) {
    return "null";
  }
  if (previouslySeenValues.includes(value)) {
    return "[Circular]";
  }
  const seenValues = [...previouslySeenValues, value];
  if (isJSONable(value)) {
    const jsonValue = value.toJSON();
    if (jsonValue !== value) {
      return typeof jsonValue === "string" ? jsonValue : formatValue(jsonValue, seenValues);
    }
  } else if (Array.isArray(value)) {
    return formatArray(value, seenValues);
  }
  return formatObject(value, seenValues);
}
function isJSONable(value) {
  return typeof value.toJSON === "function";
}
function formatObject(object, seenValues) {
  const entries = Object.entries(object);
  if (entries.length === 0) {
    return "{}";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return "[" + getObjectTag(object) + "]";
  }
  const properties = entries.map(
    ([key, value]) => key + ": " + formatValue(value, seenValues)
  );
  return "{ " + properties.join(", ") + " }";
}
function formatArray(array, seenValues) {
  if (array.length === 0) {
    return "[]";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return "[Array]";
  }
  const len = Math.min(MAX_ARRAY_LENGTH, array.length);
  const remaining = array.length - len;
  const items = [];
  for (let i = 0; i < len; ++i) {
    items.push(formatValue(array[i], seenValues));
  }
  if (remaining === 1) {
    items.push("... 1 more item");
  } else if (remaining > 1) {
    items.push(`... ${remaining} more items`);
  }
  return "[" + items.join(", ") + "]";
}
function getObjectTag(object) {
  const tag = Object.prototype.toString.call(object).replace(/^\[object /, "").replace(/]$/, "");
  if (tag === "Object" && typeof object.constructor === "function") {
    const name = object.constructor.name;
    if (typeof name === "string" && name !== "") {
      return name;
    }
  }
  return tag;
}

// node_modules/graphql/jsutils/instanceOf.mjs
var isProduction = globalThis.process && // eslint-disable-next-line no-undef
false;
var instanceOf = (
  /* c8 ignore next 6 */
  // FIXME: https://github.com/graphql/graphql-js/issues/2317
  isProduction ? function instanceOf2(value, constructor) {
    return value instanceof constructor;
  } : function instanceOf3(value, constructor) {
    if (value instanceof constructor) {
      return true;
    }
    if (typeof value === "object" && value !== null) {
      var _value$constructor;
      const className = constructor.prototype[Symbol.toStringTag];
      const valueClassName = (
        // We still need to support constructor's name to detect conflicts with older versions of this library.
        Symbol.toStringTag in value ? value[Symbol.toStringTag] : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name
      );
      if (className === valueClassName) {
        const stringifiedValue = inspect(value);
        throw new Error(`Cannot use ${className} "${stringifiedValue}" from another module or realm.

Ensure that there is only one instance of "graphql" in the node_modules
directory. If different versions of "graphql" are the dependencies of other
relied on modules, use "resolutions" to ensure only one version is installed.

https://yarnpkg.com/en/docs/selective-version-resolutions

Duplicate "graphql" modules cannot be used at the same time since different
versions may have different capabilities and behavior. The data from one
version used in the function from another could produce confusing and
spurious results.`);
      }
    }
    return false;
  }
);

// node_modules/graphql/language/source.mjs
var Source = class {
  constructor(body, name = "GraphQL request", locationOffset = {
    line: 1,
    column: 1
  }) {
    typeof body === "string" || devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);
    this.body = body;
    this.name = name;
    this.locationOffset = locationOffset;
    this.locationOffset.line > 0 || devAssert(
      false,
      "line in locationOffset is 1-indexed and must be positive."
    );
    this.locationOffset.column > 0 || devAssert(
      false,
      "column in locationOffset is 1-indexed and must be positive."
    );
  }
  get [Symbol.toStringTag]() {
    return "Source";
  }
};
function isSource(source) {
  return instanceOf(source, Source);
}

// node_modules/graphql/language/parser.mjs
function parse(source, options) {
  const parser = new Parser(source, options);
  const document2 = parser.parseDocument();
  Object.defineProperty(document2, "tokenCount", {
    enumerable: false,
    value: parser.tokenCount
  });
  return document2;
}
var Parser = class {
  constructor(source, options = {}) {
    const sourceObj = isSource(source) ? source : new Source(source);
    this._lexer = new Lexer(sourceObj);
    this._options = options;
    this._tokenCounter = 0;
  }
  get tokenCount() {
    return this._tokenCounter;
  }
  /**
   * Converts a name lex token into a name parse node.
   */
  parseName() {
    const token = this.expectToken(TokenKind.NAME);
    return this.node(token, {
      kind: Kind.NAME,
      value: token.value
    });
  }
  // Implements the parsing rules in the Document section.
  /**
   * Document : Definition+
   */
  parseDocument() {
    return this.node(this._lexer.token, {
      kind: Kind.DOCUMENT,
      definitions: this.many(
        TokenKind.SOF,
        this.parseDefinition,
        TokenKind.EOF
      )
    });
  }
  /**
   * Definition :
   *   - ExecutableDefinition
   *   - TypeSystemDefinition
   *   - TypeSystemExtension
   *
   * ExecutableDefinition :
   *   - OperationDefinition
   *   - FragmentDefinition
   *
   * TypeSystemDefinition :
   *   - SchemaDefinition
   *   - TypeDefinition
   *   - DirectiveDefinition
   *
   * TypeDefinition :
   *   - ScalarTypeDefinition
   *   - ObjectTypeDefinition
   *   - InterfaceTypeDefinition
   *   - UnionTypeDefinition
   *   - EnumTypeDefinition
   *   - InputObjectTypeDefinition
   */
  parseDefinition() {
    if (this.peek(TokenKind.BRACE_L)) {
      return this.parseOperationDefinition();
    }
    const hasDescription = this.peekDescription();
    const keywordToken = hasDescription ? this._lexer.lookahead() : this._lexer.token;
    if (keywordToken.kind === TokenKind.NAME) {
      switch (keywordToken.value) {
        case "schema":
          return this.parseSchemaDefinition();
        case "scalar":
          return this.parseScalarTypeDefinition();
        case "type":
          return this.parseObjectTypeDefinition();
        case "interface":
          return this.parseInterfaceTypeDefinition();
        case "union":
          return this.parseUnionTypeDefinition();
        case "enum":
          return this.parseEnumTypeDefinition();
        case "input":
          return this.parseInputObjectTypeDefinition();
        case "directive":
          return this.parseDirectiveDefinition();
      }
      if (hasDescription) {
        throw syntaxError(
          this._lexer.source,
          this._lexer.token.start,
          "Unexpected description, descriptions are supported only on type definitions."
        );
      }
      switch (keywordToken.value) {
        case "query":
        case "mutation":
        case "subscription":
          return this.parseOperationDefinition();
        case "fragment":
          return this.parseFragmentDefinition();
        case "extend":
          return this.parseTypeSystemExtension();
      }
    }
    throw this.unexpected(keywordToken);
  }
  // Implements the parsing rules in the Operations section.
  /**
   * OperationDefinition :
   *  - SelectionSet
   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
   */
  parseOperationDefinition() {
    const start = this._lexer.token;
    if (this.peek(TokenKind.BRACE_L)) {
      return this.node(start, {
        kind: Kind.OPERATION_DEFINITION,
        operation: OperationTypeNode.QUERY,
        name: void 0,
        variableDefinitions: [],
        directives: [],
        selectionSet: this.parseSelectionSet()
      });
    }
    const operation = this.parseOperationType();
    let name;
    if (this.peek(TokenKind.NAME)) {
      name = this.parseName();
    }
    return this.node(start, {
      kind: Kind.OPERATION_DEFINITION,
      operation,
      name,
      variableDefinitions: this.parseVariableDefinitions(),
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet()
    });
  }
  /**
   * OperationType : one of query mutation subscription
   */
  parseOperationType() {
    const operationToken = this.expectToken(TokenKind.NAME);
    switch (operationToken.value) {
      case "query":
        return OperationTypeNode.QUERY;
      case "mutation":
        return OperationTypeNode.MUTATION;
      case "subscription":
        return OperationTypeNode.SUBSCRIPTION;
    }
    throw this.unexpected(operationToken);
  }
  /**
   * VariableDefinitions : ( VariableDefinition+ )
   */
  parseVariableDefinitions() {
    return this.optionalMany(
      TokenKind.PAREN_L,
      this.parseVariableDefinition,
      TokenKind.PAREN_R
    );
  }
  /**
   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
   */
  parseVariableDefinition() {
    return this.node(this._lexer.token, {
      kind: Kind.VARIABLE_DEFINITION,
      variable: this.parseVariable(),
      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),
      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseConstValueLiteral() : void 0,
      directives: this.parseConstDirectives()
    });
  }
  /**
   * Variable : $ Name
   */
  parseVariable() {
    const start = this._lexer.token;
    this.expectToken(TokenKind.DOLLAR);
    return this.node(start, {
      kind: Kind.VARIABLE,
      name: this.parseName()
    });
  }
  /**
   * ```
   * SelectionSet : { Selection+ }
   * ```
   */
  parseSelectionSet() {
    return this.node(this._lexer.token, {
      kind: Kind.SELECTION_SET,
      selections: this.many(
        TokenKind.BRACE_L,
        this.parseSelection,
        TokenKind.BRACE_R
      )
    });
  }
  /**
   * Selection :
   *   - Field
   *   - FragmentSpread
   *   - InlineFragment
   */
  parseSelection() {
    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
  }
  /**
   * Field : Alias? Name Arguments? Directives? SelectionSet?
   *
   * Alias : Name :
   */
  parseField() {
    const start = this._lexer.token;
    const nameOrAlias = this.parseName();
    let alias;
    let name;
    if (this.expectOptionalToken(TokenKind.COLON)) {
      alias = nameOrAlias;
      name = this.parseName();
    } else {
      name = nameOrAlias;
    }
    return this.node(start, {
      kind: Kind.FIELD,
      alias,
      name,
      arguments: this.parseArguments(false),
      directives: this.parseDirectives(false),
      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : void 0
    });
  }
  /**
   * Arguments[Const] : ( Argument[?Const]+ )
   */
  parseArguments(isConst) {
    const item = isConst ? this.parseConstArgument : this.parseArgument;
    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);
  }
  /**
   * Argument[Const] : Name : Value[?Const]
   */
  parseArgument(isConst = false) {
    const start = this._lexer.token;
    const name = this.parseName();
    this.expectToken(TokenKind.COLON);
    return this.node(start, {
      kind: Kind.ARGUMENT,
      name,
      value: this.parseValueLiteral(isConst)
    });
  }
  parseConstArgument() {
    return this.parseArgument(true);
  }
  // Implements the parsing rules in the Fragments section.
  /**
   * Corresponds to both FragmentSpread and InlineFragment in the spec.
   *
   * FragmentSpread : ... FragmentName Directives?
   *
   * InlineFragment : ... TypeCondition? Directives? SelectionSet
   */
  parseFragment() {
    const start = this._lexer.token;
    this.expectToken(TokenKind.SPREAD);
    const hasTypeCondition = this.expectOptionalKeyword("on");
    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {
      return this.node(start, {
        kind: Kind.FRAGMENT_SPREAD,
        name: this.parseFragmentName(),
        directives: this.parseDirectives(false)
      });
    }
    return this.node(start, {
      kind: Kind.INLINE_FRAGMENT,
      typeCondition: hasTypeCondition ? this.parseNamedType() : void 0,
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet()
    });
  }
  /**
   * FragmentDefinition :
   *   - fragment FragmentName on TypeCondition Directives? SelectionSet
   *
   * TypeCondition : NamedType
   */
  parseFragmentDefinition() {
    const start = this._lexer.token;
    this.expectKeyword("fragment");
    if (this._options.allowLegacyFragmentVariables === true) {
      return this.node(start, {
        kind: Kind.FRAGMENT_DEFINITION,
        name: this.parseFragmentName(),
        variableDefinitions: this.parseVariableDefinitions(),
        typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
        directives: this.parseDirectives(false),
        selectionSet: this.parseSelectionSet()
      });
    }
    return this.node(start, {
      kind: Kind.FRAGMENT_DEFINITION,
      name: this.parseFragmentName(),
      typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet()
    });
  }
  /**
   * FragmentName : Name but not `on`
   */
  parseFragmentName() {
    if (this._lexer.token.value === "on") {
      throw this.unexpected();
    }
    return this.parseName();
  }
  // Implements the parsing rules in the Values section.
  /**
   * Value[Const] :
   *   - [~Const] Variable
   *   - IntValue
   *   - FloatValue
   *   - StringValue
   *   - BooleanValue
   *   - NullValue
   *   - EnumValue
   *   - ListValue[?Const]
   *   - ObjectValue[?Const]
   *
   * BooleanValue : one of `true` `false`
   *
   * NullValue : `null`
   *
   * EnumValue : Name but not `true`, `false` or `null`
   */
  parseValueLiteral(isConst) {
    const token = this._lexer.token;
    switch (token.kind) {
      case TokenKind.BRACKET_L:
        return this.parseList(isConst);
      case TokenKind.BRACE_L:
        return this.parseObject(isConst);
      case TokenKind.INT:
        this.advanceLexer();
        return this.node(token, {
          kind: Kind.INT,
          value: token.value
        });
      case TokenKind.FLOAT:
        this.advanceLexer();
        return this.node(token, {
          kind: Kind.FLOAT,
          value: token.value
        });
      case TokenKind.STRING:
      case TokenKind.BLOCK_STRING:
        return this.parseStringLiteral();
      case TokenKind.NAME:
        this.advanceLexer();
        switch (token.value) {
          case "true":
            return this.node(token, {
              kind: Kind.BOOLEAN,
              value: true
            });
          case "false":
            return this.node(token, {
              kind: Kind.BOOLEAN,
              value: false
            });
          case "null":
            return this.node(token, {
              kind: Kind.NULL
            });
          default:
            return this.node(token, {
              kind: Kind.ENUM,
              value: token.value
            });
        }
      case TokenKind.DOLLAR:
        if (isConst) {
          this.expectToken(TokenKind.DOLLAR);
          if (this._lexer.token.kind === TokenKind.NAME) {
            const varName = this._lexer.token.value;
            throw syntaxError(
              this._lexer.source,
              token.start,
              `Unexpected variable "$${varName}" in constant value.`
            );
          } else {
            throw this.unexpected(token);
          }
        }
        return this.parseVariable();
      default:
        throw this.unexpected();
    }
  }
  parseConstValueLiteral() {
    return this.parseValueLiteral(true);
  }
  parseStringLiteral() {
    const token = this._lexer.token;
    this.advanceLexer();
    return this.node(token, {
      kind: Kind.STRING,
      value: token.value,
      block: token.kind === TokenKind.BLOCK_STRING
    });
  }
  /**
   * ListValue[Const] :
   *   - [ ]
   *   - [ Value[?Const]+ ]
   */
  parseList(isConst) {
    const item = () => this.parseValueLiteral(isConst);
    return this.node(this._lexer.token, {
      kind: Kind.LIST,
      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R)
    });
  }
  /**
   * ```
   * ObjectValue[Const] :
   *   - { }
   *   - { ObjectField[?Const]+ }
   * ```
   */
  parseObject(isConst) {
    const item = () => this.parseObjectField(isConst);
    return this.node(this._lexer.token, {
      kind: Kind.OBJECT,
      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R)
    });
  }
  /**
   * ObjectField[Const] : Name : Value[?Const]
   */
  parseObjectField(isConst) {
    const start = this._lexer.token;
    const name = this.parseName();
    this.expectToken(TokenKind.COLON);
    return this.node(start, {
      kind: Kind.OBJECT_FIELD,
      name,
      value: this.parseValueLiteral(isConst)
    });
  }
  // Implements the parsing rules in the Directives section.
  /**
   * Directives[Const] : Directive[?Const]+
   */
  parseDirectives(isConst) {
    const directives = [];
    while (this.peek(TokenKind.AT)) {
      directives.push(this.parseDirective(isConst));
    }
    return directives;
  }
  parseConstDirectives() {
    return this.parseDirectives(true);
  }
  /**
   * ```
   * Directive[Const] : @ Name Arguments[?Const]?
   * ```
   */
  parseDirective(isConst) {
    const start = this._lexer.token;
    this.expectToken(TokenKind.AT);
    return this.node(start, {
      kind: Kind.DIRECTIVE,
      name: this.parseName(),
      arguments: this.parseArguments(isConst)
    });
  }
  // Implements the parsing rules in the Types section.
  /**
   * Type :
   *   - NamedType
   *   - ListType
   *   - NonNullType
   */
  parseTypeReference() {
    const start = this._lexer.token;
    let type3;
    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {
      const innerType = this.parseTypeReference();
      this.expectToken(TokenKind.BRACKET_R);
      type3 = this.node(start, {
        kind: Kind.LIST_TYPE,
        type: innerType
      });
    } else {
      type3 = this.parseNamedType();
    }
    if (this.expectOptionalToken(TokenKind.BANG)) {
      return this.node(start, {
        kind: Kind.NON_NULL_TYPE,
        type: type3
      });
    }
    return type3;
  }
  /**
   * NamedType : Name
   */
  parseNamedType() {
    return this.node(this._lexer.token, {
      kind: Kind.NAMED_TYPE,
      name: this.parseName()
    });
  }
  // Implements the parsing rules in the Type Definition section.
  peekDescription() {
    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);
  }
  /**
   * Description : StringValue
   */
  parseDescription() {
    if (this.peekDescription()) {
      return this.parseStringLiteral();
    }
  }
  /**
   * ```
   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }
   * ```
   */
  parseSchemaDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword("schema");
    const directives = this.parseConstDirectives();
    const operationTypes = this.many(
      TokenKind.BRACE_L,
      this.parseOperationTypeDefinition,
      TokenKind.BRACE_R
    );
    return this.node(start, {
      kind: Kind.SCHEMA_DEFINITION,
      description,
      directives,
      operationTypes
    });
  }
  /**
   * OperationTypeDefinition : OperationType : NamedType
   */
  parseOperationTypeDefinition() {
    const start = this._lexer.token;
    const operation = this.parseOperationType();
    this.expectToken(TokenKind.COLON);
    const type3 = this.parseNamedType();
    return this.node(start, {
      kind: Kind.OPERATION_TYPE_DEFINITION,
      operation,
      type: type3
    });
  }
  /**
   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
   */
  parseScalarTypeDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword("scalar");
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    return this.node(start, {
      kind: Kind.SCALAR_TYPE_DEFINITION,
      description,
      name,
      directives
    });
  }
  /**
   * ObjectTypeDefinition :
   *   Description?
   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
   */
  parseObjectTypeDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword("type");
    const name = this.parseName();
    const interfaces = this.parseImplementsInterfaces();
    const directives = this.parseConstDirectives();
    const fields = this.parseFieldsDefinition();
    return this.node(start, {
      kind: Kind.OBJECT_TYPE_DEFINITION,
      description,
      name,
      interfaces,
      directives,
      fields
    });
  }
  /**
   * ImplementsInterfaces :
   *   - implements `&`? NamedType
   *   - ImplementsInterfaces & NamedType
   */
  parseImplementsInterfaces() {
    return this.expectOptionalKeyword("implements") ? this.delimitedMany(TokenKind.AMP, this.parseNamedType) : [];
  }
  /**
   * ```
   * FieldsDefinition : { FieldDefinition+ }
   * ```
   */
  parseFieldsDefinition() {
    return this.optionalMany(
      TokenKind.BRACE_L,
      this.parseFieldDefinition,
      TokenKind.BRACE_R
    );
  }
  /**
   * FieldDefinition :
   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
   */
  parseFieldDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    const name = this.parseName();
    const args = this.parseArgumentDefs();
    this.expectToken(TokenKind.COLON);
    const type3 = this.parseTypeReference();
    const directives = this.parseConstDirectives();
    return this.node(start, {
      kind: Kind.FIELD_DEFINITION,
      description,
      name,
      arguments: args,
      type: type3,
      directives
    });
  }
  /**
   * ArgumentsDefinition : ( InputValueDefinition+ )
   */
  parseArgumentDefs() {
    return this.optionalMany(
      TokenKind.PAREN_L,
      this.parseInputValueDef,
      TokenKind.PAREN_R
    );
  }
  /**
   * InputValueDefinition :
   *   - Description? Name : Type DefaultValue? Directives[Const]?
   */
  parseInputValueDef() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    const name = this.parseName();
    this.expectToken(TokenKind.COLON);
    const type3 = this.parseTypeReference();
    let defaultValue;
    if (this.expectOptionalToken(TokenKind.EQUALS)) {
      defaultValue = this.parseConstValueLiteral();
    }
    const directives = this.parseConstDirectives();
    return this.node(start, {
      kind: Kind.INPUT_VALUE_DEFINITION,
      description,
      name,
      type: type3,
      defaultValue,
      directives
    });
  }
  /**
   * InterfaceTypeDefinition :
   *   - Description? interface Name Directives[Const]? FieldsDefinition?
   */
  parseInterfaceTypeDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword("interface");
    const name = this.parseName();
    const interfaces = this.parseImplementsInterfaces();
    const directives = this.parseConstDirectives();
    const fields = this.parseFieldsDefinition();
    return this.node(start, {
      kind: Kind.INTERFACE_TYPE_DEFINITION,
      description,
      name,
      interfaces,
      directives,
      fields
    });
  }
  /**
   * UnionTypeDefinition :
   *   - Description? union Name Directives[Const]? UnionMemberTypes?
   */
  parseUnionTypeDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword("union");
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    const types = this.parseUnionMemberTypes();
    return this.node(start, {
      kind: Kind.UNION_TYPE_DEFINITION,
      description,
      name,
      directives,
      types
    });
  }
  /**
   * UnionMemberTypes :
   *   - = `|`? NamedType
   *   - UnionMemberTypes | NamedType
   */
  parseUnionMemberTypes() {
    return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];
  }
  /**
   * EnumTypeDefinition :
   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
   */
  parseEnumTypeDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword("enum");
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    const values3 = this.parseEnumValuesDefinition();
    return this.node(start, {
      kind: Kind.ENUM_TYPE_DEFINITION,
      description,
      name,
      directives,
      values: values3
    });
  }
  /**
   * ```
   * EnumValuesDefinition : { EnumValueDefinition+ }
   * ```
   */
  parseEnumValuesDefinition() {
    return this.optionalMany(
      TokenKind.BRACE_L,
      this.parseEnumValueDefinition,
      TokenKind.BRACE_R
    );
  }
  /**
   * EnumValueDefinition : Description? EnumValue Directives[Const]?
   */
  parseEnumValueDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    const name = this.parseEnumValueName();
    const directives = this.parseConstDirectives();
    return this.node(start, {
      kind: Kind.ENUM_VALUE_DEFINITION,
      description,
      name,
      directives
    });
  }
  /**
   * EnumValue : Name but not `true`, `false` or `null`
   */
  parseEnumValueName() {
    if (this._lexer.token.value === "true" || this._lexer.token.value === "false" || this._lexer.token.value === "null") {
      throw syntaxError(
        this._lexer.source,
        this._lexer.token.start,
        `${getTokenDesc(
          this._lexer.token
        )} is reserved and cannot be used for an enum value.`
      );
    }
    return this.parseName();
  }
  /**
   * InputObjectTypeDefinition :
   *   - Description? input Name Directives[Const]? InputFieldsDefinition?
   */
  parseInputObjectTypeDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword("input");
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    const fields = this.parseInputFieldsDefinition();
    return this.node(start, {
      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
      description,
      name,
      directives,
      fields
    });
  }
  /**
   * ```
   * InputFieldsDefinition : { InputValueDefinition+ }
   * ```
   */
  parseInputFieldsDefinition() {
    return this.optionalMany(
      TokenKind.BRACE_L,
      this.parseInputValueDef,
      TokenKind.BRACE_R
    );
  }
  /**
   * TypeSystemExtension :
   *   - SchemaExtension
   *   - TypeExtension
   *
   * TypeExtension :
   *   - ScalarTypeExtension
   *   - ObjectTypeExtension
   *   - InterfaceTypeExtension
   *   - UnionTypeExtension
   *   - EnumTypeExtension
   *   - InputObjectTypeDefinition
   */
  parseTypeSystemExtension() {
    const keywordToken = this._lexer.lookahead();
    if (keywordToken.kind === TokenKind.NAME) {
      switch (keywordToken.value) {
        case "schema":
          return this.parseSchemaExtension();
        case "scalar":
          return this.parseScalarTypeExtension();
        case "type":
          return this.parseObjectTypeExtension();
        case "interface":
          return this.parseInterfaceTypeExtension();
        case "union":
          return this.parseUnionTypeExtension();
        case "enum":
          return this.parseEnumTypeExtension();
        case "input":
          return this.parseInputObjectTypeExtension();
      }
    }
    throw this.unexpected(keywordToken);
  }
  /**
   * ```
   * SchemaExtension :
   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
   *  - extend schema Directives[Const]
   * ```
   */
  parseSchemaExtension() {
    const start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("schema");
    const directives = this.parseConstDirectives();
    const operationTypes = this.optionalMany(
      TokenKind.BRACE_L,
      this.parseOperationTypeDefinition,
      TokenKind.BRACE_R
    );
    if (directives.length === 0 && operationTypes.length === 0) {
      throw this.unexpected();
    }
    return this.node(start, {
      kind: Kind.SCHEMA_EXTENSION,
      directives,
      operationTypes
    });
  }
  /**
   * ScalarTypeExtension :
   *   - extend scalar Name Directives[Const]
   */
  parseScalarTypeExtension() {
    const start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("scalar");
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    if (directives.length === 0) {
      throw this.unexpected();
    }
    return this.node(start, {
      kind: Kind.SCALAR_TYPE_EXTENSION,
      name,
      directives
    });
  }
  /**
   * ObjectTypeExtension :
   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
   *  - extend type Name ImplementsInterfaces? Directives[Const]
   *  - extend type Name ImplementsInterfaces
   */
  parseObjectTypeExtension() {
    const start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("type");
    const name = this.parseName();
    const interfaces = this.parseImplementsInterfaces();
    const directives = this.parseConstDirectives();
    const fields = this.parseFieldsDefinition();
    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
      throw this.unexpected();
    }
    return this.node(start, {
      kind: Kind.OBJECT_TYPE_EXTENSION,
      name,
      interfaces,
      directives,
      fields
    });
  }
  /**
   * InterfaceTypeExtension :
   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
   *  - extend interface Name ImplementsInterfaces? Directives[Const]
   *  - extend interface Name ImplementsInterfaces
   */
  parseInterfaceTypeExtension() {
    const start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("interface");
    const name = this.parseName();
    const interfaces = this.parseImplementsInterfaces();
    const directives = this.parseConstDirectives();
    const fields = this.parseFieldsDefinition();
    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
      throw this.unexpected();
    }
    return this.node(start, {
      kind: Kind.INTERFACE_TYPE_EXTENSION,
      name,
      interfaces,
      directives,
      fields
    });
  }
  /**
   * UnionTypeExtension :
   *   - extend union Name Directives[Const]? UnionMemberTypes
   *   - extend union Name Directives[Const]
   */
  parseUnionTypeExtension() {
    const start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("union");
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    const types = this.parseUnionMemberTypes();
    if (directives.length === 0 && types.length === 0) {
      throw this.unexpected();
    }
    return this.node(start, {
      kind: Kind.UNION_TYPE_EXTENSION,
      name,
      directives,
      types
    });
  }
  /**
   * EnumTypeExtension :
   *   - extend enum Name Directives[Const]? EnumValuesDefinition
   *   - extend enum Name Directives[Const]
   */
  parseEnumTypeExtension() {
    const start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("enum");
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    const values3 = this.parseEnumValuesDefinition();
    if (directives.length === 0 && values3.length === 0) {
      throw this.unexpected();
    }
    return this.node(start, {
      kind: Kind.ENUM_TYPE_EXTENSION,
      name,
      directives,
      values: values3
    });
  }
  /**
   * InputObjectTypeExtension :
   *   - extend input Name Directives[Const]? InputFieldsDefinition
   *   - extend input Name Directives[Const]
   */
  parseInputObjectTypeExtension() {
    const start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("input");
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    const fields = this.parseInputFieldsDefinition();
    if (directives.length === 0 && fields.length === 0) {
      throw this.unexpected();
    }
    return this.node(start, {
      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,
      name,
      directives,
      fields
    });
  }
  /**
   * ```
   * DirectiveDefinition :
   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations
   * ```
   */
  parseDirectiveDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword("directive");
    this.expectToken(TokenKind.AT);
    const name = this.parseName();
    const args = this.parseArgumentDefs();
    const repeatable = this.expectOptionalKeyword("repeatable");
    this.expectKeyword("on");
    const locations = this.parseDirectiveLocations();
    return this.node(start, {
      kind: Kind.DIRECTIVE_DEFINITION,
      description,
      name,
      arguments: args,
      repeatable,
      locations
    });
  }
  /**
   * DirectiveLocations :
   *   - `|`? DirectiveLocation
   *   - DirectiveLocations | DirectiveLocation
   */
  parseDirectiveLocations() {
    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);
  }
  /*
   * DirectiveLocation :
   *   - ExecutableDirectiveLocation
   *   - TypeSystemDirectiveLocation
   *
   * ExecutableDirectiveLocation : one of
   *   `QUERY`
   *   `MUTATION`
   *   `SUBSCRIPTION`
   *   `FIELD`
   *   `FRAGMENT_DEFINITION`
   *   `FRAGMENT_SPREAD`
   *   `INLINE_FRAGMENT`
   *
   * TypeSystemDirectiveLocation : one of
   *   `SCHEMA`
   *   `SCALAR`
   *   `OBJECT`
   *   `FIELD_DEFINITION`
   *   `ARGUMENT_DEFINITION`
   *   `INTERFACE`
   *   `UNION`
   *   `ENUM`
   *   `ENUM_VALUE`
   *   `INPUT_OBJECT`
   *   `INPUT_FIELD_DEFINITION`
   */
  parseDirectiveLocation() {
    const start = this._lexer.token;
    const name = this.parseName();
    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {
      return name;
    }
    throw this.unexpected(start);
  }
  // Core parsing utility functions
  /**
   * Returns a node that, if configured to do so, sets a "loc" field as a
   * location object, used to identify the place in the source that created a
   * given parsed object.
   */
  node(startToken, node) {
    if (this._options.noLocation !== true) {
      node.loc = new Location(
        startToken,
        this._lexer.lastToken,
        this._lexer.source
      );
    }
    return node;
  }
  /**
   * Determines if the next token is of a given kind
   */
  peek(kind) {
    return this._lexer.token.kind === kind;
  }
  /**
   * If the next token is of the given kind, return that token after advancing the lexer.
   * Otherwise, do not change the parser state and throw an error.
   */
  expectToken(kind) {
    const token = this._lexer.token;
    if (token.kind === kind) {
      this.advanceLexer();
      return token;
    }
    throw syntaxError(
      this._lexer.source,
      token.start,
      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`
    );
  }
  /**
   * If the next token is of the given kind, return "true" after advancing the lexer.
   * Otherwise, do not change the parser state and return "false".
   */
  expectOptionalToken(kind) {
    const token = this._lexer.token;
    if (token.kind === kind) {
      this.advanceLexer();
      return true;
    }
    return false;
  }
  /**
   * If the next token is a given keyword, advance the lexer.
   * Otherwise, do not change the parser state and throw an error.
   */
  expectKeyword(value) {
    const token = this._lexer.token;
    if (token.kind === TokenKind.NAME && token.value === value) {
      this.advanceLexer();
    } else {
      throw syntaxError(
        this._lexer.source,
        token.start,
        `Expected "${value}", found ${getTokenDesc(token)}.`
      );
    }
  }
  /**
   * If the next token is a given keyword, return "true" after advancing the lexer.
   * Otherwise, do not change the parser state and return "false".
   */
  expectOptionalKeyword(value) {
    const token = this._lexer.token;
    if (token.kind === TokenKind.NAME && token.value === value) {
      this.advanceLexer();
      return true;
    }
    return false;
  }
  /**
   * Helper function for creating an error when an unexpected lexed token is encountered.
   */
  unexpected(atToken) {
    const token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
    return syntaxError(
      this._lexer.source,
      token.start,
      `Unexpected ${getTokenDesc(token)}.`
    );
  }
  /**
   * Returns a possibly empty list of parse nodes, determined by the parseFn.
   * This list begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  any(openKind, parseFn, closeKind) {
    this.expectToken(openKind);
    const nodes = [];
    while (!this.expectOptionalToken(closeKind)) {
      nodes.push(parseFn.call(this));
    }
    return nodes;
  }
  /**
   * Returns a list of parse nodes, determined by the parseFn.
   * It can be empty only if open token is missing otherwise it will always return non-empty list
   * that begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  optionalMany(openKind, parseFn, closeKind) {
    if (this.expectOptionalToken(openKind)) {
      const nodes = [];
      do {
        nodes.push(parseFn.call(this));
      } while (!this.expectOptionalToken(closeKind));
      return nodes;
    }
    return [];
  }
  /**
   * Returns a non-empty list of parse nodes, determined by the parseFn.
   * This list begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  many(openKind, parseFn, closeKind) {
    this.expectToken(openKind);
    const nodes = [];
    do {
      nodes.push(parseFn.call(this));
    } while (!this.expectOptionalToken(closeKind));
    return nodes;
  }
  /**
   * Returns a non-empty list of parse nodes, determined by the parseFn.
   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.
   * Advances the parser to the next lex token after last item in the list.
   */
  delimitedMany(delimiterKind, parseFn) {
    this.expectOptionalToken(delimiterKind);
    const nodes = [];
    do {
      nodes.push(parseFn.call(this));
    } while (this.expectOptionalToken(delimiterKind));
    return nodes;
  }
  advanceLexer() {
    const { maxTokens } = this._options;
    const token = this._lexer.advance();
    if (token.kind !== TokenKind.EOF) {
      ++this._tokenCounter;
      if (maxTokens !== void 0 && this._tokenCounter > maxTokens) {
        throw syntaxError(
          this._lexer.source,
          token.start,
          `Document contains more that ${maxTokens} tokens. Parsing aborted.`
        );
      }
    }
  }
};
function getTokenDesc(token) {
  const value = token.value;
  return getTokenKindDesc(token.kind) + (value != null ? ` "${value}"` : "");
}
function getTokenKindDesc(kind) {
  return isPunctuatorTokenKind(kind) ? `"${kind}"` : kind;
}

// node_modules/graphql/jsutils/didYouMean.mjs
var MAX_SUGGESTIONS = 5;
function didYouMean(firstArg, secondArg) {
  const [subMessage, suggestionsArg] = secondArg ? [firstArg, secondArg] : [void 0, firstArg];
  let message = " Did you mean ";
  if (subMessage) {
    message += subMessage + " ";
  }
  const suggestions = suggestionsArg.map((x) => `"${x}"`);
  switch (suggestions.length) {
    case 0:
      return "";
    case 1:
      return message + suggestions[0] + "?";
    case 2:
      return message + suggestions[0] + " or " + suggestions[1] + "?";
  }
  const selected = suggestions.slice(0, MAX_SUGGESTIONS);
  const lastItem = selected.pop();
  return message + selected.join(", ") + ", or " + lastItem + "?";
}

// node_modules/graphql/jsutils/identityFunc.mjs
function identityFunc(x) {
  return x;
}

// node_modules/graphql/jsutils/keyMap.mjs
function keyMap(list, keyFn) {
  const result = /* @__PURE__ */ Object.create(null);
  for (const item of list) {
    result[keyFn(item)] = item;
  }
  return result;
}

// node_modules/graphql/jsutils/keyValMap.mjs
function keyValMap(list, keyFn, valFn) {
  const result = /* @__PURE__ */ Object.create(null);
  for (const item of list) {
    result[keyFn(item)] = valFn(item);
  }
  return result;
}

// node_modules/graphql/jsutils/mapValue.mjs
function mapValue(map3, fn) {
  const result = /* @__PURE__ */ Object.create(null);
  for (const key of Object.keys(map3)) {
    result[key] = fn(map3[key], key);
  }
  return result;
}

// node_modules/graphql/jsutils/naturalCompare.mjs
function naturalCompare(aStr, bStr) {
  let aIndex = 0;
  let bIndex = 0;
  while (aIndex < aStr.length && bIndex < bStr.length) {
    let aChar = aStr.charCodeAt(aIndex);
    let bChar = bStr.charCodeAt(bIndex);
    if (isDigit2(aChar) && isDigit2(bChar)) {
      let aNum = 0;
      do {
        ++aIndex;
        aNum = aNum * 10 + aChar - DIGIT_0;
        aChar = aStr.charCodeAt(aIndex);
      } while (isDigit2(aChar) && aNum > 0);
      let bNum = 0;
      do {
        ++bIndex;
        bNum = bNum * 10 + bChar - DIGIT_0;
        bChar = bStr.charCodeAt(bIndex);
      } while (isDigit2(bChar) && bNum > 0);
      if (aNum < bNum) {
        return -1;
      }
      if (aNum > bNum) {
        return 1;
      }
    } else {
      if (aChar < bChar) {
        return -1;
      }
      if (aChar > bChar) {
        return 1;
      }
      ++aIndex;
      ++bIndex;
    }
  }
  return aStr.length - bStr.length;
}
var DIGIT_0 = 48;
var DIGIT_9 = 57;
function isDigit2(code) {
  return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;
}

// node_modules/graphql/jsutils/suggestionList.mjs
function suggestionList(input, options) {
  const optionsByDistance = /* @__PURE__ */ Object.create(null);
  const lexicalDistance = new LexicalDistance(input);
  const threshold = Math.floor(input.length * 0.4) + 1;
  for (const option of options) {
    const distance = lexicalDistance.measure(option, threshold);
    if (distance !== void 0) {
      optionsByDistance[option] = distance;
    }
  }
  return Object.keys(optionsByDistance).sort((a, b) => {
    const distanceDiff = optionsByDistance[a] - optionsByDistance[b];
    return distanceDiff !== 0 ? distanceDiff : naturalCompare(a, b);
  });
}
var LexicalDistance = class {
  constructor(input) {
    this._input = input;
    this._inputLowerCase = input.toLowerCase();
    this._inputArray = stringToArray(this._inputLowerCase);
    this._rows = [
      new Array(input.length + 1).fill(0),
      new Array(input.length + 1).fill(0),
      new Array(input.length + 1).fill(0)
    ];
  }
  measure(option, threshold) {
    if (this._input === option) {
      return 0;
    }
    const optionLowerCase = option.toLowerCase();
    if (this._inputLowerCase === optionLowerCase) {
      return 1;
    }
    let a = stringToArray(optionLowerCase);
    let b = this._inputArray;
    if (a.length < b.length) {
      const tmp = a;
      a = b;
      b = tmp;
    }
    const aLength = a.length;
    const bLength = b.length;
    if (aLength - bLength > threshold) {
      return void 0;
    }
    const rows = this._rows;
    for (let j = 0; j <= bLength; j++) {
      rows[0][j] = j;
    }
    for (let i = 1; i <= aLength; i++) {
      const upRow = rows[(i - 1) % 3];
      const currentRow = rows[i % 3];
      let smallestCell = currentRow[0] = i;
      for (let j = 1; j <= bLength; j++) {
        const cost = a[i - 1] === b[j - 1] ? 0 : 1;
        let currentCell = Math.min(
          upRow[j] + 1,
          // delete
          currentRow[j - 1] + 1,
          // insert
          upRow[j - 1] + cost
          // substitute
        );
        if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {
          const doubleDiagonalCell = rows[(i - 2) % 3][j - 2];
          currentCell = Math.min(currentCell, doubleDiagonalCell + 1);
        }
        if (currentCell < smallestCell) {
          smallestCell = currentCell;
        }
        currentRow[j] = currentCell;
      }
      if (smallestCell > threshold) {
        return void 0;
      }
    }
    const distance = rows[aLength % 3][bLength];
    return distance <= threshold ? distance : void 0;
  }
};
function stringToArray(str) {
  const strLength = str.length;
  const array = new Array(strLength);
  for (let i = 0; i < strLength; ++i) {
    array[i] = str.charCodeAt(i);
  }
  return array;
}

// node_modules/graphql/jsutils/toObjMap.mjs
function toObjMap(obj) {
  if (obj == null) {
    return /* @__PURE__ */ Object.create(null);
  }
  if (Object.getPrototypeOf(obj) === null) {
    return obj;
  }
  const map3 = /* @__PURE__ */ Object.create(null);
  for (const [key, value] of Object.entries(obj)) {
    map3[key] = value;
  }
  return map3;
}

// node_modules/graphql/language/printString.mjs
function printString(str) {
  return `"${str.replace(escapedRegExp, escapedReplacer)}"`;
}
var escapedRegExp = /[\x00-\x1f\x22\x5c\x7f-\x9f]/g;
function escapedReplacer(str) {
  return escapeSequences[str.charCodeAt(0)];
}
var escapeSequences = [
  "\\u0000",
  "\\u0001",
  "\\u0002",
  "\\u0003",
  "\\u0004",
  "\\u0005",
  "\\u0006",
  "\\u0007",
  "\\b",
  "\\t",
  "\\n",
  "\\u000B",
  "\\f",
  "\\r",
  "\\u000E",
  "\\u000F",
  "\\u0010",
  "\\u0011",
  "\\u0012",
  "\\u0013",
  "\\u0014",
  "\\u0015",
  "\\u0016",
  "\\u0017",
  "\\u0018",
  "\\u0019",
  "\\u001A",
  "\\u001B",
  "\\u001C",
  "\\u001D",
  "\\u001E",
  "\\u001F",
  "",
  "",
  '\\"',
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  // 2F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  // 3F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  // 4F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "\\\\",
  "",
  "",
  "",
  // 5F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  // 6F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "\\u007F",
  "\\u0080",
  "\\u0081",
  "\\u0082",
  "\\u0083",
  "\\u0084",
  "\\u0085",
  "\\u0086",
  "\\u0087",
  "\\u0088",
  "\\u0089",
  "\\u008A",
  "\\u008B",
  "\\u008C",
  "\\u008D",
  "\\u008E",
  "\\u008F",
  "\\u0090",
  "\\u0091",
  "\\u0092",
  "\\u0093",
  "\\u0094",
  "\\u0095",
  "\\u0096",
  "\\u0097",
  "\\u0098",
  "\\u0099",
  "\\u009A",
  "\\u009B",
  "\\u009C",
  "\\u009D",
  "\\u009E",
  "\\u009F"
];

// node_modules/graphql/language/visitor.mjs
var BREAK = Object.freeze({});
function visit(root, visitor, visitorKeys = QueryDocumentKeys) {
  const enterLeaveMap = /* @__PURE__ */ new Map();
  for (const kind of Object.values(Kind)) {
    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));
  }
  let stack = void 0;
  let inArray = Array.isArray(root);
  let keys4 = [root];
  let index = -1;
  let edits = [];
  let node = root;
  let key = void 0;
  let parent = void 0;
  const path2 = [];
  const ancestors = [];
  do {
    index++;
    const isLeaving = index === keys4.length;
    const isEdited = isLeaving && edits.length !== 0;
    if (isLeaving) {
      key = ancestors.length === 0 ? void 0 : path2[path2.length - 1];
      node = parent;
      parent = ancestors.pop();
      if (isEdited) {
        if (inArray) {
          node = node.slice();
          let editOffset = 0;
          for (const [editKey, editValue] of edits) {
            const arrayKey = editKey - editOffset;
            if (editValue === null) {
              node.splice(arrayKey, 1);
              editOffset++;
            } else {
              node[arrayKey] = editValue;
            }
          }
        } else {
          node = Object.defineProperties(
            {},
            Object.getOwnPropertyDescriptors(node)
          );
          for (const [editKey, editValue] of edits) {
            node[editKey] = editValue;
          }
        }
      }
      index = stack.index;
      keys4 = stack.keys;
      edits = stack.edits;
      inArray = stack.inArray;
      stack = stack.prev;
    } else if (parent) {
      key = inArray ? index : keys4[index];
      node = parent[key];
      if (node === null || node === void 0) {
        continue;
      }
      path2.push(key);
    }
    let result;
    if (!Array.isArray(node)) {
      var _enterLeaveMap$get, _enterLeaveMap$get2;
      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);
      const visitFn = isLeaving ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get === void 0 ? void 0 : _enterLeaveMap$get.leave : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get2 === void 0 ? void 0 : _enterLeaveMap$get2.enter;
      result = visitFn === null || visitFn === void 0 ? void 0 : visitFn.call(visitor, node, key, parent, path2, ancestors);
      if (result === BREAK) {
        break;
      }
      if (result === false) {
        if (!isLeaving) {
          path2.pop();
          continue;
        }
      } else if (result !== void 0) {
        edits.push([key, result]);
        if (!isLeaving) {
          if (isNode(result)) {
            node = result;
          } else {
            path2.pop();
            continue;
          }
        }
      }
    }
    if (result === void 0 && isEdited) {
      edits.push([key, node]);
    }
    if (isLeaving) {
      path2.pop();
    } else {
      var _node$kind;
      stack = {
        inArray,
        index,
        keys: keys4,
        edits,
        prev: stack
      };
      inArray = Array.isArray(node);
      keys4 = inArray ? node : (_node$kind = visitorKeys[node.kind]) !== null && _node$kind !== void 0 ? _node$kind : [];
      index = -1;
      edits = [];
      if (parent) {
        ancestors.push(parent);
      }
      parent = node;
    }
  } while (stack !== void 0);
  if (edits.length !== 0) {
    return edits[edits.length - 1][1];
  }
  return root;
}
function getEnterLeaveForKind(visitor, kind) {
  const kindVisitor = visitor[kind];
  if (typeof kindVisitor === "object") {
    return kindVisitor;
  } else if (typeof kindVisitor === "function") {
    return {
      enter: kindVisitor,
      leave: void 0
    };
  }
  return {
    enter: visitor.enter,
    leave: visitor.leave
  };
}

// node_modules/graphql/language/printer.mjs
function print(ast) {
  return visit(ast, printDocASTReducer);
}
var MAX_LINE_LENGTH = 80;
var printDocASTReducer = {
  Name: {
    leave: (node) => node.value
  },
  Variable: {
    leave: (node) => "$" + node.name
  },
  // Document
  Document: {
    leave: (node) => join2(node.definitions, "\n\n")
  },
  OperationDefinition: {
    leave(node) {
      const varDefs = wrap("(", join2(node.variableDefinitions, ", "), ")");
      const prefix = join2(
        [
          node.operation,
          join2([node.name, varDefs]),
          join2(node.directives, " ")
        ],
        " "
      );
      return (prefix === "query" ? "" : prefix + " ") + node.selectionSet;
    }
  },
  VariableDefinition: {
    leave: ({ variable, type: type3, defaultValue, directives }) => variable + ": " + type3 + wrap(" = ", defaultValue) + wrap(" ", join2(directives, " "))
  },
  SelectionSet: {
    leave: ({ selections }) => block(selections)
  },
  Field: {
    leave({ alias, name, arguments: args, directives, selectionSet }) {
      const prefix = wrap("", alias, ": ") + name;
      let argsLine = prefix + wrap("(", join2(args, ", "), ")");
      if (argsLine.length > MAX_LINE_LENGTH) {
        argsLine = prefix + wrap("(\n", indent(join2(args, "\n")), "\n)");
      }
      return join2([argsLine, join2(directives, " "), selectionSet], " ");
    }
  },
  Argument: {
    leave: ({ name, value }) => name + ": " + value
  },
  // Fragments
  FragmentSpread: {
    leave: ({ name, directives }) => "..." + name + wrap(" ", join2(directives, " "))
  },
  InlineFragment: {
    leave: ({ typeCondition, directives, selectionSet }) => join2(
      [
        "...",
        wrap("on ", typeCondition),
        join2(directives, " "),
        selectionSet
      ],
      " "
    )
  },
  FragmentDefinition: {
    leave: ({ name, typeCondition, variableDefinitions, directives, selectionSet }) => (
      // or removed in the future.
      `fragment ${name}${wrap("(", join2(variableDefinitions, ", "), ")")} on ${typeCondition} ${wrap("", join2(directives, " "), " ")}` + selectionSet
    )
  },
  // Value
  IntValue: {
    leave: ({ value }) => value
  },
  FloatValue: {
    leave: ({ value }) => value
  },
  StringValue: {
    leave: ({ value, block: isBlockString }) => isBlockString ? printBlockString(value) : printString(value)
  },
  BooleanValue: {
    leave: ({ value }) => value ? "true" : "false"
  },
  NullValue: {
    leave: () => "null"
  },
  EnumValue: {
    leave: ({ value }) => value
  },
  ListValue: {
    leave: ({ values: values3 }) => "[" + join2(values3, ", ") + "]"
  },
  ObjectValue: {
    leave: ({ fields }) => "{" + join2(fields, ", ") + "}"
  },
  ObjectField: {
    leave: ({ name, value }) => name + ": " + value
  },
  // Directive
  Directive: {
    leave: ({ name, arguments: args }) => "@" + name + wrap("(", join2(args, ", "), ")")
  },
  // Type
  NamedType: {
    leave: ({ name }) => name
  },
  ListType: {
    leave: ({ type: type3 }) => "[" + type3 + "]"
  },
  NonNullType: {
    leave: ({ type: type3 }) => type3 + "!"
  },
  // Type System Definitions
  SchemaDefinition: {
    leave: ({ description, directives, operationTypes }) => wrap("", description, "\n") + join2(["schema", join2(directives, " "), block(operationTypes)], " ")
  },
  OperationTypeDefinition: {
    leave: ({ operation, type: type3 }) => operation + ": " + type3
  },
  ScalarTypeDefinition: {
    leave: ({ description, name, directives }) => wrap("", description, "\n") + join2(["scalar", name, join2(directives, " ")], " ")
  },
  ObjectTypeDefinition: {
    leave: ({ description, name, interfaces, directives, fields }) => wrap("", description, "\n") + join2(
      [
        "type",
        name,
        wrap("implements ", join2(interfaces, " & ")),
        join2(directives, " "),
        block(fields)
      ],
      " "
    )
  },
  FieldDefinition: {
    leave: ({ description, name, arguments: args, type: type3, directives }) => wrap("", description, "\n") + name + (hasMultilineItems(args) ? wrap("(\n", indent(join2(args, "\n")), "\n)") : wrap("(", join2(args, ", "), ")")) + ": " + type3 + wrap(" ", join2(directives, " "))
  },
  InputValueDefinition: {
    leave: ({ description, name, type: type3, defaultValue, directives }) => wrap("", description, "\n") + join2(
      [name + ": " + type3, wrap("= ", defaultValue), join2(directives, " ")],
      " "
    )
  },
  InterfaceTypeDefinition: {
    leave: ({ description, name, interfaces, directives, fields }) => wrap("", description, "\n") + join2(
      [
        "interface",
        name,
        wrap("implements ", join2(interfaces, " & ")),
        join2(directives, " "),
        block(fields)
      ],
      " "
    )
  },
  UnionTypeDefinition: {
    leave: ({ description, name, directives, types }) => wrap("", description, "\n") + join2(
      ["union", name, join2(directives, " "), wrap("= ", join2(types, " | "))],
      " "
    )
  },
  EnumTypeDefinition: {
    leave: ({ description, name, directives, values: values3 }) => wrap("", description, "\n") + join2(["enum", name, join2(directives, " "), block(values3)], " ")
  },
  EnumValueDefinition: {
    leave: ({ description, name, directives }) => wrap("", description, "\n") + join2([name, join2(directives, " ")], " ")
  },
  InputObjectTypeDefinition: {
    leave: ({ description, name, directives, fields }) => wrap("", description, "\n") + join2(["input", name, join2(directives, " "), block(fields)], " ")
  },
  DirectiveDefinition: {
    leave: ({ description, name, arguments: args, repeatable, locations }) => wrap("", description, "\n") + "directive @" + name + (hasMultilineItems(args) ? wrap("(\n", indent(join2(args, "\n")), "\n)") : wrap("(", join2(args, ", "), ")")) + (repeatable ? " repeatable" : "") + " on " + join2(locations, " | ")
  },
  SchemaExtension: {
    leave: ({ directives, operationTypes }) => join2(
      ["extend schema", join2(directives, " "), block(operationTypes)],
      " "
    )
  },
  ScalarTypeExtension: {
    leave: ({ name, directives }) => join2(["extend scalar", name, join2(directives, " ")], " ")
  },
  ObjectTypeExtension: {
    leave: ({ name, interfaces, directives, fields }) => join2(
      [
        "extend type",
        name,
        wrap("implements ", join2(interfaces, " & ")),
        join2(directives, " "),
        block(fields)
      ],
      " "
    )
  },
  InterfaceTypeExtension: {
    leave: ({ name, interfaces, directives, fields }) => join2(
      [
        "extend interface",
        name,
        wrap("implements ", join2(interfaces, " & ")),
        join2(directives, " "),
        block(fields)
      ],
      " "
    )
  },
  UnionTypeExtension: {
    leave: ({ name, directives, types }) => join2(
      [
        "extend union",
        name,
        join2(directives, " "),
        wrap("= ", join2(types, " | "))
      ],
      " "
    )
  },
  EnumTypeExtension: {
    leave: ({ name, directives, values: values3 }) => join2(["extend enum", name, join2(directives, " "), block(values3)], " ")
  },
  InputObjectTypeExtension: {
    leave: ({ name, directives, fields }) => join2(["extend input", name, join2(directives, " "), block(fields)], " ")
  }
};
function join2(maybeArray, separator = "") {
  var _maybeArray$filter$jo;
  return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter((x) => x).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : "";
}
function block(array) {
  return wrap("{\n", indent(join2(array, "\n")), "\n}");
}
function wrap(start, maybeString, end = "") {
  return maybeString != null && maybeString !== "" ? start + maybeString + end : "";
}
function indent(str) {
  return wrap("  ", str.replace(/\n/g, "\n  "));
}
function hasMultilineItems(maybeArray) {
  var _maybeArray$some;
  return (_maybeArray$some = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.some((str) => str.includes("\n"))) !== null && _maybeArray$some !== void 0 ? _maybeArray$some : false;
}

// node_modules/graphql/utilities/valueFromASTUntyped.mjs
function valueFromASTUntyped(valueNode, variables) {
  switch (valueNode.kind) {
    case Kind.NULL:
      return null;
    case Kind.INT:
      return parseInt(valueNode.value, 10);
    case Kind.FLOAT:
      return parseFloat(valueNode.value);
    case Kind.STRING:
    case Kind.ENUM:
    case Kind.BOOLEAN:
      return valueNode.value;
    case Kind.LIST:
      return valueNode.values.map(
        (node) => valueFromASTUntyped(node, variables)
      );
    case Kind.OBJECT:
      return keyValMap(
        valueNode.fields,
        (field) => field.name.value,
        (field) => valueFromASTUntyped(field.value, variables)
      );
    case Kind.VARIABLE:
      return variables === null || variables === void 0 ? void 0 : variables[valueNode.name.value];
  }
}

// node_modules/graphql/type/assertName.mjs
function assertName(name) {
  name != null || devAssert(false, "Must provide name.");
  typeof name === "string" || devAssert(false, "Expected name to be a string.");
  if (name.length === 0) {
    throw new GraphQLError("Expected name to be a non-empty string.");
  }
  for (let i = 1; i < name.length; ++i) {
    if (!isNameContinue(name.charCodeAt(i))) {
      throw new GraphQLError(
        `Names must only contain [_a-zA-Z0-9] but "${name}" does not.`
      );
    }
  }
  if (!isNameStart(name.charCodeAt(0))) {
    throw new GraphQLError(
      `Names must start with [_a-zA-Z] but "${name}" does not.`
    );
  }
  return name;
}
function assertEnumValueName(name) {
  if (name === "true" || name === "false" || name === "null") {
    throw new GraphQLError(`Enum values cannot be named: ${name}`);
  }
  return assertName(name);
}

// node_modules/graphql/type/definition.mjs
function isType(type3) {
  return isScalarType(type3) || isObjectType(type3) || isInterfaceType(type3) || isUnionType(type3) || isEnumType(type3) || isInputObjectType(type3) || isListType(type3) || isNonNullType(type3);
}
function isScalarType(type3) {
  return instanceOf(type3, GraphQLScalarType);
}
function isObjectType(type3) {
  return instanceOf(type3, GraphQLObjectType);
}
function isInterfaceType(type3) {
  return instanceOf(type3, GraphQLInterfaceType);
}
function isUnionType(type3) {
  return instanceOf(type3, GraphQLUnionType);
}
function isEnumType(type3) {
  return instanceOf(type3, GraphQLEnumType);
}
function isInputObjectType(type3) {
  return instanceOf(type3, GraphQLInputObjectType);
}
function isListType(type3) {
  return instanceOf(type3, GraphQLList);
}
function isNonNullType(type3) {
  return instanceOf(type3, GraphQLNonNull);
}
function isInputType(type3) {
  return isScalarType(type3) || isEnumType(type3) || isInputObjectType(type3) || isWrappingType(type3) && isInputType(type3.ofType);
}
function isLeafType(type3) {
  return isScalarType(type3) || isEnumType(type3);
}
function isCompositeType(type3) {
  return isObjectType(type3) || isInterfaceType(type3) || isUnionType(type3);
}
function isAbstractType(type3) {
  return isInterfaceType(type3) || isUnionType(type3);
}
var GraphQLList = class {
  constructor(ofType) {
    isType(ofType) || devAssert(false, `Expected ${inspect(ofType)} to be a GraphQL type.`);
    this.ofType = ofType;
  }
  get [Symbol.toStringTag]() {
    return "GraphQLList";
  }
  toString() {
    return "[" + String(this.ofType) + "]";
  }
  toJSON() {
    return this.toString();
  }
};
var GraphQLNonNull = class {
  constructor(ofType) {
    isNullableType(ofType) || devAssert(
      false,
      `Expected ${inspect(ofType)} to be a GraphQL nullable type.`
    );
    this.ofType = ofType;
  }
  get [Symbol.toStringTag]() {
    return "GraphQLNonNull";
  }
  toString() {
    return String(this.ofType) + "!";
  }
  toJSON() {
    return this.toString();
  }
};
function isWrappingType(type3) {
  return isListType(type3) || isNonNullType(type3);
}
function isNullableType(type3) {
  return isType(type3) && !isNonNullType(type3);
}
function getNullableType(type3) {
  if (type3) {
    return isNonNullType(type3) ? type3.ofType : type3;
  }
}
function getNamedType(type3) {
  if (type3) {
    let unwrappedType = type3;
    while (isWrappingType(unwrappedType)) {
      unwrappedType = unwrappedType.ofType;
    }
    return unwrappedType;
  }
}
function resolveReadonlyArrayThunk(thunk) {
  return typeof thunk === "function" ? thunk() : thunk;
}
function resolveObjMapThunk(thunk) {
  return typeof thunk === "function" ? thunk() : thunk;
}
var GraphQLScalarType = class {
  constructor(config) {
    var _config$parseValue, _config$serialize, _config$parseLiteral, _config$extensionASTN;
    const parseValue2 = (_config$parseValue = config.parseValue) !== null && _config$parseValue !== void 0 ? _config$parseValue : identityFunc;
    this.name = assertName(config.name);
    this.description = config.description;
    this.specifiedByURL = config.specifiedByURL;
    this.serialize = (_config$serialize = config.serialize) !== null && _config$serialize !== void 0 ? _config$serialize : identityFunc;
    this.parseValue = parseValue2;
    this.parseLiteral = (_config$parseLiteral = config.parseLiteral) !== null && _config$parseLiteral !== void 0 ? _config$parseLiteral : (node, variables) => parseValue2(valueFromASTUntyped(node, variables));
    this.extensions = toObjMap(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = (_config$extensionASTN = config.extensionASTNodes) !== null && _config$extensionASTN !== void 0 ? _config$extensionASTN : [];
    config.specifiedByURL == null || typeof config.specifiedByURL === "string" || devAssert(
      false,
      `${this.name} must provide "specifiedByURL" as a string, but got: ${inspect(config.specifiedByURL)}.`
    );
    config.serialize == null || typeof config.serialize === "function" || devAssert(
      false,
      `${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`
    );
    if (config.parseLiteral) {
      typeof config.parseValue === "function" && typeof config.parseLiteral === "function" || devAssert(
        false,
        `${this.name} must provide both "parseValue" and "parseLiteral" functions.`
      );
    }
  }
  get [Symbol.toStringTag]() {
    return "GraphQLScalarType";
  }
  toConfig() {
    return {
      name: this.name,
      description: this.description,
      specifiedByURL: this.specifiedByURL,
      serialize: this.serialize,
      parseValue: this.parseValue,
      parseLiteral: this.parseLiteral,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes
    };
  }
  toString() {
    return this.name;
  }
  toJSON() {
    return this.toString();
  }
};
var GraphQLObjectType = class {
  constructor(config) {
    var _config$extensionASTN2;
    this.name = assertName(config.name);
    this.description = config.description;
    this.isTypeOf = config.isTypeOf;
    this.extensions = toObjMap(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = (_config$extensionASTN2 = config.extensionASTNodes) !== null && _config$extensionASTN2 !== void 0 ? _config$extensionASTN2 : [];
    this._fields = () => defineFieldMap(config);
    this._interfaces = () => defineInterfaces(config);
    config.isTypeOf == null || typeof config.isTypeOf === "function" || devAssert(
      false,
      `${this.name} must provide "isTypeOf" as a function, but got: ${inspect(config.isTypeOf)}.`
    );
  }
  get [Symbol.toStringTag]() {
    return "GraphQLObjectType";
  }
  getFields() {
    if (typeof this._fields === "function") {
      this._fields = this._fields();
    }
    return this._fields;
  }
  getInterfaces() {
    if (typeof this._interfaces === "function") {
      this._interfaces = this._interfaces();
    }
    return this._interfaces;
  }
  toConfig() {
    return {
      name: this.name,
      description: this.description,
      interfaces: this.getInterfaces(),
      fields: fieldsToFieldsConfig(this.getFields()),
      isTypeOf: this.isTypeOf,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes
    };
  }
  toString() {
    return this.name;
  }
  toJSON() {
    return this.toString();
  }
};
function defineInterfaces(config) {
  var _config$interfaces;
  const interfaces = resolveReadonlyArrayThunk(
    (_config$interfaces = config.interfaces) !== null && _config$interfaces !== void 0 ? _config$interfaces : []
  );
  Array.isArray(interfaces) || devAssert(
    false,
    `${config.name} interfaces must be an Array or a function which returns an Array.`
  );
  return interfaces;
}
function defineFieldMap(config) {
  const fieldMap = resolveObjMapThunk(config.fields);
  isPlainObj(fieldMap) || devAssert(
    false,
    `${config.name} fields must be an object with field names as keys or a function which returns such an object.`
  );
  return mapValue(fieldMap, (fieldConfig, fieldName) => {
    var _fieldConfig$args;
    isPlainObj(fieldConfig) || devAssert(
      false,
      `${config.name}.${fieldName} field config must be an object.`
    );
    fieldConfig.resolve == null || typeof fieldConfig.resolve === "function" || devAssert(
      false,
      `${config.name}.${fieldName} field resolver must be a function if provided, but got: ${inspect(fieldConfig.resolve)}.`
    );
    const argsConfig = (_fieldConfig$args = fieldConfig.args) !== null && _fieldConfig$args !== void 0 ? _fieldConfig$args : {};
    isPlainObj(argsConfig) || devAssert(
      false,
      `${config.name}.${fieldName} args must be an object with argument names as keys.`
    );
    return {
      name: assertName(fieldName),
      description: fieldConfig.description,
      type: fieldConfig.type,
      args: defineArguments(argsConfig),
      resolve: fieldConfig.resolve,
      subscribe: fieldConfig.subscribe,
      deprecationReason: fieldConfig.deprecationReason,
      extensions: toObjMap(fieldConfig.extensions),
      astNode: fieldConfig.astNode
    };
  });
}
function defineArguments(config) {
  return Object.entries(config).map(([argName, argConfig]) => ({
    name: assertName(argName),
    description: argConfig.description,
    type: argConfig.type,
    defaultValue: argConfig.defaultValue,
    deprecationReason: argConfig.deprecationReason,
    extensions: toObjMap(argConfig.extensions),
    astNode: argConfig.astNode
  }));
}
function isPlainObj(obj) {
  return isObjectLike(obj) && !Array.isArray(obj);
}
function fieldsToFieldsConfig(fields) {
  return mapValue(fields, (field) => ({
    description: field.description,
    type: field.type,
    args: argsToArgsConfig(field.args),
    resolve: field.resolve,
    subscribe: field.subscribe,
    deprecationReason: field.deprecationReason,
    extensions: field.extensions,
    astNode: field.astNode
  }));
}
function argsToArgsConfig(args) {
  return keyValMap(
    args,
    (arg) => arg.name,
    (arg) => ({
      description: arg.description,
      type: arg.type,
      defaultValue: arg.defaultValue,
      deprecationReason: arg.deprecationReason,
      extensions: arg.extensions,
      astNode: arg.astNode
    })
  );
}
function isRequiredArgument(arg) {
  return isNonNullType(arg.type) && arg.defaultValue === void 0;
}
var GraphQLInterfaceType = class {
  constructor(config) {
    var _config$extensionASTN3;
    this.name = assertName(config.name);
    this.description = config.description;
    this.resolveType = config.resolveType;
    this.extensions = toObjMap(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = (_config$extensionASTN3 = config.extensionASTNodes) !== null && _config$extensionASTN3 !== void 0 ? _config$extensionASTN3 : [];
    this._fields = defineFieldMap.bind(void 0, config);
    this._interfaces = defineInterfaces.bind(void 0, config);
    config.resolveType == null || typeof config.resolveType === "function" || devAssert(
      false,
      `${this.name} must provide "resolveType" as a function, but got: ${inspect(config.resolveType)}.`
    );
  }
  get [Symbol.toStringTag]() {
    return "GraphQLInterfaceType";
  }
  getFields() {
    if (typeof this._fields === "function") {
      this._fields = this._fields();
    }
    return this._fields;
  }
  getInterfaces() {
    if (typeof this._interfaces === "function") {
      this._interfaces = this._interfaces();
    }
    return this._interfaces;
  }
  toConfig() {
    return {
      name: this.name,
      description: this.description,
      interfaces: this.getInterfaces(),
      fields: fieldsToFieldsConfig(this.getFields()),
      resolveType: this.resolveType,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes
    };
  }
  toString() {
    return this.name;
  }
  toJSON() {
    return this.toString();
  }
};
var GraphQLUnionType = class {
  constructor(config) {
    var _config$extensionASTN4;
    this.name = assertName(config.name);
    this.description = config.description;
    this.resolveType = config.resolveType;
    this.extensions = toObjMap(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = (_config$extensionASTN4 = config.extensionASTNodes) !== null && _config$extensionASTN4 !== void 0 ? _config$extensionASTN4 : [];
    this._types = defineTypes.bind(void 0, config);
    config.resolveType == null || typeof config.resolveType === "function" || devAssert(
      false,
      `${this.name} must provide "resolveType" as a function, but got: ${inspect(config.resolveType)}.`
    );
  }
  get [Symbol.toStringTag]() {
    return "GraphQLUnionType";
  }
  getTypes() {
    if (typeof this._types === "function") {
      this._types = this._types();
    }
    return this._types;
  }
  toConfig() {
    return {
      name: this.name,
      description: this.description,
      types: this.getTypes(),
      resolveType: this.resolveType,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes
    };
  }
  toString() {
    return this.name;
  }
  toJSON() {
    return this.toString();
  }
};
function defineTypes(config) {
  const types = resolveReadonlyArrayThunk(config.types);
  Array.isArray(types) || devAssert(
    false,
    `Must provide Array of types or a function which returns such an array for Union ${config.name}.`
  );
  return types;
}
var GraphQLEnumType = class {
  /* <T> */
  constructor(config) {
    var _config$extensionASTN5;
    this.name = assertName(config.name);
    this.description = config.description;
    this.extensions = toObjMap(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = (_config$extensionASTN5 = config.extensionASTNodes) !== null && _config$extensionASTN5 !== void 0 ? _config$extensionASTN5 : [];
    this._values = typeof config.values === "function" ? config.values : defineEnumValues(this.name, config.values);
    this._valueLookup = null;
    this._nameLookup = null;
  }
  get [Symbol.toStringTag]() {
    return "GraphQLEnumType";
  }
  getValues() {
    if (typeof this._values === "function") {
      this._values = defineEnumValues(this.name, this._values());
    }
    return this._values;
  }
  getValue(name) {
    if (this._nameLookup === null) {
      this._nameLookup = keyMap(this.getValues(), (value) => value.name);
    }
    return this._nameLookup[name];
  }
  serialize(outputValue) {
    if (this._valueLookup === null) {
      this._valueLookup = new Map(
        this.getValues().map((enumValue2) => [enumValue2.value, enumValue2])
      );
    }
    const enumValue = this._valueLookup.get(outputValue);
    if (enumValue === void 0) {
      throw new GraphQLError(
        `Enum "${this.name}" cannot represent value: ${inspect(outputValue)}`
      );
    }
    return enumValue.name;
  }
  parseValue(inputValue) {
    if (typeof inputValue !== "string") {
      const valueStr = inspect(inputValue);
      throw new GraphQLError(
        `Enum "${this.name}" cannot represent non-string value: ${valueStr}.` + didYouMeanEnumValue(this, valueStr)
      );
    }
    const enumValue = this.getValue(inputValue);
    if (enumValue == null) {
      throw new GraphQLError(
        `Value "${inputValue}" does not exist in "${this.name}" enum.` + didYouMeanEnumValue(this, inputValue)
      );
    }
    return enumValue.value;
  }
  parseLiteral(valueNode, _variables) {
    if (valueNode.kind !== Kind.ENUM) {
      const valueStr = print(valueNode);
      throw new GraphQLError(
        `Enum "${this.name}" cannot represent non-enum value: ${valueStr}.` + didYouMeanEnumValue(this, valueStr),
        {
          nodes: valueNode
        }
      );
    }
    const enumValue = this.getValue(valueNode.value);
    if (enumValue == null) {
      const valueStr = print(valueNode);
      throw new GraphQLError(
        `Value "${valueStr}" does not exist in "${this.name}" enum.` + didYouMeanEnumValue(this, valueStr),
        {
          nodes: valueNode
        }
      );
    }
    return enumValue.value;
  }
  toConfig() {
    const values3 = keyValMap(
      this.getValues(),
      (value) => value.name,
      (value) => ({
        description: value.description,
        value: value.value,
        deprecationReason: value.deprecationReason,
        extensions: value.extensions,
        astNode: value.astNode
      })
    );
    return {
      name: this.name,
      description: this.description,
      values: values3,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes
    };
  }
  toString() {
    return this.name;
  }
  toJSON() {
    return this.toString();
  }
};
function didYouMeanEnumValue(enumType, unknownValueStr) {
  const allNames = enumType.getValues().map((value) => value.name);
  const suggestedValues = suggestionList(unknownValueStr, allNames);
  return didYouMean("the enum value", suggestedValues);
}
function defineEnumValues(typeName, valueMap) {
  isPlainObj(valueMap) || devAssert(
    false,
    `${typeName} values must be an object with value names as keys.`
  );
  return Object.entries(valueMap).map(([valueName, valueConfig]) => {
    isPlainObj(valueConfig) || devAssert(
      false,
      `${typeName}.${valueName} must refer to an object with a "value" key representing an internal value but got: ${inspect(valueConfig)}.`
    );
    return {
      name: assertEnumValueName(valueName),
      description: valueConfig.description,
      value: valueConfig.value !== void 0 ? valueConfig.value : valueName,
      deprecationReason: valueConfig.deprecationReason,
      extensions: toObjMap(valueConfig.extensions),
      astNode: valueConfig.astNode
    };
  });
}
var GraphQLInputObjectType = class {
  constructor(config) {
    var _config$extensionASTN6, _config$isOneOf;
    this.name = assertName(config.name);
    this.description = config.description;
    this.extensions = toObjMap(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = (_config$extensionASTN6 = config.extensionASTNodes) !== null && _config$extensionASTN6 !== void 0 ? _config$extensionASTN6 : [];
    this.isOneOf = (_config$isOneOf = config.isOneOf) !== null && _config$isOneOf !== void 0 ? _config$isOneOf : false;
    this._fields = defineInputFieldMap.bind(void 0, config);
  }
  get [Symbol.toStringTag]() {
    return "GraphQLInputObjectType";
  }
  getFields() {
    if (typeof this._fields === "function") {
      this._fields = this._fields();
    }
    return this._fields;
  }
  toConfig() {
    const fields = mapValue(this.getFields(), (field) => ({
      description: field.description,
      type: field.type,
      defaultValue: field.defaultValue,
      deprecationReason: field.deprecationReason,
      extensions: field.extensions,
      astNode: field.astNode
    }));
    return {
      name: this.name,
      description: this.description,
      fields,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes,
      isOneOf: this.isOneOf
    };
  }
  toString() {
    return this.name;
  }
  toJSON() {
    return this.toString();
  }
};
function defineInputFieldMap(config) {
  const fieldMap = resolveObjMapThunk(config.fields);
  isPlainObj(fieldMap) || devAssert(
    false,
    `${config.name} fields must be an object with field names as keys or a function which returns such an object.`
  );
  return mapValue(fieldMap, (fieldConfig, fieldName) => {
    !("resolve" in fieldConfig) || devAssert(
      false,
      `${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`
    );
    return {
      name: assertName(fieldName),
      description: fieldConfig.description,
      type: fieldConfig.type,
      defaultValue: fieldConfig.defaultValue,
      deprecationReason: fieldConfig.deprecationReason,
      extensions: toObjMap(fieldConfig.extensions),
      astNode: fieldConfig.astNode
    };
  });
}
function isRequiredInputField(field) {
  return isNonNullType(field.type) && field.defaultValue === void 0;
}

// node_modules/graphql/utilities/typeComparators.mjs
function isTypeSubTypeOf(schema, maybeSubType, superType) {
  if (maybeSubType === superType) {
    return true;
  }
  if (isNonNullType(superType)) {
    if (isNonNullType(maybeSubType)) {
      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
    }
    return false;
  }
  if (isNonNullType(maybeSubType)) {
    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);
  }
  if (isListType(superType)) {
    if (isListType(maybeSubType)) {
      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
    }
    return false;
  }
  if (isListType(maybeSubType)) {
    return false;
  }
  return isAbstractType(superType) && (isInterfaceType(maybeSubType) || isObjectType(maybeSubType)) && schema.isSubType(superType, maybeSubType);
}
function doTypesOverlap(schema, typeA, typeB) {
  if (typeA === typeB) {
    return true;
  }
  if (isAbstractType(typeA)) {
    if (isAbstractType(typeB)) {
      return schema.getPossibleTypes(typeA).some((type3) => schema.isSubType(typeB, type3));
    }
    return schema.isSubType(typeA, typeB);
  }
  if (isAbstractType(typeB)) {
    return schema.isSubType(typeB, typeA);
  }
  return false;
}

// node_modules/graphql/type/scalars.mjs
var GRAPHQL_MAX_INT = 2147483647;
var GRAPHQL_MIN_INT = -2147483648;
var GraphQLInt = new GraphQLScalarType({
  name: "Int",
  description: "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",
  serialize(outputValue) {
    const coercedValue = serializeObject(outputValue);
    if (typeof coercedValue === "boolean") {
      return coercedValue ? 1 : 0;
    }
    let num2 = coercedValue;
    if (typeof coercedValue === "string" && coercedValue !== "") {
      num2 = Number(coercedValue);
    }
    if (typeof num2 !== "number" || !Number.isInteger(num2)) {
      throw new GraphQLError(
        `Int cannot represent non-integer value: ${inspect(coercedValue)}`
      );
    }
    if (num2 > GRAPHQL_MAX_INT || num2 < GRAPHQL_MIN_INT) {
      throw new GraphQLError(
        "Int cannot represent non 32-bit signed integer value: " + inspect(coercedValue)
      );
    }
    return num2;
  },
  parseValue(inputValue) {
    if (typeof inputValue !== "number" || !Number.isInteger(inputValue)) {
      throw new GraphQLError(
        `Int cannot represent non-integer value: ${inspect(inputValue)}`
      );
    }
    if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {
      throw new GraphQLError(
        `Int cannot represent non 32-bit signed integer value: ${inputValue}`
      );
    }
    return inputValue;
  },
  parseLiteral(valueNode) {
    if (valueNode.kind !== Kind.INT) {
      throw new GraphQLError(
        `Int cannot represent non-integer value: ${print(valueNode)}`,
        {
          nodes: valueNode
        }
      );
    }
    const num2 = parseInt(valueNode.value, 10);
    if (num2 > GRAPHQL_MAX_INT || num2 < GRAPHQL_MIN_INT) {
      throw new GraphQLError(
        `Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,
        {
          nodes: valueNode
        }
      );
    }
    return num2;
  }
});
var GraphQLFloat = new GraphQLScalarType({
  name: "Float",
  description: "The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",
  serialize(outputValue) {
    const coercedValue = serializeObject(outputValue);
    if (typeof coercedValue === "boolean") {
      return coercedValue ? 1 : 0;
    }
    let num2 = coercedValue;
    if (typeof coercedValue === "string" && coercedValue !== "") {
      num2 = Number(coercedValue);
    }
    if (typeof num2 !== "number" || !Number.isFinite(num2)) {
      throw new GraphQLError(
        `Float cannot represent non numeric value: ${inspect(coercedValue)}`
      );
    }
    return num2;
  },
  parseValue(inputValue) {
    if (typeof inputValue !== "number" || !Number.isFinite(inputValue)) {
      throw new GraphQLError(
        `Float cannot represent non numeric value: ${inspect(inputValue)}`
      );
    }
    return inputValue;
  },
  parseLiteral(valueNode) {
    if (valueNode.kind !== Kind.FLOAT && valueNode.kind !== Kind.INT) {
      throw new GraphQLError(
        `Float cannot represent non numeric value: ${print(valueNode)}`,
        valueNode
      );
    }
    return parseFloat(valueNode.value);
  }
});
var GraphQLString = new GraphQLScalarType({
  name: "String",
  description: "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
  serialize(outputValue) {
    const coercedValue = serializeObject(outputValue);
    if (typeof coercedValue === "string") {
      return coercedValue;
    }
    if (typeof coercedValue === "boolean") {
      return coercedValue ? "true" : "false";
    }
    if (typeof coercedValue === "number" && Number.isFinite(coercedValue)) {
      return coercedValue.toString();
    }
    throw new GraphQLError(
      `String cannot represent value: ${inspect(outputValue)}`
    );
  },
  parseValue(inputValue) {
    if (typeof inputValue !== "string") {
      throw new GraphQLError(
        `String cannot represent a non string value: ${inspect(inputValue)}`
      );
    }
    return inputValue;
  },
  parseLiteral(valueNode) {
    if (valueNode.kind !== Kind.STRING) {
      throw new GraphQLError(
        `String cannot represent a non string value: ${print(valueNode)}`,
        {
          nodes: valueNode
        }
      );
    }
    return valueNode.value;
  }
});
var GraphQLBoolean = new GraphQLScalarType({
  name: "Boolean",
  description: "The `Boolean` scalar type represents `true` or `false`.",
  serialize(outputValue) {
    const coercedValue = serializeObject(outputValue);
    if (typeof coercedValue === "boolean") {
      return coercedValue;
    }
    if (Number.isFinite(coercedValue)) {
      return coercedValue !== 0;
    }
    throw new GraphQLError(
      `Boolean cannot represent a non boolean value: ${inspect(coercedValue)}`
    );
  },
  parseValue(inputValue) {
    if (typeof inputValue !== "boolean") {
      throw new GraphQLError(
        `Boolean cannot represent a non boolean value: ${inspect(inputValue)}`
      );
    }
    return inputValue;
  },
  parseLiteral(valueNode) {
    if (valueNode.kind !== Kind.BOOLEAN) {
      throw new GraphQLError(
        `Boolean cannot represent a non boolean value: ${print(valueNode)}`,
        {
          nodes: valueNode
        }
      );
    }
    return valueNode.value;
  }
});
var GraphQLID = new GraphQLScalarType({
  name: "ID",
  description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',
  serialize(outputValue) {
    const coercedValue = serializeObject(outputValue);
    if (typeof coercedValue === "string") {
      return coercedValue;
    }
    if (Number.isInteger(coercedValue)) {
      return String(coercedValue);
    }
    throw new GraphQLError(
      `ID cannot represent value: ${inspect(outputValue)}`
    );
  },
  parseValue(inputValue) {
    if (typeof inputValue === "string") {
      return inputValue;
    }
    if (typeof inputValue === "number" && Number.isInteger(inputValue)) {
      return inputValue.toString();
    }
    throw new GraphQLError(`ID cannot represent value: ${inspect(inputValue)}`);
  },
  parseLiteral(valueNode) {
    if (valueNode.kind !== Kind.STRING && valueNode.kind !== Kind.INT) {
      throw new GraphQLError(
        "ID cannot represent a non-string and non-integer value: " + print(valueNode),
        {
          nodes: valueNode
        }
      );
    }
    return valueNode.value;
  }
});
var specifiedScalarTypes = Object.freeze([
  GraphQLString,
  GraphQLInt,
  GraphQLFloat,
  GraphQLBoolean,
  GraphQLID
]);
function serializeObject(outputValue) {
  if (isObjectLike(outputValue)) {
    if (typeof outputValue.valueOf === "function") {
      const valueOfResult = outputValue.valueOf();
      if (!isObjectLike(valueOfResult)) {
        return valueOfResult;
      }
    }
    if (typeof outputValue.toJSON === "function") {
      return outputValue.toJSON();
    }
  }
  return outputValue;
}

// node_modules/graphql/type/directives.mjs
var GraphQLDirective = class {
  constructor(config) {
    var _config$isRepeatable, _config$args;
    this.name = assertName(config.name);
    this.description = config.description;
    this.locations = config.locations;
    this.isRepeatable = (_config$isRepeatable = config.isRepeatable) !== null && _config$isRepeatable !== void 0 ? _config$isRepeatable : false;
    this.extensions = toObjMap(config.extensions);
    this.astNode = config.astNode;
    Array.isArray(config.locations) || devAssert(false, `@${config.name} locations must be an Array.`);
    const args = (_config$args = config.args) !== null && _config$args !== void 0 ? _config$args : {};
    isObjectLike(args) && !Array.isArray(args) || devAssert(
      false,
      `@${config.name} args must be an object with argument names as keys.`
    );
    this.args = defineArguments(args);
  }
  get [Symbol.toStringTag]() {
    return "GraphQLDirective";
  }
  toConfig() {
    return {
      name: this.name,
      description: this.description,
      locations: this.locations,
      args: argsToArgsConfig(this.args),
      isRepeatable: this.isRepeatable,
      extensions: this.extensions,
      astNode: this.astNode
    };
  }
  toString() {
    return "@" + this.name;
  }
  toJSON() {
    return this.toString();
  }
};
var GraphQLIncludeDirective = new GraphQLDirective({
  name: "include",
  description: "Directs the executor to include this field or fragment only when the `if` argument is true.",
  locations: [
    DirectiveLocation.FIELD,
    DirectiveLocation.FRAGMENT_SPREAD,
    DirectiveLocation.INLINE_FRAGMENT
  ],
  args: {
    if: {
      type: new GraphQLNonNull(GraphQLBoolean),
      description: "Included when true."
    }
  }
});
var GraphQLSkipDirective = new GraphQLDirective({
  name: "skip",
  description: "Directs the executor to skip this field or fragment when the `if` argument is true.",
  locations: [
    DirectiveLocation.FIELD,
    DirectiveLocation.FRAGMENT_SPREAD,
    DirectiveLocation.INLINE_FRAGMENT
  ],
  args: {
    if: {
      type: new GraphQLNonNull(GraphQLBoolean),
      description: "Skipped when true."
    }
  }
});
var DEFAULT_DEPRECATION_REASON = "No longer supported";
var GraphQLDeprecatedDirective = new GraphQLDirective({
  name: "deprecated",
  description: "Marks an element of a GraphQL schema as no longer supported.",
  locations: [
    DirectiveLocation.FIELD_DEFINITION,
    DirectiveLocation.ARGUMENT_DEFINITION,
    DirectiveLocation.INPUT_FIELD_DEFINITION,
    DirectiveLocation.ENUM_VALUE
  ],
  args: {
    reason: {
      type: GraphQLString,
      description: "Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",
      defaultValue: DEFAULT_DEPRECATION_REASON
    }
  }
});
var GraphQLSpecifiedByDirective = new GraphQLDirective({
  name: "specifiedBy",
  description: "Exposes a URL that specifies the behavior of this scalar.",
  locations: [DirectiveLocation.SCALAR],
  args: {
    url: {
      type: new GraphQLNonNull(GraphQLString),
      description: "The URL that specifies the behavior of this scalar."
    }
  }
});
var GraphQLOneOfDirective = new GraphQLDirective({
  name: "oneOf",
  description: "Indicates exactly one field must be supplied and this field must not be `null`.",
  locations: [DirectiveLocation.INPUT_OBJECT],
  args: {}
});
var specifiedDirectives = Object.freeze([
  GraphQLIncludeDirective,
  GraphQLSkipDirective,
  GraphQLDeprecatedDirective,
  GraphQLSpecifiedByDirective,
  GraphQLOneOfDirective
]);

// node_modules/graphql/jsutils/isIterableObject.mjs
function isIterableObject(maybeIterable) {
  return typeof maybeIterable === "object" && typeof (maybeIterable === null || maybeIterable === void 0 ? void 0 : maybeIterable[Symbol.iterator]) === "function";
}

// node_modules/graphql/utilities/astFromValue.mjs
function astFromValue(value, type3) {
  if (isNonNullType(type3)) {
    const astValue = astFromValue(value, type3.ofType);
    if ((astValue === null || astValue === void 0 ? void 0 : astValue.kind) === Kind.NULL) {
      return null;
    }
    return astValue;
  }
  if (value === null) {
    return {
      kind: Kind.NULL
    };
  }
  if (value === void 0) {
    return null;
  }
  if (isListType(type3)) {
    const itemType = type3.ofType;
    if (isIterableObject(value)) {
      const valuesNodes = [];
      for (const item of value) {
        const itemNode = astFromValue(item, itemType);
        if (itemNode != null) {
          valuesNodes.push(itemNode);
        }
      }
      return {
        kind: Kind.LIST,
        values: valuesNodes
      };
    }
    return astFromValue(value, itemType);
  }
  if (isInputObjectType(type3)) {
    if (!isObjectLike(value)) {
      return null;
    }
    const fieldNodes = [];
    for (const field of Object.values(type3.getFields())) {
      const fieldValue = astFromValue(value[field.name], field.type);
      if (fieldValue) {
        fieldNodes.push({
          kind: Kind.OBJECT_FIELD,
          name: {
            kind: Kind.NAME,
            value: field.name
          },
          value: fieldValue
        });
      }
    }
    return {
      kind: Kind.OBJECT,
      fields: fieldNodes
    };
  }
  if (isLeafType(type3)) {
    const serialized = type3.serialize(value);
    if (serialized == null) {
      return null;
    }
    if (typeof serialized === "boolean") {
      return {
        kind: Kind.BOOLEAN,
        value: serialized
      };
    }
    if (typeof serialized === "number" && Number.isFinite(serialized)) {
      const stringNum = String(serialized);
      return integerStringRegExp.test(stringNum) ? {
        kind: Kind.INT,
        value: stringNum
      } : {
        kind: Kind.FLOAT,
        value: stringNum
      };
    }
    if (typeof serialized === "string") {
      if (isEnumType(type3)) {
        return {
          kind: Kind.ENUM,
          value: serialized
        };
      }
      if (type3 === GraphQLID && integerStringRegExp.test(serialized)) {
        return {
          kind: Kind.INT,
          value: serialized
        };
      }
      return {
        kind: Kind.STRING,
        value: serialized
      };
    }
    throw new TypeError(`Cannot convert value to AST: ${inspect(serialized)}.`);
  }
  invariant(false, "Unexpected input type: " + inspect(type3));
}
var integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;

// node_modules/graphql/type/introspection.mjs
var __Schema = new GraphQLObjectType({
  name: "__Schema",
  description: "A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",
  fields: () => ({
    description: {
      type: GraphQLString,
      resolve: (schema) => schema.description
    },
    types: {
      description: "A list of all types supported by this server.",
      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Type))),
      resolve(schema) {
        return Object.values(schema.getTypeMap());
      }
    },
    queryType: {
      description: "The type that query operations will be rooted at.",
      type: new GraphQLNonNull(__Type),
      resolve: (schema) => schema.getQueryType()
    },
    mutationType: {
      description: "If this server supports mutation, the type that mutation operations will be rooted at.",
      type: __Type,
      resolve: (schema) => schema.getMutationType()
    },
    subscriptionType: {
      description: "If this server support subscription, the type that subscription operations will be rooted at.",
      type: __Type,
      resolve: (schema) => schema.getSubscriptionType()
    },
    directives: {
      description: "A list of all directives supported by this server.",
      type: new GraphQLNonNull(
        new GraphQLList(new GraphQLNonNull(__Directive))
      ),
      resolve: (schema) => schema.getDirectives()
    }
  })
});
var __Directive = new GraphQLObjectType({
  name: "__Directive",
  description: "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",
  fields: () => ({
    name: {
      type: new GraphQLNonNull(GraphQLString),
      resolve: (directive) => directive.name
    },
    description: {
      type: GraphQLString,
      resolve: (directive) => directive.description
    },
    isRepeatable: {
      type: new GraphQLNonNull(GraphQLBoolean),
      resolve: (directive) => directive.isRepeatable
    },
    locations: {
      type: new GraphQLNonNull(
        new GraphQLList(new GraphQLNonNull(__DirectiveLocation))
      ),
      resolve: (directive) => directive.locations
    },
    args: {
      type: new GraphQLNonNull(
        new GraphQLList(new GraphQLNonNull(__InputValue))
      ),
      args: {
        includeDeprecated: {
          type: GraphQLBoolean,
          defaultValue: false
        }
      },
      resolve(field, { includeDeprecated }) {
        return includeDeprecated ? field.args : field.args.filter((arg) => arg.deprecationReason == null);
      }
    }
  })
});
var __DirectiveLocation = new GraphQLEnumType({
  name: "__DirectiveLocation",
  description: "A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",
  values: {
    QUERY: {
      value: DirectiveLocation.QUERY,
      description: "Location adjacent to a query operation."
    },
    MUTATION: {
      value: DirectiveLocation.MUTATION,
      description: "Location adjacent to a mutation operation."
    },
    SUBSCRIPTION: {
      value: DirectiveLocation.SUBSCRIPTION,
      description: "Location adjacent to a subscription operation."
    },
    FIELD: {
      value: DirectiveLocation.FIELD,
      description: "Location adjacent to a field."
    },
    FRAGMENT_DEFINITION: {
      value: DirectiveLocation.FRAGMENT_DEFINITION,
      description: "Location adjacent to a fragment definition."
    },
    FRAGMENT_SPREAD: {
      value: DirectiveLocation.FRAGMENT_SPREAD,
      description: "Location adjacent to a fragment spread."
    },
    INLINE_FRAGMENT: {
      value: DirectiveLocation.INLINE_FRAGMENT,
      description: "Location adjacent to an inline fragment."
    },
    VARIABLE_DEFINITION: {
      value: DirectiveLocation.VARIABLE_DEFINITION,
      description: "Location adjacent to a variable definition."
    },
    SCHEMA: {
      value: DirectiveLocation.SCHEMA,
      description: "Location adjacent to a schema definition."
    },
    SCALAR: {
      value: DirectiveLocation.SCALAR,
      description: "Location adjacent to a scalar definition."
    },
    OBJECT: {
      value: DirectiveLocation.OBJECT,
      description: "Location adjacent to an object type definition."
    },
    FIELD_DEFINITION: {
      value: DirectiveLocation.FIELD_DEFINITION,
      description: "Location adjacent to a field definition."
    },
    ARGUMENT_DEFINITION: {
      value: DirectiveLocation.ARGUMENT_DEFINITION,
      description: "Location adjacent to an argument definition."
    },
    INTERFACE: {
      value: DirectiveLocation.INTERFACE,
      description: "Location adjacent to an interface definition."
    },
    UNION: {
      value: DirectiveLocation.UNION,
      description: "Location adjacent to a union definition."
    },
    ENUM: {
      value: DirectiveLocation.ENUM,
      description: "Location adjacent to an enum definition."
    },
    ENUM_VALUE: {
      value: DirectiveLocation.ENUM_VALUE,
      description: "Location adjacent to an enum value definition."
    },
    INPUT_OBJECT: {
      value: DirectiveLocation.INPUT_OBJECT,
      description: "Location adjacent to an input object type definition."
    },
    INPUT_FIELD_DEFINITION: {
      value: DirectiveLocation.INPUT_FIELD_DEFINITION,
      description: "Location adjacent to an input object field definition."
    }
  }
});
var __Type = new GraphQLObjectType({
  name: "__Type",
  description: "The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",
  fields: () => ({
    kind: {
      type: new GraphQLNonNull(__TypeKind),
      resolve(type3) {
        if (isScalarType(type3)) {
          return TypeKind.SCALAR;
        }
        if (isObjectType(type3)) {
          return TypeKind.OBJECT;
        }
        if (isInterfaceType(type3)) {
          return TypeKind.INTERFACE;
        }
        if (isUnionType(type3)) {
          return TypeKind.UNION;
        }
        if (isEnumType(type3)) {
          return TypeKind.ENUM;
        }
        if (isInputObjectType(type3)) {
          return TypeKind.INPUT_OBJECT;
        }
        if (isListType(type3)) {
          return TypeKind.LIST;
        }
        if (isNonNullType(type3)) {
          return TypeKind.NON_NULL;
        }
        invariant(false, `Unexpected type: "${inspect(type3)}".`);
      }
    },
    name: {
      type: GraphQLString,
      resolve: (type3) => "name" in type3 ? type3.name : void 0
    },
    description: {
      type: GraphQLString,
      resolve: (type3) => (
        /* c8 ignore next */
        "description" in type3 ? type3.description : void 0
      )
    },
    specifiedByURL: {
      type: GraphQLString,
      resolve: (obj) => "specifiedByURL" in obj ? obj.specifiedByURL : void 0
    },
    fields: {
      type: new GraphQLList(new GraphQLNonNull(__Field)),
      args: {
        includeDeprecated: {
          type: GraphQLBoolean,
          defaultValue: false
        }
      },
      resolve(type3, { includeDeprecated }) {
        if (isObjectType(type3) || isInterfaceType(type3)) {
          const fields = Object.values(type3.getFields());
          return includeDeprecated ? fields : fields.filter((field) => field.deprecationReason == null);
        }
      }
    },
    interfaces: {
      type: new GraphQLList(new GraphQLNonNull(__Type)),
      resolve(type3) {
        if (isObjectType(type3) || isInterfaceType(type3)) {
          return type3.getInterfaces();
        }
      }
    },
    possibleTypes: {
      type: new GraphQLList(new GraphQLNonNull(__Type)),
      resolve(type3, _args, _context, { schema }) {
        if (isAbstractType(type3)) {
          return schema.getPossibleTypes(type3);
        }
      }
    },
    enumValues: {
      type: new GraphQLList(new GraphQLNonNull(__EnumValue)),
      args: {
        includeDeprecated: {
          type: GraphQLBoolean,
          defaultValue: false
        }
      },
      resolve(type3, { includeDeprecated }) {
        if (isEnumType(type3)) {
          const values3 = type3.getValues();
          return includeDeprecated ? values3 : values3.filter((field) => field.deprecationReason == null);
        }
      }
    },
    inputFields: {
      type: new GraphQLList(new GraphQLNonNull(__InputValue)),
      args: {
        includeDeprecated: {
          type: GraphQLBoolean,
          defaultValue: false
        }
      },
      resolve(type3, { includeDeprecated }) {
        if (isInputObjectType(type3)) {
          const values3 = Object.values(type3.getFields());
          return includeDeprecated ? values3 : values3.filter((field) => field.deprecationReason == null);
        }
      }
    },
    ofType: {
      type: __Type,
      resolve: (type3) => "ofType" in type3 ? type3.ofType : void 0
    },
    isOneOf: {
      type: GraphQLBoolean,
      resolve: (type3) => {
        if (isInputObjectType(type3)) {
          return type3.isOneOf;
        }
      }
    }
  })
});
var __Field = new GraphQLObjectType({
  name: "__Field",
  description: "Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",
  fields: () => ({
    name: {
      type: new GraphQLNonNull(GraphQLString),
      resolve: (field) => field.name
    },
    description: {
      type: GraphQLString,
      resolve: (field) => field.description
    },
    args: {
      type: new GraphQLNonNull(
        new GraphQLList(new GraphQLNonNull(__InputValue))
      ),
      args: {
        includeDeprecated: {
          type: GraphQLBoolean,
          defaultValue: false
        }
      },
      resolve(field, { includeDeprecated }) {
        return includeDeprecated ? field.args : field.args.filter((arg) => arg.deprecationReason == null);
      }
    },
    type: {
      type: new GraphQLNonNull(__Type),
      resolve: (field) => field.type
    },
    isDeprecated: {
      type: new GraphQLNonNull(GraphQLBoolean),
      resolve: (field) => field.deprecationReason != null
    },
    deprecationReason: {
      type: GraphQLString,
      resolve: (field) => field.deprecationReason
    }
  })
});
var __InputValue = new GraphQLObjectType({
  name: "__InputValue",
  description: "Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",
  fields: () => ({
    name: {
      type: new GraphQLNonNull(GraphQLString),
      resolve: (inputValue) => inputValue.name
    },
    description: {
      type: GraphQLString,
      resolve: (inputValue) => inputValue.description
    },
    type: {
      type: new GraphQLNonNull(__Type),
      resolve: (inputValue) => inputValue.type
    },
    defaultValue: {
      type: GraphQLString,
      description: "A GraphQL-formatted string representing the default value for this input value.",
      resolve(inputValue) {
        const { type: type3, defaultValue } = inputValue;
        const valueAST = astFromValue(defaultValue, type3);
        return valueAST ? print(valueAST) : null;
      }
    },
    isDeprecated: {
      type: new GraphQLNonNull(GraphQLBoolean),
      resolve: (field) => field.deprecationReason != null
    },
    deprecationReason: {
      type: GraphQLString,
      resolve: (obj) => obj.deprecationReason
    }
  })
});
var __EnumValue = new GraphQLObjectType({
  name: "__EnumValue",
  description: "One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",
  fields: () => ({
    name: {
      type: new GraphQLNonNull(GraphQLString),
      resolve: (enumValue) => enumValue.name
    },
    description: {
      type: GraphQLString,
      resolve: (enumValue) => enumValue.description
    },
    isDeprecated: {
      type: new GraphQLNonNull(GraphQLBoolean),
      resolve: (enumValue) => enumValue.deprecationReason != null
    },
    deprecationReason: {
      type: GraphQLString,
      resolve: (enumValue) => enumValue.deprecationReason
    }
  })
});
var TypeKind;
(function(TypeKind2) {
  TypeKind2["SCALAR"] = "SCALAR";
  TypeKind2["OBJECT"] = "OBJECT";
  TypeKind2["INTERFACE"] = "INTERFACE";
  TypeKind2["UNION"] = "UNION";
  TypeKind2["ENUM"] = "ENUM";
  TypeKind2["INPUT_OBJECT"] = "INPUT_OBJECT";
  TypeKind2["LIST"] = "LIST";
  TypeKind2["NON_NULL"] = "NON_NULL";
})(TypeKind || (TypeKind = {}));
var __TypeKind = new GraphQLEnumType({
  name: "__TypeKind",
  description: "An enum describing what kind of type a given `__Type` is.",
  values: {
    SCALAR: {
      value: TypeKind.SCALAR,
      description: "Indicates this type is a scalar."
    },
    OBJECT: {
      value: TypeKind.OBJECT,
      description: "Indicates this type is an object. `fields` and `interfaces` are valid fields."
    },
    INTERFACE: {
      value: TypeKind.INTERFACE,
      description: "Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."
    },
    UNION: {
      value: TypeKind.UNION,
      description: "Indicates this type is a union. `possibleTypes` is a valid field."
    },
    ENUM: {
      value: TypeKind.ENUM,
      description: "Indicates this type is an enum. `enumValues` is a valid field."
    },
    INPUT_OBJECT: {
      value: TypeKind.INPUT_OBJECT,
      description: "Indicates this type is an input object. `inputFields` is a valid field."
    },
    LIST: {
      value: TypeKind.LIST,
      description: "Indicates this type is a list. `ofType` is a valid field."
    },
    NON_NULL: {
      value: TypeKind.NON_NULL,
      description: "Indicates this type is a non-null. `ofType` is a valid field."
    }
  }
});
var SchemaMetaFieldDef = {
  name: "__schema",
  type: new GraphQLNonNull(__Schema),
  description: "Access the current type schema of this server.",
  args: [],
  resolve: (_source, _args, _context, { schema }) => schema,
  deprecationReason: void 0,
  extensions: /* @__PURE__ */ Object.create(null),
  astNode: void 0
};
var TypeMetaFieldDef = {
  name: "__type",
  type: __Type,
  description: "Request the type information of a single type.",
  args: [
    {
      name: "name",
      description: void 0,
      type: new GraphQLNonNull(GraphQLString),
      defaultValue: void 0,
      deprecationReason: void 0,
      extensions: /* @__PURE__ */ Object.create(null),
      astNode: void 0
    }
  ],
  resolve: (_source, { name }, _context, { schema }) => schema.getType(name),
  deprecationReason: void 0,
  extensions: /* @__PURE__ */ Object.create(null),
  astNode: void 0
};
var TypeNameMetaFieldDef = {
  name: "__typename",
  type: new GraphQLNonNull(GraphQLString),
  description: "The name of the current Object type at runtime.",
  args: [],
  resolve: (_source, _args, _context, { parentType }) => parentType.name,
  deprecationReason: void 0,
  extensions: /* @__PURE__ */ Object.create(null),
  astNode: void 0
};
var introspectionTypes = Object.freeze([
  __Schema,
  __Directive,
  __DirectiveLocation,
  __Type,
  __Field,
  __InputValue,
  __EnumValue,
  __TypeKind
]);

// node_modules/graphql/utilities/typeFromAST.mjs
function typeFromAST(schema, typeNode) {
  switch (typeNode.kind) {
    case Kind.LIST_TYPE: {
      const innerType = typeFromAST(schema, typeNode.type);
      return innerType && new GraphQLList(innerType);
    }
    case Kind.NON_NULL_TYPE: {
      const innerType = typeFromAST(schema, typeNode.type);
      return innerType && new GraphQLNonNull(innerType);
    }
    case Kind.NAMED_TYPE:
      return schema.getType(typeNode.name.value);
  }
}

// node_modules/graphql/language/predicates.mjs
function isExecutableDefinitionNode(node) {
  return node.kind === Kind.OPERATION_DEFINITION || node.kind === Kind.FRAGMENT_DEFINITION;
}
function isTypeSystemDefinitionNode(node) {
  return node.kind === Kind.SCHEMA_DEFINITION || isTypeDefinitionNode(node) || node.kind === Kind.DIRECTIVE_DEFINITION;
}
function isTypeDefinitionNode(node) {
  return node.kind === Kind.SCALAR_TYPE_DEFINITION || node.kind === Kind.OBJECT_TYPE_DEFINITION || node.kind === Kind.INTERFACE_TYPE_DEFINITION || node.kind === Kind.UNION_TYPE_DEFINITION || node.kind === Kind.ENUM_TYPE_DEFINITION || node.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION;
}
function isTypeSystemExtensionNode(node) {
  return node.kind === Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);
}
function isTypeExtensionNode(node) {
  return node.kind === Kind.SCALAR_TYPE_EXTENSION || node.kind === Kind.OBJECT_TYPE_EXTENSION || node.kind === Kind.INTERFACE_TYPE_EXTENSION || node.kind === Kind.UNION_TYPE_EXTENSION || node.kind === Kind.ENUM_TYPE_EXTENSION || node.kind === Kind.INPUT_OBJECT_TYPE_EXTENSION;
}

// node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs
function ExecutableDefinitionsRule(context) {
  return {
    Document(node) {
      for (const definition of node.definitions) {
        if (!isExecutableDefinitionNode(definition)) {
          const defName = definition.kind === Kind.SCHEMA_DEFINITION || definition.kind === Kind.SCHEMA_EXTENSION ? "schema" : '"' + definition.name.value + '"';
          context.reportError(
            new GraphQLError(`The ${defName} definition is not executable.`, {
              nodes: definition
            })
          );
        }
      }
      return false;
    }
  };
}

// node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs
function FieldsOnCorrectTypeRule(context) {
  return {
    Field(node) {
      const type3 = context.getParentType();
      if (type3) {
        const fieldDef = context.getFieldDef();
        if (!fieldDef) {
          const schema = context.getSchema();
          const fieldName = node.name.value;
          let suggestion = didYouMean(
            "to use an inline fragment on",
            getSuggestedTypeNames(schema, type3, fieldName)
          );
          if (suggestion === "") {
            suggestion = didYouMean(getSuggestedFieldNames(type3, fieldName));
          }
          context.reportError(
            new GraphQLError(
              `Cannot query field "${fieldName}" on type "${type3.name}".` + suggestion,
              {
                nodes: node
              }
            )
          );
        }
      }
    }
  };
}
function getSuggestedTypeNames(schema, type3, fieldName) {
  if (!isAbstractType(type3)) {
    return [];
  }
  const suggestedTypes = /* @__PURE__ */ new Set();
  const usageCount = /* @__PURE__ */ Object.create(null);
  for (const possibleType of schema.getPossibleTypes(type3)) {
    if (!possibleType.getFields()[fieldName]) {
      continue;
    }
    suggestedTypes.add(possibleType);
    usageCount[possibleType.name] = 1;
    for (const possibleInterface of possibleType.getInterfaces()) {
      var _usageCount$possibleI;
      if (!possibleInterface.getFields()[fieldName]) {
        continue;
      }
      suggestedTypes.add(possibleInterface);
      usageCount[possibleInterface.name] = ((_usageCount$possibleI = usageCount[possibleInterface.name]) !== null && _usageCount$possibleI !== void 0 ? _usageCount$possibleI : 0) + 1;
    }
  }
  return [...suggestedTypes].sort((typeA, typeB) => {
    const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];
    if (usageCountDiff !== 0) {
      return usageCountDiff;
    }
    if (isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) {
      return -1;
    }
    if (isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) {
      return 1;
    }
    return naturalCompare(typeA.name, typeB.name);
  }).map((x) => x.name);
}
function getSuggestedFieldNames(type3, fieldName) {
  if (isObjectType(type3) || isInterfaceType(type3)) {
    const possibleFieldNames = Object.keys(type3.getFields());
    return suggestionList(fieldName, possibleFieldNames);
  }
  return [];
}

// node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs
function FragmentsOnCompositeTypesRule(context) {
  return {
    InlineFragment(node) {
      const typeCondition = node.typeCondition;
      if (typeCondition) {
        const type3 = typeFromAST(context.getSchema(), typeCondition);
        if (type3 && !isCompositeType(type3)) {
          const typeStr = print(typeCondition);
          context.reportError(
            new GraphQLError(
              `Fragment cannot condition on non composite type "${typeStr}".`,
              {
                nodes: typeCondition
              }
            )
          );
        }
      }
    },
    FragmentDefinition(node) {
      const type3 = typeFromAST(context.getSchema(), node.typeCondition);
      if (type3 && !isCompositeType(type3)) {
        const typeStr = print(node.typeCondition);
        context.reportError(
          new GraphQLError(
            `Fragment "${node.name.value}" cannot condition on non composite type "${typeStr}".`,
            {
              nodes: node.typeCondition
            }
          )
        );
      }
    }
  };
}

// node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs
function KnownArgumentNamesRule(context) {
  return {
    // eslint-disable-next-line new-cap
    ...KnownArgumentNamesOnDirectivesRule(context),
    Argument(argNode) {
      const argDef = context.getArgument();
      const fieldDef = context.getFieldDef();
      const parentType = context.getParentType();
      if (!argDef && fieldDef && parentType) {
        const argName = argNode.name.value;
        const knownArgsNames = fieldDef.args.map((arg) => arg.name);
        const suggestions = suggestionList(argName, knownArgsNames);
        context.reportError(
          new GraphQLError(
            `Unknown argument "${argName}" on field "${parentType.name}.${fieldDef.name}".` + didYouMean(suggestions),
            {
              nodes: argNode
            }
          )
        );
      }
    }
  };
}
function KnownArgumentNamesOnDirectivesRule(context) {
  const directiveArgs = /* @__PURE__ */ Object.create(null);
  const schema = context.getSchema();
  const definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;
  for (const directive of definedDirectives) {
    directiveArgs[directive.name] = directive.args.map((arg) => arg.name);
  }
  const astDefinitions = context.getDocument().definitions;
  for (const def of astDefinitions) {
    if (def.kind === Kind.DIRECTIVE_DEFINITION) {
      var _def$arguments;
      const argsNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
      directiveArgs[def.name.value] = argsNodes.map((arg) => arg.name.value);
    }
  }
  return {
    Directive(directiveNode) {
      const directiveName = directiveNode.name.value;
      const knownArgs = directiveArgs[directiveName];
      if (directiveNode.arguments && knownArgs) {
        for (const argNode of directiveNode.arguments) {
          const argName = argNode.name.value;
          if (!knownArgs.includes(argName)) {
            const suggestions = suggestionList(argName, knownArgs);
            context.reportError(
              new GraphQLError(
                `Unknown argument "${argName}" on directive "@${directiveName}".` + didYouMean(suggestions),
                {
                  nodes: argNode
                }
              )
            );
          }
        }
      }
      return false;
    }
  };
}

// node_modules/graphql/validation/rules/KnownDirectivesRule.mjs
function KnownDirectivesRule(context) {
  const locationsMap = /* @__PURE__ */ Object.create(null);
  const schema = context.getSchema();
  const definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;
  for (const directive of definedDirectives) {
    locationsMap[directive.name] = directive.locations;
  }
  const astDefinitions = context.getDocument().definitions;
  for (const def of astDefinitions) {
    if (def.kind === Kind.DIRECTIVE_DEFINITION) {
      locationsMap[def.name.value] = def.locations.map((name) => name.value);
    }
  }
  return {
    Directive(node, _key, _parent, _path2, ancestors) {
      const name = node.name.value;
      const locations = locationsMap[name];
      if (!locations) {
        context.reportError(
          new GraphQLError(`Unknown directive "@${name}".`, {
            nodes: node
          })
        );
        return;
      }
      const candidateLocation = getDirectiveLocationForASTPath(ancestors);
      if (candidateLocation && !locations.includes(candidateLocation)) {
        context.reportError(
          new GraphQLError(
            `Directive "@${name}" may not be used on ${candidateLocation}.`,
            {
              nodes: node
            }
          )
        );
      }
    }
  };
}
function getDirectiveLocationForASTPath(ancestors) {
  const appliedTo = ancestors[ancestors.length - 1];
  "kind" in appliedTo || invariant(false);
  switch (appliedTo.kind) {
    case Kind.OPERATION_DEFINITION:
      return getDirectiveLocationForOperation(appliedTo.operation);
    case Kind.FIELD:
      return DirectiveLocation.FIELD;
    case Kind.FRAGMENT_SPREAD:
      return DirectiveLocation.FRAGMENT_SPREAD;
    case Kind.INLINE_FRAGMENT:
      return DirectiveLocation.INLINE_FRAGMENT;
    case Kind.FRAGMENT_DEFINITION:
      return DirectiveLocation.FRAGMENT_DEFINITION;
    case Kind.VARIABLE_DEFINITION:
      return DirectiveLocation.VARIABLE_DEFINITION;
    case Kind.SCHEMA_DEFINITION:
    case Kind.SCHEMA_EXTENSION:
      return DirectiveLocation.SCHEMA;
    case Kind.SCALAR_TYPE_DEFINITION:
    case Kind.SCALAR_TYPE_EXTENSION:
      return DirectiveLocation.SCALAR;
    case Kind.OBJECT_TYPE_DEFINITION:
    case Kind.OBJECT_TYPE_EXTENSION:
      return DirectiveLocation.OBJECT;
    case Kind.FIELD_DEFINITION:
      return DirectiveLocation.FIELD_DEFINITION;
    case Kind.INTERFACE_TYPE_DEFINITION:
    case Kind.INTERFACE_TYPE_EXTENSION:
      return DirectiveLocation.INTERFACE;
    case Kind.UNION_TYPE_DEFINITION:
    case Kind.UNION_TYPE_EXTENSION:
      return DirectiveLocation.UNION;
    case Kind.ENUM_TYPE_DEFINITION:
    case Kind.ENUM_TYPE_EXTENSION:
      return DirectiveLocation.ENUM;
    case Kind.ENUM_VALUE_DEFINITION:
      return DirectiveLocation.ENUM_VALUE;
    case Kind.INPUT_OBJECT_TYPE_DEFINITION:
    case Kind.INPUT_OBJECT_TYPE_EXTENSION:
      return DirectiveLocation.INPUT_OBJECT;
    case Kind.INPUT_VALUE_DEFINITION: {
      const parentNode = ancestors[ancestors.length - 3];
      "kind" in parentNode || invariant(false);
      return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION ? DirectiveLocation.INPUT_FIELD_DEFINITION : DirectiveLocation.ARGUMENT_DEFINITION;
    }
    default:
      invariant(false, "Unexpected kind: " + inspect(appliedTo.kind));
  }
}
function getDirectiveLocationForOperation(operation) {
  switch (operation) {
    case OperationTypeNode.QUERY:
      return DirectiveLocation.QUERY;
    case OperationTypeNode.MUTATION:
      return DirectiveLocation.MUTATION;
    case OperationTypeNode.SUBSCRIPTION:
      return DirectiveLocation.SUBSCRIPTION;
  }
}

// node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs
function KnownFragmentNamesRule(context) {
  return {
    FragmentSpread(node) {
      const fragmentName = node.name.value;
      const fragment = context.getFragment(fragmentName);
      if (!fragment) {
        context.reportError(
          new GraphQLError(`Unknown fragment "${fragmentName}".`, {
            nodes: node.name
          })
        );
      }
    }
  };
}

// node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs
function KnownTypeNamesRule(context) {
  const schema = context.getSchema();
  const existingTypesMap = schema ? schema.getTypeMap() : /* @__PURE__ */ Object.create(null);
  const definedTypes = /* @__PURE__ */ Object.create(null);
  for (const def of context.getDocument().definitions) {
    if (isTypeDefinitionNode(def)) {
      definedTypes[def.name.value] = true;
    }
  }
  const typeNames = [
    ...Object.keys(existingTypesMap),
    ...Object.keys(definedTypes)
  ];
  return {
    NamedType(node, _1, parent, _2, ancestors) {
      const typeName = node.name.value;
      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {
        var _ancestors$;
        const definitionNode = (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0 ? _ancestors$ : parent;
        const isSDL = definitionNode != null && isSDLNode(definitionNode);
        if (isSDL && standardTypeNames.includes(typeName)) {
          return;
        }
        const suggestedTypes = suggestionList(
          typeName,
          isSDL ? standardTypeNames.concat(typeNames) : typeNames
        );
        context.reportError(
          new GraphQLError(
            `Unknown type "${typeName}".` + didYouMean(suggestedTypes),
            {
              nodes: node
            }
          )
        );
      }
    }
  };
}
var standardTypeNames = [...specifiedScalarTypes, ...introspectionTypes].map(
  (type3) => type3.name
);
function isSDLNode(value) {
  return "kind" in value && (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value));
}

// node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs
function LoneAnonymousOperationRule(context) {
  let operationCount = 0;
  return {
    Document(node) {
      operationCount = node.definitions.filter(
        (definition) => definition.kind === Kind.OPERATION_DEFINITION
      ).length;
    },
    OperationDefinition(node) {
      if (!node.name && operationCount > 1) {
        context.reportError(
          new GraphQLError(
            "This anonymous operation must be the only defined operation.",
            {
              nodes: node
            }
          )
        );
      }
    }
  };
}

// node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs
function LoneSchemaDefinitionRule(context) {
  var _ref, _ref2, _oldSchema$astNode;
  const oldSchema = context.getSchema();
  const alreadyDefined = (_ref = (_ref2 = (_oldSchema$astNode = oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0 ? _oldSchema$astNode : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getQueryType()) !== null && _ref2 !== void 0 ? _ref2 : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getMutationType()) !== null && _ref !== void 0 ? _ref : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getSubscriptionType();
  let schemaDefinitionsCount = 0;
  return {
    SchemaDefinition(node) {
      if (alreadyDefined) {
        context.reportError(
          new GraphQLError(
            "Cannot define a new schema within a schema extension.",
            {
              nodes: node
            }
          )
        );
        return;
      }
      if (schemaDefinitionsCount > 0) {
        context.reportError(
          new GraphQLError("Must provide only one schema definition.", {
            nodes: node
          })
        );
      }
      ++schemaDefinitionsCount;
    }
  };
}

// node_modules/graphql/validation/rules/MaxIntrospectionDepthRule.mjs
var MAX_LISTS_DEPTH = 3;
function MaxIntrospectionDepthRule(context) {
  function checkDepth(node, visitedFragments = /* @__PURE__ */ Object.create(null), depth = 0) {
    if (node.kind === Kind.FRAGMENT_SPREAD) {
      const fragmentName = node.name.value;
      if (visitedFragments[fragmentName] === true) {
        return false;
      }
      const fragment = context.getFragment(fragmentName);
      if (!fragment) {
        return false;
      }
      try {
        visitedFragments[fragmentName] = true;
        return checkDepth(fragment, visitedFragments, depth);
      } finally {
        visitedFragments[fragmentName] = void 0;
      }
    }
    if (node.kind === Kind.FIELD && // check all introspection lists
    (node.name.value === "fields" || node.name.value === "interfaces" || node.name.value === "possibleTypes" || node.name.value === "inputFields")) {
      depth++;
      if (depth >= MAX_LISTS_DEPTH) {
        return true;
      }
    }
    if ("selectionSet" in node && node.selectionSet) {
      for (const child of node.selectionSet.selections) {
        if (checkDepth(child, visitedFragments, depth)) {
          return true;
        }
      }
    }
    return false;
  }
  return {
    Field(node) {
      if (node.name.value === "__schema" || node.name.value === "__type") {
        if (checkDepth(node)) {
          context.reportError(
            new GraphQLError("Maximum introspection depth exceeded", {
              nodes: [node]
            })
          );
          return false;
        }
      }
    }
  };
}

// node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs
function NoFragmentCyclesRule(context) {
  const visitedFrags = /* @__PURE__ */ Object.create(null);
  const spreadPath = [];
  const spreadPathIndexByName = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: () => false,
    FragmentDefinition(node) {
      detectCycleRecursive(node);
      return false;
    }
  };
  function detectCycleRecursive(fragment) {
    if (visitedFrags[fragment.name.value]) {
      return;
    }
    const fragmentName = fragment.name.value;
    visitedFrags[fragmentName] = true;
    const spreadNodes = context.getFragmentSpreads(fragment.selectionSet);
    if (spreadNodes.length === 0) {
      return;
    }
    spreadPathIndexByName[fragmentName] = spreadPath.length;
    for (const spreadNode of spreadNodes) {
      const spreadName = spreadNode.name.value;
      const cycleIndex = spreadPathIndexByName[spreadName];
      spreadPath.push(spreadNode);
      if (cycleIndex === void 0) {
        const spreadFragment = context.getFragment(spreadName);
        if (spreadFragment) {
          detectCycleRecursive(spreadFragment);
        }
      } else {
        const cyclePath = spreadPath.slice(cycleIndex);
        const viaPath = cyclePath.slice(0, -1).map((s) => '"' + s.name.value + '"').join(", ");
        context.reportError(
          new GraphQLError(
            `Cannot spread fragment "${spreadName}" within itself` + (viaPath !== "" ? ` via ${viaPath}.` : "."),
            {
              nodes: cyclePath
            }
          )
        );
      }
      spreadPath.pop();
    }
    spreadPathIndexByName[fragmentName] = void 0;
  }
}

// node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs
function NoUndefinedVariablesRule(context) {
  let variableNameDefined = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: {
      enter() {
        variableNameDefined = /* @__PURE__ */ Object.create(null);
      },
      leave(operation) {
        const usages = context.getRecursiveVariableUsages(operation);
        for (const { node } of usages) {
          const varName = node.name.value;
          if (variableNameDefined[varName] !== true) {
            context.reportError(
              new GraphQLError(
                operation.name ? `Variable "$${varName}" is not defined by operation "${operation.name.value}".` : `Variable "$${varName}" is not defined.`,
                {
                  nodes: [node, operation]
                }
              )
            );
          }
        }
      }
    },
    VariableDefinition(node) {
      variableNameDefined[node.variable.name.value] = true;
    }
  };
}

// node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs
function NoUnusedFragmentsRule(context) {
  const operationDefs = [];
  const fragmentDefs = [];
  return {
    OperationDefinition(node) {
      operationDefs.push(node);
      return false;
    },
    FragmentDefinition(node) {
      fragmentDefs.push(node);
      return false;
    },
    Document: {
      leave() {
        const fragmentNameUsed = /* @__PURE__ */ Object.create(null);
        for (const operation of operationDefs) {
          for (const fragment of context.getRecursivelyReferencedFragments(
            operation
          )) {
            fragmentNameUsed[fragment.name.value] = true;
          }
        }
        for (const fragmentDef of fragmentDefs) {
          const fragName = fragmentDef.name.value;
          if (fragmentNameUsed[fragName] !== true) {
            context.reportError(
              new GraphQLError(`Fragment "${fragName}" is never used.`, {
                nodes: fragmentDef
              })
            );
          }
        }
      }
    }
  };
}

// node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs
function NoUnusedVariablesRule(context) {
  let variableDefs = [];
  return {
    OperationDefinition: {
      enter() {
        variableDefs = [];
      },
      leave(operation) {
        const variableNameUsed = /* @__PURE__ */ Object.create(null);
        const usages = context.getRecursiveVariableUsages(operation);
        for (const { node } of usages) {
          variableNameUsed[node.name.value] = true;
        }
        for (const variableDef of variableDefs) {
          const variableName = variableDef.variable.name.value;
          if (variableNameUsed[variableName] !== true) {
            context.reportError(
              new GraphQLError(
                operation.name ? `Variable "$${variableName}" is never used in operation "${operation.name.value}".` : `Variable "$${variableName}" is never used.`,
                {
                  nodes: variableDef
                }
              )
            );
          }
        }
      }
    },
    VariableDefinition(def) {
      variableDefs.push(def);
    }
  };
}

// node_modules/graphql/utilities/sortValueNode.mjs
function sortValueNode(valueNode) {
  switch (valueNode.kind) {
    case Kind.OBJECT:
      return { ...valueNode, fields: sortFields(valueNode.fields) };
    case Kind.LIST:
      return { ...valueNode, values: valueNode.values.map(sortValueNode) };
    case Kind.INT:
    case Kind.FLOAT:
    case Kind.STRING:
    case Kind.BOOLEAN:
    case Kind.NULL:
    case Kind.ENUM:
    case Kind.VARIABLE:
      return valueNode;
  }
}
function sortFields(fields) {
  return fields.map((fieldNode) => ({
    ...fieldNode,
    value: sortValueNode(fieldNode.value)
  })).sort(
    (fieldA, fieldB) => naturalCompare(fieldA.name.value, fieldB.name.value)
  );
}

// node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs
function reasonMessage(reason) {
  if (Array.isArray(reason)) {
    return reason.map(
      ([responseName, subReason]) => `subfields "${responseName}" conflict because ` + reasonMessage(subReason)
    ).join(" and ");
  }
  return reason;
}
function OverlappingFieldsCanBeMergedRule(context) {
  const comparedFieldsAndFragmentPairs = new OrderedPairSet();
  const comparedFragmentPairs = new PairSet();
  const cachedFieldsAndFragmentNames = /* @__PURE__ */ new Map();
  return {
    SelectionSet(selectionSet) {
      const conflicts = findConflictsWithinSelectionSet(
        context,
        cachedFieldsAndFragmentNames,
        comparedFieldsAndFragmentPairs,
        comparedFragmentPairs,
        context.getParentType(),
        selectionSet
      );
      for (const [[responseName, reason], fields1, fields2] of conflicts) {
        const reasonMsg = reasonMessage(reason);
        context.reportError(
          new GraphQLError(
            `Fields "${responseName}" conflict because ${reasonMsg}. Use different aliases on the fields to fetch both if this was intentional.`,
            {
              nodes: fields1.concat(fields2)
            }
          )
        );
      }
    }
  };
}
function findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFieldsAndFragmentPairs, comparedFragmentPairs, parentType, selectionSet) {
  const conflicts = [];
  const [fieldMap, fragmentNames] = getFieldsAndFragmentNames(
    context,
    cachedFieldsAndFragmentNames,
    parentType,
    selectionSet
  );
  collectConflictsWithin(
    context,
    conflicts,
    cachedFieldsAndFragmentNames,
    comparedFieldsAndFragmentPairs,
    comparedFragmentPairs,
    fieldMap
  );
  if (fragmentNames.length !== 0) {
    for (let i = 0; i < fragmentNames.length; i++) {
      collectConflictsBetweenFieldsAndFragment(
        context,
        conflicts,
        cachedFieldsAndFragmentNames,
        comparedFieldsAndFragmentPairs,
        comparedFragmentPairs,
        false,
        fieldMap,
        fragmentNames[i]
      );
      for (let j = i + 1; j < fragmentNames.length; j++) {
        collectConflictsBetweenFragments(
          context,
          conflicts,
          cachedFieldsAndFragmentNames,
          comparedFieldsAndFragmentPairs,
          comparedFragmentPairs,
          false,
          fragmentNames[i],
          fragmentNames[j]
        );
      }
    }
  }
  return conflicts;
}
function collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFieldsAndFragmentPairs, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {
  if (comparedFieldsAndFragmentPairs.has(
    fieldMap,
    fragmentName,
    areMutuallyExclusive
  )) {
    return;
  }
  comparedFieldsAndFragmentPairs.add(
    fieldMap,
    fragmentName,
    areMutuallyExclusive
  );
  const fragment = context.getFragment(fragmentName);
  if (!fragment) {
    return;
  }
  const [fieldMap2, referencedFragmentNames] = getReferencedFieldsAndFragmentNames(
    context,
    cachedFieldsAndFragmentNames,
    fragment
  );
  if (fieldMap === fieldMap2) {
    return;
  }
  collectConflictsBetween(
    context,
    conflicts,
    cachedFieldsAndFragmentNames,
    comparedFieldsAndFragmentPairs,
    comparedFragmentPairs,
    areMutuallyExclusive,
    fieldMap,
    fieldMap2
  );
  for (const referencedFragmentName of referencedFragmentNames) {
    collectConflictsBetweenFieldsAndFragment(
      context,
      conflicts,
      cachedFieldsAndFragmentNames,
      comparedFieldsAndFragmentPairs,
      comparedFragmentPairs,
      areMutuallyExclusive,
      fieldMap,
      referencedFragmentName
    );
  }
}
function collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFieldsAndFragmentPairs, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {
  if (fragmentName1 === fragmentName2) {
    return;
  }
  if (comparedFragmentPairs.has(
    fragmentName1,
    fragmentName2,
    areMutuallyExclusive
  )) {
    return;
  }
  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);
  const fragment1 = context.getFragment(fragmentName1);
  const fragment2 = context.getFragment(fragmentName2);
  if (!fragment1 || !fragment2) {
    return;
  }
  const [fieldMap1, referencedFragmentNames1] = getReferencedFieldsAndFragmentNames(
    context,
    cachedFieldsAndFragmentNames,
    fragment1
  );
  const [fieldMap2, referencedFragmentNames2] = getReferencedFieldsAndFragmentNames(
    context,
    cachedFieldsAndFragmentNames,
    fragment2
  );
  collectConflictsBetween(
    context,
    conflicts,
    cachedFieldsAndFragmentNames,
    comparedFieldsAndFragmentPairs,
    comparedFragmentPairs,
    areMutuallyExclusive,
    fieldMap1,
    fieldMap2
  );
  for (const referencedFragmentName2 of referencedFragmentNames2) {
    collectConflictsBetweenFragments(
      context,
      conflicts,
      cachedFieldsAndFragmentNames,
      comparedFieldsAndFragmentPairs,
      comparedFragmentPairs,
      areMutuallyExclusive,
      fragmentName1,
      referencedFragmentName2
    );
  }
  for (const referencedFragmentName1 of referencedFragmentNames1) {
    collectConflictsBetweenFragments(
      context,
      conflicts,
      cachedFieldsAndFragmentNames,
      comparedFieldsAndFragmentPairs,
      comparedFragmentPairs,
      areMutuallyExclusive,
      referencedFragmentName1,
      fragmentName2
    );
  }
}
function findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFieldsAndFragmentPairs, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {
  const conflicts = [];
  const [fieldMap1, fragmentNames1] = getFieldsAndFragmentNames(
    context,
    cachedFieldsAndFragmentNames,
    parentType1,
    selectionSet1
  );
  const [fieldMap2, fragmentNames2] = getFieldsAndFragmentNames(
    context,
    cachedFieldsAndFragmentNames,
    parentType2,
    selectionSet2
  );
  collectConflictsBetween(
    context,
    conflicts,
    cachedFieldsAndFragmentNames,
    comparedFieldsAndFragmentPairs,
    comparedFragmentPairs,
    areMutuallyExclusive,
    fieldMap1,
    fieldMap2
  );
  for (const fragmentName2 of fragmentNames2) {
    collectConflictsBetweenFieldsAndFragment(
      context,
      conflicts,
      cachedFieldsAndFragmentNames,
      comparedFieldsAndFragmentPairs,
      comparedFragmentPairs,
      areMutuallyExclusive,
      fieldMap1,
      fragmentName2
    );
  }
  for (const fragmentName1 of fragmentNames1) {
    collectConflictsBetweenFieldsAndFragment(
      context,
      conflicts,
      cachedFieldsAndFragmentNames,
      comparedFieldsAndFragmentPairs,
      comparedFragmentPairs,
      areMutuallyExclusive,
      fieldMap2,
      fragmentName1
    );
  }
  for (const fragmentName1 of fragmentNames1) {
    for (const fragmentName2 of fragmentNames2) {
      collectConflictsBetweenFragments(
        context,
        conflicts,
        cachedFieldsAndFragmentNames,
        comparedFieldsAndFragmentPairs,
        comparedFragmentPairs,
        areMutuallyExclusive,
        fragmentName1,
        fragmentName2
      );
    }
  }
  return conflicts;
}
function collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFieldsAndFragmentPairs, comparedFragmentPairs, fieldMap) {
  for (const [responseName, fields] of Object.entries(fieldMap)) {
    if (fields.length > 1) {
      for (let i = 0; i < fields.length; i++) {
        for (let j = i + 1; j < fields.length; j++) {
          const conflict = findConflict(
            context,
            cachedFieldsAndFragmentNames,
            comparedFieldsAndFragmentPairs,
            comparedFragmentPairs,
            false,
            // within one collection is never mutually exclusive
            responseName,
            fields[i],
            fields[j]
          );
          if (conflict) {
            conflicts.push(conflict);
          }
        }
      }
    }
  }
}
function collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFieldsAndFragmentPairs, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {
  for (const [responseName, fields1] of Object.entries(fieldMap1)) {
    const fields2 = fieldMap2[responseName];
    if (fields2) {
      for (const field1 of fields1) {
        for (const field2 of fields2) {
          const conflict = findConflict(
            context,
            cachedFieldsAndFragmentNames,
            comparedFieldsAndFragmentPairs,
            comparedFragmentPairs,
            parentFieldsAreMutuallyExclusive,
            responseName,
            field1,
            field2
          );
          if (conflict) {
            conflicts.push(conflict);
          }
        }
      }
    }
  }
}
function findConflict(context, cachedFieldsAndFragmentNames, comparedFieldsAndFragmentPairs, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {
  const [parentType1, node1, def1] = field1;
  const [parentType2, node2, def2] = field2;
  const areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && isObjectType(parentType1) && isObjectType(parentType2);
  if (!areMutuallyExclusive) {
    const name1 = node1.name.value;
    const name2 = node2.name.value;
    if (name1 !== name2) {
      return [
        [responseName, `"${name1}" and "${name2}" are different fields`],
        [node1],
        [node2]
      ];
    }
    if (!sameArguments(node1, node2)) {
      return [
        [responseName, "they have differing arguments"],
        [node1],
        [node2]
      ];
    }
  }
  const type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;
  const type22 = def2 === null || def2 === void 0 ? void 0 : def2.type;
  if (type1 && type22 && doTypesConflict(type1, type22)) {
    return [
      [
        responseName,
        `they return conflicting types "${inspect(type1)}" and "${inspect(
          type22
        )}"`
      ],
      [node1],
      [node2]
    ];
  }
  const selectionSet1 = node1.selectionSet;
  const selectionSet2 = node2.selectionSet;
  if (selectionSet1 && selectionSet2) {
    const conflicts = findConflictsBetweenSubSelectionSets(
      context,
      cachedFieldsAndFragmentNames,
      comparedFieldsAndFragmentPairs,
      comparedFragmentPairs,
      areMutuallyExclusive,
      getNamedType(type1),
      selectionSet1,
      getNamedType(type22),
      selectionSet2
    );
    return subfieldConflicts(conflicts, responseName, node1, node2);
  }
}
function sameArguments(node1, node2) {
  const args1 = node1.arguments;
  const args2 = node2.arguments;
  if (args1 === void 0 || args1.length === 0) {
    return args2 === void 0 || args2.length === 0;
  }
  if (args2 === void 0 || args2.length === 0) {
    return false;
  }
  if (args1.length !== args2.length) {
    return false;
  }
  const values22 = new Map(args2.map(({ name, value }) => [name.value, value]));
  return args1.every((arg1) => {
    const value1 = arg1.value;
    const value2 = values22.get(arg1.name.value);
    if (value2 === void 0) {
      return false;
    }
    return stringifyValue(value1) === stringifyValue(value2);
  });
}
function stringifyValue(value) {
  return print(sortValueNode(value));
}
function doTypesConflict(type1, type22) {
  if (isListType(type1)) {
    return isListType(type22) ? doTypesConflict(type1.ofType, type22.ofType) : true;
  }
  if (isListType(type22)) {
    return true;
  }
  if (isNonNullType(type1)) {
    return isNonNullType(type22) ? doTypesConflict(type1.ofType, type22.ofType) : true;
  }
  if (isNonNullType(type22)) {
    return true;
  }
  if (isLeafType(type1) || isLeafType(type22)) {
    return type1 !== type22;
  }
  return false;
}
function getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {
  const cached = cachedFieldsAndFragmentNames.get(selectionSet);
  if (cached) {
    return cached;
  }
  const nodeAndDefs = /* @__PURE__ */ Object.create(null);
  const fragmentNames = /* @__PURE__ */ Object.create(null);
  _collectFieldsAndFragmentNames(
    context,
    parentType,
    selectionSet,
    nodeAndDefs,
    fragmentNames
  );
  const result = [nodeAndDefs, Object.keys(fragmentNames)];
  cachedFieldsAndFragmentNames.set(selectionSet, result);
  return result;
}
function getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {
  const cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);
  if (cached) {
    return cached;
  }
  const fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);
  return getFieldsAndFragmentNames(
    context,
    cachedFieldsAndFragmentNames,
    fragmentType,
    fragment.selectionSet
  );
}
function _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {
  for (const selection of selectionSet.selections) {
    switch (selection.kind) {
      case Kind.FIELD: {
        const fieldName = selection.name.value;
        let fieldDef;
        if (isObjectType(parentType) || isInterfaceType(parentType)) {
          fieldDef = parentType.getFields()[fieldName];
        }
        const responseName = selection.alias ? selection.alias.value : fieldName;
        if (!nodeAndDefs[responseName]) {
          nodeAndDefs[responseName] = [];
        }
        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);
        break;
      }
      case Kind.FRAGMENT_SPREAD:
        fragmentNames[selection.name.value] = true;
        break;
      case Kind.INLINE_FRAGMENT: {
        const typeCondition = selection.typeCondition;
        const inlineFragmentType = typeCondition ? typeFromAST(context.getSchema(), typeCondition) : parentType;
        _collectFieldsAndFragmentNames(
          context,
          inlineFragmentType,
          selection.selectionSet,
          nodeAndDefs,
          fragmentNames
        );
        break;
      }
    }
  }
}
function subfieldConflicts(conflicts, responseName, node1, node2) {
  if (conflicts.length > 0) {
    return [
      [responseName, conflicts.map(([reason]) => reason)],
      [node1, ...conflicts.map(([, fields1]) => fields1).flat()],
      [node2, ...conflicts.map(([, , fields2]) => fields2).flat()]
    ];
  }
}
var OrderedPairSet = class {
  constructor() {
    this._data = /* @__PURE__ */ new Map();
  }
  has(a, b, weaklyPresent) {
    var _this$_data$get;
    const result = (_this$_data$get = this._data.get(a)) === null || _this$_data$get === void 0 ? void 0 : _this$_data$get.get(b);
    if (result === void 0) {
      return false;
    }
    return weaklyPresent ? true : weaklyPresent === result;
  }
  add(a, b, weaklyPresent) {
    const map3 = this._data.get(a);
    if (map3 === void 0) {
      this._data.set(a, /* @__PURE__ */ new Map([[b, weaklyPresent]]));
    } else {
      map3.set(b, weaklyPresent);
    }
  }
};
var PairSet = class {
  constructor() {
    this._orderedPairSet = new OrderedPairSet();
  }
  has(a, b, weaklyPresent) {
    return a < b ? this._orderedPairSet.has(a, b, weaklyPresent) : this._orderedPairSet.has(b, a, weaklyPresent);
  }
  add(a, b, weaklyPresent) {
    if (a < b) {
      this._orderedPairSet.add(a, b, weaklyPresent);
    } else {
      this._orderedPairSet.add(b, a, weaklyPresent);
    }
  }
};

// node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs
function PossibleFragmentSpreadsRule(context) {
  return {
    InlineFragment(node) {
      const fragType = context.getType();
      const parentType = context.getParentType();
      if (isCompositeType(fragType) && isCompositeType(parentType) && !doTypesOverlap(context.getSchema(), fragType, parentType)) {
        const parentTypeStr = inspect(parentType);
        const fragTypeStr = inspect(fragType);
        context.reportError(
          new GraphQLError(
            `Fragment cannot be spread here as objects of type "${parentTypeStr}" can never be of type "${fragTypeStr}".`,
            {
              nodes: node
            }
          )
        );
      }
    },
    FragmentSpread(node) {
      const fragName = node.name.value;
      const fragType = getFragmentType(context, fragName);
      const parentType = context.getParentType();
      if (fragType && parentType && !doTypesOverlap(context.getSchema(), fragType, parentType)) {
        const parentTypeStr = inspect(parentType);
        const fragTypeStr = inspect(fragType);
        context.reportError(
          new GraphQLError(
            `Fragment "${fragName}" cannot be spread here as objects of type "${parentTypeStr}" can never be of type "${fragTypeStr}".`,
            {
              nodes: node
            }
          )
        );
      }
    }
  };
}
function getFragmentType(context, name) {
  const frag = context.getFragment(name);
  if (frag) {
    const type3 = typeFromAST(context.getSchema(), frag.typeCondition);
    if (isCompositeType(type3)) {
      return type3;
    }
  }
}

// node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs
function PossibleTypeExtensionsRule(context) {
  const schema = context.getSchema();
  const definedTypes = /* @__PURE__ */ Object.create(null);
  for (const def of context.getDocument().definitions) {
    if (isTypeDefinitionNode(def)) {
      definedTypes[def.name.value] = def;
    }
  }
  return {
    ScalarTypeExtension: checkExtension,
    ObjectTypeExtension: checkExtension,
    InterfaceTypeExtension: checkExtension,
    UnionTypeExtension: checkExtension,
    EnumTypeExtension: checkExtension,
    InputObjectTypeExtension: checkExtension
  };
  function checkExtension(node) {
    const typeName = node.name.value;
    const defNode = definedTypes[typeName];
    const existingType = schema === null || schema === void 0 ? void 0 : schema.getType(typeName);
    let expectedKind;
    if (defNode) {
      expectedKind = defKindToExtKind[defNode.kind];
    } else if (existingType) {
      expectedKind = typeToExtKind(existingType);
    }
    if (expectedKind) {
      if (expectedKind !== node.kind) {
        const kindStr = extensionKindToTypeName(node.kind);
        context.reportError(
          new GraphQLError(`Cannot extend non-${kindStr} type "${typeName}".`, {
            nodes: defNode ? [defNode, node] : node
          })
        );
      }
    } else {
      const allTypeNames = Object.keys({
        ...definedTypes,
        ...schema === null || schema === void 0 ? void 0 : schema.getTypeMap()
      });
      const suggestedTypes = suggestionList(typeName, allTypeNames);
      context.reportError(
        new GraphQLError(
          `Cannot extend type "${typeName}" because it is not defined.` + didYouMean(suggestedTypes),
          {
            nodes: node.name
          }
        )
      );
    }
  }
}
var defKindToExtKind = {
  [Kind.SCALAR_TYPE_DEFINITION]: Kind.SCALAR_TYPE_EXTENSION,
  [Kind.OBJECT_TYPE_DEFINITION]: Kind.OBJECT_TYPE_EXTENSION,
  [Kind.INTERFACE_TYPE_DEFINITION]: Kind.INTERFACE_TYPE_EXTENSION,
  [Kind.UNION_TYPE_DEFINITION]: Kind.UNION_TYPE_EXTENSION,
  [Kind.ENUM_TYPE_DEFINITION]: Kind.ENUM_TYPE_EXTENSION,
  [Kind.INPUT_OBJECT_TYPE_DEFINITION]: Kind.INPUT_OBJECT_TYPE_EXTENSION
};
function typeToExtKind(type3) {
  if (isScalarType(type3)) {
    return Kind.SCALAR_TYPE_EXTENSION;
  }
  if (isObjectType(type3)) {
    return Kind.OBJECT_TYPE_EXTENSION;
  }
  if (isInterfaceType(type3)) {
    return Kind.INTERFACE_TYPE_EXTENSION;
  }
  if (isUnionType(type3)) {
    return Kind.UNION_TYPE_EXTENSION;
  }
  if (isEnumType(type3)) {
    return Kind.ENUM_TYPE_EXTENSION;
  }
  if (isInputObjectType(type3)) {
    return Kind.INPUT_OBJECT_TYPE_EXTENSION;
  }
  invariant(false, "Unexpected type: " + inspect(type3));
}
function extensionKindToTypeName(kind) {
  switch (kind) {
    case Kind.SCALAR_TYPE_EXTENSION:
      return "scalar";
    case Kind.OBJECT_TYPE_EXTENSION:
      return "object";
    case Kind.INTERFACE_TYPE_EXTENSION:
      return "interface";
    case Kind.UNION_TYPE_EXTENSION:
      return "union";
    case Kind.ENUM_TYPE_EXTENSION:
      return "enum";
    case Kind.INPUT_OBJECT_TYPE_EXTENSION:
      return "input object";
    default:
      invariant(false, "Unexpected kind: " + inspect(kind));
  }
}

// node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs
function ProvidedRequiredArgumentsRule(context) {
  return {
    // eslint-disable-next-line new-cap
    ...ProvidedRequiredArgumentsOnDirectivesRule(context),
    Field: {
      // Validate on leave to allow for deeper errors to appear first.
      leave(fieldNode) {
        var _fieldNode$arguments;
        const fieldDef = context.getFieldDef();
        if (!fieldDef) {
          return false;
        }
        const providedArgs = new Set(
          // FIXME: https://github.com/graphql/graphql-js/issues/2203
          /* c8 ignore next */
          (_fieldNode$arguments = fieldNode.arguments) === null || _fieldNode$arguments === void 0 ? void 0 : _fieldNode$arguments.map((arg) => arg.name.value)
        );
        for (const argDef of fieldDef.args) {
          if (!providedArgs.has(argDef.name) && isRequiredArgument(argDef)) {
            const argTypeStr = inspect(argDef.type);
            context.reportError(
              new GraphQLError(
                `Field "${fieldDef.name}" argument "${argDef.name}" of type "${argTypeStr}" is required, but it was not provided.`,
                {
                  nodes: fieldNode
                }
              )
            );
          }
        }
      }
    }
  };
}
function ProvidedRequiredArgumentsOnDirectivesRule(context) {
  var _schema$getDirectives;
  const requiredArgsMap = /* @__PURE__ */ Object.create(null);
  const schema = context.getSchema();
  const definedDirectives = (_schema$getDirectives = schema === null || schema === void 0 ? void 0 : schema.getDirectives()) !== null && _schema$getDirectives !== void 0 ? _schema$getDirectives : specifiedDirectives;
  for (const directive of definedDirectives) {
    requiredArgsMap[directive.name] = keyMap(
      directive.args.filter(isRequiredArgument),
      (arg) => arg.name
    );
  }
  const astDefinitions = context.getDocument().definitions;
  for (const def of astDefinitions) {
    if (def.kind === Kind.DIRECTIVE_DEFINITION) {
      var _def$arguments;
      const argNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
      requiredArgsMap[def.name.value] = keyMap(
        argNodes.filter(isRequiredArgumentNode),
        (arg) => arg.name.value
      );
    }
  }
  return {
    Directive: {
      // Validate on leave to allow for deeper errors to appear first.
      leave(directiveNode) {
        const directiveName = directiveNode.name.value;
        const requiredArgs = requiredArgsMap[directiveName];
        if (requiredArgs) {
          var _directiveNode$argume;
          const argNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];
          const argNodeMap = new Set(argNodes.map((arg) => arg.name.value));
          for (const [argName, argDef] of Object.entries(requiredArgs)) {
            if (!argNodeMap.has(argName)) {
              const argType = isType(argDef.type) ? inspect(argDef.type) : print(argDef.type);
              context.reportError(
                new GraphQLError(
                  `Directive "@${directiveName}" argument "${argName}" of type "${argType}" is required, but it was not provided.`,
                  {
                    nodes: directiveNode
                  }
                )
              );
            }
          }
        }
      }
    }
  };
}
function isRequiredArgumentNode(arg) {
  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;
}

// node_modules/graphql/validation/rules/ScalarLeafsRule.mjs
function ScalarLeafsRule(context) {
  return {
    Field(node) {
      const type3 = context.getType();
      const selectionSet = node.selectionSet;
      if (type3) {
        if (isLeafType(getNamedType(type3))) {
          if (selectionSet) {
            const fieldName = node.name.value;
            const typeStr = inspect(type3);
            context.reportError(
              new GraphQLError(
                `Field "${fieldName}" must not have a selection since type "${typeStr}" has no subfields.`,
                {
                  nodes: selectionSet
                }
              )
            );
          }
        } else if (!selectionSet) {
          const fieldName = node.name.value;
          const typeStr = inspect(type3);
          context.reportError(
            new GraphQLError(
              `Field "${fieldName}" of type "${typeStr}" must have a selection of subfields. Did you mean "${fieldName} { ... }"?`,
              {
                nodes: node
              }
            )
          );
        } else if (selectionSet.selections.length === 0) {
          const fieldName = node.name.value;
          const typeStr = inspect(type3);
          context.reportError(
            new GraphQLError(
              `Field "${fieldName}" of type "${typeStr}" must have at least one field selected.`,
              {
                nodes: node
              }
            )
          );
        }
      }
    }
  };
}

// node_modules/graphql/utilities/valueFromAST.mjs
function valueFromAST(valueNode, type3, variables) {
  if (!valueNode) {
    return;
  }
  if (valueNode.kind === Kind.VARIABLE) {
    const variableName = valueNode.name.value;
    if (variables == null || variables[variableName] === void 0) {
      return;
    }
    const variableValue = variables[variableName];
    if (variableValue === null && isNonNullType(type3)) {
      return;
    }
    return variableValue;
  }
  if (isNonNullType(type3)) {
    if (valueNode.kind === Kind.NULL) {
      return;
    }
    return valueFromAST(valueNode, type3.ofType, variables);
  }
  if (valueNode.kind === Kind.NULL) {
    return null;
  }
  if (isListType(type3)) {
    const itemType = type3.ofType;
    if (valueNode.kind === Kind.LIST) {
      const coercedValues = [];
      for (const itemNode of valueNode.values) {
        if (isMissingVariable(itemNode, variables)) {
          if (isNonNullType(itemType)) {
            return;
          }
          coercedValues.push(null);
        } else {
          const itemValue = valueFromAST(itemNode, itemType, variables);
          if (itemValue === void 0) {
            return;
          }
          coercedValues.push(itemValue);
        }
      }
      return coercedValues;
    }
    const coercedValue = valueFromAST(valueNode, itemType, variables);
    if (coercedValue === void 0) {
      return;
    }
    return [coercedValue];
  }
  if (isInputObjectType(type3)) {
    if (valueNode.kind !== Kind.OBJECT) {
      return;
    }
    const coercedObj = /* @__PURE__ */ Object.create(null);
    const fieldNodes = keyMap(valueNode.fields, (field) => field.name.value);
    for (const field of Object.values(type3.getFields())) {
      const fieldNode = fieldNodes[field.name];
      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {
        if (field.defaultValue !== void 0) {
          coercedObj[field.name] = field.defaultValue;
        } else if (isNonNullType(field.type)) {
          return;
        }
        continue;
      }
      const fieldValue = valueFromAST(fieldNode.value, field.type, variables);
      if (fieldValue === void 0) {
        return;
      }
      coercedObj[field.name] = fieldValue;
    }
    if (type3.isOneOf) {
      const keys4 = Object.keys(coercedObj);
      if (keys4.length !== 1) {
        return;
      }
      if (coercedObj[keys4[0]] === null) {
        return;
      }
    }
    return coercedObj;
  }
  if (isLeafType(type3)) {
    let result;
    try {
      result = type3.parseLiteral(valueNode, variables);
    } catch (_error) {
      return;
    }
    if (result === void 0) {
      return;
    }
    return result;
  }
  invariant(false, "Unexpected input type: " + inspect(type3));
}
function isMissingVariable(valueNode, variables) {
  return valueNode.kind === Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === void 0);
}

// node_modules/graphql/execution/values.mjs
function getArgumentValues(def, node, variableValues) {
  var _node$arguments;
  const coercedValues = {};
  const argumentNodes = (_node$arguments = node.arguments) !== null && _node$arguments !== void 0 ? _node$arguments : [];
  const argNodeMap = keyMap(argumentNodes, (arg) => arg.name.value);
  for (const argDef of def.args) {
    const name = argDef.name;
    const argType = argDef.type;
    const argumentNode = argNodeMap[name];
    if (!argumentNode) {
      if (argDef.defaultValue !== void 0) {
        coercedValues[name] = argDef.defaultValue;
      } else if (isNonNullType(argType)) {
        throw new GraphQLError(
          `Argument "${name}" of required type "${inspect(argType)}" was not provided.`,
          {
            nodes: node
          }
        );
      }
      continue;
    }
    const valueNode = argumentNode.value;
    let isNull = valueNode.kind === Kind.NULL;
    if (valueNode.kind === Kind.VARIABLE) {
      const variableName = valueNode.name.value;
      if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {
        if (argDef.defaultValue !== void 0) {
          coercedValues[name] = argDef.defaultValue;
        } else if (isNonNullType(argType)) {
          throw new GraphQLError(
            `Argument "${name}" of required type "${inspect(argType)}" was provided the variable "$${variableName}" which was not provided a runtime value.`,
            {
              nodes: valueNode
            }
          );
        }
        continue;
      }
      isNull = variableValues[variableName] == null;
    }
    if (isNull && isNonNullType(argType)) {
      throw new GraphQLError(
        `Argument "${name}" of non-null type "${inspect(argType)}" must not be null.`,
        {
          nodes: valueNode
        }
      );
    }
    const coercedValue = valueFromAST(valueNode, argType, variableValues);
    if (coercedValue === void 0) {
      throw new GraphQLError(
        `Argument "${name}" has invalid value ${print(valueNode)}.`,
        {
          nodes: valueNode
        }
      );
    }
    coercedValues[name] = coercedValue;
  }
  return coercedValues;
}
function getDirectiveValues(directiveDef, node, variableValues) {
  var _node$directives;
  const directiveNode = (_node$directives = node.directives) === null || _node$directives === void 0 ? void 0 : _node$directives.find(
    (directive) => directive.name.value === directiveDef.name
  );
  if (directiveNode) {
    return getArgumentValues(directiveDef, directiveNode, variableValues);
  }
}
function hasOwnProperty(obj, prop3) {
  return Object.prototype.hasOwnProperty.call(obj, prop3);
}

// node_modules/graphql/execution/collectFields.mjs
function collectFields(schema, fragments, variableValues, runtimeType, selectionSet) {
  const fields = /* @__PURE__ */ new Map();
  collectFieldsImpl(
    schema,
    fragments,
    variableValues,
    runtimeType,
    selectionSet,
    fields,
    /* @__PURE__ */ new Set()
  );
  return fields;
}
function collectSubfields(schema, fragments, variableValues, returnType, fieldNodes) {
  const subFieldNodes = /* @__PURE__ */ new Map();
  const visitedFragmentNames = /* @__PURE__ */ new Set();
  for (const node of fieldNodes) {
    if (node.selectionSet) {
      collectFieldsImpl(
        schema,
        fragments,
        variableValues,
        returnType,
        node.selectionSet,
        subFieldNodes,
        visitedFragmentNames
      );
    }
  }
  return subFieldNodes;
}
function collectFieldsImpl(schema, fragments, variableValues, runtimeType, selectionSet, fields, visitedFragmentNames) {
  for (const selection of selectionSet.selections) {
    switch (selection.kind) {
      case Kind.FIELD: {
        if (!shouldIncludeNode(variableValues, selection)) {
          continue;
        }
        const name = getFieldEntryKey(selection);
        const fieldList = fields.get(name);
        if (fieldList !== void 0) {
          fieldList.push(selection);
        } else {
          fields.set(name, [selection]);
        }
        break;
      }
      case Kind.INLINE_FRAGMENT: {
        if (!shouldIncludeNode(variableValues, selection) || !doesFragmentConditionMatch(schema, selection, runtimeType)) {
          continue;
        }
        collectFieldsImpl(
          schema,
          fragments,
          variableValues,
          runtimeType,
          selection.selectionSet,
          fields,
          visitedFragmentNames
        );
        break;
      }
      case Kind.FRAGMENT_SPREAD: {
        const fragName = selection.name.value;
        if (visitedFragmentNames.has(fragName) || !shouldIncludeNode(variableValues, selection)) {
          continue;
        }
        visitedFragmentNames.add(fragName);
        const fragment = fragments[fragName];
        if (!fragment || !doesFragmentConditionMatch(schema, fragment, runtimeType)) {
          continue;
        }
        collectFieldsImpl(
          schema,
          fragments,
          variableValues,
          runtimeType,
          fragment.selectionSet,
          fields,
          visitedFragmentNames
        );
        break;
      }
    }
  }
}
function shouldIncludeNode(variableValues, node) {
  const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);
  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {
    return false;
  }
  const include = getDirectiveValues(
    GraphQLIncludeDirective,
    node,
    variableValues
  );
  if ((include === null || include === void 0 ? void 0 : include.if) === false) {
    return false;
  }
  return true;
}
function doesFragmentConditionMatch(schema, fragment, type3) {
  const typeConditionNode = fragment.typeCondition;
  if (!typeConditionNode) {
    return true;
  }
  const conditionalType = typeFromAST(schema, typeConditionNode);
  if (conditionalType === type3) {
    return true;
  }
  if (isAbstractType(conditionalType)) {
    return schema.isSubType(conditionalType, type3);
  }
  return false;
}
function getFieldEntryKey(node) {
  return node.alias ? node.alias.value : node.name.value;
}

// node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs
function SingleFieldSubscriptionsRule(context) {
  return {
    OperationDefinition(node) {
      if (node.operation === "subscription") {
        const schema = context.getSchema();
        const subscriptionType = schema.getSubscriptionType();
        if (subscriptionType) {
          const operationName = node.name ? node.name.value : null;
          const variableValues = /* @__PURE__ */ Object.create(null);
          const document2 = context.getDocument();
          const fragments = /* @__PURE__ */ Object.create(null);
          for (const definition of document2.definitions) {
            if (definition.kind === Kind.FRAGMENT_DEFINITION) {
              fragments[definition.name.value] = definition;
            }
          }
          const fields = collectFields(
            schema,
            fragments,
            variableValues,
            subscriptionType,
            node.selectionSet
          );
          if (fields.size > 1) {
            const fieldSelectionLists = [...fields.values()];
            const extraFieldSelectionLists = fieldSelectionLists.slice(1);
            const extraFieldSelections = extraFieldSelectionLists.flat();
            context.reportError(
              new GraphQLError(
                operationName != null ? `Subscription "${operationName}" must select only one top level field.` : "Anonymous Subscription must select only one top level field.",
                {
                  nodes: extraFieldSelections
                }
              )
            );
          }
          for (const fieldNodes of fields.values()) {
            const field = fieldNodes[0];
            const fieldName = field.name.value;
            if (fieldName.startsWith("__")) {
              context.reportError(
                new GraphQLError(
                  operationName != null ? `Subscription "${operationName}" must not select an introspection top level field.` : "Anonymous Subscription must not select an introspection top level field.",
                  {
                    nodes: fieldNodes
                  }
                )
              );
            }
          }
        }
      }
    }
  };
}

// node_modules/graphql/jsutils/groupBy.mjs
function groupBy2(list, keyFn) {
  const result = /* @__PURE__ */ new Map();
  for (const item of list) {
    const key = keyFn(item);
    const group = result.get(key);
    if (group === void 0) {
      result.set(key, [item]);
    } else {
      group.push(item);
    }
  }
  return result;
}

// node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.mjs
function UniqueArgumentDefinitionNamesRule(context) {
  return {
    DirectiveDefinition(directiveNode) {
      var _directiveNode$argume;
      const argumentNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];
      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);
    },
    InterfaceTypeDefinition: checkArgUniquenessPerField,
    InterfaceTypeExtension: checkArgUniquenessPerField,
    ObjectTypeDefinition: checkArgUniquenessPerField,
    ObjectTypeExtension: checkArgUniquenessPerField
  };
  function checkArgUniquenessPerField(typeNode) {
    var _typeNode$fields;
    const typeName = typeNode.name.value;
    const fieldNodes = (_typeNode$fields = typeNode.fields) !== null && _typeNode$fields !== void 0 ? _typeNode$fields : [];
    for (const fieldDef of fieldNodes) {
      var _fieldDef$arguments;
      const fieldName = fieldDef.name.value;
      const argumentNodes = (_fieldDef$arguments = fieldDef.arguments) !== null && _fieldDef$arguments !== void 0 ? _fieldDef$arguments : [];
      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);
    }
    return false;
  }
  function checkArgUniqueness(parentName, argumentNodes) {
    const seenArgs = groupBy2(argumentNodes, (arg) => arg.name.value);
    for (const [argName, argNodes] of seenArgs) {
      if (argNodes.length > 1) {
        context.reportError(
          new GraphQLError(
            `Argument "${parentName}(${argName}:)" can only be defined once.`,
            {
              nodes: argNodes.map((node) => node.name)
            }
          )
        );
      }
    }
    return false;
  }
}

// node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs
function UniqueArgumentNamesRule(context) {
  return {
    Field: checkArgUniqueness,
    Directive: checkArgUniqueness
  };
  function checkArgUniqueness(parentNode) {
    var _parentNode$arguments;
    const argumentNodes = (_parentNode$arguments = parentNode.arguments) !== null && _parentNode$arguments !== void 0 ? _parentNode$arguments : [];
    const seenArgs = groupBy2(argumentNodes, (arg) => arg.name.value);
    for (const [argName, argNodes] of seenArgs) {
      if (argNodes.length > 1) {
        context.reportError(
          new GraphQLError(
            `There can be only one argument named "${argName}".`,
            {
              nodes: argNodes.map((node) => node.name)
            }
          )
        );
      }
    }
  }
}

// node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs
function UniqueDirectiveNamesRule(context) {
  const knownDirectiveNames = /* @__PURE__ */ Object.create(null);
  const schema = context.getSchema();
  return {
    DirectiveDefinition(node) {
      const directiveName = node.name.value;
      if (schema !== null && schema !== void 0 && schema.getDirective(directiveName)) {
        context.reportError(
          new GraphQLError(
            `Directive "@${directiveName}" already exists in the schema. It cannot be redefined.`,
            {
              nodes: node.name
            }
          )
        );
        return;
      }
      if (knownDirectiveNames[directiveName]) {
        context.reportError(
          new GraphQLError(
            `There can be only one directive named "@${directiveName}".`,
            {
              nodes: [knownDirectiveNames[directiveName], node.name]
            }
          )
        );
      } else {
        knownDirectiveNames[directiveName] = node.name;
      }
      return false;
    }
  };
}

// node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs
function UniqueDirectivesPerLocationRule(context) {
  const uniqueDirectiveMap = /* @__PURE__ */ Object.create(null);
  const schema = context.getSchema();
  const definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;
  for (const directive of definedDirectives) {
    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;
  }
  const astDefinitions = context.getDocument().definitions;
  for (const def of astDefinitions) {
    if (def.kind === Kind.DIRECTIVE_DEFINITION) {
      uniqueDirectiveMap[def.name.value] = !def.repeatable;
    }
  }
  const schemaDirectives = /* @__PURE__ */ Object.create(null);
  const typeDirectivesMap = /* @__PURE__ */ Object.create(null);
  return {
    // Many different AST nodes may contain directives. Rather than listing
    // them all, just listen for entering any node, and check to see if it
    // defines any directives.
    enter(node) {
      if (!("directives" in node) || !node.directives) {
        return;
      }
      let seenDirectives;
      if (node.kind === Kind.SCHEMA_DEFINITION || node.kind === Kind.SCHEMA_EXTENSION) {
        seenDirectives = schemaDirectives;
      } else if (isTypeDefinitionNode(node) || isTypeExtensionNode(node)) {
        const typeName = node.name.value;
        seenDirectives = typeDirectivesMap[typeName];
        if (seenDirectives === void 0) {
          typeDirectivesMap[typeName] = seenDirectives = /* @__PURE__ */ Object.create(null);
        }
      } else {
        seenDirectives = /* @__PURE__ */ Object.create(null);
      }
      for (const directive of node.directives) {
        const directiveName = directive.name.value;
        if (uniqueDirectiveMap[directiveName]) {
          if (seenDirectives[directiveName]) {
            context.reportError(
              new GraphQLError(
                `The directive "@${directiveName}" can only be used once at this location.`,
                {
                  nodes: [seenDirectives[directiveName], directive]
                }
              )
            );
          } else {
            seenDirectives[directiveName] = directive;
          }
        }
      }
    }
  };
}

// node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs
function UniqueEnumValueNamesRule(context) {
  const schema = context.getSchema();
  const existingTypeMap = schema ? schema.getTypeMap() : /* @__PURE__ */ Object.create(null);
  const knownValueNames = /* @__PURE__ */ Object.create(null);
  return {
    EnumTypeDefinition: checkValueUniqueness,
    EnumTypeExtension: checkValueUniqueness
  };
  function checkValueUniqueness(node) {
    var _node$values;
    const typeName = node.name.value;
    if (!knownValueNames[typeName]) {
      knownValueNames[typeName] = /* @__PURE__ */ Object.create(null);
    }
    const valueNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];
    const valueNames = knownValueNames[typeName];
    for (const valueDef of valueNodes) {
      const valueName = valueDef.name.value;
      const existingType = existingTypeMap[typeName];
      if (isEnumType(existingType) && existingType.getValue(valueName)) {
        context.reportError(
          new GraphQLError(
            `Enum value "${typeName}.${valueName}" already exists in the schema. It cannot also be defined in this type extension.`,
            {
              nodes: valueDef.name
            }
          )
        );
      } else if (valueNames[valueName]) {
        context.reportError(
          new GraphQLError(
            `Enum value "${typeName}.${valueName}" can only be defined once.`,
            {
              nodes: [valueNames[valueName], valueDef.name]
            }
          )
        );
      } else {
        valueNames[valueName] = valueDef.name;
      }
    }
    return false;
  }
}

// node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs
function UniqueFieldDefinitionNamesRule(context) {
  const schema = context.getSchema();
  const existingTypeMap = schema ? schema.getTypeMap() : /* @__PURE__ */ Object.create(null);
  const knownFieldNames = /* @__PURE__ */ Object.create(null);
  return {
    InputObjectTypeDefinition: checkFieldUniqueness,
    InputObjectTypeExtension: checkFieldUniqueness,
    InterfaceTypeDefinition: checkFieldUniqueness,
    InterfaceTypeExtension: checkFieldUniqueness,
    ObjectTypeDefinition: checkFieldUniqueness,
    ObjectTypeExtension: checkFieldUniqueness
  };
  function checkFieldUniqueness(node) {
    var _node$fields;
    const typeName = node.name.value;
    if (!knownFieldNames[typeName]) {
      knownFieldNames[typeName] = /* @__PURE__ */ Object.create(null);
    }
    const fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];
    const fieldNames = knownFieldNames[typeName];
    for (const fieldDef of fieldNodes) {
      const fieldName = fieldDef.name.value;
      if (hasField(existingTypeMap[typeName], fieldName)) {
        context.reportError(
          new GraphQLError(
            `Field "${typeName}.${fieldName}" already exists in the schema. It cannot also be defined in this type extension.`,
            {
              nodes: fieldDef.name
            }
          )
        );
      } else if (fieldNames[fieldName]) {
        context.reportError(
          new GraphQLError(
            `Field "${typeName}.${fieldName}" can only be defined once.`,
            {
              nodes: [fieldNames[fieldName], fieldDef.name]
            }
          )
        );
      } else {
        fieldNames[fieldName] = fieldDef.name;
      }
    }
    return false;
  }
}
function hasField(type3, fieldName) {
  if (isObjectType(type3) || isInterfaceType(type3) || isInputObjectType(type3)) {
    return type3.getFields()[fieldName] != null;
  }
  return false;
}

// node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs
function UniqueFragmentNamesRule(context) {
  const knownFragmentNames = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: () => false,
    FragmentDefinition(node) {
      const fragmentName = node.name.value;
      if (knownFragmentNames[fragmentName]) {
        context.reportError(
          new GraphQLError(
            `There can be only one fragment named "${fragmentName}".`,
            {
              nodes: [knownFragmentNames[fragmentName], node.name]
            }
          )
        );
      } else {
        knownFragmentNames[fragmentName] = node.name;
      }
      return false;
    }
  };
}

// node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs
function UniqueInputFieldNamesRule(context) {
  const knownNameStack = [];
  let knownNames = /* @__PURE__ */ Object.create(null);
  return {
    ObjectValue: {
      enter() {
        knownNameStack.push(knownNames);
        knownNames = /* @__PURE__ */ Object.create(null);
      },
      leave() {
        const prevKnownNames = knownNameStack.pop();
        prevKnownNames || invariant(false);
        knownNames = prevKnownNames;
      }
    },
    ObjectField(node) {
      const fieldName = node.name.value;
      if (knownNames[fieldName]) {
        context.reportError(
          new GraphQLError(
            `There can be only one input field named "${fieldName}".`,
            {
              nodes: [knownNames[fieldName], node.name]
            }
          )
        );
      } else {
        knownNames[fieldName] = node.name;
      }
    }
  };
}

// node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs
function UniqueOperationNamesRule(context) {
  const knownOperationNames = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition(node) {
      const operationName = node.name;
      if (operationName) {
        if (knownOperationNames[operationName.value]) {
          context.reportError(
            new GraphQLError(
              `There can be only one operation named "${operationName.value}".`,
              {
                nodes: [
                  knownOperationNames[operationName.value],
                  operationName
                ]
              }
            )
          );
        } else {
          knownOperationNames[operationName.value] = operationName;
        }
      }
      return false;
    },
    FragmentDefinition: () => false
  };
}

// node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs
function UniqueOperationTypesRule(context) {
  const schema = context.getSchema();
  const definedOperationTypes = /* @__PURE__ */ Object.create(null);
  const existingOperationTypes = schema ? {
    query: schema.getQueryType(),
    mutation: schema.getMutationType(),
    subscription: schema.getSubscriptionType()
  } : {};
  return {
    SchemaDefinition: checkOperationTypes,
    SchemaExtension: checkOperationTypes
  };
  function checkOperationTypes(node) {
    var _node$operationTypes;
    const operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];
    for (const operationType of operationTypesNodes) {
      const operation = operationType.operation;
      const alreadyDefinedOperationType = definedOperationTypes[operation];
      if (existingOperationTypes[operation]) {
        context.reportError(
          new GraphQLError(
            `Type for ${operation} already defined in the schema. It cannot be redefined.`,
            {
              nodes: operationType
            }
          )
        );
      } else if (alreadyDefinedOperationType) {
        context.reportError(
          new GraphQLError(
            `There can be only one ${operation} type in schema.`,
            {
              nodes: [alreadyDefinedOperationType, operationType]
            }
          )
        );
      } else {
        definedOperationTypes[operation] = operationType;
      }
    }
    return false;
  }
}

// node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs
function UniqueTypeNamesRule(context) {
  const knownTypeNames = /* @__PURE__ */ Object.create(null);
  const schema = context.getSchema();
  return {
    ScalarTypeDefinition: checkTypeName,
    ObjectTypeDefinition: checkTypeName,
    InterfaceTypeDefinition: checkTypeName,
    UnionTypeDefinition: checkTypeName,
    EnumTypeDefinition: checkTypeName,
    InputObjectTypeDefinition: checkTypeName
  };
  function checkTypeName(node) {
    const typeName = node.name.value;
    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {
      context.reportError(
        new GraphQLError(
          `Type "${typeName}" already exists in the schema. It cannot also be defined in this type definition.`,
          {
            nodes: node.name
          }
        )
      );
      return;
    }
    if (knownTypeNames[typeName]) {
      context.reportError(
        new GraphQLError(`There can be only one type named "${typeName}".`, {
          nodes: [knownTypeNames[typeName], node.name]
        })
      );
    } else {
      knownTypeNames[typeName] = node.name;
    }
    return false;
  }
}

// node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs
function UniqueVariableNamesRule(context) {
  return {
    OperationDefinition(operationNode) {
      var _operationNode$variab;
      const variableDefinitions = (_operationNode$variab = operationNode.variableDefinitions) !== null && _operationNode$variab !== void 0 ? _operationNode$variab : [];
      const seenVariableDefinitions = groupBy2(
        variableDefinitions,
        (node) => node.variable.name.value
      );
      for (const [variableName, variableNodes] of seenVariableDefinitions) {
        if (variableNodes.length > 1) {
          context.reportError(
            new GraphQLError(
              `There can be only one variable named "$${variableName}".`,
              {
                nodes: variableNodes.map((node) => node.variable.name)
              }
            )
          );
        }
      }
    }
  };
}

// node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs
function ValuesOfCorrectTypeRule(context) {
  let variableDefinitions = {};
  return {
    OperationDefinition: {
      enter() {
        variableDefinitions = {};
      }
    },
    VariableDefinition(definition) {
      variableDefinitions[definition.variable.name.value] = definition;
    },
    ListValue(node) {
      const type3 = getNullableType(context.getParentInputType());
      if (!isListType(type3)) {
        isValidValueNode(context, node);
        return false;
      }
    },
    ObjectValue(node) {
      const type3 = getNamedType(context.getInputType());
      if (!isInputObjectType(type3)) {
        isValidValueNode(context, node);
        return false;
      }
      const fieldNodeMap = keyMap(node.fields, (field) => field.name.value);
      for (const fieldDef of Object.values(type3.getFields())) {
        const fieldNode = fieldNodeMap[fieldDef.name];
        if (!fieldNode && isRequiredInputField(fieldDef)) {
          const typeStr = inspect(fieldDef.type);
          context.reportError(
            new GraphQLError(
              `Field "${type3.name}.${fieldDef.name}" of required type "${typeStr}" was not provided.`,
              {
                nodes: node
              }
            )
          );
        }
      }
      if (type3.isOneOf) {
        validateOneOfInputObject(
          context,
          node,
          type3,
          fieldNodeMap,
          variableDefinitions
        );
      }
    },
    ObjectField(node) {
      const parentType = getNamedType(context.getParentInputType());
      const fieldType = context.getInputType();
      if (!fieldType && isInputObjectType(parentType)) {
        const suggestions = suggestionList(
          node.name.value,
          Object.keys(parentType.getFields())
        );
        context.reportError(
          new GraphQLError(
            `Field "${node.name.value}" is not defined by type "${parentType.name}".` + didYouMean(suggestions),
            {
              nodes: node
            }
          )
        );
      }
    },
    NullValue(node) {
      const type3 = context.getInputType();
      if (isNonNullType(type3)) {
        context.reportError(
          new GraphQLError(
            `Expected value of type "${inspect(type3)}", found ${print(node)}.`,
            {
              nodes: node
            }
          )
        );
      }
    },
    EnumValue: (node) => isValidValueNode(context, node),
    IntValue: (node) => isValidValueNode(context, node),
    FloatValue: (node) => isValidValueNode(context, node),
    StringValue: (node) => isValidValueNode(context, node),
    BooleanValue: (node) => isValidValueNode(context, node)
  };
}
function isValidValueNode(context, node) {
  const locationType = context.getInputType();
  if (!locationType) {
    return;
  }
  const type3 = getNamedType(locationType);
  if (!isLeafType(type3)) {
    const typeStr = inspect(locationType);
    context.reportError(
      new GraphQLError(
        `Expected value of type "${typeStr}", found ${print(node)}.`,
        {
          nodes: node
        }
      )
    );
    return;
  }
  try {
    const parseResult = type3.parseLiteral(
      node,
      void 0
      /* variables */
    );
    if (parseResult === void 0) {
      const typeStr = inspect(locationType);
      context.reportError(
        new GraphQLError(
          `Expected value of type "${typeStr}", found ${print(node)}.`,
          {
            nodes: node
          }
        )
      );
    }
  } catch (error) {
    const typeStr = inspect(locationType);
    if (error instanceof GraphQLError) {
      context.reportError(error);
    } else {
      context.reportError(
        new GraphQLError(
          `Expected value of type "${typeStr}", found ${print(node)}; ` + error.message,
          {
            nodes: node,
            originalError: error
          }
        )
      );
    }
  }
}
function validateOneOfInputObject(context, node, type3, fieldNodeMap, variableDefinitions) {
  var _fieldNodeMap$keys$;
  const keys4 = Object.keys(fieldNodeMap);
  const isNotExactlyOneField = keys4.length !== 1;
  if (isNotExactlyOneField) {
    context.reportError(
      new GraphQLError(
        `OneOf Input Object "${type3.name}" must specify exactly one key.`,
        {
          nodes: [node]
        }
      )
    );
    return;
  }
  const value = (_fieldNodeMap$keys$ = fieldNodeMap[keys4[0]]) === null || _fieldNodeMap$keys$ === void 0 ? void 0 : _fieldNodeMap$keys$.value;
  const isNullLiteral = !value || value.kind === Kind.NULL;
  const isVariable = (value === null || value === void 0 ? void 0 : value.kind) === Kind.VARIABLE;
  if (isNullLiteral) {
    context.reportError(
      new GraphQLError(`Field "${type3.name}.${keys4[0]}" must be non-null.`, {
        nodes: [node]
      })
    );
    return;
  }
  if (isVariable) {
    const variableName = value.name.value;
    const definition = variableDefinitions[variableName];
    const isNullableVariable = definition.type.kind !== Kind.NON_NULL_TYPE;
    if (isNullableVariable) {
      context.reportError(
        new GraphQLError(
          `Variable "${variableName}" must be non-nullable to be used for OneOf Input Object "${type3.name}".`,
          {
            nodes: [node]
          }
        )
      );
    }
  }
}

// node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs
function VariablesAreInputTypesRule(context) {
  return {
    VariableDefinition(node) {
      const type3 = typeFromAST(context.getSchema(), node.type);
      if (type3 !== void 0 && !isInputType(type3)) {
        const variableName = node.variable.name.value;
        const typeName = print(node.type);
        context.reportError(
          new GraphQLError(
            `Variable "$${variableName}" cannot be non-input type "${typeName}".`,
            {
              nodes: node.type
            }
          )
        );
      }
    }
  };
}

// node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs
function VariablesInAllowedPositionRule(context) {
  let varDefMap = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: {
      enter() {
        varDefMap = /* @__PURE__ */ Object.create(null);
      },
      leave(operation) {
        const usages = context.getRecursiveVariableUsages(operation);
        for (const { node, type: type3, defaultValue } of usages) {
          const varName = node.name.value;
          const varDef = varDefMap[varName];
          if (varDef && type3) {
            const schema = context.getSchema();
            const varType = typeFromAST(schema, varDef.type);
            if (varType && !allowedVariableUsage(
              schema,
              varType,
              varDef.defaultValue,
              type3,
              defaultValue
            )) {
              const varTypeStr = inspect(varType);
              const typeStr = inspect(type3);
              context.reportError(
                new GraphQLError(
                  `Variable "$${varName}" of type "${varTypeStr}" used in position expecting type "${typeStr}".`,
                  {
                    nodes: [varDef, node]
                  }
                )
              );
            }
          }
        }
      }
    },
    VariableDefinition(node) {
      varDefMap[node.variable.name.value] = node;
    }
  };
}
function allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {
  if (isNonNullType(locationType) && !isNonNullType(varType)) {
    const hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;
    const hasLocationDefaultValue = locationDefaultValue !== void 0;
    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {
      return false;
    }
    const nullableLocationType = locationType.ofType;
    return isTypeSubTypeOf(schema, varType, nullableLocationType);
  }
  return isTypeSubTypeOf(schema, varType, locationType);
}

// node_modules/graphql/validation/specifiedRules.mjs
var recommendedRules = Object.freeze([MaxIntrospectionDepthRule]);
var specifiedRules = Object.freeze([
  ExecutableDefinitionsRule,
  UniqueOperationNamesRule,
  LoneAnonymousOperationRule,
  SingleFieldSubscriptionsRule,
  KnownTypeNamesRule,
  FragmentsOnCompositeTypesRule,
  VariablesAreInputTypesRule,
  ScalarLeafsRule,
  FieldsOnCorrectTypeRule,
  UniqueFragmentNamesRule,
  KnownFragmentNamesRule,
  NoUnusedFragmentsRule,
  PossibleFragmentSpreadsRule,
  NoFragmentCyclesRule,
  UniqueVariableNamesRule,
  NoUndefinedVariablesRule,
  NoUnusedVariablesRule,
  KnownDirectivesRule,
  UniqueDirectivesPerLocationRule,
  KnownArgumentNamesRule,
  UniqueArgumentNamesRule,
  ValuesOfCorrectTypeRule,
  ProvidedRequiredArgumentsRule,
  VariablesInAllowedPositionRule,
  OverlappingFieldsCanBeMergedRule,
  UniqueInputFieldNamesRule,
  ...recommendedRules
]);
var specifiedSDLRules = Object.freeze([
  LoneSchemaDefinitionRule,
  UniqueOperationTypesRule,
  UniqueTypeNamesRule,
  UniqueEnumValueNamesRule,
  UniqueFieldDefinitionNamesRule,
  UniqueArgumentDefinitionNamesRule,
  UniqueDirectiveNamesRule,
  KnownTypeNamesRule,
  KnownDirectivesRule,
  UniqueDirectivesPerLocationRule,
  PossibleTypeExtensionsRule,
  KnownArgumentNamesOnDirectivesRule,
  UniqueArgumentNamesRule,
  UniqueInputFieldNamesRule,
  ProvidedRequiredArgumentsOnDirectivesRule
]);

// node_modules/graphql/jsutils/memoize3.mjs
function memoize3(fn) {
  let cache0;
  return function memoized2(a1, a2, a3) {
    if (cache0 === void 0) {
      cache0 = /* @__PURE__ */ new WeakMap();
    }
    let cache1 = cache0.get(a1);
    if (cache1 === void 0) {
      cache1 = /* @__PURE__ */ new WeakMap();
      cache0.set(a1, cache1);
    }
    let cache2 = cache1.get(a2);
    if (cache2 === void 0) {
      cache2 = /* @__PURE__ */ new WeakMap();
      cache1.set(a2, cache2);
    }
    let fnResult = cache2.get(a3);
    if (fnResult === void 0) {
      fnResult = fn(a1, a2, a3);
      cache2.set(a3, fnResult);
    }
    return fnResult;
  };
}

// node_modules/graphql/execution/execute.mjs
var collectSubfields2 = memoize3(
  (exeContext, returnType, fieldNodes) => collectSubfields(
    exeContext.schema,
    exeContext.fragments,
    exeContext.variableValues,
    returnType,
    fieldNodes
  )
);

// node_modules/graphql/utilities/extendSchema.mjs
var stdTypeMap = keyMap(
  [...specifiedScalarTypes, ...introspectionTypes],
  (type3) => type3.name
);

// node_modules/graphql/utilities/findBreakingChanges.mjs
var BreakingChangeType;
(function(BreakingChangeType2) {
  BreakingChangeType2["TYPE_REMOVED"] = "TYPE_REMOVED";
  BreakingChangeType2["TYPE_CHANGED_KIND"] = "TYPE_CHANGED_KIND";
  BreakingChangeType2["TYPE_REMOVED_FROM_UNION"] = "TYPE_REMOVED_FROM_UNION";
  BreakingChangeType2["VALUE_REMOVED_FROM_ENUM"] = "VALUE_REMOVED_FROM_ENUM";
  BreakingChangeType2["REQUIRED_INPUT_FIELD_ADDED"] = "REQUIRED_INPUT_FIELD_ADDED";
  BreakingChangeType2["IMPLEMENTED_INTERFACE_REMOVED"] = "IMPLEMENTED_INTERFACE_REMOVED";
  BreakingChangeType2["FIELD_REMOVED"] = "FIELD_REMOVED";
  BreakingChangeType2["FIELD_CHANGED_KIND"] = "FIELD_CHANGED_KIND";
  BreakingChangeType2["REQUIRED_ARG_ADDED"] = "REQUIRED_ARG_ADDED";
  BreakingChangeType2["ARG_REMOVED"] = "ARG_REMOVED";
  BreakingChangeType2["ARG_CHANGED_KIND"] = "ARG_CHANGED_KIND";
  BreakingChangeType2["DIRECTIVE_REMOVED"] = "DIRECTIVE_REMOVED";
  BreakingChangeType2["DIRECTIVE_ARG_REMOVED"] = "DIRECTIVE_ARG_REMOVED";
  BreakingChangeType2["REQUIRED_DIRECTIVE_ARG_ADDED"] = "REQUIRED_DIRECTIVE_ARG_ADDED";
  BreakingChangeType2["DIRECTIVE_REPEATABLE_REMOVED"] = "DIRECTIVE_REPEATABLE_REMOVED";
  BreakingChangeType2["DIRECTIVE_LOCATION_REMOVED"] = "DIRECTIVE_LOCATION_REMOVED";
})(BreakingChangeType || (BreakingChangeType = {}));
var DangerousChangeType;
(function(DangerousChangeType2) {
  DangerousChangeType2["VALUE_ADDED_TO_ENUM"] = "VALUE_ADDED_TO_ENUM";
  DangerousChangeType2["TYPE_ADDED_TO_UNION"] = "TYPE_ADDED_TO_UNION";
  DangerousChangeType2["OPTIONAL_INPUT_FIELD_ADDED"] = "OPTIONAL_INPUT_FIELD_ADDED";
  DangerousChangeType2["OPTIONAL_ARG_ADDED"] = "OPTIONAL_ARG_ADDED";
  DangerousChangeType2["IMPLEMENTED_INTERFACE_ADDED"] = "IMPLEMENTED_INTERFACE_ADDED";
  DangerousChangeType2["ARG_DEFAULT_VALUE_CHANGE"] = "ARG_DEFAULT_VALUE_CHANGE";
})(DangerousChangeType || (DangerousChangeType = {}));

// node_modules/graphql-request/build/esm/resolveRequestDocument.js
var extractOperationName = (document2) => {
  var _a103, _b2;
  let operationName = void 0;
  const operationDefinitions = document2.definitions.filter((definition) => definition.kind === `OperationDefinition`);
  if (operationDefinitions.length === 1) {
    operationName = (_b2 = (_a103 = operationDefinitions[0]) == null ? void 0 : _a103.name) == null ? void 0 : _b2.value;
  }
  return operationName;
};
var resolveRequestDocument = (document2) => {
  if (typeof document2 === `string`) {
    let operationName2 = void 0;
    try {
      const parsedDocument = parse(document2);
      operationName2 = extractOperationName(parsedDocument);
    } catch (err2) {
    }
    return { query: document2, operationName: operationName2 };
  }
  const operationName = extractOperationName(document2);
  return { query: print(document2), operationName };
};

// node_modules/graphql-request/build/esm/types.js
var ClientError = class _ClientError extends Error {
  constructor(response, request2) {
    const message = `${_ClientError.extractMessage(response)}: ${JSON.stringify({
      response,
      request: request2
    })}`;
    super(message);
    Object.setPrototypeOf(this, _ClientError.prototype);
    this.response = response;
    this.request = request2;
    if (typeof Error.captureStackTrace === `function`) {
      Error.captureStackTrace(this, _ClientError);
    }
  }
  static extractMessage(response) {
    var _a103, _b2;
    return ((_b2 = (_a103 = response.errors) == null ? void 0 : _a103[0]) == null ? void 0 : _b2.message) ?? `GraphQL Error (Code: ${response.status})`;
  }
};

// node_modules/graphql-request/build/esm/index.js
var CrossFetch = __toESM(require_browser_ponyfill());

// node_modules/graphql-request/build/esm/graphql-ws.js
var CONNECTION_INIT = `connection_init`;
var CONNECTION_ACK = `connection_ack`;
var PING = `ping`;
var PONG = `pong`;
var SUBSCRIBE = `subscribe`;
var NEXT = `next`;
var ERROR = `error`;
var COMPLETE = `complete`;
var GraphQLWebSocketMessage = class _GraphQLWebSocketMessage {
  get type() {
    return this._type;
  }
  get id() {
    return this._id;
  }
  get payload() {
    return this._payload;
  }
  constructor(type3, payload, id) {
    this._type = type3;
    this._payload = payload;
    this._id = id;
  }
  get text() {
    const result = { type: this.type };
    if (this.id != null && this.id != void 0)
      result.id = this.id;
    if (this.payload != null && this.payload != void 0)
      result.payload = this.payload;
    return JSON.stringify(result);
  }
  static parse(data, f2) {
    const { type: type3, payload, id } = JSON.parse(data);
    return new _GraphQLWebSocketMessage(type3, f2(payload), id);
  }
};
var GraphQLWebSocketClient = class {
  constructor(socket, { onInit, onAcknowledged, onPing, onPong }) {
    this.socketState = { acknowledged: false, lastRequestId: 0, subscriptions: {} };
    this.socket = socket;
    socket.addEventListener(`open`, async (e) => {
      this.socketState.acknowledged = false;
      this.socketState.subscriptions = {};
      socket.send(ConnectionInit(onInit ? await onInit() : null).text);
    });
    socket.addEventListener(`close`, (e) => {
      this.socketState.acknowledged = false;
      this.socketState.subscriptions = {};
    });
    socket.addEventListener(`error`, (e) => {
      console.error(e);
    });
    socket.addEventListener(`message`, (e) => {
      try {
        const message = parseMessage(e.data);
        switch (message.type) {
          case CONNECTION_ACK: {
            if (this.socketState.acknowledged) {
              console.warn(`Duplicate CONNECTION_ACK message ignored`);
            } else {
              this.socketState.acknowledged = true;
              if (onAcknowledged)
                onAcknowledged(message.payload);
            }
            return;
          }
          case PING: {
            if (onPing)
              onPing(message.payload).then((r) => socket.send(Pong(r).text));
            else
              socket.send(Pong(null).text);
            return;
          }
          case PONG: {
            if (onPong)
              onPong(message.payload);
            return;
          }
        }
        if (!this.socketState.acknowledged) {
          return;
        }
        if (message.id === void 0 || message.id === null || !this.socketState.subscriptions[message.id]) {
          return;
        }
        const { query, variables, subscriber } = this.socketState.subscriptions[message.id];
        switch (message.type) {
          case NEXT: {
            if (!message.payload.errors && message.payload.data) {
              subscriber.next && subscriber.next(message.payload.data);
            }
            if (message.payload.errors) {
              subscriber.error && subscriber.error(new ClientError({ ...message.payload, status: 200 }, { query, variables }));
            } else {
            }
            return;
          }
          case ERROR: {
            subscriber.error && subscriber.error(new ClientError({ errors: message.payload, status: 200 }, { query, variables }));
            return;
          }
          case COMPLETE: {
            subscriber.complete && subscriber.complete();
            delete this.socketState.subscriptions[message.id];
            return;
          }
        }
      } catch (e2) {
        console.error(e2);
        socket.close(1006);
      }
      socket.close(4400, `Unknown graphql-ws message.`);
    });
  }
  makeSubscribe(query, operationName, subscriber, variables) {
    const subscriptionId = (this.socketState.lastRequestId++).toString();
    this.socketState.subscriptions[subscriptionId] = { query, variables, subscriber };
    this.socket.send(Subscribe(subscriptionId, { query, operationName, variables }).text);
    return () => {
      this.socket.send(Complete(subscriptionId).text);
      delete this.socketState.subscriptions[subscriptionId];
    };
  }
  rawRequest(query, variables) {
    return new Promise((resolve, reject3) => {
      let result;
      this.rawSubscribe(query, {
        next: (data, extensions) => result = { data, extensions },
        error: reject3,
        complete: () => resolve(result)
      }, variables);
    });
  }
  request(document2, variables) {
    return new Promise((resolve, reject3) => {
      let result;
      this.subscribe(document2, {
        next: (data) => result = data,
        error: reject3,
        complete: () => resolve(result)
      }, variables);
    });
  }
  subscribe(document2, subscriber, variables) {
    const { query, operationName } = resolveRequestDocument(document2);
    return this.makeSubscribe(query, operationName, subscriber, variables);
  }
  rawSubscribe(query, subscriber, variables) {
    return this.makeSubscribe(query, void 0, subscriber, variables);
  }
  ping(payload) {
    this.socket.send(Ping(payload).text);
  }
  close() {
    this.socket.close(1e3);
  }
};
GraphQLWebSocketClient.PROTOCOL = `graphql-transport-ws`;
function parseMessage(data, f2 = (a) => a) {
  const m = GraphQLWebSocketMessage.parse(data, f2);
  return m;
}
function ConnectionInit(payload) {
  return new GraphQLWebSocketMessage(CONNECTION_INIT, payload);
}
function Ping(payload) {
  return new GraphQLWebSocketMessage(PING, payload, void 0);
}
function Pong(payload) {
  return new GraphQLWebSocketMessage(PONG, payload, void 0);
}
function Subscribe(id, payload) {
  return new GraphQLWebSocketMessage(SUBSCRIBE, payload, id);
}
function Complete(id) {
  return new GraphQLWebSocketMessage(COMPLETE, void 0, id);
}

// node_modules/graphql-request/build/esm/index.js
var resolveHeaders = (headers) => {
  let oHeaders = {};
  if (headers) {
    if (typeof Headers !== `undefined` && headers instanceof Headers || CrossFetch && CrossFetch.Headers && headers instanceof CrossFetch.Headers) {
      oHeaders = HeadersInstanceToPlainObject(headers);
    } else if (Array.isArray(headers)) {
      headers.forEach(([name, value]) => {
        if (name && value !== void 0) {
          oHeaders[name] = value;
        }
      });
    } else {
      oHeaders = headers;
    }
  }
  return oHeaders;
};
var cleanQuery = (str) => str.replace(/([\s,]|#[^\n\r]+)+/g, ` `).trim();
var buildRequestConfig = (params) => {
  if (!Array.isArray(params.query)) {
    const params_2 = params;
    const search = [`query=${encodeURIComponent(cleanQuery(params_2.query))}`];
    if (params.variables) {
      search.push(`variables=${encodeURIComponent(params_2.jsonSerializer.stringify(params_2.variables))}`);
    }
    if (params_2.operationName) {
      search.push(`operationName=${encodeURIComponent(params_2.operationName)}`);
    }
    return search.join(`&`);
  }
  if (typeof params.variables !== `undefined` && !Array.isArray(params.variables)) {
    throw new Error(`Cannot create query with given variable type, array expected`);
  }
  const params_ = params;
  const payload = params.query.reduce((acc, currentQuery, index) => {
    acc.push({
      query: cleanQuery(currentQuery),
      variables: params_.variables ? params_.jsonSerializer.stringify(params_.variables[index]) : void 0
    });
    return acc;
  }, []);
  return `query=${encodeURIComponent(params_.jsonSerializer.stringify(payload))}`;
};
var createHttpMethodFetcher = (method) => async (params) => {
  const { url, query, variables, operationName, fetch: fetch2, fetchOptions, middleware } = params;
  const headers = { ...params.headers };
  let queryParams = ``;
  let body = void 0;
  if (method === `POST`) {
    body = createRequestBody(query, variables, operationName, fetchOptions.jsonSerializer);
    if (typeof body === `string`) {
      headers[`Content-Type`] = `application/json`;
    }
  } else {
    queryParams = buildRequestConfig({
      query,
      variables,
      operationName,
      jsonSerializer: fetchOptions.jsonSerializer ?? defaultJsonSerializer
    });
  }
  const init2 = {
    method,
    headers,
    body,
    ...fetchOptions
  };
  let urlResolved = url;
  let initResolved = init2;
  if (middleware) {
    const result = await Promise.resolve(middleware({ ...init2, url, operationName, variables }));
    const { url: urlNew, ...initNew } = result;
    urlResolved = urlNew;
    initResolved = initNew;
  }
  if (queryParams) {
    urlResolved = `${urlResolved}?${queryParams}`;
  }
  return await fetch2(urlResolved, initResolved);
};
var GraphQLClient = class {
  constructor(url, requestConfig = {}) {
    this.url = url;
    this.requestConfig = requestConfig;
    this.rawRequest = async (...args) => {
      const [queryOrOptions, variables, requestHeaders] = args;
      const rawRequestOptions = parseRawRequestArgs(queryOrOptions, variables, requestHeaders);
      const { headers, fetch: fetch2 = CrossFetch.default, method = `POST`, requestMiddleware, responseMiddleware, ...fetchOptions } = this.requestConfig;
      const { url: url2 } = this;
      if (rawRequestOptions.signal !== void 0) {
        fetchOptions.signal = rawRequestOptions.signal;
      }
      const { operationName } = resolveRequestDocument(rawRequestOptions.query);
      return makeRequest({
        url: url2,
        query: rawRequestOptions.query,
        variables: rawRequestOptions.variables,
        headers: {
          ...resolveHeaders(callOrIdentity(headers)),
          ...resolveHeaders(rawRequestOptions.requestHeaders)
        },
        operationName,
        fetch: fetch2,
        method,
        fetchOptions,
        middleware: requestMiddleware
      }).then((response) => {
        if (responseMiddleware) {
          responseMiddleware(response);
        }
        return response;
      }).catch((error) => {
        if (responseMiddleware) {
          responseMiddleware(error);
        }
        throw error;
      });
    };
  }
  async request(documentOrOptions, ...variablesAndRequestHeaders) {
    const [variables, requestHeaders] = variablesAndRequestHeaders;
    const requestOptions = parseRequestArgs(documentOrOptions, variables, requestHeaders);
    const { headers, fetch: fetch2 = CrossFetch.default, method = `POST`, requestMiddleware, responseMiddleware, ...fetchOptions } = this.requestConfig;
    const { url } = this;
    if (requestOptions.signal !== void 0) {
      fetchOptions.signal = requestOptions.signal;
    }
    const { query, operationName } = resolveRequestDocument(requestOptions.document);
    return makeRequest({
      url,
      query,
      variables: requestOptions.variables,
      headers: {
        ...resolveHeaders(callOrIdentity(headers)),
        ...resolveHeaders(requestOptions.requestHeaders)
      },
      operationName,
      fetch: fetch2,
      method,
      fetchOptions,
      middleware: requestMiddleware
    }).then((response) => {
      if (responseMiddleware) {
        responseMiddleware(response);
      }
      return response.data;
    }).catch((error) => {
      if (responseMiddleware) {
        responseMiddleware(error);
      }
      throw error;
    });
  }
  // prettier-ignore
  batchRequests(documentsOrOptions, requestHeaders) {
    const batchRequestOptions = parseBatchRequestArgs(documentsOrOptions, requestHeaders);
    const { headers, ...fetchOptions } = this.requestConfig;
    if (batchRequestOptions.signal !== void 0) {
      fetchOptions.signal = batchRequestOptions.signal;
    }
    const queries = batchRequestOptions.documents.map(({ document: document2 }) => resolveRequestDocument(document2).query);
    const variables = batchRequestOptions.documents.map(({ variables: variables2 }) => variables2);
    return makeRequest({
      url: this.url,
      query: queries,
      // @ts-expect-error TODO reconcile batch variables into system.
      variables,
      headers: {
        ...resolveHeaders(callOrIdentity(headers)),
        ...resolveHeaders(batchRequestOptions.requestHeaders)
      },
      operationName: void 0,
      fetch: this.requestConfig.fetch ?? CrossFetch.default,
      method: this.requestConfig.method || `POST`,
      fetchOptions,
      middleware: this.requestConfig.requestMiddleware
    }).then((response) => {
      if (this.requestConfig.responseMiddleware) {
        this.requestConfig.responseMiddleware(response);
      }
      return response.data;
    }).catch((error) => {
      if (this.requestConfig.responseMiddleware) {
        this.requestConfig.responseMiddleware(error);
      }
      throw error;
    });
  }
  setHeaders(headers) {
    this.requestConfig.headers = headers;
    return this;
  }
  /**
   * Attach a header to the client. All subsequent requests will have this header.
   */
  setHeader(key, value) {
    const { headers } = this.requestConfig;
    if (headers) {
      headers[key] = value;
    } else {
      this.requestConfig.headers = { [key]: value };
    }
    return this;
  }
  /**
   * Change the client endpoint. All subsequent requests will send to this endpoint.
   */
  setEndpoint(value) {
    this.url = value;
    return this;
  }
};
var makeRequest = async (params) => {
  const { query, variables, fetchOptions } = params;
  const fetcher = createHttpMethodFetcher(uppercase(params.method ?? `post`));
  const isBatchingQuery = Array.isArray(params.query);
  const response = await fetcher(params);
  const result = await getResult(response, fetchOptions.jsonSerializer ?? defaultJsonSerializer);
  const successfullyReceivedData = Array.isArray(result) ? !result.some(({ data }) => !data) : Boolean(result.data);
  const successfullyPassedErrorPolicy = Array.isArray(result) || !result.errors || Array.isArray(result.errors) && !result.errors.length || fetchOptions.errorPolicy === `all` || fetchOptions.errorPolicy === `ignore`;
  if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {
    const { errors: _, ...rest } = Array.isArray(result) ? result : result;
    const data = fetchOptions.errorPolicy === `ignore` ? rest : result;
    const dataEnvelope = isBatchingQuery ? { data } : data;
    return {
      ...dataEnvelope,
      headers: response.headers,
      status: response.status
    };
  } else {
    const errorResult = typeof result === `string` ? {
      error: result
    } : result;
    throw new ClientError(
      // @ts-expect-error TODO
      { ...errorResult, status: response.status, headers: response.headers },
      { query, variables }
    );
  }
};
var createRequestBody = (query, variables, operationName, jsonSerializer) => {
  const jsonSerializer_ = jsonSerializer ?? defaultJsonSerializer;
  if (!Array.isArray(query)) {
    return jsonSerializer_.stringify({ query, variables, operationName });
  }
  if (typeof variables !== `undefined` && !Array.isArray(variables)) {
    throw new Error(`Cannot create request body with given variable type, array expected`);
  }
  const payload = query.reduce((acc, currentQuery, index) => {
    acc.push({ query: currentQuery, variables: variables ? variables[index] : void 0 });
    return acc;
  }, []);
  return jsonSerializer_.stringify(payload);
};
var getResult = async (response, jsonSerializer) => {
  let contentType;
  response.headers.forEach((value, key) => {
    if (key.toLowerCase() === `content-type`) {
      contentType = value;
    }
  });
  if (contentType && (contentType.toLowerCase().startsWith(`application/json`) || contentType.toLowerCase().startsWith(`application/graphql+json`) || contentType.toLowerCase().startsWith(`application/graphql-response+json`))) {
    return jsonSerializer.parse(await response.text());
  } else {
    return response.text();
  }
};
var callOrIdentity = (value) => {
  return typeof value === `function` ? value() : value;
};

// node_modules/graphql-tag/node_modules/tslib/tslib.es6.mjs
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};

// node_modules/graphql-tag/lib/index.js
var docCache = /* @__PURE__ */ new Map();
var fragmentSourceMap = /* @__PURE__ */ new Map();
var printFragmentWarnings = true;
var experimentalFragmentVariables = false;
function normalize(string) {
  return string.replace(/[\s,]+/g, " ").trim();
}
function cacheKeyFromLoc(loc) {
  return normalize(loc.source.body.substring(loc.start, loc.end));
}
function processFragments(ast) {
  var seenKeys = /* @__PURE__ */ new Set();
  var definitions = [];
  ast.definitions.forEach(function(fragmentDefinition) {
    if (fragmentDefinition.kind === "FragmentDefinition") {
      var fragmentName = fragmentDefinition.name.value;
      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);
      var sourceKeySet = fragmentSourceMap.get(fragmentName);
      if (sourceKeySet && !sourceKeySet.has(sourceKey)) {
        if (printFragmentWarnings) {
          console.warn("Warning: fragment with name " + fragmentName + " already exists.\ngraphql-tag enforces all fragment names across your application to be unique; read more about\nthis in the docs: http://dev.apollodata.com/core/fragments.html#unique-names");
        }
      } else if (!sourceKeySet) {
        fragmentSourceMap.set(fragmentName, sourceKeySet = /* @__PURE__ */ new Set());
      }
      sourceKeySet.add(sourceKey);
      if (!seenKeys.has(sourceKey)) {
        seenKeys.add(sourceKey);
        definitions.push(fragmentDefinition);
      }
    } else {
      definitions.push(fragmentDefinition);
    }
  });
  return __assign(__assign({}, ast), { definitions });
}
function stripLoc(doc) {
  var workSet = new Set(doc.definitions);
  workSet.forEach(function(node) {
    if (node.loc)
      delete node.loc;
    Object.keys(node).forEach(function(key) {
      var value = node[key];
      if (value && typeof value === "object") {
        workSet.add(value);
      }
    });
  });
  var loc = doc.loc;
  if (loc) {
    delete loc.startToken;
    delete loc.endToken;
  }
  return doc;
}
function parseDocument(source) {
  var cacheKey = normalize(source);
  if (!docCache.has(cacheKey)) {
    var parsed = parse(source, {
      experimentalFragmentVariables,
      allowLegacyFragmentVariables: experimentalFragmentVariables
    });
    if (!parsed || parsed.kind !== "Document") {
      throw new Error("Not a valid GraphQL document.");
    }
    docCache.set(cacheKey, stripLoc(processFragments(parsed)));
  }
  return docCache.get(cacheKey);
}
function gql(literals) {
  var args = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }
  if (typeof literals === "string") {
    literals = [literals];
  }
  var result = literals[0];
  args.forEach(function(arg, i) {
    if (arg && arg.kind === "Document") {
      result += arg.loc.source.body;
    } else {
      result += arg;
    }
    result += literals[i + 1];
  });
  return parseDocument(result);
}
function resetCaches() {
  docCache.clear();
  fragmentSourceMap.clear();
}
function disableFragmentWarnings() {
  printFragmentWarnings = false;
}
function enableExperimentalFragmentVariables() {
  experimentalFragmentVariables = true;
}
function disableExperimentalFragmentVariables() {
  experimentalFragmentVariables = false;
}
var extras = {
  gql,
  resetCaches,
  disableFragmentWarnings,
  enableExperimentalFragmentVariables,
  disableExperimentalFragmentVariables
};
(function(gql_1) {
  gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;
})(gql || (gql = {}));
gql["default"] = gql;
var lib_default = gql;

// node_modules/@fuel-ts/address/dist/configs.mjs
var ZeroBytes32 = "0x0000000000000000000000000000000000000000000000000000000000000000";
var EmptyRoot = "0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";

// node_modules/@fuel-ts/transactions/dist/configs.mjs
var CONTRACT_MAX_SIZE = 16 * 1024;
var MAX_WITNESSES = 16;
var MAX_SCRIPT_LENGTH = 1024 * 1024 * 1024;
var MAX_SCRIPT_DATA_LENGTH = 1024 * 1024 * 1024;
var MAX_STATIC_CONTRACTS = 255;
var MAX_PREDICATE_LENGTH = 1024 * 1024;
var MAX_PREDICATE_DATA_LENGTH = 1024 * 1024;
var FAILED_REQUIRE_SIGNAL = "0xffffffffffff0000";
var FAILED_TRANSFER_TO_ADDRESS_SIGNAL = "0xffffffffffff0001";
var FAILED_ASSERT_EQ_SIGNAL = "0xffffffffffff0003";
var FAILED_ASSERT_SIGNAL = "0xffffffffffff0004";
var FAILED_ASSERT_NE_SIGNAL = "0xffffffffffff0005";
var FAILED_UNKNOWN_SIGNAL = "0x0";
var PANIC_REASONS = [
  "ArithmeticError",
  "ArithmeticOverflow",
  "AssetIdNotFound",
  "BalanceOverflow",
  "BlobIdAlreadyUploaded",
  "BlobNotFound",
  "BytecodeAlreadyUploaded",
  "ContractIdAlreadyDeployed",
  "ContractInstructionNotAllowed",
  "ContractMaxSize",
  "ContractMismatch",
  "ContractNotFound",
  "ContractNotInInputs",
  "EcalError",
  "ExpectedCoinInput",
  "ExpectedInternalContext",
  "ExpectedNestedCaller",
  "ExpectedOutputVariable",
  "ExpectedParentInternalContext",
  "ExpectedUnallocatedStack",
  "GasCostNotDefined",
  "InputContractDoesNotExist",
  "InputNotFound",
  "InternalBalanceOverflow",
  "InvalidBlockHeight",
  "InvalidEllipticCurvePoint",
  "InvalidFlags",
  "InvalidImmediateValue",
  "InvalidInstruction",
  "InvalidMetadataIdentifier",
  "MalformedCallStructure",
  "MaxStaticContractsReached",
  "MemoryGrowthOverlap",
  "MemoryNotExecutable",
  "MemoryOverflow",
  "MemoryOwnership",
  "MemoryWriteOverlap",
  "MessageDataTooLong",
  "NotEnoughBalance",
  "OutOfGas",
  "OutputNotFound",
  "OverridingConsensusParameters",
  "OverridingStateTransactionBytecode",
  "PolicyIsNotSet",
  "PolicyNotFound",
  "PredicateReturnedNonOne",
  "ReservedRegisterNotWritable",
  "Revert",
  "ThePartIsNotSequentiallyConnected",
  "TooManyReceipts",
  "TooManySlots",
  "TransactionMaturity",
  "TransactionValidity",
  "TransferAmountCannotBeZero",
  "TransferZeroCoins",
  "UninitalizedMemoryAccess",
  "UnknownPanicReason",
  "UnknownStateTransactionBytecodeRoot",
  "UnsupportedCurveId",
  "UnsupportedOperationType",
  "WitnessNotFound"
];
var PANIC_DOC_URL = "https://docs.rs/fuel-asm/latest/fuel_asm/enum.PanicReason.html";

// node_modules/@fuels/vm-asm/dist/web/index.mjs
var web_exports = {};
__export(web_exports, {
  ADD: () => ADD,
  ADDI: () => ADDI,
  ALOC: () => ALOC,
  AND: () => AND,
  ANDI: () => ANDI,
  BAL: () => BAL,
  BHEI: () => BHEI,
  BHSH: () => BHSH,
  BLDD: () => BLDD,
  BSIZ: () => BSIZ,
  BURN: () => BURN,
  CALL: () => CALL,
  CB: () => CB,
  CCP: () => CCP,
  CFE: () => CFE,
  CFEI: () => CFEI,
  CFS: () => CFS,
  CFSI: () => CFSI,
  CROO: () => CROO,
  CSIZ: () => CSIZ,
  CompareArgs: () => CompareArgs,
  CompareMode: () => CompareMode,
  DIV: () => DIV,
  DIVI: () => DIVI,
  DivArgs: () => DivArgs,
  ECAL: () => ECAL,
  ECK1: () => ECK1,
  ECOP: () => ECOP,
  ECR1: () => ECR1,
  ED19: () => ED19,
  EPAR: () => EPAR,
  EQ: () => EQ,
  EXP: () => EXP,
  EXPI: () => EXPI,
  FLAG: () => FLAG,
  GM: () => GM,
  GMArgs: () => GMArgs,
  GT: () => GT,
  GTF: () => GTF,
  GTFArgs: () => GTFArgs,
  Imm06: () => Imm06,
  Imm12: () => Imm12,
  Imm18: () => Imm18,
  Imm24: () => Imm24,
  Instruction: () => Instruction,
  JI: () => JI,
  JMP: () => JMP,
  JMPB: () => JMPB,
  JMPF: () => JMPF,
  JNE: () => JNE,
  JNEB: () => JNEB,
  JNEF: () => JNEF,
  JNEI: () => JNEI,
  JNZB: () => JNZB,
  JNZF: () => JNZF,
  JNZI: () => JNZI,
  K256: () => K256,
  LB: () => LB,
  LDC: () => LDC,
  LOG: () => LOG,
  LOGD: () => LOGD,
  LT: () => LT,
  LW: () => LW,
  MCL: () => MCL,
  MCLI: () => MCLI,
  MCP: () => MCP,
  MCPI: () => MCPI,
  MEQ: () => MEQ,
  MINT: () => MINT,
  MLDV: () => MLDV,
  MLOG: () => MLOG,
  MOD: () => MOD,
  MODI: () => MODI,
  MOVE: () => MOVE,
  MOVI: () => MOVI,
  MROO: () => MROO,
  MUL: () => MUL,
  MULI: () => MULI,
  MathArgs: () => MathArgs,
  MathOp: () => MathOp,
  MulArgs: () => MulArgs,
  NOOP: () => NOOP,
  NOT: () => NOT,
  OR: () => OR,
  ORI: () => ORI,
  POPH: () => POPH,
  POPL: () => POPL,
  PSHH: () => PSHH,
  PSHL: () => PSHL,
  PanicInstruction: () => PanicInstruction,
  PanicReason: () => PanicReason,
  RET: () => RET,
  RETD: () => RETD,
  RVRT: () => RVRT,
  RegId: () => RegId,
  S256: () => S256,
  SB: () => SB,
  SCWQ: () => SCWQ,
  SLL: () => SLL,
  SLLI: () => SLLI,
  SMO: () => SMO,
  SRL: () => SRL,
  SRLI: () => SRLI,
  SRW: () => SRW,
  SRWQ: () => SRWQ,
  SUB: () => SUB,
  SUBI: () => SUBI,
  SW: () => SW,
  SWW: () => SWW,
  SWWQ: () => SWWQ,
  TIME: () => TIME,
  TR: () => TR,
  TRO: () => TRO,
  WDAM: () => WDAM,
  WDCM: () => WDCM,
  WDDV: () => WDDV,
  WDMD: () => WDMD,
  WDML: () => WDML,
  WDMM: () => WDMM,
  WDOP: () => WDOP,
  WQAM: () => WQAM,
  WQCM: () => WQCM,
  WQDV: () => WQDV,
  WQMD: () => WQMD,
  WQML: () => WQML,
  WQMM: () => WQMM,
  WQOP: () => WQOP,
  XOR: () => XOR,
  XORI: () => XORI,
  add: () => add4,
  addi: () => addi,
  aloc: () => aloc,
  and: () => and3,
  andi: () => andi,
  bal: () => bal,
  bhei: () => bhei,
  bhsh: () => bhsh,
  bldd: () => bldd,
  bsiz: () => bsiz,
  burn: () => burn,
  call: () => call3,
  cb: () => cb,
  ccp: () => ccp,
  cfe: () => cfe,
  cfei: () => cfei,
  cfs: () => cfs,
  cfsi: () => cfsi,
  croo: () => croo,
  csiz: () => csiz,
  div: () => div,
  divi: () => divi,
  ecal: () => ecal,
  eck1: () => eck1,
  ecop: () => ecop,
  ecr1: () => ecr1,
  ed19: () => ed19,
  epar: () => epar,
  eq: () => eq2,
  exp: () => exp,
  expi: () => expi,
  flag: () => flag,
  gm: () => gm,
  gm_args: () => gm_args,
  gt: () => gt4,
  gtf: () => gtf,
  gtf_args: () => gtf_args,
  initSync: () => initSync,
  initWasm: () => initWasm,
  ji: () => ji,
  jmp: () => jmp,
  jmpb: () => jmpb,
  jmpf: () => jmpf,
  jne: () => jne,
  jneb: () => jneb,
  jnef: () => jnef,
  jnei: () => jnei,
  jnzb: () => jnzb,
  jnzf: () => jnzf,
  jnzi: () => jnzi,
  k256: () => k256,
  lb: () => lb,
  ldc: () => ldc,
  log: () => log,
  logd: () => logd,
  lt: () => lt3,
  lw: () => lw,
  mcl: () => mcl,
  mcli: () => mcli,
  mcp: () => mcp,
  mcpi: () => mcpi,
  meq: () => meq,
  mint: () => mint,
  mldv: () => mldv,
  mlog: () => mlog,
  mod_: () => mod_,
  modi: () => modi,
  move_: () => move_,
  movi: () => movi,
  mroo: () => mroo,
  mul: () => mul,
  muli: () => muli,
  noop: () => noop,
  not: () => not3,
  or: () => or3,
  ori: () => ori,
  poph: () => poph,
  popl: () => popl,
  pshh: () => pshh,
  pshl: () => pshl,
  ret: () => ret,
  retd: () => retd,
  rvrt: () => rvrt,
  s256: () => s256,
  sb: () => sb,
  scwq: () => scwq,
  sll: () => sll,
  slli: () => slli,
  smo: () => smo,
  srl: () => srl,
  srli: () => srli,
  srw: () => srw,
  srwq: () => srwq,
  sub: () => sub,
  subi: () => subi,
  sw: () => sw,
  sww: () => sww,
  swwq: () => swwq,
  time: () => time,
  tr: () => tr,
  tro: () => tro,
  wdam: () => wdam,
  wdcm: () => wdcm,
  wdcm_args: () => wdcm_args,
  wddv: () => wddv,
  wddv_args: () => wddv_args,
  wdmd: () => wdmd,
  wdml: () => wdml,
  wdml_args: () => wdml_args,
  wdmm: () => wdmm,
  wdop: () => wdop,
  wdop_args: () => wdop_args,
  wqam: () => wqam,
  wqcm: () => wqcm,
  wqcm_args: () => wqcm_args,
  wqdv: () => wqdv,
  wqdv_args: () => wqdv_args,
  wqmd: () => wqmd,
  wqml: () => wqml,
  wqml_args: () => wqml_args,
  wqmm: () => wqmm,
  wqop: () => wqop,
  wqop_args: () => wqop_args,
  xor: () => xor3,
  xori: () => xori
});
var wasm$1;
var cachedTextDecoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-8", { ignoreBOM: true, fatal: true }) : { decode: () => {
  throw Error("TextDecoder not available");
} };
if (typeof TextDecoder !== "undefined") {
  cachedTextDecoder.decode();
}
var cachedUint8ArrayMemory0 = null;
function getUint8ArrayMemory0() {
  if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {
    cachedUint8ArrayMemory0 = new Uint8Array(wasm$1.memory.buffer);
  }
  return cachedUint8ArrayMemory0;
}
function getStringFromWasm0(ptr, len) {
  ptr = ptr >>> 0;
  return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));
}
function _assertClass(instance, klass) {
  if (!(instance instanceof klass)) {
    throw new Error(`expected instance of ${klass.name}`);
  }
}
function gm_args(ra, args) {
  const ret2 = wasm$1.gm_args(ra, args);
  return Instruction.__wrap(ret2);
}
function gtf_args(ra, rb, args) {
  const ret2 = wasm$1.gtf_args(ra, rb, args);
  return Instruction.__wrap(ret2);
}
function wdcm_args(ra, rb, rc, args) {
  _assertClass(args, CompareArgs);
  var ptr0 = args.__destroy_into_raw();
  const ret2 = wasm$1.wdcm_args(ra, rb, rc, ptr0);
  return Instruction.__wrap(ret2);
}
function wqcm_args(ra, rb, rc, args) {
  _assertClass(args, CompareArgs);
  var ptr0 = args.__destroy_into_raw();
  const ret2 = wasm$1.wqcm_args(ra, rb, rc, ptr0);
  return Instruction.__wrap(ret2);
}
function wdop_args(ra, rb, rc, args) {
  _assertClass(args, MathArgs);
  var ptr0 = args.__destroy_into_raw();
  const ret2 = wasm$1.wdop_args(ra, rb, rc, ptr0);
  return Instruction.__wrap(ret2);
}
function wqop_args(ra, rb, rc, args) {
  _assertClass(args, MathArgs);
  var ptr0 = args.__destroy_into_raw();
  const ret2 = wasm$1.wqop_args(ra, rb, rc, ptr0);
  return Instruction.__wrap(ret2);
}
function wdml_args(ra, rb, rc, args) {
  _assertClass(args, MulArgs);
  var ptr0 = args.__destroy_into_raw();
  const ret2 = wasm$1.wdml_args(ra, rb, rc, ptr0);
  return Instruction.__wrap(ret2);
}
function wqml_args(ra, rb, rc, args) {
  _assertClass(args, MulArgs);
  var ptr0 = args.__destroy_into_raw();
  const ret2 = wasm$1.wqml_args(ra, rb, rc, ptr0);
  return Instruction.__wrap(ret2);
}
function wddv_args(ra, rb, rc, args) {
  _assertClass(args, DivArgs);
  var ptr0 = args.__destroy_into_raw();
  const ret2 = wasm$1.wddv_args(ra, rb, rc, ptr0);
  return Instruction.__wrap(ret2);
}
function wqdv_args(ra, rb, rc, args) {
  _assertClass(args, DivArgs);
  var ptr0 = args.__destroy_into_raw();
  const ret2 = wasm$1.wqdv_args(ra, rb, rc, ptr0);
  return Instruction.__wrap(ret2);
}
function add4(dst, lhs, rhs) {
  const ret2 = wasm$1.add(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function and3(dst, lhs, rhs) {
  const ret2 = wasm$1.and(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function div(dst, lhs, rhs) {
  const ret2 = wasm$1.div(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function eq2(dst, lhs, rhs) {
  const ret2 = wasm$1.eq(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function exp(dst, lhs, rhs) {
  const ret2 = wasm$1.exp(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function gt4(dst, lhs, rhs) {
  const ret2 = wasm$1.gt(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function lt3(dst, lhs, rhs) {
  const ret2 = wasm$1.lt(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function mlog(dst, lhs, rhs) {
  const ret2 = wasm$1.mlog(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function mroo(dst, lhs, rhs) {
  const ret2 = wasm$1.mroo(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function mod_(dst, lhs, rhs) {
  const ret2 = wasm$1.mod_(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function move_(dst, src) {
  const ret2 = wasm$1.move_(dst, src);
  return Instruction.__wrap(ret2);
}
function mul(dst, lhs, rhs) {
  const ret2 = wasm$1.mul(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function not3(dst, arg) {
  const ret2 = wasm$1.not(dst, arg);
  return Instruction.__wrap(ret2);
}
function or3(dst, lhs, rhs) {
  const ret2 = wasm$1.or(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function sll(dst, lhs, rhs) {
  const ret2 = wasm$1.sll(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function srl(dst, lhs, rhs) {
  const ret2 = wasm$1.srl(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function sub(dst, lhs, rhs) {
  const ret2 = wasm$1.sub(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function xor3(dst, lhs, rhs) {
  const ret2 = wasm$1.xor(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function mldv(dst, mul_lhs, mul_rhs, divisor) {
  const ret2 = wasm$1.mldv(dst, mul_lhs, mul_rhs, divisor);
  return Instruction.__wrap(ret2);
}
function ret(value) {
  const ret2 = wasm$1.ret(value);
  return Instruction.__wrap(ret2);
}
function retd(addr, len) {
  const ret2 = wasm$1.retd(addr, len);
  return Instruction.__wrap(ret2);
}
function aloc(bytes) {
  const ret2 = wasm$1.aloc(bytes);
  return Instruction.__wrap(ret2);
}
function mcl(dst_addr, len) {
  const ret2 = wasm$1.mcl(dst_addr, len);
  return Instruction.__wrap(ret2);
}
function mcp(dst_addr, src_addr, len) {
  const ret2 = wasm$1.mcp(dst_addr, src_addr, len);
  return Instruction.__wrap(ret2);
}
function meq(result, lhs_addr, rhs_addr, len) {
  const ret2 = wasm$1.meq(result, lhs_addr, rhs_addr, len);
  return Instruction.__wrap(ret2);
}
function bhsh(dst, heigth) {
  const ret2 = wasm$1.bhsh(dst, heigth);
  return Instruction.__wrap(ret2);
}
function bhei(dst) {
  const ret2 = wasm$1.bhei(dst);
  return Instruction.__wrap(ret2);
}
function burn(amount, sub_id_addr) {
  const ret2 = wasm$1.burn(amount, sub_id_addr);
  return Instruction.__wrap(ret2);
}
function call3(target_struct, fwd_coins, asset_id_addr, fwd_gas) {
  const ret2 = wasm$1.call(target_struct, fwd_coins, asset_id_addr, fwd_gas);
  return Instruction.__wrap(ret2);
}
function ccp(dst_addr, contract_id_addr, offset, len) {
  const ret2 = wasm$1.ccp(dst_addr, contract_id_addr, offset, len);
  return Instruction.__wrap(ret2);
}
function croo(dst_addr, contract_id_addr) {
  const ret2 = wasm$1.croo(dst_addr, contract_id_addr);
  return Instruction.__wrap(ret2);
}
function csiz(dst, contract_id_addr) {
  const ret2 = wasm$1.csiz(dst, contract_id_addr);
  return Instruction.__wrap(ret2);
}
function cb(dst) {
  const ret2 = wasm$1.cb(dst);
  return Instruction.__wrap(ret2);
}
function ldc(src_addr, offset, len, mode) {
  const ret2 = wasm$1.ldc(src_addr, offset, len, mode);
  return Instruction.__wrap(ret2);
}
function log(a, b, c, d) {
  const ret2 = wasm$1.log(a, b, c, d);
  return Instruction.__wrap(ret2);
}
function logd(a, b, addr, len) {
  const ret2 = wasm$1.logd(a, b, addr, len);
  return Instruction.__wrap(ret2);
}
function mint(amount, sub_id_addr) {
  const ret2 = wasm$1.mint(amount, sub_id_addr);
  return Instruction.__wrap(ret2);
}
function rvrt(value) {
  const ret2 = wasm$1.rvrt(value);
  return Instruction.__wrap(ret2);
}
function scwq(key_addr, status, lenq) {
  const ret2 = wasm$1.scwq(key_addr, status, lenq);
  return Instruction.__wrap(ret2);
}
function srw(dst, status, key_addr) {
  const ret2 = wasm$1.srw(dst, status, key_addr);
  return Instruction.__wrap(ret2);
}
function srwq(dst_addr, status, key_addr, lenq) {
  const ret2 = wasm$1.srwq(dst_addr, status, key_addr, lenq);
  return Instruction.__wrap(ret2);
}
function sww(key_addr, status, value) {
  const ret2 = wasm$1.sww(key_addr, status, value);
  return Instruction.__wrap(ret2);
}
function swwq(key_addr, status, src_addr, lenq) {
  const ret2 = wasm$1.swwq(key_addr, status, src_addr, lenq);
  return Instruction.__wrap(ret2);
}
function tr(contract_id_addr, amount, asset_id_addr) {
  const ret2 = wasm$1.tr(contract_id_addr, amount, asset_id_addr);
  return Instruction.__wrap(ret2);
}
function tro(contract_id_addr, output_index, amount, asset_id_addr) {
  const ret2 = wasm$1.tro(contract_id_addr, output_index, amount, asset_id_addr);
  return Instruction.__wrap(ret2);
}
function eck1(dst_addr, sig_addr, msg_hash_addr) {
  const ret2 = wasm$1.eck1(dst_addr, sig_addr, msg_hash_addr);
  return Instruction.__wrap(ret2);
}
function ecr1(dst_addr, sig_addr, msg_hash_addr) {
  const ret2 = wasm$1.ecr1(dst_addr, sig_addr, msg_hash_addr);
  return Instruction.__wrap(ret2);
}
function ed19(pub_key_addr, sig_addr, msg_addr, msg_len) {
  const ret2 = wasm$1.ed19(pub_key_addr, sig_addr, msg_addr, msg_len);
  return Instruction.__wrap(ret2);
}
function k256(dst_addr, src_addr, len) {
  const ret2 = wasm$1.k256(dst_addr, src_addr, len);
  return Instruction.__wrap(ret2);
}
function s256(dst_addr, src_addr, len) {
  const ret2 = wasm$1.s256(dst_addr, src_addr, len);
  return Instruction.__wrap(ret2);
}
function time(dst, heigth) {
  const ret2 = wasm$1.time(dst, heigth);
  return Instruction.__wrap(ret2);
}
function noop() {
  const ret2 = wasm$1.noop();
  return Instruction.__wrap(ret2);
}
function flag(value) {
  const ret2 = wasm$1.flag(value);
  return Instruction.__wrap(ret2);
}
function bal(dst, asset_id_addr, contract_id_addr) {
  const ret2 = wasm$1.bal(dst, asset_id_addr, contract_id_addr);
  return Instruction.__wrap(ret2);
}
function jmp(abs_target) {
  const ret2 = wasm$1.jmp(abs_target);
  return Instruction.__wrap(ret2);
}
function jne(abs_target, lhs, rhs) {
  const ret2 = wasm$1.jne(abs_target, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function smo(recipient_addr, data_addr, data_len, coins) {
  const ret2 = wasm$1.smo(recipient_addr, data_addr, data_len, coins);
  return Instruction.__wrap(ret2);
}
function addi(dst, lhs, rhs) {
  const ret2 = wasm$1.addi(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function andi(dst, lhs, rhs) {
  const ret2 = wasm$1.andi(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function divi(dst, lhs, rhs) {
  const ret2 = wasm$1.divi(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function expi(dst, lhs, rhs) {
  const ret2 = wasm$1.expi(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function modi(dst, lhs, rhs) {
  const ret2 = wasm$1.modi(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function muli(dst, lhs, rhs) {
  const ret2 = wasm$1.muli(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function ori(dst, lhs, rhs) {
  const ret2 = wasm$1.ori(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function slli(dst, lhs, rhs) {
  const ret2 = wasm$1.slli(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function srli(dst, lhs, rhs) {
  const ret2 = wasm$1.srli(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function subi(dst, lhs, rhs) {
  const ret2 = wasm$1.subi(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function xori(dst, lhs, rhs) {
  const ret2 = wasm$1.xori(dst, lhs, rhs);
  return Instruction.__wrap(ret2);
}
function jnei(cond_lhs, cond_rhs, abs_target) {
  const ret2 = wasm$1.jnei(cond_lhs, cond_rhs, abs_target);
  return Instruction.__wrap(ret2);
}
function lb(dst, addr, offset) {
  const ret2 = wasm$1.lb(dst, addr, offset);
  return Instruction.__wrap(ret2);
}
function lw(dst, addr, offset) {
  const ret2 = wasm$1.lw(dst, addr, offset);
  return Instruction.__wrap(ret2);
}
function sb(addr, value, offset) {
  const ret2 = wasm$1.sb(addr, value, offset);
  return Instruction.__wrap(ret2);
}
function sw(addr, value, offset) {
  const ret2 = wasm$1.sw(addr, value, offset);
  return Instruction.__wrap(ret2);
}
function mcpi(dst_addr, src_addr, len) {
  const ret2 = wasm$1.mcpi(dst_addr, src_addr, len);
  return Instruction.__wrap(ret2);
}
function gtf(dst, arg, selector) {
  const ret2 = wasm$1.gtf(dst, arg, selector);
  return Instruction.__wrap(ret2);
}
function mcli(addr, count2) {
  const ret2 = wasm$1.mcli(addr, count2);
  return Instruction.__wrap(ret2);
}
function gm(dst, selector) {
  const ret2 = wasm$1.gm(dst, selector);
  return Instruction.__wrap(ret2);
}
function movi(dst, val) {
  const ret2 = wasm$1.movi(dst, val);
  return Instruction.__wrap(ret2);
}
function jnzi(cond_nz, abs_target) {
  const ret2 = wasm$1.jnzi(cond_nz, abs_target);
  return Instruction.__wrap(ret2);
}
function jmpf(dynamic, fixed) {
  const ret2 = wasm$1.jmpf(dynamic, fixed);
  return Instruction.__wrap(ret2);
}
function jmpb(dynamic, fixed) {
  const ret2 = wasm$1.jmpb(dynamic, fixed);
  return Instruction.__wrap(ret2);
}
function jnzf(cond_nz, dynamic, fixed) {
  const ret2 = wasm$1.jnzf(cond_nz, dynamic, fixed);
  return Instruction.__wrap(ret2);
}
function jnzb(cond_nz, dynamic, fixed) {
  const ret2 = wasm$1.jnzb(cond_nz, dynamic, fixed);
  return Instruction.__wrap(ret2);
}
function jnef(cond_lhs, cond_rhs, dynamic, fixed) {
  const ret2 = wasm$1.jnef(cond_lhs, cond_rhs, dynamic, fixed);
  return Instruction.__wrap(ret2);
}
function jneb(cond_lhs, cond_rhs, dynamic, fixed) {
  const ret2 = wasm$1.jneb(cond_lhs, cond_rhs, dynamic, fixed);
  return Instruction.__wrap(ret2);
}
function ji(abs_target) {
  const ret2 = wasm$1.ji(abs_target);
  return Instruction.__wrap(ret2);
}
function cfei(amount) {
  const ret2 = wasm$1.cfei(amount);
  return Instruction.__wrap(ret2);
}
function cfsi(amount) {
  const ret2 = wasm$1.cfsi(amount);
  return Instruction.__wrap(ret2);
}
function cfe(amount) {
  const ret2 = wasm$1.cfe(amount);
  return Instruction.__wrap(ret2);
}
function cfs(amount) {
  const ret2 = wasm$1.cfs(amount);
  return Instruction.__wrap(ret2);
}
function pshl(bitmask) {
  const ret2 = wasm$1.pshl(bitmask);
  return Instruction.__wrap(ret2);
}
function pshh(bitmask) {
  const ret2 = wasm$1.pshh(bitmask);
  return Instruction.__wrap(ret2);
}
function popl(bitmask) {
  const ret2 = wasm$1.popl(bitmask);
  return Instruction.__wrap(ret2);
}
function poph(bitmask) {
  const ret2 = wasm$1.poph(bitmask);
  return Instruction.__wrap(ret2);
}
function wdcm(dst, lhs, rhs, flags) {
  const ret2 = wasm$1.wdcm(dst, lhs, rhs, flags);
  return Instruction.__wrap(ret2);
}
function wqcm(dst, lhs, rhs, flags) {
  const ret2 = wasm$1.wqcm(dst, lhs, rhs, flags);
  return Instruction.__wrap(ret2);
}
function wdop(dst, lhs, rhs, flags) {
  const ret2 = wasm$1.wdop(dst, lhs, rhs, flags);
  return Instruction.__wrap(ret2);
}
function wqop(dst, lhs, rhs, flags) {
  const ret2 = wasm$1.wqop(dst, lhs, rhs, flags);
  return Instruction.__wrap(ret2);
}
function wdml(dst, lhs, rhs, flags) {
  const ret2 = wasm$1.wdml(dst, lhs, rhs, flags);
  return Instruction.__wrap(ret2);
}
function wqml(dst, lhs, rhs, flags) {
  const ret2 = wasm$1.wqml(dst, lhs, rhs, flags);
  return Instruction.__wrap(ret2);
}
function wddv(dst, lhs, rhs, flags) {
  const ret2 = wasm$1.wddv(dst, lhs, rhs, flags);
  return Instruction.__wrap(ret2);
}
function wqdv(dst, lhs, rhs, flags) {
  const ret2 = wasm$1.wqdv(dst, lhs, rhs, flags);
  return Instruction.__wrap(ret2);
}
function wdmd(dst, mul_lhs, mul_rhs, divisor) {
  const ret2 = wasm$1.wdmd(dst, mul_lhs, mul_rhs, divisor);
  return Instruction.__wrap(ret2);
}
function wqmd(dst, mul_lhs, mul_rhs, divisor) {
  const ret2 = wasm$1.wqmd(dst, mul_lhs, mul_rhs, divisor);
  return Instruction.__wrap(ret2);
}
function wdam(dst, add_lhs, add_rhs, modulo3) {
  const ret2 = wasm$1.wdam(dst, add_lhs, add_rhs, modulo3);
  return Instruction.__wrap(ret2);
}
function wqam(dst, add_lhs, add_rhs, modulo3) {
  const ret2 = wasm$1.wqam(dst, add_lhs, add_rhs, modulo3);
  return Instruction.__wrap(ret2);
}
function wdmm(dst, mul_lhs, mul_rhs, modulo3) {
  const ret2 = wasm$1.wdmm(dst, mul_lhs, mul_rhs, modulo3);
  return Instruction.__wrap(ret2);
}
function wqmm(dst, mul_lhs, mul_rhs, modulo3) {
  const ret2 = wasm$1.wqmm(dst, mul_lhs, mul_rhs, modulo3);
  return Instruction.__wrap(ret2);
}
function ecal(a, b, c, d) {
  const ret2 = wasm$1.ecal(a, b, c, d);
  return Instruction.__wrap(ret2);
}
function bsiz(dst, blob_id_ptr) {
  const ret2 = wasm$1.bsiz(dst, blob_id_ptr);
  return Instruction.__wrap(ret2);
}
function bldd(dst_ptr, blob_id_ptr, offset, len) {
  const ret2 = wasm$1.bldd(dst_ptr, blob_id_ptr, offset, len);
  return Instruction.__wrap(ret2);
}
function ecop(dst, curve_id, operation_type, points_ptr) {
  const ret2 = wasm$1.ecop(dst, curve_id, operation_type, points_ptr);
  return Instruction.__wrap(ret2);
}
function epar(success, curve_id, number_elements, points_ptr) {
  const ret2 = wasm$1.epar(success, curve_id, number_elements, points_ptr);
  return Instruction.__wrap(ret2);
}
var cachedDataViewMemory0 = null;
function getDataViewMemory0() {
  if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || cachedDataViewMemory0.buffer.detached === void 0 && cachedDataViewMemory0.buffer !== wasm$1.memory.buffer) {
    cachedDataViewMemory0 = new DataView(wasm$1.memory.buffer);
  }
  return cachedDataViewMemory0;
}
function getArrayU8FromWasm0(ptr, len) {
  ptr = ptr >>> 0;
  return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);
}
var CompareMode = Object.freeze({
  /**
   * Equality (`==`)
   */
  EQ: 0,
  "0": "EQ",
  /**
   * Inequality (`!=`)
   */
  NE: 1,
  "1": "NE",
  /**
   * Less than (`<`)
   */
  LT: 2,
  "2": "LT",
  /**
   * Greater than (`>`)
   */
  GT: 3,
  "3": "GT",
  /**
   * Less than or equals (`>=`)
   */
  LTE: 4,
  "4": "LTE",
  /**
   * Greater than or equals (`>=`)
   */
  GTE: 5,
  "5": "GTE",
  /**
   * Number of leading zeroes in lhs (`lzcnt`) (discards rhs)
   */
  LZC: 6,
  "6": "LZC"
});
var GMArgs = Object.freeze({
  /**
   * r" Get if caller is external.
   */
  IsCallerExternal: 1,
  "1": "IsCallerExternal",
  /**
   * r" Get caller's contract ID.
   */
  GetCaller: 2,
  "2": "GetCaller",
  /**
   * r" Get index of current predicate.
   */
  GetVerifyingPredicate: 3,
  "3": "GetVerifyingPredicate",
  /**
   * r" Get the Chain ID this VM is operating within
   */
  GetChainId: 4,
  "4": "GetChainId",
  /**
   * r" Get memory address where the transaction is located
   */
  TxStart: 5,
  "5": "TxStart",
  /**
   * r" Get memory address of base asset ID
   */
  BaseAssetId: 6,
  "6": "BaseAssetId"
});
var GTFArgs = Object.freeze({
  /**
   * r" Set `$rA` to `tx.type`
   */
  Type: 1,
  "1": "Type",
  /**
   * r" Set `$rA` to `tx.scriptGasLimit`
   */
  ScriptGasLimit: 2,
  "2": "ScriptGasLimit",
  /**
   * r" Set `$rA` to `tx.scriptLength`
   */
  ScriptLength: 3,
  "3": "ScriptLength",
  /**
   * r" Set `$rA` to `tx.scriptDataLength`
   */
  ScriptDataLength: 4,
  "4": "ScriptDataLength",
  /**
   * r" Set `$rA` to `tx.inputsCount`
   */
  ScriptInputsCount: 5,
  "5": "ScriptInputsCount",
  /**
   * r" Set `$rA` to `tx.outputsCount`
   */
  ScriptOutputsCount: 6,
  "6": "ScriptOutputsCount",
  /**
   * r" Set `$rA` to `tx.witnessesCount`
   */
  ScriptWitnessesCount: 7,
  "7": "ScriptWitnessesCount",
  /**
   * r" Set `$rA` to `Memory address of tx.script`
   */
  Script: 9,
  "9": "Script",
  /**
   * r" Set `$rA` to `Memory address of tx.scriptData`
   */
  ScriptData: 10,
  "10": "ScriptData",
  /**
   * r" Set `$rA` to `Memory address of tx.inputs[$rB]`
   */
  ScriptInputAtIndex: 11,
  "11": "ScriptInputAtIndex",
  /**
   * r" Set `$rA` to `Memory address of t.outputs[$rB]`
   */
  ScriptOutputAtIndex: 12,
  "12": "ScriptOutputAtIndex",
  /**
   * r" Set `$rA` to `Memory address of tx.witnesses[$rB]`
   */
  ScriptWitnessAtIndex: 13,
  "13": "ScriptWitnessAtIndex",
  /**
   * r" Set `$rA` to size of the transaction in memory, in bytes
   */
  TxLength: 14,
  "14": "TxLength",
  /**
   * r" Set `$rA` to `tx.bytecodeWitnessIndex`
   */
  CreateBytecodeWitnessIndex: 257,
  "257": "CreateBytecodeWitnessIndex",
  /**
   * r" Set `$rA` to `tx.storageSlotsCount`
   */
  CreateStorageSlotsCount: 258,
  "258": "CreateStorageSlotsCount",
  /**
   * r" Set `$rA` to `tx.inputsCount`
   */
  CreateInputsCount: 259,
  "259": "CreateInputsCount",
  /**
   * r" Set `$rA` to `tx.outputsCount`
   */
  CreateOutputsCount: 260,
  "260": "CreateOutputsCount",
  /**
   * r" Set `$rA` to `tx.witnessesCount`
   */
  CreateWitnessesCount: 261,
  "261": "CreateWitnessesCount",
  /**
   * r" Set `$rA` to `Memory address of tx.salt`
   */
  CreateSalt: 262,
  "262": "CreateSalt",
  /**
   * r" Set `$rA` to `Memory address of tx.storageSlots[$rB]`
   */
  CreateStorageSlotAtIndex: 263,
  "263": "CreateStorageSlotAtIndex",
  /**
   * r" Set `$rA` to `Memory address of tx.inputs[$rB]`
   */
  CreateInputAtIndex: 264,
  "264": "CreateInputAtIndex",
  /**
   * r" Set `$rA` to `Memory address of t.outputs[$rB]`
   */
  CreateOutputAtIndex: 265,
  "265": "CreateOutputAtIndex",
  /**
   * r" Set `$rA` to `Memory address of tx.witnesses[$rB]`
   */
  CreateWitnessAtIndex: 266,
  "266": "CreateWitnessAtIndex",
  /**
   * r" Set `$rA` to `tx.inputs[$rB].type`
   */
  InputType: 512,
  "512": "InputType",
  /**
   * r" Set `$rA` to `Memory address of tx.inputs[$rB].txID`
   */
  InputCoinTxId: 513,
  "513": "InputCoinTxId",
  /**
   * r" Set `$rA` to `tx.inputs[$rB].outputIndex`
   */
  InputCoinOutputIndex: 514,
  "514": "InputCoinOutputIndex",
  /**
   * r" Set `$rA` to `Memory address of tx.inputs[$rB].owner`
   */
  InputCoinOwner: 515,
  "515": "InputCoinOwner",
  /**
   * r" Set `$rA` to `tx.inputs[$rB].amount`
   */
  InputCoinAmount: 516,
  "516": "InputCoinAmount",
  /**
   * r" Set `$rA` to `Memory address of tx.inputs[$rB].asset_id`
   */
  InputCoinAssetId: 517,
  "517": "InputCoinAssetId",
  /**
   * r" Set `$rA` to `Memory address of tx.inputs[$rB].txPointer`
   */
  InputCoinTxPointer: 518,
  "518": "InputCoinTxPointer",
  /**
   * r" Set `$rA` to `tx.inputs[$rB].witnessIndex`
   */
  InputCoinWitnessIndex: 519,
  "519": "InputCoinWitnessIndex",
  /**
   * r" Set `$rA` to `tx.inputs[$rB].predicateLength`
   */
  InputCoinPredicateLength: 521,
  "521": "InputCoinPredicateLength",
  /**
   * r" Set `$rA` to `tx.inputs[$rB].predicateDataLength`
   */
  InputCoinPredicateDataLength: 522,
  "522": "InputCoinPredicateDataLength",
  /**
   * r" Set `$rA` to `Memory address of tx.inputs[$rB].predicate`
   */
  InputCoinPredicate: 523,
  "523": "InputCoinPredicate",
  /**
   * r" Set `$rA` to `Memory address of tx.inputs[$rB].predicateData`
   */
  InputCoinPredicateData: 524,
  "524": "InputCoinPredicateData",
  /**
   * r" Set `$rA` to `Memory address of tx.inputs[$rB].predicateGasUsed`
   */
  InputCoinPredicateGasUsed: 525,
  "525": "InputCoinPredicateGasUsed",
  /**
   * r" Set `$rA` to `Memory address of tx.inputs[$rB].txID`
   */
  InputContractTxId: 544,
  "544": "InputContractTxId",
  /**
   * r" Set `$rA` to `tx.inputs[$rB].outputIndex`
   */
  InputContractOutputIndex: 545,
  "545": "InputContractOutputIndex",
  /**
   * r" Set `$rA` to `Memory address of tx.inputs[$rB].contractID`
   */
  InputContractId: 549,
  "549": "InputContractId",
  /**
   * r" Set `$rA` to `Memory address of tx.inputs[$rB].sender`
   */
  InputMessageSender: 576,
  "576": "InputMessageSender",
  /**
   * r" Set `$rA` to `Memory address of tx.inputs[$rB].recipient`
   */
  InputMessageRecipient: 577,
  "577": "InputMessageRecipient",
  /**
   * r" Set `$rA` to `tx.inputs[$rB].amount`
   */
  InputMessageAmount: 578,
  "578": "InputMessageAmount",
  /**
   * r" Set `$rA` to `Memory address of tx.inputs[$rB].nonce`
   */
  InputMessageNonce: 579,
  "579": "InputMessageNonce",
  /**
   * r" Set `$rA` to `tx.inputs[$rB].witnessIndex`
   */
  InputMessageWitnessIndex: 580,
  "580": "InputMessageWitnessIndex",
  /**
   * r" Set `$rA` to `tx.inputs[$rB].dataLength`
   */
  InputMessageDataLength: 581,
  "581": "InputMessageDataLength",
  /**
   * r" Set `$rA` to `tx.inputs[$rB].predicateLength`
   */
  InputMessagePredicateLength: 582,
  "582": "InputMessagePredicateLength",
  /**
   * r" Set `$rA` to `tx.inputs[$rB].predicateDataLength`
   */
  InputMessagePredicateDataLength: 583,
  "583": "InputMessagePredicateDataLength",
  /**
   * r" Set `$rA` to `Memory address of tx.inputs[$rB].data`
   */
  InputMessageData: 584,
  "584": "InputMessageData",
  /**
   * r" Set `$rA` to `Memory address of tx.inputs[$rB].predicate`
   */
  InputMessagePredicate: 585,
  "585": "InputMessagePredicate",
  /**
   * r" Set `$rA` to `Memory address of tx.inputs[$rB].predicateData`
   */
  InputMessagePredicateData: 586,
  "586": "InputMessagePredicateData",
  /**
   * r" Set `$rA` to `Memory address of tx.inputs[$rB].predicateGasUsed`
   */
  InputMessagePredicateGasUsed: 587,
  "587": "InputMessagePredicateGasUsed",
  /**
   * r" Set `$rA` to `tx.outputs[$rB].type`
   */
  OutputType: 768,
  "768": "OutputType",
  /**
   * r" Set `$rA` to `Memory address of tx.outputs[$rB].to`
   */
  OutputCoinTo: 769,
  "769": "OutputCoinTo",
  /**
   * r" Set `$rA` to `tx.outputs[$rB].amount`
   */
  OutputCoinAmount: 770,
  "770": "OutputCoinAmount",
  /**
   * r" Set `$rA` to `Memory address of tx.outputs[$rB].asset_id`
   */
  OutputCoinAssetId: 771,
  "771": "OutputCoinAssetId",
  /**
   * r" Set `$rA` to `tx.outputs[$rB].inputIndex`
   */
  OutputContractInputIndex: 772,
  "772": "OutputContractInputIndex",
  /**
   * r" Set `$rA` to `Memory address of tx.outputs[$rB].contractID`
   */
  OutputContractCreatedContractId: 775,
  "775": "OutputContractCreatedContractId",
  /**
   * r" Set `$rA` to `Memory address of tx.outputs[$rB].stateRoot`
   */
  OutputContractCreatedStateRoot: 776,
  "776": "OutputContractCreatedStateRoot",
  /**
   * r" Set `$rA` to `tx.witnesses[$rB].dataLength`
   */
  WitnessDataLength: 1024,
  "1024": "WitnessDataLength",
  /**
   * r" Set `$rA` to `Memory address of tx.witnesses[$rB].data`
   */
  WitnessData: 1025,
  "1025": "WitnessData",
  /**
   * r" Set `$rA` to `tx.policyTypes`
   */
  PolicyTypes: 1280,
  "1280": "PolicyTypes",
  /**
   * r" Set `$rA` to `tx.policies[0x00].gasPrice`
   */
  PolicyTip: 1281,
  "1281": "PolicyTip",
  /**
   * r" Set `$rA` to `tx.policies[count_ones(0b11 & tx.policyTypes) - 1].witnessLimit`
   */
  PolicyWitnessLimit: 1282,
  "1282": "PolicyWitnessLimit",
  /**
   * r" Set `$rA` to `tx.policies[count_ones(0b111 & tx.policyTypes) - 1].maturity`
   */
  PolicyMaturity: 1283,
  "1283": "PolicyMaturity",
  /**
   * r" Set `$rA` to `tx.policies[count_ones(0b1111 & tx.policyTypes) - 1].maxFee`
   */
  PolicyMaxFee: 1284,
  "1284": "PolicyMaxFee",
  /**
   * r" Set `$rA` to `tx.policies[count_ones(0b11111 & tx.policyTypes) - 1].expiration`
   */
  PolicyExpiration: 1285,
  "1285": "PolicyExpiration"
});
var MathOp = Object.freeze({
  /**
   * Add
   */
  ADD: 0,
  "0": "ADD",
  /**
   * Subtract
   */
  SUB: 1,
  "1": "SUB",
  /**
   * Invert bits (discards rhs)
   */
  NOT: 2,
  "2": "NOT",
  /**
   * Bitwise or
   */
  OR: 3,
  "3": "OR",
  /**
   * Bitwise exclusive or
   */
  XOR: 4,
  "4": "XOR",
  /**
   * Bitwise and
   */
  AND: 5,
  "5": "AND",
  /**
   * Shift left
   */
  SHL: 6,
  "6": "SHL",
  /**
   * Shift right
   */
  SHR: 7,
  "7": "SHR"
});
var PanicReason = Object.freeze({
  /**
   * r" The byte can't be mapped to any known `PanicReason`.
   */
  UnknownPanicReason: 0,
  "0": "UnknownPanicReason",
  /**
   * r" Found `RVRT` instruction.
   */
  Revert: 1,
  "1": "Revert",
  /**
   * r" Execution ran out of gas.
   */
  OutOfGas: 2,
  "2": "OutOfGas",
  /**
   * r" The transaction validity is violated.
   */
  TransactionValidity: 3,
  "3": "TransactionValidity",
  /**
   * r" Attempt to write outside interpreter memory boundaries.
   */
  MemoryOverflow: 4,
  "4": "MemoryOverflow",
  /**
   * r" Overflow while executing arithmetic operation.
   * r" These errors are ignored using the WRAPPING flag.
   */
  ArithmeticOverflow: 5,
  "5": "ArithmeticOverflow",
  /**
   * r" Designed contract was not found in the storage.
   */
  ContractNotFound: 6,
  "6": "ContractNotFound",
  /**
   * r" Memory ownership rules are violated.
   */
  MemoryOwnership: 7,
  "7": "MemoryOwnership",
  /**
   * r" The asset ID balance isn't enough for the instruction.
   */
  NotEnoughBalance: 8,
  "8": "NotEnoughBalance",
  /**
   * r" The interpreter is expected to be in internal context.
   */
  ExpectedInternalContext: 9,
  "9": "ExpectedInternalContext",
  /**
   * r" The queried asset ID was not found in the state.
   */
  AssetIdNotFound: 10,
  "10": "AssetIdNotFound",
  /**
   * r" The provided input is not found in the transaction.
   */
  InputNotFound: 11,
  "11": "InputNotFound",
  /**
   * r" The provided output is not found in the transaction.
   */
  OutputNotFound: 12,
  "12": "OutputNotFound",
  /**
   * r" The provided witness is not found in the transaction.
   */
  WitnessNotFound: 13,
  "13": "WitnessNotFound",
  /**
   * r" The transaction maturity is not valid for this request.
   */
  TransactionMaturity: 14,
  "14": "TransactionMaturity",
  /**
   * r" The metadata identifier is invalid.
   */
  InvalidMetadataIdentifier: 15,
  "15": "InvalidMetadataIdentifier",
  /**
   * r" The call structure is not valid.
   */
  MalformedCallStructure: 16,
  "16": "MalformedCallStructure",
  /**
   * r" The provided register does not allow write operations.
   */
  ReservedRegisterNotWritable: 17,
  "17": "ReservedRegisterNotWritable",
  /**
   * r" The execution resulted in an erroneous state of the interpreter.
   */
  InvalidFlags: 18,
  "18": "InvalidFlags",
  /**
   * r" The provided immediate value is not valid for this instruction.
   */
  InvalidImmediateValue: 19,
  "19": "InvalidImmediateValue",
  /**
   * r" The provided transaction input is not of type `Coin`.
   */
  ExpectedCoinInput: 20,
  "20": "ExpectedCoinInput",
  /**
   * r" `ECAL` instruction failed.
   */
  EcalError: 21,
  "21": "EcalError",
  /**
   * r" Two segments of the interpreter memory should not intersect for write operations.
   */
  MemoryWriteOverlap: 22,
  "22": "MemoryWriteOverlap",
  /**
   * r" The requested contract is not listed in the transaction inputs.
   */
  ContractNotInInputs: 23,
  "23": "ContractNotInInputs",
  /**
   * r" The internal asset ID balance overflowed with the provided instruction.
   */
  InternalBalanceOverflow: 24,
  "24": "InternalBalanceOverflow",
  /**
   * r" The maximum allowed contract size is violated.
   */
  ContractMaxSize: 25,
  "25": "ContractMaxSize",
  /**
   * r" This instruction expects the stack area to be unallocated for this call.
   */
  ExpectedUnallocatedStack: 26,
  "26": "ExpectedUnallocatedStack",
  /**
   * r" The maximum allowed number of static contracts was reached for this transaction.
   */
  MaxStaticContractsReached: 27,
  "27": "MaxStaticContractsReached",
  /**
   * r" The requested transfer amount cannot be zero.
   */
  TransferAmountCannotBeZero: 28,
  "28": "TransferAmountCannotBeZero",
  /**
   * r" The provided transaction output should be of type `Variable`.
   */
  ExpectedOutputVariable: 29,
  "29": "ExpectedOutputVariable",
  /**
   * r" The expected context of the stack parent is internal.
   */
  ExpectedParentInternalContext: 30,
  "30": "ExpectedParentInternalContext",
  /**
   * r" The predicate returned non `1`. The `1` means successful verification
   * r" of the predicate, all other values means unsuccessful.
   */
  PredicateReturnedNonOne: 31,
  "31": "PredicateReturnedNonOne",
  /**
   * r" The contract ID is already deployed and can't be overwritten.
   */
  ContractIdAlreadyDeployed: 32,
  "32": "ContractIdAlreadyDeployed",
  /**
   * r" The loaded contract mismatch expectations.
   */
  ContractMismatch: 33,
  "33": "ContractMismatch",
  /**
   * r" Attempting to send message data longer than `MAX_MESSAGE_DATA_LENGTH`
   */
  MessageDataTooLong: 34,
  "34": "MessageDataTooLong",
  /**
   * r" Mathematically invalid arguments where given to an arithmetic instruction.
   * r" For instance, division by zero produces this.
   * r" These errors are ignored using the UNSAFEMATH flag.
   */
  ArithmeticError: 35,
  "35": "ArithmeticError",
  /**
   * r" The contract instruction is not allowed in predicates.
   */
  ContractInstructionNotAllowed: 36,
  "36": "ContractInstructionNotAllowed",
  /**
   * r" Transfer of zero coins is not allowed.
   */
  TransferZeroCoins: 37,
  "37": "TransferZeroCoins",
  /**
   * r" Attempted to execute an invalid instruction
   */
  InvalidInstruction: 38,
  "38": "InvalidInstruction",
  /**
   * r" Memory outside $is..$ssp range is not executable
   */
  MemoryNotExecutable: 39,
  "39": "MemoryNotExecutable",
  /**
   * r" The policy is not set.
   */
  PolicyIsNotSet: 40,
  "40": "PolicyIsNotSet",
  /**
   * r" The policy is not found across policies.
   */
  PolicyNotFound: 41,
  "41": "PolicyNotFound",
  /**
   * r" Receipt context is full
   */
  TooManyReceipts: 42,
  "42": "TooManyReceipts",
  /**
   * r" Balance of a contract overflowed
   */
  BalanceOverflow: 43,
  "43": "BalanceOverflow",
  /**
   * r" Block height value is invalid, typically because it is too large
   */
  InvalidBlockHeight: 44,
  "44": "InvalidBlockHeight",
  /**
   * r" Attempt to use sequential memory instructions with too large slot count,
   * r" typically because it cannot fit into usize
   */
  TooManySlots: 45,
  "45": "TooManySlots",
  /**
   * r" Caller of this internal context is also expected to be internal,
   * r" i.e. $fp->$fp must be non-zero.
   */
  ExpectedNestedCaller: 46,
  "46": "ExpectedNestedCaller",
  /**
   * r" During memory growth, the stack overlapped with the heap
   */
  MemoryGrowthOverlap: 47,
  "47": "MemoryGrowthOverlap",
  /**
   * r" Attempting to read or write uninitialized memory.
   * r" Also occurs when boundary crosses from stack to heap.
   */
  UninitalizedMemoryAccess: 48,
  "48": "UninitalizedMemoryAccess",
  /**
   * r" Overriding consensus parameters is not allowed.
   */
  OverridingConsensusParameters: 49,
  "49": "OverridingConsensusParameters",
  /**
   * r" The storage doesn't know about the hash of the state transition bytecode.
   */
  UnknownStateTransactionBytecodeRoot: 50,
  "50": "UnknownStateTransactionBytecodeRoot",
  /**
   * r" Overriding the state transition bytecode is not allowed.
   */
  OverridingStateTransactionBytecode: 51,
  "51": "OverridingStateTransactionBytecode",
  /**
   * r" The bytecode is already uploaded and cannot be uploaded again.
   */
  BytecodeAlreadyUploaded: 52,
  "52": "BytecodeAlreadyUploaded",
  /**
   * r" The part of the bytecode is not sequentially connected to the previous parts.
   */
  ThePartIsNotSequentiallyConnected: 53,
  "53": "ThePartIsNotSequentiallyConnected",
  /**
   * r" The requested blob is not found.
   */
  BlobNotFound: 54,
  "54": "BlobNotFound",
  /**
   * r" The blob was already
   */
  BlobIdAlreadyUploaded: 55,
  "55": "BlobIdAlreadyUploaded",
  /**
   * r" Active gas costs do not define the cost for this instruction.
   */
  GasCostNotDefined: 56,
  "56": "GasCostNotDefined",
  /**
   * r" The curve id is not supported.
   */
  UnsupportedCurveId: 57,
  "57": "UnsupportedCurveId",
  /**
   * r" The operation type is not supported.
   */
  UnsupportedOperationType: 58,
  "58": "UnsupportedOperationType",
  /**
   * r" Read alt_bn_128 curve point is invalid.
   */
  InvalidEllipticCurvePoint: 59,
  "59": "InvalidEllipticCurvePoint",
  /**
   * r" Given input contract does not exist.
   */
  InputContractDoesNotExist: 60,
  "60": "InputContractDoesNotExist"
});
var ADDFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_add_free(ptr >>> 0, 1));
var ADD = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    ADDFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_add_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    ADDFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var ADDIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_addi_free(ptr >>> 0, 1));
var ADDI = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    ADDIFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_addi_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {Imm12} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, Imm12);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    ADDIFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 12-bit immediate value.
   * @returns {Imm12}
   */
  imm12() {
    const ret2 = wasm$1.addi_imm12(this.__wbg_ptr);
    return Imm12.__wrap(ret2);
  }
};
var ALOCFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_aloc_free(ptr >>> 0, 1));
var ALOC = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    ALOCFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_aloc_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} bytes
   */
  constructor(bytes) {
    _assertClass(bytes, RegId);
    var ptr0 = bytes.__destroy_into_raw();
    const ret2 = wasm$1.aloc_new_typescript(ptr0);
    this.__wbg_ptr = ret2 >>> 0;
    ALOCFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.aloc_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var ANDFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_and_free(ptr >>> 0, 1));
var AND = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    ANDFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_and_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    ANDFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var ANDIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_andi_free(ptr >>> 0, 1));
var ANDI = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    ANDIFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_andi_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {Imm12} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, Imm12);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    ANDIFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 12-bit immediate value.
   * @returns {Imm12}
   */
  imm12() {
    const ret2 = wasm$1.addi_imm12(this.__wbg_ptr);
    return Imm12.__wrap(ret2);
  }
};
var BALFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_bal_free(ptr >>> 0, 1));
var BAL = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    BALFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_bal_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} asset_id_addr
   * @param {RegId} contract_id_addr
   */
  constructor(dst, asset_id_addr, contract_id_addr) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(asset_id_addr, RegId);
    var ptr1 = asset_id_addr.__destroy_into_raw();
    _assertClass(contract_id_addr, RegId);
    var ptr2 = contract_id_addr.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    BALFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var BHEIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_bhei_free(ptr >>> 0, 1));
var BHEI = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    BHEIFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_bhei_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   */
  constructor(dst) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    const ret2 = wasm$1.aloc_new_typescript(ptr0);
    this.__wbg_ptr = ret2 >>> 0;
    BHEIFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.aloc_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var BHSHFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_bhsh_free(ptr >>> 0, 1));
var BHSH = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    BHSHFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_bhsh_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} heigth
   */
  constructor(dst, heigth) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(heigth, RegId);
    var ptr1 = heigth.__destroy_into_raw();
    const ret2 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
    this.__wbg_ptr = ret2 >>> 0;
    BHSHFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var BLDDFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_bldd_free(ptr >>> 0, 1));
var BLDD = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    BLDDFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_bldd_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst_ptr
   * @param {RegId} blob_id_ptr
   * @param {RegId} offset
   * @param {RegId} len
   */
  constructor(dst_ptr, blob_id_ptr, offset, len) {
    _assertClass(dst_ptr, RegId);
    var ptr0 = dst_ptr.__destroy_into_raw();
    _assertClass(blob_id_ptr, RegId);
    var ptr1 = blob_id_ptr.__destroy_into_raw();
    _assertClass(offset, RegId);
    var ptr2 = offset.__destroy_into_raw();
    _assertClass(len, RegId);
    var ptr3 = len.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    BLDDFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var BSIZFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_bsiz_free(ptr >>> 0, 1));
var BSIZ = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    BSIZFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_bsiz_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} blob_id_ptr
   */
  constructor(dst, blob_id_ptr) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(blob_id_ptr, RegId);
    var ptr1 = blob_id_ptr.__destroy_into_raw();
    const ret2 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
    this.__wbg_ptr = ret2 >>> 0;
    BSIZFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var BURNFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_burn_free(ptr >>> 0, 1));
var BURN = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    BURNFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_burn_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} amount
   * @param {RegId} sub_id_addr
   */
  constructor(amount, sub_id_addr) {
    _assertClass(amount, RegId);
    var ptr0 = amount.__destroy_into_raw();
    _assertClass(sub_id_addr, RegId);
    var ptr1 = sub_id_addr.__destroy_into_raw();
    const ret2 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
    this.__wbg_ptr = ret2 >>> 0;
    BURNFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var CALLFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_call_free(ptr >>> 0, 1));
var CALL = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    CALLFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_call_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} target_struct
   * @param {RegId} fwd_coins
   * @param {RegId} asset_id_addr
   * @param {RegId} fwd_gas
   */
  constructor(target_struct, fwd_coins, asset_id_addr, fwd_gas) {
    _assertClass(target_struct, RegId);
    var ptr0 = target_struct.__destroy_into_raw();
    _assertClass(fwd_coins, RegId);
    var ptr1 = fwd_coins.__destroy_into_raw();
    _assertClass(asset_id_addr, RegId);
    var ptr2 = asset_id_addr.__destroy_into_raw();
    _assertClass(fwd_gas, RegId);
    var ptr3 = fwd_gas.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    CALLFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var CBFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_cb_free(ptr >>> 0, 1));
var CB = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    CBFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_cb_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   */
  constructor(dst) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    const ret2 = wasm$1.aloc_new_typescript(ptr0);
    this.__wbg_ptr = ret2 >>> 0;
    CBFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.aloc_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var CCPFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_ccp_free(ptr >>> 0, 1));
var CCP = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    CCPFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_ccp_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst_addr
   * @param {RegId} contract_id_addr
   * @param {RegId} offset
   * @param {RegId} len
   */
  constructor(dst_addr, contract_id_addr, offset, len) {
    _assertClass(dst_addr, RegId);
    var ptr0 = dst_addr.__destroy_into_raw();
    _assertClass(contract_id_addr, RegId);
    var ptr1 = contract_id_addr.__destroy_into_raw();
    _assertClass(offset, RegId);
    var ptr2 = offset.__destroy_into_raw();
    _assertClass(len, RegId);
    var ptr3 = len.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    CCPFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var CFEFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_cfe_free(ptr >>> 0, 1));
var CFE = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    CFEFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_cfe_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} amount
   */
  constructor(amount) {
    _assertClass(amount, RegId);
    var ptr0 = amount.__destroy_into_raw();
    const ret2 = wasm$1.aloc_new_typescript(ptr0);
    this.__wbg_ptr = ret2 >>> 0;
    CFEFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.aloc_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var CFEIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_cfei_free(ptr >>> 0, 1));
var CFEI = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    CFEIFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_cfei_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {Imm24} amount
   */
  constructor(amount) {
    _assertClass(amount, Imm24);
    var ptr0 = amount.__destroy_into_raw();
    const ret2 = wasm$1.cfei_new_typescript(ptr0);
    this.__wbg_ptr = ret2 >>> 0;
    CFEIFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the 24-bit immediate value.
   * @returns {Imm24}
   */
  imm24() {
    const ret2 = wasm$1.cfei_imm24(this.__wbg_ptr);
    return Imm24.__wrap(ret2);
  }
};
var CFSFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_cfs_free(ptr >>> 0, 1));
var CFS = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    CFSFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_cfs_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} amount
   */
  constructor(amount) {
    _assertClass(amount, RegId);
    var ptr0 = amount.__destroy_into_raw();
    const ret2 = wasm$1.aloc_new_typescript(ptr0);
    this.__wbg_ptr = ret2 >>> 0;
    CFSFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.aloc_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var CFSIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_cfsi_free(ptr >>> 0, 1));
var CFSI = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    CFSIFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_cfsi_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {Imm24} amount
   */
  constructor(amount) {
    _assertClass(amount, Imm24);
    var ptr0 = amount.__destroy_into_raw();
    const ret2 = wasm$1.cfei_new_typescript(ptr0);
    this.__wbg_ptr = ret2 >>> 0;
    CFSIFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the 24-bit immediate value.
   * @returns {Imm24}
   */
  imm24() {
    const ret2 = wasm$1.cfei_imm24(this.__wbg_ptr);
    return Imm24.__wrap(ret2);
  }
};
var CROOFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_croo_free(ptr >>> 0, 1));
var CROO = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    CROOFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_croo_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst_addr
   * @param {RegId} contract_id_addr
   */
  constructor(dst_addr, contract_id_addr) {
    _assertClass(dst_addr, RegId);
    var ptr0 = dst_addr.__destroy_into_raw();
    _assertClass(contract_id_addr, RegId);
    var ptr1 = contract_id_addr.__destroy_into_raw();
    const ret2 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
    this.__wbg_ptr = ret2 >>> 0;
    CROOFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var CSIZFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_csiz_free(ptr >>> 0, 1));
var CSIZ = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    CSIZFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_csiz_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} contract_id_addr
   */
  constructor(dst, contract_id_addr) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(contract_id_addr, RegId);
    var ptr1 = contract_id_addr.__destroy_into_raw();
    const ret2 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
    this.__wbg_ptr = ret2 >>> 0;
    CSIZFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var CompareArgsFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_compareargs_free(ptr >>> 0, 1));
var CompareArgs = class _CompareArgs {
  static __wrap(ptr) {
    ptr = ptr >>> 0;
    const obj = Object.create(_CompareArgs.prototype);
    obj.__wbg_ptr = ptr;
    CompareArgsFinalization.register(obj, obj.__wbg_ptr, obj);
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    CompareArgsFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_compareargs_free(ptr, 0);
  }
  /**
   * Comparison mode
   * @returns {CompareMode}
   */
  get mode() {
    const ret2 = wasm$1.__wbg_get_compareargs_mode(this.__wbg_ptr);
    return ret2;
  }
  /**
   * Comparison mode
   * @param {CompareMode} arg0
   */
  set mode(arg0) {
    wasm$1.__wbg_set_compareargs_mode(this.__wbg_ptr, arg0);
  }
  /**
   * Load RHS from register if true, otherwise zero-extend register value
   * @returns {boolean}
   */
  get indirect_rhs() {
    const ret2 = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);
    return ret2 !== 0;
  }
  /**
   * Load RHS from register if true, otherwise zero-extend register value
   * @param {boolean} arg0
   */
  set indirect_rhs(arg0) {
    wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);
  }
  /**
   * Convert to immediate value.
   * @returns {Imm06}
   */
  to_imm() {
    const ptr = this.__destroy_into_raw();
    const ret2 = wasm$1.compareargs_to_imm(ptr);
    return Imm06.__wrap(ret2);
  }
  /**
   * Construct from `Imm06`. Returns `None` if the value has reserved flags set.
   * @param {Imm06} bits
   * @returns {CompareArgs | undefined}
   */
  static from_imm(bits2) {
    _assertClass(bits2, Imm06);
    var ptr0 = bits2.__destroy_into_raw();
    const ret2 = wasm$1.compareargs_from_imm(ptr0);
    return ret2 === 0 ? void 0 : _CompareArgs.__wrap(ret2);
  }
};
var DIVFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_div_free(ptr >>> 0, 1));
var DIV = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    DIVFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_div_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    DIVFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var DIVIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_divi_free(ptr >>> 0, 1));
var DIVI = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    DIVIFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_divi_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {Imm12} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, Imm12);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    DIVIFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 12-bit immediate value.
   * @returns {Imm12}
   */
  imm12() {
    const ret2 = wasm$1.addi_imm12(this.__wbg_ptr);
    return Imm12.__wrap(ret2);
  }
};
var DivArgsFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_divargs_free(ptr >>> 0, 1));
var DivArgs = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    DivArgsFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_divargs_free(ptr, 0);
  }
  /**
   * Load RHS from register if true, otherwise zero-extend register value
   * @returns {boolean}
   */
  get indirect_rhs() {
    const ret2 = wasm$1.__wbg_get_divargs_indirect_rhs(this.__wbg_ptr);
    return ret2 !== 0;
  }
  /**
   * Load RHS from register if true, otherwise zero-extend register value
   * @param {boolean} arg0
   */
  set indirect_rhs(arg0) {
    wasm$1.__wbg_set_divargs_indirect_rhs(this.__wbg_ptr, arg0);
  }
};
var ECALFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_ecal_free(ptr >>> 0, 1));
var ECAL = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    ECALFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_ecal_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} a
   * @param {RegId} b
   * @param {RegId} c
   * @param {RegId} d
   */
  constructor(a, b, c, d) {
    _assertClass(a, RegId);
    var ptr0 = a.__destroy_into_raw();
    _assertClass(b, RegId);
    var ptr1 = b.__destroy_into_raw();
    _assertClass(c, RegId);
    var ptr2 = c.__destroy_into_raw();
    _assertClass(d, RegId);
    var ptr3 = d.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    ECALFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var ECK1Finalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_eck1_free(ptr >>> 0, 1));
var ECK1 = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    ECK1Finalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_eck1_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst_addr
   * @param {RegId} sig_addr
   * @param {RegId} msg_hash_addr
   */
  constructor(dst_addr, sig_addr, msg_hash_addr) {
    _assertClass(dst_addr, RegId);
    var ptr0 = dst_addr.__destroy_into_raw();
    _assertClass(sig_addr, RegId);
    var ptr1 = sig_addr.__destroy_into_raw();
    _assertClass(msg_hash_addr, RegId);
    var ptr2 = msg_hash_addr.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    ECK1Finalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var ECOPFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_ecop_free(ptr >>> 0, 1));
var ECOP = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    ECOPFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_ecop_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} curve_id
   * @param {RegId} operation_type
   * @param {RegId} points_ptr
   */
  constructor(dst, curve_id, operation_type, points_ptr) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(curve_id, RegId);
    var ptr1 = curve_id.__destroy_into_raw();
    _assertClass(operation_type, RegId);
    var ptr2 = operation_type.__destroy_into_raw();
    _assertClass(points_ptr, RegId);
    var ptr3 = points_ptr.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    ECOPFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var ECR1Finalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_ecr1_free(ptr >>> 0, 1));
var ECR1 = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    ECR1Finalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_ecr1_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst_addr
   * @param {RegId} sig_addr
   * @param {RegId} msg_hash_addr
   */
  constructor(dst_addr, sig_addr, msg_hash_addr) {
    _assertClass(dst_addr, RegId);
    var ptr0 = dst_addr.__destroy_into_raw();
    _assertClass(sig_addr, RegId);
    var ptr1 = sig_addr.__destroy_into_raw();
    _assertClass(msg_hash_addr, RegId);
    var ptr2 = msg_hash_addr.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    ECR1Finalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var ED19Finalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_ed19_free(ptr >>> 0, 1));
var ED19 = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    ED19Finalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_ed19_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} pub_key_addr
   * @param {RegId} sig_addr
   * @param {RegId} msg_addr
   * @param {RegId} msg_len
   */
  constructor(pub_key_addr, sig_addr, msg_addr, msg_len) {
    _assertClass(pub_key_addr, RegId);
    var ptr0 = pub_key_addr.__destroy_into_raw();
    _assertClass(sig_addr, RegId);
    var ptr1 = sig_addr.__destroy_into_raw();
    _assertClass(msg_addr, RegId);
    var ptr2 = msg_addr.__destroy_into_raw();
    _assertClass(msg_len, RegId);
    var ptr3 = msg_len.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    ED19Finalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var EPARFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_epar_free(ptr >>> 0, 1));
var EPAR = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    EPARFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_epar_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} success
   * @param {RegId} curve_id
   * @param {RegId} number_elements
   * @param {RegId} points_ptr
   */
  constructor(success, curve_id, number_elements, points_ptr) {
    _assertClass(success, RegId);
    var ptr0 = success.__destroy_into_raw();
    _assertClass(curve_id, RegId);
    var ptr1 = curve_id.__destroy_into_raw();
    _assertClass(number_elements, RegId);
    var ptr2 = number_elements.__destroy_into_raw();
    _assertClass(points_ptr, RegId);
    var ptr3 = points_ptr.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    EPARFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var EQFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_eq_free(ptr >>> 0, 1));
var EQ = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    EQFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_eq_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    EQFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var EXPFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_exp_free(ptr >>> 0, 1));
var EXP = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    EXPFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_exp_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    EXPFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var EXPIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_expi_free(ptr >>> 0, 1));
var EXPI = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    EXPIFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_expi_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {Imm12} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, Imm12);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    EXPIFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 12-bit immediate value.
   * @returns {Imm12}
   */
  imm12() {
    const ret2 = wasm$1.addi_imm12(this.__wbg_ptr);
    return Imm12.__wrap(ret2);
  }
};
var FLAGFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_flag_free(ptr >>> 0, 1));
var FLAG = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    FLAGFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_flag_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} value
   */
  constructor(value) {
    _assertClass(value, RegId);
    var ptr0 = value.__destroy_into_raw();
    const ret2 = wasm$1.aloc_new_typescript(ptr0);
    this.__wbg_ptr = ret2 >>> 0;
    FLAGFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.aloc_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var GMFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_gm_free(ptr >>> 0, 1));
var GM = class _GM {
  static __wrap(ptr) {
    ptr = ptr >>> 0;
    const obj = Object.create(_GM.prototype);
    obj.__wbg_ptr = ptr;
    GMFinalization.register(obj, obj.__wbg_ptr, obj);
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    GMFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_gm_free(ptr, 0);
  }
  /**
   * Construct a `GM` instruction from its arguments.
   * @param {RegId} ra
   * @param {GMArgs} args
   * @returns {GM}
   */
  static from_args(ra, args) {
    _assertClass(ra, RegId);
    var ptr0 = ra.__destroy_into_raw();
    const ret2 = wasm$1.gm_from_args(ptr0, args);
    return _GM.__wrap(ret2);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {Imm18} selector
   */
  constructor(dst, selector) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(selector, Imm18);
    var ptr1 = selector.__destroy_into_raw();
    const ret2 = wasm$1.gm_new_typescript(ptr0, ptr1);
    this.__wbg_ptr = ret2 >>> 0;
    GMFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 18-bit immediate value.
   * @returns {Imm18}
   */
  imm18() {
    const ret2 = wasm$1.gm_imm18(this.__wbg_ptr);
    return Imm18.__wrap(ret2);
  }
};
var GTFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_gt_free(ptr >>> 0, 1));
var GT = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    GTFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_gt_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    GTFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var GTFFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_gtf_free(ptr >>> 0, 1));
var GTF = class _GTF {
  static __wrap(ptr) {
    ptr = ptr >>> 0;
    const obj = Object.create(_GTF.prototype);
    obj.__wbg_ptr = ptr;
    GTFFinalization.register(obj, obj.__wbg_ptr, obj);
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    GTFFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_gtf_free(ptr, 0);
  }
  /**
   * Construct a `GTF` instruction from its arguments.
   * @param {RegId} ra
   * @param {RegId} rb
   * @param {GTFArgs} args
   * @returns {GTF}
   */
  static from_args(ra, rb, args) {
    _assertClass(ra, RegId);
    var ptr0 = ra.__destroy_into_raw();
    _assertClass(rb, RegId);
    var ptr1 = rb.__destroy_into_raw();
    const ret2 = wasm$1.gtf_from_args(ptr0, ptr1, args);
    return _GTF.__wrap(ret2);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} arg
   * @param {Imm12} selector
   */
  constructor(dst, arg, selector) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(arg, RegId);
    var ptr1 = arg.__destroy_into_raw();
    _assertClass(selector, Imm12);
    var ptr2 = selector.__destroy_into_raw();
    const ret2 = wasm$1.gtf_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    GTFFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 12-bit immediate value.
   * @returns {Imm12}
   */
  imm12() {
    const ret2 = wasm$1.addi_imm12(this.__wbg_ptr);
    return Imm12.__wrap(ret2);
  }
};
var Imm06Finalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_imm06_free(ptr >>> 0, 1));
var Imm06 = class _Imm06 {
  static __wrap(ptr) {
    ptr = ptr >>> 0;
    const obj = Object.create(_Imm06.prototype);
    obj.__wbg_ptr = ptr;
    Imm06Finalization.register(obj, obj.__wbg_ptr, obj);
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    Imm06Finalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_imm06_free(ptr, 0);
  }
};
var Imm12Finalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_imm12_free(ptr >>> 0, 1));
var Imm12 = class _Imm12 {
  static __wrap(ptr) {
    ptr = ptr >>> 0;
    const obj = Object.create(_Imm12.prototype);
    obj.__wbg_ptr = ptr;
    Imm12Finalization.register(obj, obj.__wbg_ptr, obj);
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    Imm12Finalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_imm12_free(ptr, 0);
  }
};
var Imm18Finalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_imm18_free(ptr >>> 0, 1));
var Imm18 = class _Imm18 {
  static __wrap(ptr) {
    ptr = ptr >>> 0;
    const obj = Object.create(_Imm18.prototype);
    obj.__wbg_ptr = ptr;
    Imm18Finalization.register(obj, obj.__wbg_ptr, obj);
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    Imm18Finalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_imm18_free(ptr, 0);
  }
};
var Imm24Finalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_imm24_free(ptr >>> 0, 1));
var Imm24 = class _Imm24 {
  static __wrap(ptr) {
    ptr = ptr >>> 0;
    const obj = Object.create(_Imm24.prototype);
    obj.__wbg_ptr = ptr;
    Imm24Finalization.register(obj, obj.__wbg_ptr, obj);
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    Imm24Finalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_imm24_free(ptr, 0);
  }
};
var InstructionFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_instruction_free(ptr >>> 0, 1));
var Instruction = class _Instruction {
  static __wrap(ptr) {
    ptr = ptr >>> 0;
    const obj = Object.create(_Instruction.prototype);
    obj.__wbg_ptr = ptr;
    InstructionFinalization.register(obj, obj.__wbg_ptr, obj);
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    InstructionFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_instruction_free(ptr, 0);
  }
  /**
   * Convenience method for converting to bytes
   * @returns {Uint8Array}
   */
  to_bytes() {
    try {
      const retptr = wasm$1.__wbindgen_add_to_stack_pointer(-16);
      wasm$1.instruction_to_bytes(retptr, this.__wbg_ptr);
      var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);
      var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);
      var v1 = getArrayU8FromWasm0(r0, r1).slice();
      wasm$1.__wbindgen_export_0(r0, r1 * 1, 1);
      return v1;
    } finally {
      wasm$1.__wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
   * Size of an instruction in bytes
   * @returns {number}
   */
  static size() {
    const ret2 = wasm$1.instruction_size();
    return ret2 >>> 0;
  }
};
var JIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_ji_free(ptr >>> 0, 1));
var JI = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    JIFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_ji_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {Imm24} abs_target
   */
  constructor(abs_target) {
    _assertClass(abs_target, Imm24);
    var ptr0 = abs_target.__destroy_into_raw();
    const ret2 = wasm$1.cfei_new_typescript(ptr0);
    this.__wbg_ptr = ret2 >>> 0;
    JIFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the 24-bit immediate value.
   * @returns {Imm24}
   */
  imm24() {
    const ret2 = wasm$1.cfei_imm24(this.__wbg_ptr);
    return Imm24.__wrap(ret2);
  }
};
var JMPFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_jmp_free(ptr >>> 0, 1));
var JMP = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    JMPFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_jmp_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} abs_target
   */
  constructor(abs_target) {
    _assertClass(abs_target, RegId);
    var ptr0 = abs_target.__destroy_into_raw();
    const ret2 = wasm$1.aloc_new_typescript(ptr0);
    this.__wbg_ptr = ret2 >>> 0;
    JMPFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.aloc_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var JMPBFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_jmpb_free(ptr >>> 0, 1));
var JMPB = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    JMPBFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_jmpb_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dynamic
   * @param {Imm18} fixed
   */
  constructor(dynamic, fixed) {
    _assertClass(dynamic, RegId);
    var ptr0 = dynamic.__destroy_into_raw();
    _assertClass(fixed, Imm18);
    var ptr1 = fixed.__destroy_into_raw();
    const ret2 = wasm$1.jmpb_new_typescript(ptr0, ptr1);
    this.__wbg_ptr = ret2 >>> 0;
    JMPBFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 18-bit immediate value.
   * @returns {Imm18}
   */
  imm18() {
    const ret2 = wasm$1.gm_imm18(this.__wbg_ptr);
    return Imm18.__wrap(ret2);
  }
};
var JMPFFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_jmpf_free(ptr >>> 0, 1));
var JMPF = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    JMPFFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_jmpf_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dynamic
   * @param {Imm18} fixed
   */
  constructor(dynamic, fixed) {
    _assertClass(dynamic, RegId);
    var ptr0 = dynamic.__destroy_into_raw();
    _assertClass(fixed, Imm18);
    var ptr1 = fixed.__destroy_into_raw();
    const ret2 = wasm$1.jmpb_new_typescript(ptr0, ptr1);
    this.__wbg_ptr = ret2 >>> 0;
    JMPFFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 18-bit immediate value.
   * @returns {Imm18}
   */
  imm18() {
    const ret2 = wasm$1.gm_imm18(this.__wbg_ptr);
    return Imm18.__wrap(ret2);
  }
};
var JNEFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_jne_free(ptr >>> 0, 1));
var JNE = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    JNEFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_jne_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} abs_target
   * @param {RegId} lhs
   * @param {RegId} rhs
   */
  constructor(abs_target, lhs, rhs) {
    _assertClass(abs_target, RegId);
    var ptr0 = abs_target.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    JNEFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var JNEBFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_jneb_free(ptr >>> 0, 1));
var JNEB = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    JNEBFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_jneb_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} cond_lhs
   * @param {RegId} cond_rhs
   * @param {RegId} dynamic
   * @param {Imm06} fixed
   */
  constructor(cond_lhs, cond_rhs, dynamic, fixed) {
    _assertClass(cond_lhs, RegId);
    var ptr0 = cond_lhs.__destroy_into_raw();
    _assertClass(cond_rhs, RegId);
    var ptr1 = cond_rhs.__destroy_into_raw();
    _assertClass(dynamic, RegId);
    var ptr2 = dynamic.__destroy_into_raw();
    _assertClass(fixed, Imm06);
    var ptr3 = fixed.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    JNEBFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 6-bit immediate value.
   * @returns {Imm06}
   */
  imm06() {
    const ret2 = wasm$1.jneb_imm06(this.__wbg_ptr);
    return Imm06.__wrap(ret2);
  }
};
var JNEFFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_jnef_free(ptr >>> 0, 1));
var JNEF = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    JNEFFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_jnef_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} cond_lhs
   * @param {RegId} cond_rhs
   * @param {RegId} dynamic
   * @param {Imm06} fixed
   */
  constructor(cond_lhs, cond_rhs, dynamic, fixed) {
    _assertClass(cond_lhs, RegId);
    var ptr0 = cond_lhs.__destroy_into_raw();
    _assertClass(cond_rhs, RegId);
    var ptr1 = cond_rhs.__destroy_into_raw();
    _assertClass(dynamic, RegId);
    var ptr2 = dynamic.__destroy_into_raw();
    _assertClass(fixed, Imm06);
    var ptr3 = fixed.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    JNEFFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 6-bit immediate value.
   * @returns {Imm06}
   */
  imm06() {
    const ret2 = wasm$1.jneb_imm06(this.__wbg_ptr);
    return Imm06.__wrap(ret2);
  }
};
var JNEIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_jnei_free(ptr >>> 0, 1));
var JNEI = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    JNEIFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_jnei_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} cond_lhs
   * @param {RegId} cond_rhs
   * @param {Imm12} abs_target
   */
  constructor(cond_lhs, cond_rhs, abs_target) {
    _assertClass(cond_lhs, RegId);
    var ptr0 = cond_lhs.__destroy_into_raw();
    _assertClass(cond_rhs, RegId);
    var ptr1 = cond_rhs.__destroy_into_raw();
    _assertClass(abs_target, Imm12);
    var ptr2 = abs_target.__destroy_into_raw();
    const ret2 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    JNEIFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 12-bit immediate value.
   * @returns {Imm12}
   */
  imm12() {
    const ret2 = wasm$1.addi_imm12(this.__wbg_ptr);
    return Imm12.__wrap(ret2);
  }
};
var JNZBFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_jnzb_free(ptr >>> 0, 1));
var JNZB = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    JNZBFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_jnzb_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} cond_nz
   * @param {RegId} dynamic
   * @param {Imm12} fixed
   */
  constructor(cond_nz, dynamic, fixed) {
    _assertClass(cond_nz, RegId);
    var ptr0 = cond_nz.__destroy_into_raw();
    _assertClass(dynamic, RegId);
    var ptr1 = dynamic.__destroy_into_raw();
    _assertClass(fixed, Imm12);
    var ptr2 = fixed.__destroy_into_raw();
    const ret2 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    JNZBFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 12-bit immediate value.
   * @returns {Imm12}
   */
  imm12() {
    const ret2 = wasm$1.addi_imm12(this.__wbg_ptr);
    return Imm12.__wrap(ret2);
  }
};
var JNZFFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_jnzf_free(ptr >>> 0, 1));
var JNZF = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    JNZFFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_jnzf_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} cond_nz
   * @param {RegId} dynamic
   * @param {Imm12} fixed
   */
  constructor(cond_nz, dynamic, fixed) {
    _assertClass(cond_nz, RegId);
    var ptr0 = cond_nz.__destroy_into_raw();
    _assertClass(dynamic, RegId);
    var ptr1 = dynamic.__destroy_into_raw();
    _assertClass(fixed, Imm12);
    var ptr2 = fixed.__destroy_into_raw();
    const ret2 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    JNZFFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 12-bit immediate value.
   * @returns {Imm12}
   */
  imm12() {
    const ret2 = wasm$1.addi_imm12(this.__wbg_ptr);
    return Imm12.__wrap(ret2);
  }
};
var JNZIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_jnzi_free(ptr >>> 0, 1));
var JNZI = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    JNZIFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_jnzi_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} cond_nz
   * @param {Imm18} abs_target
   */
  constructor(cond_nz, abs_target) {
    _assertClass(cond_nz, RegId);
    var ptr0 = cond_nz.__destroy_into_raw();
    _assertClass(abs_target, Imm18);
    var ptr1 = abs_target.__destroy_into_raw();
    const ret2 = wasm$1.jmpb_new_typescript(ptr0, ptr1);
    this.__wbg_ptr = ret2 >>> 0;
    JNZIFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 18-bit immediate value.
   * @returns {Imm18}
   */
  imm18() {
    const ret2 = wasm$1.gm_imm18(this.__wbg_ptr);
    return Imm18.__wrap(ret2);
  }
};
var K256Finalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_k256_free(ptr >>> 0, 1));
var K256 = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    K256Finalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_k256_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst_addr
   * @param {RegId} src_addr
   * @param {RegId} len
   */
  constructor(dst_addr, src_addr, len) {
    _assertClass(dst_addr, RegId);
    var ptr0 = dst_addr.__destroy_into_raw();
    _assertClass(src_addr, RegId);
    var ptr1 = src_addr.__destroy_into_raw();
    _assertClass(len, RegId);
    var ptr2 = len.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    K256Finalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var LBFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_lb_free(ptr >>> 0, 1));
var LB = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    LBFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_lb_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} addr
   * @param {Imm12} offset
   */
  constructor(dst, addr, offset) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(addr, RegId);
    var ptr1 = addr.__destroy_into_raw();
    _assertClass(offset, Imm12);
    var ptr2 = offset.__destroy_into_raw();
    const ret2 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    LBFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 12-bit immediate value.
   * @returns {Imm12}
   */
  imm12() {
    const ret2 = wasm$1.addi_imm12(this.__wbg_ptr);
    return Imm12.__wrap(ret2);
  }
};
var LDCFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_ldc_free(ptr >>> 0, 1));
var LDC = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    LDCFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_ldc_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} src_addr
   * @param {RegId} offset
   * @param {RegId} len
   * @param {Imm06} mode
   */
  constructor(src_addr, offset, len, mode) {
    _assertClass(src_addr, RegId);
    var ptr0 = src_addr.__destroy_into_raw();
    _assertClass(offset, RegId);
    var ptr1 = offset.__destroy_into_raw();
    _assertClass(len, RegId);
    var ptr2 = len.__destroy_into_raw();
    _assertClass(mode, Imm06);
    var ptr3 = mode.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    LDCFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 6-bit immediate value.
   * @returns {Imm06}
   */
  imm06() {
    const ret2 = wasm$1.jneb_imm06(this.__wbg_ptr);
    return Imm06.__wrap(ret2);
  }
};
var LOGFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_log_free(ptr >>> 0, 1));
var LOG = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    LOGFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_log_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} a
   * @param {RegId} b
   * @param {RegId} c
   * @param {RegId} d
   */
  constructor(a, b, c, d) {
    _assertClass(a, RegId);
    var ptr0 = a.__destroy_into_raw();
    _assertClass(b, RegId);
    var ptr1 = b.__destroy_into_raw();
    _assertClass(c, RegId);
    var ptr2 = c.__destroy_into_raw();
    _assertClass(d, RegId);
    var ptr3 = d.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    LOGFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var LOGDFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_logd_free(ptr >>> 0, 1));
var LOGD = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    LOGDFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_logd_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} a
   * @param {RegId} b
   * @param {RegId} addr
   * @param {RegId} len
   */
  constructor(a, b, addr, len) {
    _assertClass(a, RegId);
    var ptr0 = a.__destroy_into_raw();
    _assertClass(b, RegId);
    var ptr1 = b.__destroy_into_raw();
    _assertClass(addr, RegId);
    var ptr2 = addr.__destroy_into_raw();
    _assertClass(len, RegId);
    var ptr3 = len.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    LOGDFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var LTFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_lt_free(ptr >>> 0, 1));
var LT = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    LTFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_lt_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    LTFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var LWFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_lw_free(ptr >>> 0, 1));
var LW = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    LWFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_lw_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} addr
   * @param {Imm12} offset
   */
  constructor(dst, addr, offset) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(addr, RegId);
    var ptr1 = addr.__destroy_into_raw();
    _assertClass(offset, Imm12);
    var ptr2 = offset.__destroy_into_raw();
    const ret2 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    LWFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 12-bit immediate value.
   * @returns {Imm12}
   */
  imm12() {
    const ret2 = wasm$1.addi_imm12(this.__wbg_ptr);
    return Imm12.__wrap(ret2);
  }
};
var MCLFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mcl_free(ptr >>> 0, 1));
var MCL = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    MCLFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_mcl_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst_addr
   * @param {RegId} len
   */
  constructor(dst_addr, len) {
    _assertClass(dst_addr, RegId);
    var ptr0 = dst_addr.__destroy_into_raw();
    _assertClass(len, RegId);
    var ptr1 = len.__destroy_into_raw();
    const ret2 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
    this.__wbg_ptr = ret2 >>> 0;
    MCLFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var MCLIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mcli_free(ptr >>> 0, 1));
var MCLI = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    MCLIFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_mcli_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} addr
   * @param {Imm18} count
   */
  constructor(addr, count2) {
    _assertClass(addr, RegId);
    var ptr0 = addr.__destroy_into_raw();
    _assertClass(count2, Imm18);
    var ptr1 = count2.__destroy_into_raw();
    const ret2 = wasm$1.jmpb_new_typescript(ptr0, ptr1);
    this.__wbg_ptr = ret2 >>> 0;
    MCLIFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 18-bit immediate value.
   * @returns {Imm18}
   */
  imm18() {
    const ret2 = wasm$1.gm_imm18(this.__wbg_ptr);
    return Imm18.__wrap(ret2);
  }
};
var MCPFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mcp_free(ptr >>> 0, 1));
var MCP = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    MCPFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_mcp_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst_addr
   * @param {RegId} src_addr
   * @param {RegId} len
   */
  constructor(dst_addr, src_addr, len) {
    _assertClass(dst_addr, RegId);
    var ptr0 = dst_addr.__destroy_into_raw();
    _assertClass(src_addr, RegId);
    var ptr1 = src_addr.__destroy_into_raw();
    _assertClass(len, RegId);
    var ptr2 = len.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    MCPFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var MCPIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mcpi_free(ptr >>> 0, 1));
var MCPI = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    MCPIFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_mcpi_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst_addr
   * @param {RegId} src_addr
   * @param {Imm12} len
   */
  constructor(dst_addr, src_addr, len) {
    _assertClass(dst_addr, RegId);
    var ptr0 = dst_addr.__destroy_into_raw();
    _assertClass(src_addr, RegId);
    var ptr1 = src_addr.__destroy_into_raw();
    _assertClass(len, Imm12);
    var ptr2 = len.__destroy_into_raw();
    const ret2 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    MCPIFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 12-bit immediate value.
   * @returns {Imm12}
   */
  imm12() {
    const ret2 = wasm$1.addi_imm12(this.__wbg_ptr);
    return Imm12.__wrap(ret2);
  }
};
var MEQFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_meq_free(ptr >>> 0, 1));
var MEQ = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    MEQFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_meq_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} result
   * @param {RegId} lhs_addr
   * @param {RegId} rhs_addr
   * @param {RegId} len
   */
  constructor(result, lhs_addr, rhs_addr, len) {
    _assertClass(result, RegId);
    var ptr0 = result.__destroy_into_raw();
    _assertClass(lhs_addr, RegId);
    var ptr1 = lhs_addr.__destroy_into_raw();
    _assertClass(rhs_addr, RegId);
    var ptr2 = rhs_addr.__destroy_into_raw();
    _assertClass(len, RegId);
    var ptr3 = len.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    MEQFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var MINTFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mint_free(ptr >>> 0, 1));
var MINT = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    MINTFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_mint_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} amount
   * @param {RegId} sub_id_addr
   */
  constructor(amount, sub_id_addr) {
    _assertClass(amount, RegId);
    var ptr0 = amount.__destroy_into_raw();
    _assertClass(sub_id_addr, RegId);
    var ptr1 = sub_id_addr.__destroy_into_raw();
    const ret2 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
    this.__wbg_ptr = ret2 >>> 0;
    MINTFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var MLDVFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mldv_free(ptr >>> 0, 1));
var MLDV = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    MLDVFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_mldv_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} mul_lhs
   * @param {RegId} mul_rhs
   * @param {RegId} divisor
   */
  constructor(dst, mul_lhs, mul_rhs, divisor) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(mul_lhs, RegId);
    var ptr1 = mul_lhs.__destroy_into_raw();
    _assertClass(mul_rhs, RegId);
    var ptr2 = mul_rhs.__destroy_into_raw();
    _assertClass(divisor, RegId);
    var ptr3 = divisor.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    MLDVFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var MLOGFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mlog_free(ptr >>> 0, 1));
var MLOG = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    MLOGFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_mlog_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    MLOGFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var MODFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mod_free(ptr >>> 0, 1));
var MOD = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    MODFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_mod_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    MODFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var MODIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_modi_free(ptr >>> 0, 1));
var MODI = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    MODIFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_modi_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {Imm12} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, Imm12);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    MODIFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 12-bit immediate value.
   * @returns {Imm12}
   */
  imm12() {
    const ret2 = wasm$1.addi_imm12(this.__wbg_ptr);
    return Imm12.__wrap(ret2);
  }
};
var MOVEFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_move_free(ptr >>> 0, 1));
var MOVE = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    MOVEFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_move_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} src
   */
  constructor(dst, src) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(src, RegId);
    var ptr1 = src.__destroy_into_raw();
    const ret2 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
    this.__wbg_ptr = ret2 >>> 0;
    MOVEFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var MOVIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_movi_free(ptr >>> 0, 1));
var MOVI = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    MOVIFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_movi_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {Imm18} val
   */
  constructor(dst, val) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(val, Imm18);
    var ptr1 = val.__destroy_into_raw();
    const ret2 = wasm$1.jmpb_new_typescript(ptr0, ptr1);
    this.__wbg_ptr = ret2 >>> 0;
    MOVIFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 18-bit immediate value.
   * @returns {Imm18}
   */
  imm18() {
    const ret2 = wasm$1.gm_imm18(this.__wbg_ptr);
    return Imm18.__wrap(ret2);
  }
};
var MROOFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mroo_free(ptr >>> 0, 1));
var MROO = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    MROOFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_mroo_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    MROOFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var MULFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mul_free(ptr >>> 0, 1));
var MUL = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    MULFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_mul_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    MULFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var MULIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_muli_free(ptr >>> 0, 1));
var MULI = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    MULIFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_muli_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {Imm12} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, Imm12);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    MULIFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 12-bit immediate value.
   * @returns {Imm12}
   */
  imm12() {
    const ret2 = wasm$1.addi_imm12(this.__wbg_ptr);
    return Imm12.__wrap(ret2);
  }
};
var MathArgsFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mathargs_free(ptr >>> 0, 1));
var MathArgs = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    MathArgsFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_mathargs_free(ptr, 0);
  }
  /**
   * The operation to perform
   * @returns {MathOp}
   */
  get op() {
    const ret2 = wasm$1.__wbg_get_mathargs_op(this.__wbg_ptr);
    return ret2;
  }
  /**
   * The operation to perform
   * @param {MathOp} arg0
   */
  set op(arg0) {
    wasm$1.__wbg_set_mathargs_op(this.__wbg_ptr, arg0);
  }
  /**
   * Load RHS from register if true, otherwise zero-extend register value
   * @returns {boolean}
   */
  get indirect_rhs() {
    const ret2 = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);
    return ret2 !== 0;
  }
  /**
   * Load RHS from register if true, otherwise zero-extend register value
   * @param {boolean} arg0
   */
  set indirect_rhs(arg0) {
    wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);
  }
};
var MulArgsFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mulargs_free(ptr >>> 0, 1));
var MulArgs = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    MulArgsFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_mulargs_free(ptr, 0);
  }
  /**
   * Load LHSS from register if true, otherwise zero-extend register value
   * @returns {boolean}
   */
  get indirect_lhs() {
    const ret2 = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);
    return ret2 !== 0;
  }
  /**
   * Load LHSS from register if true, otherwise zero-extend register value
   * @param {boolean} arg0
   */
  set indirect_lhs(arg0) {
    wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);
  }
  /**
   * Load RHS from register if true, otherwise zero-extend register value
   * @returns {boolean}
   */
  get indirect_rhs() {
    const ret2 = wasm$1.__wbg_get_mulargs_indirect_rhs(this.__wbg_ptr);
    return ret2 !== 0;
  }
  /**
   * Load RHS from register if true, otherwise zero-extend register value
   * @param {boolean} arg0
   */
  set indirect_rhs(arg0) {
    wasm$1.__wbg_set_mulargs_indirect_rhs(this.__wbg_ptr, arg0);
  }
};
var NOOPFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_noop_free(ptr >>> 0, 1));
var NOOP = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    NOOPFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_noop_free(ptr, 0);
  }
  /**
   * Construct the instruction.
   */
  constructor() {
    const ret2 = wasm$1.noop_new_typescript();
    this.__wbg_ptr = ret2 >>> 0;
    NOOPFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
};
var NOTFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_not_free(ptr >>> 0, 1));
var NOT = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    NOTFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_not_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} arg
   */
  constructor(dst, arg) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(arg, RegId);
    var ptr1 = arg.__destroy_into_raw();
    const ret2 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
    this.__wbg_ptr = ret2 >>> 0;
    NOTFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var ORFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_or_free(ptr >>> 0, 1));
var OR = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    ORFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_or_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    ORFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var ORIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_ori_free(ptr >>> 0, 1));
var ORI = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    ORIFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_ori_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {Imm12} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, Imm12);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    ORIFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 12-bit immediate value.
   * @returns {Imm12}
   */
  imm12() {
    const ret2 = wasm$1.addi_imm12(this.__wbg_ptr);
    return Imm12.__wrap(ret2);
  }
};
var POPHFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_poph_free(ptr >>> 0, 1));
var POPH = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    POPHFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_poph_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {Imm24} bitmask
   */
  constructor(bitmask) {
    _assertClass(bitmask, Imm24);
    var ptr0 = bitmask.__destroy_into_raw();
    const ret2 = wasm$1.cfei_new_typescript(ptr0);
    this.__wbg_ptr = ret2 >>> 0;
    POPHFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the 24-bit immediate value.
   * @returns {Imm24}
   */
  imm24() {
    const ret2 = wasm$1.cfei_imm24(this.__wbg_ptr);
    return Imm24.__wrap(ret2);
  }
};
var POPLFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_popl_free(ptr >>> 0, 1));
var POPL = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    POPLFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_popl_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {Imm24} bitmask
   */
  constructor(bitmask) {
    _assertClass(bitmask, Imm24);
    var ptr0 = bitmask.__destroy_into_raw();
    const ret2 = wasm$1.cfei_new_typescript(ptr0);
    this.__wbg_ptr = ret2 >>> 0;
    POPLFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the 24-bit immediate value.
   * @returns {Imm24}
   */
  imm24() {
    const ret2 = wasm$1.cfei_imm24(this.__wbg_ptr);
    return Imm24.__wrap(ret2);
  }
};
var PSHHFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_pshh_free(ptr >>> 0, 1));
var PSHH = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    PSHHFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_pshh_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {Imm24} bitmask
   */
  constructor(bitmask) {
    _assertClass(bitmask, Imm24);
    var ptr0 = bitmask.__destroy_into_raw();
    const ret2 = wasm$1.cfei_new_typescript(ptr0);
    this.__wbg_ptr = ret2 >>> 0;
    PSHHFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the 24-bit immediate value.
   * @returns {Imm24}
   */
  imm24() {
    const ret2 = wasm$1.cfei_imm24(this.__wbg_ptr);
    return Imm24.__wrap(ret2);
  }
};
var PSHLFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_pshl_free(ptr >>> 0, 1));
var PSHL = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    PSHLFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_pshl_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {Imm24} bitmask
   */
  constructor(bitmask) {
    _assertClass(bitmask, Imm24);
    var ptr0 = bitmask.__destroy_into_raw();
    const ret2 = wasm$1.cfei_new_typescript(ptr0);
    this.__wbg_ptr = ret2 >>> 0;
    PSHLFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the 24-bit immediate value.
   * @returns {Imm24}
   */
  imm24() {
    const ret2 = wasm$1.cfei_imm24(this.__wbg_ptr);
    return Imm24.__wrap(ret2);
  }
};
var PanicInstructionFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_panicinstruction_free(ptr >>> 0, 1));
var PanicInstruction = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    PanicInstructionFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_panicinstruction_free(ptr, 0);
  }
  /**
   * Represents an error described by a reason and an instruction.
   * @param {PanicReason} reason
   * @param {number} instruction
   */
  constructor(reason, instruction) {
    const ret2 = wasm$1.panicinstruction_error_typescript(reason, instruction);
    this.__wbg_ptr = ret2 >>> 0;
    PanicInstructionFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Underlying panic reason
   * @returns {PanicReason}
   */
  reason() {
    const ret2 = wasm$1.panicinstruction_reason(this.__wbg_ptr);
    return ret2;
  }
  /**
   * Underlying instruction
   * @returns {number}
   */
  instruction() {
    const ret2 = wasm$1.panicinstruction_instruction(this.__wbg_ptr);
    return ret2 >>> 0;
  }
};
var RETFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_ret_free(ptr >>> 0, 1));
var RET = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    RETFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_ret_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} value
   */
  constructor(value) {
    _assertClass(value, RegId);
    var ptr0 = value.__destroy_into_raw();
    const ret2 = wasm$1.aloc_new_typescript(ptr0);
    this.__wbg_ptr = ret2 >>> 0;
    RETFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.aloc_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var RETDFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_retd_free(ptr >>> 0, 1));
var RETD = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    RETDFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_retd_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} addr
   * @param {RegId} len
   */
  constructor(addr, len) {
    _assertClass(addr, RegId);
    var ptr0 = addr.__destroy_into_raw();
    _assertClass(len, RegId);
    var ptr1 = len.__destroy_into_raw();
    const ret2 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
    this.__wbg_ptr = ret2 >>> 0;
    RETDFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var RVRTFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_rvrt_free(ptr >>> 0, 1));
var RVRT = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    RVRTFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_rvrt_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} value
   */
  constructor(value) {
    _assertClass(value, RegId);
    var ptr0 = value.__destroy_into_raw();
    const ret2 = wasm$1.aloc_new_typescript(ptr0);
    this.__wbg_ptr = ret2 >>> 0;
    RVRTFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.aloc_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var RegIdFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_regid_free(ptr >>> 0, 1));
var RegId = class _RegId {
  static __wrap(ptr) {
    ptr = ptr >>> 0;
    const obj = Object.create(_RegId.prototype);
    obj.__wbg_ptr = ptr;
    RegIdFinalization.register(obj, obj.__wbg_ptr, obj);
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    RegIdFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_regid_free(ptr, 0);
  }
  /**
   * Construct a register ID from the given value.
   *
   * Returns `None` if the value is outside the 6-bit value range.
   * @param {number} u
   * @returns {RegId | undefined}
   */
  static new_checked(u) {
    const ret2 = wasm$1.regid_new_checked(u);
    return ret2 === 0 ? void 0 : _RegId.__wrap(ret2);
  }
  /**
   * Received balance for this context.
   * @returns {RegId}
   */
  static bal() {
    const ret2 = wasm$1.regid_bal();
    return _RegId.__wrap(ret2);
  }
  /**
   * Remaining gas in the context.
   * @returns {RegId}
   */
  static cgas() {
    const ret2 = wasm$1.regid_cgas();
    return _RegId.__wrap(ret2);
  }
  /**
   * Error codes for particular operations.
   * @returns {RegId}
   */
  static err() {
    const ret2 = wasm$1.regid_err();
    return _RegId.__wrap(ret2);
  }
  /**
   * Flags register.
   * @returns {RegId}
   */
  static flag() {
    const ret2 = wasm$1.regid_flag();
    return _RegId.__wrap(ret2);
  }
  /**
   * Frame pointer. Memory address of beginning of current call frame.
   * @returns {RegId}
   */
  static fp() {
    const ret2 = wasm$1.regid_fp();
    return _RegId.__wrap(ret2);
  }
  /**
   * Remaining gas globally.
   * @returns {RegId}
   */
  static ggas() {
    const ret2 = wasm$1.regid_ggas();
    return _RegId.__wrap(ret2);
  }
  /**
   * Heap pointer. Memory address below the current bottom of the heap (points to free
   * memory).
   * @returns {RegId}
   */
  static hp() {
    const ret2 = wasm$1.regid_hp();
    return _RegId.__wrap(ret2);
  }
  /**
   * Instructions start. Pointer to the start of the currently-executing code.
   * @returns {RegId}
   */
  static is() {
    const ret2 = wasm$1.regid_is();
    return _RegId.__wrap(ret2);
  }
  /**
   * Contains overflow/underflow of addition, subtraction, and multiplication.
   * @returns {RegId}
   */
  static of() {
    const ret2 = wasm$1.regid_of();
    return _RegId.__wrap(ret2);
  }
  /**
   * Contains one (1), for convenience.
   * @returns {RegId}
   */
  static one() {
    const ret2 = wasm$1.regid_one();
    return _RegId.__wrap(ret2);
  }
  /**
   * The program counter. Memory address of the current instruction.
   * @returns {RegId}
   */
  static pc() {
    const ret2 = wasm$1.regid_pc();
    return _RegId.__wrap(ret2);
  }
  /**
   * Return value or pointer.
   * @returns {RegId}
   */
  static ret() {
    const ret2 = wasm$1.regid_ret();
    return _RegId.__wrap(ret2);
  }
  /**
   * Return value length in bytes.
   * @returns {RegId}
   */
  static retl() {
    const ret2 = wasm$1.regid_retl();
    return _RegId.__wrap(ret2);
  }
  /**
   * Stack pointer. Memory address on top of current writable stack area (points to
   * free memory).
   * @returns {RegId}
   */
  static sp() {
    const ret2 = wasm$1.regid_sp();
    return _RegId.__wrap(ret2);
  }
  /**
   * Stack start pointer. Memory address of bottom of current writable stack area.
   * @returns {RegId}
   */
  static spp() {
    const ret2 = wasm$1.regid_spp();
    return _RegId.__wrap(ret2);
  }
  /**
   * Smallest writable register.
   * @returns {RegId}
   */
  static writable() {
    const ret2 = wasm$1.regid_writable();
    return _RegId.__wrap(ret2);
  }
  /**
   * Contains zero (0), for convenience.
   * @returns {RegId}
   */
  static zero() {
    const ret2 = wasm$1.regid_zero();
    return _RegId.__wrap(ret2);
  }
  /**
   * Construct a register ID from the given value.
   *
   * The given value will be masked to 6 bits.
   * @param {number} u
   */
  constructor(u) {
    const ret2 = wasm$1.regid_new_typescript(u);
    this.__wbg_ptr = ret2 >>> 0;
    RegIdFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * A const alternative to the `Into<u8>` implementation.
   * @returns {number}
   */
  to_u8() {
    const ptr = this.__destroy_into_raw();
    const ret2 = wasm$1.regid_to_u8(ptr);
    return ret2;
  }
};
var S256Finalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_s256_free(ptr >>> 0, 1));
var S256 = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    S256Finalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_s256_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst_addr
   * @param {RegId} src_addr
   * @param {RegId} len
   */
  constructor(dst_addr, src_addr, len) {
    _assertClass(dst_addr, RegId);
    var ptr0 = dst_addr.__destroy_into_raw();
    _assertClass(src_addr, RegId);
    var ptr1 = src_addr.__destroy_into_raw();
    _assertClass(len, RegId);
    var ptr2 = len.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    S256Finalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var SBFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_sb_free(ptr >>> 0, 1));
var SB = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    SBFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_sb_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} addr
   * @param {RegId} value
   * @param {Imm12} offset
   */
  constructor(addr, value, offset) {
    _assertClass(addr, RegId);
    var ptr0 = addr.__destroy_into_raw();
    _assertClass(value, RegId);
    var ptr1 = value.__destroy_into_raw();
    _assertClass(offset, Imm12);
    var ptr2 = offset.__destroy_into_raw();
    const ret2 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    SBFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 12-bit immediate value.
   * @returns {Imm12}
   */
  imm12() {
    const ret2 = wasm$1.addi_imm12(this.__wbg_ptr);
    return Imm12.__wrap(ret2);
  }
};
var SCWQFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_scwq_free(ptr >>> 0, 1));
var SCWQ = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    SCWQFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_scwq_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} key_addr
   * @param {RegId} status
   * @param {RegId} lenq
   */
  constructor(key_addr, status, lenq) {
    _assertClass(key_addr, RegId);
    var ptr0 = key_addr.__destroy_into_raw();
    _assertClass(status, RegId);
    var ptr1 = status.__destroy_into_raw();
    _assertClass(lenq, RegId);
    var ptr2 = lenq.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    SCWQFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var SLLFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_sll_free(ptr >>> 0, 1));
var SLL = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    SLLFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_sll_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    SLLFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var SLLIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_slli_free(ptr >>> 0, 1));
var SLLI = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    SLLIFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_slli_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {Imm12} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, Imm12);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    SLLIFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 12-bit immediate value.
   * @returns {Imm12}
   */
  imm12() {
    const ret2 = wasm$1.addi_imm12(this.__wbg_ptr);
    return Imm12.__wrap(ret2);
  }
};
var SMOFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_smo_free(ptr >>> 0, 1));
var SMO = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    SMOFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_smo_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} recipient_addr
   * @param {RegId} data_addr
   * @param {RegId} data_len
   * @param {RegId} coins
   */
  constructor(recipient_addr, data_addr, data_len, coins) {
    _assertClass(recipient_addr, RegId);
    var ptr0 = recipient_addr.__destroy_into_raw();
    _assertClass(data_addr, RegId);
    var ptr1 = data_addr.__destroy_into_raw();
    _assertClass(data_len, RegId);
    var ptr2 = data_len.__destroy_into_raw();
    _assertClass(coins, RegId);
    var ptr3 = coins.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    SMOFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var SRLFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_srl_free(ptr >>> 0, 1));
var SRL = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    SRLFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_srl_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    SRLFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var SRLIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_srli_free(ptr >>> 0, 1));
var SRLI = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    SRLIFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_srli_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {Imm12} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, Imm12);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    SRLIFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 12-bit immediate value.
   * @returns {Imm12}
   */
  imm12() {
    const ret2 = wasm$1.addi_imm12(this.__wbg_ptr);
    return Imm12.__wrap(ret2);
  }
};
var SRWFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_srw_free(ptr >>> 0, 1));
var SRW = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    SRWFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_srw_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} status
   * @param {RegId} key_addr
   */
  constructor(dst, status, key_addr) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(status, RegId);
    var ptr1 = status.__destroy_into_raw();
    _assertClass(key_addr, RegId);
    var ptr2 = key_addr.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    SRWFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var SRWQFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_srwq_free(ptr >>> 0, 1));
var SRWQ = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    SRWQFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_srwq_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst_addr
   * @param {RegId} status
   * @param {RegId} key_addr
   * @param {RegId} lenq
   */
  constructor(dst_addr, status, key_addr, lenq) {
    _assertClass(dst_addr, RegId);
    var ptr0 = dst_addr.__destroy_into_raw();
    _assertClass(status, RegId);
    var ptr1 = status.__destroy_into_raw();
    _assertClass(key_addr, RegId);
    var ptr2 = key_addr.__destroy_into_raw();
    _assertClass(lenq, RegId);
    var ptr3 = lenq.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    SRWQFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var SUBFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_sub_free(ptr >>> 0, 1));
var SUB = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    SUBFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_sub_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    SUBFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var SUBIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_subi_free(ptr >>> 0, 1));
var SUBI = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    SUBIFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_subi_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {Imm12} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, Imm12);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    SUBIFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 12-bit immediate value.
   * @returns {Imm12}
   */
  imm12() {
    const ret2 = wasm$1.addi_imm12(this.__wbg_ptr);
    return Imm12.__wrap(ret2);
  }
};
var SWFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_sw_free(ptr >>> 0, 1));
var SW = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    SWFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_sw_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} addr
   * @param {RegId} value
   * @param {Imm12} offset
   */
  constructor(addr, value, offset) {
    _assertClass(addr, RegId);
    var ptr0 = addr.__destroy_into_raw();
    _assertClass(value, RegId);
    var ptr1 = value.__destroy_into_raw();
    _assertClass(offset, Imm12);
    var ptr2 = offset.__destroy_into_raw();
    const ret2 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    SWFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 12-bit immediate value.
   * @returns {Imm12}
   */
  imm12() {
    const ret2 = wasm$1.addi_imm12(this.__wbg_ptr);
    return Imm12.__wrap(ret2);
  }
};
var SWWFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_sww_free(ptr >>> 0, 1));
var SWW = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    SWWFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_sww_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} key_addr
   * @param {RegId} status
   * @param {RegId} value
   */
  constructor(key_addr, status, value) {
    _assertClass(key_addr, RegId);
    var ptr0 = key_addr.__destroy_into_raw();
    _assertClass(status, RegId);
    var ptr1 = status.__destroy_into_raw();
    _assertClass(value, RegId);
    var ptr2 = value.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    SWWFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var SWWQFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_swwq_free(ptr >>> 0, 1));
var SWWQ = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    SWWQFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_swwq_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} key_addr
   * @param {RegId} status
   * @param {RegId} src_addr
   * @param {RegId} lenq
   */
  constructor(key_addr, status, src_addr, lenq) {
    _assertClass(key_addr, RegId);
    var ptr0 = key_addr.__destroy_into_raw();
    _assertClass(status, RegId);
    var ptr1 = status.__destroy_into_raw();
    _assertClass(src_addr, RegId);
    var ptr2 = src_addr.__destroy_into_raw();
    _assertClass(lenq, RegId);
    var ptr3 = lenq.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    SWWQFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var TIMEFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_time_free(ptr >>> 0, 1));
var TIME = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    TIMEFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_time_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} heigth
   */
  constructor(dst, heigth) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(heigth, RegId);
    var ptr1 = heigth.__destroy_into_raw();
    const ret2 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
    this.__wbg_ptr = ret2 >>> 0;
    TIMEFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var TRFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_tr_free(ptr >>> 0, 1));
var TR = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    TRFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_tr_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} contract_id_addr
   * @param {RegId} amount
   * @param {RegId} asset_id_addr
   */
  constructor(contract_id_addr, amount, asset_id_addr) {
    _assertClass(contract_id_addr, RegId);
    var ptr0 = contract_id_addr.__destroy_into_raw();
    _assertClass(amount, RegId);
    var ptr1 = amount.__destroy_into_raw();
    _assertClass(asset_id_addr, RegId);
    var ptr2 = asset_id_addr.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    TRFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var TROFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_tro_free(ptr >>> 0, 1));
var TRO = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    TROFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_tro_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} contract_id_addr
   * @param {RegId} output_index
   * @param {RegId} amount
   * @param {RegId} asset_id_addr
   */
  constructor(contract_id_addr, output_index, amount, asset_id_addr) {
    _assertClass(contract_id_addr, RegId);
    var ptr0 = contract_id_addr.__destroy_into_raw();
    _assertClass(output_index, RegId);
    var ptr1 = output_index.__destroy_into_raw();
    _assertClass(amount, RegId);
    var ptr2 = amount.__destroy_into_raw();
    _assertClass(asset_id_addr, RegId);
    var ptr3 = asset_id_addr.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    TROFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var WDAMFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wdam_free(ptr >>> 0, 1));
var WDAM = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    WDAMFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_wdam_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} add_lhs
   * @param {RegId} add_rhs
   * @param {RegId} modulo
   */
  constructor(dst, add_lhs, add_rhs, modulo3) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(add_lhs, RegId);
    var ptr1 = add_lhs.__destroy_into_raw();
    _assertClass(add_rhs, RegId);
    var ptr2 = add_rhs.__destroy_into_raw();
    _assertClass(modulo3, RegId);
    var ptr3 = modulo3.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    WDAMFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var WDCMFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wdcm_free(ptr >>> 0, 1));
var WDCM = class _WDCM {
  static __wrap(ptr) {
    ptr = ptr >>> 0;
    const obj = Object.create(_WDCM.prototype);
    obj.__wbg_ptr = ptr;
    WDCMFinalization.register(obj, obj.__wbg_ptr, obj);
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    WDCMFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_wdcm_free(ptr, 0);
  }
  /**
   * Construct a `WDCM` instruction from its arguments.
   * @param {RegId} ra
   * @param {RegId} rb
   * @param {RegId} rc
   * @param {CompareArgs} args
   * @returns {WDCM}
   */
  static from_args(ra, rb, rc, args) {
    _assertClass(ra, RegId);
    var ptr0 = ra.__destroy_into_raw();
    _assertClass(rb, RegId);
    var ptr1 = rb.__destroy_into_raw();
    _assertClass(rc, RegId);
    var ptr2 = rc.__destroy_into_raw();
    _assertClass(args, CompareArgs);
    var ptr3 = args.__destroy_into_raw();
    const ret2 = wasm$1.wdcm_from_args(ptr0, ptr1, ptr2, ptr3);
    return _WDCM.__wrap(ret2);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   * @param {Imm06} flags
   */
  constructor(dst, lhs, rhs, flags) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    _assertClass(flags, Imm06);
    var ptr3 = flags.__destroy_into_raw();
    const ret2 = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    WDCMFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 6-bit immediate value.
   * @returns {Imm06}
   */
  imm06() {
    const ret2 = wasm$1.jneb_imm06(this.__wbg_ptr);
    return Imm06.__wrap(ret2);
  }
};
var WDDVFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wddv_free(ptr >>> 0, 1));
var WDDV = class _WDDV {
  static __wrap(ptr) {
    ptr = ptr >>> 0;
    const obj = Object.create(_WDDV.prototype);
    obj.__wbg_ptr = ptr;
    WDDVFinalization.register(obj, obj.__wbg_ptr, obj);
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    WDDVFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_wddv_free(ptr, 0);
  }
  /**
   * Construct a `WDDV` instruction from its arguments.
   * @param {RegId} ra
   * @param {RegId} rb
   * @param {RegId} rc
   * @param {DivArgs} args
   * @returns {WDDV}
   */
  static from_args(ra, rb, rc, args) {
    _assertClass(ra, RegId);
    var ptr0 = ra.__destroy_into_raw();
    _assertClass(rb, RegId);
    var ptr1 = rb.__destroy_into_raw();
    _assertClass(rc, RegId);
    var ptr2 = rc.__destroy_into_raw();
    _assertClass(args, DivArgs);
    var ptr3 = args.__destroy_into_raw();
    const ret2 = wasm$1.wddv_from_args(ptr0, ptr1, ptr2, ptr3);
    return _WDDV.__wrap(ret2);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   * @param {Imm06} flags
   */
  constructor(dst, lhs, rhs, flags) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    _assertClass(flags, Imm06);
    var ptr3 = flags.__destroy_into_raw();
    const ret2 = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    WDDVFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 6-bit immediate value.
   * @returns {Imm06}
   */
  imm06() {
    const ret2 = wasm$1.jneb_imm06(this.__wbg_ptr);
    return Imm06.__wrap(ret2);
  }
};
var WDMDFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wdmd_free(ptr >>> 0, 1));
var WDMD = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    WDMDFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_wdmd_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} mul_lhs
   * @param {RegId} mul_rhs
   * @param {RegId} divisor
   */
  constructor(dst, mul_lhs, mul_rhs, divisor) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(mul_lhs, RegId);
    var ptr1 = mul_lhs.__destroy_into_raw();
    _assertClass(mul_rhs, RegId);
    var ptr2 = mul_rhs.__destroy_into_raw();
    _assertClass(divisor, RegId);
    var ptr3 = divisor.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    WDMDFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var WDMLFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wdml_free(ptr >>> 0, 1));
var WDML = class _WDML {
  static __wrap(ptr) {
    ptr = ptr >>> 0;
    const obj = Object.create(_WDML.prototype);
    obj.__wbg_ptr = ptr;
    WDMLFinalization.register(obj, obj.__wbg_ptr, obj);
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    WDMLFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_wdml_free(ptr, 0);
  }
  /**
   * Construct a `WDML` instruction from its arguments.
   * @param {RegId} ra
   * @param {RegId} rb
   * @param {RegId} rc
   * @param {MulArgs} args
   * @returns {WDML}
   */
  static from_args(ra, rb, rc, args) {
    _assertClass(ra, RegId);
    var ptr0 = ra.__destroy_into_raw();
    _assertClass(rb, RegId);
    var ptr1 = rb.__destroy_into_raw();
    _assertClass(rc, RegId);
    var ptr2 = rc.__destroy_into_raw();
    _assertClass(args, MulArgs);
    var ptr3 = args.__destroy_into_raw();
    const ret2 = wasm$1.wdml_from_args(ptr0, ptr1, ptr2, ptr3);
    return _WDML.__wrap(ret2);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   * @param {Imm06} flags
   */
  constructor(dst, lhs, rhs, flags) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    _assertClass(flags, Imm06);
    var ptr3 = flags.__destroy_into_raw();
    const ret2 = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    WDMLFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 6-bit immediate value.
   * @returns {Imm06}
   */
  imm06() {
    const ret2 = wasm$1.jneb_imm06(this.__wbg_ptr);
    return Imm06.__wrap(ret2);
  }
};
var WDMMFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wdmm_free(ptr >>> 0, 1));
var WDMM = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    WDMMFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_wdmm_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} mul_lhs
   * @param {RegId} mul_rhs
   * @param {RegId} modulo
   */
  constructor(dst, mul_lhs, mul_rhs, modulo3) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(mul_lhs, RegId);
    var ptr1 = mul_lhs.__destroy_into_raw();
    _assertClass(mul_rhs, RegId);
    var ptr2 = mul_rhs.__destroy_into_raw();
    _assertClass(modulo3, RegId);
    var ptr3 = modulo3.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    WDMMFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var WDOPFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wdop_free(ptr >>> 0, 1));
var WDOP = class _WDOP {
  static __wrap(ptr) {
    ptr = ptr >>> 0;
    const obj = Object.create(_WDOP.prototype);
    obj.__wbg_ptr = ptr;
    WDOPFinalization.register(obj, obj.__wbg_ptr, obj);
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    WDOPFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_wdop_free(ptr, 0);
  }
  /**
   * Construct a `WDOP` instruction from its arguments.
   * @param {RegId} ra
   * @param {RegId} rb
   * @param {RegId} rc
   * @param {MathArgs} args
   * @returns {WDOP}
   */
  static from_args(ra, rb, rc, args) {
    _assertClass(ra, RegId);
    var ptr0 = ra.__destroy_into_raw();
    _assertClass(rb, RegId);
    var ptr1 = rb.__destroy_into_raw();
    _assertClass(rc, RegId);
    var ptr2 = rc.__destroy_into_raw();
    _assertClass(args, MathArgs);
    var ptr3 = args.__destroy_into_raw();
    const ret2 = wasm$1.wdop_from_args(ptr0, ptr1, ptr2, ptr3);
    return _WDOP.__wrap(ret2);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   * @param {Imm06} flags
   */
  constructor(dst, lhs, rhs, flags) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    _assertClass(flags, Imm06);
    var ptr3 = flags.__destroy_into_raw();
    const ret2 = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    WDOPFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 6-bit immediate value.
   * @returns {Imm06}
   */
  imm06() {
    const ret2 = wasm$1.jneb_imm06(this.__wbg_ptr);
    return Imm06.__wrap(ret2);
  }
};
var WQAMFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wqam_free(ptr >>> 0, 1));
var WQAM = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    WQAMFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_wqam_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} add_lhs
   * @param {RegId} add_rhs
   * @param {RegId} modulo
   */
  constructor(dst, add_lhs, add_rhs, modulo3) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(add_lhs, RegId);
    var ptr1 = add_lhs.__destroy_into_raw();
    _assertClass(add_rhs, RegId);
    var ptr2 = add_rhs.__destroy_into_raw();
    _assertClass(modulo3, RegId);
    var ptr3 = modulo3.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    WQAMFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var WQCMFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wqcm_free(ptr >>> 0, 1));
var WQCM = class _WQCM {
  static __wrap(ptr) {
    ptr = ptr >>> 0;
    const obj = Object.create(_WQCM.prototype);
    obj.__wbg_ptr = ptr;
    WQCMFinalization.register(obj, obj.__wbg_ptr, obj);
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    WQCMFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_wqcm_free(ptr, 0);
  }
  /**
   * Construct a `WQCM` instruction from its arguments.
   * @param {RegId} ra
   * @param {RegId} rb
   * @param {RegId} rc
   * @param {CompareArgs} args
   * @returns {WQCM}
   */
  static from_args(ra, rb, rc, args) {
    _assertClass(ra, RegId);
    var ptr0 = ra.__destroy_into_raw();
    _assertClass(rb, RegId);
    var ptr1 = rb.__destroy_into_raw();
    _assertClass(rc, RegId);
    var ptr2 = rc.__destroy_into_raw();
    _assertClass(args, CompareArgs);
    var ptr3 = args.__destroy_into_raw();
    const ret2 = wasm$1.wdcm_from_args(ptr0, ptr1, ptr2, ptr3);
    return _WQCM.__wrap(ret2);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   * @param {Imm06} flags
   */
  constructor(dst, lhs, rhs, flags) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    _assertClass(flags, Imm06);
    var ptr3 = flags.__destroy_into_raw();
    const ret2 = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    WQCMFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 6-bit immediate value.
   * @returns {Imm06}
   */
  imm06() {
    const ret2 = wasm$1.jneb_imm06(this.__wbg_ptr);
    return Imm06.__wrap(ret2);
  }
};
var WQDVFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wqdv_free(ptr >>> 0, 1));
var WQDV = class _WQDV {
  static __wrap(ptr) {
    ptr = ptr >>> 0;
    const obj = Object.create(_WQDV.prototype);
    obj.__wbg_ptr = ptr;
    WQDVFinalization.register(obj, obj.__wbg_ptr, obj);
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    WQDVFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_wqdv_free(ptr, 0);
  }
  /**
   * Construct a `WQDV` instruction from its arguments.
   * @param {RegId} ra
   * @param {RegId} rb
   * @param {RegId} rc
   * @param {DivArgs} args
   * @returns {WQDV}
   */
  static from_args(ra, rb, rc, args) {
    _assertClass(ra, RegId);
    var ptr0 = ra.__destroy_into_raw();
    _assertClass(rb, RegId);
    var ptr1 = rb.__destroy_into_raw();
    _assertClass(rc, RegId);
    var ptr2 = rc.__destroy_into_raw();
    _assertClass(args, DivArgs);
    var ptr3 = args.__destroy_into_raw();
    const ret2 = wasm$1.wddv_from_args(ptr0, ptr1, ptr2, ptr3);
    return _WQDV.__wrap(ret2);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   * @param {Imm06} flags
   */
  constructor(dst, lhs, rhs, flags) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    _assertClass(flags, Imm06);
    var ptr3 = flags.__destroy_into_raw();
    const ret2 = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    WQDVFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 6-bit immediate value.
   * @returns {Imm06}
   */
  imm06() {
    const ret2 = wasm$1.jneb_imm06(this.__wbg_ptr);
    return Imm06.__wrap(ret2);
  }
};
var WQMDFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wqmd_free(ptr >>> 0, 1));
var WQMD = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    WQMDFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_wqmd_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} mul_lhs
   * @param {RegId} mul_rhs
   * @param {RegId} divisor
   */
  constructor(dst, mul_lhs, mul_rhs, divisor) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(mul_lhs, RegId);
    var ptr1 = mul_lhs.__destroy_into_raw();
    _assertClass(mul_rhs, RegId);
    var ptr2 = mul_rhs.__destroy_into_raw();
    _assertClass(divisor, RegId);
    var ptr3 = divisor.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    WQMDFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var WQMLFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wqml_free(ptr >>> 0, 1));
var WQML = class _WQML {
  static __wrap(ptr) {
    ptr = ptr >>> 0;
    const obj = Object.create(_WQML.prototype);
    obj.__wbg_ptr = ptr;
    WQMLFinalization.register(obj, obj.__wbg_ptr, obj);
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    WQMLFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_wqml_free(ptr, 0);
  }
  /**
   * Construct a `WQML` instruction from its arguments.
   * @param {RegId} ra
   * @param {RegId} rb
   * @param {RegId} rc
   * @param {MulArgs} args
   * @returns {WQML}
   */
  static from_args(ra, rb, rc, args) {
    _assertClass(ra, RegId);
    var ptr0 = ra.__destroy_into_raw();
    _assertClass(rb, RegId);
    var ptr1 = rb.__destroy_into_raw();
    _assertClass(rc, RegId);
    var ptr2 = rc.__destroy_into_raw();
    _assertClass(args, MulArgs);
    var ptr3 = args.__destroy_into_raw();
    const ret2 = wasm$1.wdml_from_args(ptr0, ptr1, ptr2, ptr3);
    return _WQML.__wrap(ret2);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   * @param {Imm06} flags
   */
  constructor(dst, lhs, rhs, flags) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    _assertClass(flags, Imm06);
    var ptr3 = flags.__destroy_into_raw();
    const ret2 = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    WQMLFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 6-bit immediate value.
   * @returns {Imm06}
   */
  imm06() {
    const ret2 = wasm$1.jneb_imm06(this.__wbg_ptr);
    return Imm06.__wrap(ret2);
  }
};
var WQMMFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wqmm_free(ptr >>> 0, 1));
var WQMM = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    WQMMFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_wqmm_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} mul_lhs
   * @param {RegId} mul_rhs
   * @param {RegId} modulo
   */
  constructor(dst, mul_lhs, mul_rhs, modulo3) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(mul_lhs, RegId);
    var ptr1 = mul_lhs.__destroy_into_raw();
    _assertClass(mul_rhs, RegId);
    var ptr2 = mul_rhs.__destroy_into_raw();
    _assertClass(modulo3, RegId);
    var ptr3 = modulo3.__destroy_into_raw();
    const ret2 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    WQMMFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register D.
   * @returns {RegId}
   */
  rd() {
    const ret2 = wasm$1.bldd_rd(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var WQOPFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wqop_free(ptr >>> 0, 1));
var WQOP = class _WQOP {
  static __wrap(ptr) {
    ptr = ptr >>> 0;
    const obj = Object.create(_WQOP.prototype);
    obj.__wbg_ptr = ptr;
    WQOPFinalization.register(obj, obj.__wbg_ptr, obj);
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    WQOPFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_wqop_free(ptr, 0);
  }
  /**
   * Construct a `WQOP` instruction from its arguments.
   * @param {RegId} ra
   * @param {RegId} rb
   * @param {RegId} rc
   * @param {MathArgs} args
   * @returns {WQOP}
   */
  static from_args(ra, rb, rc, args) {
    _assertClass(ra, RegId);
    var ptr0 = ra.__destroy_into_raw();
    _assertClass(rb, RegId);
    var ptr1 = rb.__destroy_into_raw();
    _assertClass(rc, RegId);
    var ptr2 = rc.__destroy_into_raw();
    _assertClass(args, MathArgs);
    var ptr3 = args.__destroy_into_raw();
    const ret2 = wasm$1.wdop_from_args(ptr0, ptr1, ptr2, ptr3);
    return _WQOP.__wrap(ret2);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   * @param {Imm06} flags
   */
  constructor(dst, lhs, rhs, flags) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    _assertClass(flags, Imm06);
    var ptr3 = flags.__destroy_into_raw();
    const ret2 = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);
    this.__wbg_ptr = ret2 >>> 0;
    WQOPFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 6-bit immediate value.
   * @returns {Imm06}
   */
  imm06() {
    const ret2 = wasm$1.jneb_imm06(this.__wbg_ptr);
    return Imm06.__wrap(ret2);
  }
};
var XORFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_xor_free(ptr >>> 0, 1));
var XOR = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    XORFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_xor_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {RegId} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, RegId);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    XORFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register C.
   * @returns {RegId}
   */
  rc() {
    const ret2 = wasm$1.add_rc(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
};
var XORIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((ptr) => wasm$1.__wbg_xori_free(ptr >>> 0, 1));
var XORI = class {
  __destroy_into_raw() {
    const ptr = this.__wbg_ptr;
    this.__wbg_ptr = 0;
    XORIFinalization.unregister(this);
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    wasm$1.__wbg_xori_free(ptr, 0);
  }
  /**
   * Construct the instruction from its parts.
   * @param {RegId} dst
   * @param {RegId} lhs
   * @param {Imm12} rhs
   */
  constructor(dst, lhs, rhs) {
    _assertClass(dst, RegId);
    var ptr0 = dst.__destroy_into_raw();
    _assertClass(lhs, RegId);
    var ptr1 = lhs.__destroy_into_raw();
    _assertClass(rhs, Imm12);
    var ptr2 = rhs.__destroy_into_raw();
    const ret2 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
    this.__wbg_ptr = ret2 >>> 0;
    XORIFinalization.register(this, this.__wbg_ptr, this);
    return this;
  }
  /**
   * Access the ID for register A.
   * @returns {RegId}
   */
  ra() {
    const ret2 = wasm$1.add_ra(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the ID for register B.
   * @returns {RegId}
   */
  rb() {
    const ret2 = wasm$1.add_rb(this.__wbg_ptr);
    return RegId.__wrap(ret2);
  }
  /**
   * Access the 12-bit immediate value.
   * @returns {Imm12}
   */
  imm12() {
    const ret2 = wasm$1.addi_imm12(this.__wbg_ptr);
    return Imm12.__wrap(ret2);
  }
};
async function __wbg_load(module, imports) {
  if (typeof Response === "function" && module instanceof Response) {
    if (typeof WebAssembly.instantiateStreaming === "function") {
      try {
        return await WebAssembly.instantiateStreaming(module, imports);
      } catch (e) {
        if (module.headers.get("Content-Type") != "application/wasm") {
          console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);
        } else {
          throw e;
        }
      }
    }
    const bytes = await module.arrayBuffer();
    return await WebAssembly.instantiate(bytes, imports);
  } else {
    const instance = await WebAssembly.instantiate(module, imports);
    if (instance instanceof WebAssembly.Instance) {
      return { instance, module };
    } else {
      return instance;
    }
  }
}
function __wbg_get_imports() {
  const imports = {};
  imports.wbg = {};
  imports.wbg.__wbindgen_throw = function(arg0, arg1) {
    throw new Error(getStringFromWasm0(arg0, arg1));
  };
  return imports;
}
function __wbg_finalize_init(instance, module) {
  wasm$1 = instance.exports;
  __wbg_init.__wbindgen_wasm_module = module;
  cachedDataViewMemory0 = null;
  cachedUint8ArrayMemory0 = null;
  return wasm$1;
}
function initSync(module) {
  if (wasm$1 !== void 0) return wasm$1;
  if (typeof module !== "undefined") {
    if (Object.getPrototypeOf(module) === Object.prototype) {
      ({ module } = module);
    } else {
      console.warn("using deprecated parameters for `initSync()`; pass a single object instead");
    }
  }
  const imports = __wbg_get_imports();
  if (!(module instanceof WebAssembly.Module)) {
    module = new WebAssembly.Module(module);
  }
  const instance = new WebAssembly.Instance(module, imports);
  return __wbg_finalize_init(instance, module);
}
async function __wbg_init(module_or_path) {
  if (wasm$1 !== void 0) return wasm$1;
  if (typeof module_or_path !== "undefined") {
    if (Object.getPrototypeOf(module_or_path) === Object.prototype) {
      ({ module_or_path } = module_or_path);
    } else {
      console.warn("using deprecated parameters for the initialization function; pass a single object instead");
    }
  }
  const imports = __wbg_get_imports();
  const { instance, module } = await __wbg_load(await module_or_path, imports);
  return __wbg_finalize_init(instance, module);
}
function _loadWasmModule(sync, filepath, src, imports) {
  function _instantiateOrCompile(source, imports2, stream) {
    var instantiateFunc = stream ? WebAssembly.instantiateStreaming : WebAssembly.instantiate;
    var compileFunc = stream ? WebAssembly.compileStreaming : WebAssembly.compile;
    if (imports2) {
      return instantiateFunc(source, imports2);
    } else {
      return compileFunc(source);
    }
  }
  var buf = null;
  var isNode2 = typeof process !== "undefined" && process.versions != null && process.versions.node != null;
  if (isNode2) {
    buf = Buffer.from(src, "base64");
  } else {
    var raw = globalThis.atob(src);
    var rawLength = raw.length;
    buf = new Uint8Array(new ArrayBuffer(rawLength));
    for (var i = 0; i < rawLength; i++) {
      buf[i] = raw.charCodeAt(i);
    }
  }
  if (sync) {
    var mod2 = new WebAssembly.Module(buf);
    return imports ? new WebAssembly.Instance(mod2, imports) : mod2;
  } else {
    return _instantiateOrCompile(buf, imports, false);
  }
}
function wasm(imports) {
  return _loadWasmModule(1, null, "", imports);
}
async function initWasm() {
  return await __wbg_init(wasm());
}
initWasm();

// node_modules/@fuel-ts/account/node_modules/@noble/hashes/esm/_assert.js
function anumber2(n) {
  if (!Number.isSafeInteger(n) || n < 0)
    throw new Error("positive integer expected, got " + n);
}
function isBytes4(a) {
  return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
}
function abytes4(b, ...lengths) {
  if (!isBytes4(b))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b.length);
}
function ahash2(h) {
  if (typeof h !== "function" || typeof h.create !== "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  anumber2(h.outputLen);
  anumber2(h.blockLen);
}
function aexists4(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function aoutput4(out, instance) {
  abytes4(out);
  const min3 = instance.outputLen;
  if (out.length < min3) {
    throw new Error("digestInto() expects output buffer of length at least " + min3);
  }
}

// node_modules/@fuel-ts/account/node_modules/@noble/hashes/esm/crypto.js
var crypto5 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;

// node_modules/@fuel-ts/account/node_modules/@noble/hashes/esm/utils.js
function createView4(arr) {
  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
}
function rotr4(word, shift) {
  return word << 32 - shift | word >>> shift;
}
var isLE4 = (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
var hexes4 = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
function utf8ToBytes4(str) {
  if (typeof str !== "string")
    throw new Error("utf8ToBytes expected string, got " + typeof str);
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes5(data) {
  if (typeof data === "string")
    data = utf8ToBytes4(data);
  abytes4(data);
  return data;
}
function concatBytes2(...arrays) {
  let sum2 = 0;
  for (let i = 0; i < arrays.length; i++) {
    const a = arrays[i];
    abytes4(a);
    sum2 += a.length;
  }
  const res = new Uint8Array(sum2);
  for (let i = 0, pad3 = 0; i < arrays.length; i++) {
    const a = arrays[i];
    res.set(a, pad3);
    pad3 += a.length;
  }
  return res;
}
var Hash4 = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function wrapConstructor4(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes5(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function randomBytes3(bytesLength = 32) {
  if (crypto5 && typeof crypto5.getRandomValues === "function") {
    return crypto5.getRandomValues(new Uint8Array(bytesLength));
  }
  if (crypto5 && typeof crypto5.randomBytes === "function") {
    return crypto5.randomBytes(bytesLength);
  }
  throw new Error("crypto.getRandomValues must be defined");
}

// node_modules/@fuel-ts/account/node_modules/@noble/hashes/esm/_md.js
function setBigUint644(view3, byteOffset, value, isLE5) {
  if (typeof view3.setBigUint64 === "function")
    return view3.setBigUint64(byteOffset, value, isLE5);
  const _32n2 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n2 & _u32_max);
  const wl = Number(value & _u32_max);
  const h = isLE5 ? 4 : 0;
  const l = isLE5 ? 0 : 4;
  view3.setUint32(byteOffset + h, wh, isLE5);
  view3.setUint32(byteOffset + l, wl, isLE5);
}
function Chi4(a, b, c) {
  return a & b ^ ~a & c;
}
function Maj4(a, b, c) {
  return a & b ^ a & c ^ b & c;
}
var HashMD4 = class extends Hash4 {
  constructor(blockLen, outputLen, padOffset, isLE5) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE5;
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView4(this.buffer);
  }
  update(data) {
    aexists4(this);
    const { view: view3, buffer, blockLen } = this;
    data = toBytes5(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take3 = Math.min(blockLen - this.pos, len - pos);
      if (take3 === blockLen) {
        const dataView = createView4(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer.set(data.subarray(pos, pos + take3), this.pos);
      this.pos += take3;
      pos += take3;
      if (this.pos === blockLen) {
        this.process(view3, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    aexists4(this);
    aoutput4(out, this);
    this.finished = true;
    const { buffer, view: view3, blockLen, isLE: isLE5 } = this;
    let { pos } = this;
    buffer[pos++] = 128;
    this.buffer.subarray(pos).fill(0);
    if (this.padOffset > blockLen - pos) {
      this.process(view3, 0);
      pos = 0;
    }
    for (let i = pos; i < blockLen; i++)
      buffer[i] = 0;
    setBigUint644(view3, blockLen - 8, BigInt(this.length * 8), isLE5);
    this.process(view3, 0);
    const oview = createView4(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state = this.get();
    if (outLen > state.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i = 0; i < outLen; i++)
      oview.setUint32(4 * i, state[i], isLE5);
  }
  digest() {
    const { buffer, outputLen } = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    to || (to = new this.constructor());
    to.set(...this.get());
    const { blockLen, buffer, length: length3, finished, destroyed, pos } = this;
    to.length = length3;
    to.pos = pos;
    to.finished = finished;
    to.destroyed = destroyed;
    if (length3 % blockLen)
      to.buffer.set(buffer);
    return to;
  }
};

// node_modules/@fuel-ts/account/node_modules/@noble/hashes/esm/sha256.js
var SHA256_K4 = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var SHA256_IV4 = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
var SHA256_W4 = new Uint32Array(64);
var SHA2564 = class extends HashMD4 {
  constructor() {
    super(64, 32, 8, false);
    this.A = SHA256_IV4[0] | 0;
    this.B = SHA256_IV4[1] | 0;
    this.C = SHA256_IV4[2] | 0;
    this.D = SHA256_IV4[3] | 0;
    this.E = SHA256_IV4[4] | 0;
    this.F = SHA256_IV4[5] | 0;
    this.G = SHA256_IV4[6] | 0;
    this.H = SHA256_IV4[7] | 0;
  }
  get() {
    const { A, B, C, D, E, F, G, H } = this;
    return [A, B, C, D, E, F, G, H];
  }
  // prettier-ignore
  set(A, B, C, D, E, F, G, H) {
    this.A = A | 0;
    this.B = B | 0;
    this.C = C | 0;
    this.D = D | 0;
    this.E = E | 0;
    this.F = F | 0;
    this.G = G | 0;
    this.H = H | 0;
  }
  process(view3, offset) {
    for (let i = 0; i < 16; i++, offset += 4)
      SHA256_W4[i] = view3.getUint32(offset, false);
    for (let i = 16; i < 64; i++) {
      const W15 = SHA256_W4[i - 15];
      const W2 = SHA256_W4[i - 2];
      const s0 = rotr4(W15, 7) ^ rotr4(W15, 18) ^ W15 >>> 3;
      const s1 = rotr4(W2, 17) ^ rotr4(W2, 19) ^ W2 >>> 10;
      SHA256_W4[i] = s1 + SHA256_W4[i - 7] + s0 + SHA256_W4[i - 16] | 0;
    }
    let { A, B, C, D, E, F, G, H } = this;
    for (let i = 0; i < 64; i++) {
      const sigma1 = rotr4(E, 6) ^ rotr4(E, 11) ^ rotr4(E, 25);
      const T1 = H + sigma1 + Chi4(E, F, G) + SHA256_K4[i] + SHA256_W4[i] | 0;
      const sigma0 = rotr4(A, 2) ^ rotr4(A, 13) ^ rotr4(A, 22);
      const T2 = sigma0 + Maj4(A, B, C) | 0;
      H = G;
      G = F;
      F = E;
      E = D + T1 | 0;
      D = C;
      C = B;
      B = A;
      A = T1 + T2 | 0;
    }
    A = A + this.A | 0;
    B = B + this.B | 0;
    C = C + this.C | 0;
    D = D + this.D | 0;
    E = E + this.E | 0;
    F = F + this.F | 0;
    G = G + this.G | 0;
    H = H + this.H | 0;
    this.set(A, B, C, D, E, F, G, H);
  }
  roundClean() {
    SHA256_W4.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    this.buffer.fill(0);
  }
};
var SHA2244 = class extends SHA2564 {
  constructor() {
    super();
    this.A = 3238371032 | 0;
    this.B = 914150663 | 0;
    this.C = 812702999 | 0;
    this.D = 4144912697 | 0;
    this.E = 4290775857 | 0;
    this.F = 1750603025 | 0;
    this.G = 1694076839 | 0;
    this.H = 3204075428 | 0;
    this.outputLen = 28;
  }
};
var sha2565 = wrapConstructor4(() => new SHA2564());
var sha2244 = wrapConstructor4(() => new SHA2244());

// node_modules/@fuel-ts/account/node_modules/@noble/hashes/esm/hmac.js
var HMAC2 = class extends Hash4 {
  constructor(hash2, _key) {
    super();
    this.finished = false;
    this.destroyed = false;
    ahash2(hash2);
    const key = toBytes5(_key);
    this.iHash = hash2.create();
    if (typeof this.iHash.update !== "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen;
    this.outputLen = this.iHash.outputLen;
    const blockLen = this.blockLen;
    const pad3 = new Uint8Array(blockLen);
    pad3.set(key.length > blockLen ? hash2.create().update(key).digest() : key);
    for (let i = 0; i < pad3.length; i++)
      pad3[i] ^= 54;
    this.iHash.update(pad3);
    this.oHash = hash2.create();
    for (let i = 0; i < pad3.length; i++)
      pad3[i] ^= 54 ^ 92;
    this.oHash.update(pad3);
    pad3.fill(0);
  }
  update(buf) {
    aexists4(this);
    this.iHash.update(buf);
    return this;
  }
  digestInto(out) {
    aexists4(this);
    abytes4(out, this.outputLen);
    this.finished = true;
    this.iHash.digestInto(out);
    this.oHash.update(out);
    this.oHash.digestInto(out);
    this.destroy();
  }
  digest() {
    const out = new Uint8Array(this.oHash.outputLen);
    this.digestInto(out);
    return out;
  }
  _cloneInto(to) {
    to || (to = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
    to = to;
    to.finished = finished;
    to.destroyed = destroyed;
    to.blockLen = blockLen;
    to.outputLen = outputLen;
    to.oHash = oHash._cloneInto(to.oHash);
    to.iHash = iHash._cloneInto(to.iHash);
    return to;
  }
  destroy() {
    this.destroyed = true;
    this.oHash.destroy();
    this.iHash.destroy();
  }
};
var hmac2 = (hash2, key, message) => new HMAC2(hash2, key).update(message).digest();
hmac2.create = (hash2, key) => new HMAC2(hash2, key);

// node_modules/@fuel-ts/account/node_modules/@noble/curves/esm/abstract/utils.js
var utils_exports = {};
__export(utils_exports, {
  aInRange: () => aInRange,
  abool: () => abool,
  abytes: () => abytes5,
  bitGet: () => bitGet,
  bitLen: () => bitLen,
  bitMask: () => bitMask,
  bitSet: () => bitSet,
  bytesToHex: () => bytesToHex,
  bytesToNumberBE: () => bytesToNumberBE,
  bytesToNumberLE: () => bytesToNumberLE,
  concatBytes: () => concatBytes3,
  createHmacDrbg: () => createHmacDrbg,
  ensureBytes: () => ensureBytes,
  equalBytes: () => equalBytes,
  hexToBytes: () => hexToBytes,
  hexToNumber: () => hexToNumber,
  inRange: () => inRange,
  isBytes: () => isBytes5,
  memoized: () => memoized,
  notImplemented: () => notImplemented,
  numberToBytesBE: () => numberToBytesBE,
  numberToBytesLE: () => numberToBytesLE,
  numberToHexUnpadded: () => numberToHexUnpadded,
  numberToVarBytesBE: () => numberToVarBytesBE,
  utf8ToBytes: () => utf8ToBytes5,
  validateObject: () => validateObject
});
var _0n2 = BigInt(0);
var _1n2 = BigInt(1);
var _2n2 = BigInt(2);
function isBytes5(a) {
  return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
}
function abytes5(item) {
  if (!isBytes5(item))
    throw new Error("Uint8Array expected");
}
function abool(title, value) {
  if (typeof value !== "boolean")
    throw new Error(title + " boolean expected, got " + value);
}
var hexes5 = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
function bytesToHex(bytes) {
  abytes5(bytes);
  let hex = "";
  for (let i = 0; i < bytes.length; i++) {
    hex += hexes5[bytes[i]];
  }
  return hex;
}
function numberToHexUnpadded(num2) {
  const hex = num2.toString(16);
  return hex.length & 1 ? "0" + hex : hex;
}
function hexToNumber(hex) {
  if (typeof hex !== "string")
    throw new Error("hex string expected, got " + typeof hex);
  return hex === "" ? _0n2 : BigInt("0x" + hex);
}
var asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function asciiToBase16(ch3) {
  if (ch3 >= asciis._0 && ch3 <= asciis._9)
    return ch3 - asciis._0;
  if (ch3 >= asciis.A && ch3 <= asciis.F)
    return ch3 - (asciis.A - 10);
  if (ch3 >= asciis.a && ch3 <= asciis.f)
    return ch3 - (asciis.a - 10);
  return;
}
function hexToBytes(hex) {
  if (typeof hex !== "string")
    throw new Error("hex string expected, got " + typeof hex);
  const hl = hex.length;
  const al = hl / 2;
  if (hl % 2)
    throw new Error("hex string expected, got unpadded hex of length " + hl);
  const array = new Uint8Array(al);
  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
    const n1 = asciiToBase16(hex.charCodeAt(hi));
    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
    if (n1 === void 0 || n2 === void 0) {
      const char = hex[hi] + hex[hi + 1];
      throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
    }
    array[ai] = n1 * 16 + n2;
  }
  return array;
}
function bytesToNumberBE(bytes) {
  return hexToNumber(bytesToHex(bytes));
}
function bytesToNumberLE(bytes) {
  abytes5(bytes);
  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
}
function numberToBytesBE(n, len) {
  return hexToBytes(n.toString(16).padStart(len * 2, "0"));
}
function numberToBytesLE(n, len) {
  return numberToBytesBE(n, len).reverse();
}
function numberToVarBytesBE(n) {
  return hexToBytes(numberToHexUnpadded(n));
}
function ensureBytes(title, hex, expectedLength) {
  let res;
  if (typeof hex === "string") {
    try {
      res = hexToBytes(hex);
    } catch (e) {
      throw new Error(title + " must be hex string or Uint8Array, cause: " + e);
    }
  } else if (isBytes5(hex)) {
    res = Uint8Array.from(hex);
  } else {
    throw new Error(title + " must be hex string or Uint8Array");
  }
  const len = res.length;
  if (typeof expectedLength === "number" && len !== expectedLength)
    throw new Error(title + " of length " + expectedLength + " expected, got " + len);
  return res;
}
function concatBytes3(...arrays) {
  let sum2 = 0;
  for (let i = 0; i < arrays.length; i++) {
    const a = arrays[i];
    abytes5(a);
    sum2 += a.length;
  }
  const res = new Uint8Array(sum2);
  for (let i = 0, pad3 = 0; i < arrays.length; i++) {
    const a = arrays[i];
    res.set(a, pad3);
    pad3 += a.length;
  }
  return res;
}
function equalBytes(a, b) {
  if (a.length !== b.length)
    return false;
  let diff = 0;
  for (let i = 0; i < a.length; i++)
    diff |= a[i] ^ b[i];
  return diff === 0;
}
function utf8ToBytes5(str) {
  if (typeof str !== "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(str));
}
var isPosBig = (n) => typeof n === "bigint" && _0n2 <= n;
function inRange(n, min3, max5) {
  return isPosBig(n) && isPosBig(min3) && isPosBig(max5) && min3 <= n && n < max5;
}
function aInRange(title, n, min3, max5) {
  if (!inRange(n, min3, max5))
    throw new Error("expected valid " + title + ": " + min3 + " <= n < " + max5 + ", got " + n);
}
function bitLen(n) {
  let len;
  for (len = 0; n > _0n2; n >>= _1n2, len += 1)
    ;
  return len;
}
function bitGet(n, pos) {
  return n >> BigInt(pos) & _1n2;
}
function bitSet(n, pos, value) {
  return n | (value ? _1n2 : _0n2) << BigInt(pos);
}
var bitMask = (n) => (_2n2 << BigInt(n - 1)) - _1n2;
var u8n = (data) => new Uint8Array(data);
var u8fr = (arr) => Uint8Array.from(arr);
function createHmacDrbg(hashLen, qByteLen, hmacFn) {
  if (typeof hashLen !== "number" || hashLen < 2)
    throw new Error("hashLen must be a number");
  if (typeof qByteLen !== "number" || qByteLen < 2)
    throw new Error("qByteLen must be a number");
  if (typeof hmacFn !== "function")
    throw new Error("hmacFn must be a function");
  let v = u8n(hashLen);
  let k = u8n(hashLen);
  let i = 0;
  const reset = () => {
    v.fill(1);
    k.fill(0);
    i = 0;
  };
  const h = (...b) => hmacFn(k, v, ...b);
  const reseed = (seed = u8n()) => {
    k = h(u8fr([0]), seed);
    v = h();
    if (seed.length === 0)
      return;
    k = h(u8fr([1]), seed);
    v = h();
  };
  const gen2 = () => {
    if (i++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let len = 0;
    const out = [];
    while (len < qByteLen) {
      v = h();
      const sl = v.slice();
      out.push(sl);
      len += v.length;
    }
    return concatBytes3(...out);
  };
  const genUntil = (seed, pred) => {
    reset();
    reseed(seed);
    let res = void 0;
    while (!(res = pred(gen2())))
      reseed();
    reset();
    return res;
  };
  return genUntil;
}
var validatorFns = {
  bigint: (val) => typeof val === "bigint",
  function: (val) => typeof val === "function",
  boolean: (val) => typeof val === "boolean",
  string: (val) => typeof val === "string",
  stringOrUint8Array: (val) => typeof val === "string" || isBytes5(val),
  isSafeInteger: (val) => Number.isSafeInteger(val),
  array: (val) => Array.isArray(val),
  field: (val, object) => object.Fp.isValid(val),
  hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
};
function validateObject(object, validators, optValidators = {}) {
  const checkField = (fieldName, type3, isOptional) => {
    const checkVal = validatorFns[type3];
    if (typeof checkVal !== "function")
      throw new Error("invalid validator function");
    const val = object[fieldName];
    if (isOptional && val === void 0)
      return;
    if (!checkVal(val, object)) {
      throw new Error("param " + String(fieldName) + " is invalid. Expected " + type3 + ", got " + val);
    }
  };
  for (const [fieldName, type3] of Object.entries(validators))
    checkField(fieldName, type3, false);
  for (const [fieldName, type3] of Object.entries(optValidators))
    checkField(fieldName, type3, true);
  return object;
}
var notImplemented = () => {
  throw new Error("not implemented");
};
function memoized(fn) {
  const map3 = /* @__PURE__ */ new WeakMap();
  return (arg, ...args) => {
    const val = map3.get(arg);
    if (val !== void 0)
      return val;
    const computed = fn(arg, ...args);
    map3.set(arg, computed);
    return computed;
  };
}

// node_modules/@fuel-ts/account/node_modules/@noble/curves/esm/abstract/modular.js
var _0n3 = BigInt(0);
var _1n3 = BigInt(1);
var _2n3 = BigInt(2);
var _3n = BigInt(3);
var _4n = BigInt(4);
var _5n = BigInt(5);
var _8n = BigInt(8);
var _9n = BigInt(9);
var _16n = BigInt(16);
function mod(a, b) {
  const result = a % b;
  return result >= _0n3 ? result : b + result;
}
function pow(num2, power, modulo3) {
  if (power < _0n3)
    throw new Error("invalid exponent, negatives unsupported");
  if (modulo3 <= _0n3)
    throw new Error("invalid modulus");
  if (modulo3 === _1n3)
    return _0n3;
  let res = _1n3;
  while (power > _0n3) {
    if (power & _1n3)
      res = res * num2 % modulo3;
    num2 = num2 * num2 % modulo3;
    power >>= _1n3;
  }
  return res;
}
function pow2(x, power, modulo3) {
  let res = x;
  while (power-- > _0n3) {
    res *= res;
    res %= modulo3;
  }
  return res;
}
function invert3(number, modulo3) {
  if (number === _0n3)
    throw new Error("invert: expected non-zero number");
  if (modulo3 <= _0n3)
    throw new Error("invert: expected positive modulus, got " + modulo3);
  let a = mod(number, modulo3);
  let b = modulo3;
  let x = _0n3, y = _1n3, u = _1n3, v = _0n3;
  while (a !== _0n3) {
    const q = b / a;
    const r = b % a;
    const m = x - u * q;
    const n = y - v * q;
    b = a, a = r, x = u, y = v, u = m, v = n;
  }
  const gcd = b;
  if (gcd !== _1n3)
    throw new Error("invert: does not exist");
  return mod(x, modulo3);
}
function tonelliShanks(P) {
  const legendreC = (P - _1n3) / _2n3;
  let Q, S, Z;
  for (Q = P - _1n3, S = 0; Q % _2n3 === _0n3; Q /= _2n3, S++)
    ;
  for (Z = _2n3; Z < P && pow(Z, legendreC, P) !== P - _1n3; Z++) {
    if (Z > 1e3)
      throw new Error("Cannot find square root: likely non-prime P");
  }
  if (S === 1) {
    const p1div4 = (P + _1n3) / _4n;
    return function tonelliFast(Fp, n) {
      const root = Fp.pow(n, p1div4);
      if (!Fp.eql(Fp.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  const Q1div2 = (Q + _1n3) / _2n3;
  return function tonelliSlow(Fp, n) {
    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))
      throw new Error("Cannot find square root");
    let r = S;
    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q);
    let x = Fp.pow(n, Q1div2);
    let b = Fp.pow(n, Q);
    while (!Fp.eql(b, Fp.ONE)) {
      if (Fp.eql(b, Fp.ZERO))
        return Fp.ZERO;
      let m = 1;
      for (let t2 = Fp.sqr(b); m < r; m++) {
        if (Fp.eql(t2, Fp.ONE))
          break;
        t2 = Fp.sqr(t2);
      }
      const ge = Fp.pow(g, _1n3 << BigInt(r - m - 1));
      g = Fp.sqr(ge);
      x = Fp.mul(x, ge);
      b = Fp.mul(b, g);
      r = m;
    }
    return x;
  };
}
function FpSqrt(P) {
  if (P % _4n === _3n) {
    const p1div4 = (P + _1n3) / _4n;
    return function sqrt3mod4(Fp, n) {
      const root = Fp.pow(n, p1div4);
      if (!Fp.eql(Fp.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  if (P % _8n === _5n) {
    const c1 = (P - _5n) / _8n;
    return function sqrt5mod8(Fp, n) {
      const n2 = Fp.mul(n, _2n3);
      const v = Fp.pow(n2, c1);
      const nv = Fp.mul(n, v);
      const i = Fp.mul(Fp.mul(nv, _2n3), v);
      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
      if (!Fp.eql(Fp.sqr(root), n))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  if (P % _16n === _9n) {
  }
  return tonelliShanks(P);
}
var FIELD_FIELDS = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function validateField(field) {
  const initial = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  };
  const opts = FIELD_FIELDS.reduce((map3, val) => {
    map3[val] = "function";
    return map3;
  }, initial);
  return validateObject(field, opts);
}
function FpPow(f2, num2, power) {
  if (power < _0n3)
    throw new Error("invalid exponent, negatives unsupported");
  if (power === _0n3)
    return f2.ONE;
  if (power === _1n3)
    return num2;
  let p = f2.ONE;
  let d = num2;
  while (power > _0n3) {
    if (power & _1n3)
      p = f2.mul(p, d);
    d = f2.sqr(d);
    power >>= _1n3;
  }
  return p;
}
function FpInvertBatch(f2, nums) {
  const tmp = new Array(nums.length);
  const lastMultiplied = nums.reduce((acc, num2, i) => {
    if (f2.is0(num2))
      return acc;
    tmp[i] = acc;
    return f2.mul(acc, num2);
  }, f2.ONE);
  const inverted = f2.inv(lastMultiplied);
  nums.reduceRight((acc, num2, i) => {
    if (f2.is0(num2))
      return acc;
    tmp[i] = f2.mul(acc, tmp[i]);
    return f2.mul(acc, num2);
  }, inverted);
  return tmp;
}
function nLength(n, nBitLength) {
  const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
  const nByteLength = Math.ceil(_nBitLength / 8);
  return { nBitLength: _nBitLength, nByteLength };
}
function Field(ORDER, bitLen2, isLE5 = false, redef = {}) {
  if (ORDER <= _0n3)
    throw new Error("invalid field: expected ORDER > 0, got " + ORDER);
  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen2);
  if (BYTES > 2048)
    throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let sqrtP;
  const f2 = Object.freeze({
    ORDER,
    isLE: isLE5,
    BITS,
    BYTES,
    MASK: bitMask(BITS),
    ZERO: _0n3,
    ONE: _1n3,
    create: (num2) => mod(num2, ORDER),
    isValid: (num2) => {
      if (typeof num2 !== "bigint")
        throw new Error("invalid field element: expected bigint, got " + typeof num2);
      return _0n3 <= num2 && num2 < ORDER;
    },
    is0: (num2) => num2 === _0n3,
    isOdd: (num2) => (num2 & _1n3) === _1n3,
    neg: (num2) => mod(-num2, ORDER),
    eql: (lhs, rhs) => lhs === rhs,
    sqr: (num2) => mod(num2 * num2, ORDER),
    add: (lhs, rhs) => mod(lhs + rhs, ORDER),
    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
    pow: (num2, power) => FpPow(f2, num2, power),
    div: (lhs, rhs) => mod(lhs * invert3(rhs, ORDER), ORDER),
    // Same as above, but doesn't normalize
    sqrN: (num2) => num2 * num2,
    addN: (lhs, rhs) => lhs + rhs,
    subN: (lhs, rhs) => lhs - rhs,
    mulN: (lhs, rhs) => lhs * rhs,
    inv: (num2) => invert3(num2, ORDER),
    sqrt: redef.sqrt || ((n) => {
      if (!sqrtP)
        sqrtP = FpSqrt(ORDER);
      return sqrtP(f2, n);
    }),
    invertBatch: (lst) => FpInvertBatch(f2, lst),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (a, b, c) => c ? b : a,
    toBytes: (num2) => isLE5 ? numberToBytesLE(num2, BYTES) : numberToBytesBE(num2, BYTES),
    fromBytes: (bytes) => {
      if (bytes.length !== BYTES)
        throw new Error("Field.fromBytes: expected " + BYTES + " bytes, got " + bytes.length);
      return isLE5 ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);
    }
  });
  return Object.freeze(f2);
}
function getFieldBytesLength(fieldOrder) {
  if (typeof fieldOrder !== "bigint")
    throw new Error("field order must be bigint");
  const bitLength = fieldOrder.toString(2).length;
  return Math.ceil(bitLength / 8);
}
function getMinHashLength(fieldOrder) {
  const length3 = getFieldBytesLength(fieldOrder);
  return length3 + Math.ceil(length3 / 2);
}
function mapHashToField(key, fieldOrder, isLE5 = false) {
  const len = key.length;
  const fieldLen = getFieldBytesLength(fieldOrder);
  const minLen = getMinHashLength(fieldOrder);
  if (len < 16 || len < minLen || len > 1024)
    throw new Error("expected " + minLen + "-1024 bytes of input, got " + len);
  const num2 = isLE5 ? bytesToNumberLE(key) : bytesToNumberBE(key);
  const reduced2 = mod(num2, fieldOrder - _1n3) + _1n3;
  return isLE5 ? numberToBytesLE(reduced2, fieldLen) : numberToBytesBE(reduced2, fieldLen);
}

// node_modules/@fuel-ts/account/node_modules/@noble/curves/esm/abstract/curve.js
var _0n4 = BigInt(0);
var _1n4 = BigInt(1);
function constTimeNegate(condition, item) {
  const neg = item.negate();
  return condition ? neg : item;
}
function validateW(W, bits2) {
  if (!Number.isSafeInteger(W) || W <= 0 || W > bits2)
    throw new Error("invalid window size, expected [1.." + bits2 + "], got W=" + W);
}
function calcWOpts(W, bits2) {
  validateW(W, bits2);
  const windows = Math.ceil(bits2 / W) + 1;
  const windowSize = 2 ** (W - 1);
  return { windows, windowSize };
}
function validateMSMPoints(points, c) {
  if (!Array.isArray(points))
    throw new Error("array expected");
  points.forEach((p, i) => {
    if (!(p instanceof c))
      throw new Error("invalid point at index " + i);
  });
}
function validateMSMScalars(scalars, field) {
  if (!Array.isArray(scalars))
    throw new Error("array of scalars expected");
  scalars.forEach((s, i) => {
    if (!field.isValid(s))
      throw new Error("invalid scalar at index " + i);
  });
}
var pointPrecomputes = /* @__PURE__ */ new WeakMap();
var pointWindowSizes = /* @__PURE__ */ new WeakMap();
function getW(P) {
  return pointWindowSizes.get(P) || 1;
}
function wNAF(c, bits2) {
  return {
    constTimeNegate,
    hasPrecomputes(elm) {
      return getW(elm) !== 1;
    },
    // non-const time multiplication ladder
    unsafeLadder(elm, n, p = c.ZERO) {
      let d = elm;
      while (n > _0n4) {
        if (n & _1n4)
          p = p.add(d);
        d = d.double();
        n >>= _1n4;
      }
      return p;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @param elm Point instance
     * @param W window size
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(elm, W) {
      const { windows, windowSize } = calcWOpts(W, bits2);
      const points = [];
      let p = elm;
      let base = p;
      for (let window2 = 0; window2 < windows; window2++) {
        base = p;
        points.push(base);
        for (let i = 1; i < windowSize; i++) {
          base = base.add(p);
          points.push(base);
        }
        p = base.double();
      }
      return points;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(W, precomputes, n) {
      const { windows, windowSize } = calcWOpts(W, bits2);
      let p = c.ZERO;
      let f2 = c.BASE;
      const mask = BigInt(2 ** W - 1);
      const maxNumber = 2 ** W;
      const shiftBy = BigInt(W);
      for (let window2 = 0; window2 < windows; window2++) {
        const offset = window2 * windowSize;
        let wbits2 = Number(n & mask);
        n >>= shiftBy;
        if (wbits2 > windowSize) {
          wbits2 -= maxNumber;
          n += _1n4;
        }
        const offset1 = offset;
        const offset2 = offset + Math.abs(wbits2) - 1;
        const cond1 = window2 % 2 !== 0;
        const cond22 = wbits2 < 0;
        if (wbits2 === 0) {
          f2 = f2.add(constTimeNegate(cond1, precomputes[offset1]));
        } else {
          p = p.add(constTimeNegate(cond22, precomputes[offset2]));
        }
      }
      return { p, f: f2 };
    },
    /**
     * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @param acc accumulator point to add result of multiplication
     * @returns point
     */
    wNAFUnsafe(W, precomputes, n, acc = c.ZERO) {
      const { windows, windowSize } = calcWOpts(W, bits2);
      const mask = BigInt(2 ** W - 1);
      const maxNumber = 2 ** W;
      const shiftBy = BigInt(W);
      for (let window2 = 0; window2 < windows; window2++) {
        const offset = window2 * windowSize;
        if (n === _0n4)
          break;
        let wbits2 = Number(n & mask);
        n >>= shiftBy;
        if (wbits2 > windowSize) {
          wbits2 -= maxNumber;
          n += _1n4;
        }
        if (wbits2 === 0)
          continue;
        let curr = precomputes[offset + Math.abs(wbits2) - 1];
        if (wbits2 < 0)
          curr = curr.negate();
        acc = acc.add(curr);
      }
      return acc;
    },
    getPrecomputes(W, P, transform) {
      let comp = pointPrecomputes.get(P);
      if (!comp) {
        comp = this.precomputeWindow(P, W);
        if (W !== 1)
          pointPrecomputes.set(P, transform(comp));
      }
      return comp;
    },
    wNAFCached(P, n, transform) {
      const W = getW(P);
      return this.wNAF(W, this.getPrecomputes(W, P, transform), n);
    },
    wNAFCachedUnsafe(P, n, transform, prev) {
      const W = getW(P);
      if (W === 1)
        return this.unsafeLadder(P, n, prev);
      return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);
    },
    // We calculate precomputes for elliptic curve point multiplication
    // using windowed method. This specifies window size and
    // stores precomputed values. Usually only base point would be precomputed.
    setWindowSize(P, W) {
      validateW(W, bits2);
      pointWindowSizes.set(P, W);
      pointPrecomputes.delete(P);
    }
  };
}
function pippenger(c, fieldN, points, scalars) {
  validateMSMPoints(points, c);
  validateMSMScalars(scalars, fieldN);
  if (points.length !== scalars.length)
    throw new Error("arrays of points and scalars must have equal length");
  const zero = c.ZERO;
  const wbits2 = bitLen(BigInt(points.length));
  const windowSize = wbits2 > 12 ? wbits2 - 3 : wbits2 > 4 ? wbits2 - 2 : wbits2 ? 2 : 1;
  const MASK = (1 << windowSize) - 1;
  const buckets = new Array(MASK + 1).fill(zero);
  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;
  let sum2 = zero;
  for (let i = lastBits; i >= 0; i -= windowSize) {
    buckets.fill(zero);
    for (let j = 0; j < scalars.length; j++) {
      const scalar = scalars[j];
      const wbits3 = Number(scalar >> BigInt(i) & BigInt(MASK));
      buckets[wbits3] = buckets[wbits3].add(points[j]);
    }
    let resI = zero;
    for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {
      sumI = sumI.add(buckets[j]);
      resI = resI.add(sumI);
    }
    sum2 = sum2.add(resI);
    if (i !== 0)
      for (let j = 0; j < windowSize; j++)
        sum2 = sum2.double();
  }
  return sum2;
}
function validateBasic(curve) {
  validateField(curve.Fp);
  validateObject(curve, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  });
  return Object.freeze({
    ...nLength(curve.n, curve.nBitLength),
    ...curve,
    ...{ p: curve.Fp.ORDER }
  });
}

// node_modules/@fuel-ts/account/node_modules/@noble/curves/esm/abstract/weierstrass.js
function validateSigVerOpts(opts) {
  if (opts.lowS !== void 0)
    abool("lowS", opts.lowS);
  if (opts.prehash !== void 0)
    abool("prehash", opts.prehash);
}
function validatePointOpts(curve) {
  const opts = validateBasic(curve);
  validateObject(opts, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo, Fp, a } = opts;
  if (endo) {
    if (!Fp.eql(a, Fp.ZERO)) {
      throw new Error("invalid endomorphism, can only be defined for Koblitz curves that have a=0");
    }
    if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
      throw new Error("invalid endomorphism, expected beta: bigint and splitScalar: function");
    }
  }
  return Object.freeze({ ...opts });
}
var { bytesToNumberBE: b2n, hexToBytes: h2b } = utils_exports;
var DERErr = class extends Error {
  constructor(m = "") {
    super(m);
  }
};
var DER = {
  // asn.1 DER encoding utils
  Err: DERErr,
  // Basic building block is TLV (Tag-Length-Value)
  _tlv: {
    encode: (tag, data) => {
      const { Err: E } = DER;
      if (tag < 0 || tag > 256)
        throw new E("tlv.encode: wrong tag");
      if (data.length & 1)
        throw new E("tlv.encode: unpadded data");
      const dataLen = data.length / 2;
      const len = numberToHexUnpadded(dataLen);
      if (len.length / 2 & 128)
        throw new E("tlv.encode: long form length too big");
      const lenLen = dataLen > 127 ? numberToHexUnpadded(len.length / 2 | 128) : "";
      const t = numberToHexUnpadded(tag);
      return t + lenLen + len + data;
    },
    // v - value, l - left bytes (unparsed)
    decode(tag, data) {
      const { Err: E } = DER;
      let pos = 0;
      if (tag < 0 || tag > 256)
        throw new E("tlv.encode: wrong tag");
      if (data.length < 2 || data[pos++] !== tag)
        throw new E("tlv.decode: wrong tlv");
      const first = data[pos++];
      const isLong = !!(first & 128);
      let length3 = 0;
      if (!isLong)
        length3 = first;
      else {
        const lenLen = first & 127;
        if (!lenLen)
          throw new E("tlv.decode(long): indefinite length not supported");
        if (lenLen > 4)
          throw new E("tlv.decode(long): byte length is too big");
        const lengthBytes = data.subarray(pos, pos + lenLen);
        if (lengthBytes.length !== lenLen)
          throw new E("tlv.decode: length bytes not complete");
        if (lengthBytes[0] === 0)
          throw new E("tlv.decode(long): zero leftmost byte");
        for (const b of lengthBytes)
          length3 = length3 << 8 | b;
        pos += lenLen;
        if (length3 < 128)
          throw new E("tlv.decode(long): not minimal encoding");
      }
      const v = data.subarray(pos, pos + length3);
      if (v.length !== length3)
        throw new E("tlv.decode: wrong value length");
      return { v, l: data.subarray(pos + length3) };
    }
  },
  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
  // since we always use positive integers here. It must always be empty:
  // - add zero byte if exists
  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
  _int: {
    encode(num2) {
      const { Err: E } = DER;
      if (num2 < _0n5)
        throw new E("integer: negative integers are not allowed");
      let hex = numberToHexUnpadded(num2);
      if (Number.parseInt(hex[0], 16) & 8)
        hex = "00" + hex;
      if (hex.length & 1)
        throw new E("unexpected DER parsing assertion: unpadded hex");
      return hex;
    },
    decode(data) {
      const { Err: E } = DER;
      if (data[0] & 128)
        throw new E("invalid signature integer: negative");
      if (data[0] === 0 && !(data[1] & 128))
        throw new E("invalid signature integer: unnecessary leading zero");
      return b2n(data);
    }
  },
  toSig(hex) {
    const { Err: E, _int: int, _tlv: tlv } = DER;
    const data = typeof hex === "string" ? h2b(hex) : hex;
    abytes5(data);
    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(48, data);
    if (seqLeftBytes.length)
      throw new E("invalid signature: left bytes after parsing");
    const { v: rBytes, l: rLeftBytes } = tlv.decode(2, seqBytes);
    const { v: sBytes, l: sLeftBytes } = tlv.decode(2, rLeftBytes);
    if (sLeftBytes.length)
      throw new E("invalid signature: left bytes after parsing");
    return { r: int.decode(rBytes), s: int.decode(sBytes) };
  },
  hexFromSig(sig) {
    const { _tlv: tlv, _int: int } = DER;
    const rs = tlv.encode(2, int.encode(sig.r));
    const ss = tlv.encode(2, int.encode(sig.s));
    const seq = rs + ss;
    return tlv.encode(48, seq);
  }
};
var _0n5 = BigInt(0);
var _1n5 = BigInt(1);
var _2n4 = BigInt(2);
var _3n2 = BigInt(3);
var _4n2 = BigInt(4);
function weierstrassPoints(opts) {
  const CURVE = validatePointOpts(opts);
  const { Fp } = CURVE;
  const Fn = Field(CURVE.n, CURVE.nBitLength);
  const toBytes6 = CURVE.toBytes || ((_c, point, _isCompressed) => {
    const a = point.toAffine();
    return concatBytes3(Uint8Array.from([4]), Fp.toBytes(a.x), Fp.toBytes(a.y));
  });
  const fromBytes = CURVE.fromBytes || ((bytes) => {
    const tail2 = bytes.subarray(1);
    const x = Fp.fromBytes(tail2.subarray(0, Fp.BYTES));
    const y = Fp.fromBytes(tail2.subarray(Fp.BYTES, 2 * Fp.BYTES));
    return { x, y };
  });
  function weierstrassEquation(x) {
    const { a, b } = CURVE;
    const x2 = Fp.sqr(x);
    const x3 = Fp.mul(x2, x);
    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b);
  }
  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
    throw new Error("bad generator point: equation left != right");
  function isWithinCurveOrder(num2) {
    return inRange(num2, _1n5, CURVE.n);
  }
  function normPrivateKeyToScalar(key) {
    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;
    if (lengths && typeof key !== "bigint") {
      if (isBytes5(key))
        key = bytesToHex(key);
      if (typeof key !== "string" || !lengths.includes(key.length))
        throw new Error("invalid private key");
      key = key.padStart(nByteLength * 2, "0");
    }
    let num2;
    try {
      num2 = typeof key === "bigint" ? key : bytesToNumberBE(ensureBytes("private key", key, nByteLength));
    } catch (error) {
      throw new Error("invalid private key, expected hex or " + nByteLength + " bytes, got " + typeof key);
    }
    if (wrapPrivateKey)
      num2 = mod(num2, N);
    aInRange("private key", num2, _1n5, N);
    return num2;
  }
  function assertPrjPoint(other) {
    if (!(other instanceof Point2))
      throw new Error("ProjectivePoint expected");
  }
  const toAffineMemo = memoized((p, iz) => {
    const { px: x, py: y, pz: z } = p;
    if (Fp.eql(z, Fp.ONE))
      return { x, y };
    const is0 = p.is0();
    if (iz == null)
      iz = is0 ? Fp.ONE : Fp.inv(z);
    const ax = Fp.mul(x, iz);
    const ay = Fp.mul(y, iz);
    const zz = Fp.mul(z, iz);
    if (is0)
      return { x: Fp.ZERO, y: Fp.ZERO };
    if (!Fp.eql(zz, Fp.ONE))
      throw new Error("invZ was invalid");
    return { x: ax, y: ay };
  });
  const assertValidMemo = memoized((p) => {
    if (p.is0()) {
      if (CURVE.allowInfinityPoint && !Fp.is0(p.py))
        return;
      throw new Error("bad point: ZERO");
    }
    const { x, y } = p.toAffine();
    if (!Fp.isValid(x) || !Fp.isValid(y))
      throw new Error("bad point: x or y not FE");
    const left = Fp.sqr(y);
    const right = weierstrassEquation(x);
    if (!Fp.eql(left, right))
      throw new Error("bad point: equation left != right");
    if (!p.isTorsionFree())
      throw new Error("bad point: not in prime-order subgroup");
    return true;
  });
  class Point2 {
    constructor(px, py, pz) {
      this.px = px;
      this.py = py;
      this.pz = pz;
      if (px == null || !Fp.isValid(px))
        throw new Error("x required");
      if (py == null || !Fp.isValid(py))
        throw new Error("y required");
      if (pz == null || !Fp.isValid(pz))
        throw new Error("z required");
      Object.freeze(this);
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(p) {
      const { x, y } = p || {};
      if (!p || !Fp.isValid(x) || !Fp.isValid(y))
        throw new Error("invalid affine point");
      if (p instanceof Point2)
        throw new Error("projective point not allowed");
      const is0 = (i) => Fp.eql(i, Fp.ZERO);
      if (is0(x) && is0(y))
        return Point2.ZERO;
      return new Point2(x, y, Fp.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(points) {
      const toInv = Fp.invertBatch(points.map((p) => p.pz));
      return points.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(hex) {
      const P = Point2.fromAffine(fromBytes(ensureBytes("pointHex", hex)));
      P.assertValidity();
      return P;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(privateKey) {
      return Point2.BASE.multiply(normPrivateKeyToScalar(privateKey));
    }
    // Multiscalar Multiplication
    static msm(points, scalars) {
      return pippenger(Point2, Fn, points, scalars);
    }
    // "Private method", don't use it directly
    _setWindowSize(windowSize) {
      wnaf.setWindowSize(this, windowSize);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      assertValidMemo(this);
    }
    hasEvenY() {
      const { y } = this.toAffine();
      if (Fp.isOdd)
        return !Fp.isOdd(y);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(other) {
      assertPrjPoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X2, py: Y2, pz: Z2 } = other;
      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
      return U1 && U2;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new Point2(this.px, Fp.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a, b } = CURVE;
      const b3 = Fp.mul(b, _3n2);
      const { px: X1, py: Y1, pz: Z1 } = this;
      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
      let t0 = Fp.mul(X1, X1);
      let t1 = Fp.mul(Y1, Y1);
      let t2 = Fp.mul(Z1, Z1);
      let t3 = Fp.mul(X1, Y1);
      t3 = Fp.add(t3, t3);
      Z3 = Fp.mul(X1, Z1);
      Z3 = Fp.add(Z3, Z3);
      X3 = Fp.mul(a, Z3);
      Y3 = Fp.mul(b3, t2);
      Y3 = Fp.add(X3, Y3);
      X3 = Fp.sub(t1, Y3);
      Y3 = Fp.add(t1, Y3);
      Y3 = Fp.mul(X3, Y3);
      X3 = Fp.mul(t3, X3);
      Z3 = Fp.mul(b3, Z3);
      t2 = Fp.mul(a, t2);
      t3 = Fp.sub(t0, t2);
      t3 = Fp.mul(a, t3);
      t3 = Fp.add(t3, Z3);
      Z3 = Fp.add(t0, t0);
      t0 = Fp.add(Z3, t0);
      t0 = Fp.add(t0, t2);
      t0 = Fp.mul(t0, t3);
      Y3 = Fp.add(Y3, t0);
      t2 = Fp.mul(Y1, Z1);
      t2 = Fp.add(t2, t2);
      t0 = Fp.mul(t2, t3);
      X3 = Fp.sub(X3, t0);
      Z3 = Fp.mul(t2, t1);
      Z3 = Fp.add(Z3, Z3);
      Z3 = Fp.add(Z3, Z3);
      return new Point2(X3, Y3, Z3);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(other) {
      assertPrjPoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X2, py: Y2, pz: Z2 } = other;
      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
      const a = CURVE.a;
      const b3 = Fp.mul(CURVE.b, _3n2);
      let t0 = Fp.mul(X1, X2);
      let t1 = Fp.mul(Y1, Y2);
      let t2 = Fp.mul(Z1, Z2);
      let t3 = Fp.add(X1, Y1);
      let t4 = Fp.add(X2, Y2);
      t3 = Fp.mul(t3, t4);
      t4 = Fp.add(t0, t1);
      t3 = Fp.sub(t3, t4);
      t4 = Fp.add(X1, Z1);
      let t5 = Fp.add(X2, Z2);
      t4 = Fp.mul(t4, t5);
      t5 = Fp.add(t0, t2);
      t4 = Fp.sub(t4, t5);
      t5 = Fp.add(Y1, Z1);
      X3 = Fp.add(Y2, Z2);
      t5 = Fp.mul(t5, X3);
      X3 = Fp.add(t1, t2);
      t5 = Fp.sub(t5, X3);
      Z3 = Fp.mul(a, t4);
      X3 = Fp.mul(b3, t2);
      Z3 = Fp.add(X3, Z3);
      X3 = Fp.sub(t1, Z3);
      Z3 = Fp.add(t1, Z3);
      Y3 = Fp.mul(X3, Z3);
      t1 = Fp.add(t0, t0);
      t1 = Fp.add(t1, t0);
      t2 = Fp.mul(a, t2);
      t4 = Fp.mul(b3, t4);
      t1 = Fp.add(t1, t2);
      t2 = Fp.sub(t0, t2);
      t2 = Fp.mul(a, t2);
      t4 = Fp.add(t4, t2);
      t0 = Fp.mul(t1, t4);
      Y3 = Fp.add(Y3, t0);
      t0 = Fp.mul(t5, t4);
      X3 = Fp.mul(t3, X3);
      X3 = Fp.sub(X3, t0);
      t0 = Fp.mul(t3, t1);
      Z3 = Fp.mul(t5, Z3);
      Z3 = Fp.add(Z3, t0);
      return new Point2(X3, Y3, Z3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    is0() {
      return this.equals(Point2.ZERO);
    }
    wNAF(n) {
      return wnaf.wNAFCached(this, n, Point2.normalizeZ);
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(sc) {
      const { endo, n: N } = CURVE;
      aInRange("scalar", sc, _0n5, N);
      const I = Point2.ZERO;
      if (sc === _0n5)
        return I;
      if (this.is0() || sc === _1n5)
        return this;
      if (!endo || wnaf.hasPrecomputes(this))
        return wnaf.wNAFCachedUnsafe(this, sc, Point2.normalizeZ);
      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);
      let k1p = I;
      let k2p = I;
      let d = this;
      while (k1 > _0n5 || k2 > _0n5) {
        if (k1 & _1n5)
          k1p = k1p.add(d);
        if (k2 & _1n5)
          k2p = k2p.add(d);
        d = d.double();
        k1 >>= _1n5;
        k2 >>= _1n5;
      }
      if (k1neg)
        k1p = k1p.negate();
      if (k2neg)
        k2p = k2p.negate();
      k2p = new Point2(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
      return k1p.add(k2p);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(scalar) {
      const { endo, n: N } = CURVE;
      aInRange("scalar", scalar, _1n5, N);
      let point, fake;
      if (endo) {
        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);
        let { p: k1p, f: f1p } = this.wNAF(k1);
        let { p: k2p, f: f2p } = this.wNAF(k2);
        k1p = wnaf.constTimeNegate(k1neg, k1p);
        k2p = wnaf.constTimeNegate(k2neg, k2p);
        k2p = new Point2(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
        point = k1p.add(k2p);
        fake = f1p.add(f2p);
      } else {
        const { p, f: f2 } = this.wNAF(scalar);
        point = p;
        fake = f2;
      }
      return Point2.normalizeZ([point, fake])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(Q, a, b) {
      const G = Point2.BASE;
      const mul2 = (P, a2) => a2 === _0n5 || a2 === _1n5 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
      const sum2 = mul2(this, a).add(mul2(Q, b));
      return sum2.is0() ? void 0 : sum2;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(iz) {
      return toAffineMemo(this, iz);
    }
    isTorsionFree() {
      const { h: cofactor, isTorsionFree } = CURVE;
      if (cofactor === _1n5)
        return true;
      if (isTorsionFree)
        return isTorsionFree(Point2, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: cofactor, clearCofactor } = CURVE;
      if (cofactor === _1n5)
        return this;
      if (clearCofactor)
        return clearCofactor(Point2, this);
      return this.multiplyUnsafe(CURVE.h);
    }
    toRawBytes(isCompressed = true) {
      abool("isCompressed", isCompressed);
      this.assertValidity();
      return toBytes6(Point2, this, isCompressed);
    }
    toHex(isCompressed = true) {
      abool("isCompressed", isCompressed);
      return bytesToHex(this.toRawBytes(isCompressed));
    }
  }
  Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy, Fp.ONE);
  Point2.ZERO = new Point2(Fp.ZERO, Fp.ONE, Fp.ZERO);
  const _bits = CURVE.nBitLength;
  const wnaf = wNAF(Point2, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
  return {
    CURVE,
    ProjectivePoint: Point2,
    normPrivateKeyToScalar,
    weierstrassEquation,
    isWithinCurveOrder
  };
}
function validateOpts(curve) {
  const opts = validateBasic(curve);
  validateObject(opts, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  });
  return Object.freeze({ lowS: true, ...opts });
}
function weierstrass(curveDef) {
  const CURVE = validateOpts(curveDef);
  const { Fp, n: CURVE_ORDER } = CURVE;
  const compressedLen = Fp.BYTES + 1;
  const uncompressedLen = 2 * Fp.BYTES + 1;
  function modN2(a) {
    return mod(a, CURVE_ORDER);
  }
  function invN(a) {
    return invert3(a, CURVE_ORDER);
  }
  const { ProjectivePoint: Point2, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
    ...CURVE,
    toBytes(_c, point, isCompressed) {
      const a = point.toAffine();
      const x = Fp.toBytes(a.x);
      const cat = concatBytes3;
      abool("isCompressed", isCompressed);
      if (isCompressed) {
        return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
      } else {
        return cat(Uint8Array.from([4]), x, Fp.toBytes(a.y));
      }
    },
    fromBytes(bytes) {
      const len = bytes.length;
      const head2 = bytes[0];
      const tail2 = bytes.subarray(1);
      if (len === compressedLen && (head2 === 2 || head2 === 3)) {
        const x = bytesToNumberBE(tail2);
        if (!inRange(x, _1n5, Fp.ORDER))
          throw new Error("Point is not on curve");
        const y2 = weierstrassEquation(x);
        let y;
        try {
          y = Fp.sqrt(y2);
        } catch (sqrtError) {
          const suffix = sqrtError instanceof Error ? ": " + sqrtError.message : "";
          throw new Error("Point is not on curve" + suffix);
        }
        const isYOdd = (y & _1n5) === _1n5;
        const isHeadOdd = (head2 & 1) === 1;
        if (isHeadOdd !== isYOdd)
          y = Fp.neg(y);
        return { x, y };
      } else if (len === uncompressedLen && head2 === 4) {
        const x = Fp.fromBytes(tail2.subarray(0, Fp.BYTES));
        const y = Fp.fromBytes(tail2.subarray(Fp.BYTES, 2 * Fp.BYTES));
        return { x, y };
      } else {
        const cl = compressedLen;
        const ul = uncompressedLen;
        throw new Error("invalid Point, expected length of " + cl + ", or uncompressed " + ul + ", got " + len);
      }
    }
  });
  const numToNByteStr = (num2) => bytesToHex(numberToBytesBE(num2, CURVE.nByteLength));
  function isBiggerThanHalfOrder(number) {
    const HALF = CURVE_ORDER >> _1n5;
    return number > HALF;
  }
  function normalizeS(s) {
    return isBiggerThanHalfOrder(s) ? modN2(-s) : s;
  }
  const slcNum = (b, from, to) => bytesToNumberBE(b.slice(from, to));
  class Signature {
    constructor(r, s, recovery) {
      this.r = r;
      this.s = s;
      this.recovery = recovery;
      this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(hex) {
      const l = CURVE.nByteLength;
      hex = ensureBytes("compactSignature", hex, l * 2);
      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(hex) {
      const { r, s } = DER.toSig(ensureBytes("DER", hex));
      return new Signature(r, s);
    }
    assertValidity() {
      aInRange("r", this.r, _1n5, CURVE_ORDER);
      aInRange("s", this.s, _1n5, CURVE_ORDER);
    }
    addRecoveryBit(recovery) {
      return new Signature(this.r, this.s, recovery);
    }
    recoverPublicKey(msgHash) {
      const { r, s, recovery: rec } = this;
      const h = bits2int_modN(ensureBytes("msgHash", msgHash));
      if (rec == null || ![0, 1, 2, 3].includes(rec))
        throw new Error("recovery id invalid");
      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
      if (radj >= Fp.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const prefix = (rec & 1) === 0 ? "02" : "03";
      const R = Point2.fromHex(prefix + numToNByteStr(radj));
      const ir = invN(radj);
      const u1 = modN2(-h * ir);
      const u2 = modN2(s * ir);
      const Q = Point2.BASE.multiplyAndAddUnsafe(R, u1, u2);
      if (!Q)
        throw new Error("point at infinify");
      Q.assertValidity();
      return Q;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return isBiggerThanHalfOrder(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new Signature(this.r, modN2(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return hexToBytes(this.toDERHex());
    }
    toDERHex() {
      return DER.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return hexToBytes(this.toCompactHex());
    }
    toCompactHex() {
      return numToNByteStr(this.r) + numToNByteStr(this.s);
    }
  }
  const utils = {
    isValidPrivateKey(privateKey) {
      try {
        normPrivateKeyToScalar(privateKey);
        return true;
      } catch (error) {
        return false;
      }
    },
    normPrivateKeyToScalar,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const length3 = getMinHashLength(CURVE.n);
      return mapHashToField(CURVE.randomBytes(length3), CURVE.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(windowSize = 8, point = Point2.BASE) {
      point._setWindowSize(windowSize);
      point.multiply(BigInt(3));
      return point;
    }
  };
  function getPublicKey(privateKey, isCompressed = true) {
    return Point2.fromPrivateKey(privateKey).toRawBytes(isCompressed);
  }
  function isProbPub(item) {
    const arr = isBytes5(item);
    const str = typeof item === "string";
    const len = (arr || str) && item.length;
    if (arr)
      return len === compressedLen || len === uncompressedLen;
    if (str)
      return len === 2 * compressedLen || len === 2 * uncompressedLen;
    if (item instanceof Point2)
      return true;
    return false;
  }
  function getSharedSecret(privateA, publicB, isCompressed = true) {
    if (isProbPub(privateA))
      throw new Error("first arg must be private key");
    if (!isProbPub(publicB))
      throw new Error("second arg must be public key");
    const b = Point2.fromHex(publicB);
    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
  }
  const bits2int = CURVE.bits2int || function(bytes) {
    if (bytes.length > 8192)
      throw new Error("input is too large");
    const num2 = bytesToNumberBE(bytes);
    const delta = bytes.length * 8 - CURVE.nBitLength;
    return delta > 0 ? num2 >> BigInt(delta) : num2;
  };
  const bits2int_modN = CURVE.bits2int_modN || function(bytes) {
    return modN2(bits2int(bytes));
  };
  const ORDER_MASK = bitMask(CURVE.nBitLength);
  function int2octets(num2) {
    aInRange("num < 2^" + CURVE.nBitLength, num2, _0n5, ORDER_MASK);
    return numberToBytesBE(num2, CURVE.nByteLength);
  }
  function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
    if (["recovered", "canonical"].some((k) => k in opts))
      throw new Error("sign() legacy options not supported");
    const { hash: hash2, randomBytes: randomBytes4 } = CURVE;
    let { lowS, prehash, extraEntropy: ent } = opts;
    if (lowS == null)
      lowS = true;
    msgHash = ensureBytes("msgHash", msgHash);
    validateSigVerOpts(opts);
    if (prehash)
      msgHash = ensureBytes("prehashed msgHash", hash2(msgHash));
    const h1int = bits2int_modN(msgHash);
    const d = normPrivateKeyToScalar(privateKey);
    const seedArgs = [int2octets(d), int2octets(h1int)];
    if (ent != null && ent !== false) {
      const e = ent === true ? randomBytes4(Fp.BYTES) : ent;
      seedArgs.push(ensureBytes("extraEntropy", e));
    }
    const seed = concatBytes3(...seedArgs);
    const m = h1int;
    function k2sig(kBytes) {
      const k = bits2int(kBytes);
      if (!isWithinCurveOrder(k))
        return;
      const ik = invN(k);
      const q = Point2.BASE.multiply(k).toAffine();
      const r = modN2(q.x);
      if (r === _0n5)
        return;
      const s = modN2(ik * modN2(m + r * d));
      if (s === _0n5)
        return;
      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n5);
      let normS = s;
      if (lowS && isBiggerThanHalfOrder(s)) {
        normS = normalizeS(s);
        recovery ^= 1;
      }
      return new Signature(r, normS, recovery);
    }
    return { seed, k2sig };
  }
  const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
  const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
  function sign(msgHash, privKey, opts = defaultSigOpts) {
    const { seed, k2sig } = prepSig(msgHash, privKey, opts);
    const C = CURVE;
    const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
    return drbg(seed, k2sig);
  }
  Point2.BASE._setWindowSize(8);
  function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
    var _a103;
    const sg = signature;
    msgHash = ensureBytes("msgHash", msgHash);
    publicKey = ensureBytes("publicKey", publicKey);
    const { lowS, prehash, format: format2 } = opts;
    validateSigVerOpts(opts);
    if ("strict" in opts)
      throw new Error("options.strict was renamed to lowS");
    if (format2 !== void 0 && format2 !== "compact" && format2 !== "der")
      throw new Error("format must be compact or der");
    const isHex = typeof sg === "string" || isBytes5(sg);
    const isObj = !isHex && !format2 && typeof sg === "object" && sg !== null && typeof sg.r === "bigint" && typeof sg.s === "bigint";
    if (!isHex && !isObj)
      throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
    let _sig = void 0;
    let P;
    try {
      if (isObj)
        _sig = new Signature(sg.r, sg.s);
      if (isHex) {
        try {
          if (format2 !== "compact")
            _sig = Signature.fromDER(sg);
        } catch (derError) {
          if (!(derError instanceof DER.Err))
            throw derError;
        }
        if (!_sig && format2 !== "der")
          _sig = Signature.fromCompact(sg);
      }
      P = Point2.fromHex(publicKey);
    } catch (error) {
      return false;
    }
    if (!_sig)
      return false;
    if (lowS && _sig.hasHighS())
      return false;
    if (prehash)
      msgHash = CURVE.hash(msgHash);
    const { r, s } = _sig;
    const h = bits2int_modN(msgHash);
    const is3 = invN(s);
    const u1 = modN2(h * is3);
    const u2 = modN2(r * is3);
    const R = (_a103 = Point2.BASE.multiplyAndAddUnsafe(P, u1, u2)) == null ? void 0 : _a103.toAffine();
    if (!R)
      return false;
    const v = modN2(R.x);
    return v === r;
  }
  return {
    CURVE,
    getPublicKey,
    getSharedSecret,
    sign,
    verify,
    ProjectivePoint: Point2,
    Signature,
    utils
  };
}
function SWUFpSqrtRatio(Fp, Z) {
  const q = Fp.ORDER;
  let l = _0n5;
  for (let o3 = q - _1n5; o3 % _2n4 === _0n5; o3 /= _2n4)
    l += _1n5;
  const c1 = l;
  const _2n_pow_c1_1 = _2n4 << c1 - _1n5 - _1n5;
  const _2n_pow_c1 = _2n_pow_c1_1 * _2n4;
  const c2 = (q - _1n5) / _2n_pow_c1;
  const c3 = (c2 - _1n5) / _2n4;
  const c4 = _2n_pow_c1 - _1n5;
  const c5 = _2n_pow_c1_1;
  const c6 = Fp.pow(Z, c2);
  const c7 = Fp.pow(Z, (c2 + _1n5) / _2n4);
  let sqrtRatio = (u, v) => {
    let tv1 = c6;
    let tv2 = Fp.pow(v, c4);
    let tv3 = Fp.sqr(tv2);
    tv3 = Fp.mul(tv3, v);
    let tv5 = Fp.mul(u, tv3);
    tv5 = Fp.pow(tv5, c3);
    tv5 = Fp.mul(tv5, tv2);
    tv2 = Fp.mul(tv5, v);
    tv3 = Fp.mul(tv5, u);
    let tv4 = Fp.mul(tv3, tv2);
    tv5 = Fp.pow(tv4, c5);
    let isQR = Fp.eql(tv5, Fp.ONE);
    tv2 = Fp.mul(tv3, c7);
    tv5 = Fp.mul(tv4, tv1);
    tv3 = Fp.cmov(tv2, tv3, isQR);
    tv4 = Fp.cmov(tv5, tv4, isQR);
    for (let i = c1; i > _1n5; i--) {
      let tv52 = i - _2n4;
      tv52 = _2n4 << tv52 - _1n5;
      let tvv5 = Fp.pow(tv4, tv52);
      const e1 = Fp.eql(tvv5, Fp.ONE);
      tv2 = Fp.mul(tv3, tv1);
      tv1 = Fp.mul(tv1, tv1);
      tvv5 = Fp.mul(tv4, tv1);
      tv3 = Fp.cmov(tv2, tv3, e1);
      tv4 = Fp.cmov(tvv5, tv4, e1);
    }
    return { isValid: isQR, value: tv3 };
  };
  if (Fp.ORDER % _4n2 === _3n2) {
    const c12 = (Fp.ORDER - _3n2) / _4n2;
    const c22 = Fp.sqrt(Fp.neg(Z));
    sqrtRatio = (u, v) => {
      let tv1 = Fp.sqr(v);
      const tv2 = Fp.mul(u, v);
      tv1 = Fp.mul(tv1, tv2);
      let y1 = Fp.pow(tv1, c12);
      y1 = Fp.mul(y1, tv2);
      const y2 = Fp.mul(y1, c22);
      const tv3 = Fp.mul(Fp.sqr(y1), v);
      const isQR = Fp.eql(tv3, u);
      let y = Fp.cmov(y2, y1, isQR);
      return { isValid: isQR, value: y };
    };
  }
  return sqrtRatio;
}
function mapToCurveSimpleSWU(Fp, opts) {
  validateField(Fp);
  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))
    throw new Error("mapToCurveSimpleSWU: invalid opts");
  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);
  if (!Fp.isOdd)
    throw new Error("Fp.isOdd is not implemented!");
  return (u) => {
    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
    tv1 = Fp.sqr(u);
    tv1 = Fp.mul(tv1, opts.Z);
    tv2 = Fp.sqr(tv1);
    tv2 = Fp.add(tv2, tv1);
    tv3 = Fp.add(tv2, Fp.ONE);
    tv3 = Fp.mul(tv3, opts.B);
    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO));
    tv4 = Fp.mul(tv4, opts.A);
    tv2 = Fp.sqr(tv3);
    tv6 = Fp.sqr(tv4);
    tv5 = Fp.mul(tv6, opts.A);
    tv2 = Fp.add(tv2, tv5);
    tv2 = Fp.mul(tv2, tv3);
    tv6 = Fp.mul(tv6, tv4);
    tv5 = Fp.mul(tv6, opts.B);
    tv2 = Fp.add(tv2, tv5);
    x = Fp.mul(tv1, tv3);
    const { isValid, value } = sqrtRatio(tv2, tv6);
    y = Fp.mul(tv1, u);
    y = Fp.mul(y, value);
    x = Fp.cmov(x, tv3, isValid);
    y = Fp.cmov(y, value, isValid);
    const e1 = Fp.isOdd(u) === Fp.isOdd(y);
    y = Fp.cmov(Fp.neg(y), y, e1);
    x = Fp.div(x, tv4);
    return { x, y };
  };
}

// node_modules/@fuel-ts/account/node_modules/@noble/curves/esm/_shortw_utils.js
function getHash(hash2) {
  return {
    hash: hash2,
    hmac: (key, ...msgs) => hmac2(hash2, key, concatBytes2(...msgs)),
    randomBytes: randomBytes3
  };
}
function createCurve(curveDef, defHash) {
  const create = (hash2) => weierstrass({ ...curveDef, ...getHash(hash2) });
  return { ...create(defHash), create };
}

// node_modules/@fuel-ts/account/node_modules/@noble/curves/esm/abstract/hash-to-curve.js
var os2ip = bytesToNumberBE;
function i2osp(value, length3) {
  anum(value);
  anum(length3);
  if (value < 0 || value >= 1 << 8 * length3)
    throw new Error("invalid I2OSP input: " + value);
  const res = Array.from({ length: length3 }).fill(0);
  for (let i = length3 - 1; i >= 0; i--) {
    res[i] = value & 255;
    value >>>= 8;
  }
  return new Uint8Array(res);
}
function strxor(a, b) {
  const arr = new Uint8Array(a.length);
  for (let i = 0; i < a.length; i++) {
    arr[i] = a[i] ^ b[i];
  }
  return arr;
}
function anum(item) {
  if (!Number.isSafeInteger(item))
    throw new Error("number expected");
}
function expand_message_xmd(msg, DST, lenInBytes, H) {
  abytes5(msg);
  abytes5(DST);
  anum(lenInBytes);
  if (DST.length > 255)
    DST = H(concatBytes3(utf8ToBytes5("H2C-OVERSIZE-DST-"), DST));
  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
  const ell = Math.ceil(lenInBytes / b_in_bytes);
  if (lenInBytes > 65535 || ell > 255)
    throw new Error("expand_message_xmd: invalid lenInBytes");
  const DST_prime = concatBytes3(DST, i2osp(DST.length, 1));
  const Z_pad = i2osp(0, r_in_bytes);
  const l_i_b_str = i2osp(lenInBytes, 2);
  const b = new Array(ell);
  const b_0 = H(concatBytes3(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
  b[0] = H(concatBytes3(b_0, i2osp(1, 1), DST_prime));
  for (let i = 1; i <= ell; i++) {
    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];
    b[i] = H(concatBytes3(...args));
  }
  const pseudo_random_bytes = concatBytes3(...b);
  return pseudo_random_bytes.slice(0, lenInBytes);
}
function expand_message_xof(msg, DST, lenInBytes, k, H) {
  abytes5(msg);
  abytes5(DST);
  anum(lenInBytes);
  if (DST.length > 255) {
    const dkLen = Math.ceil(2 * k / 8);
    DST = H.create({ dkLen }).update(utf8ToBytes5("H2C-OVERSIZE-DST-")).update(DST).digest();
  }
  if (lenInBytes > 65535 || DST.length > 255)
    throw new Error("expand_message_xof: invalid lenInBytes");
  return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
}
function hash_to_field(msg, count2, options) {
  validateObject(options, {
    DST: "stringOrUint8Array",
    p: "bigint",
    m: "isSafeInteger",
    k: "isSafeInteger",
    hash: "hash"
  });
  const { p, k, m, hash: hash2, expand, DST: _DST } = options;
  abytes5(msg);
  anum(count2);
  const DST = typeof _DST === "string" ? utf8ToBytes5(_DST) : _DST;
  const log2p = p.toString(2).length;
  const L = Math.ceil((log2p + k) / 8);
  const len_in_bytes = count2 * m * L;
  let prb;
  if (expand === "xmd") {
    prb = expand_message_xmd(msg, DST, len_in_bytes, hash2);
  } else if (expand === "xof") {
    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash2);
  } else if (expand === "_internal_pass") {
    prb = msg;
  } else {
    throw new Error('expand must be "xmd" or "xof"');
  }
  const u = new Array(count2);
  for (let i = 0; i < count2; i++) {
    const e = new Array(m);
    for (let j = 0; j < m; j++) {
      const elm_offset = L * (j + i * m);
      const tv = prb.subarray(elm_offset, elm_offset + L);
      e[j] = mod(os2ip(tv), p);
    }
    u[i] = e;
  }
  return u;
}
function isogenyMap(field, map3) {
  const COEFF = map3.map((i) => Array.from(i).reverse());
  return (x, y) => {
    const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
    x = field.div(xNum, xDen);
    y = field.mul(y, field.div(yNum, yDen));
    return { x, y };
  };
}
function createHasher(Point2, mapToCurve, def) {
  if (typeof mapToCurve !== "function")
    throw new Error("mapToCurve() must be defined");
  return {
    // Encodes byte string to elliptic curve.
    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
    hashToCurve(msg, options) {
      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });
      const u0 = Point2.fromAffine(mapToCurve(u[0]));
      const u1 = Point2.fromAffine(mapToCurve(u[1]));
      const P = u0.add(u1).clearCofactor();
      P.assertValidity();
      return P;
    },
    // Encodes byte string to elliptic curve.
    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
    encodeToCurve(msg, options) {
      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });
      const P = Point2.fromAffine(mapToCurve(u[0])).clearCofactor();
      P.assertValidity();
      return P;
    },
    // Same as encodeToCurve, but without hash
    mapToCurve(scalars) {
      if (!Array.isArray(scalars))
        throw new Error("mapToCurve: expected array of bigints");
      for (const i of scalars)
        if (typeof i !== "bigint")
          throw new Error("mapToCurve: expected array of bigints");
      const P = Point2.fromAffine(mapToCurve(scalars)).clearCofactor();
      P.assertValidity();
      return P;
    }
  };
}

// node_modules/@fuel-ts/account/node_modules/@noble/curves/esm/secp256k1.js
var secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
var secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
var _1n6 = BigInt(1);
var _2n5 = BigInt(2);
var divNearest = (a, b) => (a + b / _2n5) / b;
function sqrtMod(y) {
  const P = secp256k1P;
  const _3n3 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
  const b22 = y * y * y % P;
  const b3 = b22 * b22 * y % P;
  const b6 = pow2(b3, _3n3, P) * b3 % P;
  const b9 = pow2(b6, _3n3, P) * b3 % P;
  const b11 = pow2(b9, _2n5, P) * b22 % P;
  const b222 = pow2(b11, _11n, P) * b11 % P;
  const b44 = pow2(b222, _22n, P) * b222 % P;
  const b88 = pow2(b44, _44n, P) * b44 % P;
  const b176 = pow2(b88, _88n, P) * b88 % P;
  const b220 = pow2(b176, _44n, P) * b44 % P;
  const b223 = pow2(b220, _3n3, P) * b3 % P;
  const t1 = pow2(b223, _23n, P) * b222 % P;
  const t2 = pow2(t1, _6n, P) * b22 % P;
  const root = pow2(t2, _2n5, P);
  if (!Fpk1.eql(Fpk1.sqr(root), y))
    throw new Error("Cannot find square root");
  return root;
}
var Fpk1 = Field(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
var secp256k1 = createCurve({
  a: BigInt(0),
  // equation params: a, b
  b: BigInt(7),
  Fp: Fpk1,
  // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
  n: secp256k1N,
  // Curve order, total count of valid points in the field
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  // Cofactor
  lowS: true,
  // Allow only low-S signatures by default in sign() and verify()
  endo: {
    // Endomorphism, see above
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (k) => {
      const n = secp256k1N;
      const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
      const b1 = -_1n6 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
      const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
      const b22 = a1;
      const POW_2_128 = BigInt("0x100000000000000000000000000000000");
      const c1 = divNearest(b22 * k, n);
      const c2 = divNearest(-b1 * k, n);
      let k1 = mod(k - c1 * a1 - c2 * a2, n);
      let k2 = mod(-c1 * b1 - c2 * b22, n);
      const k1neg = k1 > POW_2_128;
      const k2neg = k2 > POW_2_128;
      if (k1neg)
        k1 = n - k1;
      if (k2neg)
        k2 = n - k2;
      if (k1 > POW_2_128 || k2 > POW_2_128) {
        throw new Error("splitScalar: Endomorphism failed, k=" + k);
      }
      return { k1neg, k1, k2neg, k2 };
    }
  }
}, sha2565);
var _0n6 = BigInt(0);
var TAGGED_HASH_PREFIXES = {};
function taggedHash(tag, ...messages) {
  let tagP = TAGGED_HASH_PREFIXES[tag];
  if (tagP === void 0) {
    const tagH = sha2565(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
    tagP = concatBytes3(tagH, tagH);
    TAGGED_HASH_PREFIXES[tag] = tagP;
  }
  return sha2565(concatBytes3(tagP, ...messages));
}
var pointToBytes = (point) => point.toRawBytes(true).slice(1);
var numTo32b = (n) => numberToBytesBE(n, 32);
var modP = (x) => mod(x, secp256k1P);
var modN = (x) => mod(x, secp256k1N);
var Point = secp256k1.ProjectivePoint;
var GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);
function schnorrGetExtPubKey(priv) {
  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv);
  let p = Point.fromPrivateKey(d_);
  const scalar = p.hasEvenY() ? d_ : modN(-d_);
  return { scalar, bytes: pointToBytes(p) };
}
function lift_x(x) {
  aInRange("x", x, _1n6, secp256k1P);
  const xx = modP(x * x);
  const c = modP(xx * x + BigInt(7));
  let y = sqrtMod(c);
  if (y % _2n5 !== _0n6)
    y = modP(-y);
  const p = new Point(x, y, _1n6);
  p.assertValidity();
  return p;
}
var num = bytesToNumberBE;
function challenge(...args) {
  return modN(num(taggedHash("BIP0340/challenge", ...args)));
}
function schnorrGetPublicKey(privateKey) {
  return schnorrGetExtPubKey(privateKey).bytes;
}
function schnorrSign(message, privateKey, auxRand = randomBytes3(32)) {
  const m = ensureBytes("message", message);
  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey);
  const a = ensureBytes("auxRand", auxRand, 32);
  const t = numTo32b(d ^ num(taggedHash("BIP0340/aux", a)));
  const rand = taggedHash("BIP0340/nonce", t, px, m);
  const k_ = modN(num(rand));
  if (k_ === _0n6)
    throw new Error("sign failed: k is zero");
  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_);
  const e = challenge(rx, px, m);
  const sig = new Uint8Array(64);
  sig.set(rx, 0);
  sig.set(numTo32b(modN(k + e * d)), 32);
  if (!schnorrVerify(sig, m, px))
    throw new Error("sign: Invalid signature produced");
  return sig;
}
function schnorrVerify(signature, message, publicKey) {
  const sig = ensureBytes("signature", signature, 64);
  const m = ensureBytes("message", message);
  const pub = ensureBytes("publicKey", publicKey, 32);
  try {
    const P = lift_x(num(pub));
    const r = num(sig.subarray(0, 32));
    if (!inRange(r, _1n6, secp256k1P))
      return false;
    const s = num(sig.subarray(32, 64));
    if (!inRange(s, _1n6, secp256k1N))
      return false;
    const e = challenge(numTo32b(r), pointToBytes(P), m);
    const R = GmulAdd(P, s, modN(-e));
    if (!R || !R.hasEvenY() || R.toAffine().x !== r)
      return false;
    return true;
  } catch (error) {
    return false;
  }
}
var schnorr = (() => ({
  getPublicKey: schnorrGetPublicKey,
  sign: schnorrSign,
  verify: schnorrVerify,
  utils: {
    randomPrivateKey: secp256k1.utils.randomPrivateKey,
    lift_x,
    pointToBytes,
    numberToBytesBE,
    bytesToNumberBE,
    taggedHash,
    mod
  }
}))();
var isoMap = (() => isogenyMap(Fpk1, [
  // xNum
  [
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
    "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
    "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
  ],
  // xDen
  [
    "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
    "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ],
  // yNum
  [
    "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
    "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
    "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
    "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
  ],
  // yDen
  [
    "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
    "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
    "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ]
].map((i) => i.map((j) => BigInt(j)))))();
var mapSWU = (() => mapToCurveSimpleSWU(Fpk1, {
  A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
  B: BigInt("1771"),
  Z: Fpk1.create(BigInt("-11"))
}))();
var htf = (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {
  const { x, y } = mapSWU(Fpk1.create(scalars[0]));
  return isoMap(x, y);
}, {
  DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
  encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
  p: Fpk1.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: sha2565
}))();
var hashToCurve = (() => htf.hashToCurve)();
var encodeToCurve = (() => htf.encodeToCurve)();

// node_modules/@fuel-ts/account/dist/index.mjs
var import_events = __toESM(require_events(), 1);

// node_modules/@fuel-ts/merkle/dist/index.mjs
var __defProp10 = Object.defineProperty;
var __name10 = (target, value) => __defProp10(target, "name", { value, configurable: true });
var EMPTY = "0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
var _a52;
var Node = (_a52 = class {
  constructor(left, right, parent, hash5, data, index = 0) {
    __publicField(this, "left");
    __publicField(this, "right");
    __publicField(this, "parent");
    __publicField(this, "hash");
    __publicField(this, "data");
    __publicField(this, "index");
    this.left = left;
    this.right = right;
    this.parent = parent;
    this.hash = hash5;
    this.data = data;
    this.index = index;
  }
}, __name10(_a52, "Node"), _a52);
var node_default = Node;
function hashLeaf(data) {
  return hash("0x00".concat(data.slice(2)));
}
__name10(hashLeaf, "hashLeaf");
function hashNode(left, right) {
  return hash("0x01".concat(left.slice(2)).concat(right.slice(2)));
}
__name10(hashNode, "hashNode");
function constructTree(data) {
  const nodes = [];
  for (let i = 0; i < data.length; i += 1) {
    const hashed = hashLeaf(data[i]);
    const leaf = new node_default(-1, -1, -1, hashed, data[i]);
    leaf.index = i;
    nodes.push(leaf);
  }
  const nodesList = [...nodes];
  let pNodes = [...nodes];
  let size = nodes.length + 1 >> 1;
  let odd = nodes.length & 1;
  while (true) {
    let i = 0;
    for (; i < size - odd; i += 1) {
      const j = i << 1;
      const hashed = hashNode(pNodes[j].hash, pNodes[j + 1].hash);
      nodes[i] = new node_default(pNodes[j].index, pNodes[j + 1].index, -1, hashed, "");
      const nextIndex = nodesList.length;
      nodes[i].index = nextIndex;
      nodesList[pNodes[j].index].parent = nextIndex;
      nodesList[pNodes[j + 1].index].parent = nextIndex;
      nodesList.push(nodes[i]);
    }
    if (size === 1) {
      break;
    }
    if (odd === 1) {
      nodes[i] = pNodes[i << 1];
    }
    odd = size & 1;
    size = size + 1 >> 1;
    pNodes = [...nodes];
  }
  return nodesList;
}
__name10(constructTree, "constructTree");
function calcRoot(data) {
  if (!data.length) {
    return EMPTY;
  }
  const nodes = [];
  for (let i = 0; i < data.length; i += 1) {
    const hashed = hashLeaf(data[i]);
    nodes.push(new node_default(-1, -1, -1, hashed, data[i]));
  }
  let pNodes = nodes;
  let size = nodes.length + 1 >> 1;
  let odd = nodes.length & 1;
  while (true) {
    let i = 0;
    for (; i < size - odd; i += 1) {
      const j = i << 1;
      const hashed = hashNode(pNodes[j].hash, pNodes[j + 1].hash);
      nodes[i] = new node_default(pNodes[j].index, pNodes[j + 1].index, -1, hashed, "");
    }
    if (odd === 1) {
      nodes[i] = pNodes[i << 1];
    }
    if (size === 1) {
      break;
    }
    odd = size & 1;
    size = size + 1 >> 1;
    pNodes = nodes;
  }
  return nodes[0].hash;
}
__name10(calcRoot, "calcRoot");
function getProof(nodes, id) {
  const proof = [];
  for (let prev = id, cur = nodes[id].parent; cur !== -1; prev = cur, cur = nodes[cur].parent) {
    if (nodes[cur].left === prev) {
      proof.push(nodes[nodes[cur].right].hash);
    } else {
      proof.push(nodes[nodes[cur].left].hash);
    }
  }
  return proof;
}
__name10(getProof, "getProof");
var leafPrefix = "0x00";
var nodePrefix = "0x01";
function hashLeaf2(key, data) {
  const value = "0x00".concat(key.slice(2)).concat(hash(data).slice(2));
  return [hash(value), value];
}
__name10(hashLeaf2, "hashLeaf");
function hashNode2(left, right) {
  const value = "0x01".concat(left.slice(2)).concat(right.slice(2));
  return [hash(value), value];
}
__name10(hashNode2, "hashNode");
function parseLeaf(data) {
  const len = nodePrefix.length;
  return ["0x".concat(data.slice(len, len + 64)), "0x".concat(data.slice(len + 64))];
}
__name10(parseLeaf, "parseLeaf");
function parseNode(data) {
  const len = nodePrefix.length;
  return ["0x".concat(data.slice(len, len + 64)), "0x".concat(data.slice(len + 64))];
}
__name10(parseNode, "parseNode");
function isLeaf(data) {
  return data.slice(0, 4) === leafPrefix;
}
__name10(isLeaf, "isLeaf");
var _a53;
var SparseCompactMerkleProof = (_a53 = class {
  constructor(SideNodes, NonMembershipLeafData, Bitmask, NumSideNodes, SiblingData) {
    __publicField(this, "SideNodes");
    __publicField(this, "NonMembershipLeafData");
    __publicField(this, "BitMask");
    __publicField(this, "NumSideNodes");
    __publicField(this, "SiblingData");
    this.SideNodes = SideNodes;
    this.NonMembershipLeafData = NonMembershipLeafData;
    this.BitMask = Bitmask;
    this.NumSideNodes = NumSideNodes;
    this.SiblingData = SiblingData;
  }
}, __name10(_a53, "SparseCompactMerkleProof"), _a53);
var sparseCompactMerkleProof_default = SparseCompactMerkleProof;
var _a54;
var SparseMerkleProof = (_a54 = class {
  constructor(sideNodes, NonMembershipLeafData, SiblingData) {
    __publicField(this, "SideNodes");
    __publicField(this, "NonMembershipLeafData");
    __publicField(this, "SiblingData");
    this.SideNodes = sideNodes;
    this.NonMembershipLeafData = NonMembershipLeafData;
    this.SiblingData = SiblingData;
  }
}, __name10(_a54, "SparseMerkleProof"), _a54);
var sparseMerkleProof_default = SparseMerkleProof;
var ZERO = "0x0000000000000000000000000000000000000000000000000000000000000000";
var MAX_HEIGHT = 256;
function getBitAtFromMSB(data, position) {
  const slicedData = data.slice(2);
  const byte = "0x".concat(
    slicedData.slice(Math.floor(position / 8) * 2, Math.floor(position / 8) * 2 + 2)
  );
  const bits2 = Number(byte) & 1 << 8 - 1 - position % 8;
  if (bits2 > 0) {
    return 1;
  }
  return 0;
}
__name10(getBitAtFromMSB, "getBitAtFromMSB");
function reverseSideNodes(sideNodes) {
  let left = 0;
  let right = sideNodes.length - 1;
  const reversedSideNodes = sideNodes;
  while (left < right) {
    [reversedSideNodes[left], reversedSideNodes[right]] = [
      reversedSideNodes[right],
      reversedSideNodes[left]
    ];
    left += 1;
    right -= 1;
  }
  return reversedSideNodes;
}
__name10(reverseSideNodes, "reverseSideNodes");
function countCommonPrefix(data1, data2) {
  let count2 = 0;
  for (let i = 0; i < MAX_HEIGHT; i += 1) {
    if (getBitAtFromMSB(data1, i) === getBitAtFromMSB(data2, i)) {
      count2 += 1;
    } else {
      break;
    }
  }
  return count2;
}
__name10(countCommonPrefix, "countCommonPrefix");
function compactProof(proof) {
  const bitMask2 = [];
  const compactedSideNodes = [];
  let node;
  for (let i = 0; i < proof.SideNodes.length; i += 1) {
    node = proof.SideNodes[i];
    if (node === ZERO) {
      bitMask2.push(0);
    } else {
      compactedSideNodes.push(node);
      bitMask2.push(1);
    }
  }
  const compactedProof = new sparseCompactMerkleProof_default(
    compactedSideNodes,
    proof.NonMembershipLeafData,
    bitMask2,
    proof.SideNodes.length,
    proof.SiblingData
  );
  return compactedProof;
}
__name10(compactProof, "compactProof");
var _a55;
var SparseMerkleTree = (_a55 = class {
  constructor() {
    __publicField(this, "ms");
    __publicField(this, "root");
    const ms = {};
    this.ms = ms;
    this.root = ZERO;
    this.ms[this.root] = ZERO;
  }
  get(key) {
    return this.ms[key];
  }
  set(key, value) {
    this.ms[key] = value;
  }
  setRoot(root) {
    this.root = root;
  }
  sideNodesForRoot(key, root) {
    const sideNodes = [];
    if (root === ZERO) {
      return [sideNodes, ZERO, "", ""];
    }
    let currentData = this.get(root);
    if (isLeaf(currentData)) {
      return [sideNodes, root, currentData, ""];
    }
    let leftNode;
    let rightNode;
    let nodeHash = "";
    let sideNode = "";
    for (let i = 0; i < MAX_HEIGHT; i += 1) {
      [leftNode, rightNode] = parseNode(currentData);
      if (getBitAtFromMSB(key, i) === 1) {
        sideNode = leftNode;
        nodeHash = rightNode;
      } else {
        sideNode = rightNode;
        nodeHash = leftNode;
      }
      sideNodes.push(sideNode);
      if (nodeHash === ZERO) {
        currentData = "";
        break;
      }
      currentData = this.get(nodeHash);
      if (isLeaf(currentData)) {
        break;
      }
    }
    const siblingData = this.get(sideNode);
    return [reverseSideNodes(sideNodes), nodeHash, currentData, siblingData];
  }
  deleteWithSideNodes(key, sideNodes, oldLeafHash, oldLeafData) {
    if (oldLeafHash === ZERO) {
      return this.root;
    }
    const [actualPath] = parseLeaf(oldLeafData);
    if (actualPath !== key) {
      return this.root;
    }
    let currentHash = "";
    let currentData = "";
    let sideNode = "";
    let sideNodeValue = "";
    let nonPlaceholderReached = false;
    for (let i = 0; i < sideNodes.length; i += 1) {
      if (sideNodes[i] === "") {
        continue;
      }
      sideNode = sideNodes[i];
      if (currentData === "") {
        sideNodeValue = this.get(sideNode);
        if (isLeaf(sideNodeValue)) {
          currentHash = sideNode;
          currentData = sideNode;
          continue;
        } else {
          currentData = ZERO;
          nonPlaceholderReached = true;
        }
      }
      if (!nonPlaceholderReached && sideNode === ZERO) {
        continue;
      } else if (!nonPlaceholderReached) {
        nonPlaceholderReached = true;
      }
      if (getBitAtFromMSB(key, sideNodes.length - 1 - i) === 1) {
        [currentHash, currentData] = hashNode2(sideNode, currentData);
      } else {
        [currentHash, currentData] = hashNode2(currentData, sideNode);
      }
      this.set(currentHash, currentData);
      currentData = currentHash;
    }
    if (currentHash === "") {
      currentHash = ZERO;
    }
    return currentHash;
  }
  updateWithSideNodes(key, value, sideNodes, oldLeafHash, oldLeafData) {
    let currentHash;
    let currentData;
    this.set(hash(value), value);
    [currentHash, currentData] = hashLeaf2(key, value);
    this.set(currentHash, currentData);
    currentData = currentHash;
    let commonPrefixCount;
    if (oldLeafHash === ZERO) {
      commonPrefixCount = MAX_HEIGHT;
    } else {
      const [actualPath] = parseLeaf(oldLeafData);
      commonPrefixCount = countCommonPrefix(key, actualPath);
    }
    if (commonPrefixCount !== MAX_HEIGHT) {
      if (getBitAtFromMSB(key, commonPrefixCount) === 1) {
        [currentHash, currentData] = hashNode2(oldLeafHash, currentData);
      } else {
        [currentHash, currentData] = hashNode2(currentData, oldLeafHash);
      }
      this.set(currentHash, currentData);
      currentData = currentHash;
    }
    for (let i = 0; i < MAX_HEIGHT; i += 1) {
      let sideNode;
      const offsetOfSideNodes = MAX_HEIGHT - sideNodes.length;
      if (i - offsetOfSideNodes < 0 || sideNodes[i - offsetOfSideNodes] === "") {
        if (commonPrefixCount !== MAX_HEIGHT && commonPrefixCount > MAX_HEIGHT - 1 - i) {
          sideNode = ZERO;
        } else {
          continue;
        }
      } else {
        sideNode = sideNodes[i - offsetOfSideNodes];
      }
      if (getBitAtFromMSB(key, MAX_HEIGHT - 1 - i) === 1) {
        [currentHash, currentData] = hashNode2(sideNode, currentData);
      } else {
        [currentHash, currentData] = hashNode2(currentData, sideNode);
      }
      this.set(currentHash, currentData);
      currentData = currentHash;
    }
    return currentHash;
  }
  update(key, value) {
    const [sideNodes, oldLeafHash, oldLeafData] = this.sideNodesForRoot(key, this.root);
    const newRoot = this.updateWithSideNodes(key, value, sideNodes, oldLeafHash, oldLeafData);
    this.setRoot(newRoot);
  }
  delete(key) {
    const [sideNodes, oldLeafHash, oldLeafData] = this.sideNodesForRoot(key, this.root);
    const newRoot = this.deleteWithSideNodes(key, sideNodes, oldLeafHash, oldLeafData);
    this.setRoot(newRoot);
  }
  prove(key) {
    const [sideNodes, leafHash, leafData, siblingData] = this.sideNodesForRoot(key, this.root);
    const nonEmptySideNodes = [];
    for (let i = 0; i < sideNodes.length; i += 1) {
      if (sideNodes[i] !== "") {
        nonEmptySideNodes.push(sideNodes[i]);
      }
    }
    let nonMembershipLeafData = "";
    if (leafHash !== ZERO) {
      const [actualPath] = parseLeaf(leafData);
      if (actualPath !== key) {
        nonMembershipLeafData = leafData;
      }
    }
    const proof = new sparseMerkleProof_default(nonEmptySideNodes, nonMembershipLeafData, siblingData);
    return proof;
  }
  proveCompacted(key) {
    const proof = this.prove(key);
    const compactedProof = compactProof(proof);
    return compactedProof;
  }
}, __name10(_a55, "SparseMerkleTree"), _a55);

// node_modules/@fuel-ts/account/dist/index.mjs
var import_events2 = __toESM(require_events(), 1);
var __defProp11 = Object.defineProperty;
var __name11 = (target, value) => __defProp11(target, "name", { value, configurable: true });
var CHAIN_IDS = {
  eth: {
    mainnet: 1,
    sepolia: 11155111,
    foundry: 31337
  },
  fuel: {
    devnet: 0,
    testnet: 0,
    mainnet: 9889
  }
};
var getDefaultChainId = __name11((networkType) => {
  if (networkType === "ethereum") {
    return CHAIN_IDS.eth.sepolia;
  }
  if (networkType === "fuel") {
    return CHAIN_IDS.fuel.testnet;
  }
  return void 0;
}, "getDefaultChainId");
var getAssetNetwork = __name11(({
  asset,
  chainId,
  networkType
}) => {
  const network = asset.networks.find(
    (item) => item.chainId === chainId && item.type === networkType
  );
  return network;
}, "getAssetNetwork");
var getAssetWithNetwork = __name11(({
  asset,
  chainId,
  networkType
}) => {
  const { networks: _, ...assetRest } = asset;
  const chainIdToUse = chainId ?? getDefaultChainId(networkType);
  if (chainIdToUse === void 0) {
    return void 0;
  }
  const assetNetwork = getAssetNetwork({
    asset,
    chainId: chainIdToUse,
    networkType
  });
  if (!assetNetwork) {
    return void 0;
  }
  return {
    ...assetRest,
    ...assetNetwork
  };
}, "getAssetWithNetwork");
var getAssetEth = __name11((asset, chainId) => getAssetWithNetwork({
  asset,
  networkType: "ethereum",
  chainId
}), "getAssetEth");
var getAssetFuel = __name11((asset, chainId) => getAssetWithNetwork({
  asset,
  networkType: "fuel",
  chainId
}), "getAssetFuel");
var DELIMITER_PATH = "/";
var trimRegex = /^\/|\/$/g;
var trimPath = __name11((path2 = "") => path2.replace(trimRegex, ""), "trimPath");
function urlJoin(baseUrl, ...paths3) {
  const hasBaseUrl = baseUrl !== null && baseUrl !== void 0;
  const rootPath = (baseUrl == null ? void 0 : baseUrl[0]) === "/" && baseUrl.length > 1;
  const allPaths = [baseUrl, ...paths3].filter(Boolean).map(trimPath);
  if (rootPath && hasBaseUrl) {
    allPaths.unshift("");
  }
  return allPaths.join(DELIMITER_PATH);
}
__name11(urlJoin, "urlJoin");
function resolveIconPaths(assets2, basePath = "./") {
  return assets2.map((asset) => ({
    ...asset,
    icon: urlJoin(basePath, asset.icon)
  }));
}
__name11(resolveIconPaths, "resolveIconPaths");
var fuelAssetsBaseUrl = "https://assets.fuel.network/providers/";
var rawAssets = [
  {
    name: "Ethereum",
    symbol: "ETH",
    icon: "eth.svg",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.sepolia,
        decimals: 18
      },
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.foundry,
        decimals: 18
      },
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.devnet,
        decimals: 9,
        assetId: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07"
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.testnet,
        decimals: 9,
        assetId: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07"
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        decimals: 9,
        assetId: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07"
      }
    ]
  },
  {
    name: "WETH",
    symbol: "WETH",
    icon: "weth.svg",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0xa38a5a8beeb08d95744bc7f58528073f4052b254def59eba20c99c202b5acaa3",
        decimals: 9
      }
    ]
  },
  {
    name: "weETH",
    symbol: "weETH",
    icon: "weETH.webp",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0x239ed6e12b7ce4089ee245244e3bf906999a6429c2a9a445a1e1faf56914a4ab",
        decimals: 9
      }
    ]
  },
  {
    name: "rsETH",
    symbol: "rsETH",
    icon: "rsETH.webp",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0xbae80f7fb8aa6b90d9b01ef726ec847cc4f59419c4d5f2ea88fec785d1b0e849",
        decimals: 9
      }
    ]
  },
  {
    name: "rETH",
    symbol: "rETH",
    icon: "reth.svg",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0xae78736cd615f374d3085123a210448e74fc6393",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0xf3f9a0ed0ce8eac5f89d6b83e41b3848212d5b5f56108c54a205bb228ca30c16",
        decimals: 9
      }
    ]
  },
  {
    name: "wbETH",
    symbol: "wbETH",
    icon: "wbeth.png",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0xa2E3356610840701BDf5611a53974510Ae27E2e1",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0x7843c74bef935e837f2bcf67b5d64ecb46dd53ff86375530b0caf3699e8ffafe",
        decimals: 9
      }
    ]
  },
  {
    name: "rstETH",
    symbol: "rstETH",
    icon: "rstETH.webp",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0x7a4EffD87C2f3C55CA251080b1343b605f327E3a",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0x962792286fbc9b1d5860b4551362a12249362c21594c77abf4b3fe2bbe8d977a",
        decimals: 9
      }
    ]
  },
  {
    name: "amphrETH",
    symbol: "amphrETH",
    icon: "amphrETH.png",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0x5fD13359Ba15A84B76f7F87568309040176167cd",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0x05fc623e57bd7bc1258efa8e4f62b05af5471d73df6f2c2dc11ecc81134c4f36",
        decimals: 9
      }
    ]
  },
  {
    name: "Manta mBTC",
    symbol: "Manta mBTC",
    icon: "manta-mbtc.svg",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0x4041381e947CFD3D483d67a25C6aa9Dc924250c5",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0xaf3111a248ff7a3238cdeea845bb2d43cf3835f1f6b8c9d28360728b55b9ce5b",
        decimals: 9
      }
    ]
  },
  {
    name: "Manta mETH",
    symbol: "Manta mETH",
    icon: "manta-meth.svg",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0x8CdF550C04Bc9B9F10938368349C9c8051A772b6",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0xafd219f513317b1750783c6581f55530d6cf189a5863fd18bd1b3ffcec1714b4",
        decimals: 9
      }
    ]
  },
  {
    name: "Manta mUSD",
    symbol: "Manta mUSD",
    icon: "manta-musd.svg",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0x3f24E1d7a973867fC2A03fE199E5502514E0e11E",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0x89cb9401e55d49c3269654dd1cdfb0e80e57823a4a7db98ba8fc5953b120fef4",
        decimals: 9
      }
    ]
  },
  {
    name: "pumpBTC",
    symbol: "pumpBTC",
    icon: "pumpbtc.webp",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0xf469fbd2abcd6b9de8e169d128226c0fc90a012e",
        decimals: 8
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0x0aa5eb2bb97ca915288b653a2529355d4dc66de2b37533213f0e4aeee3d3421f",
        decimals: 8
      }
    ]
  },
  {
    name: "FBTC",
    symbol: "FBTC",
    icon: "fbtc.svg",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0xc96de26018a54d51c097160568752c4e3bd6c364",
        decimals: 8
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0xb5ecb0a1e08e2abbabf624ffea089df933376855f468ade35c6375b00c33996a",
        decimals: 8
      }
    ]
  },
  {
    name: "SolvBTC",
    symbol: "SolvBTC",
    icon: "solvBTC.webp",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0x7a56e1c57c7475ccf742a1832b028f0456652f97",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0x1186afea9affb88809c210e13e2330b5258c2cef04bb8fff5eff372b7bd3f40f",
        decimals: 9
      }
    ]
  },
  {
    name: "SolvBTC.BBN",
    symbol: "SolvBTC.BBN",
    icon: "SolvBTC.BBN.png",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0xd9d920aa40f578ab794426f5c90f6c731d159def",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0x7a4f087c957d30218223c2baaaa365355c9ca81b6ea49004cfb1590a5399216f",
        decimals: 9
      }
    ]
  },
  {
    name: "Mantle mETH",
    symbol: "Mantle mETH",
    icon: "mantle-meth.svg",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0xd5F7838F5C461fefF7FE49ea5ebaF7728bB0ADfa",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0x642a5db59ec323c2f846d4d4cf3e58d78aff64accf4f8f6455ba0aa3ef000a3b",
        decimals: 9
      }
    ]
  },
  {
    name: "sDAI",
    symbol: "sDAI",
    icon: "sdai.svg",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0x83f20f44975d03b1b09e64809b757c47f942beea",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0x9e46f919fbf978f3cad7cd34cca982d5613af63ff8aab6c379e4faa179552958",
        decimals: 9
      }
    ]
  },
  {
    name: "USDT",
    symbol: "USDT",
    icon: "usdt.svg",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0xdAC17F958D2ee523a2206206994597C13D831ec7",
        decimals: 6
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0xa0265fb5c32f6e8db3197af3c7eb05c48ae373605b8165b6f4a51c5b0ba4812e",
        decimals: 6
      }
    ]
  },
  {
    name: "USDC",
    symbol: "USDC",
    icon: "usdc.svg",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
        decimals: 6
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0x286c479da40dc953bddc3bb4c453b608bba2e0ac483b077bd475174115395e6b",
        decimals: 6
      }
    ]
  },
  {
    name: "USDe",
    symbol: "USDe",
    icon: "USDe.svg",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0x4c9edd5852cd905f086c759e8383e09bff1e68b3",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0xb6133b2ef9f6153eb869125d23dcf20d1e735331b5e41b15a6a7a6cec70e8651",
        decimals: 9
      }
    ]
  },
  {
    name: "sUSDe",
    symbol: "sUSDe",
    icon: "sUSDe.webp",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0x9d39a5de30e57443bff2a8307a4256c8797a3497",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0xd05563025104fc36496c15c7021ad6b31034b0e89a356f4f818045d1f48808bc",
        decimals: 9
      }
    ]
  },
  {
    name: "rsUSDe",
    symbol: "rsUSDe",
    icon: "rsUSDe.svg",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0x82f5104b23FF2FA54C2345F821dAc9369e9E0B26",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0x78d4522ec607f6e8efb66ea49439d1ee48623cf763f9688a8eada025def033d9",
        decimals: 9
      }
    ]
  },
  {
    name: "wstETH",
    symbol: "wstETH",
    icon: "wsteth.svg",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0x1a7815cc9f75db5c24a5b0814bfb706bb9fe485333e98254015de8f48f84c67b",
        decimals: 9
      }
    ]
  },
  {
    name: "ezETH",
    symbol: "ezETH",
    icon: "ezeth.webp",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0xbf5495Efe5DB9ce00f80364C8B423567e58d2110",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0x91b3559edb2619cde8ffb2aa7b3c3be97efd794ea46700db7092abeee62281b0",
        decimals: 9
      }
    ]
  },
  {
    name: "pzETH",
    symbol: "pzETH",
    icon: "pzETH.webp",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0x8c9532a60e0e7c6bbd2b2c1303f63ace1c3e9811",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0x1493d4ec82124de8f9b625682de69dcccda79e882b89a55a8c737b12de67bd68",
        decimals: 9
      }
    ]
  },
  {
    name: "Re7LRT",
    symbol: "Re7LRT",
    icon: "Re7LRT.png",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0x84631c0d0081FDe56DeB72F6DE77abBbF6A9f93a",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0xf2fc648c23a5db24610a1cf696acc4f0f6d9a7d6028dd9944964ab23f6e35995",
        decimals: 9
      }
    ]
  },
  {
    name: "steakLRT",
    symbol: "steakLRT",
    icon: "steakLRT.png",
    networks: [
      {
        type: "ethereum",
        chainId: CHAIN_IDS.eth.mainnet,
        address: "0xBEEF69Ac7870777598A04B2bd4771c71212E6aBc",
        decimals: 18
      },
      {
        type: "fuel",
        chainId: CHAIN_IDS.fuel.mainnet,
        contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
        assetId: "0x4fc8ac9f101df07e2c2dec4a53c8c42c439bdbe5e36ea2d863a61ff60afafc30",
        decimals: 9
      }
    ]
  }
];
var assets = resolveIconPaths(rawAssets, fuelAssetsBaseUrl);
var networks = {
  mainnet: "https://mainnet-explorer.fuel.network",
  testnet: "https://explorer-indexer-testnet.fuel.network"
};
var request = __name11(async (url, slug) => {
  const response = await fetch(`${url}${slug}`, {
    headers: {
      "Content-Type": "application/json",
      "Accept": "application/json"
    }
  });
  try {
    return await response.json();
  } catch (error) {
    return null;
  }
}, "request");
var buildQueryString = __name11((parameters) => {
  const query = new URLSearchParams();
  Object.entries(parameters).forEach(([key, value]) => {
    query.set(key, value.toString());
  });
  return query.size > 0 ? `?${query.toString()}` : "";
}, "buildQueryString");
var getAssetById = __name11((opts) => {
  const { network = "mainnet", assetId } = opts;
  const url = networks[network];
  return request(url, `/assets/${assetId}`);
}, "getAssetById");
var getAssetsByOwner = __name11(async (opts) => {
  const { network = "mainnet", owner, pagination = { last: 10 } } = opts;
  const url = networks[network];
  const { last: last2 } = pagination;
  const queryString = buildQueryString({ last: last2 });
  const response = await request(url, `/accounts/${owner}/assets${queryString}`);
  if (!response) {
    return { data: [], pageInfo: { count: 0 } };
  }
  return response;
}, "getAssetsByOwner");
var coinQuantityfy = __name11((coinQuantityLike) => {
  let assetId;
  let amount;
  let max5;
  if (Array.isArray(coinQuantityLike)) {
    amount = coinQuantityLike[0];
    assetId = coinQuantityLike[1];
    max5 = coinQuantityLike[2] ?? void 0;
  } else {
    amount = coinQuantityLike.amount;
    assetId = coinQuantityLike.assetId;
    max5 = coinQuantityLike.max ?? void 0;
  }
  return {
    assetId: hexlify(assetId),
    amount: bn(amount),
    max: max5 ? bn(max5) : void 0
  };
}, "coinQuantityfy");
var addAmountToCoinQuantities = __name11((params) => {
  const { amount, assetId } = params;
  const coinQuantities = [...params.coinQuantities];
  const assetIdx = coinQuantities.findIndex((coinQuantity) => coinQuantity.assetId === assetId);
  if (assetIdx !== -1) {
    coinQuantities[assetIdx].amount = coinQuantities[assetIdx].amount.add(amount);
  } else {
    coinQuantities.push({ assetId, amount });
  }
  return coinQuantities;
}, "addAmountToCoinQuantities");
var SubmittedStatusFragmentDoc = lib_default`
    fragment SubmittedStatusFragment on SubmittedStatus {
  type: __typename
  time
}
    `;
var ReceiptFragmentDoc = lib_default`
    fragment receiptFragment on Receipt {
  id
  pc
  is
  to
  toAddress
  amount
  assetId
  gas
  param1
  param2
  val
  ptr
  digest
  reason
  ra
  rb
  rc
  rd
  len
  receiptType
  result
  gasUsed
  data
  sender
  recipient
  nonce
  contractId
  subId
}
    `;
var SuccessStatusFragmentDoc = lib_default`
    fragment SuccessStatusFragment on SuccessStatus {
  type: __typename
  time
  programState {
    returnType
    data
  }
  receipts {
    ...receiptFragment
  }
  totalGas
  totalFee
}
    ${ReceiptFragmentDoc}`;
var SuccessStatusWithBlockIdFragmentDoc = lib_default`
    fragment SuccessStatusWithBlockIdFragment on SuccessStatus {
  ...SuccessStatusFragment
  block {
    id
  }
}
    ${SuccessStatusFragmentDoc}`;
var MalleableTransactionFieldsFragmentDoc = lib_default`
    fragment malleableTransactionFieldsFragment on Transaction {
  receiptsRoot
  inputs {
    type: __typename
    ... on InputCoin {
      txPointer
    }
    ... on InputContract {
      txPointer
    }
  }
  outputs {
    type: __typename
    ... on CoinOutput {
      to
      amount
      assetId
    }
    ... on ContractOutput {
      inputIndex
      balanceRoot
      stateRoot
    }
    ... on ChangeOutput {
      to
      amount
      assetId
    }
    ... on VariableOutput {
      to
      amount
      assetId
    }
    ... on ContractCreated {
      contract
      stateRoot
    }
  }
}
    `;
var FailureStatusFragmentDoc = lib_default`
    fragment FailureStatusFragment on FailureStatus {
  type: __typename
  totalGas
  totalFee
  time
  reason
  receipts {
    ...receiptFragment
  }
}
    ${ReceiptFragmentDoc}`;
var FailureStatusWithBlockIdFragmentDoc = lib_default`
    fragment FailureStatusWithBlockIdFragment on FailureStatus {
  ...FailureStatusFragment
  block {
    id
  }
}
    ${FailureStatusFragmentDoc}`;
var SqueezedOutStatusFragmentDoc = lib_default`
    fragment SqueezedOutStatusFragment on SqueezedOutStatus {
  type: __typename
  reason
}
    `;
var TransactionStatusSubscriptionFragmentDoc = lib_default`
    fragment transactionStatusSubscriptionFragment on TransactionStatus {
  ... on SubmittedStatus {
    ...SubmittedStatusFragment
  }
  ... on SuccessStatus {
    ...SuccessStatusWithBlockIdFragment
    transaction {
      ...malleableTransactionFieldsFragment
    }
  }
  ... on FailureStatus {
    ...FailureStatusWithBlockIdFragment
    transaction {
      ...malleableTransactionFieldsFragment
    }
  }
  ... on SqueezedOutStatus {
    ...SqueezedOutStatusFragment
  }
}
    ${SubmittedStatusFragmentDoc}
${SuccessStatusWithBlockIdFragmentDoc}
${MalleableTransactionFieldsFragmentDoc}
${FailureStatusWithBlockIdFragmentDoc}
${SqueezedOutStatusFragmentDoc}`;
var TransactionStatusFragmentDoc = lib_default`
    fragment transactionStatusFragment on TransactionStatus {
  ... on SubmittedStatus {
    ...SubmittedStatusFragment
  }
  ... on SuccessStatus {
    ...SuccessStatusFragment
  }
  ... on FailureStatus {
    ...FailureStatusFragment
  }
  ... on SqueezedOutStatus {
    ...SqueezedOutStatusFragment
  }
}
    ${SubmittedStatusFragmentDoc}
${SuccessStatusFragmentDoc}
${FailureStatusFragmentDoc}
${SqueezedOutStatusFragmentDoc}`;
var TransactionFragmentDoc = lib_default`
    fragment transactionFragment on Transaction {
  id
  rawPayload
  status {
    ...transactionStatusFragment
  }
}
    ${TransactionStatusFragmentDoc}`;
var TransactionRawPayloadFragmentDoc = lib_default`
    fragment transactionRawPayloadFragment on Transaction {
  id
  rawPayload
}
    `;
var InputEstimatePredicatesFragmentDoc = lib_default`
    fragment inputEstimatePredicatesFragment on Input {
  ... on InputCoin {
    predicateGasUsed
  }
  ... on InputMessage {
    predicateGasUsed
  }
}
    `;
var TransactionEstimatePredicatesFragmentDoc = lib_default`
    fragment transactionEstimatePredicatesFragment on Transaction {
  inputs {
    ...inputEstimatePredicatesFragment
  }
}
    ${InputEstimatePredicatesFragmentDoc}`;
var DryRunFailureStatusFragmentDoc = lib_default`
    fragment dryRunFailureStatusFragment on DryRunFailureStatus {
  type: __typename
  totalGas
  totalFee
  reason
  programState {
    returnType
    data
  }
}
    `;
var DryRunSuccessStatusFragmentDoc = lib_default`
    fragment dryRunSuccessStatusFragment on DryRunSuccessStatus {
  type: __typename
  totalGas
  totalFee
  programState {
    returnType
    data
  }
}
    `;
var DryRunTransactionStatusFragmentDoc = lib_default`
    fragment dryRunTransactionStatusFragment on DryRunTransactionStatus {
  ... on DryRunFailureStatus {
    ...dryRunFailureStatusFragment
  }
  ... on DryRunSuccessStatus {
    ...dryRunSuccessStatusFragment
  }
}
    ${DryRunFailureStatusFragmentDoc}
${DryRunSuccessStatusFragmentDoc}`;
var DryRunTransactionExecutionStatusFragmentDoc = lib_default`
    fragment dryRunTransactionExecutionStatusFragment on DryRunTransactionExecutionStatus {
  id
  status {
    ...dryRunTransactionStatusFragment
  }
  receipts {
    ...receiptFragment
  }
}
    ${DryRunTransactionStatusFragmentDoc}
${ReceiptFragmentDoc}`;
var BlockFragmentDoc = lib_default`
    fragment blockFragment on Block {
  id
  height
  header {
    time
    daHeight
    stateTransitionBytecodeVersion
    transactionsCount
    transactionsRoot
    messageOutboxRoot
    eventInboxRoot
    prevRoot
    applicationHash
  }
  transactions {
    id
  }
}
    `;
var CoinFragmentDoc = lib_default`
    fragment coinFragment on Coin {
  type: __typename
  utxoId
  amount
  assetId
  blockCreated
  txCreatedIdx
}
    `;
var MessageCoinFragmentDoc = lib_default`
    fragment messageCoinFragment on MessageCoin {
  type: __typename
  sender
  recipient
  nonce
  amount
  assetId
  daHeight
}
    `;
var MessageFragmentDoc = lib_default`
    fragment messageFragment on Message {
  amount
  sender
  recipient
  data
  daHeight
}
    `;
var GetMessageFragmentDoc = lib_default`
    fragment getMessageFragment on Message {
  ...messageFragment
  nonce
}
    ${MessageFragmentDoc}`;
var MessageProofFragmentDoc = lib_default`
    fragment messageProofFragment on MessageProof {
  messageProof {
    proofSet
    proofIndex
  }
  blockProof {
    proofSet
    proofIndex
  }
  messageBlockHeader {
    version
    id
    daHeight
    consensusParametersVersion
    stateTransitionBytecodeVersion
    transactionsCount
    messageReceiptCount
    transactionsRoot
    messageOutboxRoot
    eventInboxRoot
    height
    prevRoot
    time
    applicationHash
  }
  commitBlockHeader {
    version
    id
    daHeight
    consensusParametersVersion
    stateTransitionBytecodeVersion
    transactionsCount
    messageReceiptCount
    transactionsRoot
    messageOutboxRoot
    eventInboxRoot
    height
    prevRoot
    time
    applicationHash
  }
  sender
  recipient
  amount
  data
}
    `;
var TxParametersFragmentDoc = lib_default`
    fragment TxParametersFragment on TxParameters {
  version
  maxInputs
  maxOutputs
  maxWitnesses
  maxGasPerTx
  maxSize
  maxBytecodeSubsections
}
    `;
var PredicateParametersFragmentDoc = lib_default`
    fragment PredicateParametersFragment on PredicateParameters {
  version
  maxPredicateLength
  maxPredicateDataLength
  maxGasPerPredicate
  maxMessageDataLength
}
    `;
var ScriptParametersFragmentDoc = lib_default`
    fragment ScriptParametersFragment on ScriptParameters {
  version
  maxScriptLength
  maxScriptDataLength
}
    `;
var ContractParametersFragmentDoc = lib_default`
    fragment ContractParametersFragment on ContractParameters {
  version
  contractMaxSize
  maxStorageSlots
}
    `;
var FeeParametersFragmentDoc = lib_default`
    fragment FeeParametersFragment on FeeParameters {
  version
  gasPriceFactor
  gasPerByte
}
    `;
var DependentCostFragmentDoc = lib_default`
    fragment DependentCostFragment on DependentCost {
  ... on LightOperation {
    type: __typename
    base
    unitsPerGas
  }
  ... on HeavyOperation {
    type: __typename
    base
    gasPerUnit
  }
}
    `;
var GasCostsFragmentDoc = lib_default`
    fragment GasCostsFragment on GasCosts {
  contractRoot {
    ...DependentCostFragment
  }
  stateRoot {
    ...DependentCostFragment
  }
  vmInitialization {
    ...DependentCostFragment
  }
  s256 {
    ...DependentCostFragment
  }
  ecr1
  newStoragePerByte
}
    ${DependentCostFragmentDoc}`;
var ConsensusParametersFragmentDoc = lib_default`
    fragment consensusParametersFragment on ConsensusParameters {
  version
  txParams {
    ...TxParametersFragment
  }
  predicateParams {
    ...PredicateParametersFragment
  }
  scriptParams {
    ...ScriptParametersFragment
  }
  contractParams {
    ...ContractParametersFragment
  }
  feeParams {
    ...FeeParametersFragment
  }
  gasCosts {
    ...GasCostsFragment
  }
  baseAssetId
  chainId
}
    ${TxParametersFragmentDoc}
${PredicateParametersFragmentDoc}
${ScriptParametersFragmentDoc}
${ContractParametersFragmentDoc}
${FeeParametersFragmentDoc}
${GasCostsFragmentDoc}`;
var ChainInfoFragmentDoc = lib_default`
    fragment chainInfoFragment on ChainInfo {
  name
  daHeight
  consensusParameters {
    ...consensusParametersFragment
  }
}
    ${ConsensusParametersFragmentDoc}`;
var ContractBalanceFragmentDoc = lib_default`
    fragment contractBalanceFragment on ContractBalance {
  contract
  amount
  assetId
}
    `;
var PageInfoFragmentDoc = lib_default`
    fragment pageInfoFragment on PageInfo {
  hasPreviousPage
  hasNextPage
  startCursor
  endCursor
}
    `;
var NodeInfoFragmentDoc = lib_default`
    fragment nodeInfoFragment on NodeInfo {
  utxoValidation
  vmBacktrace
  maxTx
  maxDepth
  nodeVersion
  indexation {
    balances
    coinsToSpend
    assetMetadata
  }
}
    `;
var RelayedTransactionStatusFragmentDoc = lib_default`
    fragment relayedTransactionStatusFragment on RelayedTransactionStatus {
  ... on RelayedTransactionFailed {
    blockHeight
    failure
  }
}
    `;
var GetVersionDocument = lib_default`
    query getVersion {
  nodeInfo {
    nodeVersion
  }
}
    `;
var GetNodeInfoDocument = lib_default`
    query getNodeInfo {
  nodeInfo {
    ...nodeInfoFragment
  }
}
    ${NodeInfoFragmentDoc}`;
var GetChainDocument = lib_default`
    query getChain {
  chain {
    ...chainInfoFragment
  }
}
    ${ChainInfoFragmentDoc}`;
var GetChainAndNodeInfoDocument = lib_default`
    query getChainAndNodeInfo {
  chain {
    ...chainInfoFragment
  }
  nodeInfo {
    ...nodeInfoFragment
  }
}
    ${ChainInfoFragmentDoc}
${NodeInfoFragmentDoc}`;
var GetTransactionDocument = lib_default`
    query getTransaction($transactionId: TransactionId!) {
  transaction(id: $transactionId) {
    ...transactionFragment
  }
}
    ${TransactionFragmentDoc}`;
var GetTransactionWithReceiptsDocument = lib_default`
    query getTransactionWithReceipts($transactionId: TransactionId!) {
  transaction(id: $transactionId) {
    id
    rawPayload
    status {
      ... on SubmittedStatus {
        ...SubmittedStatusFragment
      }
      ... on SuccessStatus {
        ...SuccessStatusWithBlockIdFragment
      }
      ... on FailureStatus {
        ...FailureStatusWithBlockIdFragment
      }
      ... on SqueezedOutStatus {
        ...SqueezedOutStatusFragment
      }
    }
  }
}
    ${SubmittedStatusFragmentDoc}
${SuccessStatusWithBlockIdFragmentDoc}
${FailureStatusWithBlockIdFragmentDoc}
${SqueezedOutStatusFragmentDoc}`;
var GetTransactionsDocument = lib_default`
    query getTransactions($after: String, $before: String, $first: Int, $last: Int) {
  transactions(after: $after, before: $before, first: $first, last: $last) {
    edges {
      node {
        rawPayload
      }
    }
    pageInfo {
      ...pageInfoFragment
    }
  }
}
    ${PageInfoFragmentDoc}`;
var GetTransactionsByOwnerDocument = lib_default`
    query getTransactionsByOwner($owner: Address!, $after: String, $before: String, $first: Int, $last: Int) {
  transactionsByOwner(
    owner: $owner
    after: $after
    before: $before
    first: $first
    last: $last
  ) {
    pageInfo {
      ...pageInfoFragment
    }
    edges {
      node {
        ...transactionFragment
      }
    }
  }
}
    ${PageInfoFragmentDoc}
${TransactionFragmentDoc}`;
var EstimatePredicatesDocument = lib_default`
    query estimatePredicates($encodedTransaction: HexString!) {
  estimatePredicates(tx: $encodedTransaction) {
    ...transactionEstimatePredicatesFragment
  }
}
    ${TransactionEstimatePredicatesFragmentDoc}`;
var EstimatePredicatesAndGasPriceDocument = lib_default`
    query estimatePredicatesAndGasPrice($encodedTransaction: HexString!, $blockHorizon: U32!) {
  estimatePredicates(tx: $encodedTransaction) {
    ...transactionEstimatePredicatesFragment
  }
  estimateGasPrice(blockHorizon: $blockHorizon) {
    gasPrice
  }
}
    ${TransactionEstimatePredicatesFragmentDoc}`;
var GetLatestBlockDocument = lib_default`
    query getLatestBlock {
  chain {
    latestBlock {
      ...blockFragment
    }
  }
}
    ${BlockFragmentDoc}`;
var GetLatestBlockHeightDocument = lib_default`
    query getLatestBlockHeight {
  chain {
    latestBlock {
      height
    }
  }
}
    `;
var GetBlockDocument = lib_default`
    query getBlock($blockId: BlockId, $height: U32) {
  block(id: $blockId, height: $height) {
    ...blockFragment
  }
}
    ${BlockFragmentDoc}`;
var GetBlockWithTransactionsDocument = lib_default`
    query getBlockWithTransactions($blockId: BlockId, $blockHeight: U32) {
  block(id: $blockId, height: $blockHeight) {
    ...blockFragment
    transactions {
      ...transactionRawPayloadFragment
    }
  }
}
    ${BlockFragmentDoc}
${TransactionRawPayloadFragmentDoc}`;
var GetBlocksDocument = lib_default`
    query getBlocks($after: String, $before: String, $first: Int, $last: Int) {
  blocks(after: $after, before: $before, first: $first, last: $last) {
    pageInfo {
      ...pageInfoFragment
    }
    edges {
      node {
        ...blockFragment
      }
    }
  }
}
    ${PageInfoFragmentDoc}
${BlockFragmentDoc}`;
var GetCoinDocument = lib_default`
    query getCoin($coinId: UtxoId!) {
  coin(utxoId: $coinId) {
    ...coinFragment
    owner
  }
}
    ${CoinFragmentDoc}`;
var GetCoinsDocument = lib_default`
    query getCoins($filter: CoinFilterInput!, $after: String, $before: String, $first: Int, $last: Int) {
  coins(
    filter: $filter
    after: $after
    before: $before
    first: $first
    last: $last
  ) {
    pageInfo {
      ...pageInfoFragment
    }
    edges {
      node {
        ...coinFragment
      }
    }
  }
}
    ${PageInfoFragmentDoc}
${CoinFragmentDoc}`;
var GetCoinsToSpendDocument = lib_default`
    query getCoinsToSpend($owner: Address!, $queryPerAsset: [SpendQueryElementInput!]!, $excludedIds: ExcludeInput) {
  coinsToSpend(
    owner: $owner
    queryPerAsset: $queryPerAsset
    excludedIds: $excludedIds
  ) {
    ...coinFragment
    ...messageCoinFragment
  }
}
    ${CoinFragmentDoc}
${MessageCoinFragmentDoc}`;
var GetContractDocument = lib_default`
    query getContract($contractId: ContractId!) {
  contract(id: $contractId) {
    bytecode
    id
  }
}
    `;
var GetContractBalanceDocument = lib_default`
    query getContractBalance($contract: ContractId!, $asset: AssetId!) {
  contractBalance(contract: $contract, asset: $asset) {
    ...contractBalanceFragment
  }
}
    ${ContractBalanceFragmentDoc}`;
var GetBalanceDocument = lib_default`
    query getBalance($owner: Address!, $assetId: AssetId!) {
  balance(owner: $owner, assetId: $assetId) {
    amount
  }
}
    `;
var GetBalanceV2Document = lib_default`
    query getBalanceV2($owner: Address!, $assetId: AssetId!) {
  balance(owner: $owner, assetId: $assetId) {
    amountU128
  }
}
    `;
var GetLatestGasPriceDocument = lib_default`
    query getLatestGasPrice {
  latestGasPrice {
    gasPrice
  }
}
    `;
var EstimateGasPriceDocument = lib_default`
    query estimateGasPrice($blockHorizon: U32!) {
  estimateGasPrice(blockHorizon: $blockHorizon) {
    gasPrice
  }
}
    `;
var GetBalancesDocument = lib_default`
    query getBalances($filter: BalanceFilterInput!, $after: String, $before: String, $first: Int, $last: Int) {
  balances(
    filter: $filter
    after: $after
    before: $before
    first: $first
    last: $last
  ) {
    edges {
      node {
        assetId
        amount
      }
    }
  }
}
    `;
var GetBalancesV2Document = lib_default`
    query getBalancesV2($filter: BalanceFilterInput!, $after: String, $before: String, $first: Int, $last: Int, $supportsPagination: Boolean!) {
  balances(
    filter: $filter
    after: $after
    before: $before
    first: $first
    last: $last
  ) {
    pageInfo @include(if: $supportsPagination) {
      ...pageInfoFragment
    }
    edges {
      node {
        assetId
        amountU128
      }
    }
  }
}
    ${PageInfoFragmentDoc}`;
var GetMessagesDocument = lib_default`
    query getMessages($owner: Address!, $after: String, $before: String, $first: Int, $last: Int) {
  messages(
    owner: $owner
    after: $after
    before: $before
    first: $first
    last: $last
  ) {
    pageInfo {
      ...pageInfoFragment
    }
    edges {
      node {
        ...getMessageFragment
      }
    }
  }
}
    ${PageInfoFragmentDoc}
${GetMessageFragmentDoc}`;
var DaCompressedBlockDocument = lib_default`
    query daCompressedBlock($height: U32!) {
  daCompressedBlock(height: $height) {
    bytes
  }
}
    `;
var GetMessageProofDocument = lib_default`
    query getMessageProof($transactionId: TransactionId!, $nonce: Nonce!, $commitBlockId: BlockId, $commitBlockHeight: U32) {
  messageProof(
    transactionId: $transactionId
    nonce: $nonce
    commitBlockId: $commitBlockId
    commitBlockHeight: $commitBlockHeight
  ) {
    ...messageProofFragment
  }
}
    ${MessageProofFragmentDoc}`;
var GetMessageStatusDocument = lib_default`
    query getMessageStatus($nonce: Nonce!) {
  messageStatus(nonce: $nonce) {
    state
  }
}
    `;
var GetRelayedTransactionStatusDocument = lib_default`
    query getRelayedTransactionStatus($relayedTransactionId: RelayedTransactionId!) {
  relayedTransactionStatus(id: $relayedTransactionId) {
    ...relayedTransactionStatusFragment
  }
}
    ${RelayedTransactionStatusFragmentDoc}`;
var GetAssetDetailsDocument = lib_default`
    query getAssetDetails($assetId: AssetId!) {
  assetDetails(id: $assetId) {
    subId
    contractId
    totalSupply
  }
}
    `;
var DryRunDocument = lib_default`
    mutation dryRun($encodedTransactions: [HexString!]!, $utxoValidation: Boolean, $gasPrice: U64) {
  dryRun(
    txs: $encodedTransactions
    utxoValidation: $utxoValidation
    gasPrice: $gasPrice
  ) {
    ...dryRunTransactionExecutionStatusFragment
  }
}
    ${DryRunTransactionExecutionStatusFragmentDoc}`;
var SubmitDocument = lib_default`
    mutation submit($encodedTransaction: HexString!) {
  submit(tx: $encodedTransaction) {
    id
  }
}
    `;
var ProduceBlocksDocument = lib_default`
    mutation produceBlocks($startTimestamp: Tai64Timestamp, $blocksToProduce: U32!) {
  produceBlocks(
    blocksToProduce: $blocksToProduce
    startTimestamp: $startTimestamp
  )
}
    `;
var GetMessageByNonceDocument = lib_default`
    query getMessageByNonce($nonce: Nonce!) {
  message(nonce: $nonce) {
    ...messageFragment
  }
}
    ${MessageFragmentDoc}`;
var IsUserAccountDocument = lib_default`
    query isUserAccount($blobId: BlobId!, $contractId: ContractId!, $transactionId: TransactionId!) {
  blob(id: $blobId) {
    id
  }
  contract(id: $contractId) {
    id
  }
  transaction(id: $transactionId) {
    id
  }
}
    `;
var GetConsensusParametersVersionDocument = lib_default`
    query getConsensusParametersVersion {
  chain {
    latestBlock {
      header {
        consensusParametersVersion
      }
    }
  }
}
    `;
var SubmitAndAwaitStatusDocument = lib_default`
    subscription submitAndAwaitStatus($encodedTransaction: HexString!) {
  submitAndAwaitStatus(tx: $encodedTransaction) {
    ...transactionStatusSubscriptionFragment
  }
}
    ${TransactionStatusSubscriptionFragmentDoc}`;
var StatusChangeDocument = lib_default`
    subscription statusChange($transactionId: TransactionId!) {
  statusChange(id: $transactionId) {
    ...transactionStatusSubscriptionFragment
  }
}
    ${TransactionStatusSubscriptionFragmentDoc}`;
function getSdk(requester) {
  return {
    getVersion(variables, options) {
      return requester(GetVersionDocument, variables, options);
    },
    getNodeInfo(variables, options) {
      return requester(GetNodeInfoDocument, variables, options);
    },
    getChain(variables, options) {
      return requester(GetChainDocument, variables, options);
    },
    getChainAndNodeInfo(variables, options) {
      return requester(GetChainAndNodeInfoDocument, variables, options);
    },
    getTransaction(variables, options) {
      return requester(GetTransactionDocument, variables, options);
    },
    getTransactionWithReceipts(variables, options) {
      return requester(GetTransactionWithReceiptsDocument, variables, options);
    },
    getTransactions(variables, options) {
      return requester(GetTransactionsDocument, variables, options);
    },
    getTransactionsByOwner(variables, options) {
      return requester(GetTransactionsByOwnerDocument, variables, options);
    },
    estimatePredicates(variables, options) {
      return requester(EstimatePredicatesDocument, variables, options);
    },
    estimatePredicatesAndGasPrice(variables, options) {
      return requester(EstimatePredicatesAndGasPriceDocument, variables, options);
    },
    getLatestBlock(variables, options) {
      return requester(GetLatestBlockDocument, variables, options);
    },
    getLatestBlockHeight(variables, options) {
      return requester(GetLatestBlockHeightDocument, variables, options);
    },
    getBlock(variables, options) {
      return requester(GetBlockDocument, variables, options);
    },
    getBlockWithTransactions(variables, options) {
      return requester(GetBlockWithTransactionsDocument, variables, options);
    },
    getBlocks(variables, options) {
      return requester(GetBlocksDocument, variables, options);
    },
    getCoin(variables, options) {
      return requester(GetCoinDocument, variables, options);
    },
    getCoins(variables, options) {
      return requester(GetCoinsDocument, variables, options);
    },
    getCoinsToSpend(variables, options) {
      return requester(GetCoinsToSpendDocument, variables, options);
    },
    getContract(variables, options) {
      return requester(GetContractDocument, variables, options);
    },
    getContractBalance(variables, options) {
      return requester(GetContractBalanceDocument, variables, options);
    },
    getBalance(variables, options) {
      return requester(GetBalanceDocument, variables, options);
    },
    getBalanceV2(variables, options) {
      return requester(GetBalanceV2Document, variables, options);
    },
    getLatestGasPrice(variables, options) {
      return requester(GetLatestGasPriceDocument, variables, options);
    },
    estimateGasPrice(variables, options) {
      return requester(EstimateGasPriceDocument, variables, options);
    },
    getBalances(variables, options) {
      return requester(GetBalancesDocument, variables, options);
    },
    getBalancesV2(variables, options) {
      return requester(GetBalancesV2Document, variables, options);
    },
    getMessages(variables, options) {
      return requester(GetMessagesDocument, variables, options);
    },
    daCompressedBlock(variables, options) {
      return requester(DaCompressedBlockDocument, variables, options);
    },
    getMessageProof(variables, options) {
      return requester(GetMessageProofDocument, variables, options);
    },
    getMessageStatus(variables, options) {
      return requester(GetMessageStatusDocument, variables, options);
    },
    getRelayedTransactionStatus(variables, options) {
      return requester(GetRelayedTransactionStatusDocument, variables, options);
    },
    getAssetDetails(variables, options) {
      return requester(GetAssetDetailsDocument, variables, options);
    },
    dryRun(variables, options) {
      return requester(DryRunDocument, variables, options);
    },
    submit(variables, options) {
      return requester(SubmitDocument, variables, options);
    },
    produceBlocks(variables, options) {
      return requester(ProduceBlocksDocument, variables, options);
    },
    getMessageByNonce(variables, options) {
      return requester(GetMessageByNonceDocument, variables, options);
    },
    isUserAccount(variables, options) {
      return requester(IsUserAccountDocument, variables, options);
    },
    getConsensusParametersVersion(variables, options) {
      return requester(GetConsensusParametersVersionDocument, variables, options);
    },
    submitAndAwaitStatus(variables, options) {
      return requester(SubmitAndAwaitStatusDocument, variables, options);
    },
    statusChange(variables, options) {
      return requester(StatusChangeDocument, variables, options);
    }
  };
}
__name11(getSdk, "getSdk");
var mapGqlErrorMessage = __name11((error) => {
  if (new RegExp(
    "the target cannot be met due to no coins available or exceeding the \\d+ coin limit."
    /* NOT_ENOUGH_COINS_MAX_COINS */
  ).test(error.message)) {
    return new FuelError(
      ErrorCode.INSUFFICIENT_FUNDS_OR_MAX_COINS,
      `Insufficient funds or too many small value coins. Consider combining UTXOs.`,
      {},
      error
    );
  }
  if (new RegExp(
    "resource was not found in table"
    /* ASSET_NOT_FOUND */
  ).test(error.message)) {
    return new FuelError(
      ErrorCode.ASSET_NOT_FOUND,
      `Asset not found for given asset id.`,
      {},
      error
    );
  }
  return new FuelError(ErrorCode.INVALID_REQUEST, error.message, {}, error);
}, "mapGqlErrorMessage");
var mapGqlErrorWithIncompatibleNodeVersion = __name11((error, incompatibleNodeVersionMessage) => {
  if (!incompatibleNodeVersionMessage) {
    return error;
  }
  return new FuelError(
    error.code,
    `${error.message}

${incompatibleNodeVersionMessage}`,
    error.metadata,
    error.rawError
  );
}, "mapGqlErrorWithIncompatibleNodeVersion");
var assertGqlResponseHasNoErrors = __name11((errors, incompatibleNodeVersionMessage = false) => {
  if (!Array.isArray(errors)) {
    return;
  }
  const mappedErrors = errors.map(mapGqlErrorMessage);
  if (mappedErrors.length === 1) {
    throw mapGqlErrorWithIncompatibleNodeVersion(mappedErrors[0], incompatibleNodeVersionMessage);
  }
  const errorMessage = mappedErrors.map((err2) => err2.message).join("\n");
  throw mapGqlErrorWithIncompatibleNodeVersion(
    new FuelError(ErrorCode.INVALID_REQUEST, errorMessage, {}, mappedErrors),
    incompatibleNodeVersionMessage
  );
}, "assertGqlResponseHasNoErrors");
var _a56;
var FuelGraphqlSubscriber = (_a56 = class {
  constructor(stream) {
    __publicField(this, "events", []);
    __publicField(this, "parsingLeftover", "");
    this.stream = stream;
  }
  static async create(options) {
    const { url, query, variables, fetchFn } = options;
    const response = await fetchFn(`${url}-sub`, {
      method: "POST",
      body: JSON.stringify({
        query: print(query),
        variables
      }),
      headers: {
        "Content-Type": "application/json",
        Accept: "text/event-stream"
      }
    });
    const [errorReader, resultReader] = response.body.tee().map((stream) => stream.getReader());
    await new _a56(errorReader).next();
    return new _a56(resultReader);
  }
  async next() {
    while (true) {
      if (this.events.length > 0) {
        const { data, errors } = this.events.shift();
        assertGqlResponseHasNoErrors(errors, _a56.incompatibleNodeVersionMessage);
        return { value: data, done: false };
      }
      const { value, done } = await this.stream.read();
      if (done) {
        return { value, done };
      }
      const decoded = _a56.textDecoder.decode(value).replace(":keep-alive-text\n\n", "");
      if (decoded === "") {
        continue;
      }
      const text = `${this.parsingLeftover}${decoded}`;
      const regex = /data:.*\n\n/g;
      const matches = [...text.matchAll(regex)].flatMap((match3) => match3);
      matches.forEach((match3) => {
        try {
          this.events.push(JSON.parse(match3.replace(/^data:/, "")));
        } catch (e) {
          throw new FuelError(
            ErrorCode.STREAM_PARSING_ERROR,
            `Error while parsing stream data response: ${text}`
          );
        }
      });
      this.parsingLeftover = text.replace(matches.join(), "");
    }
  }
  /**
   * Gets called when `break` is called in a `for-await-of` loop.
   */
  return() {
    return Promise.resolve({ done: true, value: void 0 });
  }
  [Symbol.asyncIterator]() {
    return this;
  }
}, __name11(_a56, "FuelGraphqlSubscriber"), __publicField(_a56, "incompatibleNodeVersionMessage", false), __publicField(_a56, "textDecoder", new TextDecoder()), _a56);
var inputify = __name11((value) => {
  const { type: type3 } = value;
  switch (value.type) {
    case InputType.Coin: {
      const predicate = arrayify(value.predicate ?? "0x");
      const predicateData = arrayify(value.predicateData ?? "0x");
      return {
        type: InputType.Coin,
        txID: hexlify(arrayify(value.id).slice(0, BYTES_32)),
        outputIndex: toNumber(arrayify(value.id).slice(BYTES_32, UTXO_ID_LEN)),
        owner: hexlify(value.owner),
        amount: bn(value.amount),
        assetId: hexlify(value.assetId),
        txPointer: {
          blockHeight: toNumber(arrayify(value.txPointer).slice(0, 8)),
          txIndex: toNumber(arrayify(value.txPointer).slice(8, 16))
        },
        witnessIndex: value.witnessIndex,
        predicateGasUsed: bn(value.predicateGasUsed),
        predicateLength: bn(predicate.length),
        predicateDataLength: bn(predicateData.length),
        predicate: hexlify(predicate),
        predicateData: hexlify(predicateData)
      };
    }
    case InputType.Contract: {
      return {
        type: InputType.Contract,
        txID: ZeroBytes32,
        outputIndex: 0,
        balanceRoot: ZeroBytes32,
        stateRoot: ZeroBytes32,
        txPointer: {
          blockHeight: toNumber(arrayify(value.txPointer).slice(0, 8)),
          txIndex: toNumber(arrayify(value.txPointer).slice(8, 16))
        },
        contractID: hexlify(value.contractId)
      };
    }
    case InputType.Message: {
      const predicate = arrayify(value.predicate ?? "0x");
      const predicateData = arrayify(value.predicateData ?? "0x");
      const data = arrayify(value.data ?? "0x");
      return {
        type: InputType.Message,
        sender: hexlify(value.sender),
        recipient: hexlify(value.recipient),
        amount: bn(value.amount),
        nonce: hexlify(value.nonce),
        witnessIndex: value.witnessIndex,
        predicateGasUsed: bn(value.predicateGasUsed),
        predicateLength: bn(predicate.length),
        predicateDataLength: bn(predicateData.length),
        predicate: hexlify(predicate),
        predicateData: hexlify(predicateData),
        data: hexlify(data),
        dataLength: data.length
      };
    }
    default: {
      throw new FuelError(
        ErrorCode.INVALID_TRANSACTION_INPUT,
        `Invalid transaction input type: ${type3}.`
      );
    }
  }
}, "inputify");
var outputify = __name11((value) => {
  const { type: type3 } = value;
  switch (type3) {
    case OutputType.Coin: {
      return {
        type: OutputType.Coin,
        to: hexlify(value.to),
        amount: bn(value.amount),
        assetId: hexlify(value.assetId)
      };
    }
    case OutputType.Contract: {
      return {
        type: OutputType.Contract,
        inputIndex: value.inputIndex,
        balanceRoot: ZeroBytes32,
        stateRoot: ZeroBytes32
      };
    }
    case OutputType.Change: {
      return {
        type: OutputType.Change,
        to: hexlify(value.to),
        amount: bn(0),
        assetId: hexlify(value.assetId)
      };
    }
    case OutputType.Variable: {
      return {
        type: OutputType.Variable,
        to: ZeroBytes32,
        amount: bn(0),
        assetId: ZeroBytes32
      };
    }
    case OutputType.ContractCreated: {
      return {
        type: OutputType.ContractCreated,
        contractId: hexlify(value.contractId),
        stateRoot: hexlify(value.stateRoot)
      };
    }
    default: {
      throw new FuelError(
        ErrorCode.INVALID_TRANSACTION_INPUT,
        `Invalid transaction output type: ${type3}.`
      );
    }
  }
}, "outputify");
var isMessageCoin = __name11((message) => !("data" in message), "isMessageCoin");
var isRawCoin = __name11((resource) => "utxoId" in resource, "isRawCoin");
var isRawMessage = __name11((resource) => "recipient" in resource, "isRawMessage");
var isCoin = __name11((resource) => "id" in resource, "isCoin");
var isMessage = __name11((resource) => "recipient" in resource, "isMessage");
var deserializeChain = __name11((chain3) => {
  const { name, daHeight, consensusParameters } = chain3;
  const {
    contractParams,
    feeParams,
    predicateParams,
    scriptParams,
    txParams,
    gasCosts,
    baseAssetId,
    chainId,
    version: version2
  } = consensusParameters;
  return {
    name,
    baseChainHeight: bn(daHeight),
    consensusParameters: {
      version: version2,
      chainId: bn(chainId),
      baseAssetId,
      feeParameters: {
        version: feeParams.version,
        gasPerByte: bn(feeParams.gasPerByte),
        gasPriceFactor: bn(feeParams.gasPriceFactor)
      },
      contractParameters: {
        version: contractParams.version,
        contractMaxSize: bn(contractParams.contractMaxSize),
        maxStorageSlots: bn(contractParams.maxStorageSlots)
      },
      txParameters: {
        version: txParams.version,
        maxInputs: bn(txParams.maxInputs),
        maxOutputs: bn(txParams.maxOutputs),
        maxWitnesses: bn(txParams.maxWitnesses),
        maxGasPerTx: bn(txParams.maxGasPerTx),
        maxSize: bn(txParams.maxSize),
        maxBytecodeSubsections: bn(txParams.maxBytecodeSubsections)
      },
      predicateParameters: {
        version: predicateParams.version,
        maxPredicateLength: bn(predicateParams.maxPredicateLength),
        maxPredicateDataLength: bn(predicateParams.maxPredicateDataLength),
        maxGasPerPredicate: bn(predicateParams.maxGasPerPredicate),
        maxMessageDataLength: bn(predicateParams.maxMessageDataLength)
      },
      scriptParameters: {
        version: scriptParams.version,
        maxScriptLength: bn(scriptParams.maxScriptLength),
        maxScriptDataLength: bn(scriptParams.maxScriptDataLength)
      },
      gasCosts
    }
  };
}, "deserializeChain");
var serializeChain = __name11((chain3) => {
  const { name, baseChainHeight, consensusParameters } = chain3;
  const {
    contractParameters,
    feeParameters,
    predicateParameters,
    scriptParameters,
    txParameters,
    gasCosts,
    baseAssetId,
    chainId,
    version: version2
  } = consensusParameters;
  return {
    name,
    daHeight: baseChainHeight.toString(),
    consensusParameters: {
      version: version2,
      chainId: chainId.toString(),
      baseAssetId,
      feeParams: {
        version: feeParameters.version,
        gasPerByte: feeParameters.gasPerByte.toString(),
        gasPriceFactor: feeParameters.gasPriceFactor.toString()
      },
      contractParams: {
        version: contractParameters.version,
        contractMaxSize: contractParameters.contractMaxSize.toString(),
        maxStorageSlots: contractParameters.maxStorageSlots.toString()
      },
      txParams: {
        version: txParameters.version,
        maxInputs: txParameters.maxInputs.toString(),
        maxOutputs: txParameters.maxOutputs.toString(),
        maxWitnesses: txParameters.maxWitnesses.toString(),
        maxGasPerTx: txParameters.maxGasPerTx.toString(),
        maxSize: txParameters.maxSize.toString(),
        maxBytecodeSubsections: txParameters.maxBytecodeSubsections.toString()
      },
      predicateParams: {
        version: predicateParameters.version,
        maxPredicateLength: predicateParameters.maxPredicateLength.toString(),
        maxPredicateDataLength: predicateParameters.maxPredicateDataLength.toString(),
        maxGasPerPredicate: predicateParameters.maxGasPerPredicate.toString(),
        maxMessageDataLength: predicateParameters.maxMessageDataLength.toString()
      },
      scriptParams: {
        version: scriptParameters.version,
        maxScriptLength: scriptParameters.maxScriptLength.toString(),
        maxScriptDataLength: scriptParameters.maxScriptDataLength.toString()
      },
      gasCosts
    }
  };
}, "serializeChain");
var deserializeNodeInfo = __name11((nodeInfo) => {
  const { maxDepth, maxTx, nodeVersion, utxoValidation, vmBacktrace, indexation } = nodeInfo;
  return {
    maxDepth: bn(maxDepth),
    maxTx: bn(maxTx),
    nodeVersion,
    utxoValidation,
    vmBacktrace,
    indexation
  };
}, "deserializeNodeInfo");
var serializeNodeInfo = __name11((nodeInfo) => {
  const { maxDepth, maxTx, nodeVersion, utxoValidation, vmBacktrace, indexation } = nodeInfo;
  return {
    maxDepth: maxDepth.toString(),
    maxTx: maxTx.toString(),
    nodeVersion,
    utxoValidation,
    vmBacktrace,
    indexation
  };
}, "serializeNodeInfo");
var deserializeProviderCache = __name11((cache2) => ({
  consensusParametersTimestamp: cache2.consensusParametersTimestamp,
  chain: deserializeChain(cache2.chain),
  nodeInfo: deserializeNodeInfo(cache2.nodeInfo)
}), "deserializeProviderCache");
var serializeProviderCache = __name11(async (provider) => ({
  consensusParametersTimestamp: provider.consensusParametersTimestamp,
  chain: serializeChain(await provider.getChain()),
  nodeInfo: serializeNodeInfo(await provider.getNode())
}), "serializeProviderCache");
var hexOrZero = __name11((hex) => hex || ZeroBytes32, "hexOrZero");
var deserializeReceipt = __name11((receipt) => {
  const { receiptType } = receipt;
  switch (receiptType) {
    case "CALL": {
      const id = hexOrZero(receipt.id || receipt.contractId);
      const callReceipt = {
        type: ReceiptType.Call,
        id,
        to: hexOrZero(receipt == null ? void 0 : receipt.to),
        amount: bn(receipt.amount),
        assetId: hexOrZero(receipt.assetId),
        gas: bn(receipt.gas),
        param1: bn(receipt.param1),
        param2: bn(receipt.param2),
        pc: bn(receipt.pc),
        is: bn(receipt.is)
      };
      return callReceipt;
    }
    case "RETURN": {
      const returnReceipt = {
        type: ReceiptType.Return,
        id: hexOrZero(receipt.id || receipt.contractId),
        val: bn(receipt.val),
        pc: bn(receipt.pc),
        is: bn(receipt.is)
      };
      return returnReceipt;
    }
    case "RETURN_DATA": {
      const returnDataReceipt = {
        type: ReceiptType.ReturnData,
        id: hexOrZero(receipt.id || receipt.contractId),
        ptr: bn(receipt.ptr),
        len: bn(receipt.len),
        digest: hexOrZero(receipt.digest),
        pc: bn(receipt.pc),
        data: hexOrZero(receipt.data),
        is: bn(receipt.is)
      };
      return returnDataReceipt;
    }
    case "PANIC": {
      const panicReceipt = {
        type: ReceiptType.Panic,
        id: hexOrZero(receipt.id),
        reason: bn(receipt.reason),
        pc: bn(receipt.pc),
        is: bn(receipt.is),
        contractId: hexOrZero(receipt.contractId)
      };
      return panicReceipt;
    }
    case "REVERT": {
      const revertReceipt = {
        type: ReceiptType.Revert,
        id: hexOrZero(receipt.id || receipt.contractId),
        val: bn(receipt.ra),
        pc: bn(receipt.pc),
        is: bn(receipt.is)
      };
      return revertReceipt;
    }
    case "LOG": {
      const ra = bn(receipt.ra);
      const rb = bn(receipt.rb);
      const rc = bn(receipt.rc);
      const rd = bn(receipt.rd);
      const logReceipt = {
        type: ReceiptType.Log,
        id: hexOrZero(receipt.id || receipt.contractId),
        ra,
        rb,
        rc,
        rd,
        pc: bn(receipt.pc),
        is: bn(receipt.is)
      };
      return logReceipt;
    }
    case "LOG_DATA": {
      const ra = bn(receipt.ra);
      const rb = bn(receipt.rb);
      const logDataReceipt = {
        type: ReceiptType.LogData,
        id: hexOrZero(receipt.id || receipt.contractId),
        ra,
        rb,
        ptr: bn(receipt.ptr),
        len: bn(receipt.len),
        digest: hexOrZero(receipt.digest),
        pc: bn(receipt.pc),
        data: hexOrZero(receipt.data),
        is: bn(receipt.is)
      };
      return logDataReceipt;
    }
    case "TRANSFER": {
      const id = hexOrZero(receipt.id || receipt.contractId);
      const transferReceipt = {
        type: ReceiptType.Transfer,
        id,
        to: hexOrZero(receipt.toAddress || (receipt == null ? void 0 : receipt.to)),
        amount: bn(receipt.amount),
        assetId: hexOrZero(receipt.assetId),
        pc: bn(receipt.pc),
        is: bn(receipt.is)
      };
      return transferReceipt;
    }
    case "TRANSFER_OUT": {
      const id = hexOrZero(receipt.id || receipt.contractId);
      const transferOutReceipt = {
        type: ReceiptType.TransferOut,
        id,
        to: hexOrZero(receipt.toAddress || receipt.to),
        amount: bn(receipt.amount),
        assetId: hexOrZero(receipt.assetId),
        pc: bn(receipt.pc),
        is: bn(receipt.is)
      };
      return transferOutReceipt;
    }
    case "SCRIPT_RESULT": {
      const scriptResultReceipt = {
        type: ReceiptType.ScriptResult,
        result: bn(receipt.result),
        gasUsed: bn(receipt.gasUsed)
      };
      return scriptResultReceipt;
    }
    case "MESSAGE_OUT": {
      const sender = hexOrZero(receipt.sender);
      const recipient = hexOrZero(receipt.recipient);
      const nonce = hexOrZero(receipt.nonce);
      const amount = bn(receipt.amount);
      const data = receipt.data ? arrayify(receipt.data) : Uint8Array.from([]);
      const digest = hexOrZero(receipt.digest);
      const len = bn(receipt.len).toNumber();
      const messageId = InputMessageCoder.getMessageId({
        sender,
        recipient,
        nonce,
        amount,
        data: hexlify(data)
      });
      const receiptMessageOut = {
        type: ReceiptType.MessageOut,
        sender,
        recipient,
        amount,
        nonce,
        len,
        data,
        digest,
        messageId
      };
      return receiptMessageOut;
    }
    case "MINT": {
      const contractId = hexOrZero(receipt.id || receipt.contractId);
      const subId = hexOrZero(receipt.subId);
      const assetId = getMintedAssetId(contractId, subId);
      const mintReceipt = {
        type: ReceiptType.Mint,
        subId,
        contractId,
        assetId,
        val: bn(receipt.val),
        pc: bn(receipt.pc),
        is: bn(receipt.is)
      };
      return mintReceipt;
    }
    case "BURN": {
      const contractId = hexOrZero(receipt.id || receipt.contractId);
      const subId = hexOrZero(receipt.subId);
      const assetId = getMintedAssetId(contractId, subId);
      const burnReceipt = {
        type: ReceiptType.Burn,
        subId,
        contractId,
        assetId,
        val: bn(receipt.val),
        pc: bn(receipt.pc),
        is: bn(receipt.is)
      };
      return burnReceipt;
    }
    default:
      throw new FuelError(ErrorCode.INVALID_RECEIPT_TYPE, `Invalid receipt type: ${receiptType}.`);
  }
}, "deserializeReceipt");
var doesReceiptHaveMissingOutputVariables = __name11((receipt) => receipt.type === ReceiptType.Revert && receipt.val.toString("hex") === FAILED_TRANSFER_TO_ADDRESS_SIGNAL, "doesReceiptHaveMissingOutputVariables");
var doesReceiptHaveMissingContractId = __name11((receipt) => receipt.type === ReceiptType.Panic && receipt.contractId !== "0x0000000000000000000000000000000000000000000000000000000000000000", "doesReceiptHaveMissingContractId");
var getReceiptsWithMissingData = __name11((receipts) => receipts.reduce(
  (memo, receipt) => {
    if (doesReceiptHaveMissingOutputVariables(receipt)) {
      memo.missingOutputVariables.push(receipt);
    }
    if (doesReceiptHaveMissingContractId(receipt)) {
      memo.missingOutputContractIds.push(receipt);
    }
    return memo;
  },
  {
    missingOutputVariables: [],
    missingOutputContractIds: []
  }
), "getReceiptsWithMissingData");
var assembleReceiptByType = __name11((gqlReceipt) => deserializeReceipt(gqlReceipt), "assembleReceiptByType");
var DEFAULT_BLOCK_EXPLORER_URL = "https://app.fuel.network";
var getPathFromInput = __name11((key, value) => {
  const pathMap = {
    address: `address`,
    txId: `transaction`,
    blockNumber: `block`
  };
  const path2 = pathMap[key] || key;
  return `${path2}/${value}`;
}, "getPathFromInput");
var buildBlockExplorerUrl = __name11((options = {}) => {
  const { blockExplorerUrl, path: path2, providerUrl, address, txId, blockNumber } = options;
  const explorerUrl = blockExplorerUrl || DEFAULT_BLOCK_EXPLORER_URL;
  const customInputParams = [
    {
      key: "address",
      value: address
    },
    {
      key: "txId",
      value: txId
    },
    {
      key: "blockNumber",
      value: blockNumber
    }
  ];
  const definedValues = customInputParams.filter((param) => !!param.value).map(({ key, value }) => ({
    key,
    value
  }));
  const hasAnyDefinedValues = definedValues.length > 0;
  if (definedValues.length > 1) {
    throw new FuelError(
      ErrorCode.ERROR_BUILDING_BLOCK_EXPLORER_URL,
      `Only one of the following can be passed in to buildBlockExplorerUrl: ${customInputParams.map((param) => param.key).join(", ")}.`
    );
  }
  if (path2 && definedValues.length > 0) {
    const inputKeys = customInputParams.map(({ key }) => key).join(", ");
    throw new FuelError(
      ErrorCode.ERROR_BUILDING_BLOCK_EXPLORER_URL,
      `You cannot pass in a path to 'buildBlockExplorerUrl' along with any of the following: ${inputKeys}.`
    );
  }
  const pathGeneratedFromInputParams = hasAnyDefinedValues ? getPathFromInput(
    definedValues[0].key,
    definedValues[0].value
  ) : "";
  const trimSlashes = /^\/|\/$/gm;
  const cleanPath = path2 ? path2.replace(trimSlashes, "") : pathGeneratedFromInputParams;
  const cleanBlockExplorerUrl = explorerUrl.replace(trimSlashes, "");
  const cleanProviderUrl = providerUrl == null ? void 0 : providerUrl.replace(trimSlashes, "");
  const encodedProviderUrl = cleanProviderUrl ? encodeURIComponent(cleanProviderUrl) : void 0;
  const protocol = cleanBlockExplorerUrl.match(/^https?:\/\//) ? "" : "https://";
  const providerUrlProtocol = (cleanProviderUrl == null ? void 0 : cleanProviderUrl.match(/^https?:\/\//)) ? "" : "https://";
  const url = `${protocol}${cleanBlockExplorerUrl}/${cleanPath}${encodedProviderUrl ? `?providerUrl=${providerUrlProtocol}${encodedProviderUrl}` : ""}`;
  return url;
}, "buildBlockExplorerUrl");
var getGasUsedFromReceipts = __name11((receipts) => {
  const scriptResult = receipts.filter(
    (receipt) => receipt.type === ReceiptType.ScriptResult
  );
  const gasUsed = scriptResult.reduce((prev, receipt) => prev.add(receipt.gasUsed), bn(0));
  return gasUsed;
}, "getGasUsedFromReceipts");
function resolveGasDependentCosts(byteSize, gasDependentCost) {
  const base = bn(gasDependentCost.base);
  let dependentValue = bn(0);
  if ("unitsPerGas" in gasDependentCost) {
    dependentValue = bn(byteSize).div(bn(gasDependentCost.unitsPerGas));
  } else {
    dependentValue = bn(byteSize).mul(bn(gasDependentCost.gasPerUnit));
  }
  return base.add(dependentValue);
}
__name11(resolveGasDependentCosts, "resolveGasDependentCosts");
function gasUsedByInputs(inputs, txBytesSize, gasCosts) {
  const witnessCache = [];
  const chargeableInputs = inputs.filter((input) => {
    const isCoinOrMessage = "owner" in input || "sender" in input;
    if (isCoinOrMessage) {
      if ("predicate" in input && input.predicate && input.predicate !== "0x") {
        return true;
      }
      if (!witnessCache.includes(input.witnessIndex)) {
        witnessCache.push(input.witnessIndex);
        return true;
      }
    }
    return false;
  });
  const vmInitializationCost = resolveGasDependentCosts(txBytesSize, gasCosts.vmInitialization);
  const totalGas = chargeableInputs.reduce((total, input) => {
    if ("predicate" in input && input.predicate && input.predicate !== "0x") {
      return total.add(
        vmInitializationCost.add(resolveGasDependentCosts(arrayify(input.predicate).length, gasCosts.contractRoot)).add(bn(input.predicateGasUsed))
      );
    }
    return total.add(gasCosts.ecr1);
  }, bn(0));
  return totalGas;
}
__name11(gasUsedByInputs, "gasUsedByInputs");
function getMinGas(params) {
  const { gasCosts, gasPerByte, inputs, metadataGas, txBytesSize } = params;
  const vmInitGas = resolveGasDependentCosts(txBytesSize, gasCosts.vmInitialization);
  const bytesGas = bn(txBytesSize).mul(gasPerByte);
  const inputsGas = gasUsedByInputs(inputs, txBytesSize, gasCosts);
  const minGas = vmInitGas.add(bytesGas).add(inputsGas).add(metadataGas).maxU64();
  return minGas;
}
__name11(getMinGas, "getMinGas");
function getMaxGas(params) {
  const {
    gasPerByte,
    witnessesLength,
    witnessLimit,
    minGas,
    gasLimit = bn(0),
    maxGasPerTx
  } = params;
  let remainingAllowedWitnessGas = bn(0);
  if ((witnessLimit == null ? void 0 : witnessLimit.gt(0)) && witnessLimit.gte(witnessesLength)) {
    remainingAllowedWitnessGas = bn(witnessLimit).sub(witnessesLength).mul(gasPerByte);
  }
  const maxGas = remainingAllowedWitnessGas.add(minGas).add(gasLimit);
  return maxGas.gte(maxGasPerTx) ? maxGasPerTx : maxGas;
}
__name11(getMaxGas, "getMaxGas");
function calculateMetadataGasForTxCreate({
  gasCosts,
  stateRootSize,
  txBytesSize,
  contractBytesSize
}) {
  const contractRootGas = resolveGasDependentCosts(contractBytesSize, gasCosts.contractRoot);
  const stateRootGas = resolveGasDependentCosts(stateRootSize, gasCosts.stateRoot);
  const txIdGas = resolveGasDependentCosts(txBytesSize, gasCosts.s256);
  const contractIdInputSize = bn(4 + 32 + 32 + 32);
  const contractIdGas = resolveGasDependentCosts(contractIdInputSize, gasCosts.s256);
  const metadataGas = contractRootGas.add(stateRootGas).add(txIdGas).add(contractIdGas);
  return metadataGas.maxU64();
}
__name11(calculateMetadataGasForTxCreate, "calculateMetadataGasForTxCreate");
function calculateMetadataGasForTxScript({
  gasCosts,
  txBytesSize
}) {
  return resolveGasDependentCosts(txBytesSize, gasCosts.s256);
}
__name11(calculateMetadataGasForTxScript, "calculateMetadataGasForTxScript");
function calculateMetadataGasForTxBlob({
  gasCosts,
  txBytesSize,
  witnessBytesSize
}) {
  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);
  const blobLen = resolveGasDependentCosts(witnessBytesSize, gasCosts.s256);
  return txId.add(blobLen);
}
__name11(calculateMetadataGasForTxBlob, "calculateMetadataGasForTxBlob");
function calculateMetadataGasForTxUpgrade({
  gasCosts,
  txBytesSize,
  consensusSize
}) {
  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);
  if (consensusSize) {
    const consensusLen = resolveGasDependentCosts(consensusSize, gasCosts.s256);
    txId.add(consensusLen);
  }
  return txId;
}
__name11(calculateMetadataGasForTxUpgrade, "calculateMetadataGasForTxUpgrade");
function calculateMetadataGasForTxUpload({
  gasCosts,
  txBytesSize,
  subsectionSize,
  subsectionsSize
}) {
  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);
  const subsectionLen = resolveGasDependentCosts(subsectionSize, gasCosts.s256);
  txId.add(subsectionLen);
  const subsectionsLen = resolveGasDependentCosts(subsectionsSize, gasCosts.stateRoot);
  txId.add(subsectionsLen);
  return txId;
}
__name11(calculateMetadataGasForTxUpload, "calculateMetadataGasForTxUpload");
function calculateMinGasForTxUpload({
  gasCosts,
  baseMinGas,
  subsectionSize
}) {
  const additionalStoragePerByte = bn(gasCosts.newStoragePerByte).mul(subsectionSize);
  return bn(baseMinGas).add(additionalStoragePerByte);
}
__name11(calculateMinGasForTxUpload, "calculateMinGasForTxUpload");
var calculateGasFee = __name11((params) => {
  const { gas, gasPrice, priceFactor, tip } = params;
  return gas.mul(gasPrice).div(priceFactor).add(bn(tip));
}, "calculateGasFee");
function normalize2(object) {
  Object.keys(object).forEach((key) => {
    var _a103;
    switch ((_a103 = object[key]) == null ? void 0 : _a103.constructor.name) {
      case "Uint8Array":
        object[key] = hexlify(object[key]);
        break;
      case "Array":
        object[key] = normalize2(object[key]);
        break;
      case "BN":
        object[key] = object[key].toHex();
        break;
      case "Address":
        object[key] = object[key].toB256();
        break;
      case "Object":
        object[key] = normalize2(object[key]);
        break;
      default:
        break;
    }
  });
  return object;
}
__name11(normalize2, "normalize");
function normalizeJSON(root) {
  return normalize2(clone_default(root));
}
__name11(normalizeJSON, "normalizeJSON");
var assemblePanicError = __name11((statusReason, metadata) => {
  let errorMessage = `The transaction reverted with reason: "${statusReason}".`;
  if (PANIC_REASONS.includes(statusReason)) {
    errorMessage = `${errorMessage}

You can read more about this error at:

${PANIC_DOC_URL}#variant.${statusReason}`;
  }
  return new FuelError(ErrorCode.SCRIPT_REVERTED, errorMessage, {
    ...metadata,
    reason: statusReason
  });
}, "assemblePanicError");
var stringify = __name11((obj) => JSON.stringify(obj, null, 2), "stringify");
var assembleRevertError = __name11((receipts, logs, metadata) => {
  let errorMessage = "The transaction reverted with an unknown reason.";
  const revertReceipt = receipts.find(({ type: type3 }) => type3 === ReceiptType.Revert);
  let reason = "";
  if (revertReceipt) {
    const reasonHex = bn(revertReceipt.val).toHex();
    const lastLog = logs[logs.length - 1];
    const lastButOneLog = logs[logs.length - 2];
    switch (reasonHex) {
      case FAILED_REQUIRE_SIGNAL: {
        reason = "require";
        errorMessage = `The transaction reverted because a "require" statement has thrown ${logs.length ? stringify(lastLog) : "an error."}.`;
        break;
      }
      case FAILED_ASSERT_EQ_SIGNAL: {
        const suffix = logs.length >= 2 ? ` comparing ${stringify(lastLog)} and ${stringify(lastButOneLog)}.` : ".";
        reason = "assert_eq";
        errorMessage = `The transaction reverted because of an "assert_eq" statement${suffix}`;
        break;
      }
      case FAILED_ASSERT_NE_SIGNAL: {
        const suffix = logs.length >= 2 ? ` comparing ${stringify(lastButOneLog)} and ${stringify(lastLog)}.` : ".";
        reason = "assert_ne";
        errorMessage = `The transaction reverted because of an "assert_ne" statement${suffix}`;
        break;
      }
      case FAILED_ASSERT_SIGNAL:
        reason = "assert";
        errorMessage = `The transaction reverted because an "assert" statement failed to evaluate to true.`;
        break;
      case FAILED_TRANSFER_TO_ADDRESS_SIGNAL:
        reason = "MissingOutputVariable";
        errorMessage = `The transaction reverted because it's missing an "OutputVariable".`;
        break;
      default:
        throw new FuelError(
          ErrorCode.UNKNOWN,
          `The transaction reverted with an unknown reason: ${revertReceipt.val}`,
          {
            ...metadata,
            reason: "unknown"
          }
        );
    }
  }
  return new FuelError(ErrorCode.SCRIPT_REVERTED, errorMessage, {
    ...metadata,
    reason
  });
}, "assembleRevertError");
var extractTxError = __name11((params) => {
  const { receipts, statusReason, logs, groupedLogs } = params;
  const isPanic = receipts.some(({ type: type3 }) => type3 === ReceiptType.Panic);
  const isRevert = receipts.some(({ type: type3 }) => type3 === ReceiptType.Revert);
  const metadata = {
    logs,
    groupedLogs,
    receipts,
    panic: isPanic,
    revert: isRevert,
    reason: ""
  };
  if (isPanic) {
    return assemblePanicError(statusReason, metadata);
  }
  return assembleRevertError(receipts, logs, metadata);
}, "extractTxError");
var _a57;
var ChangeOutputCollisionError = (_a57 = class extends Error {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "ChangeOutputCollisionError");
    __publicField(this, "message", 'A ChangeOutput with the same "assetId" already exists for a different "to" address');
  }
}, __name11(_a57, "ChangeOutputCollisionError"), _a57);
var _a58;
var NoWitnessAtIndexError = (_a58 = class extends Error {
  constructor(index) {
    super();
    __publicField(this, "name", "NoWitnessAtIndexError");
    this.index = index;
    this.message = `Witness at index "${index}" was not found`;
  }
}, __name11(_a58, "NoWitnessAtIndexError"), _a58);
var _a59;
var NoWitnessByOwnerError = (_a59 = class extends Error {
  constructor(owner) {
    super();
    __publicField(this, "name", "NoWitnessByOwnerError");
    this.owner = owner;
    this.message = `A witness for the given owner "${owner}" was not found`;
  }
}, __name11(_a59, "NoWitnessByOwnerError"), _a59);
var isRequestInputCoin = __name11((input) => input.type === InputType.Coin, "isRequestInputCoin");
var isRequestInputMessage = __name11((input) => input.type === InputType.Message, "isRequestInputMessage");
var isRequestInputMessageWithoutData = __name11((input) => input.type === InputType.Message && bn(input.data).isZero(), "isRequestInputMessageWithoutData");
var isRequestInputCoinOrMessage = __name11((input) => isRequestInputCoin(input) || isRequestInputMessage(input), "isRequestInputCoinOrMessage");
var isRequestInputResource = __name11((input) => isRequestInputCoin(input) || isRequestInputMessageWithoutData(input), "isRequestInputResource");
var getRequestInputResourceOwner = __name11((input) => isRequestInputCoin(input) ? input.owner : input.recipient, "getRequestInputResourceOwner");
var isRequestInputResourceFromOwner = __name11((input, owner) => getRequestInputResourceOwner(input) === owner.toB256(), "isRequestInputResourceFromOwner");
var isPredicate = __name11((input) => isRequestInputCoinOrMessage(input) && !!input.predicate && hexlify(input.predicate) !== "0x", "isPredicate");
var getAssetAmountInRequestInputs = __name11((inputs, assetId, baseAsset) => inputs.filter(isRequestInputResource).reduce((acc, input) => {
  if (isRequestInputCoin(input) && input.assetId === assetId) {
    return acc.add(input.amount);
  }
  if (isRequestInputMessage(input) && assetId === baseAsset) {
    return acc.add(input.amount);
  }
  return acc;
}, bn(0)), "getAssetAmountInRequestInputs");
var cacheRequestInputsResources = __name11((inputs) => inputs.filter(isRequestInputResource).reduce(
  (cache2, input) => {
    if (isRequestInputCoin(input)) {
      cache2.utxos.push(input.id);
    } else {
      cache2.messages.push(input.nonce);
    }
    return cache2;
  },
  {
    utxos: [],
    messages: []
  }
), "cacheRequestInputsResources");
var cacheRequestInputsResourcesFromOwner = __name11((inputs, owner) => inputs.reduce(
  (acc, input) => {
    if (isRequestInputCoin(input) && input.owner === owner.toB256()) {
      acc.utxos.push(input.id);
    } else if (isRequestInputMessage(input) && input.recipient === owner.toB256()) {
      acc.messages.push(input.nonce);
    }
    return acc;
  },
  {
    utxos: [],
    messages: []
  }
), "cacheRequestInputsResourcesFromOwner");
var getBurnableAssetCount = __name11((baseAssetId, transactionRequest) => {
  const { inputs, outputs } = transactionRequest;
  const coinInputs = new Set(inputs.filter(isRequestInputCoin).map((input) => input.assetId));
  if (inputs.some((i) => isRequestInputMessage(i) && bn(i.amount).gt(0))) {
    coinInputs.add(baseAssetId);
  }
  const changeOutputs = new Set(
    outputs.filter((output) => output.type === OutputType.Change).map((output) => output.assetId)
  );
  const difference3 = new Set([...coinInputs].filter((x) => !changeOutputs.has(x)));
  return difference3.size;
}, "getBurnableAssetCount");
var validateTransactionForAssetBurn = __name11((baseAssetId, transactionRequest, enableAssetBurn = false) => {
  if (enableAssetBurn === true) {
    return;
  }
  if (getBurnableAssetCount(baseAssetId, transactionRequest) <= 0) {
    return;
  }
  const message = [
    "Asset burn detected.",
    "Add the relevant change outputs to the transaction to avoid burning assets.",
    "Or enable asset burn, upon sending the transaction."
  ].join("\n");
  throw new FuelError(ErrorCode.ASSET_BURN_DETECTED, message);
}, "validateTransactionForAssetBurn");
var witnessify = __name11((value) => {
  const data = arrayify(value);
  return {
    data: hexlify(data),
    dataLength: data.length
  };
}, "witnessify");
var _a60;
var BaseTransactionRequest = (_a60 = class {
  /**
   * Constructor for initializing a base transaction request.
   *
   * @param baseTransactionRequest - Optional object containing properties to initialize the transaction request.
   */
  constructor({
    tip,
    maturity,
    expiration,
    maxFee,
    witnessLimit,
    inputs,
    outputs,
    witnesses
  } = {}) {
    /** Gas price for transaction */
    __publicField(this, "tip");
    /** Block until which tx cannot be included */
    __publicField(this, "maturity");
    /** The block number after which the transaction is no longer valid. */
    __publicField(this, "expiration");
    /** The maximum fee payable by this transaction using BASE_ASSET. */
    __publicField(this, "maxFee");
    /** The maximum amount of witness data allowed for the transaction */
    __publicField(this, "witnessLimit");
    /** List of inputs */
    __publicField(this, "inputs", []);
    /** List of outputs */
    __publicField(this, "outputs", []);
    /** List of witnesses */
    __publicField(this, "witnesses", []);
    /**
     * @hidden
     *
     * The current status of the transaction
     */
    __publicField(this, "flag", { state: void 0, transactionId: void 0, summary: void 0 });
    this.tip = tip ? bn(tip) : void 0;
    this.maturity = maturity && maturity > 0 ? maturity : void 0;
    this.expiration = expiration && expiration > 0 ? expiration : void 0;
    this.witnessLimit = isDefined(witnessLimit) ? bn(witnessLimit) : void 0;
    this.maxFee = bn(maxFee);
    this.inputs = inputs ?? [];
    this.outputs = outputs ?? [];
    this.witnesses = witnesses ?? [];
  }
  static getPolicyMeta(req) {
    let policyTypes = 0;
    const policies = [];
    const { tip, witnessLimit, maturity, expiration } = req;
    if (bn(tip).gt(0)) {
      policyTypes += PolicyType.Tip;
      policies.push({ data: bn(tip), type: PolicyType.Tip });
    }
    if (isDefined(witnessLimit) && bn(witnessLimit).gte(0)) {
      policyTypes += PolicyType.WitnessLimit;
      policies.push({ data: bn(witnessLimit), type: PolicyType.WitnessLimit });
    }
    if (maturity && maturity > 0) {
      policyTypes += PolicyType.Maturity;
      policies.push({ data: maturity, type: PolicyType.Maturity });
    }
    policyTypes += PolicyType.MaxFee;
    policies.push({ data: req.maxFee, type: PolicyType.MaxFee });
    if (expiration && expiration > 0) {
      policyTypes += PolicyType.Expiration;
      policies.push({ data: expiration, type: PolicyType.Expiration });
    }
    return {
      policyTypes,
      policies
    };
  }
  /**
   * Method to obtain the base transaction details.
   *
   * @returns The base transaction details.
   */
  getBaseTransaction() {
    var _a103, _b2, _c;
    const inputs = ((_a103 = this.inputs) == null ? void 0 : _a103.map(inputify)) ?? [];
    const outputs = ((_b2 = this.outputs) == null ? void 0 : _b2.map(outputify)) ?? [];
    const witnesses = ((_c = this.witnesses) == null ? void 0 : _c.map(witnessify)) ?? [];
    const { policyTypes, policies } = _a60.getPolicyMeta(this);
    return {
      policyTypes,
      inputs,
      outputs,
      policies,
      witnesses,
      inputsCount: inputs.length,
      outputsCount: outputs.length,
      witnessesCount: witnesses.length
    };
  }
  /**
   * Converts the transaction request to a byte array.
   *
   * @returns The transaction bytes.
   */
  toTransactionBytes() {
    return new TransactionCoder().encode(this.toTransaction());
  }
  /**
   * @hidden
   *
   * Pushes an input to the list without any side effects and returns the index
   */
  pushInput(input) {
    this.inputs.push(input);
    return this.inputs.length - 1;
  }
  /**
   * @hidden
   *
   * Pushes an output to the list without any side effects and returns the index
   */
  pushOutput(output) {
    this.outputs.push(output);
    return this.outputs.length - 1;
  }
  /**
   * @hidden
   *
   * Pushes a witness to the list and returns the index
   *
   * @param signature - The signature to add to the witness.
   * @returns The index of the created witness.
   */
  addWitness(signature) {
    this.witnesses.push(signature);
    return this.witnesses.length - 1;
  }
  /**
   * @hidden
   *
   * Creates an empty witness without any side effects and returns the index
   *
   * @returns The index of the created witness.
   */
  addEmptyWitness() {
    return this.addWitness(concat([ZeroBytes32, ZeroBytes32]));
  }
  /**
   * Updates the witness for a given owner and signature.
   *
   * @param address - The address to get the coin input witness index for.
   * @param signature - The signature to update the witness with.
   */
  updateWitnessByOwner(address, signature) {
    const ownerAddress = new Address(address);
    const witnessIndex = this.getCoinInputWitnessIndexByOwner(ownerAddress);
    if (typeof witnessIndex === "number") {
      this.updateWitness(witnessIndex, signature);
    }
  }
  /**
   * Updates an existing witness without any side effects.
   *
   * @param index - The index of the witness to update.
   * @param witness - The new witness.
   * @throws If the witness does not exist.
   */
  updateWitness(index, witness) {
    if (!this.witnesses[index]) {
      throw new NoWitnessAtIndexError(index);
    }
    this.witnesses[index] = witness;
  }
  /**
   * Helper function to add an external signature to the transaction.
   *
   * @param account - The account/s to sign to the transaction.
   * @returns The transaction with the signature witness added.
   */
  async addAccountWitnesses(account) {
    const accounts = Array.isArray(account) ? account : [account];
    await Promise.all(
      accounts.map(async (acc) => {
        this.addWitness(await acc.signTransaction(this));
      })
    );
    return this;
  }
  /**
   * Gets the coin inputs for a transaction.
   *
   * @returns The coin inputs.
   */
  getCoinInputs() {
    return this.inputs.filter(
      (input) => input.type === InputType.Coin
    );
  }
  /**
   * Gets the coin outputs for a transaction.
   *
   * @returns The coin outputs.
   */
  getCoinOutputs() {
    return this.outputs.filter(
      (output) => output.type === OutputType.Coin
    );
  }
  /**
   * Gets the change outputs for a transaction.
   *
   * @returns The change outputs.
   */
  getChangeOutputs() {
    return this.outputs.filter(
      (output) => output.type === OutputType.Change
    );
  }
  /**
   * @hidden
   *
   * Returns the witnessIndex of the found CoinInput.
   */
  getCoinInputWitnessIndexByOwner(owner) {
    const ownerAddress = addressify(owner);
    const found = this.inputs.find((input) => {
      switch (input.type) {
        case InputType.Coin:
          return hexlify(input.owner) === ownerAddress.toB256();
        case InputType.Message:
          return hexlify(input.recipient) === ownerAddress.toB256();
        default:
          return false;
      }
    });
    return found == null ? void 0 : found.witnessIndex;
  }
  /**
   * Adds a single coin input to the transaction and a change output for the related
   * assetId, if one it was not added yet.
   *
   * @param coin - Coin resource.
   */
  addCoinInput(coin) {
    const { assetId, owner, amount, id, predicate, predicateData } = coin;
    let witnessIndex;
    if (coin.predicate) {
      witnessIndex = 0;
    } else {
      witnessIndex = this.getCoinInputWitnessIndexByOwner(owner);
      if (typeof witnessIndex !== "number") {
        witnessIndex = this.addEmptyWitness();
      }
    }
    const input = {
      id,
      type: InputType.Coin,
      owner: owner.toB256(),
      amount,
      assetId,
      txPointer: "0x00000000000000000000000000000000",
      witnessIndex,
      predicate,
      predicateData
    };
    this.pushInput(input);
    this.addChangeOutput(owner, assetId);
  }
  /**
   * Adds a single message input to the transaction and a change output for the
   * asset against the message
   *
   * @param message - Message resource.
   */
  addMessageInput(message) {
    const { recipient, sender, amount, predicate, nonce, predicateData } = message;
    let witnessIndex;
    if (message.predicate) {
      witnessIndex = 0;
    } else {
      witnessIndex = this.getCoinInputWitnessIndexByOwner(recipient);
      if (typeof witnessIndex !== "number") {
        witnessIndex = this.addEmptyWitness();
      }
    }
    const input = {
      nonce,
      type: InputType.Message,
      sender: sender.toB256(),
      recipient: recipient.toB256(),
      data: isMessageCoin(message) ? "0x" : message.data,
      amount,
      witnessIndex,
      predicate,
      predicateData
    };
    this.pushInput(input);
    if (isMessageCoin(message)) {
      this.addChangeOutput(recipient, message.assetId);
    }
  }
  /**
   * Adds a single resource to the transaction by adding a coin/message input and a
   * change output for the related assetId, if one it was not added yet.
   *
   * @param resource - The resource to add.
   * @returns This transaction.
   */
  addResource(resource) {
    if (isCoin(resource)) {
      this.addCoinInput(resource);
    } else {
      this.addMessageInput(resource);
    }
    return this;
  }
  /**
   * Adds multiple resources to the transaction by adding coin/message inputs and change
   * outputs from the related assetIds.
   *
   * @param resources - The resources to add.
   * @returns This transaction.
   */
  addResources(resources) {
    resources.forEach((resource) => this.addResource(resource));
    return this;
  }
  /**
   * Adds a coin output to the transaction.
   *
   * @param to - Address of the owner.
   * @param amount - Amount of coin.
   * @param assetId - Asset ID of coin.
   */
  addCoinOutput(to, amount, assetId) {
    this.pushOutput({
      type: OutputType.Coin,
      to: addressify(to).toB256(),
      amount,
      assetId
    });
    return this;
  }
  /**
   * Adds multiple coin outputs to the transaction.
   *
   * @param to - Address of the destination.
   * @param quantities - Quantities of coins.
   */
  addCoinOutputs(to, quantities) {
    quantities.map(coinQuantityfy).forEach((quantity) => {
      this.pushOutput({
        type: OutputType.Coin,
        to: addressify(to).toB256(),
        amount: quantity.amount,
        assetId: quantity.assetId
      });
    });
    return this;
  }
  /**
   * Adds a change output to the transaction.
   *
   * @param to - Address of the owner.
   * @param assetId - Asset ID of coin.
   */
  addChangeOutput(to, assetId) {
    const changeOutput = this.getChangeOutputs().find(
      (output) => hexlify(output.assetId) === assetId
    );
    if (!changeOutput) {
      this.pushOutput({
        type: OutputType.Change,
        to: addressify(to).toB256(),
        assetId
      });
    }
  }
  /**
   * @hidden
   */
  byteSize() {
    return this.toTransactionBytes().length;
  }
  /**
   * @hidden
   */
  metadataGas(_gasCosts) {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Not implemented");
  }
  /**
   * @hidden
   */
  calculateMinGas(chainInfo) {
    const { consensusParameters } = chainInfo;
    const {
      gasCosts,
      feeParameters: { gasPerByte }
    } = consensusParameters;
    return getMinGas({
      gasPerByte,
      gasCosts,
      inputs: this.inputs,
      txBytesSize: this.byteSize(),
      metadataGas: this.metadataGas(gasCosts)
    });
  }
  calculateMaxGas(chainInfo, minGas) {
    const { consensusParameters } = chainInfo;
    const {
      feeParameters: { gasPerByte },
      txParameters: { maxGasPerTx }
    } = consensusParameters;
    const witnessesLength = this.toTransaction().witnesses.reduce(
      (acc, wit) => acc + wit.dataLength,
      0
    );
    return getMaxGas({
      gasPerByte,
      minGas,
      witnessesLength,
      witnessLimit: this.witnessLimit,
      maxGasPerTx
    });
  }
  /**
   * Funds the transaction with fake UTXOs for each assetId and amount in the
   * quantities array.
   *
   * @param quantities - CoinQuantity Array.
   * @param baseAssetId - The base asset to fund the transaction.
   * @deprecated - This method is deprecated and will be removed in future versions.
   * Please use `Account.generateFakeResources` along with `this.addResources` instead.
   */
  fundWithFakeUtxos(quantities, baseAssetId, resourcesOwner) {
    const findAssetInput = __name11((assetId) => this.inputs.find((input) => {
      if ("assetId" in input) {
        return input.assetId === assetId;
      }
      return false;
    }), "findAssetInput");
    const updateAssetInput = __name11((assetId, quantity) => {
      const assetInput = findAssetInput(assetId);
      let usedQuantity = quantity;
      if (assetId === baseAssetId) {
        usedQuantity = bn("1000000000000000000");
      }
      if (assetInput && "assetId" in assetInput) {
        assetInput.id = hexlify(randomBytes2(UTXO_ID_LEN));
        assetInput.amount = usedQuantity;
      } else {
        this.addResources([
          {
            id: hexlify(randomBytes2(UTXO_ID_LEN)),
            amount: usedQuantity,
            assetId,
            owner: resourcesOwner || Address.fromRandom(),
            blockCreated: bn(1),
            txCreatedIdx: bn(1)
          }
        ]);
      }
    }, "updateAssetInput");
    updateAssetInput(baseAssetId, bn(1e11));
    quantities.forEach((q) => updateAssetInput(q.assetId, q.amount));
    return this;
  }
  /**
   * Retrieves an array of CoinQuantity for each coin output present in the transaction.
   * a transaction.
   *
   * @returns  CoinQuantity array.
   */
  getCoinOutputsQuantities() {
    const coinsQuantities = this.getCoinOutputs().map(({ amount, assetId }) => ({
      amount: bn(amount),
      assetId: assetId.toString()
    }));
    return coinsQuantities;
  }
  /**
   * Return the minimum amount in native coins required to create
   * a transaction.
   *
   * @returns The transaction as a JSON object.
   */
  toJSON() {
    return normalizeJSON(this);
  }
  removeWitness(index) {
    this.witnesses.splice(index, 1);
    this.adjustWitnessIndexes(index);
  }
  adjustWitnessIndexes(removedIndex) {
    this.inputs.filter(isRequestInputResource).forEach((input) => {
      if (input.witnessIndex > removedIndex) {
        input.witnessIndex -= 1;
      }
    });
  }
  updatePredicateGasUsed(inputs) {
    const inputsToExtractGasUsed = inputs.filter(isRequestInputCoinOrMessage);
    this.inputs.filter(isRequestInputResource).forEach((i) => {
      const owner = getRequestInputResourceOwner(i);
      const correspondingInput = inputsToExtractGasUsed.find(
        (x) => isRequestInputResourceFromOwner(x, new Address(String(owner)))
      );
      if (correspondingInput && "predicateGasUsed" in correspondingInput && bn(correspondingInput.predicateGasUsed).gt(0)) {
        i.predicateGasUsed = correspondingInput.predicateGasUsed;
      }
    });
  }
  byteLength() {
    return this.toTransactionBytes().byteLength;
  }
  /**
   * @hidden
   *
   * Used internally to update the state of a transaction request.
   *
   * @param state - The state to update.
   */
  updateState(chainId, state, summary) {
    if (!state) {
      this.flag = { state: void 0, transactionId: void 0, summary: void 0 };
      return;
    }
    const transactionId = this.getTransactionId(chainId);
    this.flag = { state, transactionId, summary };
  }
}, __name11(_a60, "BaseTransactionRequest"), _a60);
function hashTransaction(transactionRequest, chainId) {
  const transaction = transactionRequest.toTransaction();
  if (transaction.type === TransactionType.Script) {
    transaction.receiptsRoot = ZeroBytes32;
  }
  transaction.inputs = transaction.inputs.map((input) => {
    const inputClone = clone_default(input);
    switch (inputClone.type) {
      case InputType.Coin: {
        inputClone.txPointer = {
          blockHeight: 0,
          txIndex: 0
        };
        inputClone.predicateGasUsed = bn(0);
        return inputClone;
      }
      case InputType.Message: {
        inputClone.predicateGasUsed = bn(0);
        return inputClone;
      }
      case InputType.Contract: {
        inputClone.txPointer = {
          blockHeight: 0,
          txIndex: 0
        };
        inputClone.txID = ZeroBytes32;
        inputClone.outputIndex = 0;
        inputClone.balanceRoot = ZeroBytes32;
        inputClone.stateRoot = ZeroBytes32;
        return inputClone;
      }
      default:
        return inputClone;
    }
  });
  transaction.outputs = transaction.outputs.map((output) => {
    const outputClone = clone_default(output);
    switch (outputClone.type) {
      case OutputType.Contract: {
        outputClone.balanceRoot = ZeroBytes32;
        outputClone.stateRoot = ZeroBytes32;
        return outputClone;
      }
      case OutputType.Change: {
        outputClone.amount = bn(0);
        return outputClone;
      }
      case OutputType.Variable: {
        outputClone.to = ZeroBytes32;
        outputClone.amount = bn(0);
        outputClone.assetId = ZeroBytes32;
        return outputClone;
      }
      default:
        return outputClone;
    }
  });
  transaction.witnessesCount = 0;
  transaction.witnesses = [];
  const chainIdBytes = uint64ToBytesBE(chainId);
  const concatenatedData = concat([chainIdBytes, new TransactionCoder().encode(transaction)]);
  return sha2563(concatenatedData);
}
__name11(hashTransaction, "hashTransaction");
var _a61;
var BlobTransactionRequest = (_a61 = class extends BaseTransactionRequest {
  /**
   * Creates an instance `BlobTransactionRequest`.
   *
   * @param blobTransactionRequestLike - The initial values for the instance
   */
  constructor({ witnessIndex, blobId, ...rest }) {
    super(rest);
    /** Type of the transaction */
    __publicField(this, "type", TransactionType.Blob);
    /** Blob ID */
    __publicField(this, "blobId");
    /** Witness index of the bytecode to create */
    __publicField(this, "witnessIndex");
    this.blobId = blobId;
    this.witnessIndex = witnessIndex ?? 0;
  }
  static from(obj) {
    return new this(clone_default(obj));
  }
  /**
   * Converts the transaction request to a `TransactionBlob`.
   *
   * @returns The transaction create object.
   */
  toTransaction() {
    const baseTransaction = this.getBaseTransaction();
    const { witnessIndex, blobId } = this;
    return {
      type: TransactionType.Blob,
      ...baseTransaction,
      blobId,
      witnessIndex
    };
  }
  /**
   * Gets the Transaction Request by hashing the transaction.
   *
   * @param chainId - The chain ID.
   *
   * @returns - A hash of the transaction, which is the transaction ID.
   */
  getTransactionId(chainId) {
    return hashTransaction(this, chainId);
  }
  /**
   * Calculates the metadata gas cost for a blob transaction.
   *
   * @param gasCosts - gas costs passed from the chain.
   * @returns metadata gas cost for the blob transaction.
   */
  metadataGas(gasCosts) {
    return calculateMetadataGasForTxBlob({
      gasCosts,
      txBytesSize: this.byteSize(),
      witnessBytesSize: this.witnesses[this.witnessIndex].length
    });
  }
}, __name11(_a61, "BlobTransactionRequest"), _a61);
var getStorageValue = __name11((value) => {
  const v = new Uint8Array(32);
  v.set(arrayify(value));
  return v;
}, "getStorageValue");
var storageSlotify = __name11((storageSlot) => {
  let key;
  let value;
  if (Array.isArray(storageSlot)) {
    key = storageSlot[0];
    value = storageSlot[1];
  } else {
    key = storageSlot.key;
    value = storageSlot.value;
  }
  return {
    key: hexlify(key),
    value: hexlify(getStorageValue(value))
  };
}, "storageSlotify");
var _a62;
var CreateTransactionRequest = (_a62 = class extends BaseTransactionRequest {
  /**
   * Creates an instance `CreateTransactionRequest`.
   *
   * @param createTransactionRequestLike - The initial values for the instance
   */
  constructor({ bytecodeWitnessIndex, salt, storageSlots: storageSlots2, ...rest }) {
    super(rest);
    /** Type of the transaction */
    __publicField(this, "type", TransactionType.Create);
    /** Witness index of contract bytecode to create */
    __publicField(this, "bytecodeWitnessIndex");
    /** Salt */
    __publicField(this, "salt");
    /** List of storage slots to initialize */
    __publicField(this, "storageSlots");
    this.bytecodeWitnessIndex = bytecodeWitnessIndex ?? 0;
    this.salt = hexlify(salt ?? ZeroBytes32);
    this.storageSlots = [...storageSlots2 ?? []];
  }
  static from(obj) {
    return new this(clone_default(obj));
  }
  /**
   * Converts the transaction request to a `TransactionCreate`.
   *
   * @returns The transaction create object.
   */
  toTransaction() {
    var _a103;
    const baseTransaction = this.getBaseTransaction();
    const bytecodeWitnessIndex = this.bytecodeWitnessIndex;
    const storageSlots2 = ((_a103 = this.storageSlots) == null ? void 0 : _a103.map(storageSlotify)) ?? [];
    return {
      type: TransactionType.Create,
      ...baseTransaction,
      bytecodeWitnessIndex,
      storageSlotsCount: bn(storageSlots2.length),
      salt: this.salt ? hexlify(this.salt) : ZeroBytes32,
      storageSlots: storageSlots2
    };
  }
  /**
   * Get contract created outputs for the transaction.
   *
   * @returns An array of contract created transaction request outputs.
   */
  getContractCreatedOutputs() {
    return this.outputs.filter(
      (output) => output.type === OutputType.ContractCreated
    );
  }
  /**
   * Gets the Transaction Request by hashing the transaction.
   *
   * @param chainId - The chain ID.
   *
   * @returns - A hash of the transaction, which is the transaction ID.
   */
  getTransactionId(chainId) {
    return hashTransaction(this, chainId);
  }
  /**
   * Adds a contract created output to the transaction request.
   *
   * @param contractId - The contract ID.
   * @param stateRoot - The state root.
   */
  addContractCreatedOutput(contractId, stateRoot) {
    this.pushOutput({
      type: OutputType.ContractCreated,
      contractId,
      stateRoot
    });
  }
  metadataGas(gasCosts) {
    return calculateMetadataGasForTxCreate({
      contractBytesSize: bn(arrayify(this.witnesses[this.bytecodeWitnessIndex] || "0x").length),
      gasCosts,
      stateRootSize: this.storageSlots.length,
      txBytesSize: this.byteSize()
    });
  }
}, __name11(_a62, "CreateTransactionRequest"), _a62);
var returnZeroScript = {
  /*
      Opcode::RET(REG_ZERO)
      Opcode::NOOP
    */
  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281
  bytes: arrayify("0x24000000"),
  encodeScriptData: __name11(() => new Uint8Array(0), "encodeScriptData")
};
var withdrawScript = {
  /*
          The following code loads some basic values into registers and calls SMO to create an output message
          5040C010 	- ADDI r16 $is i16   [r16 now points to memory 16 bytes from the start of this program (start of receiver data)]
          5D44C006	- LW r17 $is i6      [r17 set to the 6th word in this program (6*8=48 bytes from the start of this program)]
          4C400011	- SMO r16 r0 r0 r17  [send message out to address starting at memory position r16 with amount in r17]
          24000000	- RET                [return 0]
          00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 [recipient address]
          00000000 00000000 [amount value]
      */
  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281
  bytes: arrayify("0x5040C0105D44C0064C40001124000000"),
  encodeScriptData: __name11(() => new Uint8Array(0), "encodeScriptData")
};
var _a63;
var ScriptTransactionRequest = (_a63 = class extends BaseTransactionRequest {
  /**
   * Constructor for `ScriptTransactionRequest`.
   *
   * @param scriptTransactionRequestLike - The initial values for the instance.
   */
  constructor({ script, scriptData, gasLimit, ...rest } = {}) {
    super(rest);
    /** Type of the transaction */
    __publicField(this, "type", TransactionType.Script);
    /** Gas limit for transaction */
    __publicField(this, "gasLimit");
    /** Script to execute */
    __publicField(this, "script");
    /** Script input data (parameters) */
    __publicField(this, "scriptData");
    __publicField(this, "abis");
    this.gasLimit = bn(gasLimit);
    this.script = arrayify(script ?? returnZeroScript.bytes);
    this.scriptData = arrayify(scriptData ?? returnZeroScript.encodeScriptData());
    this.abis = rest.abis;
  }
  static from(obj) {
    return new this(clone_default(obj));
  }
  /**
   * Helper function to estimate and fund the transaction request with a specified account.
   *
   * @param account - The account to fund the transaction.
   * @param params - The parameters for the transaction cost.
   * @returns The current instance of the `ScriptTransactionRequest` funded.
   */
  async estimateAndFund(account, { signatureCallback, quantities = [] } = {}) {
    const txCost = await account.getTransactionCost(this, { signatureCallback, quantities });
    this.maxFee = txCost.maxFee;
    this.gasLimit = txCost.gasUsed;
    await account.fund(this, txCost);
    return this;
  }
  /**
   * Converts the transaction request to a `TransactionScript`.
   *
   * @returns The transaction script object.
   */
  toTransaction() {
    const script = arrayify(this.script ?? "0x");
    const scriptData = arrayify(this.scriptData ?? "0x");
    return {
      type: TransactionType.Script,
      scriptGasLimit: this.gasLimit,
      ...super.getBaseTransaction(),
      scriptLength: bn(script.length),
      scriptDataLength: bn(scriptData.length),
      receiptsRoot: ZeroBytes32,
      script: hexlify(script),
      scriptData: hexlify(scriptData)
    };
  }
  /**
   * Get contract inputs for the transaction.
   *
   * @returns An array of contract transaction request inputs.
   */
  getContractInputs() {
    return this.inputs.filter(
      (input) => input.type === InputType.Contract
    );
  }
  /**
   * Get contract outputs for the transaction.
   *
   * @returns An array of contract transaction request outputs.
   */
  getContractOutputs() {
    return this.outputs.filter(
      (output) => output.type === OutputType.Contract
    );
  }
  /**
   * Get variable outputs for the transaction.
   *
   * @returns An array of variable transaction request outputs.
   */
  getVariableOutputs() {
    return this.outputs.filter(
      (output) => output.type === OutputType.Variable
    );
  }
  /**
   * Set the script and its data.
   *
   * @param script - The abstract script request.
   * @param data - The script data.
   */
  setScript(script, data) {
    this.scriptData = script.encodeScriptData(data);
    this.script = script.bytes;
  }
  /**
   * Adds variable outputs to the transaction request.
   *
   * @param numberOfVariables - The number of variables to add.
   * @returns The new length of the outputs array.
   */
  addVariableOutputs(numberOfVariables = 1) {
    let outputsNumber = numberOfVariables;
    while (outputsNumber) {
      this.pushOutput({
        type: OutputType.Variable
      });
      outputsNumber -= 1;
    }
    return this.outputs.length - 1;
  }
  /**
   * Calculates the maximum gas for the transaction.
   *
   * @param chainInfo - The chain information.
   * @param minGas - The minimum gas.
   * @returns the maximum gas.
   */
  calculateMaxGas(chainInfo, minGas) {
    const { consensusParameters } = chainInfo;
    const {
      feeParameters: { gasPerByte },
      txParameters: { maxGasPerTx }
    } = consensusParameters;
    const witnessesLength = this.toTransaction().witnesses.reduce(
      (acc, wit) => acc + wit.dataLength,
      0
    );
    return getMaxGas({
      gasPerByte,
      minGas,
      witnessesLength,
      witnessLimit: this.witnessLimit,
      gasLimit: this.gasLimit,
      maxGasPerTx
    });
  }
  /**
   * Adds a contract input and output to the transaction request.
   *
   * @param contract - The contract ID.
   * @returns The current instance of the `ScriptTransactionRequest`.
   */
  addContractInputAndOutput(contract) {
    const contractAddress = addressify(contract);
    if (this.getContractInputs().find((i) => i.contractId === contractAddress.toB256())) {
      return this;
    }
    const inputIndex = super.pushInput({
      type: InputType.Contract,
      contractId: contractAddress.toB256(),
      txPointer: "0x00000000000000000000000000000000"
    });
    this.pushOutput({
      type: OutputType.Contract,
      inputIndex
    });
    return this;
  }
  /**
   * Gets the Transaction Request by hashing the transaction.
   *
   * @param chainId - The chain ID.
   *
   * @returns - A hash of the transaction, which is the transaction ID.
   */
  getTransactionId(chainId) {
    return hashTransaction(this, chainId);
  }
  /**
   * Sets the data for the transaction request.
   *
   * @param abi - Script JSON ABI.
   * @param args - The input arguments.
   * @returns The current instance of the `ScriptTransactionRequest`.
   */
  setData(abi2, args) {
    const abiInterface = new Interface(abi2);
    this.scriptData = abiInterface.functions.main.encodeArguments(args);
    return this;
  }
  metadataGas(gasCosts) {
    return calculateMetadataGasForTxScript({
      gasCosts,
      txBytesSize: this.byteSize()
    });
  }
}, __name11(_a63, "ScriptTransactionRequest"), _a63);
var _a64;
var UpgradeTransactionRequest = (_a64 = class extends BaseTransactionRequest {
  /**
   * Creates an instance `UpgradeTransactionRequest`.
   *
   * @param upgradeTransactionRequestLike - The initial values for the instance
   */
  constructor({
    upgradePurpose,
    bytecodeWitnessIndex,
    ...rest
  } = {}) {
    super(rest);
    /** The type of transaction */
    __publicField(this, "type", TransactionType.Upgrade);
    /** The upgrade purpose */
    __publicField(this, "upgradePurpose");
    /** Witness index of consensus */
    __publicField(this, "bytecodeWitnessIndex");
    this.bytecodeWitnessIndex = bytecodeWitnessIndex ?? 0;
    this.upgradePurpose = upgradePurpose ?? {
      type: UpgradePurposeTypeEnum.ConsensusParameters,
      checksum: "0x"
    };
  }
  static from(obj) {
    if (obj instanceof _a64) {
      return obj;
    }
    return new this(clone_default(obj));
  }
  /**
   * Adds a consensus parameters upgrade purpose.
   *
   * @param consensus - The consensus bytecode.
   *
   * @returns - The current instance of `UpgradeTransactionRequest`.
   */
  addConsensusParametersUpgradePurpose(consensus) {
    this.bytecodeWitnessIndex = this.addWitness(consensus);
    this.upgradePurpose = {
      type: UpgradePurposeTypeEnum.ConsensusParameters,
      checksum: hash(consensus)
    };
    return this;
  }
  /**
   * Adds a state transition upgrade purpose.
   *
   * @param bytecodeRoot - The Merkle root of the state transition.
   *
   * @returns - The current instance of `UpgradeTransactionRequest`.
   */
  addStateTransitionUpgradePurpose(bytecodeRoot) {
    this.upgradePurpose = {
      type: UpgradePurposeTypeEnum.StateTransition,
      data: hexlify(bytecodeRoot)
    };
    return this;
  }
  /**
   * Adds an upgrade purpose.
   *
   * @param type - The upgrade purpose type.
   * @param data - The bytecode or merkle root of upgrade purpose
   *
   * @returns - The current instance of `UpgradeTransactionRequest`.
   */
  addUpgradePurpose(type3, data) {
    if (type3 === UpgradePurposeTypeEnum.ConsensusParameters) {
      this.addConsensusParametersUpgradePurpose(data);
    }
    if (type3 === UpgradePurposeTypeEnum.StateTransition) {
      this.addStateTransitionUpgradePurpose(data);
    }
    return this;
  }
  /**
   * Converts the transaction request to a `TransactionUpgrade`.
   *
   * @returns The transaction create object.
   */
  toTransaction() {
    let upgradePurpose;
    if (this.upgradePurpose.type === UpgradePurposeTypeEnum.ConsensusParameters) {
      upgradePurpose = {
        type: UpgradePurposeTypeEnum.ConsensusParameters,
        data: {
          witnessIndex: this.bytecodeWitnessIndex,
          checksum: this.upgradePurpose.checksum
        }
      };
    } else if (this.upgradePurpose.type === UpgradePurposeTypeEnum.StateTransition) {
      upgradePurpose = {
        type: UpgradePurposeTypeEnum.StateTransition,
        data: {
          bytecodeRoot: hexlify(this.upgradePurpose.data)
        }
      };
    } else {
      throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Invalid upgrade purpose");
    }
    return {
      type: TransactionType.Upgrade,
      ...super.getBaseTransaction(),
      upgradePurpose
    };
  }
  /**
   * Gets the Transaction ID by hashing the transaction
   *
   * @param chainId - The chain ID.
   *
   * @returns - A hash of the transaction, which is the transaction ID.
   */
  getTransactionId(chainId) {
    return hashTransaction(this, chainId);
  }
  /**
   * Calculates the metadata gas cost for an upgrade transaction.
   *
   * @param gasCosts - gas costs passed from the chain.
   *
   * @returns metadata gas cost for the upgrade transaction.
   */
  metadataGas(gasCosts) {
    const txBytesSize = this.byteSize();
    if (this.upgradePurpose.type === UpgradePurposeTypeEnum.ConsensusParameters) {
      const witnessIndex = this.bytecodeWitnessIndex;
      const consensusSize = this.witnesses[witnessIndex].length;
      return calculateMetadataGasForTxUpgrade({
        gasCosts,
        txBytesSize,
        consensusSize
      });
    }
    if (this.upgradePurpose.type === UpgradePurposeTypeEnum.StateTransition) {
      return calculateMetadataGasForTxUpgrade({
        gasCosts,
        txBytesSize
      });
    }
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Invalid upgrade purpose");
  }
}, __name11(_a64, "UpgradeTransactionRequest"), _a64);
var _a65;
var UploadTransactionRequest = (_a65 = class extends BaseTransactionRequest {
  /**
   * Creates an instance `UploadTransactionRequest`.
   *
   * @param uploadTransactionRequestLike - The initial values for the instance
   */
  constructor({ witnessIndex, subsection, ...rest } = {}) {
    super(rest);
    /** Type of the transaction */
    __publicField(this, "type", TransactionType.Upload);
    /** The witness index of the subsection of the bytecode. */
    __publicField(this, "witnessIndex");
    /** The subsection data. */
    __publicField(this, "subsection");
    this.witnessIndex = witnessIndex ?? 0;
    this.subsection = subsection ?? {
      proofSet: [],
      root: ZeroBytes32,
      subsectionIndex: 0,
      subsectionsNumber: 0
    };
  }
  static from(obj) {
    if (obj instanceof _a65) {
      return obj;
    }
    return new this(clone_default(obj));
  }
  /**
   * Adds the subsection.
   *
   * @param subsection - The subsection data.
   */
  addSubsection(subsection) {
    const { subsection: subsectionBytecode, ...rest } = subsection;
    this.subsection = rest;
    this.witnessIndex = this.addWitness(subsectionBytecode);
  }
  /**
   * Gets the Transaction Request by hashing the transaction.
   *
   * @param chainId - The chain ID.
   *
   * @returns - A hash of the transaction, which is the transaction ID.
   */
  getTransactionId(chainId) {
    return hashTransaction(this, chainId);
  }
  /**
   * Converts the transaction request to a `TransactionUpload`.
   *
   * @returns The transaction create object.
   */
  toTransaction() {
    const baseTransaction = this.getBaseTransaction();
    const { subsectionIndex, subsectionsNumber, root, proofSet } = this.subsection;
    return {
      type: TransactionType.Upload,
      ...baseTransaction,
      subsectionIndex,
      subsectionsNumber,
      root: hexlify(root),
      proofSet: proofSet.map(hexlify),
      witnessIndex: this.witnessIndex,
      proofSetCount: proofSet.length
    };
  }
  /**
   * Calculates the metadata gas cost for an upload transaction.
   *
   * @param gasCosts - gas costs passed from the chain.
   *
   * @returns metadata gas cost for the upload transaction.
   */
  metadataGas(gasCosts) {
    return calculateMetadataGasForTxUpload({
      gasCosts,
      txBytesSize: this.byteSize(),
      subsectionSize: arrayify(this.witnesses[this.witnessIndex]).length,
      subsectionsSize: this.subsection.subsectionsNumber
    });
  }
  /**
   * Calculates the minimum gas for an upload transaction.
   *
   * @param chainInfo - The chain information.
   *
   * @returns the minimum gas for the upload transaction
   */
  calculateMinGas(chainInfo) {
    const minGas = super.calculateMinGas(chainInfo);
    const { gasCosts } = chainInfo.consensusParameters;
    const bytecode2 = this.witnesses[this.witnessIndex] ?? ZeroBytes32;
    return calculateMinGasForTxUpload({
      gasCosts,
      baseMinGas: minGas.toNumber(),
      subsectionSize: arrayify(bytecode2).length
    });
  }
}, __name11(_a65, "UploadTransactionRequest"), _a65);
var _a66;
var AbstractScriptRequest = (_a66 = class {
}, __name11(_a66, "AbstractScriptRequest"), _a66);
var transactionRequestify = __name11((obj) => {
  if (obj instanceof ScriptTransactionRequest || obj instanceof CreateTransactionRequest || obj instanceof BlobTransactionRequest || obj instanceof UpgradeTransactionRequest || obj instanceof UploadTransactionRequest) {
    return obj;
  }
  const { type: type3 } = obj;
  switch (obj.type) {
    case TransactionType.Script: {
      return ScriptTransactionRequest.from(obj);
    }
    case TransactionType.Create: {
      return CreateTransactionRequest.from(obj);
    }
    case TransactionType.Blob: {
      return BlobTransactionRequest.from(obj);
    }
    case TransactionType.Upgrade: {
      return UpgradeTransactionRequest.from(obj);
    }
    case TransactionType.Upload: {
      return UploadTransactionRequest.from(obj);
    }
    default: {
      throw new FuelError(
        ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,
        `Unsupported transaction type: ${type3}.`
      );
    }
  }
}, "transactionRequestify");
var isTransactionTypeScript = __name11((request2) => request2.type === TransactionType.Script, "isTransactionTypeScript");
var isTransactionTypeCreate = __name11((request2) => request2.type === TransactionType.Create, "isTransactionTypeCreate");
var isTransactionTypeBlob = __name11((request2) => request2.type === TransactionType.Blob, "isTransactionTypeBlob");
var isTransactionTypeUpgrade = __name11((request2) => request2.type === TransactionType.Upgrade, "isTransactionTypeUpgrade");
var isTransactionTypeUpload = __name11((request2) => request2.type === TransactionType.Upload, "isTransactionTypeUpload");
var cache = /* @__PURE__ */ new Map();
var _a67;
var ResourceCache = (_a67 = class {
  constructor(ttl) {
    __publicField(this, "ttl");
    this.ttl = ttl;
    if (typeof ttl !== "number" || this.ttl <= 0) {
      throw new FuelError(
        ErrorCode.INVALID_TTL,
        `Invalid TTL: ${this.ttl}. Use a value greater than zero.`
      );
    }
  }
  // Add resources to the cache
  set(transactionId, inputs) {
    const transactionResourceCache = this.setupResourcesCache(inputs);
    cache.set(transactionId, transactionResourceCache);
  }
  unset(transactionId) {
    cache.delete(transactionId);
  }
  getActiveData(owner) {
    const activeData = { utxos: [], messages: [] };
    const currentTime = Date.now();
    const expired = [];
    cache.forEach((resource, transactionId) => {
      const isActive = currentTime - resource.timestamp < this.ttl;
      if (isActive) {
        const resourcesFromOwner = resource.owners.get(owner);
        if (resourcesFromOwner) {
          activeData.utxos.push(...resourcesFromOwner.utxos);
          activeData.messages.push(...resourcesFromOwner.messages);
        }
      } else {
        expired.push(transactionId);
      }
    });
    expired.forEach(this.unset);
    activeData.utxos.reverse();
    activeData.messages.reverse();
    return activeData;
  }
  isCached(owner, key) {
    const currentTime = Date.now();
    let cached = false;
    const expired = [];
    for (const [transactionId, resourceData] of cache.entries()) {
      const isActive = currentTime - resourceData.timestamp < this.ttl;
      if (isActive) {
        const resourcesFromOwner = resourceData.owners.get(owner);
        if ((resourcesFromOwner == null ? void 0 : resourcesFromOwner.utxos.has(key)) || (resourcesFromOwner == null ? void 0 : resourcesFromOwner.messages.has(key))) {
          cached = true;
          break;
        }
      } else {
        expired.push(transactionId);
      }
    }
    expired.forEach(this.unset);
    return cached;
  }
  clear() {
    cache.clear();
  }
  setupResourcesCache(inputs) {
    const currentTime = Date.now();
    const transactionResourcesCache = {
      owners: /* @__PURE__ */ new Map(),
      timestamp: currentTime
    };
    inputs.filter(isRequestInputCoinOrMessage).forEach((input) => {
      var _a103, _b2;
      const { owner, key, type: type3 } = this.extractResourceData(input);
      if (!transactionResourcesCache.owners.has(owner)) {
        transactionResourcesCache.owners.set(owner, { utxos: /* @__PURE__ */ new Set(), messages: /* @__PURE__ */ new Set() });
      }
      if (type3 === "utxo") {
        (_a103 = transactionResourcesCache.owners.get(owner)) == null ? void 0 : _a103.utxos.add(key);
      } else {
        (_b2 = transactionResourcesCache.owners.get(owner)) == null ? void 0 : _b2.messages.add(key);
      }
    });
    return transactionResourcesCache;
  }
  extractResourceData(input) {
    if (isRequestInputCoin(input)) {
      return { owner: hexlify(input.owner), key: hexlify(input.id), type: "utxo" };
    }
    return { owner: hexlify(input.recipient), key: hexlify(input.nonce), type: "message" };
  }
}, __name11(_a67, "ResourceCache"), _a67);
var calculateTXFeeForSummary = __name11((params) => {
  var _a103;
  const {
    gasPrice,
    rawPayload,
    tip,
    consensusParameters: { gasCosts, feeParams, maxGasPerTx }
  } = params;
  const gasPerByte = bn(feeParams.gasPerByte);
  const gasPriceFactor = bn(feeParams.gasPriceFactor);
  const transactionBytes = arrayify(rawPayload);
  const [transaction] = new TransactionCoder().decode(transactionBytes, 0);
  const { type: type3, witnesses, inputs, policies } = transaction;
  let metadataGas = bn(0);
  let gasLimit = bn(0);
  if (type3 !== TransactionType.Create && type3 !== TransactionType.Script) {
    return bn(0);
  }
  if (type3 === TransactionType.Create) {
    const { bytecodeWitnessIndex, storageSlots: storageSlots2 } = transaction;
    const contractBytesSize = bn(arrayify(witnesses[bytecodeWitnessIndex].data).length);
    metadataGas = calculateMetadataGasForTxCreate({
      contractBytesSize,
      gasCosts,
      stateRootSize: storageSlots2.length || 0,
      txBytesSize: transactionBytes.length
    });
  } else {
    const { scriptGasLimit } = transaction;
    if (scriptGasLimit) {
      gasLimit = scriptGasLimit;
    }
    metadataGas = calculateMetadataGasForTxScript({
      gasCosts,
      txBytesSize: transactionBytes.length
    });
  }
  const minGas = getMinGas({
    gasCosts,
    gasPerByte: bn(gasPerByte),
    inputs,
    metadataGas,
    txBytesSize: transactionBytes.length
  });
  const witnessLimit = (_a103 = policies.find((policy) => policy.type === PolicyType.WitnessLimit)) == null ? void 0 : _a103.data;
  const witnessesLength = witnesses.reduce((acc, wit) => acc + wit.dataLength, 0);
  const maxGas = getMaxGas({
    gasPerByte,
    minGas,
    witnessesLength,
    gasLimit,
    witnessLimit,
    maxGasPerTx
  });
  const maxFee = calculateGasFee({
    gasPrice,
    gas: maxGas,
    priceFactor: gasPriceFactor,
    tip
  });
  return maxFee;
}, "calculateTXFeeForSummary");
function getInputsByTypes(inputs, types) {
  return inputs.filter((i) => types.includes(i.type));
}
__name11(getInputsByTypes, "getInputsByTypes");
function getInputsByType(inputs, type3) {
  return inputs.filter((i) => i.type === type3);
}
__name11(getInputsByType, "getInputsByType");
function getInputsCoin(inputs) {
  return getInputsByType(inputs, InputType.Coin);
}
__name11(getInputsCoin, "getInputsCoin");
function getInputsMessage(inputs) {
  return getInputsByType(inputs, InputType.Message);
}
__name11(getInputsMessage, "getInputsMessage");
function getInputsCoinAndMessage(inputs) {
  return getInputsByTypes(inputs, [InputType.Coin, InputType.Message]);
}
__name11(getInputsCoinAndMessage, "getInputsCoinAndMessage");
function isInputCoin(input) {
  return input.type === InputType.Coin;
}
__name11(isInputCoin, "isInputCoin");
function getInputsContract(inputs) {
  return getInputsByType(inputs, InputType.Contract);
}
__name11(getInputsContract, "getInputsContract");
function findCoinInput(inputs, assetId) {
  const coinInputs = getInputsCoin(inputs);
  return coinInputs.find((i) => i.assetId === assetId);
}
__name11(findCoinInput, "findCoinInput");
function aggregateInputsAmountsByAssetAndOwner(inputs, baseAssetId) {
  const aggregated = /* @__PURE__ */ new Map();
  getInputsCoinAndMessage(inputs).forEach((input) => {
    const assetId = isInputCoin(input) ? input.assetId : baseAssetId;
    const owner = isInputCoin(input) ? input.owner : input.recipient;
    let ownersMap = aggregated.get(assetId);
    if (!ownersMap) {
      ownersMap = /* @__PURE__ */ new Map();
      aggregated.set(assetId, ownersMap);
    }
    let ownerBalance = ownersMap.get(owner);
    if (!ownerBalance) {
      ownerBalance = new BN(0);
      ownersMap.set(owner, ownerBalance);
    }
    ownersMap.set(owner, ownerBalance.add(input.amount));
  });
  return aggregated;
}
__name11(aggregateInputsAmountsByAssetAndOwner, "aggregateInputsAmountsByAssetAndOwner");
function findMessageInput(inputs) {
  var _a103;
  return (_a103 = getInputsMessage(inputs)) == null ? void 0 : _a103[0];
}
__name11(findMessageInput, "findMessageInput");
function getInputFromAssetId(inputs, assetId, isBaseAsset = false) {
  const coinInput = findCoinInput(inputs, assetId);
  if (coinInput) {
    return coinInput;
  }
  if (isBaseAsset) {
    return findMessageInput(inputs);
  }
  return void 0;
}
__name11(getInputFromAssetId, "getInputFromAssetId");
function getInputContractFromIndex(inputs, inputIndex) {
  if (inputIndex == null) {
    return void 0;
  }
  const contractInput = inputs == null ? void 0 : inputs[inputIndex];
  if (!contractInput) {
    return void 0;
  }
  if (contractInput.type !== InputType.Contract) {
    throw new FuelError(
      ErrorCode.INVALID_TRANSACTION_INPUT,
      `Contract input should be of type 'contract'.`
    );
  }
  return contractInput;
}
__name11(getInputContractFromIndex, "getInputContractFromIndex");
function getInputAccountAddress(input) {
  if (input.type === InputType.Coin) {
    return input.owner.toString();
  }
  if (input.type === InputType.Message) {
    return input.recipient.toString();
  }
  return "";
}
__name11(getInputAccountAddress, "getInputAccountAddress");
function getOutputsByType(outputs, type3) {
  return outputs.filter((o3) => o3.type === type3);
}
__name11(getOutputsByType, "getOutputsByType");
function getOutputsContractCreated(outputs) {
  return getOutputsByType(outputs, OutputType.ContractCreated);
}
__name11(getOutputsContractCreated, "getOutputsContractCreated");
function getOutputsCoin(outputs) {
  return getOutputsByType(outputs, OutputType.Coin);
}
__name11(getOutputsCoin, "getOutputsCoin");
function getOutputsChange(outputs) {
  return getOutputsByType(outputs, OutputType.Change);
}
__name11(getOutputsChange, "getOutputsChange");
function getOutputsContract(outputs) {
  return getOutputsByType(outputs, OutputType.Contract);
}
__name11(getOutputsContract, "getOutputsContract");
function getOutputsVariable(outputs) {
  return getOutputsByType(outputs, OutputType.Variable);
}
__name11(getOutputsVariable, "getOutputsVariable");
var TransactionTypeName = ((TransactionTypeName2) => {
  TransactionTypeName2["Create"] = "Create";
  TransactionTypeName2["Mint"] = "Mint";
  TransactionTypeName2["Script"] = "Script";
  TransactionTypeName2["Upgrade"] = "Upgrade";
  TransactionTypeName2["Upload"] = "Upload";
  TransactionTypeName2["Blob"] = "Blob";
  return TransactionTypeName2;
})(TransactionTypeName || {});
var TransactionStatus = ((TransactionStatus2) => {
  TransactionStatus2["submitted"] = "submitted";
  TransactionStatus2["success"] = "success";
  TransactionStatus2["squeezedout"] = "squeezedout";
  TransactionStatus2["failure"] = "failure";
  return TransactionStatus2;
})(TransactionStatus || {});
var OperationName = ((OperationName2) => {
  OperationName2["payBlockProducer"] = "Pay network fee to block producer";
  OperationName2["contractCreated"] = "Contract created";
  OperationName2["transfer"] = "Transfer asset";
  OperationName2["contractCall"] = "Contract call";
  OperationName2["receive"] = "Receive asset";
  OperationName2["withdrawFromFuel"] = "Withdraw from Fuel";
  return OperationName2;
})(OperationName || {});
var AddressType = ((AddressType2) => {
  AddressType2[AddressType2["contract"] = 0] = "contract";
  AddressType2[AddressType2["account"] = 1] = "account";
  return AddressType2;
})(AddressType || {});
var ChainName = ((ChainName2) => {
  ChainName2["ethereum"] = "ethereum";
  ChainName2["fuel"] = "fuel";
  return ChainName2;
})(ChainName || {});
function getReceiptsByType(receipts, type3) {
  return (receipts ?? []).filter((r) => r.type === type3);
}
__name11(getReceiptsByType, "getReceiptsByType");
function getTransactionTypeName(transactionType) {
  switch (transactionType) {
    case TransactionType.Mint:
      return "Mint";
    case TransactionType.Create:
      return "Create";
    case TransactionType.Script:
      return "Script";
    case TransactionType.Blob:
      return "Blob";
    case TransactionType.Upgrade:
      return "Upgrade";
    case TransactionType.Upload:
      return "Upload";
    default:
      throw new FuelError(
        ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,
        `Unsupported transaction type: ${transactionType}.`
      );
  }
}
__name11(getTransactionTypeName, "getTransactionTypeName");
function isType2(transactionType, type3) {
  const txType = getTransactionTypeName(transactionType);
  return txType === type3;
}
__name11(isType2, "isType");
function isTypeMint(transactionType) {
  return isType2(
    transactionType,
    "Mint"
    /* Mint */
  );
}
__name11(isTypeMint, "isTypeMint");
function isTypeCreate(transactionType) {
  return isType2(
    transactionType,
    "Create"
    /* Create */
  );
}
__name11(isTypeCreate, "isTypeCreate");
function isTypeScript(transactionType) {
  return isType2(
    transactionType,
    "Script"
    /* Script */
  );
}
__name11(isTypeScript, "isTypeScript");
function isTypeUpgrade(transactionType) {
  return isType2(
    transactionType,
    "Upgrade"
    /* Upgrade */
  );
}
__name11(isTypeUpgrade, "isTypeUpgrade");
function isTypeUpload(transactionType) {
  return isType2(
    transactionType,
    "Upload"
    /* Upload */
  );
}
__name11(isTypeUpload, "isTypeUpload");
function isTypeBlob(transactionType) {
  return isType2(
    transactionType,
    "Blob"
    /* Blob */
  );
}
__name11(isTypeBlob, "isTypeBlob");
function hasSameAssetId(a) {
  return (b) => a.assetId === b.assetId;
}
__name11(hasSameAssetId, "hasSameAssetId");
function getReceiptsCall(receipts) {
  return getReceiptsByType(receipts, ReceiptType.Call);
}
__name11(getReceiptsCall, "getReceiptsCall");
function getReceiptsMessageOut(receipts) {
  return getReceiptsByType(receipts, ReceiptType.MessageOut);
}
__name11(getReceiptsMessageOut, "getReceiptsMessageOut");
function mergeAssets(op1, op2) {
  const assets1 = op1.assetsSent || [];
  const assets2 = op2.assetsSent || [];
  const assetMap = /* @__PURE__ */ new Map();
  assets1.forEach((asset) => {
    assetMap.set(asset.assetId, { ...asset });
  });
  assets2.forEach((asset) => {
    const existingAsset = assetMap.get(asset.assetId);
    if (existingAsset) {
      existingAsset.amount = bn(existingAsset.amount).add(asset.amount);
    } else {
      assetMap.set(asset.assetId, { ...asset });
    }
  });
  return Array.from(assetMap.values());
}
__name11(mergeAssets, "mergeAssets");
function isSameOperation(a, b) {
  var _a103, _b2, _c, _d, _e, _f, _g, _h;
  return a.name === b.name && ((_a103 = a.from) == null ? void 0 : _a103.address) === ((_b2 = b.from) == null ? void 0 : _b2.address) && ((_c = a.to) == null ? void 0 : _c.address) === ((_d = b.to) == null ? void 0 : _d.address) && ((_e = a.from) == null ? void 0 : _e.type) === ((_f = b.from) == null ? void 0 : _f.type) && ((_g = a.to) == null ? void 0 : _g.type) === ((_h = b.to) == null ? void 0 : _h.type);
}
__name11(isSameOperation, "isSameOperation");
function mergeAssetsSent(existing, toAdd) {
  var _a103, _b2;
  if (!((_a103 = toAdd.assetsSent) == null ? void 0 : _a103.length)) {
    return existing.assetsSent;
  }
  return ((_b2 = existing.assetsSent) == null ? void 0 : _b2.length) ? mergeAssets(existing, toAdd) : toAdd.assetsSent;
}
__name11(mergeAssetsSent, "mergeAssetsSent");
function mergeCalls(existing, toAdd) {
  var _a103;
  if (!((_a103 = toAdd.calls) == null ? void 0 : _a103.length)) {
    return existing.calls;
  }
  return [...existing.calls || [], ...toAdd.calls];
}
__name11(mergeCalls, "mergeCalls");
function mergeOperations(existing, toAdd) {
  var _a103;
  return {
    ...existing,
    assetsSent: mergeAssetsSent(existing, toAdd),
    calls: mergeCalls(existing, toAdd),
    receipts: [
      ...existing.receipts || [],
      ...((_a103 = toAdd.receipts) == null ? void 0 : _a103.filter((r) => {
        var _a104;
        return !((_a104 = existing.receipts) == null ? void 0 : _a104.some((er) => er === r));
      })) || []
    ]
  };
}
__name11(mergeOperations, "mergeOperations");
function addOperation(operations, toAdd) {
  const existingIndex = operations.findIndex((op) => isSameOperation(op, toAdd));
  if (existingIndex === -1) {
    return [...operations, toAdd];
  }
  return operations.map((op, index) => index === existingIndex ? mergeOperations(op, toAdd) : op);
}
__name11(addOperation, "addOperation");
function getReceiptsTransferOut(receipts) {
  return getReceiptsByType(receipts, ReceiptType.TransferOut);
}
__name11(getReceiptsTransferOut, "getReceiptsTransferOut");
function getWithdrawFromFuelOperations({
  inputs,
  receipts,
  baseAssetId
}) {
  const messageOutReceipts = getReceiptsMessageOut(receipts);
  const withdrawFromFuelOperations = messageOutReceipts.reduce(
    (prevWithdrawFromFuelOps, receipt) => {
      const input = getInputFromAssetId(inputs, baseAssetId, true);
      if (input) {
        const inputAddress = getInputAccountAddress(input);
        const newWithdrawFromFuelOps = addOperation(prevWithdrawFromFuelOps, {
          name: "Withdraw from Fuel",
          from: {
            type: 1,
            address: inputAddress
          },
          to: {
            type: 1,
            address: receipt.recipient.toString(),
            chain: "ethereum"
            /* ethereum */
          },
          assetsSent: [
            {
              amount: receipt.amount,
              assetId: baseAssetId
            }
          ],
          receipts: [receipt]
        });
        return newWithdrawFromFuelOps;
      }
      return prevWithdrawFromFuelOps;
    },
    []
  );
  return withdrawFromFuelOperations;
}
__name11(getWithdrawFromFuelOperations, "getWithdrawFromFuelOperations");
function getContractCalls(contractInput, abiMap, _receipt, _rawPayload, _maxInputs) {
  const abi2 = abiMap == null ? void 0 : abiMap[contractInput.contractID];
  if (!abi2) {
    return [];
  }
  return [];
}
__name11(getContractCalls, "getContractCalls");
function getAssetsSent(receipt) {
  var _a103;
  return ((_a103 = receipt.amount) == null ? void 0 : _a103.isZero()) ? void 0 : [
    {
      amount: receipt.amount,
      assetId: receipt.assetId
    }
  ];
}
__name11(getAssetsSent, "getAssetsSent");
function processCallReceipt(receipt, contractInput, inputs, abiMap, rawPayload, maxInputs, baseAssetId) {
  const assetId = receipt.assetId === ZeroBytes32 ? baseAssetId : receipt.assetId;
  const input = getInputFromAssetId(inputs, assetId, assetId === baseAssetId);
  if (!input) {
    return [];
  }
  const inputAddress = getInputAccountAddress(input);
  const calls = getContractCalls(contractInput, abiMap, receipt, rawPayload, maxInputs);
  return [
    {
      name: "Contract call",
      from: {
        type: 1,
        address: inputAddress
      },
      to: {
        type: 0,
        address: receipt.to
      },
      assetsSent: getAssetsSent(receipt),
      calls,
      receipts: [receipt]
    }
  ];
}
__name11(processCallReceipt, "processCallReceipt");
function getContractCallOperations({
  inputs,
  outputs,
  receipts,
  abiMap,
  rawPayload,
  maxInputs,
  baseAssetId
}) {
  const contractCallReceipts = getReceiptsCall(receipts);
  const contractOutputs = getOutputsContract(outputs);
  return contractOutputs.flatMap((output) => {
    const contractInput = getInputContractFromIndex(inputs, output.inputIndex);
    if (!contractInput) {
      return [];
    }
    return contractCallReceipts.filter((receipt) => receipt.to === contractInput.contractID).flatMap(
      (receipt) => processCallReceipt(
        receipt,
        contractInput,
        inputs,
        abiMap,
        rawPayload,
        maxInputs,
        baseAssetId
      )
    );
  });
}
__name11(getContractCallOperations, "getContractCallOperations");
function extractTransferOperationFromReceipt(receipt, contractInputs, changeOutputs) {
  const { to: toAddress, assetId, amount } = receipt;
  let { id: fromAddress } = receipt;
  const toType = contractInputs.some((input) => input.contractID === toAddress) ? 0 : 1;
  if (ZeroBytes32 === fromAddress) {
    const change = changeOutputs.find((output) => output.assetId === assetId);
    fromAddress = (change == null ? void 0 : change.to) || fromAddress;
  }
  const fromType = contractInputs.some((input) => input.contractID === fromAddress) ? 0 : 1;
  return {
    name: "Transfer asset",
    from: {
      type: fromType,
      address: fromAddress
    },
    to: {
      type: toType,
      address: toAddress
    },
    assetsSent: [
      {
        assetId: assetId.toString(),
        amount
      }
    ],
    receipts: [receipt]
  };
}
__name11(extractTransferOperationFromReceipt, "extractTransferOperationFromReceipt");
function getTransferOperations({
  inputs,
  outputs,
  receipts,
  baseAssetId
}) {
  let operations = [];
  const coinOutputs = getOutputsCoin(outputs);
  const contractInputs = getInputsContract(inputs);
  const changeOutputs = getOutputsChange(outputs);
  const aggregated = aggregateInputsAmountsByAssetAndOwner(inputs, baseAssetId);
  coinOutputs.forEach(({ amount, assetId, to }) => {
    const txPayers = aggregated.get(assetId) || /* @__PURE__ */ new Map();
    let selectedPayer;
    let fallbackPayer;
    for (const [address, payedAmount] of txPayers) {
      if (!fallbackPayer) {
        fallbackPayer = address;
      }
      if (payedAmount.gte(amount)) {
        selectedPayer = address;
        break;
      }
    }
    selectedPayer = selectedPayer || fallbackPayer;
    if (selectedPayer) {
      operations = addOperation(operations, {
        name: "Transfer asset",
        from: {
          type: 1,
          address: selectedPayer
        },
        to: {
          type: 1,
          address: to
        },
        assetsSent: [{ assetId, amount }]
      });
    }
  });
  const transferReceipts = getReceiptsByType(
    receipts,
    ReceiptType.Transfer
  );
  const transferOutReceipts = getReceiptsByType(
    receipts,
    ReceiptType.TransferOut
  );
  [...transferReceipts, ...transferOutReceipts].forEach((receipt) => {
    const operation = extractTransferOperationFromReceipt(receipt, contractInputs, changeOutputs);
    operations = addOperation(operations, operation);
  });
  return operations;
}
__name11(getTransferOperations, "getTransferOperations");
function getPayProducerOperations(outputs) {
  const coinOutputs = getOutputsCoin(outputs);
  const payProducerOperations = coinOutputs.reduce((prev, output) => {
    const operations = addOperation(prev, {
      name: "Pay network fee to block producer",
      from: {
        type: 1,
        address: "Network"
      },
      to: {
        type: 1,
        address: output.to.toString()
      },
      assetsSent: [
        {
          assetId: output.assetId.toString(),
          amount: output.amount
        }
      ]
    });
    return operations;
  }, []);
  return payProducerOperations;
}
__name11(getPayProducerOperations, "getPayProducerOperations");
function getContractCreatedOperations({ inputs, outputs }) {
  const contractCreatedOutputs = getOutputsContractCreated(outputs);
  const input = getInputsCoinAndMessage(inputs)[0];
  const fromAddress = getInputAccountAddress(input);
  const contractCreatedOperations = contractCreatedOutputs.reduce((prev, contractCreatedOutput) => {
    const operations = addOperation(prev, {
      name: "Contract created",
      from: {
        type: 1,
        address: fromAddress
      },
      to: {
        type: 0,
        address: (contractCreatedOutput == null ? void 0 : contractCreatedOutput.contractId) || ""
      }
    });
    return operations;
  }, []);
  return contractCreatedOperations;
}
__name11(getContractCreatedOperations, "getContractCreatedOperations");
function getOperations({
  transactionType,
  inputs,
  outputs,
  receipts,
  abiMap,
  rawPayload,
  maxInputs,
  baseAssetId
}) {
  if (isTypeCreate(transactionType)) {
    return [...getContractCreatedOperations({ inputs, outputs })];
  }
  if (isTypeScript(transactionType)) {
    return [
      ...getTransferOperations({ inputs, outputs, receipts, baseAssetId }),
      ...getContractCallOperations({
        inputs,
        outputs,
        receipts,
        abiMap,
        rawPayload,
        maxInputs,
        baseAssetId
      }),
      ...getWithdrawFromFuelOperations({ inputs, receipts, baseAssetId })
    ];
  }
  return [...getPayProducerOperations(outputs)];
}
__name11(getOperations, "getOperations");
var processGqlReceipt = __name11((gqlReceipt) => deserializeReceipt(gqlReceipt), "processGqlReceipt");
var extractMintedAssetsFromReceipts = __name11((receipts) => {
  const mintedAssets = [];
  receipts.forEach((receipt) => {
    if (receipt.type === ReceiptType.Mint) {
      mintedAssets.push({
        subId: receipt.subId,
        contractId: receipt.contractId,
        assetId: receipt.assetId,
        amount: receipt.val
      });
    }
  });
  return mintedAssets;
}, "extractMintedAssetsFromReceipts");
var extractBurnedAssetsFromReceipts = __name11((receipts) => {
  const burnedAssets = [];
  receipts.forEach((receipt) => {
    if (receipt.type === ReceiptType.Burn) {
      burnedAssets.push({
        subId: receipt.subId,
        contractId: receipt.contractId,
        assetId: receipt.assetId,
        amount: receipt.val
      });
    }
  });
  return burnedAssets;
}, "extractBurnedAssetsFromReceipts");
var getTransactionStatusName = __name11((gqlStatus) => {
  switch (gqlStatus) {
    case "FailureStatus":
      return "failure";
    case "SuccessStatus":
      return "success";
    case "SubmittedStatus":
      return "submitted";
    case "SqueezedOutStatus":
      return "squeezedout";
    default:
      throw new FuelError(
        ErrorCode.INVALID_TRANSACTION_STATUS,
        `Invalid transaction status: ${gqlStatus}.`
      );
  }
}, "getTransactionStatusName");
var processGraphqlStatus = __name11((gqlTransactionStatus) => {
  var _a103, _b2;
  let time2;
  let blockId;
  let status;
  let totalFee;
  let totalGas;
  let isStatusFailure = false;
  let isStatusSuccess = false;
  let isStatusPending = false;
  if (gqlTransactionStatus == null ? void 0 : gqlTransactionStatus.type) {
    status = getTransactionStatusName(gqlTransactionStatus.type);
    switch (gqlTransactionStatus.type) {
      case "SuccessStatus":
        time2 = gqlTransactionStatus.time;
        blockId = (_a103 = gqlTransactionStatus.block) == null ? void 0 : _a103.id;
        isStatusSuccess = true;
        totalFee = bn(gqlTransactionStatus.totalFee);
        totalGas = bn(gqlTransactionStatus.totalGas);
        break;
      case "FailureStatus":
        time2 = gqlTransactionStatus.time;
        blockId = (_b2 = gqlTransactionStatus.block) == null ? void 0 : _b2.id;
        isStatusFailure = true;
        totalFee = bn(gqlTransactionStatus.totalFee);
        totalGas = bn(gqlTransactionStatus.totalGas);
        break;
      case "SubmittedStatus":
        time2 = gqlTransactionStatus.time;
        isStatusPending = true;
        break;
      default:
    }
  }
  const processedGraphqlStatus = {
    time: time2,
    blockId,
    status,
    totalFee,
    totalGas,
    isStatusFailure,
    isStatusSuccess,
    isStatusPending
  };
  return processedGraphqlStatus;
}, "processGraphqlStatus");
var getTotalFeeFromStatus = __name11((status) => status && "totalFee" in status ? bn(status.totalFee) : void 0, "getTotalFeeFromStatus");
function assembleTransactionSummary(params) {
  var _a103, _b2;
  const {
    id,
    receipts,
    gasPerByte,
    gasPriceFactor,
    transaction,
    transactionBytes,
    gqlTransactionStatus,
    abiMap = {},
    maxInputs,
    gasCosts,
    maxGasPerTx,
    gasPrice,
    baseAssetId
  } = params;
  const gasUsed = getGasUsedFromReceipts(receipts);
  const rawPayload = hexlify(transactionBytes);
  const operations = getOperations({
    transactionType: transaction.type,
    inputs: transaction.inputs || [],
    outputs: transaction.outputs || [],
    receipts,
    rawPayload,
    abiMap,
    maxInputs,
    baseAssetId
  });
  const typeName = getTransactionTypeName(transaction.type);
  const tip = bn((_b2 = (_a103 = transaction.policies) == null ? void 0 : _a103.find((policy) => policy.type === PolicyType.Tip)) == null ? void 0 : _b2.data);
  const { isStatusFailure, isStatusPending, isStatusSuccess, blockId, status, time: time2, totalFee } = processGraphqlStatus(gqlTransactionStatus);
  const fee = totalFee ?? calculateTXFeeForSummary({
    gasPrice,
    rawPayload,
    tip,
    consensusParameters: {
      gasCosts,
      maxGasPerTx,
      feeParams: {
        gasPerByte,
        gasPriceFactor
      }
    }
  });
  const mintedAssets = extractMintedAssetsFromReceipts(receipts);
  const burnedAssets = extractBurnedAssetsFromReceipts(receipts);
  let date;
  if (time2) {
    date = DateTime.fromTai64(time2);
  }
  const transactionSummary = {
    id,
    tip,
    fee,
    gasUsed,
    operations,
    type: typeName,
    blockId,
    time: time2,
    status,
    receipts,
    mintedAssets,
    burnedAssets,
    isTypeMint: isTypeMint(transaction.type),
    isTypeCreate: isTypeCreate(transaction.type),
    isTypeScript: isTypeScript(transaction.type),
    isTypeUpgrade: isTypeUpgrade(transaction.type),
    isTypeUpload: isTypeUpload(transaction.type),
    isTypeBlob: isTypeBlob(transaction.type),
    isStatusFailure,
    isStatusSuccess,
    isStatusPending,
    date,
    transaction
  };
  return transactionSummary;
}
__name11(assembleTransactionSummary, "assembleTransactionSummary");
function getAllDecodedLogs(opts) {
  const { receipts, mainAbi, externalAbis = {} } = opts;
  let mainContract = "";
  if (mainAbi.programType === "contract") {
    const firstCallReceipt = receipts.find(
      (r) => r.type === ReceiptType.Call && r.id === ZeroBytes32
    );
    mainContract = firstCallReceipt.to;
  }
  return receipts.reduce(
    ({ logs, groupedLogs }, receipt) => {
      if (receipt.type === ReceiptType.LogData || receipt.type === ReceiptType.Log) {
        const isLogFromMainAbi = receipt.id === ZeroBytes32 || mainContract === receipt.id;
        const isDecodable = isLogFromMainAbi || externalAbis[receipt.id];
        if (isDecodable) {
          const interfaceToUse = isLogFromMainAbi ? new Interface(mainAbi) : new Interface(externalAbis[receipt.id]);
          const data = receipt.type === ReceiptType.Log ? new BigNumberCoder("u64").encode(receipt.ra) : receipt.data;
          const [decodedLog] = interfaceToUse.decodeLog(data, receipt.rb.toString());
          logs.push(decodedLog);
          groupedLogs[receipt.id] = [...groupedLogs[receipt.id] || [], decodedLog];
        }
      }
      return { logs, groupedLogs };
    },
    { logs: [], groupedLogs: {} }
  );
}
__name11(getAllDecodedLogs, "getAllDecodedLogs");
function mapGqlOutputsToTxOutputs(outputs) {
  return outputs.map((o3) => {
    const obj = "amount" in o3 ? { ...o3, amount: bn(o3.amount) } : o3;
    switch (obj.type) {
      case "CoinOutput":
        return { ...obj, type: OutputType.Coin };
      case "ContractOutput":
        return {
          ...obj,
          type: OutputType.Contract,
          inputIndex: parseInt(obj.inputIndex, 10)
        };
      case "ChangeOutput":
        return {
          ...obj,
          type: OutputType.Change
        };
      case "VariableOutput":
        return { ...obj, type: OutputType.Variable };
      case "ContractCreated":
        return {
          ...obj,
          type: OutputType.ContractCreated,
          contractId: obj.contract
        };
      default:
        return assertUnreachable(obj);
    }
  });
}
__name11(mapGqlOutputsToTxOutputs, "mapGqlOutputsToTxOutputs");
var _a68;
var TransactionResponse = (_a68 = class {
  /**
   * Constructor for `TransactionResponse`.
   *
   * @param tx - The transaction ID or TransactionRequest.
   * @param provider - The provider.
   */
  constructor(tx, provider, chainId, abis, submitTxSubscription) {
    /** Transaction ID */
    __publicField(this, "id");
    /** Current provider */
    __publicField(this, "provider");
    /** Gas used on the transaction */
    __publicField(this, "gasUsed", bn(0));
    /** The graphql Transaction with receipts object. */
    __publicField(this, "gqlTransaction");
    __publicField(this, "request");
    __publicField(this, "status");
    __publicField(this, "abis");
    this.submitTxSubscription = submitTxSubscription;
    this.id = typeof tx === "string" ? tx : tx.getTransactionId(chainId);
    this.provider = provider;
    this.abis = abis;
    this.request = typeof tx === "string" ? void 0 : tx;
    this.waitForResult = this.waitForResult.bind(this);
  }
  /**
   * Async constructor for `TransactionResponse`. This method can be used to create
   * an instance of `TransactionResponse` and wait for the transaction to be fetched
   * from the chain, ensuring that the `gqlTransaction` property is set.
   *
   * @param id - The transaction ID.
   * @param provider - The provider.
   */
  static async create(id, provider, abis) {
    const chainId = await provider.getChainId();
    const response = new _a68(id, provider, chainId, abis);
    await response.fetch();
    return response;
  }
  applyMalleableSubscriptionFields(transaction) {
    const status = this.status;
    if (!status) {
      return;
    }
    const tx = transaction;
    if (status.type === "SuccessStatus" || status.type === "FailureStatus") {
      tx.inputs = tx.inputs.map((input, idx) => {
        var _a103;
        if ("txPointer" in input) {
          const correspondingInput = (_a103 = status.transaction.inputs) == null ? void 0 : _a103[idx];
          return {
            ...input,
            txPointer: TxPointerCoder.decodeFromGqlScalar(correspondingInput.txPointer)
          };
        }
        return input;
      });
      tx.outputs = mapGqlOutputsToTxOutputs(status.transaction.outputs);
      if ("receiptsRoot" in status.transaction) {
        tx.receiptsRoot = status.transaction.receiptsRoot;
      }
    }
  }
  async getTransaction() {
    if (this.request) {
      const tx = this.request.toTransaction();
      this.applyMalleableSubscriptionFields(tx);
      return {
        tx,
        bytes: this.request.toTransactionBytes()
      };
    }
    const gqlTransaction = this.gqlTransaction ?? await this.fetch();
    return {
      tx: this.decodeTransaction(gqlTransaction),
      bytes: arrayify(gqlTransaction.rawPayload)
    };
  }
  getReceipts() {
    var _a103;
    const status = this.status ?? ((_a103 = this.gqlTransaction) == null ? void 0 : _a103.status);
    switch (status == null ? void 0 : status.type) {
      case "SuccessStatus":
      case "FailureStatus":
        return status.receipts.map(deserializeReceipt);
      default:
        return [];
    }
  }
  /**
   * Fetch the transaction with receipts from the provider.
   *
   * @returns Transaction with receipts query result.
   */
  async fetch() {
    const response = await this.provider.operations.getTransactionWithReceipts({
      transactionId: this.id
    });
    if (!response.transaction) {
      const subscription = await this.provider.operations.statusChange({
        transactionId: this.id
      });
      for await (const { statusChange } of subscription) {
        if (statusChange) {
          this.status = statusChange;
          break;
        }
      }
      return this.fetch();
    }
    this.gqlTransaction = response.transaction;
    return response.transaction;
  }
  /**
   * Decode the raw payload of the transaction.
   *
   * @param transactionWithReceipts - The transaction with receipts object.
   * @returns The decoded transaction.
   */
  decodeTransaction(transactionWithReceipts) {
    var _a103;
    return (_a103 = new TransactionCoder().decode(
      arrayify(transactionWithReceipts.rawPayload),
      0
    )) == null ? void 0 : _a103[0];
  }
  /**
   * Retrieves the TransactionSummary. If the `gqlTransaction` is not set, it will
   * fetch it from the provider
   *
   * @param contractsAbiMap - The contracts ABI map.
   * @returns
   */
  async getTransactionSummary(contractsAbiMap) {
    var _a103, _b2;
    const { tx: transaction, bytes: transactionBytes } = await this.getTransaction();
    const { gasPerByte, gasPriceFactor, gasCosts, maxGasPerTx } = await this.provider.getGasConfig();
    const totalFee = getTotalFeeFromStatus(this.status ?? ((_a103 = this.gqlTransaction) == null ? void 0 : _a103.status));
    const gasPrice = totalFee ? bn(0) : await this.provider.getLatestGasPrice();
    const maxInputs = (await this.provider.getChain()).consensusParameters.txParameters.maxInputs;
    const baseAssetId = await this.provider.getBaseAssetId();
    const transactionSummary = assembleTransactionSummary({
      id: this.id,
      receipts: this.getReceipts(),
      transaction,
      transactionBytes,
      gqlTransactionStatus: this.status ?? ((_b2 = this.gqlTransaction) == null ? void 0 : _b2.status),
      gasPerByte,
      gasPriceFactor,
      abiMap: contractsAbiMap,
      maxInputs,
      gasCosts,
      maxGasPerTx,
      gasPrice,
      baseAssetId
    });
    return transactionSummary;
  }
  async waitForStatusChange() {
    var _a103, _b2;
    const status = (_b2 = (_a103 = this.gqlTransaction) == null ? void 0 : _a103.status) == null ? void 0 : _b2.type;
    if (status && status !== "SubmittedStatus") {
      return;
    }
    const subscription = this.submitTxSubscription ?? await this.provider.operations.statusChange({
      transactionId: this.id
    });
    for await (const sub2 of subscription) {
      const statusChange = "statusChange" in sub2 ? sub2.statusChange : sub2.submitAndAwaitStatus;
      this.status = statusChange;
      if (statusChange.type === "SqueezedOutStatus") {
        this.unsetResourceCache();
        throw new FuelError(
          ErrorCode.TRANSACTION_SQUEEZED_OUT,
          `Transaction Squeezed Out with reason: ${statusChange.reason}`
        );
      }
      if (statusChange.type !== "SubmittedStatus") {
        break;
      }
    }
  }
  /**
   * Assembles the result of a transaction by retrieving the transaction summary,
   * decoding logs (if available), and handling transaction failure.
   *
   * This method can be used to obtain the result of a transaction that has just
   * been submitted or one that has already been processed.
   *
   * @template TTransactionType - The type of the transaction.
   * @param contractsAbiMap - The map of contract ABIs.
   * @returns - The assembled transaction result.
   * @throws If the transaction status is a failure.
   */
  async assembleResult(contractsAbiMap) {
    var _a103;
    const transactionSummary = await this.getTransactionSummary(contractsAbiMap);
    const transactionResult = {
      ...transactionSummary
    };
    let { logs, groupedLogs } = { logs: [], groupedLogs: {} };
    if (this.abis) {
      ({ logs, groupedLogs } = getAllDecodedLogs({
        receipts: transactionSummary.receipts,
        mainAbi: this.abis.main,
        externalAbis: this.abis.otherContractsAbis
      }));
      transactionResult.logs = logs;
      transactionResult.groupedLogs = groupedLogs;
    }
    const { receipts } = transactionResult;
    const status = this.status ?? ((_a103 = this.gqlTransaction) == null ? void 0 : _a103.status);
    if ((status == null ? void 0 : status.type) === "FailureStatus") {
      const { reason } = status;
      throw extractTxError({
        receipts,
        statusReason: reason,
        logs,
        groupedLogs
      });
    }
    return transactionResult;
  }
  /**
   * Waits for transaction to complete and returns the result.
   *
   * @returns The completed transaction result
   */
  async waitForResult(contractsAbiMap) {
    await this.waitForStatusChange();
    this.unsetResourceCache();
    return this.assembleResult(contractsAbiMap);
  }
  /**
   * Waits for transaction to complete and returns the result.
   *
   * @param contractsAbiMap - The contracts ABI map.
   */
  async wait(contractsAbiMap) {
    return this.waitForResult(contractsAbiMap);
  }
  unsetResourceCache() {
    var _a103;
    (_a103 = this.provider.cache) == null ? void 0 : _a103.unset(this.id);
  }
}, __name11(_a68, "TransactionResponse"), _a68);
function getDecodedLogs(receipts, mainAbi, externalAbis = {}) {
  let mainContract = "";
  if (mainAbi.programType === "contract") {
    const firstCallReceipt = receipts.find(
      (r) => r.type === ReceiptType.Call && r.id === ZeroBytes32
    );
    mainContract = firstCallReceipt.to;
  }
  return receipts.reduce((logs, receipt) => {
    if (receipt.type === ReceiptType.LogData || receipt.type === ReceiptType.Log) {
      const isLogFromMainAbi = receipt.id === ZeroBytes32 || mainContract === receipt.id;
      const isDecodable = isLogFromMainAbi || externalAbis[receipt.id];
      if (isDecodable) {
        const interfaceToUse = isLogFromMainAbi ? new Interface(mainAbi) : new Interface(externalAbis[receipt.id]);
        const data = receipt.type === ReceiptType.Log ? new BigNumberCoder("u64").encode(receipt.ra) : receipt.data;
        const [decodedLog] = interfaceToUse.decodeLog(data, receipt.rb.toString());
        logs.push(decodedLog);
      }
    }
    return logs;
  }, []);
}
__name11(getDecodedLogs, "getDecodedLogs");
function getWaitDelay(options, retryAttemptNum) {
  const duration = options.baseDelay ?? 150;
  switch (options.backoff) {
    case "linear":
      return duration * retryAttemptNum;
    case "fixed":
      return duration;
    case "exponential":
    default:
      return 2 ** (retryAttemptNum - 1) * duration;
  }
}
__name11(getWaitDelay, "getWaitDelay");
function autoRetryFetch(fetchFn, options, retryAttemptNum = 0) {
  if (options === void 0) {
    return fetchFn;
  }
  return async (...args) => {
    var _a103;
    try {
      return await fetchFn(...args);
    } catch (_error) {
      const error = _error;
      if (((_a103 = error.cause) == null ? void 0 : _a103.code) !== "ECONNREFUSED") {
        throw error;
      }
      const retryNum = retryAttemptNum + 1;
      if (retryNum > options.maxRetries) {
        throw error;
      }
      const delay = getWaitDelay(options, retryNum);
      await sleep(delay);
      return autoRetryFetch(fetchFn, options, retryNum)(...args);
    }
  };
}
__name11(autoRetryFetch, "autoRetryFetch");
var adjustResourcesToExclude = __name11((params) => {
  const { userInput, cached, maxInputs } = params;
  const final = { ...userInput };
  let total = final.utxos.length + final.messages.length;
  if (total >= maxInputs) {
    return final;
  }
  final.utxos = [...final.utxos, ...cached.utxos.slice(0, maxInputs - total)];
  total = final.utxos.length + final.messages.length;
  if (total < maxInputs) {
    final.messages = [...final.messages, ...cached.messages.slice(0, maxInputs - total)];
  }
  return final;
}, "adjustResourcesToExclude");
var validatePaginationArgs = __name11((params) => {
  const { paginationLimit, inputArgs = {} } = params;
  const { first, last: last2, after, before } = inputArgs;
  if (after && before) {
    throw new FuelError(
      ErrorCode.INVALID_INPUT_PARAMETERS,
      'Pagination arguments "after" and "before" cannot be used together'
    );
  }
  if ((first || 0) > paginationLimit || (last2 || 0) > paginationLimit) {
    throw new FuelError(
      ErrorCode.INVALID_INPUT_PARAMETERS,
      `Pagination limit for this query cannot exceed ${paginationLimit} items`
    );
  }
  if (first && before) {
    throw new FuelError(
      ErrorCode.INVALID_INPUT_PARAMETERS,
      'The use of pagination argument "first" with "before" is not supported'
    );
  }
  if (last2 && after) {
    throw new FuelError(
      ErrorCode.INVALID_INPUT_PARAMETERS,
      'The use of pagination argument "last" with "after" is not supported'
    );
  }
  if (!first && !last2) {
    inputArgs.first = paginationLimit;
  }
  return inputArgs;
}, "validatePaginationArgs");
var MAX_RETRIES = 10;
var RESOURCES_PAGE_SIZE_LIMIT = 512;
var TRANSACTIONS_PAGE_SIZE_LIMIT = 60;
var BALANCES_PAGE_SIZE_LIMIT = 100;
var NON_PAGINATED_BALANCES_SIZE = 1e4;
var BLOCKS_PAGE_SIZE_LIMIT = 5;
var DEFAULT_RESOURCE_CACHE_TTL = 2e4;
var GAS_USED_MODIFIER = 1.2;
var _a69, __Provider_instances, cacheInputs_fn;
var Provider = (_a69 = class {
  /**
   * Constructor to initialize a Provider.
   *
   * @param url - GraphQL endpoint of the Fuel node
   * @param options - Additional options for the provider
   * @hidden
   */
  constructor(url, options = {}) {
    __privateAdd(this, __Provider_instances);
    __publicField(this, "operations");
    __publicField(this, "cache");
    /** @hidden */
    __publicField(this, "url");
    /** @hidden */
    __publicField(this, "urlWithoutAuth");
    /** @hidden */
    __publicField(this, "consensusParametersTimestamp");
    __publicField(this, "options", {
      timeout: void 0,
      resourceCacheTTL: void 0,
      fetch: void 0,
      retryOptions: void 0,
      headers: void 0,
      cache: void 0
    });
    const { url: rawUrl, urlWithoutAuth, headers: authHeaders } = _a69.extractBasicAuth(url);
    this.url = rawUrl;
    this.urlWithoutAuth = urlWithoutAuth;
    this.url = url;
    const { FUELS } = versions;
    const headers = { ...authHeaders, ...options.headers, Source: `ts-sdk-${FUELS}` };
    this.options = {
      ...this.options,
      ...options,
      headers
    };
    this.operations = this.createOperations();
    const { resourceCacheTTL, cache: cache2 } = this.options;
    if (cache2) {
      const { consensusParametersTimestamp, chain: chain3, nodeInfo } = deserializeProviderCache(cache2);
      this.consensusParametersTimestamp = consensusParametersTimestamp;
      _a69.chainInfoCache[this.urlWithoutAuth] = chain3;
      _a69.nodeInfoCache[this.urlWithoutAuth] = nodeInfo;
    }
    if (isDefined(resourceCacheTTL)) {
      if (resourceCacheTTL !== -1) {
        this.cache = new ResourceCache(resourceCacheTTL);
      } else {
        this.cache = void 0;
      }
    } else {
      this.cache = new ResourceCache(DEFAULT_RESOURCE_CACHE_TTL);
    }
  }
  /** @hidden */
  static clearChainAndNodeCaches() {
    _a69.inflightFetchChainAndNodeInfoRequests = {};
    _a69.nodeInfoCache = {};
    _a69.chainInfoCache = {};
  }
  /**
   * @hidden
   */
  static getFetchFn(options) {
    const { retryOptions, timeout, headers } = options;
    return autoRetryFetch(async (...args) => {
      const url = args[0];
      const request2 = args[1];
      const signal = timeout ? AbortSignal.timeout(timeout) : void 0;
      let fullRequest = {
        ...request2,
        signal,
        headers: { ...request2 == null ? void 0 : request2.headers, ...headers }
      };
      if (options.requestMiddleware) {
        fullRequest = await options.requestMiddleware(fullRequest);
      }
      return options.fetch ? options.fetch(url, fullRequest, options) : fetch(url, fullRequest);
    }, retryOptions);
  }
  static extractBasicAuth(url) {
    let parsedUrl;
    try {
      parsedUrl = new URL(url);
    } catch (error) {
      throw new FuelError(FuelError.CODES.INVALID_URL, "Invalid URL provided.", { url }, error);
    }
    const username = parsedUrl.username;
    const password = parsedUrl.password;
    const urlWithoutAuth = `${parsedUrl.origin}${parsedUrl.pathname}`;
    if (!(username && password)) {
      return { url, urlWithoutAuth: url, headers: void 0 };
    }
    return {
      url,
      urlWithoutAuth,
      headers: { Authorization: `Basic ${btoa(`${username}:${password}`)}` }
    };
  }
  /**
   * Initialize Provider async stuff
   */
  async init() {
    await this.fetchChainAndNodeInfo();
    return this;
  }
  /**
   * Returns the `chainInfo` for the current network.
   *
   * @returns the chain information configuration.
   */
  async getChain() {
    await this.init();
    return _a69.chainInfoCache[this.urlWithoutAuth];
  }
  /**
   * Returns the `nodeInfo` for the current network.
   *
   * @returns the node information configuration.
   */
  async getNode() {
    await this.init();
    return _a69.nodeInfoCache[this.urlWithoutAuth];
  }
  /**
   * Returns some helpful parameters related to gas fees.
   */
  async getGasConfig() {
    const {
      txParameters: { maxGasPerTx },
      predicateParameters: { maxGasPerPredicate },
      feeParameters: { gasPriceFactor, gasPerByte },
      gasCosts
    } = (await this.getChain()).consensusParameters;
    return {
      maxGasPerTx,
      maxGasPerPredicate,
      gasPriceFactor,
      gasPerByte,
      gasCosts
    };
  }
  /**
   * Updates the URL for the provider and fetches the consensus parameters for the new URL, if needed.
   *
   * @param url - The URL to connect to.
   * @param options - Additional options for the provider.
   */
  async connect(url, options) {
    const { url: rawUrl, urlWithoutAuth, headers } = _a69.extractBasicAuth(url);
    this.url = rawUrl;
    this.urlWithoutAuth = urlWithoutAuth;
    this.options = options ?? this.options;
    this.options = { ...this.options, headers: { ...this.options.headers, ...headers } };
    this.operations = this.createOperations();
    await this.init();
  }
  /**
   * Return the chain and node information.
   * @param ignoreCache - If true, ignores the cache and re-fetch configs.
   * @returns A promise that resolves to the Chain and NodeInfo.
   */
  async fetchChainAndNodeInfo(ignoreCache = false) {
    const nodeInfo = _a69.nodeInfoCache[this.urlWithoutAuth];
    const chain3 = _a69.chainInfoCache[this.urlWithoutAuth];
    const hasCache = nodeInfo && chain3;
    if (hasCache && !ignoreCache) {
      return { nodeInfo, chain: chain3 };
    }
    const inflightRequest = _a69.inflightFetchChainAndNodeInfoRequests[this.urlWithoutAuth];
    if (inflightRequest) {
      return inflightRequest.then((data) => {
        this.consensusParametersTimestamp = data.consensusParametersTimestamp;
        return {
          nodeInfo: _a69.nodeInfoCache[this.urlWithoutAuth],
          chain: _a69.chainInfoCache[this.urlWithoutAuth]
        };
      });
    }
    const getChainAndNodeInfoFromNetwork = this.operations.getChainAndNodeInfo().then((data) => ({
      chain: deserializeChain(data.chain),
      nodeInfo: deserializeNodeInfo(data.nodeInfo),
      consensusParametersTimestamp: Date.now()
    })).then((data) => {
      _a69.setIncompatibleNodeVersionMessage(data.nodeInfo);
      _a69.chainInfoCache[this.urlWithoutAuth] = data.chain;
      _a69.nodeInfoCache[this.urlWithoutAuth] = data.nodeInfo;
      this.consensusParametersTimestamp = data.consensusParametersTimestamp;
      return data;
    }).catch((err2) => {
      const error = new FuelError(
        FuelError.CODES.CONNECTION_REFUSED,
        "Unable to fetch chain and node info from the network",
        { url: this.urlWithoutAuth },
        err2
      );
      error.cause = { code: "ECONNREFUSED" };
      throw error;
    }).finally(() => {
      delete _a69.inflightFetchChainAndNodeInfoRequests[this.urlWithoutAuth];
    });
    _a69.inflightFetchChainAndNodeInfoRequests[this.urlWithoutAuth] = getChainAndNodeInfoFromNetwork;
    return _a69.inflightFetchChainAndNodeInfoRequests[this.urlWithoutAuth].then((data) => {
      this.consensusParametersTimestamp = data.consensusParametersTimestamp;
      return {
        nodeInfo: _a69.nodeInfoCache[this.urlWithoutAuth],
        chain: _a69.chainInfoCache[this.urlWithoutAuth]
      };
    });
  }
  /**
   * @hidden
   */
  static setIncompatibleNodeVersionMessage(nodeInfo) {
    const { isMajorSupported, isMinorSupported, supportedVersion } = checkFuelCoreVersionCompatibility(nodeInfo.nodeVersion);
    if (!isMajorSupported || !isMinorSupported) {
      _a69.incompatibleNodeVersionMessage = [
        `The Fuel Node that you are trying to connect to is using fuel-core version ${nodeInfo.nodeVersion}.`,
        `The TS SDK currently supports fuel-core version ${supportedVersion}.`,
        `Things may not work as expected.`
      ].join("\n");
      FuelGraphqlSubscriber.incompatibleNodeVersionMessage = _a69.incompatibleNodeVersionMessage;
    }
  }
  /**
   * Create GraphQL client and set operations.
   *
   * @returns The operation SDK object
   * @hidden
   */
  createOperations() {
    const fetchFn = _a69.getFetchFn(this.options);
    const gqlClient = new GraphQLClient(this.urlWithoutAuth, {
      fetch: __name11((input, requestInit) => fetchFn(input.toString(), requestInit || {}, this.options), "fetch"),
      responseMiddleware: __name11((response) => {
        if ("response" in response) {
          const graphQlResponse = response.response;
          assertGqlResponseHasNoErrors(
            graphQlResponse.errors,
            _a69.incompatibleNodeVersionMessage
          );
        }
      }, "responseMiddleware")
    });
    const executeQuery = __name11((query, vars) => {
      const opDefinition = query.definitions.find((x) => x.kind === "OperationDefinition");
      const isSubscription = (opDefinition == null ? void 0 : opDefinition.operation) === "subscription";
      if (isSubscription) {
        return FuelGraphqlSubscriber.create({
          url: this.urlWithoutAuth,
          query,
          fetchFn: __name11((url, requestInit) => fetchFn(url, requestInit, this.options), "fetchFn"),
          variables: vars
        });
      }
      return gqlClient.request(query, vars);
    }, "executeQuery");
    const customOperations = __name11((requester) => ({
      getBlobs(variables) {
        const queryParams = variables.blobIds.map((_, i) => `$blobId${i}: BlobId!`).join(", ");
        const blobParams = variables.blobIds.map((_, i) => `blob${i}: blob(id: $blobId${i}) { id }`).join("\n");
        const updatedVariables = variables.blobIds.reduce(
          (acc, blobId, i) => {
            acc[`blobId${i}`] = blobId;
            return acc;
          },
          {}
        );
        const document2 = lib_default`
          query getBlobs(${queryParams}) {
            ${blobParams}
          }
        `;
        return requester(document2, updatedVariables);
      }
    }), "customOperations");
    return { ...getSdk(executeQuery), ...customOperations(executeQuery) };
  }
  /**
   * Returns the version of the connected node.
   *
   * @returns A promise that resolves to the version string.
   */
  async getVersion() {
    const {
      nodeInfo: { nodeVersion }
    } = await this.operations.getVersion();
    return nodeVersion;
  }
  /**
   * Returns the latest block number.
   *
   * @returns A promise that resolves to the latest block number.
   */
  async getBlockNumber() {
    const {
      chain: {
        latestBlock: { height }
      }
    } = await this.operations.getLatestBlockHeight();
    return bn(height);
  }
  /**
   * Returns the node information for the current provider network.
   *
   * @returns a promise that resolves to the node information.
   */
  async fetchNode() {
    const { nodeInfo } = await this.operations.getNodeInfo();
    const processedNodeInfo = deserializeNodeInfo(nodeInfo);
    _a69.nodeInfoCache[this.urlWithoutAuth] = processedNodeInfo;
    return processedNodeInfo;
  }
  /**
   * Returns the chain information for the current provider network.
   *
   * @returns a promise that resolves to the chain information.
   */
  async fetchChain() {
    const { chain: chain3 } = await this.operations.getChain();
    const processedChain = deserializeChain(chain3);
    _a69.chainInfoCache[this.urlWithoutAuth] = processedChain;
    return processedChain;
  }
  /**
   * Returns the chain ID for the current provider network.
   *
   * @returns A promise that resolves to the chain ID number.
   */
  async getChainId() {
    const {
      consensusParameters: { chainId }
    } = await this.getChain();
    return chainId.toNumber();
  }
  /**
   * Returns the base asset ID for the current provider network.
   *
   * @returns the base asset ID.
   */
  async getBaseAssetId() {
    const all3 = await this.getChain();
    const {
      consensusParameters: { baseAssetId }
    } = all3;
    return baseAssetId;
  }
  /**
   * Retrieves the details of an asset given its ID.
   *
   * @param assetId - The unique identifier of the asset.
   * @returns A promise that resolves to an object containing the asset details.
   */
  async getAssetDetails(assetId) {
    const { assetMetadata } = await this.getNodeFeatures();
    if (!assetMetadata) {
      throw new FuelError(
        ErrorCode.UNSUPPORTED_FEATURE,
        "The current node does not supports fetching asset details"
      );
    }
    const { assetDetails } = await this.operations.getAssetDetails({ assetId });
    const { contractId, subId, totalSupply } = assetDetails;
    return {
      subId,
      contractId,
      totalSupply: bn(totalSupply)
    };
  }
  /**
   * @hidden
   */
  async validateTransaction(tx) {
    const {
      consensusParameters: {
        txParameters: { maxInputs, maxOutputs }
      }
    } = await this.getChain();
    if (bn(tx.inputs.length).gt(maxInputs)) {
      throw new FuelError(
        ErrorCode.MAX_INPUTS_EXCEEDED,
        `The transaction exceeds the maximum allowed number of inputs. Tx inputs: ${tx.inputs.length}, max inputs: ${maxInputs}`
      );
    }
    if (bn(tx.outputs.length).gt(maxOutputs)) {
      throw new FuelError(
        ErrorCode.MAX_OUTPUTS_EXCEEDED,
        `The transaction exceeds the maximum allowed number of outputs. Tx outputs: ${tx.outputs.length}, max outputs: ${maxOutputs}`
      );
    }
  }
  /**
   * Submits a transaction to the chain to be executed.
   *
   * If the transaction is missing any dependencies,
   * the transaction will be mutated and those dependencies will be added.
   *
   * @param transactionRequestLike - The transaction request object.
   * @param sendTransactionParams - The provider send transaction parameters (optional).
   * @returns A promise that resolves to the transaction response object.
   */
  async sendTransaction(transactionRequestLike, { estimateTxDependencies = true, enableAssetBurn } = {}) {
    const transactionRequest = transactionRequestify(transactionRequestLike);
    validateTransactionForAssetBurn(
      await this.getBaseAssetId(),
      transactionRequest,
      enableAssetBurn
    );
    if (estimateTxDependencies) {
      await this.estimateTxDependencies(transactionRequest);
    }
    await this.validateTransaction(transactionRequest);
    const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());
    let abis;
    if (isTransactionTypeScript(transactionRequest)) {
      abis = transactionRequest.abis;
    }
    const subscription = await this.operations.submitAndAwaitStatus({ encodedTransaction });
    __privateMethod(this, __Provider_instances, cacheInputs_fn).call(this, transactionRequest.inputs, transactionRequest.getTransactionId(await this.getChainId()));
    const chainId = await this.getChainId();
    return new TransactionResponse(transactionRequest, this, chainId, abis, subscription);
  }
  /**
   * Executes a transaction without actually submitting it to the chain.
   *
   * If the transaction is missing any dependencies,
   * the transaction will be mutated and those dependencies will be added.
   *
   * @param transactionRequestLike - The transaction request object.
   * @param sendTransactionParams - The provider call parameters (optional).
   * @returns A promise that resolves to the call result object.
   */
  async dryRun(transactionRequestLike, { utxoValidation, estimateTxDependencies = true } = {}) {
    const transactionRequest = transactionRequestify(transactionRequestLike);
    if (estimateTxDependencies) {
      return this.estimateTxDependencies(transactionRequest);
    }
    const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());
    const { dryRun: dryRunStatuses } = await this.operations.dryRun({
      encodedTransactions: encodedTransaction,
      utxoValidation: utxoValidation || false
    });
    const [{ receipts: rawReceipts, status: dryRunStatus }] = dryRunStatuses;
    const receipts = rawReceipts.map(deserializeReceipt);
    return { receipts, dryRunStatus };
  }
  /**
   * Estimates the gas usage for predicates in a transaction request.
   *
   * @template T - The type of the transaction request object.
   *
   * @param transactionRequest - The transaction request to estimate predicates for.
   * @returns A promise that resolves to the updated transaction request with estimated gas usage for predicates.
   */
  async estimatePredicates(transactionRequest) {
    const shouldEstimatePredicates = transactionRequest.inputs.some(
      (input) => isPredicate(input) && bn(input.predicateGasUsed).isZero()
    );
    if (!shouldEstimatePredicates) {
      return transactionRequest;
    }
    const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());
    const response = await this.operations.estimatePredicates({
      encodedTransaction
    });
    const { estimatePredicates } = response;
    transactionRequest = this.parseEstimatePredicatesResponse(
      transactionRequest,
      estimatePredicates
    );
    return transactionRequest;
  }
  /**
   * Estimates the gas price and predicates for a given transaction request and block horizon.
   *
   * @param transactionRequest - The transaction request to estimate predicates and gas price for.
   * @param blockHorizon - The block horizon to use for gas price estimation.
   * @returns A promise that resolves to an object containing the updated transaction
   * request and the estimated gas price.
   */
  async estimatePredicatesAndGasPrice(transactionRequest, blockHorizon) {
    const shouldEstimatePredicates = transactionRequest.inputs.some(
      (input) => isPredicate(input) && bn(input.predicateGasUsed).isZero()
    );
    if (!shouldEstimatePredicates) {
      const gasPrice2 = await this.estimateGasPrice(blockHorizon);
      return { transactionRequest, gasPrice: gasPrice2 };
    }
    const {
      estimateGasPrice: { gasPrice },
      estimatePredicates
    } = await this.operations.estimatePredicatesAndGasPrice({
      blockHorizon: String(blockHorizon),
      encodedTransaction: hexlify(transactionRequest.toTransactionBytes())
    });
    transactionRequest = this.parseEstimatePredicatesResponse(
      transactionRequest,
      estimatePredicates
    );
    return { transactionRequest, gasPrice: bn(gasPrice) };
  }
  /**
   * Will dryRun a transaction and check for missing dependencies.
   *
   * If there are missing variable outputs,
   * `addVariableOutputs` is called on the transaction.
   *
   * @param transactionRequest - The transaction request object.
   * @param gasPrice - The gas price to use for the transaction, if not provided it will be fetched.
   * @returns A promise that resolves to the estimate transaction dependencies.
   */
  async estimateTxDependencies(transactionRequest, { gasPrice: gasPriceParam } = {}) {
    if (isTransactionTypeCreate(transactionRequest)) {
      return {
        rawReceipts: [],
        receipts: [],
        outputVariables: 0,
        missingContractIds: []
      };
    }
    let rawReceipts = [];
    let receipts = [];
    const missingContractIds = [];
    let outputVariables = 0;
    let dryRunStatus;
    await this.validateTransaction(transactionRequest);
    const gasPrice = gasPriceParam ?? await this.estimateGasPrice(10);
    for (let attempt = 0; attempt < MAX_RETRIES; attempt++) {
      const {
        dryRun: [{ receipts: serializedReceipts, status }]
      } = await this.operations.dryRun({
        encodedTransactions: [hexlify(transactionRequest.toTransactionBytes())],
        utxoValidation: false,
        gasPrice: gasPrice.toString()
      });
      rawReceipts = serializedReceipts;
      receipts = serializedReceipts.map(deserializeReceipt);
      dryRunStatus = status;
      const { missingOutputVariables, missingOutputContractIds } = getReceiptsWithMissingData(receipts);
      const hasMissingOutputs = missingOutputVariables.length !== 0 || missingOutputContractIds.length !== 0;
      if (hasMissingOutputs && isTransactionTypeScript(transactionRequest)) {
        outputVariables += missingOutputVariables.length;
        transactionRequest.addVariableOutputs(missingOutputVariables.length);
        missingOutputContractIds.forEach(({ contractId }) => {
          transactionRequest.addContractInputAndOutput(new Address(contractId));
          missingContractIds.push(contractId);
        });
        const { maxFee } = await this.estimateTxGasAndFee({
          transactionRequest,
          gasPrice
        });
        transactionRequest.maxFee = maxFee;
      } else {
        break;
      }
    }
    return {
      rawReceipts,
      receipts,
      outputVariables,
      missingContractIds,
      dryRunStatus
    };
  }
  /**
   * Dry runs multiple transactions and checks for missing dependencies in batches.
   *
   * Transactions are dry run in batches. After each dry run, transactions requiring
   * further modifications are identified. The method iteratively updates these transactions
   * and performs subsequent dry runs until all dependencies for each transaction are satisfied.
   *
   * @param transactionRequests - Array of transaction request objects.
   * @returns A promise that resolves to an array of results for each transaction.
   */
  async estimateMultipleTxDependencies(transactionRequests) {
    const results = transactionRequests.map(() => ({
      rawReceipts: [],
      receipts: [],
      outputVariables: 0,
      missingContractIds: [],
      dryRunStatus: void 0
    }));
    const allRequests = clone_default(transactionRequests);
    const serializedTransactionsMap = /* @__PURE__ */ new Map();
    allRequests.forEach((req, index) => {
      if (isTransactionTypeScript(req)) {
        serializedTransactionsMap.set(index, hexlify(req.toTransactionBytes()));
      }
    });
    let transactionsToProcess = Array.from(serializedTransactionsMap.keys());
    let attempt = 0;
    while (transactionsToProcess.length > 0 && attempt < MAX_RETRIES) {
      const encodedTransactions = transactionsToProcess.map(
        (index) => serializedTransactionsMap.get(index)
      );
      const dryRunResults = await this.operations.dryRun({
        encodedTransactions,
        utxoValidation: false
      });
      const nextRoundTransactions = [];
      for (let i = 0; i < dryRunResults.dryRun.length; i++) {
        const requestIdx = transactionsToProcess[i];
        const { receipts: rawReceipts, status } = dryRunResults.dryRun[i];
        const result = results[requestIdx];
        result.receipts = rawReceipts.map(deserializeReceipt);
        result.dryRunStatus = status;
        const { missingOutputVariables, missingOutputContractIds } = getReceiptsWithMissingData(
          result.receipts
        );
        const hasMissingOutputs = missingOutputVariables.length > 0 || missingOutputContractIds.length > 0;
        const request2 = allRequests[requestIdx];
        if (hasMissingOutputs && isTransactionTypeScript(request2)) {
          result.outputVariables += missingOutputVariables.length;
          request2.addVariableOutputs(missingOutputVariables.length);
          missingOutputContractIds.forEach(({ contractId }) => {
            request2.addContractInputAndOutput(new Address(contractId));
            result.missingContractIds.push(contractId);
          });
          const { maxFee } = await this.estimateTxGasAndFee({
            transactionRequest: request2
          });
          request2.maxFee = maxFee;
          serializedTransactionsMap.set(requestIdx, hexlify(request2.toTransactionBytes()));
          nextRoundTransactions.push(requestIdx);
        }
      }
      transactionsToProcess = nextRoundTransactions;
      attempt += 1;
    }
    return results;
  }
  /**
   * Dry runs multiple transactions.
   *
   * @param transactionRequests - Array of transaction request objects.
   * @param sendTransactionParams - The provider call parameters (optional).
   *
   * @returns A promise that resolves to an array of results for each transaction call.
   */
  async dryRunMultipleTransactions(transactionRequests, { utxoValidation, estimateTxDependencies = true } = {}) {
    if (estimateTxDependencies) {
      return this.estimateMultipleTxDependencies(transactionRequests);
    }
    const encodedTransactions = transactionRequests.map((tx) => hexlify(tx.toTransactionBytes()));
    const { dryRun: dryRunStatuses } = await this.operations.dryRun({
      encodedTransactions,
      utxoValidation: utxoValidation || false
    });
    const results = dryRunStatuses.map(({ receipts: rawReceipts, status }) => {
      const receipts = rawReceipts.map(deserializeReceipt);
      return { receipts, dryRunStatus: status };
    });
    return results;
  }
  async autoRefetchConfigs() {
    var _a103;
    const now = Date.now();
    const diff = now - (this.consensusParametersTimestamp ?? 0);
    if (diff < 6e4) {
      return;
    }
    if (!((_a103 = _a69.chainInfoCache) == null ? void 0 : _a103[this.urlWithoutAuth])) {
      await this.fetchChainAndNodeInfo(true);
      return;
    }
    const chainInfo = _a69.chainInfoCache[this.urlWithoutAuth];
    const {
      consensusParameters: { version: previous }
    } = chainInfo;
    const {
      chain: {
        latestBlock: {
          header: { consensusParametersVersion: current }
        }
      }
    } = await this.operations.getConsensusParametersVersion();
    if (previous !== current) {
      await this.fetchChainAndNodeInfo(true);
    }
  }
  /**
   * Estimates the transaction gas and fee based on the provided transaction request.
   * @param params - The parameters for estimating the transaction gas and fee.
   * @returns An object containing the estimated minimum gas, minimum fee, maximum gas, and maximum fee.
   */
  async estimateTxGasAndFee(params) {
    const { transactionRequest, gasPrice: gasPriceParam } = params;
    let gasPrice = gasPriceParam;
    await this.autoRefetchConfigs();
    const chainInfo = await this.getChain();
    const { gasPriceFactor, maxGasPerTx } = await this.getGasConfig();
    const minGas = transactionRequest.calculateMinGas(chainInfo);
    if (!isDefined(gasPrice)) {
      gasPrice = await this.estimateGasPrice(10);
    }
    const minFee = calculateGasFee({
      gasPrice: bn(gasPrice),
      gas: minGas,
      priceFactor: gasPriceFactor,
      tip: transactionRequest.tip
    }).add(1);
    let gasLimit = bn(0);
    if (isTransactionTypeScript(transactionRequest)) {
      gasLimit = transactionRequest.gasLimit;
      if (transactionRequest.gasLimit.eq(0)) {
        transactionRequest.gasLimit = minGas;
        transactionRequest.gasLimit = maxGasPerTx.sub(
          transactionRequest.calculateMaxGas(chainInfo, minGas)
        );
        gasLimit = transactionRequest.gasLimit;
      }
    }
    const maxGas = transactionRequest.calculateMaxGas(chainInfo, minGas);
    const maxFee = calculateGasFee({
      gasPrice: bn(gasPrice),
      gas: maxGas,
      priceFactor: gasPriceFactor,
      tip: transactionRequest.tip
    }).add(1);
    return {
      minGas,
      minFee,
      maxGas,
      maxFee,
      gasPrice,
      gasLimit
    };
  }
  /**
   * Executes a signed transaction without applying the states changes
   * on the chain.
   *
   * If the transaction is missing any dependencies,
   * the transaction will be mutated and those dependencies will be added
   *
   * @param transactionRequestLike - The transaction request object.
   * @param estimateTxParams - The estimate transaction params (optional).
   * @returns A promise that resolves to the call result object.
   */
  async simulate(transactionRequestLike, { estimateTxDependencies = true } = {}) {
    const transactionRequest = transactionRequestify(transactionRequestLike);
    if (estimateTxDependencies) {
      return this.estimateTxDependencies(transactionRequest);
    }
    const encodedTransactions = [hexlify(transactionRequest.toTransactionBytes())];
    const { dryRun: dryRunStatuses } = await this.operations.dryRun({
      encodedTransactions,
      utxoValidation: true
    });
    const callResult = dryRunStatuses.map((dryRunStatus) => {
      const { id, receipts, status } = dryRunStatus;
      const processedReceipts = receipts.map(deserializeReceipt);
      return { id, receipts: processedReceipts, status };
    });
    return { receipts: callResult[0].receipts };
  }
  /**
   * @hidden
   *
   * Returns a transaction cost to enable user
   * to set gasLimit and also reserve balance amounts
   * on the transaction.
   *
   * @param transactionRequestLike - The transaction request object.
   * @param transactionCostParams - The transaction cost parameters (optional).
   *
   * @returns A promise that resolves to the transaction cost object.
   */
  async getTransactionCost(transactionRequestLike, { signatureCallback, gasPrice: gasPriceParam } = {}) {
    const txRequestClone = clone_default(transactionRequestify(transactionRequestLike));
    const updateMaxFee = txRequestClone.maxFee.eq(0);
    const isScriptTransaction = isTransactionTypeScript(txRequestClone);
    if (isScriptTransaction) {
      txRequestClone.gasLimit = bn(0);
    }
    const signedRequest = clone_default(txRequestClone);
    let addedSignatures = 0;
    if (signatureCallback && isTransactionTypeScript(signedRequest)) {
      const lengthBefore = signedRequest.witnesses.length;
      await signatureCallback(signedRequest);
      addedSignatures = signedRequest.witnesses.length - lengthBefore;
    }
    let gasPrice;
    if (gasPriceParam) {
      gasPrice = gasPriceParam;
      await this.estimatePredicates(signedRequest);
    } else {
      ({ gasPrice } = await this.estimatePredicatesAndGasPrice(signedRequest, 10));
    }
    txRequestClone.updatePredicateGasUsed(signedRequest.inputs);
    let { maxFee, maxGas, minFee, minGas, gasLimit } = await this.estimateTxGasAndFee({
      // Fetches and returns a gas price
      transactionRequest: signedRequest,
      gasPrice
    });
    let rawReceipts = [];
    let receipts = [];
    let dryRunStatus;
    let missingContractIds = [];
    let outputVariables = 0;
    let gasUsed = bn(0);
    txRequestClone.maxFee = maxFee;
    if (isScriptTransaction) {
      txRequestClone.gasLimit = gasLimit;
      if (signatureCallback) {
        await signatureCallback(txRequestClone);
      }
      ({ rawReceipts, receipts, missingContractIds, outputVariables, dryRunStatus } = await this.estimateTxDependencies(txRequestClone, { gasPrice }));
      if (dryRunStatus && "reason" in dryRunStatus) {
        throw this.extractDryRunError(txRequestClone, receipts, dryRunStatus);
      }
      const { maxGasPerTx } = await this.getGasConfig();
      const pristineGasUsed = getGasUsedFromReceipts(receipts);
      gasUsed = bn(pristineGasUsed.muln(GAS_USED_MODIFIER)).max(maxGasPerTx.sub(minGas));
      txRequestClone.gasLimit = gasUsed;
      ({ maxFee, maxGas, minFee, minGas } = await this.estimateTxGasAndFee({
        transactionRequest: txRequestClone,
        gasPrice
      }));
    }
    const transactionSummary = {
      gasPrice: gasPrice.toString(),
      receipts: rawReceipts
    };
    return {
      rawReceipts,
      receipts,
      gasUsed,
      gasPrice,
      minGas,
      maxGas,
      minFee,
      maxFee,
      outputVariables,
      missingContractIds,
      addedSignatures,
      estimatedPredicates: txRequestClone.inputs,
      dryRunStatus,
      updateMaxFee,
      transactionSummary
    };
  }
  /**
   * Returns coins for the given owner.
   *
   * @param owner - The address to get coins for.
   * @param assetId - The asset ID of coins to get (optional).
   * @param paginationArgs - Pagination arguments (optional).
   *
   * @returns A promise that resolves to the coins.
   */
  async getCoins(owner, assetId, paginationArgs) {
    const ownerAddress = new Address(owner);
    const {
      coins: { edges, pageInfo }
    } = await this.operations.getCoins({
      ...validatePaginationArgs({
        paginationLimit: RESOURCES_PAGE_SIZE_LIMIT,
        inputArgs: paginationArgs
      }),
      filter: { owner: ownerAddress.toB256(), assetId: assetId && hexlify(assetId) }
    });
    const coins = edges.map(({ node }) => ({
      id: node.utxoId,
      assetId: node.assetId,
      amount: bn(node.amount),
      owner: ownerAddress,
      blockCreated: bn(node.blockCreated),
      txCreatedIdx: bn(node.txCreatedIdx)
    }));
    return {
      coins,
      pageInfo
    };
  }
  /**
   * Returns resources for the given owner satisfying the spend query.
   *
   * @param owner - The address to get resources for.
   * @param quantities - The coin quantities to get.
   * @param excludedIds - IDs of excluded resources from the selection (optional).
   * @returns A promise that resolves to the resources.
   */
  async getResourcesToSpend(owner, quantities, excludedIds) {
    var _a103, _b2;
    const ownerAddress = new Address(owner);
    let idsToExclude = {
      messages: ((_a103 = excludedIds == null ? void 0 : excludedIds.messages) == null ? void 0 : _a103.map((nonce) => hexlify(nonce))) || [],
      utxos: ((_b2 = excludedIds == null ? void 0 : excludedIds.utxos) == null ? void 0 : _b2.map((id) => hexlify(id))) || []
    };
    if (this.cache) {
      const cached = this.cache.getActiveData(ownerAddress.toB256());
      if (cached.utxos.length || cached.messages.length) {
        const {
          consensusParameters: {
            txParameters: { maxInputs }
          }
        } = await this.getChain();
        idsToExclude = adjustResourcesToExclude({
          userInput: idsToExclude,
          cached,
          maxInputs: maxInputs.toNumber()
        });
      }
    }
    const coinsQuery = {
      owner: ownerAddress.toB256(),
      queryPerAsset: quantities.map(coinQuantityfy).map(({ assetId, amount, max: maxPerAsset }) => ({
        assetId: hexlify(assetId),
        amount: (amount.eqn(0) ? bn(1) : amount).toString(10),
        max: maxPerAsset ? maxPerAsset.toString(10) : void 0
      })),
      excludedIds: idsToExclude
    };
    const result = await this.operations.getCoinsToSpend(coinsQuery);
    const coins = result.coinsToSpend.flat().map((coin) => {
      switch (coin.type) {
        case "MessageCoin":
          return {
            amount: bn(coin.amount),
            assetId: coin.assetId,
            daHeight: bn(coin.daHeight),
            sender: new Address(coin.sender),
            recipient: new Address(coin.recipient),
            nonce: coin.nonce
          };
        case "Coin":
          return {
            id: coin.utxoId,
            amount: bn(coin.amount),
            assetId: coin.assetId,
            owner: ownerAddress,
            blockCreated: bn(coin.blockCreated),
            txCreatedIdx: bn(coin.txCreatedIdx)
          };
        default:
          return null;
      }
    }).filter((v) => !!v);
    return coins;
  }
  /**
   * Returns an array of blobIds that exist on chain, for a given array of blobIds.
   *
   * @param blobIds - blobIds to check.
   * @returns - A promise that resolves to an array of blobIds that exist on chain.
   */
  async getBlobs(blobIds) {
    const res = await this.operations.getBlobs({ blobIds });
    const blobs = [];
    Object.keys(res).forEach((key) => {
      const val = res[key];
      blobs.push((val == null ? void 0 : val.id) ?? null);
    });
    return blobs.filter((v) => v);
  }
  /**
   * Returns block matching the given ID or height.
   *
   * @param idOrHeight - ID or height of the block.
   * @returns A promise that resolves to the block or null.
   */
  async getBlock(idOrHeight) {
    let block2;
    if (idOrHeight === "latest") {
      const {
        chain: { latestBlock }
      } = await this.operations.getLatestBlock();
      block2 = latestBlock;
    } else {
      const isblockId = typeof idOrHeight === "string" && isB256(idOrHeight);
      const variables = isblockId ? { blockId: idOrHeight } : { height: bn(idOrHeight).toString(10) };
      const response = await this.operations.getBlock(variables);
      block2 = response.block;
    }
    if (!block2) {
      return null;
    }
    const { header, height, id, transactions } = block2;
    return {
      id,
      height: bn(height),
      time: header.time,
      header: {
        applicationHash: header.applicationHash,
        daHeight: bn(header.daHeight),
        eventInboxRoot: header.eventInboxRoot,
        messageOutboxRoot: header.messageOutboxRoot,
        prevRoot: header.prevRoot,
        stateTransitionBytecodeVersion: header.stateTransitionBytecodeVersion,
        transactionsCount: header.transactionsCount,
        transactionsRoot: header.transactionsRoot
      },
      transactionIds: transactions.map((tx) => tx.id)
    };
  }
  /**
   * Returns all the blocks matching the given parameters.
   *
   * @param params - The parameters to query blocks.
   * @returns A promise that resolves to the blocks.
   */
  async getBlocks(params) {
    const {
      blocks: { edges, pageInfo }
    } = await this.operations.getBlocks({
      ...validatePaginationArgs({
        paginationLimit: BLOCKS_PAGE_SIZE_LIMIT,
        inputArgs: params
      })
    });
    const blocks = edges.map(({ node: block2 }) => ({
      id: block2.id,
      height: bn(block2.height),
      time: block2.header.time,
      header: {
        applicationHash: block2.header.applicationHash,
        daHeight: bn(block2.header.daHeight),
        eventInboxRoot: block2.header.eventInboxRoot,
        messageOutboxRoot: block2.header.messageOutboxRoot,
        prevRoot: block2.header.prevRoot,
        stateTransitionBytecodeVersion: block2.header.stateTransitionBytecodeVersion,
        transactionsCount: block2.header.transactionsCount,
        transactionsRoot: block2.header.transactionsRoot
      },
      transactionIds: block2.transactions.map((tx) => tx.id)
    }));
    return { blocks, pageInfo };
  }
  /**
   * Returns block matching the given ID or type, including transaction data.
   *
   * @param idOrHeight - ID or height of the block.
   * @returns A promise that resolves to the block.
   */
  async getBlockWithTransactions(idOrHeight) {
    let variables;
    if (typeof idOrHeight === "number") {
      variables = { blockHeight: bn(idOrHeight).toString(10) };
    } else if (idOrHeight === "latest") {
      variables = { blockHeight: (await this.getBlockNumber()).toString() };
    } else if (typeof idOrHeight === "string" && isB256(idOrHeight)) {
      variables = { blockId: idOrHeight };
    } else {
      variables = { blockHeight: bn(idOrHeight).toString() };
    }
    const { block: block2 } = await this.operations.getBlockWithTransactions(variables);
    if (!block2) {
      return null;
    }
    return {
      id: block2.id,
      height: bn(block2.height, 10),
      time: block2.header.time,
      header: {
        applicationHash: block2.header.applicationHash,
        daHeight: bn(block2.header.daHeight),
        eventInboxRoot: block2.header.eventInboxRoot,
        messageOutboxRoot: block2.header.messageOutboxRoot,
        prevRoot: block2.header.prevRoot,
        stateTransitionBytecodeVersion: block2.header.stateTransitionBytecodeVersion,
        transactionsCount: block2.header.transactionsCount,
        transactionsRoot: block2.header.transactionsRoot
      },
      transactionIds: block2.transactions.map((tx) => tx.id),
      transactions: block2.transactions.map(
        (tx) => {
          var _a103;
          return (_a103 = new TransactionCoder().decode(arrayify(tx.rawPayload), 0)) == null ? void 0 : _a103[0];
        }
      )
    };
  }
  /**
   * Get transaction with the given ID.
   *
   * @param transactionId - ID of the transaction.
   * @returns A promise that resolves to the transaction.
   */
  async getTransaction(transactionId) {
    var _a103;
    const { transaction } = await this.operations.getTransaction({ transactionId });
    if (!transaction) {
      return null;
    }
    try {
      return (_a103 = new TransactionCoder().decode(
        arrayify(transaction.rawPayload),
        0
      )) == null ? void 0 : _a103[0];
    } catch (error) {
      if (error instanceof FuelError && error.code === ErrorCode.UNSUPPORTED_TRANSACTION_TYPE) {
        console.warn("Unsupported transaction type encountered");
        return null;
      }
      throw error;
    }
  }
  /**
   * Retrieves transactions based on the provided pagination arguments.
   * @param paginationArgs - The pagination arguments for retrieving transactions.
   * @returns A promise that resolves to an object containing the retrieved transactions and pagination information.
   */
  async getTransactions(paginationArgs) {
    const {
      transactions: { edges, pageInfo }
    } = await this.operations.getTransactions({
      ...validatePaginationArgs({
        inputArgs: paginationArgs,
        paginationLimit: TRANSACTIONS_PAGE_SIZE_LIMIT
      })
    });
    const coder = new TransactionCoder();
    const transactions = edges.map(({ node: { rawPayload } }) => {
      try {
        return coder.decode(arrayify(rawPayload), 0)[0];
      } catch (error) {
        if (error instanceof FuelError && error.code === ErrorCode.UNSUPPORTED_TRANSACTION_TYPE) {
          console.warn("Unsupported transaction type encountered");
          return null;
        }
        throw error;
      }
    }).filter((tx) => tx !== null);
    return { transactions, pageInfo };
  }
  /**
   * Fetches a compressed block at the specified height.
   *
   * @param height - The height of the block to fetch.
   * @returns The compressed block if available, otherwise `null`.
   */
  async daCompressedBlock(height) {
    const { daCompressedBlock } = await this.operations.daCompressedBlock({
      height
    });
    if (!daCompressedBlock) {
      return null;
    }
    return daCompressedBlock;
  }
  /**
   * Get deployed contract with the given ID.
   *
   * @param contractId - ID of the contract.
   * @returns A promise that resolves to the contract.
   */
  async getContract(contractId) {
    const { contract } = await this.operations.getContract({ contractId });
    if (!contract) {
      return null;
    }
    return contract;
  }
  /**
   * Returns the balance for the given contract for the given asset ID.
   *
   * @param contractId - The contract ID to get the balance for.
   * @param assetId - The asset ID of coins to get.
   * @returns A promise that resolves to the balance.
   */
  async getContractBalance(contractId, assetId) {
    const { contractBalance } = await this.operations.getContractBalance({
      contract: new Address(contractId).toB256(),
      asset: hexlify(assetId)
    });
    return bn(contractBalance.amount, 10);
  }
  /**
   * Returns the balance for the given owner for the given asset ID.
   *
   * @param owner - The address to get coins for.
   * @param assetId - The asset ID of coins to get.
   * @returns A promise that resolves to the balance.
   */
  async getBalance(owner, assetId) {
    const { balance } = await this.operations.getBalanceV2({
      owner: new Address(owner).toB256(),
      assetId: hexlify(assetId)
    });
    return bn(balance.amountU128, 10);
  }
  /**
   * Returns balances for the given owner.
   *
   * @param owner - The address to get coins for.
   * @param paginationArgs - Pagination arguments (optional).
   * @returns A promise that resolves to the balances.
   */
  async getBalances(owner, paginationArgs) {
    let args = { first: NON_PAGINATED_BALANCES_SIZE };
    const { balancesPagination: supportsPagination } = await this.getNodeFeatures();
    if (supportsPagination) {
      args = validatePaginationArgs({
        inputArgs: paginationArgs,
        paginationLimit: BALANCES_PAGE_SIZE_LIMIT
      });
    }
    const {
      balances: { edges, pageInfo }
    } = await this.operations.getBalancesV2({
      ...args,
      filter: { owner: new Address(owner).toB256() },
      supportsPagination
    });
    const balances = edges.map(({ node }) => ({
      assetId: node.assetId,
      amount: bn(node.amountU128)
    }));
    return {
      balances,
      ...supportsPagination ? { pageInfo } : {}
    };
  }
  /**
   * Returns message for the given address.
   *
   * @param address - The address to get message from.
   * @param paginationArgs - Pagination arguments (optional).
   * @returns A promise that resolves to the messages.
   */
  async getMessages(address, paginationArgs) {
    const {
      messages: { edges, pageInfo }
    } = await this.operations.getMessages({
      ...validatePaginationArgs({
        inputArgs: paginationArgs,
        paginationLimit: RESOURCES_PAGE_SIZE_LIMIT
      }),
      owner: new Address(address).toB256()
    });
    const messages = edges.map(({ node }) => ({
      messageId: InputMessageCoder.getMessageId({
        sender: node.sender,
        recipient: node.recipient,
        nonce: node.nonce,
        amount: bn(node.amount),
        data: node.data
      }),
      sender: new Address(node.sender),
      recipient: new Address(node.recipient),
      nonce: node.nonce,
      amount: bn(node.amount),
      data: InputMessageCoder.decodeData(node.data),
      daHeight: bn(node.daHeight)
    }));
    return {
      messages,
      pageInfo
    };
  }
  /**
   * Returns Message Proof for given transaction id and the message id from MessageOut receipt.
   *
   * @param transactionId - The transaction to get message from.
   * @param messageId - The message id from MessageOut receipt.
   * @param commitBlockId - The commit block id (optional).
   * @param commitBlockHeight - The commit block height (optional).
   * @returns A promise that resolves to the message proof.
   */
  async getMessageProof(transactionId, nonce, commitBlockId, commitBlockHeight) {
    let inputObject = {
      transactionId,
      nonce
    };
    if (commitBlockId && commitBlockHeight) {
      throw new FuelError(
        ErrorCode.INVALID_INPUT_PARAMETERS,
        "commitBlockId and commitBlockHeight cannot be used together"
      );
    }
    if (commitBlockId) {
      inputObject = {
        ...inputObject,
        commitBlockId
      };
    }
    if (commitBlockHeight) {
      inputObject = {
        ...inputObject,
        // Convert BN into a number string required on the query
        // This should probably be fixed on the fuel client side
        commitBlockHeight: commitBlockHeight.toNumber().toString()
      };
    }
    const result = await this.operations.getMessageProof(inputObject);
    const {
      messageProof,
      messageBlockHeader,
      commitBlockHeader,
      blockProof,
      sender,
      recipient,
      amount,
      data
    } = result.messageProof;
    return {
      messageProof: {
        proofIndex: bn(messageProof.proofIndex),
        proofSet: messageProof.proofSet
      },
      blockProof: {
        proofIndex: bn(blockProof.proofIndex),
        proofSet: blockProof.proofSet
      },
      messageBlockHeader: {
        id: messageBlockHeader.id,
        daHeight: bn(messageBlockHeader.daHeight),
        transactionsCount: Number(messageBlockHeader.transactionsCount),
        transactionsRoot: messageBlockHeader.transactionsRoot,
        height: bn(messageBlockHeader.height),
        prevRoot: messageBlockHeader.prevRoot,
        time: messageBlockHeader.time,
        applicationHash: messageBlockHeader.applicationHash,
        messageReceiptCount: Number(messageBlockHeader.messageReceiptCount),
        messageOutboxRoot: messageBlockHeader.messageOutboxRoot,
        consensusParametersVersion: Number(messageBlockHeader.consensusParametersVersion),
        eventInboxRoot: messageBlockHeader.eventInboxRoot,
        stateTransitionBytecodeVersion: Number(messageBlockHeader.stateTransitionBytecodeVersion)
      },
      commitBlockHeader: {
        id: commitBlockHeader.id,
        daHeight: bn(commitBlockHeader.daHeight),
        transactionsCount: Number(commitBlockHeader.transactionsCount),
        transactionsRoot: commitBlockHeader.transactionsRoot,
        height: bn(commitBlockHeader.height),
        prevRoot: commitBlockHeader.prevRoot,
        time: commitBlockHeader.time,
        applicationHash: commitBlockHeader.applicationHash,
        messageReceiptCount: Number(commitBlockHeader.messageReceiptCount),
        messageOutboxRoot: commitBlockHeader.messageOutboxRoot,
        consensusParametersVersion: Number(commitBlockHeader.consensusParametersVersion),
        eventInboxRoot: commitBlockHeader.eventInboxRoot,
        stateTransitionBytecodeVersion: Number(commitBlockHeader.stateTransitionBytecodeVersion)
      },
      sender: new Address(sender),
      recipient: new Address(recipient),
      nonce,
      amount: bn(amount),
      data
    };
  }
  /**
   * Get the latest gas price from the node.
   *
   * @returns A promise that resolves to the latest gas price.
   */
  async getLatestGasPrice() {
    const { latestGasPrice } = await this.operations.getLatestGasPrice();
    return bn(latestGasPrice.gasPrice);
  }
  /**
   * Returns the estimate gas price for the given block horizon.
   *
   * @param blockHorizon - The block horizon to estimate gas price for.
   * @returns A promise that resolves to the estimated gas price.
   */
  async estimateGasPrice(blockHorizon) {
    const { estimateGasPrice } = await this.operations.estimateGasPrice({
      blockHorizon: String(blockHorizon)
    });
    return bn(estimateGasPrice.gasPrice);
  }
  /**
   * Returns Message Proof for given transaction id and the message id from MessageOut receipt.
   *
   * @param nonce - The nonce of the message to get status from.
   * @returns A promise that resolves to the message status
   */
  async getMessageStatus(nonce) {
    const result = await this.operations.getMessageStatus({ nonce });
    return result.messageStatus;
  }
  /**
   * Lets you produce blocks with custom timestamps and the block number of the last block produced.
   *
   * @param amount - The amount of blocks to produce.
   * @param startTime - The UNIX timestamp (milliseconds) to set for the first produced block (optional).
   * @returns A promise that resolves to the block number of the last produced block.
   */
  async produceBlocks(amount, startTime) {
    const { produceBlocks: latestBlockHeight } = await this.operations.produceBlocks({
      blocksToProduce: bn(amount).toString(10),
      startTimestamp: startTime ? DateTime.fromUnixMilliseconds(startTime).toTai64() : void 0
    });
    return bn(latestBlockHeight);
  }
  /**
   * Check if the given ID is an account.
   *
   * @param id - The ID to check.
   * @returns A promise that resolves to the result of the check.
   */
  async isUserAccount(id) {
    const type3 = await this.getAddressType(id);
    return type3 === "Account";
  }
  /**
   * Determines the type of address based on the provided ID.
   *
   * @param id - The ID to be checked.
   * @returns A promise that resolves to a string indicating the type of address.
   */
  async getAddressType(id) {
    const { contract, blob, transaction } = await this.operations.isUserAccount({
      blobId: id,
      contractId: id,
      transactionId: id
    });
    if (contract) {
      return "Contract";
    }
    if (blob) {
      return "Blob";
    }
    if (transaction) {
      return "Transaction";
    }
    try {
      const asset = await this.getAssetDetails(id);
      if (asset) {
        return "Asset";
      }
    } catch (e) {
    }
    return "Account";
  }
  /**
   * Get the transaction response for the given transaction ID.
   *
   * @param transactionId - The transaction ID to get the response for.
   * @returns A promise that resolves to the transaction response.
   */
  async getTransactionResponse(transactionId) {
    const chainId = await this.getChainId();
    return new TransactionResponse(transactionId, this, chainId);
  }
  /**
   * Returns Message for given nonce.
   *
   * @param nonce - The nonce of the message to retrieve.
   * @returns A promise that resolves to the Message object or null.
   */
  async getMessageByNonce(nonce) {
    const { message: rawMessage } = await this.operations.getMessageByNonce({ nonce });
    if (!rawMessage) {
      return null;
    }
    const message = {
      messageId: InputMessageCoder.getMessageId({
        sender: rawMessage.sender,
        recipient: rawMessage.recipient,
        nonce,
        amount: bn(rawMessage.amount),
        data: rawMessage.data
      }),
      sender: new Address(rawMessage.sender),
      recipient: new Address(rawMessage.recipient),
      nonce,
      amount: bn(rawMessage.amount),
      data: InputMessageCoder.decodeData(rawMessage.data),
      daHeight: bn(rawMessage.daHeight)
    };
    return message;
  }
  /**
   * Get the relayed transaction for the given transaction ID.
   *
   * @param relayedTransactionId - The relayed transaction ID to get the response for.
   * @returns A promise that resolves to the relayed transaction.
   */
  async getRelayedTransactionStatus(relayedTransactionId) {
    const { relayedTransactionStatus } = await this.operations.getRelayedTransactionStatus({
      relayedTransactionId
    });
    if (!relayedTransactionStatus) {
      return null;
    }
    return relayedTransactionStatus;
  }
  /**
   * @hidden
   */
  extractDryRunError(transactionRequest, receipts, dryRunStatus) {
    const status = dryRunStatus;
    let logs = [];
    let groupedLogs = {};
    if (transactionRequest.abis) {
      ({ logs, groupedLogs } = getAllDecodedLogs({
        receipts,
        mainAbi: transactionRequest.abis.main,
        externalAbis: transactionRequest.abis.otherContractsAbis
      }));
    }
    return extractTxError({
      logs,
      groupedLogs,
      receipts,
      statusReason: status.reason
    });
  }
  /**
   * @hidden
   */
  async getNodeFeatures() {
    const { indexation } = await this.getNode();
    return {
      assetMetadata: Boolean(indexation == null ? void 0 : indexation.assetMetadata),
      balancesPagination: Boolean(indexation == null ? void 0 : indexation.balances),
      coinsToSpend: Boolean(indexation == null ? void 0 : indexation.coinsToSpend)
    };
  }
  /**
   * @hidden
   */
  parseEstimatePredicatesResponse(transactionRequest, { inputs }) {
    if (inputs) {
      inputs.forEach((input, i) => {
        if (input && "predicateGasUsed" in input && bn(input.predicateGasUsed).gt(0)) {
          transactionRequest.inputs[i].predicateGasUsed = input.predicateGasUsed;
        }
      });
    }
    return transactionRequest;
  }
}, __Provider_instances = new WeakSet(), /**
 * @hidden
 */
cacheInputs_fn = function(inputs, transactionId) {
  if (!this.cache) {
    return;
  }
  this.cache.set(transactionId, inputs);
}, __name11(_a69, "Provider"), /** @hidden */
__publicField(_a69, "inflightFetchChainAndNodeInfoRequests", {}), /** @hidden */
__publicField(_a69, "chainInfoCache", {}), /** @hidden */
__publicField(_a69, "nodeInfoCache", {}), /** @hidden */
__publicField(_a69, "incompatibleNodeVersionMessage", ""), _a69);
async function getTransactionSummary(params) {
  const { id, provider, abiMap } = params;
  const { transaction: gqlTransaction } = await provider.operations.getTransactionWithReceipts({
    transactionId: id
  });
  if (!gqlTransaction) {
    throw new FuelError(
      ErrorCode.TRANSACTION_NOT_FOUND,
      `Transaction not found for given id: ${id}.`
    );
  }
  const [decodedTransaction] = new TransactionCoder().decode(
    arrayify(gqlTransaction.rawPayload),
    0
  );
  let txReceipts = [];
  if ((gqlTransaction == null ? void 0 : gqlTransaction.status) && "receipts" in gqlTransaction.status) {
    txReceipts = gqlTransaction.status.receipts;
  }
  const receipts = txReceipts.map(deserializeReceipt);
  const {
    consensusParameters: {
      feeParameters: { gasPerByte, gasPriceFactor },
      txParameters: { maxInputs, maxGasPerTx },
      gasCosts
    }
  } = await provider.getChain();
  const totalFee = getTotalFeeFromStatus(gqlTransaction.status);
  const gasPrice = totalFee ? bn(0) : await provider.getLatestGasPrice();
  const baseAssetId = await provider.getBaseAssetId();
  const transactionInfo = assembleTransactionSummary({
    id: gqlTransaction.id,
    receipts,
    transaction: decodedTransaction,
    transactionBytes: arrayify(gqlTransaction.rawPayload),
    gqlTransactionStatus: gqlTransaction.status,
    gasPerByte: bn(gasPerByte),
    gasPriceFactor: bn(gasPriceFactor),
    abiMap,
    maxInputs,
    gasCosts,
    maxGasPerTx,
    gasPrice,
    baseAssetId
  });
  return {
    ...transactionInfo
  };
}
__name11(getTransactionSummary, "getTransactionSummary");
async function getTransactionSummaryFromRequest(params) {
  const { provider, transactionRequest, abiMap } = params;
  const { receipts } = await provider.dryRun(transactionRequest);
  const { gasPerByte, gasPriceFactor, gasCosts, maxGasPerTx } = await provider.getGasConfig();
  const maxInputs = (await provider.getChain()).consensusParameters.txParameters.maxInputs;
  const transaction = transactionRequest.toTransaction();
  const transactionBytes = transactionRequest.toTransactionBytes();
  const gasPrice = await provider.getLatestGasPrice();
  const baseAssetId = await provider.getBaseAssetId();
  const transactionSummary = assembleTransactionSummary({
    id: transactionRequest.getTransactionId(await provider.getChainId()),
    receipts,
    transaction,
    transactionBytes,
    abiMap,
    gasPerByte,
    gasPriceFactor,
    maxInputs,
    gasCosts,
    maxGasPerTx,
    gasPrice,
    baseAssetId
  });
  return transactionSummary;
}
__name11(getTransactionSummaryFromRequest, "getTransactionSummaryFromRequest");
async function getTransactionsSummaries(params) {
  const { filters, provider, abiMap } = params;
  const { owner, ...inputArgs } = filters;
  const validPaginationParams = validatePaginationArgs({
    inputArgs,
    paginationLimit: TRANSACTIONS_PAGE_SIZE_LIMIT
  });
  const { transactionsByOwner } = await provider.operations.getTransactionsByOwner({
    ...validPaginationParams,
    owner
  });
  const { edges, pageInfo } = transactionsByOwner;
  const {
    consensusParameters: {
      feeParameters: { gasPerByte, gasPriceFactor },
      txParameters: { maxInputs, maxGasPerTx },
      gasCosts
    }
  } = await provider.getChain();
  const gasPrice = await provider.getLatestGasPrice();
  const baseAssetId = await provider.getBaseAssetId();
  const transactions = edges.map((edge) => {
    const { node: gqlTransaction } = edge;
    const { id, rawPayload, status } = gqlTransaction;
    const [decodedTransaction] = new TransactionCoder().decode(arrayify(rawPayload), 0);
    let txReceipts = [];
    if ((gqlTransaction == null ? void 0 : gqlTransaction.status) && "receipts" in gqlTransaction.status) {
      txReceipts = gqlTransaction.status.receipts;
    }
    const receipts = txReceipts.map(deserializeReceipt);
    const transactionSummary = assembleTransactionSummary({
      id,
      receipts,
      transaction: decodedTransaction,
      transactionBytes: arrayify(rawPayload),
      gqlTransactionStatus: status,
      abiMap,
      gasPerByte,
      gasPriceFactor,
      maxInputs,
      gasCosts,
      maxGasPerTx,
      gasPrice,
      baseAssetId
    });
    const output = {
      ...transactionSummary
    };
    return output;
  });
  return {
    transactions,
    pageInfo
  };
}
__name11(getTransactionsSummaries, "getTransactionsSummaries");
var assembleTransactionSummaryFromJson = __name11(async (opts) => {
  const { provider, transactionSummary } = opts;
  const { id, transactionBytes, gasPrice, receipts } = transactionSummary;
  const {
    consensusParameters: {
      baseAssetId,
      txParameters: { maxInputs, maxGasPerTx },
      feeParameters: { gasPriceFactor, gasPerByte },
      gasCosts
    }
  } = await provider.getChain();
  const deserializedTransactionBytes = arrayify(transactionBytes);
  const [transaction] = new TransactionCoder().decode(deserializedTransactionBytes, 0);
  return assembleTransactionSummary({
    id,
    transaction,
    transactionBytes: deserializedTransactionBytes,
    receipts: receipts.map(deserializeReceipt),
    gasPrice: bn(gasPrice),
    // From chain
    baseAssetId,
    maxInputs,
    gasCosts,
    maxGasPerTx,
    gasPerByte,
    gasPriceFactor
  });
}, "assembleTransactionSummaryFromJson");
var mergeQuantities = __name11((...coinQuantities) => {
  const resultMap = {};
  function addToMap({ amount, assetId }) {
    if (resultMap[assetId]) {
      resultMap[assetId] = resultMap[assetId].add(amount);
    } else {
      resultMap[assetId] = amount;
    }
  }
  __name11(addToMap, "addToMap");
  coinQuantities.forEach((arr) => arr.forEach(addToMap));
  return Object.entries(resultMap).map(([assetId, amount]) => ({ assetId, amount }));
}, "mergeQuantities");
var _a70;
var AbstractAccount = (_a70 = class {
}, __name11(_a70, "AbstractAccount"), _a70);
var formatTransferToContractScriptData = __name11((transferParams) => {
  const numberCoder = new BigNumberCoder("u64");
  return transferParams.reduce((acc, transferParam) => {
    const { assetId, amount, contractId } = transferParam;
    const encoded = numberCoder.encode(amount);
    const scriptData = concat([new Address(contractId).toBytes(), encoded, arrayify(assetId)]);
    return concat([acc, scriptData]);
  }, new Uint8Array());
}, "formatTransferToContractScriptData");
var assembleTransferToContractScript = __name11(async (transferParams) => {
  const scriptData = formatTransferToContractScriptData(transferParams);
  await initWasm();
  let script = new Uint8Array();
  transferParams.forEach((_, i) => {
    const offset = (CONTRACT_ID_LEN + WORD_SIZE + ASSET_ID_LEN) * i;
    script = concat([
      script,
      // Load ScriptData into register 0x10.
      gtf(16, 0, GTFArgs.ScriptData).to_bytes(),
      // Add the offset to 0x10 so it will point to the current contract ID, store in 0x11.
      addi(17, 16, offset).to_bytes(),
      // Add CONTRACT_ID_LEN to 0x11 to point to the amount in the ScriptData, store in 0x12.
      addi(18, 17, CONTRACT_ID_LEN).to_bytes(),
      // Load word to the amount at 0x12 into register 0x13.
      lw(19, 18, 0).to_bytes(),
      // Add WORD_SIZE to 0x12 to point to the asset ID in the ScriptData, store in 0x14.
      addi(20, 18, WORD_SIZE).to_bytes(),
      // Perform the transfer using contract ID in 0x11, amount in 0x13, and asset ID in 0x14.
      tr(17, 19, 20).to_bytes()
    ]);
  });
  script = concat([script, ret(1).to_bytes()]);
  return { script, scriptData };
}, "assembleTransferToContractScript");
var MAX_FUNDING_ATTEMPTS = 5;
var _a71;
var Account = (_a71 = class extends AbstractAccount {
  /**
   * Creates a new Account instance.
   *
   * @param address - The address of the account.
   * @param provider - A Provider instance  (optional).
   * @param connector - A FuelConnector instance (optional).
   */
  constructor(address, provider, connector) {
    super();
    /**
     * The address associated with the account.
     */
    __publicField(this, "address");
    /**
     * The provider used to interact with the network.
     */
    __publicField(this, "_provider");
    /**
     * The connector for use with external wallets
     */
    __publicField(this, "_connector");
    this._provider = provider;
    this._connector = connector;
    this.address = new Address(address);
  }
  /**
   * The provider used to interact with the network.
   *
   * @returns A Provider instance.
   *
   * @throws `FuelError` if the provider is not set.
   */
  get provider() {
    if (!this._provider) {
      throw new FuelError(ErrorCode.MISSING_PROVIDER, "Provider not set");
    }
    return this._provider;
  }
  /**
   * Sets the provider for the account.
   *
   * @param provider - A Provider instance.
   */
  set provider(provider) {
    this._provider = provider;
  }
  /**
   * Changes the provider connection for the account.
   *
   * @param provider - A Provider instance.
   * @returns The updated Provider instance.
   */
  connect(provider) {
    this._provider = provider;
    return this.provider;
  }
  /**
   * Retrieves resources satisfying the spend query for the account.
   *
   * @param quantities - Quantities of resources to be obtained.
   * @param excludedIds - IDs of resources to be excluded from the query (optional).
   * @returns A promise that resolves to an array of Resources.
   */
  async getResourcesToSpend(quantities, excludedIds) {
    return this.provider.getResourcesToSpend(this.address, quantities, excludedIds);
  }
  /**
   * Retrieves coins owned by the account.
   *
   * @param assetId - The asset ID of the coins to retrieve (optional).
   * @returns A promise that resolves to an array of Coins.
   */
  async getCoins(assetId, paginationArgs) {
    return this.provider.getCoins(this.address, assetId, paginationArgs);
  }
  /**
   * Retrieves messages owned by the account.
   *
   * @returns A promise that resolves to an array of Messages.
   */
  async getMessages(paginationArgs) {
    return this.provider.getMessages(this.address, paginationArgs);
  }
  /**
   * Retrieves the balance of the account for the given asset.
   *
   * @param assetId - The asset ID to check the balance for (optional).
   * @returns A promise that resolves to the balance amount.
   */
  async getBalance(assetId) {
    const assetIdToFetch = assetId ?? await this.provider.getBaseAssetId();
    const amount = await this.provider.getBalance(this.address, assetIdToFetch);
    return amount;
  }
  /**
   * Retrieves all the balances for the account.
   *
   * @returns A promise that resolves to an array of Coins and their quantities.
   */
  async getBalances() {
    return this.provider.getBalances(this.address);
  }
  /**
   * Funds a transaction request by adding the necessary resources.
   *
   * @typeParam T - The type of the TransactionRequest.
   * @param request - The transaction request to fund.
   * @param params - The estimated transaction parameters.
   * @returns A promise that resolves to the funded transaction request.
   */
  async fund(request2, params) {
    var _a103;
    const {
      addedSignatures,
      estimatedPredicates,
      requiredQuantities,
      updateMaxFee,
      gasPrice,
      transactionSummary
    } = params;
    const chainId = await this.provider.getChainId();
    const fee = request2.maxFee;
    const baseAssetId = await this.provider.getBaseAssetId();
    const requiredInBaseAsset = ((_a103 = requiredQuantities.find((quantity) => quantity.assetId === baseAssetId)) == null ? void 0 : _a103.amount) || bn(0);
    const requiredQuantitiesWithFee = addAmountToCoinQuantities({
      amount: bn(fee),
      assetId: baseAssetId,
      coinQuantities: requiredQuantities
    });
    const quantitiesDict = {};
    requiredQuantitiesWithFee.forEach(({ amount, assetId }) => {
      quantitiesDict[assetId] = {
        required: amount,
        owned: bn(0)
      };
    });
    request2.inputs.filter(isRequestInputResource).forEach((input) => {
      const isCoin2 = isRequestInputCoin(input);
      const assetId = isCoin2 ? String(input.assetId) : baseAssetId;
      if (quantitiesDict[assetId]) {
        quantitiesDict[assetId].owned = quantitiesDict[assetId].owned.add(input.amount);
      }
    });
    let missingQuantities = [];
    Object.entries(quantitiesDict).forEach(([assetId, { owned, required }]) => {
      if (owned.lt(required)) {
        missingQuantities.push({
          assetId,
          amount: required.sub(owned)
        });
      }
    });
    let needsToBeFunded = missingQuantities.length > 0;
    let fundingAttempts = 0;
    while (needsToBeFunded && fundingAttempts < MAX_FUNDING_ATTEMPTS) {
      const resources = await this.getResourcesToSpend(
        missingQuantities,
        cacheRequestInputsResourcesFromOwner(request2.inputs, this.address)
      );
      request2.addResources(resources);
      request2.updatePredicateGasUsed(estimatedPredicates);
      const requestToReestimate2 = clone_default(request2);
      if (addedSignatures) {
        Array.from({ length: addedSignatures }).forEach(
          () => requestToReestimate2.addEmptyWitness()
        );
      }
      if (!updateMaxFee) {
        needsToBeFunded = false;
        break;
      }
      const { maxFee: newFee } = await this.provider.estimateTxGasAndFee({
        transactionRequest: requestToReestimate2,
        gasPrice
      });
      const totalBaseAssetOnInputs = getAssetAmountInRequestInputs(
        request2.inputs.filter(isRequestInputResource),
        baseAssetId,
        baseAssetId
      );
      const totalBaseAssetRequiredWithFee = requiredInBaseAsset.add(newFee);
      if (totalBaseAssetOnInputs.gt(totalBaseAssetRequiredWithFee)) {
        needsToBeFunded = false;
      } else {
        missingQuantities = [
          {
            amount: totalBaseAssetRequiredWithFee.sub(totalBaseAssetOnInputs),
            assetId: baseAssetId
          }
        ];
      }
      fundingAttempts += 1;
    }
    if (needsToBeFunded) {
      throw new FuelError(
        ErrorCode.INSUFFICIENT_FUNDS_OR_MAX_COINS,
        `The account ${this.address} does not have enough base asset funds to cover the transaction execution.`
      );
    }
    request2.updateState(chainId, "funded", transactionSummary);
    await this.provider.validateTransaction(request2);
    request2.updatePredicateGasUsed(estimatedPredicates);
    const requestToReestimate = clone_default(request2);
    if (addedSignatures) {
      Array.from({ length: addedSignatures }).forEach(() => requestToReestimate.addEmptyWitness());
    }
    if (!updateMaxFee) {
      return request2;
    }
    const { maxFee } = await this.provider.estimateTxGasAndFee({
      transactionRequest: requestToReestimate,
      gasPrice
    });
    request2.maxFee = maxFee;
    return request2;
  }
  /**
   * A helper that creates a transfer transaction request and returns it.
   *
   * @param destination - The address of the destination.
   * @param amount - The amount of coins to transfer.
   * @param assetId - The asset ID of the coins to transfer (optional).
   * @param txParams - The transaction parameters (optional).
   * @returns A promise that resolves to the prepared transaction request.
   */
  async createTransfer(destination, amount, assetId, txParams = {}) {
    let request2 = new ScriptTransactionRequest(txParams);
    request2 = this.addTransfer(request2, {
      destination,
      amount,
      assetId: assetId || await this.provider.getBaseAssetId()
    });
    request2 = await this.estimateAndFundTransaction(request2, txParams);
    return request2;
  }
  /**
   * Transfers coins to a destination address.
   *
   * @param destination - The address of the destination.
   * @param amount - The amount of coins to transfer.
   * @param assetId - The asset ID of the coins to transfer (optional).
   * @param txParams - The transaction parameters (optional).
   * @returns A promise that resolves to the transaction response.
   */
  async transfer(destination, amount, assetId, txParams = {}) {
    const request2 = await this.createTransfer(destination, amount, assetId, txParams);
    return this.sendTransaction(request2, { estimateTxDependencies: false });
  }
  /**
   * Transfers multiple amounts of a token to multiple recipients.
   *
   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.
   * @param txParams - Optional transaction parameters.
   * @returns A promise that resolves to a `TransactionResponse` object representing the transaction result.
   */
  async batchTransfer(transferParams, txParams = {}) {
    let request2 = new ScriptTransactionRequest(txParams);
    request2 = this.addBatchTransfer(request2, transferParams);
    request2 = await this.estimateAndFundTransaction(request2, txParams);
    return this.sendTransaction(request2, { estimateTxDependencies: false });
  }
  /**
   * Adds a transfer to the given transaction request.
   *
   * @param request - The script transaction request to add transfers to.
   * @param transferParams - The object representing the transfer to be made.
   * @returns The updated transaction request with the added transfer.
   */
  addTransfer(request2, transferParams) {
    const { destination, amount, assetId } = transferParams;
    this.validateTransferAmount(amount);
    request2.addCoinOutput(new Address(destination), amount, assetId);
    return request2;
  }
  /**
   * Adds multiple transfers to a script transaction request.
   *
   * @param request - The script transaction request to add transfers to.
   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.
   * @returns The updated script transaction request.
   */
  addBatchTransfer(request2, transferParams) {
    transferParams.forEach(({ destination, amount, assetId }) => {
      this.addTransfer(request2, {
        destination,
        amount,
        assetId
      });
    });
    return request2;
  }
  /**
   * Transfers coins to a contract address.
   *
   * @param contractId - The address of the contract.
   * @param amount - The amount of coins to transfer.
   * @param assetId - The asset ID of the coins to transfer (optional).
   * @param txParams - The transaction parameters (optional).
   * @returns A promise that resolves to the transaction response.
   */
  async transferToContract(contractId, amount, assetId, txParams = {}) {
    return this.batchTransferToContracts([{ amount, assetId, contractId }], txParams);
  }
  async batchTransferToContracts(contractTransferParams, txParams = {}) {
    let request2 = new ScriptTransactionRequest({
      ...txParams
    });
    const quantities = [];
    const defaultAssetId = await this.provider.getBaseAssetId();
    const transferParams = contractTransferParams.map((transferParam) => {
      const amount = bn(transferParam.amount);
      const contractAddress = new Address(transferParam.contractId);
      const assetId = transferParam.assetId ? hexlify(transferParam.assetId) : defaultAssetId;
      if (amount.lte(0)) {
        throw new FuelError(
          ErrorCode.INVALID_TRANSFER_AMOUNT,
          "Transfer amount must be a positive number."
        );
      }
      request2.addContractInputAndOutput(contractAddress);
      quantities.push({ amount, assetId });
      return {
        amount,
        contractId: contractAddress.toB256(),
        assetId
      };
    });
    const { script, scriptData } = await assembleTransferToContractScript(transferParams);
    request2.script = script;
    request2.scriptData = scriptData;
    request2 = await this.estimateAndFundTransaction(request2, txParams, { quantities });
    return this.sendTransaction(request2);
  }
  /**
   * Withdraws an amount of the base asset to the base chain.
   *
   * @param recipient - Address of the recipient on the base chain.
   * @param amount - Amount of base asset.
   * @param txParams - The transaction parameters (optional).
   * @returns A promise that resolves to the transaction response.
   */
  async withdrawToBaseLayer(recipient, amount, txParams = {}) {
    const recipientAddress = new Address(recipient);
    const recipientDataArray = arrayify(
      "0x".concat(recipientAddress.toHexString().substring(2).padStart(64, "0"))
    );
    const amountDataArray = arrayify(
      "0x".concat(bn(amount).toHex().substring(2).padStart(16, "0"))
    );
    const script = new Uint8Array([
      ...arrayify(withdrawScript.bytes),
      ...recipientDataArray,
      ...amountDataArray
    ]);
    const params = { script, ...txParams };
    const baseAssetId = await this.provider.getBaseAssetId();
    let request2 = new ScriptTransactionRequest(params);
    const quantities = [{ amount: bn(amount), assetId: baseAssetId }];
    const txCost = await this.getTransactionCost(request2, { quantities });
    request2 = this.validateGasLimitAndMaxFee({
      transactionRequest: request2,
      gasUsed: txCost.gasUsed,
      maxFee: txCost.maxFee,
      txParams
    });
    await this.fund(request2, txCost);
    return this.sendTransaction(request2);
  }
  /**
   * Returns a transaction cost to enable user
   * to set gasLimit and also reserve balance amounts
   * on the transaction.
   *
   * @param transactionRequestLike - The transaction request object.
   * @param transactionCostParams - The transaction cost parameters (optional).
   *
   * @returns A promise that resolves to the transaction cost object.
   */
  async getTransactionCost(transactionRequestLike, { signatureCallback, quantities = [], gasPrice } = {}) {
    const txRequestClone = clone_default(transactionRequestify(transactionRequestLike));
    const baseAssetId = await this.provider.getBaseAssetId();
    const coinOutputsQuantities = txRequestClone.getCoinOutputsQuantities();
    const requiredQuantities = mergeQuantities(coinOutputsQuantities, quantities);
    const transactionFeeForDryRun = [{ assetId: baseAssetId, amount: bn("100000000000000000") }];
    const findAssetInput = __name11((assetId) => txRequestClone.inputs.find((input) => {
      if (input.type === InputType.Coin) {
        return input.assetId === assetId;
      }
      if (isRequestInputMessageWithoutData(input)) {
        return baseAssetId === assetId;
      }
      return false;
    }), "findAssetInput");
    const updateAssetInput = __name11((assetId, quantity) => {
      const assetInput = findAssetInput(assetId);
      const usedQuantity = quantity;
      if (assetInput && "amount" in assetInput) {
        assetInput.amount = usedQuantity;
      } else {
        txRequestClone.addResources(
          this.generateFakeResources([
            {
              amount: quantity,
              assetId
            }
          ])
        );
      }
    }, "updateAssetInput");
    mergeQuantities(requiredQuantities, transactionFeeForDryRun).forEach(
      ({ amount, assetId }) => updateAssetInput(assetId, amount)
    );
    const txCost = await this.provider.getTransactionCost(txRequestClone, {
      signatureCallback,
      gasPrice
    });
    return {
      ...txCost,
      requiredQuantities
    };
  }
  /**
   * Sign a message from the account via the connector.
   *
   * @param message - the message to sign.
   * @returns a promise that resolves to the signature.
   *
   * @hidden
   */
  async signMessage(message) {
    if (!this._connector) {
      throw new FuelError(ErrorCode.MISSING_CONNECTOR, "A connector is required to sign messages.");
    }
    return this._connector.signMessage(this.address.toString(), message);
  }
  /**
   * Signs a transaction from the account via the connector..
   *
   * @param transactionRequestLike - The transaction request to sign.
   * @returns A promise that resolves to the signature of the transaction.
   */
  async signTransaction(transactionRequestLike) {
    if (!this._connector) {
      throw new FuelError(
        ErrorCode.MISSING_CONNECTOR,
        "A connector is required to sign transactions."
      );
    }
    return this._connector.signTransaction(this.address.toString(), transactionRequestLike);
  }
  /**
   * Sends a transaction to the network.
   *
   * @param transactionRequestLike - The transaction request to be sent.
   * @param sendTransactionParams - The provider send transaction parameters (optional).
   * @returns A promise that resolves to the transaction response.
   */
  async sendTransaction(transactionRequestLike, { estimateTxDependencies = true, ...connectorOptions } = {}) {
    let transactionRequest = transactionRequestify(transactionRequestLike);
    if (this._connector) {
      const { onBeforeSend, skipCustomFee = false } = connectorOptions;
      transactionRequest = await this.prepareTransactionForSend(transactionRequest);
      const params = {
        onBeforeSend,
        skipCustomFee,
        provider: {
          url: this.provider.url,
          cache: await serializeProviderCache(this.provider)
        },
        transactionState: transactionRequest.flag.state,
        transactionSummary: await this.prepareTransactionSummary(transactionRequest)
      };
      const transaction = await this._connector.sendTransaction(
        this.address.toString(),
        transactionRequest,
        params
      );
      return typeof transaction === "string" ? this.provider.getTransactionResponse(transaction) : transaction;
    }
    if (estimateTxDependencies) {
      await this.provider.estimateTxDependencies(transactionRequest);
    }
    return this.provider.sendTransaction(transactionRequest, {
      estimateTxDependencies: false
    });
  }
  /**
   * Simulates a transaction.
   *
   * @param transactionRequestLike - The transaction request to be simulated.
   * @param estimateTxParams - The estimate transaction params (optional).
   * @returns A promise that resolves to the call result.
   */
  async simulateTransaction(transactionRequestLike, { estimateTxDependencies = true } = {}) {
    const transactionRequest = transactionRequestify(transactionRequestLike);
    if (estimateTxDependencies) {
      await this.provider.estimateTxDependencies(transactionRequest);
    }
    return this.provider.simulate(transactionRequest, { estimateTxDependencies: false });
  }
  /**
   * Generates an array of fake resources based on the provided coins.
   *
   * @param coins - An array of `FakeResources` objects representing the coins.
   * @returns An array of `Resource` objects with generated properties.
   */
  generateFakeResources(coins) {
    return coins.map((coin) => ({
      id: hexlify(randomBytes2(UTXO_ID_LEN)),
      owner: this.address,
      blockCreated: bn(1),
      txCreatedIdx: bn(1),
      ...coin
    }));
  }
  /** @hidden */
  async prepareTransactionForSend(request2) {
    const { transactionId } = request2.flag;
    if (!isDefined(transactionId)) {
      return request2;
    }
    const chainId = await this.provider.getChainId();
    const currentTransactionId = request2.getTransactionId(chainId);
    if (transactionId !== currentTransactionId) {
      request2.updateState(chainId);
    }
    return request2;
  }
  /** @hidden */
  async prepareTransactionSummary(request2) {
    const chainId = await this.provider.getChainId();
    return isDefined(request2.flag.summary) ? {
      ...request2.flag.summary,
      id: request2.getTransactionId(chainId),
      transactionBytes: hexlify(request2.toTransactionBytes())
    } : void 0;
  }
  /** @hidden * */
  validateTransferAmount(amount) {
    if (bn(amount).lte(0)) {
      throw new FuelError(
        ErrorCode.INVALID_TRANSFER_AMOUNT,
        "Transfer amount must be a positive number."
      );
    }
  }
  /** @hidden * */
  async estimateAndFundTransaction(transactionRequest, txParams, costParams) {
    let request2 = transactionRequest;
    const txCost = await this.getTransactionCost(request2, costParams);
    request2 = this.validateGasLimitAndMaxFee({
      transactionRequest: request2,
      gasUsed: txCost.gasUsed,
      maxFee: txCost.maxFee,
      txParams
    });
    request2 = await this.fund(request2, txCost);
    return request2;
  }
  /** @hidden * */
  validateGasLimitAndMaxFee({
    gasUsed,
    maxFee,
    transactionRequest,
    txParams: { gasLimit: setGasLimit, maxFee: setMaxFee }
  }) {
    const request2 = transactionRequestify(transactionRequest);
    if (!isDefined(setGasLimit)) {
      request2.gasLimit = gasUsed;
    } else if (gasUsed.gt(setGasLimit)) {
      throw new FuelError(
        ErrorCode.GAS_LIMIT_TOO_LOW,
        `Gas limit '${setGasLimit}' is lower than the required: '${gasUsed}'.`
      );
    }
    if (!isDefined(setMaxFee)) {
      request2.maxFee = maxFee;
    } else if (maxFee.gt(setMaxFee)) {
      throw new FuelError(
        ErrorCode.MAX_FEE_TOO_LOW,
        `Max fee '${setMaxFee}' is lower than the required: '${maxFee}'.`
      );
    }
    return request2;
  }
}, __name11(_a71, "Account"), _a71);
var _a72;
var Signer = (_a72 = class {
  /**
   * Create a Signer instance from a given private key
   *
   * @param privateKey - The private key to use for signing
   * @returns A new Signer instance
   */
  constructor(privateKey) {
    __publicField(this, "address");
    __publicField(this, "publicKey");
    __publicField(this, "compressedPublicKey");
    __publicField(this, "privateKey");
    if (typeof privateKey === "string") {
      if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
        privateKey = `0x${privateKey}`;
      }
    }
    const privateKeyBytes = toBytes(privateKey, 32);
    this.privateKey = hexlify(privateKeyBytes);
    this.publicKey = hexlify(secp256k1.getPublicKey(privateKeyBytes, false).slice(1));
    this.compressedPublicKey = hexlify(secp256k1.getPublicKey(privateKeyBytes, true));
    this.address = new Address(this.publicKey);
  }
  /**
   * Sign data using the Signer instance
   *
   * Signature is a 64 byte array of the concatenated r and s values with the compressed recoveryParam byte.
   * @ignore
   * [Read more](FuelLabs/fuel-specs/specs/protocol/cryptographic_primitives.md#public-key-cryptography)
   *
   * @param data - The data to be sign
   * @returns hashed signature
   */
  sign(data) {
    const signature = secp256k1.sign(arrayify(data), arrayify(this.privateKey));
    const r = toBytes(`0x${signature.r.toString(16)}`, 32);
    const s = toBytes(`0x${signature.s.toString(16)}`, 32);
    s[0] |= (signature.recovery || 0) << 7;
    return hexlify(concat([r, s]));
  }
  /**
   * Add point on the current elliptic curve
   *
   * @param point - Point to add on the curve
   * @returns compressed point on the curve
   */
  addPoint(point) {
    const p0 = secp256k1.ProjectivePoint.fromHex(arrayify(this.compressedPublicKey));
    const p1 = secp256k1.ProjectivePoint.fromHex(arrayify(point));
    const result = p0.add(p1);
    return `0x${result.toHex(true)}`;
  }
  /**
   * Recover the public key from a signature performed with [`sign`](#sign).
   *
   * @param data - Data
   * @param signature - hashed signature
   * @returns public key from signature from the
   */
  static recoverPublicKey(data, signature) {
    const signedMessageBytes = arrayify(signature);
    const r = signedMessageBytes.slice(0, 32);
    const s = signedMessageBytes.slice(32, 64);
    const recoveryParam = (s[0] & 128) >> 7;
    s[0] &= 127;
    const sig = new secp256k1.Signature(BigInt(hexlify(r)), BigInt(hexlify(s))).addRecoveryBit(
      recoveryParam
    );
    const publicKey = sig.recoverPublicKey(arrayify(data)).toRawBytes(false).slice(1);
    return hexlify(publicKey);
  }
  /**
   * Recover the address from a signature performed with [`sign`](#sign).
   *
   * @param data - Data
   * @param signature - Signature
   * @returns Address from signature
   */
  static recoverAddress(data, signature) {
    return new Address(_a72.recoverPublicKey(data, signature));
  }
  /**
   * Generate a random privateKey
   *
   * @param entropy - Adds extra entropy to generate the privateKey
   * @returns random 32-byte hashed
   */
  static generatePrivateKey(entropy) {
    return entropy ? hash(concat([randomBytes2(32), arrayify(entropy)])) : randomBytes2(32);
  }
  /**
   * Extended publicKey from a compact publicKey
   *
   * @param publicKey - Compact publicKey
   * @returns extended publicKey
   */
  static extendPublicKey(publicKey) {
    const point = secp256k1.ProjectivePoint.fromHex(arrayify(publicKey));
    return hexlify(point.toRawBytes(false).slice(1));
  }
}, __name11(_a72, "Signer"), _a72);
var DEFAULT_KDF_PARAMS_LOG_N = 13;
var DEFAULT_KDF_PARAMS_R = 8;
var DEFAULT_KDF_PARAMS_P = 1;
var DEFAULT_KEY_SIZE = 32;
var DEFAULT_IV_SIZE = 16;
var removeHexPrefix = __name11((hexString) => {
  if (/^0x/.test(hexString)) {
    return hexString.slice(2);
  }
  return hexString;
}, "removeHexPrefix");
async function encryptKeystoreWallet(privateKey, address, password) {
  const privateKeyBuffer = bufferFromString2(removeHexPrefix(privateKey), "hex");
  const ownerAddress = new Address(address);
  const salt = randomBytes2(DEFAULT_KEY_SIZE);
  const key = scrypt22({
    password: bufferFromString2(password),
    salt,
    dklen: DEFAULT_KEY_SIZE,
    n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,
    r: DEFAULT_KDF_PARAMS_R,
    p: DEFAULT_KDF_PARAMS_P
  });
  const iv = randomBytes2(DEFAULT_IV_SIZE);
  const ciphertext = await encryptJsonWalletData2(privateKeyBuffer, key, iv);
  const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertext]);
  const macHashUint8Array = keccak2562(data);
  const mac = stringFromBuffer2(macHashUint8Array, "hex");
  const keystore = {
    id: randomUUID2(),
    version: 3,
    address: removeHexPrefix(ownerAddress.toHexString()),
    crypto: {
      cipher: "aes-128-ctr",
      mac,
      cipherparams: { iv: stringFromBuffer2(iv, "hex") },
      ciphertext: stringFromBuffer2(ciphertext, "hex"),
      kdf: "scrypt",
      kdfparams: {
        dklen: DEFAULT_KEY_SIZE,
        n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,
        p: DEFAULT_KDF_PARAMS_P,
        r: DEFAULT_KDF_PARAMS_R,
        salt: stringFromBuffer2(salt, "hex")
      }
    }
  };
  return JSON.stringify(keystore);
}
__name11(encryptKeystoreWallet, "encryptKeystoreWallet");
async function decryptKeystoreWallet(jsonWallet, password) {
  const keystoreWallet = JSON.parse(jsonWallet);
  const {
    crypto: {
      mac,
      ciphertext,
      cipherparams: { iv },
      kdfparams: { dklen, n, r, p, salt }
    }
  } = keystoreWallet;
  const ciphertextBuffer = bufferFromString2(ciphertext, "hex");
  const ivBuffer = bufferFromString2(iv, "hex");
  const saltBuffer = bufferFromString2(salt, "hex");
  const passwordBuffer = bufferFromString2(password);
  const key = scrypt22({
    password: passwordBuffer,
    salt: saltBuffer,
    n,
    p,
    r,
    dklen
  });
  const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertextBuffer]);
  const macHashUint8Array = keccak2562(data);
  const macHash = stringFromBuffer2(macHashUint8Array, "hex");
  if (mac !== macHash) {
    throw new FuelError(
      ErrorCode.INVALID_PASSWORD,
      "Failed to decrypt the keystore wallet, the provided password is incorrect."
    );
  }
  const buffer = await decryptJsonWalletData2(ciphertextBuffer, key, ivBuffer);
  const privateKey = hexlify(buffer);
  return privateKey;
}
__name11(decryptKeystoreWallet, "decryptKeystoreWallet");
var _a73;
var BaseWalletUnlocked = (_a73 = class extends Account {
  /**
   * Creates a new BaseWalletUnlocked instance.
   *
   * @param privateKey - The private key of the wallet.
   * @param provider - A Provider instance (optional).
   */
  constructor(privateKey, provider) {
    const signer = new Signer(privateKey);
    super(signer.address, provider);
    /**
     * A function that returns the wallet's signer.
     */
    __publicField(this, "signer");
    this.signer = () => signer;
  }
  /**
   * Gets the private key of the wallet.
   *
   * @returns The private key of the wallet.
   */
  get privateKey() {
    return this.signer().privateKey;
  }
  /**
   * Gets the public key of the wallet.
   *
   * @returns
   */
  get publicKey() {
    return this.signer().publicKey;
  }
  /**
   * Signs a message with the wallet's private key.
   *
   * @param message - The message to sign.
   * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.
   */
  async signMessage(message) {
    const signedMessage = await this.signer().sign(hashMessage(message));
    return hexlify(signedMessage);
  }
  /**
   * Signs a transaction with the wallet's private key.
   *
   * @param transactionRequestLike - The transaction request to sign.
   * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.
   */
  async signTransaction(transactionRequestLike) {
    const transactionRequest = transactionRequestify(transactionRequestLike);
    const chainId = await this.provider.getChainId();
    const hashedTransaction = transactionRequest.getTransactionId(chainId);
    const signature = await this.signer().sign(hashedTransaction);
    return hexlify(signature);
  }
  /**
   * Populates a transaction with the witnesses signature.
   *
   * @param transactionRequestLike - The transaction request to populate.
   * @returns The populated transaction request.
   */
  async populateTransactionWitnessesSignature(transactionRequestLike) {
    const transactionRequest = transactionRequestify(transactionRequestLike);
    const signedTransaction = await this.signTransaction(transactionRequest);
    transactionRequest.updateWitnessByOwner(this.address, signedTransaction);
    return transactionRequest;
  }
  /**
   * Populates the witness signature for a transaction and sends it to the network using `provider.sendTransaction`.
   *
   * @param transactionRequestLike - The transaction request to send.
   * @param estimateTxDependencies - Whether to estimate the transaction dependencies.
   * @returns A promise that resolves to the TransactionResponse object.
   */
  async sendTransaction(transactionRequestLike, { estimateTxDependencies = false, enableAssetBurn } = {}) {
    const transactionRequest = transactionRequestify(transactionRequestLike);
    validateTransactionForAssetBurn(
      await this.provider.getBaseAssetId(),
      transactionRequest,
      enableAssetBurn
    );
    if (estimateTxDependencies) {
      await this.provider.estimateTxDependencies(transactionRequest);
    }
    return this.provider.sendTransaction(
      await this.populateTransactionWitnessesSignature(transactionRequest),
      { estimateTxDependencies: false, enableAssetBurn }
    );
  }
  /**
   * Populates the witness signature for a transaction and sends a call to the network using `provider.dryRun`.
   *
   * @param transactionRequestLike - The transaction request to simulate.
   * @returns A promise that resolves to the CallResult object.
   */
  async simulateTransaction(transactionRequestLike, { estimateTxDependencies = true } = {}) {
    const transactionRequest = transactionRequestify(transactionRequestLike);
    if (estimateTxDependencies) {
      await this.provider.estimateTxDependencies(transactionRequest);
    }
    return this.provider.dryRun(
      await this.populateTransactionWitnessesSignature(transactionRequest),
      {
        utxoValidation: true,
        estimateTxDependencies: false
      }
    );
  }
  /**
   * Encrypts an unlocked wallet with a password.
   *
   * @param password - the password to encrypt the wallet with.
   * @returns - the encrypted wallet.
   */
  async encrypt(password) {
    return encryptKeystoreWallet(this.privateKey, this.address, password);
  }
}, __name11(_a73, "BaseWalletUnlocked"), /**
 * Default HDWallet path.
 */
__publicField(_a73, "defaultPath", "m/44'/1179993420'/0'/0/0"), _a73);
var english = [
  "abandon",
  "ability",
  "able",
  "about",
  "above",
  "absent",
  "absorb",
  "abstract",
  "absurd",
  "abuse",
  "access",
  "accident",
  "account",
  "accuse",
  "achieve",
  "acid",
  "acoustic",
  "acquire",
  "across",
  "act",
  "action",
  "actor",
  "actress",
  "actual",
  "adapt",
  "add",
  "addict",
  "address",
  "adjust",
  "admit",
  "adult",
  "advance",
  "advice",
  "aerobic",
  "affair",
  "afford",
  "afraid",
  "again",
  "age",
  "agent",
  "agree",
  "ahead",
  "aim",
  "air",
  "airport",
  "aisle",
  "alarm",
  "album",
  "alcohol",
  "alert",
  "alien",
  "all",
  "alley",
  "allow",
  "almost",
  "alone",
  "alpha",
  "already",
  "also",
  "alter",
  "always",
  "amateur",
  "amazing",
  "among",
  "amount",
  "amused",
  "analyst",
  "anchor",
  "ancient",
  "anger",
  "angle",
  "angry",
  "animal",
  "ankle",
  "announce",
  "annual",
  "another",
  "answer",
  "antenna",
  "antique",
  "anxiety",
  "any",
  "apart",
  "apology",
  "appear",
  "apple",
  "approve",
  "april",
  "arch",
  "arctic",
  "area",
  "arena",
  "argue",
  "arm",
  "armed",
  "armor",
  "army",
  "around",
  "arrange",
  "arrest",
  "arrive",
  "arrow",
  "art",
  "artefact",
  "artist",
  "artwork",
  "ask",
  "aspect",
  "assault",
  "asset",
  "assist",
  "assume",
  "asthma",
  "athlete",
  "atom",
  "attack",
  "attend",
  "attitude",
  "attract",
  "auction",
  "audit",
  "august",
  "aunt",
  "author",
  "auto",
  "autumn",
  "average",
  "avocado",
  "avoid",
  "awake",
  "aware",
  "away",
  "awesome",
  "awful",
  "awkward",
  "axis",
  "baby",
  "bachelor",
  "bacon",
  "badge",
  "bag",
  "balance",
  "balcony",
  "ball",
  "bamboo",
  "banana",
  "banner",
  "bar",
  "barely",
  "bargain",
  "barrel",
  "base",
  "basic",
  "basket",
  "battle",
  "beach",
  "bean",
  "beauty",
  "because",
  "become",
  "beef",
  "before",
  "begin",
  "behave",
  "behind",
  "believe",
  "below",
  "belt",
  "bench",
  "benefit",
  "best",
  "betray",
  "better",
  "between",
  "beyond",
  "bicycle",
  "bid",
  "bike",
  "bind",
  "biology",
  "bird",
  "birth",
  "bitter",
  "black",
  "blade",
  "blame",
  "blanket",
  "blast",
  "bleak",
  "bless",
  "blind",
  "blood",
  "blossom",
  "blouse",
  "blue",
  "blur",
  "blush",
  "board",
  "boat",
  "body",
  "boil",
  "bomb",
  "bone",
  "bonus",
  "book",
  "boost",
  "border",
  "boring",
  "borrow",
  "boss",
  "bottom",
  "bounce",
  "box",
  "boy",
  "bracket",
  "brain",
  "brand",
  "brass",
  "brave",
  "bread",
  "breeze",
  "brick",
  "bridge",
  "brief",
  "bright",
  "bring",
  "brisk",
  "broccoli",
  "broken",
  "bronze",
  "broom",
  "brother",
  "brown",
  "brush",
  "bubble",
  "buddy",
  "budget",
  "buffalo",
  "build",
  "bulb",
  "bulk",
  "bullet",
  "bundle",
  "bunker",
  "burden",
  "burger",
  "burst",
  "bus",
  "business",
  "busy",
  "butter",
  "buyer",
  "buzz",
  "cabbage",
  "cabin",
  "cable",
  "cactus",
  "cage",
  "cake",
  "call",
  "calm",
  "camera",
  "camp",
  "can",
  "canal",
  "cancel",
  "candy",
  "cannon",
  "canoe",
  "canvas",
  "canyon",
  "capable",
  "capital",
  "captain",
  "car",
  "carbon",
  "card",
  "cargo",
  "carpet",
  "carry",
  "cart",
  "case",
  "cash",
  "casino",
  "castle",
  "casual",
  "cat",
  "catalog",
  "catch",
  "category",
  "cattle",
  "caught",
  "cause",
  "caution",
  "cave",
  "ceiling",
  "celery",
  "cement",
  "census",
  "century",
  "cereal",
  "certain",
  "chair",
  "chalk",
  "champion",
  "change",
  "chaos",
  "chapter",
  "charge",
  "chase",
  "chat",
  "cheap",
  "check",
  "cheese",
  "chef",
  "cherry",
  "chest",
  "chicken",
  "chief",
  "child",
  "chimney",
  "choice",
  "choose",
  "chronic",
  "chuckle",
  "chunk",
  "churn",
  "cigar",
  "cinnamon",
  "circle",
  "citizen",
  "city",
  "civil",
  "claim",
  "clap",
  "clarify",
  "claw",
  "clay",
  "clean",
  "clerk",
  "clever",
  "click",
  "client",
  "cliff",
  "climb",
  "clinic",
  "clip",
  "clock",
  "clog",
  "close",
  "cloth",
  "cloud",
  "clown",
  "club",
  "clump",
  "cluster",
  "clutch",
  "coach",
  "coast",
  "coconut",
  "code",
  "coffee",
  "coil",
  "coin",
  "collect",
  "color",
  "column",
  "combine",
  "come",
  "comfort",
  "comic",
  "common",
  "company",
  "concert",
  "conduct",
  "confirm",
  "congress",
  "connect",
  "consider",
  "control",
  "convince",
  "cook",
  "cool",
  "copper",
  "copy",
  "coral",
  "core",
  "corn",
  "correct",
  "cost",
  "cotton",
  "couch",
  "country",
  "couple",
  "course",
  "cousin",
  "cover",
  "coyote",
  "crack",
  "cradle",
  "craft",
  "cram",
  "crane",
  "crash",
  "crater",
  "crawl",
  "crazy",
  "cream",
  "credit",
  "creek",
  "crew",
  "cricket",
  "crime",
  "crisp",
  "critic",
  "crop",
  "cross",
  "crouch",
  "crowd",
  "crucial",
  "cruel",
  "cruise",
  "crumble",
  "crunch",
  "crush",
  "cry",
  "crystal",
  "cube",
  "culture",
  "cup",
  "cupboard",
  "curious",
  "current",
  "curtain",
  "curve",
  "cushion",
  "custom",
  "cute",
  "cycle",
  "dad",
  "damage",
  "damp",
  "dance",
  "danger",
  "daring",
  "dash",
  "daughter",
  "dawn",
  "day",
  "deal",
  "debate",
  "debris",
  "decade",
  "december",
  "decide",
  "decline",
  "decorate",
  "decrease",
  "deer",
  "defense",
  "define",
  "defy",
  "degree",
  "delay",
  "deliver",
  "demand",
  "demise",
  "denial",
  "dentist",
  "deny",
  "depart",
  "depend",
  "deposit",
  "depth",
  "deputy",
  "derive",
  "describe",
  "desert",
  "design",
  "desk",
  "despair",
  "destroy",
  "detail",
  "detect",
  "develop",
  "device",
  "devote",
  "diagram",
  "dial",
  "diamond",
  "diary",
  "dice",
  "diesel",
  "diet",
  "differ",
  "digital",
  "dignity",
  "dilemma",
  "dinner",
  "dinosaur",
  "direct",
  "dirt",
  "disagree",
  "discover",
  "disease",
  "dish",
  "dismiss",
  "disorder",
  "display",
  "distance",
  "divert",
  "divide",
  "divorce",
  "dizzy",
  "doctor",
  "document",
  "dog",
  "doll",
  "dolphin",
  "domain",
  "donate",
  "donkey",
  "donor",
  "door",
  "dose",
  "double",
  "dove",
  "draft",
  "dragon",
  "drama",
  "drastic",
  "draw",
  "dream",
  "dress",
  "drift",
  "drill",
  "drink",
  "drip",
  "drive",
  "drop",
  "drum",
  "dry",
  "duck",
  "dumb",
  "dune",
  "during",
  "dust",
  "dutch",
  "duty",
  "dwarf",
  "dynamic",
  "eager",
  "eagle",
  "early",
  "earn",
  "earth",
  "easily",
  "east",
  "easy",
  "echo",
  "ecology",
  "economy",
  "edge",
  "edit",
  "educate",
  "effort",
  "egg",
  "eight",
  "either",
  "elbow",
  "elder",
  "electric",
  "elegant",
  "element",
  "elephant",
  "elevator",
  "elite",
  "else",
  "embark",
  "embody",
  "embrace",
  "emerge",
  "emotion",
  "employ",
  "empower",
  "empty",
  "enable",
  "enact",
  "end",
  "endless",
  "endorse",
  "enemy",
  "energy",
  "enforce",
  "engage",
  "engine",
  "enhance",
  "enjoy",
  "enlist",
  "enough",
  "enrich",
  "enroll",
  "ensure",
  "enter",
  "entire",
  "entry",
  "envelope",
  "episode",
  "equal",
  "equip",
  "era",
  "erase",
  "erode",
  "erosion",
  "error",
  "erupt",
  "escape",
  "essay",
  "essence",
  "estate",
  "eternal",
  "ethics",
  "evidence",
  "evil",
  "evoke",
  "evolve",
  "exact",
  "example",
  "excess",
  "exchange",
  "excite",
  "exclude",
  "excuse",
  "execute",
  "exercise",
  "exhaust",
  "exhibit",
  "exile",
  "exist",
  "exit",
  "exotic",
  "expand",
  "expect",
  "expire",
  "explain",
  "expose",
  "express",
  "extend",
  "extra",
  "eye",
  "eyebrow",
  "fabric",
  "face",
  "faculty",
  "fade",
  "faint",
  "faith",
  "fall",
  "false",
  "fame",
  "family",
  "famous",
  "fan",
  "fancy",
  "fantasy",
  "farm",
  "fashion",
  "fat",
  "fatal",
  "father",
  "fatigue",
  "fault",
  "favorite",
  "feature",
  "february",
  "federal",
  "fee",
  "feed",
  "feel",
  "female",
  "fence",
  "festival",
  "fetch",
  "fever",
  "few",
  "fiber",
  "fiction",
  "field",
  "figure",
  "file",
  "film",
  "filter",
  "final",
  "find",
  "fine",
  "finger",
  "finish",
  "fire",
  "firm",
  "first",
  "fiscal",
  "fish",
  "fit",
  "fitness",
  "fix",
  "flag",
  "flame",
  "flash",
  "flat",
  "flavor",
  "flee",
  "flight",
  "flip",
  "float",
  "flock",
  "floor",
  "flower",
  "fluid",
  "flush",
  "fly",
  "foam",
  "focus",
  "fog",
  "foil",
  "fold",
  "follow",
  "food",
  "foot",
  "force",
  "forest",
  "forget",
  "fork",
  "fortune",
  "forum",
  "forward",
  "fossil",
  "foster",
  "found",
  "fox",
  "fragile",
  "frame",
  "frequent",
  "fresh",
  "friend",
  "fringe",
  "frog",
  "front",
  "frost",
  "frown",
  "frozen",
  "fruit",
  "fuel",
  "fun",
  "funny",
  "furnace",
  "fury",
  "future",
  "gadget",
  "gain",
  "galaxy",
  "gallery",
  "game",
  "gap",
  "garage",
  "garbage",
  "garden",
  "garlic",
  "garment",
  "gas",
  "gasp",
  "gate",
  "gather",
  "gauge",
  "gaze",
  "general",
  "genius",
  "genre",
  "gentle",
  "genuine",
  "gesture",
  "ghost",
  "giant",
  "gift",
  "giggle",
  "ginger",
  "giraffe",
  "girl",
  "give",
  "glad",
  "glance",
  "glare",
  "glass",
  "glide",
  "glimpse",
  "globe",
  "gloom",
  "glory",
  "glove",
  "glow",
  "glue",
  "goat",
  "goddess",
  "gold",
  "good",
  "goose",
  "gorilla",
  "gospel",
  "gossip",
  "govern",
  "gown",
  "grab",
  "grace",
  "grain",
  "grant",
  "grape",
  "grass",
  "gravity",
  "great",
  "green",
  "grid",
  "grief",
  "grit",
  "grocery",
  "group",
  "grow",
  "grunt",
  "guard",
  "guess",
  "guide",
  "guilt",
  "guitar",
  "gun",
  "gym",
  "habit",
  "hair",
  "half",
  "hammer",
  "hamster",
  "hand",
  "happy",
  "harbor",
  "hard",
  "harsh",
  "harvest",
  "hat",
  "have",
  "hawk",
  "hazard",
  "head",
  "health",
  "heart",
  "heavy",
  "hedgehog",
  "height",
  "hello",
  "helmet",
  "help",
  "hen",
  "hero",
  "hidden",
  "high",
  "hill",
  "hint",
  "hip",
  "hire",
  "history",
  "hobby",
  "hockey",
  "hold",
  "hole",
  "holiday",
  "hollow",
  "home",
  "honey",
  "hood",
  "hope",
  "horn",
  "horror",
  "horse",
  "hospital",
  "host",
  "hotel",
  "hour",
  "hover",
  "hub",
  "huge",
  "human",
  "humble",
  "humor",
  "hundred",
  "hungry",
  "hunt",
  "hurdle",
  "hurry",
  "hurt",
  "husband",
  "hybrid",
  "ice",
  "icon",
  "idea",
  "identify",
  "idle",
  "ignore",
  "ill",
  "illegal",
  "illness",
  "image",
  "imitate",
  "immense",
  "immune",
  "impact",
  "impose",
  "improve",
  "impulse",
  "inch",
  "include",
  "income",
  "increase",
  "index",
  "indicate",
  "indoor",
  "industry",
  "infant",
  "inflict",
  "inform",
  "inhale",
  "inherit",
  "initial",
  "inject",
  "injury",
  "inmate",
  "inner",
  "innocent",
  "input",
  "inquiry",
  "insane",
  "insect",
  "inside",
  "inspire",
  "install",
  "intact",
  "interest",
  "into",
  "invest",
  "invite",
  "involve",
  "iron",
  "island",
  "isolate",
  "issue",
  "item",
  "ivory",
  "jacket",
  "jaguar",
  "jar",
  "jazz",
  "jealous",
  "jeans",
  "jelly",
  "jewel",
  "job",
  "join",
  "joke",
  "journey",
  "joy",
  "judge",
  "juice",
  "jump",
  "jungle",
  "junior",
  "junk",
  "just",
  "kangaroo",
  "keen",
  "keep",
  "ketchup",
  "key",
  "kick",
  "kid",
  "kidney",
  "kind",
  "kingdom",
  "kiss",
  "kit",
  "kitchen",
  "kite",
  "kitten",
  "kiwi",
  "knee",
  "knife",
  "knock",
  "know",
  "lab",
  "label",
  "labor",
  "ladder",
  "lady",
  "lake",
  "lamp",
  "language",
  "laptop",
  "large",
  "later",
  "latin",
  "laugh",
  "laundry",
  "lava",
  "law",
  "lawn",
  "lawsuit",
  "layer",
  "lazy",
  "leader",
  "leaf",
  "learn",
  "leave",
  "lecture",
  "left",
  "leg",
  "legal",
  "legend",
  "leisure",
  "lemon",
  "lend",
  "length",
  "lens",
  "leopard",
  "lesson",
  "letter",
  "level",
  "liar",
  "liberty",
  "library",
  "license",
  "life",
  "lift",
  "light",
  "like",
  "limb",
  "limit",
  "link",
  "lion",
  "liquid",
  "list",
  "little",
  "live",
  "lizard",
  "load",
  "loan",
  "lobster",
  "local",
  "lock",
  "logic",
  "lonely",
  "long",
  "loop",
  "lottery",
  "loud",
  "lounge",
  "love",
  "loyal",
  "lucky",
  "luggage",
  "lumber",
  "lunar",
  "lunch",
  "luxury",
  "lyrics",
  "machine",
  "mad",
  "magic",
  "magnet",
  "maid",
  "mail",
  "main",
  "major",
  "make",
  "mammal",
  "man",
  "manage",
  "mandate",
  "mango",
  "mansion",
  "manual",
  "maple",
  "marble",
  "march",
  "margin",
  "marine",
  "market",
  "marriage",
  "mask",
  "mass",
  "master",
  "match",
  "material",
  "math",
  "matrix",
  "matter",
  "maximum",
  "maze",
  "meadow",
  "mean",
  "measure",
  "meat",
  "mechanic",
  "medal",
  "media",
  "melody",
  "melt",
  "member",
  "memory",
  "mention",
  "menu",
  "mercy",
  "merge",
  "merit",
  "merry",
  "mesh",
  "message",
  "metal",
  "method",
  "middle",
  "midnight",
  "milk",
  "million",
  "mimic",
  "mind",
  "minimum",
  "minor",
  "minute",
  "miracle",
  "mirror",
  "misery",
  "miss",
  "mistake",
  "mix",
  "mixed",
  "mixture",
  "mobile",
  "model",
  "modify",
  "mom",
  "moment",
  "monitor",
  "monkey",
  "monster",
  "month",
  "moon",
  "moral",
  "more",
  "morning",
  "mosquito",
  "mother",
  "motion",
  "motor",
  "mountain",
  "mouse",
  "move",
  "movie",
  "much",
  "muffin",
  "mule",
  "multiply",
  "muscle",
  "museum",
  "mushroom",
  "music",
  "must",
  "mutual",
  "myself",
  "mystery",
  "myth",
  "naive",
  "name",
  "napkin",
  "narrow",
  "nasty",
  "nation",
  "nature",
  "near",
  "neck",
  "need",
  "negative",
  "neglect",
  "neither",
  "nephew",
  "nerve",
  "nest",
  "net",
  "network",
  "neutral",
  "never",
  "news",
  "next",
  "nice",
  "night",
  "noble",
  "noise",
  "nominee",
  "noodle",
  "normal",
  "north",
  "nose",
  "notable",
  "note",
  "nothing",
  "notice",
  "novel",
  "now",
  "nuclear",
  "number",
  "nurse",
  "nut",
  "oak",
  "obey",
  "object",
  "oblige",
  "obscure",
  "observe",
  "obtain",
  "obvious",
  "occur",
  "ocean",
  "october",
  "odor",
  "off",
  "offer",
  "office",
  "often",
  "oil",
  "okay",
  "old",
  "olive",
  "olympic",
  "omit",
  "once",
  "one",
  "onion",
  "online",
  "only",
  "open",
  "opera",
  "opinion",
  "oppose",
  "option",
  "orange",
  "orbit",
  "orchard",
  "order",
  "ordinary",
  "organ",
  "orient",
  "original",
  "orphan",
  "ostrich",
  "other",
  "outdoor",
  "outer",
  "output",
  "outside",
  "oval",
  "oven",
  "over",
  "own",
  "owner",
  "oxygen",
  "oyster",
  "ozone",
  "pact",
  "paddle",
  "page",
  "pair",
  "palace",
  "palm",
  "panda",
  "panel",
  "panic",
  "panther",
  "paper",
  "parade",
  "parent",
  "park",
  "parrot",
  "party",
  "pass",
  "patch",
  "path",
  "patient",
  "patrol",
  "pattern",
  "pause",
  "pave",
  "payment",
  "peace",
  "peanut",
  "pear",
  "peasant",
  "pelican",
  "pen",
  "penalty",
  "pencil",
  "people",
  "pepper",
  "perfect",
  "permit",
  "person",
  "pet",
  "phone",
  "photo",
  "phrase",
  "physical",
  "piano",
  "picnic",
  "picture",
  "piece",
  "pig",
  "pigeon",
  "pill",
  "pilot",
  "pink",
  "pioneer",
  "pipe",
  "pistol",
  "pitch",
  "pizza",
  "place",
  "planet",
  "plastic",
  "plate",
  "play",
  "please",
  "pledge",
  "pluck",
  "plug",
  "plunge",
  "poem",
  "poet",
  "point",
  "polar",
  "pole",
  "police",
  "pond",
  "pony",
  "pool",
  "popular",
  "portion",
  "position",
  "possible",
  "post",
  "potato",
  "pottery",
  "poverty",
  "powder",
  "power",
  "practice",
  "praise",
  "predict",
  "prefer",
  "prepare",
  "present",
  "pretty",
  "prevent",
  "price",
  "pride",
  "primary",
  "print",
  "priority",
  "prison",
  "private",
  "prize",
  "problem",
  "process",
  "produce",
  "profit",
  "program",
  "project",
  "promote",
  "proof",
  "property",
  "prosper",
  "protect",
  "proud",
  "provide",
  "public",
  "pudding",
  "pull",
  "pulp",
  "pulse",
  "pumpkin",
  "punch",
  "pupil",
  "puppy",
  "purchase",
  "purity",
  "purpose",
  "purse",
  "push",
  "put",
  "puzzle",
  "pyramid",
  "quality",
  "quantum",
  "quarter",
  "question",
  "quick",
  "quit",
  "quiz",
  "quote",
  "rabbit",
  "raccoon",
  "race",
  "rack",
  "radar",
  "radio",
  "rail",
  "rain",
  "raise",
  "rally",
  "ramp",
  "ranch",
  "random",
  "range",
  "rapid",
  "rare",
  "rate",
  "rather",
  "raven",
  "raw",
  "razor",
  "ready",
  "real",
  "reason",
  "rebel",
  "rebuild",
  "recall",
  "receive",
  "recipe",
  "record",
  "recycle",
  "reduce",
  "reflect",
  "reform",
  "refuse",
  "region",
  "regret",
  "regular",
  "reject",
  "relax",
  "release",
  "relief",
  "rely",
  "remain",
  "remember",
  "remind",
  "remove",
  "render",
  "renew",
  "rent",
  "reopen",
  "repair",
  "repeat",
  "replace",
  "report",
  "require",
  "rescue",
  "resemble",
  "resist",
  "resource",
  "response",
  "result",
  "retire",
  "retreat",
  "return",
  "reunion",
  "reveal",
  "review",
  "reward",
  "rhythm",
  "rib",
  "ribbon",
  "rice",
  "rich",
  "ride",
  "ridge",
  "rifle",
  "right",
  "rigid",
  "ring",
  "riot",
  "ripple",
  "risk",
  "ritual",
  "rival",
  "river",
  "road",
  "roast",
  "robot",
  "robust",
  "rocket",
  "romance",
  "roof",
  "rookie",
  "room",
  "rose",
  "rotate",
  "rough",
  "round",
  "route",
  "royal",
  "rubber",
  "rude",
  "rug",
  "rule",
  "run",
  "runway",
  "rural",
  "sad",
  "saddle",
  "sadness",
  "safe",
  "sail",
  "salad",
  "salmon",
  "salon",
  "salt",
  "salute",
  "same",
  "sample",
  "sand",
  "satisfy",
  "satoshi",
  "sauce",
  "sausage",
  "save",
  "say",
  "scale",
  "scan",
  "scare",
  "scatter",
  "scene",
  "scheme",
  "school",
  "science",
  "scissors",
  "scorpion",
  "scout",
  "scrap",
  "screen",
  "script",
  "scrub",
  "sea",
  "search",
  "season",
  "seat",
  "second",
  "secret",
  "section",
  "security",
  "seed",
  "seek",
  "segment",
  "select",
  "sell",
  "seminar",
  "senior",
  "sense",
  "sentence",
  "series",
  "service",
  "session",
  "settle",
  "setup",
  "seven",
  "shadow",
  "shaft",
  "shallow",
  "share",
  "shed",
  "shell",
  "sheriff",
  "shield",
  "shift",
  "shine",
  "ship",
  "shiver",
  "shock",
  "shoe",
  "shoot",
  "shop",
  "short",
  "shoulder",
  "shove",
  "shrimp",
  "shrug",
  "shuffle",
  "shy",
  "sibling",
  "sick",
  "side",
  "siege",
  "sight",
  "sign",
  "silent",
  "silk",
  "silly",
  "silver",
  "similar",
  "simple",
  "since",
  "sing",
  "siren",
  "sister",
  "situate",
  "six",
  "size",
  "skate",
  "sketch",
  "ski",
  "skill",
  "skin",
  "skirt",
  "skull",
  "slab",
  "slam",
  "sleep",
  "slender",
  "slice",
  "slide",
  "slight",
  "slim",
  "slogan",
  "slot",
  "slow",
  "slush",
  "small",
  "smart",
  "smile",
  "smoke",
  "smooth",
  "snack",
  "snake",
  "snap",
  "sniff",
  "snow",
  "soap",
  "soccer",
  "social",
  "sock",
  "soda",
  "soft",
  "solar",
  "soldier",
  "solid",
  "solution",
  "solve",
  "someone",
  "song",
  "soon",
  "sorry",
  "sort",
  "soul",
  "sound",
  "soup",
  "source",
  "south",
  "space",
  "spare",
  "spatial",
  "spawn",
  "speak",
  "special",
  "speed",
  "spell",
  "spend",
  "sphere",
  "spice",
  "spider",
  "spike",
  "spin",
  "spirit",
  "split",
  "spoil",
  "sponsor",
  "spoon",
  "sport",
  "spot",
  "spray",
  "spread",
  "spring",
  "spy",
  "square",
  "squeeze",
  "squirrel",
  "stable",
  "stadium",
  "staff",
  "stage",
  "stairs",
  "stamp",
  "stand",
  "start",
  "state",
  "stay",
  "steak",
  "steel",
  "stem",
  "step",
  "stereo",
  "stick",
  "still",
  "sting",
  "stock",
  "stomach",
  "stone",
  "stool",
  "story",
  "stove",
  "strategy",
  "street",
  "strike",
  "strong",
  "struggle",
  "student",
  "stuff",
  "stumble",
  "style",
  "subject",
  "submit",
  "subway",
  "success",
  "such",
  "sudden",
  "suffer",
  "sugar",
  "suggest",
  "suit",
  "summer",
  "sun",
  "sunny",
  "sunset",
  "super",
  "supply",
  "supreme",
  "sure",
  "surface",
  "surge",
  "surprise",
  "surround",
  "survey",
  "suspect",
  "sustain",
  "swallow",
  "swamp",
  "swap",
  "swarm",
  "swear",
  "sweet",
  "swift",
  "swim",
  "swing",
  "switch",
  "sword",
  "symbol",
  "symptom",
  "syrup",
  "system",
  "table",
  "tackle",
  "tag",
  "tail",
  "talent",
  "talk",
  "tank",
  "tape",
  "target",
  "task",
  "taste",
  "tattoo",
  "taxi",
  "teach",
  "team",
  "tell",
  "ten",
  "tenant",
  "tennis",
  "tent",
  "term",
  "test",
  "text",
  "thank",
  "that",
  "theme",
  "then",
  "theory",
  "there",
  "they",
  "thing",
  "this",
  "thought",
  "three",
  "thrive",
  "throw",
  "thumb",
  "thunder",
  "ticket",
  "tide",
  "tiger",
  "tilt",
  "timber",
  "time",
  "tiny",
  "tip",
  "tired",
  "tissue",
  "title",
  "toast",
  "tobacco",
  "today",
  "toddler",
  "toe",
  "together",
  "toilet",
  "token",
  "tomato",
  "tomorrow",
  "tone",
  "tongue",
  "tonight",
  "tool",
  "tooth",
  "top",
  "topic",
  "topple",
  "torch",
  "tornado",
  "tortoise",
  "toss",
  "total",
  "tourist",
  "toward",
  "tower",
  "town",
  "toy",
  "track",
  "trade",
  "traffic",
  "tragic",
  "train",
  "transfer",
  "trap",
  "trash",
  "travel",
  "tray",
  "treat",
  "tree",
  "trend",
  "trial",
  "tribe",
  "trick",
  "trigger",
  "trim",
  "trip",
  "trophy",
  "trouble",
  "truck",
  "true",
  "truly",
  "trumpet",
  "trust",
  "truth",
  "try",
  "tube",
  "tuition",
  "tumble",
  "tuna",
  "tunnel",
  "turkey",
  "turn",
  "turtle",
  "twelve",
  "twenty",
  "twice",
  "twin",
  "twist",
  "two",
  "type",
  "typical",
  "ugly",
  "umbrella",
  "unable",
  "unaware",
  "uncle",
  "uncover",
  "under",
  "undo",
  "unfair",
  "unfold",
  "unhappy",
  "uniform",
  "unique",
  "unit",
  "universe",
  "unknown",
  "unlock",
  "until",
  "unusual",
  "unveil",
  "update",
  "upgrade",
  "uphold",
  "upon",
  "upper",
  "upset",
  "urban",
  "urge",
  "usage",
  "use",
  "used",
  "useful",
  "useless",
  "usual",
  "utility",
  "vacant",
  "vacuum",
  "vague",
  "valid",
  "valley",
  "valve",
  "van",
  "vanish",
  "vapor",
  "various",
  "vast",
  "vault",
  "vehicle",
  "velvet",
  "vendor",
  "venture",
  "venue",
  "verb",
  "verify",
  "version",
  "very",
  "vessel",
  "veteran",
  "viable",
  "vibrant",
  "vicious",
  "victory",
  "video",
  "view",
  "village",
  "vintage",
  "violin",
  "virtual",
  "virus",
  "visa",
  "visit",
  "visual",
  "vital",
  "vivid",
  "vocal",
  "voice",
  "void",
  "volcano",
  "volume",
  "vote",
  "voyage",
  "wage",
  "wagon",
  "wait",
  "walk",
  "wall",
  "walnut",
  "want",
  "warfare",
  "warm",
  "warrior",
  "wash",
  "wasp",
  "waste",
  "water",
  "wave",
  "way",
  "wealth",
  "weapon",
  "wear",
  "weasel",
  "weather",
  "web",
  "wedding",
  "weekend",
  "weird",
  "welcome",
  "west",
  "wet",
  "whale",
  "what",
  "wheat",
  "wheel",
  "when",
  "where",
  "whip",
  "whisper",
  "wide",
  "width",
  "wife",
  "wild",
  "will",
  "win",
  "window",
  "wine",
  "wing",
  "wink",
  "winner",
  "winter",
  "wire",
  "wisdom",
  "wise",
  "wish",
  "witness",
  "wolf",
  "woman",
  "wonder",
  "wood",
  "wool",
  "word",
  "work",
  "world",
  "worry",
  "worth",
  "wrap",
  "wreck",
  "wrestle",
  "wrist",
  "write",
  "wrong",
  "yard",
  "year",
  "yellow",
  "you",
  "young",
  "youth",
  "zebra",
  "zero",
  "zone",
  "zoo"
];
var Language = ((Language2) => {
  Language2["english"] = "english";
  return Language2;
})(Language || {});
function getLowerMask(bits2) {
  return (1 << bits2) - 1;
}
__name11(getLowerMask, "getLowerMask");
function getUpperMask(bits2) {
  return (1 << bits2) - 1 << 8 - bits2;
}
__name11(getUpperMask, "getUpperMask");
function getWords(mnemonic) {
  if (!Array.isArray(mnemonic)) {
    return mnemonic.split(/\s+/);
  }
  return mnemonic;
}
__name11(getWords, "getWords");
function getPhrase(mnemonic) {
  if (Array.isArray(mnemonic)) {
    return mnemonic.join(" ");
  }
  return mnemonic;
}
__name11(getPhrase, "getPhrase");
function entropyToMnemonicIndices(entropy) {
  const indices = [0];
  let remainingBits = 11;
  for (let i = 0; i < entropy.length; i += 1) {
    if (remainingBits > 8) {
      indices[indices.length - 1] <<= 8;
      indices[indices.length - 1] |= entropy[i];
      remainingBits -= 8;
    } else {
      indices[indices.length - 1] <<= remainingBits;
      indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
      indices.push(entropy[i] & getLowerMask(8 - remainingBits));
      remainingBits += 3;
    }
  }
  const checksumBits = entropy.length / 4;
  const checksum = arrayify(sha2563(entropy))[0] & getUpperMask(checksumBits);
  indices[indices.length - 1] <<= checksumBits;
  indices[indices.length - 1] |= checksum >> 8 - checksumBits;
  return indices;
}
__name11(entropyToMnemonicIndices, "entropyToMnemonicIndices");
function mnemonicWordsToEntropy(words, wordlist) {
  const size = Math.ceil(11 * words.length / 8);
  const entropy = arrayify(new Uint8Array(size));
  let offset = 0;
  for (let i = 0; i < words.length; i += 1) {
    const index = wordlist.indexOf(words[i].normalize("NFKD"));
    if (index === -1) {
      throw new FuelError(
        ErrorCode.INVALID_MNEMONIC,
        `Invalid mnemonic: the word '${words[i]}' is not found in the provided wordlist.`
      );
    }
    for (let bit = 0; bit < 11; bit += 1) {
      if (index & 1 << 10 - bit) {
        entropy[offset >> 3] |= 1 << 7 - offset % 8;
      }
      offset += 1;
    }
  }
  const entropyBits = 32 * words.length / 3;
  const checksumBits = words.length / 3;
  const checksumMask = getUpperMask(checksumBits);
  const checksum = arrayify(sha2563(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
    throw new FuelError(
      ErrorCode.INVALID_CHECKSUM,
      "Checksum validation failed for the provided mnemonic."
    );
  }
  return entropy.slice(0, entropyBits / 8);
}
__name11(mnemonicWordsToEntropy, "mnemonicWordsToEntropy");
var MasterSecret = toUtf8Bytes("Bitcoin seed");
var MainnetPRV = "0x0488ade4";
var TestnetPRV = "0x04358394";
var MNEMONIC_SIZES = [12, 15, 18, 21, 24];
function assertWordList(wordlist) {
  if (wordlist.length !== 2048) {
    throw new FuelError(
      ErrorCode.INVALID_WORD_LIST,
      `Expected word list length of 2048, but got ${wordlist.length}.`
    );
  }
}
__name11(assertWordList, "assertWordList");
function assertEntropy(entropy) {
  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {
    throw new FuelError(
      ErrorCode.INVALID_ENTROPY,
      `Entropy should be between 16 and 32 bytes and a multiple of 4, but got ${entropy.length} bytes.`
    );
  }
}
__name11(assertEntropy, "assertEntropy");
function assertMnemonic(words) {
  if (!MNEMONIC_SIZES.includes(words.length)) {
    const errorMsg = `Invalid mnemonic size. Expected one of [${MNEMONIC_SIZES.join(
      ", "
    )}] words, but got ${words.length}.`;
    throw new FuelError(ErrorCode.INVALID_MNEMONIC, errorMsg);
  }
}
__name11(assertMnemonic, "assertMnemonic");
var _a74;
var Mnemonic = (_a74 = class {
  /**
   *
   * @param wordlist - Provide a wordlist with the list of words used to generate the mnemonic phrase. The default value is the English list.
   * @returns Mnemonic instance
   */
  constructor(wordlist = english) {
    __publicField(this, "wordlist");
    this.wordlist = wordlist;
    assertWordList(this.wordlist);
  }
  /**
   *
   * @param phrase - Mnemonic phrase composed by words from the provided wordlist
   * @returns Entropy hash
   */
  mnemonicToEntropy(phrase) {
    return _a74.mnemonicToEntropy(phrase, this.wordlist);
  }
  /**
   *
   * @param entropy - Entropy source to the mnemonic phrase.
   * @returns Mnemonic phrase
   */
  entropyToMnemonic(entropy) {
    return _a74.entropyToMnemonic(entropy, this.wordlist);
  }
  /**
   *
   * @param phrase - Mnemonic phrase composed by words from the provided wordlist
   * @param wordlist - Provide a wordlist with the list of words used to generate the mnemonic phrase. The default value is the English list.
   * @returns Mnemonic phrase
   */
  static mnemonicToEntropy(phrase, wordlist = english) {
    const words = getWords(phrase);
    assertMnemonic(words);
    return hexlify(mnemonicWordsToEntropy(words, wordlist));
  }
  /**
   * @param entropy - Entropy source to the mnemonic phrase.
   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).
   * @returns 64-byte array contains privateKey and chainCode as described on BIP39
   */
  static entropyToMnemonic(entropy, wordlist = english) {
    const entropyBytes = arrayify(entropy);
    assertWordList(wordlist);
    assertEntropy(entropyBytes);
    return entropyToMnemonicIndices(entropyBytes).map((i) => wordlist[i]).join(" ");
  }
  /**
   * @param phrase - Mnemonic phrase composed by words from the provided wordlist
   * @param passphrase - Add additional security to protect the generated seed with a memorized passphrase. `Note: if the owner forgot the passphrase, all wallets and accounts derive from the phrase will be lost.`
   * @returns 64-byte array contains privateKey and chainCode as described on BIP39
   */
  static mnemonicToSeed(phrase, passphrase = "") {
    assertMnemonic(getWords(phrase));
    const phraseBytes = toUtf8Bytes(getPhrase(phrase));
    const salt = toUtf8Bytes(`mnemonic${passphrase}`);
    return pbkdf222(phraseBytes, salt, 2048, 64, "sha512");
  }
  /**
   * @param phrase - Mnemonic phrase composed by words from the provided wordlist
   * @param passphrase - Add additional security to protect the generated seed with a memorized passphrase. `Note: if the owner forgot the passphrase, all wallets and accounts derive from the phrase will be lost.`
   * @returns 64-byte array contains privateKey and chainCode as described on BIP39
   */
  static mnemonicToMasterKeys(phrase, passphrase = "") {
    const seed = _a74.mnemonicToSeed(phrase, passphrase);
    return _a74.masterKeysFromSeed(seed);
  }
  /**
   * Validates if given mnemonic is  valid
   * @param phrase - Mnemonic phrase composed by words from the provided wordlist
   * @returns true if phrase is a valid mnemonic
   */
  static isMnemonicValid(phrase) {
    const words = getWords(phrase);
    let i = 0;
    try {
      assertMnemonic(words);
    } catch {
      return false;
    }
    while (i < words.length) {
      if (_a74.binarySearch(words[i]) === false) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  static binarySearch(target) {
    const words = english;
    let left = 0;
    let right = words.length - 1;
    while (left <= right) {
      const mid = Math.floor((left + right) / 2);
      if (words[mid] === target) {
        return true;
      }
      if (target < words[mid]) {
        right = mid - 1;
      } else {
        left = mid + 1;
      }
    }
    return false;
  }
  /**
   * @param seed - BIP39 seed
   * @param testnet - Inform if should use testnet or mainnet prefix, the default value is true (`mainnet`).
   * @returns 64-byte array contains privateKey and chainCode as described on BIP39
   */
  static masterKeysFromSeed(seed) {
    const seedArray = arrayify(seed);
    if (seedArray.length < 16 || seedArray.length > 64) {
      throw new FuelError(
        ErrorCode.INVALID_SEED,
        `Seed length should be between 16 and 64 bytes, but received ${seedArray.length} bytes.`
      );
    }
    return arrayify(computeHmac2("sha512", MasterSecret, seedArray));
  }
  /**
   * Get the extendKey as defined on BIP-32 from the provided seed
   *
   * @param seed - BIP39 seed
   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).
   * @returns BIP-32 extended private key
   */
  static seedToExtendedKey(seed, testnet = false) {
    const masterKey = _a74.masterKeysFromSeed(seed);
    const prefix = arrayify(testnet ? TestnetPRV : MainnetPRV);
    const depth = "0x00";
    const fingerprint = "0x00000000";
    const index = "0x00000000";
    const chainCode = masterKey.slice(32);
    const privateKey = masterKey.slice(0, 32);
    const extendedKey = concat([
      prefix,
      depth,
      fingerprint,
      index,
      chainCode,
      concat(["0x00", privateKey])
    ]);
    const checksum = dataSlice(sha2563(sha2563(extendedKey)), 0, 4);
    return encodeBase58(concat([extendedKey, checksum]));
  }
  /**
   *  Create a new mnemonic using a randomly generated number as entropy.
   *  As defined in BIP39, the entropy must be a multiple of 32 bits, and its size must be between 128 and 256 bits.
   *  Therefore, the possible values for `strength` are 128, 160, 192, 224, and 256.
   *  If not provided, the default entropy length will be set to 256 bits.
   *  The return is a list of words that encodes the generated entropy.
   *
   *
   * @param size - Number of bytes used as an entropy
   * @param extraEntropy - Optional extra entropy to increase randomness
   * @returns A randomly generated mnemonic
   */
  static generate(size = 32, extraEntropy = "") {
    const entropy = extraEntropy ? sha2563(concat([randomBytes2(size), arrayify(extraEntropy)])) : randomBytes2(size);
    return _a74.entropyToMnemonic(entropy);
  }
}, __name11(_a74, "Mnemonic"), _a74);
var mnemonic_default = Mnemonic;
var HARDENED_INDEX = 2147483648;
var MainnetPRV2 = hexlify("0x0488ade4");
var MainnetPUB = hexlify("0x0488b21e");
var TestnetPRV2 = hexlify("0x04358394");
var TestnetPUB = hexlify("0x043587cf");
function base58check(data) {
  return encodeBase58(concat([data, dataSlice(sha2563(sha2563(data)), 0, 4)]));
}
__name11(base58check, "base58check");
function getExtendedKeyPrefix(isPublic = false, testnet = false) {
  if (isPublic) {
    return testnet ? TestnetPUB : MainnetPUB;
  }
  return testnet ? TestnetPRV2 : MainnetPRV2;
}
__name11(getExtendedKeyPrefix, "getExtendedKeyPrefix");
function isPublicExtendedKey(extendedKey) {
  return [MainnetPUB, TestnetPUB].includes(hexlify(extendedKey.slice(0, 4)));
}
__name11(isPublicExtendedKey, "isPublicExtendedKey");
function isValidExtendedKey(extendedKey) {
  return [MainnetPRV2, TestnetPRV2, MainnetPUB, TestnetPUB].includes(
    hexlify(extendedKey.slice(0, 4))
  );
}
__name11(isValidExtendedKey, "isValidExtendedKey");
function parsePath(path2, depth = 0) {
  const components = path2.split("/");
  if (components.length === 0 || components[0] === "m" && depth !== 0) {
    throw new FuelError(ErrorCode.HD_WALLET_ERROR, `invalid path - ${path2}`);
  }
  if (components[0] === "m") {
    components.shift();
  }
  return components.map(
    (p) => ~p.indexOf(`'`) ? parseInt(p, 10) + HARDENED_INDEX : parseInt(p, 10)
  );
}
__name11(parsePath, "parsePath");
var _a75;
var HDWallet = (_a75 = class {
  /**
   * HDWallet is a implementation of the BIP-0044 and BIP-0032, Multi-Account Hierarchy for Deterministic Wallets
   *
   * @param config - Wallet configurations
   */
  constructor(config) {
    __publicField(this, "depth", 0);
    __publicField(this, "index", 0);
    __publicField(this, "fingerprint", hexlify("0x00000000"));
    __publicField(this, "parentFingerprint", hexlify("0x00000000"));
    __publicField(this, "privateKey");
    __publicField(this, "publicKey");
    __publicField(this, "chainCode");
    if (config.privateKey) {
      const signer = new Signer(config.privateKey);
      this.publicKey = hexlify(signer.compressedPublicKey);
      this.privateKey = hexlify(config.privateKey);
    } else {
      if (!config.publicKey) {
        throw new FuelError(
          ErrorCode.HD_WALLET_ERROR,
          "Both public and private Key cannot be missing. At least one should be provided."
        );
      }
      this.publicKey = hexlify(config.publicKey);
    }
    this.parentFingerprint = config.parentFingerprint || this.parentFingerprint;
    this.fingerprint = dataSlice(ripemd16022(sha2563(this.publicKey)), 0, 4);
    this.depth = config.depth || this.depth;
    this.index = config.index || this.index;
    this.chainCode = config.chainCode;
  }
  get extendedKey() {
    return this.toExtendedKey();
  }
  /**
   * Derive the current HDWallet instance navigating only on the index.
   * `Ex.: m/44'/0 -> Ex.: m/44'/1 -> m/44'/2`. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)
   *
   * @param index - Index of the child HDWallet.
   * @returns A new instance of HDWallet on the derived index
   */
  deriveIndex(index) {
    const privateKey = this.privateKey && arrayify(this.privateKey);
    const publicKey = arrayify(this.publicKey);
    const chainCode = arrayify(this.chainCode);
    const data = new Uint8Array(37);
    if (index & HARDENED_INDEX) {
      if (!privateKey) {
        throw new FuelError(
          ErrorCode.HD_WALLET_ERROR,
          "Cannot derive a hardened index without a private Key."
        );
      }
      data.set(privateKey, 1);
    } else {
      data.set(arrayify(this.publicKey));
    }
    data.set(toBytes(index, 4), 33);
    const bytes = arrayify(computeHmac2("sha512", chainCode, data));
    const IL = bytes.slice(0, 32);
    const IR = bytes.slice(32);
    if (privateKey) {
      const N = "0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
      const ki = bn(IL).add(privateKey).mod(N).toBytes(32);
      return new _a75({
        privateKey: ki,
        chainCode: IR,
        index,
        depth: this.depth + 1,
        parentFingerprint: this.fingerprint
      });
    }
    const signer = new Signer(hexlify(IL));
    const Ki = signer.addPoint(publicKey);
    return new _a75({
      publicKey: Ki,
      chainCode: IR,
      index,
      depth: this.depth + 1,
      parentFingerprint: this.fingerprint
    });
  }
  /**
   * Derive the current HDWallet instance to the path. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)
   *
   * @param path - The string representation of the child HDWallet. `Ex.: m/44'/0'/0'/0/0`
   * @returns A new instance of HDWallet on the derived path
   */
  derivePath(path2) {
    const paths3 = parsePath(path2, this.depth);
    return paths3.reduce((hdwallet, index) => hdwallet.deriveIndex(index), this);
  }
  /**
   * Get the extendKey as defined on BIP-32 from the provided seed
   *
   * @param isPublic - enable to export public extendedKey, it not required when HDWallet didn't have the privateKey.
   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).
   * @returns BIP-32 extended private key
   */
  toExtendedKey(isPublic = false, testnet = false) {
    if (this.depth >= 256) {
      throw new FuelError(
        ErrorCode.HD_WALLET_ERROR,
        `Exceeded max depth of 255. Current depth: ${this.depth}.`
      );
    }
    const prefix = getExtendedKeyPrefix(this.privateKey == null || isPublic, testnet);
    const depth = hexlify(Uint8Array.from([this.depth]));
    const parentFingerprint = this.parentFingerprint;
    const index = toHex(this.index, 4);
    const chainCode = this.chainCode;
    const key = this.privateKey != null && !isPublic ? concat(["0x00", this.privateKey]) : this.publicKey;
    const extendedKey = arrayify(concat([prefix, depth, parentFingerprint, index, chainCode, key]));
    return base58check(extendedKey);
  }
  /**
   * Create HDWallet instance from seed
   *
   * @param seed - Seed
   * @returns A new instance of HDWallet
   */
  static fromSeed(seed) {
    const masterKey = mnemonic_default.masterKeysFromSeed(seed);
    return new _a75({
      chainCode: arrayify(masterKey.slice(32)),
      privateKey: arrayify(masterKey.slice(0, 32))
    });
  }
  static fromExtendedKey(extendedKey) {
    const decoded = hexlify(toBytes(decodeBase58(extendedKey)));
    const bytes = arrayify(decoded);
    const validChecksum = base58check(bytes.slice(0, 78)) === extendedKey;
    if (bytes.length !== 82 || !isValidExtendedKey(bytes)) {
      throw new FuelError(ErrorCode.HD_WALLET_ERROR, "Provided key is not a valid extended key.");
    }
    if (!validChecksum) {
      throw new FuelError(ErrorCode.HD_WALLET_ERROR, "Provided key has an invalid checksum.");
    }
    const depth = bytes[4];
    const parentFingerprint = hexlify(bytes.slice(5, 9));
    const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);
    const chainCode = hexlify(bytes.slice(13, 45));
    const key = bytes.slice(45, 78);
    if (depth === 0 && parentFingerprint !== "0x00000000" || depth === 0 && index !== 0) {
      throw new FuelError(
        ErrorCode.HD_WALLET_ERROR,
        "Inconsistency detected: Depth is zero but fingerprint/index is non-zero."
      );
    }
    if (isPublicExtendedKey(bytes)) {
      if (key[0] !== 3) {
        throw new FuelError(ErrorCode.HD_WALLET_ERROR, "Invalid public extended key.");
      }
      return new _a75({
        publicKey: key,
        chainCode,
        index,
        depth,
        parentFingerprint
      });
    }
    if (key[0] !== 0) {
      throw new FuelError(ErrorCode.HD_WALLET_ERROR, "Invalid private extended key.");
    }
    return new _a75({
      privateKey: key.slice(1),
      chainCode,
      index,
      depth,
      parentFingerprint
    });
  }
}, __name11(_a75, "HDWallet"), _a75);
var hdwallet_default = HDWallet;
var _a76;
var WalletLocked = (_a76 = class extends Account {
  /**
   * Unlocks the wallet using the provided private key and returns an instance of WalletUnlocked.
   *
   * @param privateKey - The private key used to unlock the wallet.
   * @returns An instance of WalletUnlocked.
   */
  unlock(privateKey) {
    return new WalletUnlocked(privateKey, this._provider);
  }
}, __name11(_a76, "WalletLocked"), _a76);
var _a77;
var WalletUnlocked = (_a77 = class extends BaseWalletUnlocked {
  /**
   * Locks the wallet and returns an instance of WalletLocked.
   *
   * @returns An instance of WalletLocked.
   */
  lock() {
    this.signer = () => new Signer("0x00");
    return new WalletLocked(this.address, this._provider);
  }
  /**
   * Generate a new Wallet Unlocked with a random key pair.
   *
   * @param generateOptions - Options to customize the generation process (optional).
   * @returns An instance of WalletUnlocked.
   */
  static generate(generateOptions) {
    const privateKey = Signer.generatePrivateKey(generateOptions == null ? void 0 : generateOptions.entropy);
    return new _a77(privateKey, generateOptions == null ? void 0 : generateOptions.provider);
  }
  /**
   * Create a Wallet Unlocked from a seed.
   *
   * @param seed - The seed phrase.
   * @param provider - A Provider instance (optional).
   * @param path - The derivation path (optional).
   * @returns An instance of WalletUnlocked.
   */
  static fromSeed(seed, path2, provider) {
    const hdWallet = hdwallet_default.fromSeed(seed);
    const childWallet = hdWallet.derivePath(path2 || _a77.defaultPath);
    return new _a77(childWallet.privateKey, provider);
  }
  /**
   * Create a Wallet Unlocked from a mnemonic phrase.
   *
   * @param mnemonic - The mnemonic phrase.
   * @param provider - A Provider instance (optional).
   * @param path - The derivation path (optional).
   * @param passphrase - The passphrase for the mnemonic (optional).
   * @returns An instance of WalletUnlocked.
   */
  static fromMnemonic(mnemonic, path2, passphrase, provider) {
    const seed = mnemonic_default.mnemonicToSeed(mnemonic, passphrase);
    const hdWallet = hdwallet_default.fromSeed(seed);
    const childWallet = hdWallet.derivePath(path2 || _a77.defaultPath);
    return new _a77(childWallet.privateKey, provider);
  }
  /**
   * Create a Wallet Unlocked from an extended key.
   *
   * @param extendedKey - The extended key.
   * @param provider - A Provider instance (optional).
   * @returns An instance of WalletUnlocked.
   */
  static fromExtendedKey(extendedKey, provider) {
    const hdWallet = hdwallet_default.fromExtendedKey(extendedKey);
    return new _a77(hdWallet.privateKey, provider);
  }
  /**
   * Create a Wallet Unlocked from an encrypted JSON.
   *
   * @param jsonWallet - The encrypted JSON keystore.
   * @param password - The password to decrypt the JSON.
   * @param provider - A Provider instance (optional).
   * @returns An unlocked wallet instance.
   */
  static async fromEncryptedJson(jsonWallet, password, provider) {
    const privateKey = await decryptKeystoreWallet(jsonWallet, password);
    return new _a77(privateKey, provider);
  }
}, __name11(_a77, "WalletUnlocked"), _a77);
var _a78;
var Wallet = (_a78 = class {
  /**
   * Creates a locked wallet instance from an address and a provider.
   *
   * @param address - The address of the wallet.
   * @param provider - A Provider instance (optional).
   * @returns A locked wallet instance.
   */
  static fromAddress(address, provider) {
    return new WalletLocked(address, provider);
  }
  /**
   * Creates an unlocked wallet instance from a private key and a provider.
   *
   * @param privateKey - The private key of the wallet.
   * @param provider - A Provider instance (optional).
   * @returns An unlocked wallet instance.
   */
  static fromPrivateKey(privateKey, provider) {
    return new WalletUnlocked(privateKey, provider);
  }
}, __name11(_a78, "Wallet"), /**
 * Generate a new Wallet Unlocked with a random key pair.
 *
 * @param generateOptions - Options to customize the generation process (optional).
 * @returns An unlocked wallet instance.
 */
__publicField(_a78, "generate", WalletUnlocked.generate), /**
 * Create a Wallet Unlocked from a seed.
 *
 * @param seed - The seed phrase.
 * @param provider - A Provider instance (optional).
 * @param path - The derivation path (optional).
 * @returns An unlocked wallet instance.
 */
__publicField(_a78, "fromSeed", WalletUnlocked.fromSeed), /**
 * Create a Wallet Unlocked from a mnemonic phrase.
 *
 * @param mnemonic - The mnemonic phrase.
 * @param provider - A Provider instance (optional).
 * @param path - The derivation path (optional).
 * @param passphrase - The passphrase for the mnemonic (optional).
 * @returns An unlocked wallet instance.
 */
__publicField(_a78, "fromMnemonic", WalletUnlocked.fromMnemonic), /**
 * Create a Wallet Unlocked from an extended key.
 *
 * @param extendedKey - The extended key.
 * @param provider - A Provider instance (optional).
 * @returns An unlocked wallet instance.
 */
__publicField(_a78, "fromExtendedKey", WalletUnlocked.fromExtendedKey), /**
 * Create a Wallet Unlocked from an encrypted JSON.
 *
 * @param jsonWallet - The encrypted JSON keystore.
 * @param password - The password to decrypt the JSON.
 * @param provider - A Provider instance (optional).
 * @returns An unlocked wallet instance.
 */
__publicField(_a78, "fromEncryptedJson", WalletUnlocked.fromEncryptedJson), _a78);
var _a79;
var MemoryStorage = (_a79 = class {
  constructor() {
    __publicField(this, "storage", /* @__PURE__ */ new Map());
  }
  async getItem(key) {
    const item = await this.storage.get(key);
    return item;
  }
  async setItem(key, value) {
    await this.storage.set(key, value);
  }
  async removeItem(key) {
    await this.storage.delete(key);
  }
  async clear() {
    await this.storage.clear();
  }
}, __name11(_a79, "MemoryStorage"), _a79);
var _a80, _secret;
var MnemonicVault = (_a80 = class {
  constructor(options) {
    __privateAdd(this, _secret);
    __publicField(this, "pathKey", "{}");
    __publicField(this, "rootPath", `m/44'/1179993420'/${this.pathKey}'/0/0`);
    __publicField(this, "numberOfAccounts", 0);
    __privateSet(this, _secret, options.secret || mnemonic_default.generate());
    this.rootPath = options.rootPath || this.rootPath;
    this.numberOfAccounts = options.numberOfAccounts || 1;
  }
  getDerivePath(index) {
    if (this.rootPath.includes(this.pathKey)) {
      return this.rootPath.replace(this.pathKey, String(index));
    }
    return `${this.rootPath}/${index}`;
  }
  serialize() {
    return {
      secret: __privateGet(this, _secret),
      rootPath: this.rootPath,
      numberOfAccounts: this.numberOfAccounts
    };
  }
  getAccounts() {
    const accounts = [];
    let numberOfAccounts = 0;
    do {
      const wallet = Wallet.fromMnemonic(__privateGet(this, _secret), this.getDerivePath(numberOfAccounts));
      accounts.push({
        publicKey: wallet.publicKey,
        address: wallet.address
      });
      numberOfAccounts += 1;
    } while (numberOfAccounts < this.numberOfAccounts);
    return accounts;
  }
  addAccount() {
    this.numberOfAccounts += 1;
    const wallet = Wallet.fromMnemonic(__privateGet(this, _secret), this.getDerivePath(this.numberOfAccounts - 1));
    return {
      publicKey: wallet.publicKey,
      address: wallet.address
    };
  }
  exportAccount(address) {
    let numberOfAccounts = 0;
    const ownerAddress = new Address(address);
    do {
      const wallet = Wallet.fromMnemonic(__privateGet(this, _secret), this.getDerivePath(numberOfAccounts));
      if (wallet.address.equals(ownerAddress)) {
        return wallet.privateKey;
      }
      numberOfAccounts += 1;
    } while (numberOfAccounts < this.numberOfAccounts);
    throw new FuelError(
      ErrorCode.WALLET_MANAGER_ERROR,
      `Account with address '${address}' not found in derived wallets.`
    );
  }
  getWallet(address) {
    const privateKey = this.exportAccount(address);
    return Wallet.fromPrivateKey(privateKey);
  }
}, _secret = new WeakMap(), __name11(_a80, "MnemonicVault"), __publicField(_a80, "type", "mnemonic"), _a80);
var _a81, _privateKeys;
var PrivateKeyVault = (_a81 = class {
  /**
   * If privateKey vault is initialized with a secretKey, it creates
   * one account with the fallowing secret
   */
  constructor(options = {}) {
    __privateAdd(this, _privateKeys, []);
    if (options.secret) {
      __privateSet(this, _privateKeys, [options.secret]);
    } else {
      __privateSet(this, _privateKeys, options.accounts || [Wallet.generate().privateKey]);
    }
  }
  serialize() {
    return {
      accounts: __privateGet(this, _privateKeys)
    };
  }
  getPublicAccount(privateKey) {
    const wallet = Wallet.fromPrivateKey(privateKey);
    return {
      address: wallet.address,
      publicKey: wallet.publicKey
    };
  }
  getAccounts() {
    return __privateGet(this, _privateKeys).map((pk) => this.getPublicAccount(pk));
  }
  addAccount() {
    const wallet = Wallet.generate();
    __privateGet(this, _privateKeys).push(wallet.privateKey);
    return this.getPublicAccount(wallet.privateKey);
  }
  exportAccount(address) {
    const ownerAddress = new Address(address);
    const privateKey = __privateGet(this, _privateKeys).find(
      (pk) => Wallet.fromPrivateKey(pk).address.equals(ownerAddress)
    );
    if (!privateKey) {
      throw new FuelError(
        ErrorCode.WALLET_MANAGER_ERROR,
        `No private key found for address '${address}'.`
      );
    }
    return privateKey;
  }
  getWallet(address) {
    const privateKey = this.exportAccount(address);
    return Wallet.fromPrivateKey(privateKey);
  }
}, _privateKeys = new WeakMap(), __name11(_a81, "PrivateKeyVault"), __publicField(_a81, "type", "privateKey"), _a81);
var ERROR_MESSAGES = {
  invalid_vault_type: "The provided Vault type is invalid.",
  address_not_found: "No private key found for address the specified wallet address.",
  vault_not_found: "The specified vault was not found.",
  wallet_not_unlocked: "The wallet is currently locked.",
  passphrase_not_match: "The provided passphrase did not match the expected value."
};
function assert(condition, message) {
  if (!condition) {
    throw new FuelError(ErrorCode.WALLET_MANAGER_ERROR, message);
  }
}
__name11(assert, "assert");
var _a82, _vaults, _passphrase, _isLocked, __WalletManager_instances, serializeVaults_fn, deserializeVaults_fn;
var WalletManager = (_a82 = class extends import_events.EventEmitter {
  constructor(options) {
    super();
    __privateAdd(this, __WalletManager_instances);
    /**
     * Storage
     *
     * Persistent encrypted data. `The default storage works only on memory`.
     */
    __publicField(this, "storage", new MemoryStorage());
    /* Key name passed to the storage */
    __publicField(this, "STORAGE_KEY", "WalletManager");
    // `This variables are only accessible from inside the class`
    __privateAdd(this, _vaults, []);
    __privateAdd(this, _passphrase, "");
    __privateAdd(this, _isLocked, true);
    this.storage = (options == null ? void 0 : options.storage) || this.storage;
  }
  get isLocked() {
    return __privateGet(this, _isLocked);
  }
  /**
   * Return the vault serialized object containing all the privateKeys,
   * the format of the return depends on the Vault type.
   */
  exportVault(vaultId) {
    assert(!__privateGet(this, _isLocked), ERROR_MESSAGES.wallet_not_unlocked);
    const vaultState = __privateGet(this, _vaults).find((_, idx) => idx === vaultId);
    assert(vaultState, ERROR_MESSAGES.vault_not_found);
    return vaultState.vault.serialize();
  }
  /**
   * List all vaults on the Wallet Manager, this function not return secret's
   */
  getVaults() {
    return __privateGet(this, _vaults).map((v, idx) => ({
      title: v.title,
      type: v.type,
      vaultId: idx
    }));
  }
  /**
   * List all accounts on the Wallet Manager not vault information is revealed
   */
  getAccounts() {
    return __privateGet(this, _vaults).flatMap(
      (vaultState, vaultId) => vaultState.vault.getAccounts().map((account) => ({ ...account, vaultId }))
    );
  }
  /**
   * Create a Wallet instance for the specific account
   */
  getWallet(address) {
    const ownerAddress = new Address(address);
    const vaultState = __privateGet(this, _vaults).find(
      (vs) => vs.vault.getAccounts().find((a) => a.address.equals(ownerAddress))
    );
    assert(vaultState, ERROR_MESSAGES.address_not_found);
    return vaultState.vault.getWallet(ownerAddress);
  }
  /**
   * Export specific account privateKey
   */
  exportPrivateKey(address) {
    const ownerAddress = new Address(address);
    assert(!__privateGet(this, _isLocked), ERROR_MESSAGES.wallet_not_unlocked);
    const vaultState = __privateGet(this, _vaults).find(
      (vs) => vs.vault.getAccounts().find((a) => a.address.equals(ownerAddress))
    );
    assert(vaultState, ERROR_MESSAGES.address_not_found);
    return vaultState.vault.exportAccount(ownerAddress);
  }
  /**
   * Add account to a selected vault or on the first vault as default.
   * If not vaults are adds it will return error
   */
  async addAccount(options) {
    await this.loadState();
    const vaultState = __privateGet(this, _vaults)[(options == null ? void 0 : options.vaultId) || 0];
    await assert(vaultState, ERROR_MESSAGES.vault_not_found);
    const account = vaultState.vault.addAccount();
    await this.saveState();
    return account;
  }
  /**
   * Remove vault by index, by remove the vault you also remove all accounts
   * created by the vault.
   */
  async removeVault(index) {
    __privateGet(this, _vaults).splice(index, 1);
    await this.saveState();
  }
  /**
   * Add Vault, the `vaultConfig.type` will look for the Vaults supported if
   * didn't found it will throw.
   */
  async addVault(vaultConfig) {
    await this.loadState();
    const Vault2 = this.getVaultClass(vaultConfig.type);
    const vault = new Vault2(vaultConfig);
    __privateSet(this, _vaults, __privateGet(this, _vaults).concat({
      title: vaultConfig.title,
      type: vaultConfig.type,
      vault
    }));
    await this.saveState();
  }
  /**
   * Lock wallet. It removes passphrase from class instance, encrypt and hide all address and
   * secrets.
   */
  lock() {
    __privateSet(this, _isLocked, true);
    __privateSet(this, _vaults, []);
    __privateSet(this, _passphrase, "");
    this.emit("lock");
  }
  /**
   * Unlock wallet. It sets passphrase on WalletManger instance load all address from configured vaults.
   * Vaults with secrets are not unlocked or instantiated on this moment.
   */
  async unlock(passphrase) {
    __privateSet(this, _passphrase, passphrase);
    __privateSet(this, _isLocked, false);
    try {
      await this.loadState();
      this.emit("unlock");
    } catch (err2) {
      await this.lock();
      throw err2;
    }
  }
  /**
   * Update WalletManager encryption passphrase
   */
  async updatePassphrase(oldpass, newpass) {
    const isLocked = __privateGet(this, _isLocked);
    await this.unlock(oldpass);
    __privateSet(this, _passphrase, newpass);
    await this.saveState();
    await this.loadState();
    if (isLocked) {
      await this.lock();
    }
  }
  /**
   * Retrieve and decrypt WalletManager state from storage
   */
  async loadState() {
    await assert(!__privateGet(this, _isLocked), ERROR_MESSAGES.wallet_not_unlocked);
    const data = await this.storage.getItem(this.STORAGE_KEY);
    if (data) {
      const state = await decrypt2(__privateGet(this, _passphrase), JSON.parse(data));
      __privateSet(this, _vaults, __privateMethod(this, __WalletManager_instances, deserializeVaults_fn).call(this, state.vaults));
    }
  }
  /**
   * Store encrypted WalletManager state on storage
   */
  async saveState() {
    await assert(!__privateGet(this, _isLocked), ERROR_MESSAGES.wallet_not_unlocked);
    const encryptedData = await encrypt2(__privateGet(this, _passphrase), {
      vaults: __privateMethod(this, __WalletManager_instances, serializeVaults_fn).call(this, __privateGet(this, _vaults))
    });
    await this.storage.setItem(this.STORAGE_KEY, JSON.stringify(encryptedData));
    this.emit("update");
  }
  /**
   * Return a instantiable Class reference from `WalletManager.Vaults` supported list.
   */
  getVaultClass(type3) {
    const VaultClass = _a82.Vaults.find((v) => v.type === type3);
    assert(VaultClass, ERROR_MESSAGES.invalid_vault_type);
    return VaultClass;
  }
}, _vaults = new WeakMap(), _passphrase = new WeakMap(), _isLocked = new WeakMap(), __WalletManager_instances = new WeakSet(), /**
 * Serialize all vaults to store
 *
 * `This is only accessible from inside the class`
 */
serializeVaults_fn = function(vaults) {
  return vaults.map(({ title, type: type3, vault }) => ({
    title,
    type: type3,
    data: vault.serialize()
  }));
}, /**
 * Deserialize all vaults to state
 *
 * `This is only accessible from inside the class`
 */
deserializeVaults_fn = function(vaults) {
  return vaults.map(({ title, type: type3, data: vaultConfig }) => {
    const VaultClass = this.getVaultClass(type3);
    return {
      title,
      type: type3,
      vault: new VaultClass(vaultConfig)
    };
  });
}, __name11(_a82, "WalletManager"), /**
 * Vaults
 *
 * Vaults are responsible to store secret keys and return an `Wallet` instance,
 * to interact with the network.
 *
 * Each vault has access to its own state
 *
 */
__publicField(_a82, "Vaults", [MnemonicVault, PrivateKeyVault]), _a82);
var _a83;
var Vault = (_a83 = class {
  constructor(_options) {
    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, "Not implemented.");
  }
  serialize() {
    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, "Not implemented.");
  }
  getAccounts() {
    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, "Not implemented.");
  }
  addAccount() {
    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, "Not implemented.");
  }
  exportAccount(_address) {
    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, "Not implemented.");
  }
  getWallet(_address) {
    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, "Not implemented.");
  }
}, __name11(_a83, "Vault"), __publicField(_a83, "type"), _a83);
var _a84;
var StorageAbstract = (_a84 = class {
}, __name11(_a84, "StorageAbstract"), _a84);
var BLOB_ID_SIZE = 32;
var REG_ADDRESS_OF_DATA_AFTER_CODE = 16;
var REG_START_OF_LOADED_CODE = 17;
var REG_GENERAL_USE = 18;
var WORD_SIZE2 = 8;
var DATA_OFFSET_INDEX = 8;
var CONFIGURABLE_OFFSET_INDEX = 16;
function getBytecodeDataOffset(bytecode2) {
  const [offset] = new BigNumberCoder("u64").decode(bytecode2, DATA_OFFSET_INDEX);
  return offset.toNumber();
}
__name11(getBytecodeDataOffset, "getBytecodeDataOffset");
function getBytecodeConfigurableOffset(bytecode2) {
  const [offset] = new BigNumberCoder("u64").decode(bytecode2, CONFIGURABLE_OFFSET_INDEX);
  return offset.toNumber();
}
__name11(getBytecodeConfigurableOffset, "getBytecodeConfigurableOffset");
function getBytecodeId(bytecode2) {
  const configurableOffset = getBytecodeConfigurableOffset(bytecode2);
  const byteCodeWithoutConfigurableSection = bytecode2.slice(0, configurableOffset);
  return sha2563(byteCodeWithoutConfigurableSection);
}
__name11(getBytecodeId, "getBytecodeId");
function getLegacyBlobId(bytecode2) {
  const dataOffset = getBytecodeDataOffset(bytecode2);
  const byteCodeWithoutDataSection = bytecode2.slice(0, dataOffset);
  return sha2563(byteCodeWithoutDataSection);
}
__name11(getLegacyBlobId, "getLegacyBlobId");
function getPredicateScriptLoaderInstructions(originalBinary, blobId) {
  const { RegId: RegId2, Instruction: Instruction2 } = web_exports;
  const REG_PC = RegId2.pc().to_u8();
  const REG_SP = RegId2.sp().to_u8();
  const REG_IS = RegId2.is().to_u8();
  const getInstructions2 = __name11((numOfInstructions2) => [
    // 1. Load the blob content into memory
    // Find the start of the hardcoded blob ID, which is located after the loader code ends.
    move_(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_PC),
    // hold the address of the blob ID.
    addi(
      REG_ADDRESS_OF_DATA_AFTER_CODE,
      REG_ADDRESS_OF_DATA_AFTER_CODE,
      numOfInstructions2 * Instruction2.size()
    ),
    // The code is going to be loaded from the current value of SP onwards, save
    // the location into REG_START_OF_LOADED_CODE so we can jump into it at the end.
    move_(REG_START_OF_LOADED_CODE, REG_SP),
    // REG_GENERAL_USE to hold the size of the blob.
    bsiz(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE),
    // Push the blob contents onto the stack.
    ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 1),
    // Move on to the data section length
    addi(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_ADDRESS_OF_DATA_AFTER_CODE, BLOB_ID_SIZE),
    // load the size of the data section into REG_GENERAL_USE
    lw(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE, 0),
    // after we have read the length of the data section, we move the pointer to the actual
    // data by skipping WORD_SIZE bytes.
    addi(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_ADDRESS_OF_DATA_AFTER_CODE, WORD_SIZE2),
    // load the data section of the executable
    ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 2),
    // Jump into the memory where the contract is loaded.
    // What follows is called _jmp_mem by the sway compiler.
    // Subtract the address contained in IS because jmp will add it back.
    sub(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, REG_IS),
    // jmp will multiply by 4, so we need to divide to cancel that out.
    divi(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, 4),
    // Jump to the start of the contract we loaded.
    jmp(REG_START_OF_LOADED_CODE)
  ], "getInstructions");
  const getInstructionsNoDataSection = __name11((numOfInstructions2) => [
    // 1. Load the blob content into memory
    // Find the start of the hardcoded blob ID, which is located after the loader code ends.
    // 1. Load the blob content into memory
    // Find the start of the hardcoded blob ID, which is located after the loader code ends.
    move_(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_PC),
    // hold the address of the blob ID.
    addi(
      REG_ADDRESS_OF_DATA_AFTER_CODE,
      REG_ADDRESS_OF_DATA_AFTER_CODE,
      numOfInstructions2 * Instruction2.size()
    ),
    // The code is going to be loaded from the current value of SP onwards, save
    // the location into REG_START_OF_LOADED_CODE so we can jump into it at the end.
    move_(REG_START_OF_LOADED_CODE, REG_SP),
    // REG_GENERAL_USE to hold the size of the blob.
    bsiz(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE),
    // Push the blob contents onto the stack.
    ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 1),
    // Jump into the memory where the contract is loaded.
    // What follows is called _jmp_mem by the sway compiler.
    // Subtract the address contained in IS because jmp will add it back.
    sub(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, REG_IS),
    // jmp will multiply by 4, so we need to divide to cancel that out.
    divi(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, 4),
    // Jump to the start of the contract we loaded.
    jmp(REG_START_OF_LOADED_CODE)
  ], "getInstructionsNoDataSection");
  const offset = getBytecodeConfigurableOffset(originalBinary);
  if (originalBinary.length < offset) {
    throw new Error(
      `Data section offset is out of bounds, offset: ${offset}, binary length: ${originalBinary.length}`
    );
  }
  const configurableSection = originalBinary.slice(offset);
  if (configurableSection.length > 0) {
    const numOfInstructions2 = getInstructions2(0).length;
    if (numOfInstructions2 > 65535) {
      throw new Error("Too many instructions, exceeding u16::MAX.");
    }
    const instructionBytes2 = new Uint8Array(
      getInstructions2(numOfInstructions2).flatMap(
        (instruction) => Array.from(instruction.to_bytes())
      )
    );
    const blobBytes2 = new Uint8Array(blobId);
    const dataSectionLenBytes = new Uint8Array(8);
    const dataView = new DataView(dataSectionLenBytes.buffer);
    dataView.setBigUint64(0, BigInt(configurableSection.length), false);
    const loaderBytecode2 = new Uint8Array([
      ...instructionBytes2,
      ...blobBytes2,
      ...dataSectionLenBytes
    ]);
    return {
      loaderBytecode: concat([loaderBytecode2, configurableSection]),
      blobOffset: loaderBytecode2.length
    };
  }
  const numOfInstructions = getInstructionsNoDataSection(0).length;
  if (numOfInstructions > 65535) {
    throw new Error("Too many instructions, exceeding u16::MAX.");
  }
  const instructionBytes = new Uint8Array(
    getInstructionsNoDataSection(numOfInstructions).flatMap(
      (instruction) => Array.from(instruction.to_bytes())
    )
  );
  const blobBytes = new Uint8Array(blobId);
  const loaderBytecode = new Uint8Array([...instructionBytes, ...blobBytes]);
  return { loaderBytecode };
}
__name11(getPredicateScriptLoaderInstructions, "getPredicateScriptLoaderInstructions");
async function fundBlobTx(deployer, blobTxRequest) {
  let totalCost = bn(0);
  const chainInfo = await deployer.provider.getChain();
  const gasPrice = await deployer.provider.estimateGasPrice(10);
  const priceFactor = chainInfo.consensusParameters.feeParameters.gasPriceFactor;
  const minGas = blobTxRequest.calculateMinGas(chainInfo);
  const minFee = calculateGasFee({
    gasPrice,
    gas: minGas,
    priceFactor,
    tip: blobTxRequest.tip
  }).add(1);
  totalCost = totalCost.add(minFee);
  if (totalCost.gt(await deployer.getBalance())) {
    throw new FuelError(ErrorCode.FUNDS_TOO_LOW, "Insufficient balance to deploy predicate.");
  }
  const txCost = await deployer.getTransactionCost(blobTxRequest);
  blobTxRequest.maxFee = txCost.maxFee;
  return deployer.fund(blobTxRequest, txCost);
}
__name11(fundBlobTx, "fundBlobTx");
function adjustConfigurableOffsets(jsonAbi, configurableOffsetDiff) {
  const { configurables: readOnlyConfigurables } = jsonAbi;
  const configurables = [];
  readOnlyConfigurables.forEach((config) => {
    configurables.push({ ...config, offset: config.offset - configurableOffsetDiff });
  });
  return { ...jsonAbi, configurables };
}
__name11(adjustConfigurableOffsets, "adjustConfigurableOffsets");
async function deployScriptOrPredicate({
  deployer,
  bytecode: bytecode2,
  abi: abi2,
  loaderInstanceCallback
}) {
  const blobId = getBytecodeId(arrayify(bytecode2));
  const configurableOffset = getBytecodeConfigurableOffset(arrayify(bytecode2));
  const byteCodeWithoutConfigurableSection = bytecode2.slice(0, configurableOffset);
  const blobTxRequest = new BlobTransactionRequest({
    blobId,
    witnessIndex: 0,
    witnesses: [byteCodeWithoutConfigurableSection]
  });
  const { loaderBytecode, blobOffset } = getPredicateScriptLoaderInstructions(
    arrayify(bytecode2),
    arrayify(blobId)
  );
  const newConfigurableOffsetDiff = byteCodeWithoutConfigurableSection.length - (blobOffset || 0);
  const newAbi = adjustConfigurableOffsets(abi2, newConfigurableOffsetDiff);
  const blobExists = (await deployer.provider.getBlobs([blobId])).length > 0;
  const loaderInstance = loaderInstanceCallback(loaderBytecode, newAbi);
  if (blobExists) {
    return {
      waitForResult: __name11(() => Promise.resolve(loaderInstance), "waitForResult"),
      blobId
    };
  }
  const fundedBlobRequest = await fundBlobTx(deployer, blobTxRequest);
  const waitForResult = __name11(async () => {
    try {
      const blobTx = await deployer.sendTransaction(fundedBlobRequest);
      const result = await blobTx.waitForResult();
      if (result.status !== "success") {
        throw new Error();
      }
    } catch (err2) {
      throw new FuelError(ErrorCode.TRANSACTION_FAILED, "Failed to deploy predicate chunk");
    }
    return loaderInstance;
  }, "waitForResult");
  return {
    waitForResult,
    blobId
  };
}
__name11(deployScriptOrPredicate, "deployScriptOrPredicate");
var getPredicateRoot = __name11((bytecode2) => {
  const chunkSize = 16 * 1024;
  const bytes = arrayify(bytecode2);
  const chunks = chunkAndPadBytes(bytes, chunkSize);
  const codeRoot = calcRoot(chunks.map((c) => hexlify(c)));
  const predicateRoot = hash(concat(["0x4655454C", codeRoot]));
  return predicateRoot;
}, "getPredicateRoot");
var _a85;
var Predicate = (_a85 = class extends Account {
  /**
   * Creates an instance of the Predicate class.
   *
   * @param bytecode - The bytecode of the predicate.
   * @param abi - The JSON ABI of the predicate.
   * @param provider - The provider used to interact with the blockchain.
   * @param data - The predicate input data (optional).
   * @param configurableConstants - Optional configurable constants for the predicate.
   */
  constructor({
    bytecode: bytecode2,
    abi: abi2,
    provider,
    data,
    configurableConstants
  }) {
    const { predicateBytes, predicateInterface } = _a85.processPredicateData(
      bytecode2,
      abi2,
      configurableConstants
    );
    const address = new Address(getPredicateRoot(predicateBytes));
    super(address, provider);
    __publicField(this, "bytes");
    __publicField(this, "predicateData", []);
    __publicField(this, "interface");
    __publicField(this, "initialBytecode");
    __publicField(this, "configurableConstants");
    this.initialBytecode = arrayify(bytecode2);
    this.bytes = predicateBytes;
    this.interface = predicateInterface;
    this.configurableConstants = configurableConstants;
    if (data !== void 0 && data.length > 0) {
      this.predicateData = data;
    }
  }
  /**
   * Populates the transaction data with predicate data.
   *
   * @param transactionRequestLike - The transaction request-like object.
   * @returns The transaction request with predicate data.
   */
  populateTransactionPredicateData(transactionRequestLike) {
    const request2 = transactionRequestify(transactionRequestLike);
    const placeholderIndex = this.getIndexFromPlaceholderWitness(request2);
    if (placeholderIndex !== -1) {
      request2.removeWitness(placeholderIndex);
    }
    request2.inputs.filter(isRequestInputCoinOrMessage).forEach((input) => {
      if (isRequestInputResourceFromOwner(input, this.address)) {
        input.predicate = hexlify(this.bytes);
        input.predicateData = hexlify(this.getPredicateData());
        input.witnessIndex = 0;
      }
    });
    return request2;
  }
  /**
   * Sends a transaction with the populated predicate data.
   *
   * @param transactionRequestLike - The transaction request-like object.
   * @returns A promise that resolves to the transaction response.
   */
  sendTransaction(transactionRequestLike) {
    const transactionRequest = transactionRequestify(transactionRequestLike);
    return super.sendTransaction(transactionRequest, { estimateTxDependencies: false });
  }
  /**
   * Simulates a transaction with the populated predicate data.
   *
   * @param transactionRequestLike - The transaction request-like object.
   * @returns A promise that resolves to the call result.
   */
  simulateTransaction(transactionRequestLike) {
    const transactionRequest = transactionRequestify(transactionRequestLike);
    return super.simulateTransaction(transactionRequest, { estimateTxDependencies: false });
  }
  getPredicateData() {
    var _a103;
    if (!this.predicateData.length) {
      return new Uint8Array();
    }
    const mainFn = (_a103 = this.interface) == null ? void 0 : _a103.functions.main;
    return (mainFn == null ? void 0 : mainFn.encodeArguments(this.predicateData)) || new Uint8Array();
  }
  /**
   * Creates a new Predicate instance from an existing Predicate instance.
   * @param overrides - The data and configurable constants to override.
   * @returns A new Predicate instance with the same bytecode, ABI and provider but with the ability to set the data and configurable constants.
   */
  toNewInstance(overrides = {}) {
    return new _a85({
      bytecode: this.initialBytecode,
      abi: this.interface.jsonAbi,
      provider: this.provider,
      data: overrides.data ?? this.predicateData,
      configurableConstants: overrides.configurableConstants ?? this.configurableConstants
    });
  }
  /**
   * Processes the predicate data and returns the altered bytecode and interface.
   *
   * @param bytes - The bytes of the predicate.
   * @param jsonAbi - The JSON ABI of the predicate.
   * @param configurableConstants - Optional configurable constants for the predicate.
   * @returns An object containing the new predicate bytes and interface.
   */
  static processPredicateData(bytes, jsonAbi, configurableConstants) {
    let predicateBytes = arrayify(bytes);
    const abiInterface = new Interface(jsonAbi);
    if (abiInterface.functions.main === void 0) {
      throw new FuelError(
        ErrorCode.ABI_MAIN_METHOD_MISSING,
        'Cannot use ABI without "main" function.'
      );
    }
    if (configurableConstants && Object.keys(configurableConstants).length) {
      predicateBytes = _a85.setConfigurableConstants(
        predicateBytes,
        configurableConstants,
        abiInterface
      );
    }
    return {
      predicateBytes,
      predicateInterface: abiInterface
    };
  }
  /**
   * Retrieves resources satisfying the spend query for the account.
   *
   * @param quantities - IDs of coins to exclude.
   * @param excludedIds - IDs of resources to be excluded from the query.
   * @returns A promise that resolves to an array of Resources.
   */
  async getResourcesToSpend(quantities, excludedIds) {
    const resources = await this.provider.getResourcesToSpend(
      this.address,
      quantities,
      excludedIds
    );
    return resources.map((resource) => ({
      ...resource,
      predicate: hexlify(this.bytes),
      predicateData: hexlify(this.getPredicateData())
    }));
  }
  /**
   * Generates an array of fake resources based on the provided coins.
   *
   * @param coins - An array of `FakeResources` objects representing the coins.
   * @returns An array of `Resource` objects with generated properties.
   */
  generateFakeResources(coins) {
    return super.generateFakeResources(coins).map((coin) => ({
      ...coin,
      predicate: hexlify(this.bytes),
      predicateData: hexlify(this.getPredicateData())
    }));
  }
  /**
   * Sets the configurable constants for the predicate.
   *
   * @param bytes - The bytes of the predicate.
   * @param configurableConstants - Configurable constants to be set.
   * @param abiInterface - The ABI interface of the predicate.
   * @returns The mutated bytes with the configurable constants set.
   */
  static setConfigurableConstants(bytes, configurableConstants, abiInterface) {
    const mutatedBytes = bytes;
    try {
      if (Object.keys(abiInterface.configurables).length === 0) {
        throw new FuelError(
          ErrorCode.INVALID_CONFIGURABLE_CONSTANTS,
          "Predicate has no configurable constants to be set"
        );
      }
      Object.entries(configurableConstants).forEach(([key, value]) => {
        if (!(abiInterface == null ? void 0 : abiInterface.configurables[key])) {
          throw new FuelError(
            ErrorCode.CONFIGURABLE_NOT_FOUND,
            `No configurable constant named '${key}' found in the Predicate`
          );
        }
        const { offset } = abiInterface.configurables[key];
        const encoded = abiInterface.encodeConfigurable(key, value);
        mutatedBytes.set(encoded, offset);
      });
    } catch (err2) {
      throw new FuelError(
        ErrorCode.INVALID_CONFIGURABLE_CONSTANTS,
        `Error setting configurable constants: ${err2.message}.`
      );
    }
    return mutatedBytes;
  }
  /**
   * Returns the index of the witness placeholder that was added to this predicate.
   * If no witness placeholder was added, it returns -1.
   * @param request - The transaction request.
   * @returns The index of the witness placeholder, or -1 if there is no witness placeholder.
   */
  getIndexFromPlaceholderWitness(request2) {
    var _a103;
    const predicateInputs = request2.inputs.filter(isRequestInputResource).filter((input) => isRequestInputResourceFromOwner(input, this.address));
    let index = -1;
    const hasEmptyPredicateInputs = predicateInputs.find((input) => !input.predicate);
    if (hasEmptyPredicateInputs) {
      index = hasEmptyPredicateInputs.witnessIndex;
      const allInputsAreEmpty = predicateInputs.every((input) => !input.predicate);
      if (!allInputsAreEmpty) {
        const wasFilledInputAddedFirst = !!((_a103 = predicateInputs[0]) == null ? void 0 : _a103.predicate);
        if (wasFilledInputAddedFirst) {
          index = -1;
        }
      }
    }
    return index;
  }
  /**
   *
   * @param account - The account used to pay the deployment costs.
   * @returns The _blobId_ and a _waitForResult_ callback that returns the deployed predicate
   * once the blob deployment transaction finishes.
   *
   * The returned loader predicate will have the same configurable constants
   * as the original predicate which was used to generate the loader predicate.
   */
  async deploy(account) {
    return deployScriptOrPredicate({
      deployer: account,
      abi: this.interface.jsonAbi,
      bytecode: this.bytes,
      loaderInstanceCallback: __name11((loaderBytecode, newAbi) => new _a85({
        bytecode: loaderBytecode,
        abi: newAbi,
        provider: this.provider,
        data: this.predicateData
      }), "loaderInstanceCallback")
    });
  }
}, __name11(_a85, "Predicate"), _a85);
var FuelConnectorMethods = ((FuelConnectorMethods2) => {
  FuelConnectorMethods2["ping"] = "ping";
  FuelConnectorMethods2["version"] = "version";
  FuelConnectorMethods2["connect"] = "connect";
  FuelConnectorMethods2["disconnect"] = "disconnect";
  FuelConnectorMethods2["isConnected"] = "isConnected";
  FuelConnectorMethods2["accounts"] = "accounts";
  FuelConnectorMethods2["currentAccount"] = "currentAccount";
  FuelConnectorMethods2["signMessage"] = "signMessage";
  FuelConnectorMethods2["sendTransaction"] = "sendTransaction";
  FuelConnectorMethods2["assets"] = "assets";
  FuelConnectorMethods2["addAsset"] = "addAsset";
  FuelConnectorMethods2["addAssets"] = "addAssets";
  FuelConnectorMethods2["networks"] = "networks";
  FuelConnectorMethods2["currentNetwork"] = "currentNetwork";
  FuelConnectorMethods2["addNetwork"] = "addNetwork";
  FuelConnectorMethods2["selectNetwork"] = "selectNetwork";
  FuelConnectorMethods2["addABI"] = "addABI";
  FuelConnectorMethods2["getABI"] = "getABI";
  FuelConnectorMethods2["hasABI"] = "hasABI";
  return FuelConnectorMethods2;
})(FuelConnectorMethods || {});
var FuelConnectorEventTypes = ((FuelConnectorEventTypes2) => {
  FuelConnectorEventTypes2["connectors"] = "connectors";
  FuelConnectorEventTypes2["currentConnector"] = "currentConnector";
  FuelConnectorEventTypes2["connection"] = "connection";
  FuelConnectorEventTypes2["accounts"] = "accounts";
  FuelConnectorEventTypes2["currentAccount"] = "currentAccount";
  FuelConnectorEventTypes2["networks"] = "networks";
  FuelConnectorEventTypes2["currentNetwork"] = "currentNetwork";
  FuelConnectorEventTypes2["assets"] = "assets";
  FuelConnectorEventTypes2["abis"] = "abis";
  return FuelConnectorEventTypes2;
})(FuelConnectorEventTypes || {});
var FuelConnectorEventType = "FuelConnector";
var _a86;
var LocalStorage = (_a86 = class {
  constructor(localStorage) {
    __publicField(this, "storage");
    this.storage = localStorage;
  }
  async setItem(key, value) {
    this.storage.setItem(key, value);
  }
  async getItem(key) {
    return this.storage.getItem(key);
  }
  async removeItem(key) {
    this.storage.removeItem(key);
  }
  async clear() {
    this.storage.clear();
  }
}, __name11(_a86, "LocalStorage"), _a86);
var _a87;
var FuelConnector = (_a87 = class extends import_events2.EventEmitter {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "");
    __publicField(this, "metadata", {});
    __publicField(this, "connected", false);
    __publicField(this, "installed", false);
    __publicField(this, "external", true);
    __publicField(this, "events", FuelConnectorEventTypes);
  }
  /**
   * Should return true if the connector is loaded
   * in less then one second.
   *
   * @returns Always true.
   */
  async ping() {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Method not implemented.");
  }
  /**
   * Should return the current version of the connector
   * and the network version that is compatible.
   *
   * @returns boolean - connection status.
   */
  async version() {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Method not implemented.");
  }
  /**
   * Should return true if the connector is connected
   * to any of the accounts available.
   *
   * @returns The connection status.
   */
  async isConnected() {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Method not implemented.");
  }
  /**
   * Should return all the accounts authorized for the
   * current connection.
   *
   * @returns The accounts addresses strings
   */
  async accounts() {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Method not implemented.");
  }
  /**
   * Should start the connection process and return
   * true if the account authorize the connection.
   *
   * and return false if the user reject the connection.
   *
   * @emits accounts
   * @returns boolean - connection status.
   */
  async connect() {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Method not implemented.");
  }
  /**
   * Should disconnect the current connection and
   * return false if the disconnection was successful.
   *
   * @emits assets connection
   * @returns The connection status.
   */
  async disconnect() {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Method not implemented.");
  }
  /**
   * Should start the sign message process and return
   * the signed message.
   *
   * @param address - The address to sign the message
   * @param message - The message to sign all text will be treated as text utf-8
   *
   * @returns Message signature
   */
  async signMessage(_address, _message) {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Method not implemented.");
  }
  /**
   * Should start the sign transaction process and return
   * the signed transaction.
   *
   * @param address - The address to sign the transaction
   * @param transaction - The transaction to sign
   *
   * @returns Transaction signature
   */
  async signTransaction(_address, _transaction) {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Method not implemented.");
  }
  /**
   * Should start the send transaction process and return
   * the transaction id submitted to the network.
   *
   * If the network is not available for the connection
   * it should throw an error to avoid the transaction
   * to be sent to the wrong network and lost.
   *
   * @param address - The address to sign the transaction
   * @param transaction - The transaction to send
   * @param params - Optional parameters to send the transaction
   * @returns The transaction id or transaction response
   */
  async sendTransaction(_address, _transaction, _params) {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Method not implemented.");
  }
  /**
   * Should return the current account selected inside the connector, if the account
   * is authorized for the connection.
   *
   * If the account is not authorized it should return null.
   *
   * @returns The current account selected otherwise null.
   */
  async currentAccount() {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Method not implemented.");
  }
  /**
   * Should add the assets metadata to the connector and return true if the asset
   * was added successfully.
   *
   * If the asset already exists it should throw an error.
   *
   * @emits assets
   * @param assets - The assets to add the metadata to the connection.
   * @throws Error if the asset already exists
   * @returns True if the asset was added successfully
   */
  async addAssets(_assets) {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Method not implemented.");
  }
  /**
   * Should add the asset metadata to the connector and return true if the asset
   * was added successfully.
   *
   * If the asset already exists it should throw an error.
   *
   * @emits assets
   * @param asset - The asset to add the metadata to the connection.
   * @throws Error if the asset already exists
   * @returns True if the asset was added successfully
   */
  async addAsset(_asset) {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Method not implemented.");
  }
  /**
   * Should return all the assets added to the connector. If a connection is already established.
   *
   * @returns Array of assets metadata from the connector vinculated to the all accounts from a specific Wallet.
   */
  async assets() {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Method not implemented.");
  }
  /**
   * Should start the add network process and return true if the network was added successfully.
   *
   * @emits networks
   * @throws Error if the network already exists
   * @param networkUrl - The URL of the network to be added.
   * @returns Return true if the network was added successfully
   */
  async addNetwork(_networkUrl) {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Method not implemented.");
  }
  /**
   * Should start the select network process and return true if the network has change successfully.
   *
   * @emits networks
   * @throws Error if the network already exists
   * @param network - The network to be selected.
   * @returns Return true if the network was added successfully
   */
  async selectNetwork(_network) {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Method not implemented.");
  }
  /**
   * Should return all the networks available from the connector. If the connection is already established.
   *
   * @returns Return all the networks added to the connector.
   */
  async networks() {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Method not implemented.");
  }
  /**
   * Should return the current network selected inside the connector. Even if the connection is not established.
   *
   * @returns Return the current network selected inside the connector.
   */
  async currentNetwork() {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Method not implemented.");
  }
  /**
   * Should add the ABI to the connector and return true if the ABI was added successfully.
   *
   * @param contractId - The contract id to add the ABI.
   * @param abi - The JSON ABI that represents a contract.
   * @returns Return true if the ABI was added successfully.
   */
  async addABI(_contractId, _abi) {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Method not implemented.");
  }
  /**
   * Should return the ABI from the connector vinculated to the all accounts from a specific Wallet.
   *
   * @param id - The contract id to get the ABI.
   * @returns The ABI if it exists, otherwise return null.
   */
  async getABI(_id) {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Method not implemented.");
  }
  /**
   * Should return true if the abi exists in the connector vinculated to the all accounts from a specific Wallet.
   *
   * @param id - The contract id to get the abi
   * @returns Returns true if the abi exists or false if not.
   */
  async hasABI(_id) {
    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Method not implemented.");
  }
  /**
   * Event listener for the connector.
   *
   * @param eventName - The event name to listen
   * @param listener - The listener function
   */
  on(eventName, listener) {
    super.on(eventName, listener);
    return this;
  }
}, __name11(_a87, "FuelConnector"), _a87);
function cacheFor(fn, { cache: cache2, cacheTime, key }) {
  return async (...args) => {
    var _a103, _b2, _c;
    if (cache2[key] && ((_a103 = cache2[key]) == null ? void 0 : _a103.value)) {
      return (_b2 = cache2[key]) == null ? void 0 : _b2.value;
    }
    clearTimeout((_c = cache2[key]) == null ? void 0 : _c.timeout);
    const result = await fn(...args);
    cache2[key] = {
      timeout: Number(
        setTimeout(() => {
          cache2[key] = null;
        }, cacheTime)
      ),
      value: result
    };
    return result;
  };
}
__name11(cacheFor, "cacheFor");
function dispatchFuelConnectorEvent(connector) {
  window.dispatchEvent(
    new CustomEvent(FuelConnectorEventType, {
      detail: connector
    })
  );
}
__name11(dispatchFuelConnectorEvent, "dispatchFuelConnectorEvent");
function deferPromise() {
  const defer = {};
  defer.promise = new Promise((resolve, reject3) => {
    defer.reject = reject3;
    defer.resolve = resolve;
  });
  return defer;
}
__name11(deferPromise, "deferPromise");
async function withTimeout(promise, timeout = 1050) {
  const timeoutPromise = new Promise((resolve, reject3) => {
    setTimeout(() => {
      reject3(new FuelError(FuelError.CODES.TIMEOUT_EXCEEDED, "Promise timed out"));
    }, timeout);
  });
  return Promise.race([timeoutPromise, promise]);
}
__name11(withTimeout, "withTimeout");
var HAS_CONNECTOR_TIMEOUT = 2e3;
var PING_CACHE_TIME = 5e3;
var { warn } = console;
var _a88;
var Fuel = (_a88 = class extends FuelConnector {
  constructor(config = _a88.defaultConfig) {
    super();
    __publicField(this, "_storage", null);
    __publicField(this, "_connectors", []);
    __publicField(this, "_targetObject", null);
    __publicField(this, "_unsubscribes", []);
    __publicField(this, "_targetUnsubscribe", __name11(() => {
    }, "_targetUnsubscribe"));
    __publicField(this, "_pingCache", {});
    __publicField(this, "_currentConnector");
    __publicField(this, "_initializationPromise", null);
    /**
     * Setup a listener for the FuelConnector event and add the connector
     * to the list of new connectors.
     */
    __publicField(this, "setupConnectorListener", __name11(() => {
      const { _targetObject: targetObject } = this;
      const eventName = FuelConnectorEventType;
      if (targetObject == null ? void 0 : targetObject.on) {
        targetObject.on(eventName, this.addConnector);
        return () => {
          var _a103;
          (_a103 = targetObject.off) == null ? void 0 : _a103.call(targetObject, eventName, this.addConnector);
        };
      }
      if (targetObject == null ? void 0 : targetObject.addEventListener) {
        const handler = __name11((e) => {
          this.addConnector(e.detail);
        }, "handler");
        targetObject.addEventListener(eventName, handler);
        return () => {
          var _a103;
          (_a103 = targetObject.removeEventListener) == null ? void 0 : _a103.call(targetObject, eventName, handler);
        };
      }
      return () => {
      };
    }, "setupConnectorListener"));
    /**
     * Add a new connector to the list of connectors.
     */
    __publicField(this, "addConnector", __name11(async (connector) => {
      if (!this.getConnector(connector)) {
        this._connectors.push(connector);
      }
      await this.fetchConnectorStatus(connector);
      this.emit(this.events.connectors, this._connectors);
      if (!this._currentConnector) {
        await this.selectConnector(connector.name, {
          emitEvents: false
        });
      }
    }, "addConnector"));
    __publicField(this, "triggerConnectorEvents", __name11(async () => {
      const [isConnected, networks2, currentNetwork] = await Promise.all([
        this.isConnected(),
        this.networks(),
        this.currentNetwork()
      ]);
      this.emit(this.events.connection, isConnected);
      this.emit(this.events.networks, networks2);
      this.emit(this.events.currentNetwork, currentNetwork);
      if (isConnected) {
        const [accounts, currentAccount] = await Promise.all([
          this.accounts(),
          this.currentAccount()
        ]);
        this.emit(this.events.accounts, accounts);
        this.emit(this.events.currentAccount, currentAccount);
      }
    }, "triggerConnectorEvents"));
    /**
     * Get a connector from the list of connectors.
     */
    __publicField(this, "getConnector", __name11((connector) => this._connectors.find((c) => {
      const connectorName = typeof connector === "string" ? connector : connector.name;
      return c.name === connectorName || c === connector;
    }) || null, "getConnector"));
    this.setMaxListeners(1e3);
    this._connectors = config.connectors ?? [];
    this._targetObject = this.getTargetObject(config.targetObject);
    this._storage = config.storage === void 0 ? this.getStorage() : config.storage;
    this.setupMethods();
    this._initializationPromise = this.initialize();
  }
  async initialize() {
    try {
      const connectResponse = this.setDefaultConnector();
      this._targetUnsubscribe = this.setupConnectorListener();
      await connectResponse;
    } catch (error) {
      throw new FuelError(ErrorCode.INVALID_PROVIDER, "Error initializing Fuel Connector");
    }
  }
  async init() {
    await this._initializationPromise;
    return this;
  }
  /**
   * Return the target object to listen for global events.
   */
  getTargetObject(targetObject) {
    if (targetObject) {
      return targetObject;
    }
    if (typeof window !== "undefined") {
      return window;
    }
    if (typeof document !== "undefined") {
      return document;
    }
    return null;
  }
  /**
   * Return the storage used.
   */
  getStorage() {
    if (typeof window !== "undefined") {
      return new LocalStorage(window.localStorage);
    }
    return void 0;
  }
  /**
   * Setup the default connector from the storage.
   */
  async setDefaultConnector() {
    var _a103, _b2;
    const connectorName = await ((_a103 = this._storage) == null ? void 0 : _a103.getItem(_a88.STORAGE_KEY)) || ((_b2 = this._connectors[0]) == null ? void 0 : _b2.name);
    if (connectorName) {
      return this.selectConnector(connectorName, {
        emitEvents: false
      });
    }
    return void 0;
  }
  /**
   * Start listener for all the events of the current
   * connector and emit them to the Fuel instance
   */
  setupConnectorEvents(events) {
    if (!this._currentConnector) {
      return;
    }
    const currentConnector = this._currentConnector;
    this._unsubscribes.map((unSub) => unSub());
    this._unsubscribes = events.map((event) => {
      const handler = __name11((...args) => this.emit(event, ...args), "handler");
      currentConnector.on(event, handler);
      return () => currentConnector.off(event, handler);
    });
  }
  /**
   * Call method from the current connector.
   */
  async callMethod(method, ...args) {
    const hasConnector = await this.hasConnector();
    await this.pingConnector();
    if (!this._currentConnector || !hasConnector) {
      throw new FuelError(
        ErrorCode.MISSING_CONNECTOR,
        `No connector selected for calling ${method}. Use hasConnector before executing other methods.`
      );
    }
    if (typeof this._currentConnector[method] === "function") {
      return this._currentConnector[method](...args);
    }
    return void 0;
  }
  /**
   * Create a method for each method proxy that is available on the Common interface
   * and call the method from the current connector.
   */
  setupMethods() {
    Object.values(FuelConnectorMethods).forEach((method) => {
      this[method] = async (...args) => this.callMethod(method, ...args);
    });
  }
  /**
   * Fetch the status of a connector and set the installed and connected
   * status.
   */
  async fetchConnectorStatus(connector) {
    const requestTimestamp = Date.now();
    const [isConnected, ping] = await Promise.allSettled([
      withTimeout(connector.isConnected()),
      withTimeout(this.pingConnector(connector))
    ]);
    const isStale = requestTimestamp < (connector._latestUpdate || 0);
    if (!isStale) {
      connector._latestUpdate = Date.now();
      connector.installed = ping.status === "fulfilled" && ping.value;
      connector.connected = isConnected.status === "fulfilled" && isConnected.value;
    }
    return {
      installed: connector.installed,
      connected: connector.connected
    };
  }
  /**
   * Fetch the status of all connectors and set the installed and connected
   * status.
   */
  async fetchConnectorsStatus() {
    return Promise.all(
      this._connectors.map(async (connector) => this.fetchConnectorStatus(connector))
    );
  }
  /**
   * Fetch the status of a connector and set the installed and connected
   * status. If no connector is provided it will ping the current connector.
   */
  async pingConnector(connector) {
    const curConnector = connector || this._currentConnector;
    if (!curConnector) {
      return false;
    }
    try {
      return await cacheFor(async () => withTimeout(curConnector.ping()), {
        key: curConnector.name,
        cache: this._pingCache,
        cacheTime: PING_CACHE_TIME
      })();
    } catch {
      throw new FuelError(ErrorCode.INVALID_PROVIDER, "Current connector is not available.");
    }
  }
  /**
   * Return the list of connectors with the status of installed and connected.
   */
  async connectors() {
    await this.fetchConnectorsStatus();
    return this._connectors;
  }
  /**
   * Set the current connector to be used.
   */
  async selectConnector(connectorName, options = {
    emitEvents: true
  }) {
    var _a103, _b2;
    const connector = this.getConnector(connectorName);
    if (!connector) {
      return false;
    }
    if (((_a103 = this._currentConnector) == null ? void 0 : _a103.name) === connectorName) {
      return true;
    }
    const { installed } = await this.fetchConnectorStatus(connector);
    if (installed) {
      this._currentConnector = connector;
      this.emit(this.events.currentConnector, connector);
      this.setupConnectorEvents(Object.values(FuelConnectorEventTypes));
      await ((_b2 = this._storage) == null ? void 0 : _b2.setItem(_a88.STORAGE_KEY, connector.name));
      if (options.emitEvents) {
        this.triggerConnectorEvents();
      }
      return true;
    }
    return false;
  }
  /**
   * Return the current selected connector.
   */
  currentConnector() {
    return this._currentConnector;
  }
  /**
   * Return true if any connector is available.
   */
  async hasConnector() {
    if (this._currentConnector) {
      return true;
    }
    const defer = deferPromise();
    this.once(this.events.currentConnector, () => {
      defer.resolve(true);
    });
    return withTimeout(defer.promise, HAS_CONNECTOR_TIMEOUT).then(() => true).catch(() => false);
  }
  async hasWallet() {
    return this.hasConnector();
  }
  /**
   * Return a Fuel Provider instance with extends features to work with
   * connectors.
   *
   * @deprecated getProvider is deprecated and is going to be removed in the future, use getWallet instead.
   */
  async getProvider(providerOrNetwork) {
    warn(
      "getProvider is deprecated and is going to be removed in the future, use getWallet instead."
    );
    return this._getProvider(providerOrNetwork);
  }
  /**
   * Return a Fuel Provider instance with extends features to work with
   * connectors.
   */
  async _getProvider(providerOrNetwork) {
    let provider;
    if (providerOrNetwork && "getTransactionResponse" in providerOrNetwork) {
      provider = providerOrNetwork;
    } else if (providerOrNetwork && "chainId" in providerOrNetwork && "url" in providerOrNetwork) {
      provider = new Provider(providerOrNetwork.url);
    } else if (!providerOrNetwork) {
      const currentNetwork = await this.currentNetwork();
      provider = new Provider(currentNetwork.url);
    } else {
      throw new FuelError(ErrorCode.INVALID_PROVIDER, "Provider is not valid.");
    }
    return provider;
  }
  /**
   * Return a Fuel Wallet Locked instance with extends features to work with
   * connectors.
   */
  async getWallet(address, providerOrNetwork) {
    const provider = await this._getProvider(providerOrNetwork);
    return new Account(address, provider, this);
  }
  /**
   * Remove all open listeners this is useful when you want to
   * remove the Fuel instance and avoid memory leaks.
   */
  unsubscribe() {
    this._unsubscribes.map((unSub) => unSub());
    this._targetUnsubscribe();
    this.removeAllListeners();
  }
  /**
   * Clean all the data from the storage.
   */
  async clean() {
    var _a103;
    await ((_a103 = this._storage) == null ? void 0 : _a103.removeItem(_a88.STORAGE_KEY));
  }
  /**
   * Removes all listeners and cleans the storage.
   */
  async destroy() {
    this.unsubscribe();
    await this.clean();
  }
}, __name11(_a88, "Fuel"), __publicField(_a88, "STORAGE_KEY", "fuel-current-connector"), __publicField(_a88, "defaultConfig", {}), _a88);

// node_modules/@fuel-ts/program/dist/index.mjs
var __defProp12 = Object.defineProperty;
var __name12 = (target, value) => __defProp12(target, "name", { value, configurable: true });
var _a89;
var AbstractProgram = (_a89 = class {
}, __name12(_a89, "AbstractProgram"), _a89);
var _a90;
var AbstractContract = (_a90 = class extends AbstractProgram {
}, __name12(_a90, "AbstractContract"), _a90);
function assert2(condition, message) {
  if (!condition) {
    throw new FuelError(ErrorCode.TRANSACTION_ERROR, message);
  }
}
__name12(assert2, "assert");
function getAbisFromAllCalls(functionScopes) {
  return functionScopes.reduce((acc, funcScope, i) => {
    const { program, externalAbis } = funcScope.getCallConfig();
    if (i === 0) {
      acc.main = program.interface.jsonAbi;
      acc.otherContractsAbis = {};
    } else {
      acc.otherContractsAbis[program.id.toB256()] = program.interface.jsonAbi;
    }
    acc.otherContractsAbis = { ...acc.otherContractsAbis, ...externalAbis };
    return acc;
  }, {});
}
__name12(getAbisFromAllCalls, "getAbisFromAllCalls");
var getResultLogs = __name12((receipts, mainCallConfig, functionScopes) => {
  if (!mainCallConfig) {
    return [];
  }
  const { main, otherContractsAbis } = getAbisFromAllCalls(functionScopes);
  return getDecodedLogs(receipts, main, otherContractsAbis);
}, "getResultLogs");
var getAllResultLogs = __name12((opts) => {
  const { receipts, mainCallConfig, functionScopes } = opts;
  if (!mainCallConfig) {
    return { logs: [], groupedLogs: {} };
  }
  const { main, otherContractsAbis } = getAbisFromAllCalls(functionScopes);
  return getAllDecodedLogs({ receipts, mainAbi: main, externalAbis: otherContractsAbis });
}, "getAllResultLogs");
var _operations, _a91;
var InstructionSet = (_a91 = class {
  constructor(...args) {
    __privateAdd(this, _operations);
    __privateSet(this, _operations, args || []);
  }
  entries() {
    return __privateGet(this, _operations);
  }
  push(...args) {
    __privateGet(this, _operations).push(...args);
  }
  concat(ops) {
    return __privateGet(this, _operations).concat(ops);
  }
  extend(ops) {
    __privateGet(this, _operations).push(...ops);
  }
  toBytes() {
    return concat(
      __privateGet(this, _operations).reduce((instructions, line) => {
        instructions.push(line.to_bytes());
        return instructions;
      }, [])
    );
  }
  toHex() {
    return hexlify(this.toBytes());
  }
  toString() {
    return `Program:
${JSON.stringify(__privateGet(this, _operations), null, 2)}`;
  }
  byteLength() {
    return this.toBytes().byteLength;
  }
}, _operations = new WeakMap(), __name12(_a91, "InstructionSet"), _a91);
var calculateScriptDataBaseOffset = __name12((maxInputs) => SCRIPT_FIXED_SIZE + calculateVmTxMemory({ maxInputs }), "calculateScriptDataBaseOffset");
var POINTER_DATA_OFFSET = WORD_SIZE + ASSET_ID_LEN + CONTRACT_ID_LEN + WORD_SIZE + WORD_SIZE;
function callResultToScriptResult(callResult) {
  const receipts = [...callResult.receipts];
  let scriptResultReceipt;
  let returnReceipt;
  receipts.forEach((receipt) => {
    if (receipt.type === ReceiptType.ScriptResult) {
      scriptResultReceipt = receipt;
    } else if (receipt.type === ReceiptType.Return || receipt.type === ReceiptType.ReturnData || receipt.type === ReceiptType.Revert) {
      returnReceipt = receipt;
    }
  });
  if (!scriptResultReceipt || !returnReceipt) {
    throw new FuelError(ErrorCode.SCRIPT_REVERTED, `Transaction reverted.`);
  }
  const scriptResult = {
    code: scriptResultReceipt.result,
    gasUsed: scriptResultReceipt.gasUsed,
    receipts,
    scriptResultReceipt,
    returnReceipt,
    callResult
  };
  return scriptResult;
}
__name12(callResultToScriptResult, "callResultToScriptResult");
function decodeCallResult(callResult, decoder, logs = [], groupedLogs = {}) {
  var _a103;
  try {
    const scriptResult = callResultToScriptResult(callResult);
    return decoder(scriptResult);
  } catch (error) {
    if (error.code === ErrorCode.SCRIPT_REVERTED) {
      const statusReason = (_a103 = callResult == null ? void 0 : callResult.dryRunStatus) == null ? void 0 : _a103.reason;
      throw extractTxError({
        logs,
        groupedLogs,
        receipts: callResult.receipts,
        statusReason
      });
    }
    throw error;
  }
}
__name12(decodeCallResult, "decodeCallResult");
function callResultToInvocationResult(callResult, call22, logs, groupedLogs) {
  return decodeCallResult(
    callResult,
    (scriptResult) => {
      if (scriptResult.returnReceipt.type === ReceiptType.Revert) {
        throw new FuelError(
          ErrorCode.SCRIPT_REVERTED,
          `Script Reverted. Logs: ${JSON.stringify(logs)}`
        );
      }
      if (scriptResult.returnReceipt.type !== ReceiptType.Return && scriptResult.returnReceipt.type !== ReceiptType.ReturnData) {
        const { type: type3 } = scriptResult.returnReceipt;
        throw new FuelError(
          ErrorCode.SCRIPT_REVERTED,
          `Script Return Type [${type3}] Invalid. Logs: ${JSON.stringify({
            logs,
            groupedLogs,
            receipt: scriptResult.returnReceipt
          })}`
        );
      }
      let value;
      if (scriptResult.returnReceipt.type === ReceiptType.Return) {
        value = scriptResult.returnReceipt.val;
      }
      if (scriptResult.returnReceipt.type === ReceiptType.ReturnData) {
        const decoded = call22.func.decodeOutput(scriptResult.returnReceipt.data);
        value = decoded[0];
      }
      return value;
    },
    logs
  );
}
__name12(callResultToInvocationResult, "callResultToInvocationResult");
var _a92;
var ScriptRequest = (_a92 = class {
  /**
   * Creates an instance of the ScriptRequest class.
   *
   * @param bytes - The bytes of the script.
   * @param scriptDataEncoder - The script data encoder function.
   * @param scriptResultDecoder - The script result decoder function.
   */
  constructor(bytes, scriptDataEncoder, scriptResultDecoder2) {
    /**
     * The bytes of the script.
     */
    __publicField(this, "bytes");
    /**
     * A function to encode the script data.
     */
    __publicField(this, "scriptDataEncoder");
    /**
     * A function to decode the script result.
     */
    __publicField(this, "scriptResultDecoder");
    this.bytes = arrayify(bytes);
    this.scriptDataEncoder = scriptDataEncoder;
    this.scriptResultDecoder = scriptResultDecoder2;
  }
  /**
   * Gets the script data offset for the given bytes.
   *
   * @param byteLength - The byte length of the script.
   * @param maxInputs - The maxInputs value from the chain's consensus params.
   * @returns The script data offset.
   */
  static getScriptDataOffsetWithScriptBytes(byteLength, maxInputs) {
    const scriptDataBaseOffset = calculateVmTxMemory({ maxInputs }) + SCRIPT_FIXED_SIZE;
    return scriptDataBaseOffset + byteLength;
  }
  /**
   * Gets the script data offset.
   *
   * @param maxInputs - The maxInputs value from the chain's consensus params.
   * @returns The script data offset.
   */
  getScriptDataOffset(maxInputs) {
    return _a92.getScriptDataOffsetWithScriptBytes(this.bytes.length, maxInputs);
  }
  /**
   * Encodes the data for a script call.
   *
   * @param data - The script data.
   * @returns The encoded data.
   */
  encodeScriptData(data) {
    const callScript = this.scriptDataEncoder(data);
    if (ArrayBuffer.isView(callScript)) {
      return callScript;
    }
    this.bytes = arrayify(callScript.script);
    return callScript.data;
  }
  /**
   * Decodes the result of a script call.
   *
   * @param callResult - The CallResult from the script call.
   * @param logs - Optional logs associated with the decoding.
   * @returns The decoded result.
   */
  decodeCallResult(callResult, logs = []) {
    return decodeCallResult(callResult, this.scriptResultDecoder, logs);
  }
}, __name12(_a92, "ScriptRequest"), _a92);
var DEFAULT_OPCODE_PARAMS = {
  assetIdOffset: 0,
  amountOffset: 0,
  gasForwardedOffset: 0,
  callDataOffset: 0
};
var SCRIPT_WRAPPER_CONTRACT_ID = ZeroBytes32;
var getSingleCallInstructions = __name12(({
  callDataOffset,
  gasForwardedOffset,
  amountOffset,
  assetIdOffset
}) => {
  const inst = new InstructionSet(
    movi(16, callDataOffset),
    movi(17, amountOffset),
    lw(17, 17, 0),
    movi(18, assetIdOffset)
  );
  if (gasForwardedOffset) {
    inst.push(
      movi(19, gasForwardedOffset),
      lw(19, 19, 0),
      call3(16, 17, 18, 19)
    );
  } else {
    inst.push(call3(16, 17, 18, RegId.cgas().to_u8()));
  }
  return inst;
}, "getSingleCallInstructions");
function getInstructions(offsets) {
  if (!offsets.length) {
    return new Uint8Array();
  }
  const multiCallInstructions = new InstructionSet();
  for (let i = 0; i < offsets.length; i += 1) {
    multiCallInstructions.extend(getSingleCallInstructions(offsets[i]).entries());
  }
  multiCallInstructions.push(ret(1));
  return multiCallInstructions.toBytes();
}
__name12(getInstructions, "getInstructions");
var isReturnType = __name12((type3) => type3 === ReceiptType.Return || type3 === ReceiptType.ReturnData, "isReturnType");
var getMainCallReceipt = __name12((receipts, contractId) => receipts.find(
  ({ type: type3, id, to }) => type3 === ReceiptType.Call && id === SCRIPT_WRAPPER_CONTRACT_ID && to === contractId
), "getMainCallReceipt");
var scriptResultDecoder = __name12((contractId) => (result) => {
  if (toNumber(result.code) !== 0) {
    throw new FuelError(ErrorCode.SCRIPT_REVERTED, `Transaction reverted.`);
  }
  const mainCallResult = getMainCallReceipt(
    result.receipts,
    contractId.toB256()
  );
  const mainCallInstructionStart = bn(mainCallResult == null ? void 0 : mainCallResult.is);
  const receipts = result.receipts;
  return receipts.filter(({ type: type3 }) => isReturnType(type3)).flatMap((receipt) => {
    if (!mainCallInstructionStart.eq(bn(receipt.is))) {
      return [];
    }
    if (receipt.type === ReceiptType.Return) {
      return [new BigNumberCoder("u64").encode(receipt.val)];
    }
    if (receipt.type === ReceiptType.ReturnData) {
      const encodedScriptReturn = arrayify(receipt.data);
      return [encodedScriptReturn];
    }
    return [new Uint8Array()];
  });
}, "scriptResultDecoder");
var decodeContractCallScriptResult = __name12((callResult, contractId, logs = [], groupedLogs = {}) => decodeCallResult(callResult, scriptResultDecoder(contractId), logs, groupedLogs), "decodeContractCallScriptResult");
var getCallInstructionsLength = __name12((contractCalls) => contractCalls.reduce(
  (sum2, call22) => {
    const offset = { ...DEFAULT_OPCODE_PARAMS };
    if (call22.gas) {
      offset.gasForwardedOffset = 1;
    }
    return sum2 + getSingleCallInstructions(offset).byteLength();
  },
  Instruction.size()
  // placeholder for single RET instruction which is added later
), "getCallInstructionsLength");
var getContractCallScript = __name12((functionScopes, maxInputs) => new ScriptRequest(
  // Script to call the contract, start with stub size matching length of calls
  getInstructions(new Array(functionScopes.length).fill(DEFAULT_OPCODE_PARAMS)),
  (contractCalls) => {
    var _a103;
    const TOTAL_CALLS = contractCalls.length;
    if (TOTAL_CALLS === 0) {
      return { data: new Uint8Array(), script: new Uint8Array() };
    }
    const callInstructionsLength = getCallInstructionsLength(contractCalls);
    const paddingLength = (8 - callInstructionsLength % 8) % 8;
    const paddedInstructionsLength = callInstructionsLength + paddingLength;
    const dataOffset = calculateScriptDataBaseOffset(maxInputs.toNumber()) + paddedInstructionsLength;
    const paramOffsets = [];
    let segmentOffset = dataOffset;
    const scriptData = [];
    for (let i = 0; i < TOTAL_CALLS; i += 1) {
      const call22 = contractCalls[i];
      const amountOffset = segmentOffset;
      const assetIdOffset = amountOffset + WORD_SIZE;
      const callDataOffset = assetIdOffset + ASSET_ID_LEN;
      const encodedSelectorOffset = callDataOffset + CONTRACT_ID_LEN + WORD_SIZE + WORD_SIZE;
      const encodedArgsOffset = encodedSelectorOffset + call22.fnSelectorBytes.byteLength;
      const encodedArgs = arrayify(call22.data);
      let gasForwardedOffset = 0;
      scriptData.push(new BigNumberCoder("u64").encode(call22.amount || 0));
      scriptData.push(new B256Coder().encode(((_a103 = call22.assetId) == null ? void 0 : _a103.toString()) || ZeroBytes32));
      scriptData.push(call22.contractId.toBytes());
      scriptData.push(new BigNumberCoder("u64").encode(encodedSelectorOffset));
      scriptData.push(new BigNumberCoder("u64").encode(encodedArgsOffset));
      scriptData.push(call22.fnSelectorBytes);
      scriptData.push(encodedArgs);
      if (call22.gas) {
        scriptData.push(new BigNumberCoder("u64").encode(call22.gas));
        gasForwardedOffset = encodedArgsOffset + encodedArgs.byteLength;
      }
      const callParamOffsets = {
        amountOffset,
        assetIdOffset,
        gasForwardedOffset,
        callDataOffset
      };
      paramOffsets.push(callParamOffsets);
      segmentOffset = dataOffset + concat(scriptData).byteLength;
    }
    const script = getInstructions(paramOffsets);
    const finalScriptData = concat(scriptData);
    return { data: finalScriptData, script };
  },
  () => [new Uint8Array()]
), "getContractCallScript");
var extractInvocationResult = __name12((functionScopes, receipts, isMultiCall, logs, groupedLogs = {}) => {
  var _a103;
  const mainCallConfig = (_a103 = functionScopes[0]) == null ? void 0 : _a103.getCallConfig();
  if (functionScopes.length === 1 && mainCallConfig && "bytes" in mainCallConfig.program) {
    return callResultToInvocationResult({ receipts }, mainCallConfig, logs, groupedLogs);
  }
  const encodedResults = decodeContractCallScriptResult(
    { receipts },
    (mainCallConfig == null ? void 0 : mainCallConfig.program).id,
    logs,
    groupedLogs
  );
  const decodedResults = encodedResults.map((encodedResult, i) => {
    var _a104;
    const { func } = functionScopes[i].getCallConfig();
    return (_a104 = func.decodeOutput(encodedResult)) == null ? void 0 : _a104[0];
  });
  return isMultiCall ? decodedResults : decodedResults == null ? void 0 : decodedResults[0];
}, "extractInvocationResult");
var buildFunctionResult = __name12(async (params) => {
  var _a103;
  const { funcScope, isMultiCall, program, transactionResponse } = params;
  const txResult = await transactionResponse.waitForResult();
  const { receipts } = txResult;
  const functionScopes = Array.isArray(funcScope) ? funcScope : [funcScope];
  const mainCallConfig = (_a103 = functionScopes[0]) == null ? void 0 : _a103.getCallConfig();
  const { logs, groupedLogs } = getAllResultLogs({ receipts, mainCallConfig, functionScopes });
  const value = extractInvocationResult(
    functionScopes,
    receipts,
    isMultiCall,
    logs,
    groupedLogs
  );
  const gasUsed = getGasUsedFromReceipts(receipts);
  const submitResult = {
    isMultiCall,
    functionScopes,
    value,
    program,
    transactionResult: txResult,
    transactionResponse,
    transactionId: transactionResponse.id,
    logs,
    groupedLogs,
    gasUsed
  };
  return submitResult;
}, "buildFunctionResult");
var buildDryRunResult = __name12((params) => {
  var _a103;
  const { funcScopes, callResult, isMultiCall } = params;
  const { receipts } = callResult;
  const functionScopes = Array.isArray(funcScopes) ? funcScopes : [funcScopes];
  const mainCallConfig = (_a103 = functionScopes[0]) == null ? void 0 : _a103.getCallConfig();
  const { logs, groupedLogs } = getAllResultLogs({ receipts, mainCallConfig, functionScopes });
  const value = extractInvocationResult(
    functionScopes,
    receipts,
    isMultiCall,
    logs,
    groupedLogs
  );
  const gasUsed = getGasUsedFromReceipts(receipts);
  const submitResult = {
    functionScopes,
    callResult,
    isMultiCall,
    gasUsed,
    value
  };
  return submitResult;
}, "buildDryRunResult");
function createContractCall(funcScope) {
  const { program, args, forward, func, callParameters, externalAbis } = funcScope.getCallConfig();
  const data = func.encodeArguments(args);
  return {
    contractId: program.id,
    fnSelectorBytes: func.selectorBytes,
    data,
    assetId: forward == null ? void 0 : forward.assetId,
    amount: forward == null ? void 0 : forward.amount,
    gas: callParameters == null ? void 0 : callParameters.gasLimit,
    externalContractsAbis: externalAbis
  };
}
__name12(createContractCall, "createContractCall");
var _a93;
var BaseInvocationScope = (_a93 = class {
  /**
   * Constructs an instance of BaseInvocationScope.
   *
   * @param program - The abstract program to be invoked.
   * @param isMultiCall - A flag indicating whether the invocation is a multi-call.
   */
  constructor(program, isMultiCall) {
    __publicField(this, "transactionRequest");
    __publicField(this, "program");
    __publicField(this, "functionInvocationScopes", []);
    __publicField(this, "txParameters");
    __publicField(this, "requiredCoins", []);
    __publicField(this, "isMultiCall", false);
    __publicField(this, "hasCallParamsGasLimit", false);
    // flag to check if any of the callParams has gasLimit set
    __publicField(this, "externalAbis", {});
    __publicField(this, "addSignersCallback");
    this.program = program;
    this.isMultiCall = isMultiCall;
    this.transactionRequest = new ScriptTransactionRequest();
  }
  /**
   * Getter for the contract calls.
   *
   * @returns An array of contract calls.
   */
  get calls() {
    return this.functionInvocationScopes.map((funcScope) => createContractCall(funcScope));
  }
  /**
   * Updates the script request with the current contract calls.
   */
  async updateScriptRequest() {
    const provider = this.getProvider();
    const {
      consensusParameters: {
        txParameters: { maxInputs }
      }
    } = await provider.getChain();
    const contractCallScript = getContractCallScript(this.functionInvocationScopes, maxInputs);
    this.transactionRequest.setScript(contractCallScript, this.calls);
  }
  /**
   * Updates the transaction request with the current input/output.
   */
  updateContractInputAndOutput() {
    const calls = this.calls;
    calls.forEach((c) => {
      if (c.contractId) {
        this.transactionRequest.addContractInputAndOutput(c.contractId);
      }
      if (c.externalContractsAbis) {
        Object.keys(c.externalContractsAbis).forEach(
          (contractId) => this.transactionRequest.addContractInputAndOutput(new Address(contractId))
        );
      }
    });
  }
  /**
   * Gets the required coins for the transaction.
   *
   * @returns An array of required coin quantities.
   */
  getRequiredCoins() {
    const forwardingAssets = this.calls.map((call22) => ({
      assetId: String(call22.assetId),
      amount: bn(call22.amount || 0)
    })).filter(({ assetId, amount }) => assetId && !bn(amount).isZero());
    return forwardingAssets;
  }
  /**
   * Updates the required coins for the transaction.
   */
  updateRequiredCoins() {
    const assets2 = this.getRequiredCoins();
    const reduceForwardCoins = __name12((requiredCoins, { assetId, amount }) => {
      var _a103;
      const currentAmount = ((_a103 = requiredCoins.get(assetId)) == null ? void 0 : _a103.amount) || bn(0);
      return requiredCoins.set(assetId, {
        assetId: String(assetId),
        amount: currentAmount.add(amount)
      });
    }, "reduceForwardCoins");
    this.requiredCoins = Array.from(
      assets2.reduce(reduceForwardCoins, /* @__PURE__ */ new Map()).values()
    );
  }
  /**
   * Adds a single call to the invocation scope.
   *
   * @param funcScope - The function scope to add.
   * @returns The current instance of the class.
   */
  addCall(funcScope) {
    this.addCalls([funcScope]);
    return this;
  }
  /**
   * Adds multiple calls to the invocation scope.
   *
   * @param funcScopes - An array of function scopes to add.
   * @returns The current instance of the class.
   */
  addCalls(funcScopes) {
    this.functionInvocationScopes.push(...funcScopes);
    this.updateContractInputAndOutput();
    this.updateRequiredCoins();
    return this;
  }
  /**
   * Prepares the transaction by updating the script request, required coins, and checking the gas limit.
   */
  async prepareTransaction() {
    await initWasm();
    await this.updateScriptRequest();
    this.updateRequiredCoins();
    this.checkGasLimitTotal();
    if (this.transactionRequest.type === TransactionType.Script) {
      this.transactionRequest.abis = getAbisFromAllCalls(this.functionInvocationScopes);
    }
  }
  /**
   * Checks if the total gas limit is within the acceptable range.
   */
  checkGasLimitTotal() {
    const gasLimitOnCalls = this.calls.reduce((total, call22) => total.add(call22.gas || 0), bn(0));
    if (this.transactionRequest.gasLimit.eq(0)) {
      this.transactionRequest.gasLimit = gasLimitOnCalls;
    } else if (gasLimitOnCalls.gt(this.transactionRequest.gasLimit)) {
      throw new FuelError(
        ErrorCode.TRANSACTION_ERROR,
        "Transaction's gasLimit must be equal to or greater than the combined forwarded gas of all calls."
      );
    }
  }
  /**
   * Gets the transaction cost for dry running the transaction.
   *
   * @returns The transaction cost details.
   */
  async getTransactionCost() {
    const request2 = clone_default(await this.getTransactionRequest());
    const account = this.program.account ?? Wallet.generate({ provider: this.getProvider() });
    return account.getTransactionCost(request2, {
      quantities: this.getRequiredCoins(),
      signatureCallback: this.addSignersCallback
    });
  }
  /**
   * Costs and funds the underlying transaction request.
   *
   * @returns The invocation scope as a funded transaction request.
   */
  async fundWithRequiredCoins() {
    var _a103;
    let transactionRequest = await this.getTransactionRequest();
    transactionRequest = clone_default(transactionRequest);
    const txCost = await this.getTransactionCost();
    const { gasUsed, missingContractIds, outputVariables, maxFee } = txCost;
    this.setDefaultTxParams(transactionRequest, gasUsed, maxFee);
    missingContractIds.forEach((contractId) => {
      transactionRequest.addContractInputAndOutput(new Address(contractId));
    });
    transactionRequest.addVariableOutputs(outputVariables);
    await ((_a103 = this.program.account) == null ? void 0 : _a103.fund(transactionRequest, txCost));
    if (this.addSignersCallback) {
      await this.addSignersCallback(transactionRequest);
    }
    return transactionRequest;
  }
  /**
   * Sets the transaction parameters.
   *
   * @param txParams - The transaction parameters to set.
   * @returns The current instance of the class.
   */
  txParams(txParams) {
    var _a103;
    this.txParameters = txParams;
    const request2 = this.transactionRequest;
    request2.tip = bn(txParams.tip || request2.tip);
    request2.gasLimit = bn(txParams.gasLimit || request2.gasLimit);
    request2.maxFee = txParams.maxFee ? bn(txParams.maxFee) : request2.maxFee;
    request2.witnessLimit = txParams.witnessLimit ? bn(txParams.witnessLimit) : request2.witnessLimit;
    request2.maturity = txParams.maturity || request2.maturity;
    request2.expiration = txParams.expiration || request2.expiration;
    request2.addVariableOutputs(((_a103 = this.txParameters) == null ? void 0 : _a103.variableOutputs) || 0);
    return this;
  }
  /**
   * Adds contracts to the invocation scope.
   *
   * @param contracts - An array of contracts to add.
   * @returns The current instance of the class.
   */
  addContracts(contracts) {
    contracts.forEach((contract) => {
      if (typeof contract === "string") {
        this.transactionRequest.addContractInputAndOutput(new Address(contract));
      } else {
        this.transactionRequest.addContractInputAndOutput(contract.id);
        this.externalAbis[contract.id.toB256()] = contract.interface.jsonAbi;
      }
    });
    return this;
  }
  /**
   * Adds an asset transfer to an Account on the contract call transaction request.
   *
   * @param transferParams - The object representing the transfer to be made.
   * @returns The current instance of the class.
   */
  addTransfer(transferParams) {
    const { amount, destination, assetId } = transferParams;
    this.transactionRequest = this.transactionRequest.addCoinOutput(
      new Address(destination),
      amount,
      assetId
    );
    return this;
  }
  /**
   * Adds multiple transfers to the contract call transaction request.
   *
   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.
   * @returns The current instance of the class.
   */
  addBatchTransfer(transferParams) {
    transferParams.forEach(({ destination, amount, assetId }) => {
      this.transactionRequest = this.transactionRequest.addCoinOutput(
        new Address(destination),
        amount,
        assetId
      );
    });
    return this;
  }
  addSigners(signers) {
    this.addSignersCallback = (transactionRequest) => transactionRequest.addAccountWitnesses(signers);
    return this;
  }
  /**
   * Prepares and returns the transaction request object.
   *
   * @returns The prepared transaction request.
   */
  async getTransactionRequest() {
    await this.prepareTransaction();
    return this.transactionRequest;
  }
  /**
   * Submits the contract call transaction and returns a promise that resolves to an object
   * containing the transaction ID and a function to wait for the result. The promise will resolve
   * as soon as the transaction is submitted to the node.
   *
   * @returns A promise that resolves to an object containing:
   * - `transactionId`: The ID of the submitted transaction.
   * - `waitForResult`: A function that waits for the transaction result.
   * @template T - The type of the return value.
   */
  async call() {
    assert2(this.program.account, "Wallet is required!");
    const transactionRequest = await this.fundWithRequiredCoins();
    const response = await this.program.account.sendTransaction(transactionRequest, {
      estimateTxDependencies: false
    });
    const transactionId = response.id;
    return {
      transactionId,
      waitForResult: __name12(async () => buildFunctionResult({
        funcScope: this.functionInvocationScopes,
        isMultiCall: this.isMultiCall,
        program: this.program,
        transactionResponse: response
      }), "waitForResult")
    };
  }
  /**
   * Simulates a transaction.
   *
   * @returns The result of the invocation call.
   */
  async simulate() {
    assert2(this.program.account, "Wallet is required!");
    if (!("populateTransactionWitnessesSignature" in this.program.account)) {
      throw new FuelError(
        ErrorCode.ABI_MAIN_METHOD_MISSING,
        "An unlocked wallet is required to simulate a contract call."
      );
    }
    const transactionRequest = await this.fundWithRequiredCoins();
    const callResult = await this.program.account.simulateTransaction(transactionRequest, {
      estimateTxDependencies: false
    });
    return buildDryRunResult({
      funcScopes: this.functionInvocationScopes,
      callResult,
      isMultiCall: this.isMultiCall
    });
  }
  /**
   * Executes a transaction in dry run mode.
   *
   * @returns The result of the invocation call.
   */
  async dryRun() {
    const { receipts } = await this.getTransactionCost();
    const callResult = {
      receipts
    };
    return buildDryRunResult({
      funcScopes: this.functionInvocationScopes,
      callResult,
      isMultiCall: this.isMultiCall
    });
  }
  async get() {
    const { receipts } = await this.getTransactionCost();
    const callResult = {
      receipts
    };
    return buildDryRunResult({
      funcScopes: this.functionInvocationScopes,
      callResult,
      isMultiCall: this.isMultiCall
    });
  }
  getProvider() {
    const provider = this.program.provider;
    return provider;
  }
  /**
   * Obtains the ID of a transaction.
   *
   * @param chainId - the chainId to use to hash the transaction with
   * @returns the ID of the transaction.
   */
  async getTransactionId(chainId) {
    const chainIdToHash = chainId ?? await this.getProvider().getChainId();
    const transactionRequest = await this.getTransactionRequest();
    return transactionRequest.getTransactionId(chainIdToHash);
  }
  /**
   * In case the gasLimit is *not* set by the user, this method sets a default value.
   */
  setDefaultTxParams(transactionRequest, gasUsed, maxFee) {
    var _a103, _b2;
    const gasLimitSpecified = isDefined((_a103 = this.txParameters) == null ? void 0 : _a103.gasLimit) || this.hasCallParamsGasLimit;
    const maxFeeSpecified = isDefined((_b2 = this.txParameters) == null ? void 0 : _b2.maxFee);
    const { gasLimit: setGasLimit, maxFee: setMaxFee } = transactionRequest;
    if (!gasLimitSpecified) {
      transactionRequest.gasLimit = gasUsed;
    } else if (setGasLimit.lt(gasUsed)) {
      throw new FuelError(
        ErrorCode.GAS_LIMIT_TOO_LOW,
        `Gas limit '${setGasLimit}' is lower than the required: '${gasUsed}'.`
      );
    }
    if (!maxFeeSpecified) {
      transactionRequest.maxFee = maxFee;
    } else if (maxFee.gt(setMaxFee)) {
      throw new FuelError(
        ErrorCode.MAX_FEE_TOO_LOW,
        `Max fee '${setMaxFee}' is lower than the required: '${maxFee}'.`
      );
    }
  }
}, __name12(_a93, "BaseInvocationScope"), _a93);
var _a94;
var FunctionInvocationScope = (_a94 = class extends BaseInvocationScope {
  /**
   * Constructs an instance of FunctionInvocationScope.
   *
   * @param program - The program.
   * @param func - The function fragment.
   * @param args - The arguments.
   */
  constructor(program, func, args) {
    super(program, false);
    __publicField(this, "func");
    __publicField(this, "callParameters");
    __publicField(this, "forward");
    __publicField(this, "args");
    this.func = func;
    this.args = args || [];
    this.setArguments(...args);
    super.addCall(this);
  }
  /**
   * Gets the call configuration.
   *
   * @returns The call configuration.
   */
  getCallConfig() {
    return {
      func: this.func,
      program: this.program,
      callParameters: this.callParameters,
      txParameters: this.txParameters,
      forward: this.forward,
      args: this.args,
      externalAbis: this.externalAbis
    };
  }
  /**
   * Sets the arguments for the function invocation.
   *
   * @param args - The arguments.
   * @returns The instance of FunctionInvocationScope.
   */
  setArguments(...args) {
    this.args = args || [];
    return this;
  }
  /**
   * Sets the call parameters for the function invocation.
   *
   * @param callParams - The call parameters.
   * @returns The instance of FunctionInvocationScope.
   * @throws If the function is not payable and forward is set.
   */
  callParams(callParams) {
    if (!this.hasCallParamsGasLimit && (callParams == null ? void 0 : callParams.gasLimit) !== void 0) {
      this.hasCallParamsGasLimit = true;
    }
    this.callParameters = callParams;
    if (callParams == null ? void 0 : callParams.forward) {
      if (!this.func.attributes.find((attr) => attr.name === "payable")) {
        throw new FuelError(
          ErrorCode.TRANSACTION_ERROR,
          `The target function ${this.func.name} cannot accept forwarded funds as it's not marked as 'payable'.`
        );
      }
      this.forward = coinQuantityfy(callParams.forward);
    }
    this.setArguments(...this.args);
    this.updateRequiredCoins();
    return this;
  }
}, __name12(_a94, "FunctionInvocationScope"), _a94);
var _a95;
var MultiCallInvocationScope = (_a95 = class extends BaseInvocationScope {
  /**
   * Constructs an instance of MultiCallInvocationScope.
   *
   * @param contract - The contract.
   * @param funcScopes - An array of function invocation scopes.
   */
  constructor(contract, funcScopes) {
    super(contract, true);
    this.addCalls(funcScopes);
  }
  /**
   * Adds a single function invocation scope to the multi-call invocation scope.
   *
   * @param funcScope - The function invocation scope.
   * @returns The instance of MultiCallInvocationScope.
   */
  addCall(funcScope) {
    return super.addCalls([funcScope]);
  }
  /**
   * Adds multiple function invocation scopes to the multi-call invocation scope.
   *
   * @param funcScopes - An array of function invocation scopes.
   * @returns The instance of MultiCallInvocationScope.
   */
  addCalls(funcScopes) {
    return super.addCalls(funcScopes);
  }
}, __name12(_a95, "MultiCallInvocationScope"), _a95);
var _a96;
var Contract = (_a96 = class {
  /**
   * Creates an instance of the Contract class.
   *
   * @param id - The contract's address.
   * @param abi - The contract's ABI (JSON ABI or Interface instance).
   * @param accountOrProvider - The account or provider for interaction.
   */
  constructor(id, abi2, accountOrProvider) {
    /**
     * The unique contract identifier.
     */
    __publicField(this, "id");
    /**
     * The provider for interacting with the contract.
     */
    __publicField(this, "provider");
    /**
     * The contract's ABI interface.
     */
    __publicField(this, "interface");
    /**
     * The account associated with the contract, if available.
     */
    __publicField(this, "account");
    /**
     * A collection of functions available on the contract.
     */
    __publicField(this, "functions", {});
    this.interface = abi2 instanceof Interface ? abi2 : new Interface(abi2);
    this.id = new Address(id);
    if (accountOrProvider && "provider" in accountOrProvider) {
      this.provider = accountOrProvider.provider;
      this.account = accountOrProvider;
    } else {
      this.provider = accountOrProvider;
      this.account = null;
    }
    Object.keys(this.interface.functions).forEach((name) => {
      const fragment = this.interface.getFunction(name);
      Object.defineProperty(this.functions, fragment.name, {
        value: this.buildFunction(fragment),
        writable: false
      });
    });
  }
  /**
   * Build a function invocation scope for the provided function fragment.
   *
   * @param func - The function fragment to build a scope for.
   * @returns A function that creates a FunctionInvocationScope.
   */
  buildFunction(func) {
    return (() => {
      const funcInvocationScopeCreator = __name12((...args) => new FunctionInvocationScope(this, func, args), "funcInvocationScopeCreator");
      Object.defineProperty(funcInvocationScopeCreator, "isReadOnly", {
        value: __name12(() => func.isReadOnly(), "value"),
        writable: false
      });
      return funcInvocationScopeCreator;
    })();
  }
  /**
   * Create a multi-call invocation scope for the provided function invocation scopes.
   *
   * @param calls - An array of FunctionInvocationScopes to execute in a batch.
   * @returns A MultiCallInvocationScope instance.
   */
  multiCall(calls) {
    return new MultiCallInvocationScope(this, calls);
  }
  /**
   * Get the balance for a given asset ID for this contract.
   *
   * @param assetId - The specified asset ID.
   * @returns The balance of the contract for the specified asset.
   */
  getBalance(assetId) {
    return this.provider.getContractBalance(this.id, assetId);
  }
}, __name12(_a96, "Contract"), _a96);

// node_modules/@fuel-ts/script/dist/index.mjs
var __defProp13 = Object.defineProperty;
var __name13 = (target, value) => __defProp13(target, "name", { value, configurable: true });
var _a97;
var ScriptInvocationScope = (_a97 = class extends FunctionInvocationScope {
  constructor() {
    super(...arguments);
    __publicField(this, "scriptRequest");
  }
  async updateScriptRequest() {
    if (!this.scriptRequest) {
      await this.buildScriptRequest();
    }
    this.transactionRequest.setScript(this.scriptRequest, this.args);
  }
  async buildScriptRequest() {
    const programBytes = this.program.bytes;
    const chainInfoCache = await this.program.provider.getChain();
    if (!chainInfoCache) {
      throw new FuelError(
        FuelError.CODES.CHAIN_INFO_CACHE_EMPTY,
        "Provider chain info cache is empty. Please make sure to initialize the `Provider` properly by running `new Provider()`"
      );
    }
    this.scriptRequest = new ScriptRequest(
      programBytes,
      (args) => this.func.encodeArguments(args),
      () => []
    );
  }
}, __name13(_a97, "ScriptInvocationScope"), _a97);
var _a98;
var AbstractScript = (_a98 = class extends AbstractProgram {
}, __name13(_a98, "AbstractScript"), _a98);
var _a99;
var Script = (_a99 = class extends AbstractScript {
  /**
   * Create a new instance of the Script class.
   *
   * @param bytecode - The compiled bytecode of the script.
   * @param abi - The ABI interface for the script.
   * @param account - The account associated with the script.
   */
  constructor(bytecode2, abi2, account) {
    super();
    /**
     * The compiled bytecode of the script.
     */
    __publicField(this, "bytes");
    /**
     * The ABI interface for the script.
     */
    __publicField(this, "interface");
    /**
     * The account associated with the script.
     */
    __publicField(this, "account");
    /**
     * The script request object.
     */
    __publicField(this, "script");
    /**
     * The provider used for interacting with the network.
     */
    __publicField(this, "provider");
    /**
     * Functions that can be invoked within the script.
     */
    __publicField(this, "functions");
    this.bytes = arrayify(bytecode2);
    this.interface = new Interface(abi2);
    this.provider = account.provider;
    this.account = account;
    this.functions = {
      main: __name13((...args) => new ScriptInvocationScope(this, this.interface.getFunction("main"), args), "main")
    };
  }
  /**
   * Set the configurable constants of the script.
   *
   * @param configurables - An object containing the configurable constants and their values.
   * @throws Will throw an error if the script has no configurable constants to be set or if an invalid constant is provided.
   * @returns This instance of the `Script`.
   */
  setConfigurableConstants(configurables) {
    try {
      if (!Object.keys(this.interface.configurables).length) {
        throw new FuelError(
          FuelError.CODES.INVALID_CONFIGURABLE_CONSTANTS,
          `The script does not have configurable constants to be set`
        );
      }
      Object.entries(configurables).forEach(([key, value]) => {
        if (!this.interface.configurables[key]) {
          throw new FuelError(
            FuelError.CODES.CONFIGURABLE_NOT_FOUND,
            `The script does not have a configurable constant named: '${key}'`
          );
        }
        const { offset } = this.interface.configurables[key];
        const encoded = this.interface.encodeConfigurable(key, value);
        this.bytes.set(encoded, offset);
      });
    } catch (err2) {
      throw new FuelError(
        FuelError.CODES.INVALID_CONFIGURABLE_CONSTANTS,
        `Error setting configurable constants: ${err2.message}.`
      );
    }
    return this;
  }
  /**
   *
   * @param account - The account used to pay the deployment costs.
   * @returns The _blobId_ and a _waitForResult_ callback that returns the deployed predicate
   * once the blob deployment transaction finishes.
   *
   * The returned loader script will have the same configurable constants
   * as the original script which was used to generate the loader script.
   */
  deploy(account) {
    return deployScriptOrPredicate({
      deployer: account,
      abi: this.interface.jsonAbi,
      bytecode: this.bytes,
      loaderInstanceCallback: __name13((loaderBytecode, newAbi) => new _a99(loaderBytecode, newAbi, this.account), "loaderInstanceCallback")
    });
  }
}, __name13(_a99, "Script"), _a99);
var returnZeroScript2 = new ScriptRequest(
  /*
    Opcode::RET(REG_ZERO)
    Opcode::NOOP
  */
  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281
  "0x24000000",
  () => new Uint8Array(0),
  () => void 0
);

// node_modules/@fuel-ts/contract/dist/index.mjs
var __defProp14 = Object.defineProperty;
var __name14 = (target, value) => __defProp14(target, "name", { value, configurable: true });
var getLoaderInstructions = __name14((blobIds) => {
  const { RegId: RegId2, Instruction: Instruction2 } = web_exports;
  const numberOfInstructions = 12;
  const numberOfBlobs = blobIds.length;
  const blobIdSize = BYTES_32;
  const blobIdBytes = concat(blobIds.map((b) => arrayify(b)));
  const instructionBytes = new InstructionSet(
    // 1. load the blob contents into memory
    // find the start of the hardcoded blob ids, which are located after the code ends
    move_(16, RegId2.pc().to_u8()),
    // 0x10 to hold the address of the current blob id
    addi(16, 16, numberOfInstructions * Instruction2.size()),
    // The contract is going to be loaded from the current value of SP onwards, save
    // the location into 0x16 so we can jump into it later on
    move_(22, RegId2.sp().to_u8()),
    // loop counter
    movi(19, numberOfBlobs),
    // LOOP starts here
    // 0x11 to hold the size of the current blob
    bsiz(17, 16),
    // push the blob contents onto the stack
    ldc(16, 0, 17, 1),
    // move on to the next blob
    addi(16, 16, blobIdSize),
    // decrement the loop counter
    subi(19, 19, 1),
    // Jump backwards (3+1) instructions if the counter has not reached 0
    jnzb(19, RegId2.zero().to_u8(), 3),
    // Jump into the memory where the contract is loaded
    // what follows is called _jmp_mem by the sway compiler
    // subtract the address contained in IS because jmp will add it back
    sub(22, 22, RegId2.is().to_u8()),
    // jmp will multiply by 4 so we need to divide to cancel that out
    divi(22, 22, 4),
    // jump to the start of the contract we loaded
    jmp(22)
  ).toBytes();
  return concat([instructionBytes, blobIdBytes]);
}, "getLoaderInstructions");
var getContractChunks = __name14((bytecode2, chunkSize) => {
  const chunks = [];
  for (let offset = 0, index = 0; offset < bytecode2.length; offset += chunkSize, index++) {
    let chunk = bytecode2.slice(offset, offset + chunkSize);
    let length3 = chunk.length;
    if (length3 % WORD_SIZE !== 0) {
      chunk = concat([chunk, new Uint8Array(chunkSize - chunk.length)]);
      length3 = chunk.length;
    }
    chunks.push({ id: index, size: length3, bytecode: chunk });
  }
  return chunks;
}, "getContractChunks");
var getContractRoot = __name14((bytecode2) => {
  const chunkSize = 16 * 1024;
  const bytes = arrayify(bytecode2);
  const chunks = chunkAndPadBytes(bytes, chunkSize);
  return calcRoot(chunks.map((c) => hexlify(c)));
}, "getContractRoot");
var getContractStorageRoot = __name14((storageSlots2) => {
  const tree = new SparseMerkleTree();
  storageSlots2.forEach(({ key, value }) => tree.update(sha2563(key), value));
  return tree.root;
}, "getContractStorageRoot");
var getContractId = __name14((bytecode2, salt, stateRoot) => {
  const root = getContractRoot(arrayify(bytecode2));
  const contractId = sha2563(concat(["0x4655454C", salt, root, stateRoot]));
  return contractId;
}, "getContractId");
var hexlifyWithPrefix = __name14((value) => hexlify(value.startsWith("0x") ? value : `0x${value}`), "hexlifyWithPrefix");
var CHUNK_SIZE_MULTIPLIER = 0.95;
var _a100;
var ContractFactory = (_a100 = class {
  /**
   * Create a ContractFactory instance.
   *
   * @param bytecode - The bytecode of the contract.
   * @param abi - The contract's ABI (Application Binary Interface).
   * @param accountOrProvider - An account or provider to be associated with the factory.
   */
  constructor(bytecode2, abi2, accountOrProvider = null, storageSlots2 = []) {
    __publicField(this, "bytecode");
    __publicField(this, "interface");
    __publicField(this, "provider");
    __publicField(this, "account");
    __publicField(this, "storageSlots");
    this.bytecode = arrayify(bytecode2);
    if (abi2 instanceof Interface) {
      this.interface = abi2;
    } else {
      this.interface = new Interface(abi2);
    }
    if (accountOrProvider && "provider" in accountOrProvider) {
      this.provider = accountOrProvider.provider;
      this.account = accountOrProvider;
    } else {
      this.provider = accountOrProvider;
      this.account = null;
    }
    this.storageSlots = storageSlots2;
  }
  /**
   * Connect the factory to a provider.
   *
   * @param provider - The provider to be associated with the factory.
   * @returns A new ContractFactory instance.
   */
  connect(provider) {
    return new _a100(this.bytecode, this.interface, provider);
  }
  /**
   * Create a transaction request to deploy a contract with the specified options.
   *
   * @param deployOptions - Options for deploying the contract.
   * @returns The CreateTransactionRequest object for deploying the contract.
   */
  createTransactionRequest(deployOptions) {
    const storageSlots2 = ((deployOptions == null ? void 0 : deployOptions.storageSlots) ?? []).concat(this.storageSlots).map(({ key, value }) => ({
      key: hexlifyWithPrefix(key),
      value: hexlifyWithPrefix(value)
    })).filter((el, index, self) => self.findIndex((s) => s.key === el.key) === index).sort(({ key: keyA }, { key: keyB }) => keyA.localeCompare(keyB));
    const options = {
      salt: randomBytes2(32),
      ...deployOptions ?? {},
      storageSlots: storageSlots2
    };
    if (!this.provider) {
      throw new FuelError(
        ErrorCode.MISSING_PROVIDER,
        "Cannot create transaction request without provider"
      );
    }
    const bytecode2 = (deployOptions == null ? void 0 : deployOptions.bytecode) || this.bytecode;
    const stateRoot = options.stateRoot || getContractStorageRoot(options.storageSlots);
    const contractId = getContractId(bytecode2, options.salt, stateRoot);
    const transactionRequest = new CreateTransactionRequest({
      bytecodeWitnessIndex: 0,
      witnesses: [bytecode2],
      ...options
    });
    transactionRequest.addContractCreatedOutput(contractId, stateRoot);
    return {
      contractId,
      transactionRequest
    };
  }
  /**
   * Takes a transaction request, estimates it and funds it.
   *
   * @param request - the request to fund.
   * @param options - options for funding the request.
   * @returns a funded transaction request.
   */
  async fundTransactionRequest(request2, options = {}) {
    const account = this.getAccount();
    const { maxFee: setMaxFee } = options;
    const txCost = await account.getTransactionCost(request2);
    if (isDefined(setMaxFee)) {
      if (txCost.maxFee.gt(setMaxFee)) {
        throw new FuelError(
          ErrorCode.MAX_FEE_TOO_LOW,
          `Max fee '${options.maxFee}' is lower than the required: '${txCost.maxFee}'.`
        );
      }
    } else {
      request2.maxFee = txCost.maxFee;
    }
    await account.fund(request2, txCost);
    return request2;
  }
  /**
   * Deploy a contract of any length with the specified options.
   *
   * @param deployOptions - Options for deploying the contract.
   * @returns A promise that resolves to the deployed contract instance.
   */
  async deploy(deployOptions = {}) {
    const account = this.getAccount();
    const { consensusParameters } = await account.provider.getChain();
    const maxContractSize = consensusParameters.contractParameters.contractMaxSize.toNumber();
    return this.bytecode.length > maxContractSize ? this.deployAsBlobTx(deployOptions) : this.deployAsCreateTx(deployOptions);
  }
  /**
   * Deploy a contract with the specified options.
   *
   * @param deployOptions - Options for deploying the contract.
   * @returns A promise that resolves to the deployed contract instance.
   */
  async deployAsCreateTx(deployOptions = {}) {
    const account = this.getAccount();
    const { consensusParameters } = await account.provider.getChain();
    const maxContractSize = consensusParameters.contractParameters.contractMaxSize.toNumber();
    if (this.bytecode.length > maxContractSize) {
      throw new FuelError(
        ErrorCode.CONTRACT_SIZE_EXCEEDS_LIMIT,
        "Contract bytecode is too large. Please use `deployAsBlobTx` instead."
      );
    }
    const { contractId, transactionRequest } = await this.prepareDeploy(deployOptions);
    const transactionResponse = await account.sendTransaction(transactionRequest);
    const waitForResult = __name14(async () => {
      const transactionResult = await transactionResponse.waitForResult();
      const contract = new Contract(contractId, this.interface, account);
      return { contract, transactionResult };
    }, "waitForResult");
    return {
      contractId,
      waitForTransactionId: __name14(() => Promise.resolve(transactionResponse.id), "waitForTransactionId"),
      waitForResult
    };
  }
  /**
   * Chunks and deploys a contract via a loader contract. Suitable for deploying contracts larger than the max contract size.
   *
   * @param deployOptions - Options for deploying the contract.
   * @returns A promise that resolves to the deployed contract instance.
   */
  async deployAsBlobTx(deployOptions = {
    chunkSizeMultiplier: CHUNK_SIZE_MULTIPLIER
  }) {
    const account = this.getAccount();
    const { configurableConstants, chunkSizeMultiplier } = deployOptions;
    if (configurableConstants) {
      this.setConfigurableConstants(configurableConstants);
    }
    const chunkSize = await this.getMaxChunkSize(deployOptions, chunkSizeMultiplier);
    const chunks = getContractChunks(arrayify(this.bytecode), chunkSize).map((c) => {
      const transactionRequest = this.blobTransactionRequest({
        ...deployOptions,
        bytecode: c.bytecode
      });
      return {
        ...c,
        transactionRequest,
        blobId: transactionRequest.blobId
      };
    });
    const blobIds = chunks.map(({ blobId }) => blobId);
    const loaderBytecode = getLoaderInstructions(blobIds);
    const { contractId, transactionRequest: createRequest } = this.createTransactionRequest({
      bytecode: loaderBytecode,
      ...deployOptions
    });
    const uniqueBlobIds = [...new Set(blobIds)];
    const uploadedBlobIds = await account.provider.getBlobs(uniqueBlobIds);
    const blobIdsToUpload = uniqueBlobIds.filter((id) => !uploadedBlobIds.includes(id));
    let totalCost = bn(0);
    const chainInfo = await account.provider.getChain();
    const gasPrice = await account.provider.estimateGasPrice(10);
    const priceFactor = chainInfo.consensusParameters.feeParameters.gasPriceFactor;
    for (const { transactionRequest, blobId } of chunks) {
      if (blobIdsToUpload.includes(blobId)) {
        const minGas = transactionRequest.calculateMinGas(chainInfo);
        const minFee = calculateGasFee({
          gasPrice,
          gas: minGas,
          priceFactor,
          tip: transactionRequest.tip
        }).add(1);
        totalCost = totalCost.add(minFee);
      }
      const createMinGas = createRequest.calculateMinGas(chainInfo);
      const createMinFee = calculateGasFee({
        gasPrice,
        gas: createMinGas,
        priceFactor,
        tip: createRequest.tip
      }).add(1);
      totalCost = totalCost.add(createMinFee);
    }
    if (totalCost.gt(await account.getBalance())) {
      throw new FuelError(ErrorCode.FUNDS_TOO_LOW, "Insufficient balance to deploy contract.");
    }
    let txIdResolver;
    const txIdPromise = new Promise((resolve) => {
      txIdResolver = resolve;
    });
    const waitForResult = __name14(async () => {
      const uploadedBlobs = [];
      for (const { blobId, transactionRequest } of chunks) {
        if (!uploadedBlobs.includes(blobId) && blobIdsToUpload.includes(blobId)) {
          const fundedBlobRequest = await this.fundTransactionRequest(
            transactionRequest,
            deployOptions
          );
          let result;
          try {
            const blobTx = await account.sendTransaction(fundedBlobRequest);
            result = await blobTx.waitForResult();
          } catch (err2) {
            if (err2.message.indexOf(`BlobId is already taken ${blobId}`) > -1) {
              uploadedBlobs.push(blobId);
              continue;
            }
            throw new FuelError(ErrorCode.TRANSACTION_FAILED, "Failed to deploy contract chunk");
          }
          if (!result.status || result.status !== TransactionStatus.success) {
            throw new FuelError(ErrorCode.TRANSACTION_FAILED, "Failed to deploy contract chunk");
          }
          uploadedBlobs.push(blobId);
        }
      }
      await this.fundTransactionRequest(createRequest, deployOptions);
      txIdResolver(createRequest.getTransactionId(await account.provider.getChainId()));
      const transactionResponse = await account.sendTransaction(createRequest);
      const transactionResult = await transactionResponse.waitForResult();
      const contract = new Contract(contractId, this.interface, account);
      return { contract, transactionResult };
    }, "waitForResult");
    const waitForTransactionId = __name14(() => txIdPromise, "waitForTransactionId");
    return { waitForResult, contractId, waitForTransactionId };
  }
  /**
   * Set configurable constants of the contract with the specified values.
   *
   * @param configurableConstants - An object containing configurable names and their values.
   */
  setConfigurableConstants(configurableConstants) {
    try {
      const hasConfigurable = Object.keys(this.interface.configurables).length;
      if (!hasConfigurable) {
        throw new FuelError(
          ErrorCode.CONFIGURABLE_NOT_FOUND,
          "Contract does not have configurables to be set"
        );
      }
      Object.entries(configurableConstants).forEach(([key, value]) => {
        if (!this.interface.configurables[key]) {
          throw new FuelError(
            ErrorCode.CONFIGURABLE_NOT_FOUND,
            `Contract does not have a configurable named: '${key}'`
          );
        }
        const { offset } = this.interface.configurables[key];
        const encoded = this.interface.encodeConfigurable(key, value);
        const bytes = arrayify(this.bytecode);
        bytes.set(encoded, offset);
        this.bytecode = bytes;
      });
    } catch (err2) {
      throw new FuelError(
        ErrorCode.INVALID_CONFIGURABLE_CONSTANTS,
        `Error setting configurable constants on contract: ${err2.message}.`
      );
    }
  }
  getAccount() {
    if (!this.account) {
      throw new FuelError(ErrorCode.ACCOUNT_REQUIRED, "Account not assigned to contract.");
    }
    return this.account;
  }
  async prepareDeploy(deployOptions) {
    const { configurableConstants } = deployOptions;
    if (configurableConstants) {
      this.setConfigurableConstants(configurableConstants);
    }
    const { contractId, transactionRequest } = this.createTransactionRequest(deployOptions);
    await this.fundTransactionRequest(transactionRequest, deployOptions);
    return {
      contractId,
      transactionRequest
    };
  }
  /**
   * Create a blob transaction request, used for deploying contract chunks.
   *
   * @param options - options for creating a blob transaction request.
   * @returns a populated BlobTransactionRequest.
   */
  blobTransactionRequest(options) {
    const { bytecode: bytecode2 } = options;
    return new BlobTransactionRequest({
      blobId: hash(bytecode2),
      witnessIndex: 0,
      witnesses: [bytecode2],
      ...options
    });
  }
  /**
   * Get the maximum chunk size for deploying a contract by chunks.
   */
  async getMaxChunkSize(deployOptions, chunkSizeMultiplier = CHUNK_SIZE_MULTIPLIER) {
    if (chunkSizeMultiplier < 0 || chunkSizeMultiplier > 1) {
      throw new FuelError(
        ErrorCode.INVALID_CHUNK_SIZE_MULTIPLIER,
        "Chunk size multiplier must be between 0 and 1"
      );
    }
    const account = this.getAccount();
    const { consensusParameters } = await account.provider.getChain();
    const contractSizeLimit = consensusParameters.contractParameters.contractMaxSize.toNumber();
    const transactionSizeLimit = consensusParameters.txParameters.maxSize.toNumber();
    const maxLimit = 64e3;
    const chainLimit = transactionSizeLimit < contractSizeLimit ? transactionSizeLimit : contractSizeLimit;
    const sizeLimit = chainLimit < maxLimit ? chainLimit : maxLimit;
    const blobTx = this.blobTransactionRequest({
      ...deployOptions,
      bytecode: randomBytes2(32)
    }).addResources(
      account.generateFakeResources([
        { assetId: await account.provider.getBaseAssetId(), amount: bn(1) }
      ])
    );
    const maxChunkSize = (sizeLimit - blobTx.byteLength() - WORD_SIZE) * chunkSizeMultiplier;
    return Math.round(maxChunkSize / WORD_SIZE) * WORD_SIZE;
  }
}, __name14(_a100, "ContractFactory"), _a100);

// node_modules/@fuel-ts/math/dist/configs.mjs
var DEFAULT_PRECISION2 = 9;
var DEFAULT_MIN_PRECISION2 = 3;
var DEFAULT_DECIMAL_UNITS2 = 9;
var DECIMAL_FUEL = 9;
var DECIMAL_WEI = 18;
var DECIMAL_KWEI = 15;
var DECIMAL_MWEI = 12;
var DECIMAL_GWEI = 9;

// node_modules/@fuel-ts/account/dist/configs.mjs
var DEVNET_NETWORK_URL = "https://devnet.fuel.network/v1/graphql";
var TESTNET_NETWORK_URL = "https://testnet.fuel.network/v1/graphql";

// node_modules/@fuel-ts/recipes/dist/index.mjs
var __defProp15 = Object.defineProperty;
var __name15 = (target, value) => __defProp15(target, "name", { value, configurable: true });
var abi = {
  programType: "contract",
  specVersion: "1",
  encodingVersion: "1",
  concreteTypes: [
    {
      type: "()",
      concreteTypeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
    },
    {
      type: "enum standards::src5::AccessError",
      concreteTypeId: "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d",
      metadataTypeId: 1
    },
    {
      type: "enum standards::src5::State",
      concreteTypeId: "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
      metadataTypeId: 2
    },
    {
      type: "enum std::option::Option<struct std::contract_id::ContractId>",
      concreteTypeId: "0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8",
      metadataTypeId: 4,
      typeArguments: [
        "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
      ]
    },
    {
      type: "enum sway_libs::ownership::errors::InitializationError",
      concreteTypeId: "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893",
      metadataTypeId: 5
    },
    {
      type: "enum sway_libs::upgradability::errors::SetProxyOwnerError",
      concreteTypeId: "3c6e90ae504df6aad8b34a93ba77dc62623e00b777eecacfa034a8ac6e890c74",
      metadataTypeId: 6
    },
    {
      type: "str",
      concreteTypeId: "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    },
    {
      type: "struct std::contract_id::ContractId",
      concreteTypeId: "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      metadataTypeId: 9
    },
    {
      type: "struct sway_libs::upgradability::events::ProxyOwnerSet",
      concreteTypeId: "96dd838b44f99d8ccae2a7948137ab6256c48ca4abc6168abc880de07fba7247",
      metadataTypeId: 10
    },
    {
      type: "struct sway_libs::upgradability::events::ProxyTargetSet",
      concreteTypeId: "1ddc0adda1270a016c08ffd614f29f599b4725407c8954c8b960bdf651a9a6c8",
      metadataTypeId: 11
    }
  ],
  metadataTypes: [
    {
      type: "b256",
      metadataTypeId: 0
    },
    {
      type: "enum standards::src5::AccessError",
      metadataTypeId: 1,
      components: [
        {
          name: "NotOwner",
          typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      type: "enum standards::src5::State",
      metadataTypeId: 2,
      components: [
        {
          name: "Uninitialized",
          typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          name: "Initialized",
          typeId: 3
        },
        {
          name: "Revoked",
          typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      type: "enum std::identity::Identity",
      metadataTypeId: 3,
      components: [
        {
          name: "Address",
          typeId: 8
        },
        {
          name: "ContractId",
          typeId: 9
        }
      ]
    },
    {
      type: "enum std::option::Option",
      metadataTypeId: 4,
      components: [
        {
          name: "None",
          typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          name: "Some",
          typeId: 7
        }
      ],
      typeParameters: [7]
    },
    {
      type: "enum sway_libs::ownership::errors::InitializationError",
      metadataTypeId: 5,
      components: [
        {
          name: "CannotReinitialized",
          typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      type: "enum sway_libs::upgradability::errors::SetProxyOwnerError",
      metadataTypeId: 6,
      components: [
        {
          name: "CannotUninitialize",
          typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      type: "generic T",
      metadataTypeId: 7
    },
    {
      type: "struct std::address::Address",
      metadataTypeId: 8,
      components: [
        {
          name: "bits",
          typeId: 0
        }
      ]
    },
    {
      type: "struct std::contract_id::ContractId",
      metadataTypeId: 9,
      components: [
        {
          name: "bits",
          typeId: 0
        }
      ]
    },
    {
      type: "struct sway_libs::upgradability::events::ProxyOwnerSet",
      metadataTypeId: 10,
      components: [
        {
          name: "new_proxy_owner",
          typeId: 2
        }
      ]
    },
    {
      type: "struct sway_libs::upgradability::events::ProxyTargetSet",
      metadataTypeId: 11,
      components: [
        {
          name: "new_target",
          typeId: 9
        }
      ]
    }
  ],
  functions: [
    {
      inputs: [],
      name: "proxy_target",
      output: "0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8",
      attributes: [
        {
          name: "doc-comment",
          arguments: [" Returns the target contract of the proxy contract."]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" # Returns"]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [
            " * [Option<ContractId>] - The new proxy contract to which all fallback calls will be passed or `None`."
          ]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" # Number of Storage Accesses"]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" * Reads: `1`"]
        },
        {
          name: "storage",
          arguments: ["read"]
        }
      ]
    },
    {
      inputs: [
        {
          name: "new_target",
          concreteTypeId: "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        }
      ],
      name: "set_proxy_target",
      output: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      attributes: [
        {
          name: "doc-comment",
          arguments: [" Change the target contract of the proxy contract."]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" # Additional Information"]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" This method can only be called by the `proxy_owner`."]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" # Arguments"]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [
            " * `new_target`: [ContractId] - The new proxy contract to which all fallback calls will be passed."
          ]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" # Reverts"]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" * When not called by `proxy_owner`."]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" # Number of Storage Accesses"]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" * Reads: `1`"]
        },
        {
          name: "doc-comment",
          arguments: [" * Write: `1`"]
        },
        {
          name: "storage",
          arguments: ["read", "write"]
        }
      ]
    },
    {
      inputs: [],
      name: "proxy_owner",
      output: "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
      attributes: [
        {
          name: "doc-comment",
          arguments: [" Returns the owner of the proxy contract."]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" # Returns"]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [
            " * [State] - Represents the state of ownership for this contract."
          ]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" # Number of Storage Accesses"]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" * Reads: `1`"]
        },
        {
          name: "storage",
          arguments: ["read"]
        }
      ]
    },
    {
      inputs: [],
      name: "initialize_proxy",
      output: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      attributes: [
        {
          name: "doc-comment",
          arguments: [" Initializes the proxy contract."]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" # Additional Information"]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [
            " This method sets the storage values using the values of the configurable constants `INITIAL_TARGET` and `INITIAL_OWNER`."
          ]
        },
        {
          name: "doc-comment",
          arguments: [
            " This then allows methods that write to storage to be called."
          ]
        },
        {
          name: "doc-comment",
          arguments: [" This method can only be called once."]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" # Reverts"]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [
            " * When `storage::SRC14.proxy_owner` is not [State::Uninitialized]."
          ]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" # Number of Storage Accesses"]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" * Writes: `2`"]
        },
        {
          name: "storage",
          arguments: ["write"]
        }
      ]
    },
    {
      inputs: [
        {
          name: "new_proxy_owner",
          concreteTypeId: "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c"
        }
      ],
      name: "set_proxy_owner",
      output: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      attributes: [
        {
          name: "doc-comment",
          arguments: [" Changes proxy ownership to the passed State."]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" # Additional Information"]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [
            " This method can be used to transfer ownership between Identities or to revoke ownership."
          ]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" # Arguments"]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [
            " * `new_proxy_owner`: [State] - The new state of the proxy ownership."
          ]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" # Reverts"]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" * When the sender is not the current proxy owner."]
        },
        {
          name: "doc-comment",
          arguments: [
            " * When the new state of the proxy ownership is [State::Uninitialized]."
          ]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" # Number of Storage Accesses"]
        },
        {
          name: "doc-comment",
          arguments: [""]
        },
        {
          name: "doc-comment",
          arguments: [" * Reads: `1`"]
        },
        {
          name: "doc-comment",
          arguments: [" * Writes: `1`"]
        },
        {
          name: "storage",
          arguments: ["write"]
        }
      ]
    }
  ],
  loggedTypes: [
    {
      logId: "4571204900286667806",
      concreteTypeId: "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d"
    },
    {
      logId: "2151606668983994881",
      concreteTypeId: "1ddc0adda1270a016c08ffd614f29f599b4725407c8954c8b960bdf651a9a6c8"
    },
    {
      logId: "2161305517876418151",
      concreteTypeId: "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893"
    },
    {
      logId: "4354576968059844266",
      concreteTypeId: "3c6e90ae504df6aad8b34a93ba77dc62623e00b777eecacfa034a8ac6e890c74"
    },
    {
      logId: "10870989709723147660",
      concreteTypeId: "96dd838b44f99d8ccae2a7948137ab6256c48ca4abc6168abc880de07fba7247"
    },
    {
      logId: "10098701174489624218",
      concreteTypeId: "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    }
  ],
  messagesTypes: [],
  configurables: [
    {
      name: "INITIAL_TARGET",
      concreteTypeId: "0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8",
      offset: 13368
    },
    {
      name: "INITIAL_OWNER",
      concreteTypeId: "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
      offset: 13320
    }
  ]
};
var storageSlots = [
  {
    key: "7bb458adc1d118713319a5baa00a2d049dd64d2916477d2688d76970c898cd55",
    value: "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    key: "7bb458adc1d118713319a5baa00a2d049dd64d2916477d2688d76970c898cd56",
    value: "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    key: "bb79927b15d9259ea316f2ecb2297d6cc8851888a98278c0a2e03e1a091ea754",
    value: "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    key: "bb79927b15d9259ea316f2ecb2297d6cc8851888a98278c0a2e03e1a091ea755",
    value: "0000000000000000000000000000000000000000000000000000000000000000"
  }
];
var _a101;
var Src14OwnedProxy = (_a101 = class extends Contract {
  constructor(id, accountOrProvider) {
    super(id, abi, accountOrProvider);
  }
}, __name15(_a101, "Src14OwnedProxy"), __publicField(_a101, "abi", abi), __publicField(_a101, "storageSlots", storageSlots), _a101);
var bytecode = decompressBytecode(
  "H4sIAAAAAAAAA9Vbe3Abx3lfgCAFvayz+TAFSjaUUjJkRwosUQ4ly9IhIATSEM2DSVpUGBhg64c0cSyIlVQ5tsccN001aSZlHcdlO06GrtOp6z4GAB+C7T7YR2bUiTtlZhxbTeMWmiatFAst60YZqm6j/r5v93DHw4GOJ84f0QznFne73+5+j9/32FVgISxOCOEV/K/Dn7o259GuXRO/JcSQ8c6CML4nwkZJF8HFnWLovZLXeK/kOyG89+JbGN9C+BZe+q2uEfRE4LIBGiv1VHThdi0i5gJdGTHa7TW0WNNY4JLmoFfXE4jPi3T5ep/q112j337Vr8WIF3PV373nAol5YfTls6OG8Id6m9E3+DG0tVB5F96/onG7b0akejWh9XaMpWNhYcSnL44exPv49JzLnNtoTtDMpMvaR0FvmxHPaaPd6B/rGDMSxRCP7WmaMxJ5I10Wt47qYg2etxnR/CJ/i7Tj29nuSr/42Tlux3yYLygC36+aMxiIzotTuuck+LeD+If9hoxEIQS6MdDX8DxgRAudNvrzNvql96Hvl/TFJdDfaaPfDbo9oL8az7tBf8hGf8GiXxTL0/cuKPpPg36Hjf4R0O1V678H9E9b9IuaRX+m9X3on1f0HwD9XTb6Z0A3Cfrr8LwX9Ccs+jOWnOIzkm+16c8p+juXvl/9f0Z0GnonHP19CeqfigmR6hGeVER4jb5Z7FH7a+jL32Atf2tEp84ELoUxV9XYQzQWOnVO6pRvzIi+AhugdTehPVtpV8/r/TyPTcxWdIv246CfIf3dHNGEES0GjXihRHSq9+z5slrHBOYLy3XkJ7nN6zg7brar17F6c0AXYjP+lr5fNWW+x/4nqsc1PK3mHLLmLGatOaddxtSxboHPsGHF6/7Zc6MDGJNs1o347CJ4/i/pcrgEvl/AvOcCl3Teb+CCk5b/tmq5zVyE3P4cNP4C4/8S40+7y63uklr7GUtuReKXktuMfxm5tSq5ST10lVvdu6bcoON3KB0PGokpjTAq8H1nf8/vME4lcoRlQann+TFux9rnHLTfgQ2QzuCbbw57PgJcDIZ660lOYab/PejIBez77aq1vyH3nfdjfDePjxaL3I5gzmh+Pn1Z22P0Cr+kuRnYOTuEdjfhMeQziXYoFKsXkq9OPVxxCnbrH+3C2Eg75Dnt5geO0V5TPeBNr+ZJxTTowNkh6EAwlKzXoaunIb//hA4sQJb/ZcSnFqUO0J6ctPyHXXRgHuNeBY3XoAN/Bj08X0MHjigd6LZ0oPCSKXfIbX0qnhtMJXL3dXh891q2MA0ZOmmt/JaiFcR48If1qZPb0haOuNjCtiW2kBTe1CDah9U+0oXiaAbjUy0C6/A1xjRxqktsT0VzhxojQge+ebHGwB28pkLRiAi/EX8lyHyMgY/xmUnwYBp8nEmX9VkjMW0ELpLukS059c/7lotMNJtMwqD1b6D17+DtRcgEOFRLJit+6JQJYgoN6wG+G/l0OVOAXKbAk87ARYll1bbtnXKRaxFzn8U68BSvYDywwU2u3neVLM7bbDtj2fb0Ym3b9mxStl3xN9W27X3PtO2vCHHzc34zXhKTgeikCMTHRSAxJgJ9JWH052CP5h6dcZgI8B4jAnGOWIv1HjGiuU6JD851iTbqC7sKh8o+yCOX5XZ02mr3+PTAD4V4htZxNSwmsK7fxvruXhS0zhXmOuUasb5ESaTB38AVzHc1aPZfofo/Ze3Lc5HHDGNfh0qw+6q1fZL40QjdOdUt7sZTx3M1/Li3MdJEfthzB2JKrHMB6/RChjch1jpjrhnjd5PfAu40utCOUkzY2BsUpw6KGxt7gkRb0kvkzmHMesR2uuRx2Dm2i2XZB5s08TESlLgWoXgyn8EaQ6HedoqhbwC9bPqyuA7vgzXohVkGhLtl4CbRonZ0Ghhs0TIiGvkO2D3Fl9inTvtsIswtcjvG89WDHzrmg83ivfKf/P1wE2SSgRzB96uGKZenlFwq+iblWJL40RMkDBEUN2u9u0Q6Aru4gtjoqubUA7u+ZphGAnKFrpKtMW/KhPM5ndtxxNrqvRZDPM5xCPhJ+A7d4yfpHeaC3mVc9M4+H3x/lX1ka9nHSSH+2GYfrZgXtrhUP9AnyrqXhO4ZogUYqQMjpX4A16EfKzEHYgCao4r+J1ievGfSDciN2tEZWtcEyzPZZMoqCFn5+H0XvWcbPMftSJfVtmxwwYUXdVWyw94CV/BnyanOaa/gm2b2Z9wq+8YC0VxlLObSbONN+91vG29YfAcNwjXob+CdXLV+98Fe+pEfDaAP4jHCeEefWwL9ZI+78AcdMwTZ5QbYWJhzM9gYYbJjzK2Krr4M3U0c//RDt7hPvVsfznu2JjuMwBWd9m3YcGv/B+CbZxm+fYh8rzsXOITx/ZBzdOHjMgbMXwQtituADYiTONajGCxvWHEb7LYqbhMPKfzvlvg/NcZtxv9Cd6Udz8MnuuUHvqwt1pHzRwuUE9A4Fz/oOy79YIH8oBmPIp6nfMvN54tBRf+IlQtMEQ6qXGAqo74Beym2yl2PmOYG+t3WA9w7KPxtPR1jW7pBuzsLbJ7K7O7xzcN3NJDfgO3BZxTO23zGdYQHsG/KNf1tsQ5diyHeTMA+D5IdYr0xxLDURvxsHwteE35hXe2ob+SGVSylfFQ+KOOoKRm7ESaTXQ8SxhmQOWR6VXfqnN3WupdiXJblz3FUuV6H7/Nh3SEzPgbGdIf6pqFPYdKnbhfa12x+2MLPYdCGL8Yawbcm4l9I62mnusTN6ll/s3z61qea5jAfeHRC534x/KZ+8ll/M56w35zpI7EmrLWDeEE1CenfIANT9g6575R6Aru1dFnlOFV9Q8ofS9/C+UqecAO8QJ6RyMs19LBvzr7Y63uB7IJ1BjqK71m8H8f7SV4b6xJ8bDRntRO5jLWOnMyfUD8A35vS5Wwzy/0wyZL9KzC64l+vKX6vs8lSt+Mm4T/+6vHXAH+0gv2gigWYZ3GSo0Zy1G24tK46nhLjLn7wNHSklbARa2wNleFT4oypreyDh3MNqUO5FbAZ8lF+LdksmpMxHT7PQ/4J77xtg4NiywCYvPEBPTCUFVryAT2dhO/W0R9xGPvDcmYlYvBVWP9qrL+V6UfY32e4jbwO/VspXlE+fdzmx8wYxM4jpe+kiz5h2W+uFXF6Hb3Dk/kGGWFfLKMw+NYaSkyT/mH+9jmFp9D/Cp6afLPbFvI1Sx6Yw+A1S50l2hSbEF61ks6m+nL1sGWN/A7yFr/Rq/vBY9QVKZ/B3rm21GXV8qTsjnz4PsVjs2H/PNktchCOSRx5xXa2jzTHyeFQClg1nA8D47YcBz4Bo6j+cx68HKY8H+8fOt5NeZFpu2RDs0XLhmaGpM06/XHdE7LOCrsxx/WofJ/G9SAOYgwlGzpLORRjOHKjuxzr/W/269H8ONa0g2p4JmZSXNAC3mLN7ci9QqgD6Oa3VDRfrzB3DfD3DNqUI9hy2akh7O3T+DuGuuWQGVdBz9eCb7rE5yL5FunH4lN+zD+i1i1tn8ZR/MZx91mKq8kPUCyHmtL0S2bu6tjPd5SPJblCR4qEm5r0sVMU33Ebaxamz6DaO35/Vu1hFdqP2b7V0TfKeRojPs7XtaSuI+6MEW2su5KfgietDppPKJoRtB930HzCheYnZT7suq+vK99MMlD58BTlHKrOkfM76J+20Yf/RV32skiCp1TXMWVxI+Regoz2jsQ+EYHeTaBWAd63YJ4Z5LCuddl/VjUuo9KXfDS1Y1vw3qIPmYVtMtuFvRVr7O0zam+qpk97m6Y4w9wb9rGEr19SfKV9ZbCvg1h7ybGvIvb1ceyrDt9O2/bVWmNfL6l9Bd33ZdG37ws6QLVaVR8iG5mi2HCJjQS6eK2eQBfXfr5CY1CDq9iZrG25+doKX6geq+I9qrHPEu+xlgbCINTV3Hy6937l08flfqjvzEVuR4gPs5W9uceagmurWPfDdMYBXsbB5wTbYWXdUxR78t4hkwUlo1a0R13wYFzZ/GnL5gtk89C7Qg7P+4xelddzjq/wS557vGTm31jXKkULOIrzoMvaR4EZ5C/8CjMqfRn3VIwI7CLd4pgW63tPrU/Fi9OaWhvFKXJvsYzM/3mfM7LOETlB9TiV5z/A8bYL3zg+MvdPeSTe3YQzBML8f8J4lcdW1VPvUzVdqj2a9k28NuuYbYgbsqhjHqc6Jn5vIL5K3PCg5kQ6ZWG3ev/oM+SrKvGRx4yPbPm8p1TxxxTj0t7gD+Fbw1bcD9/UJTI1cHOD+t2EdovJV9s3wXqP8yz6bsMkE6c2mO9UP9gJ8yxK80q54BnTwvjzq9hQ+rVIkORO+sfxKugYKh9Y41jHLer3BrQ/4lg/favYKNeQQEvOi2dMC8l5cQ5jxcYUb1AOpM6uqmLkAGHJMrRs8a06H6hNawXRknENZGXlFmY9omasW6lxmTEu5nghOh1UMY5bfGvPexdteW+nzHuR61p5r8opeQ+o/9TOe08q3bblvaRPZt57xJb3XqxhUwWXvDdXO+8VXHems1Rb3gvfUzPv3eeS99r0H3jzwfLecSvvzVPOgTOjwiL22WnLe7nu6ZL3EnaZeS/VGSnvrYwFvU5uSz1PO/LeTpX3Up1c1iIJt6y8d/GnyE3DP2FuGv4wc1PozuhPmpui75M/T7lpla2q/MXFLt1qjr73qzkGoiUxgjqqqunX2+uqhLXQQ8Za9b1Bfa/47JEuTx31AY16uS7hrJPZ68LIoaz9OGq07ZRjNCd9c5TrNsrntpGIF/VHrj0G8dTxbAIfyBdQzkE1I1lb70esSfkdxhEekm+C7TRQX+SEK+zfIXuq4aOG2UX7Ixqo+WrIXbV6/qbqm1Sz5n7JDrOfhj5ezFfH3xQ97hPrYvxFP8qBSX/pnopZJxizycsNkxEPLJFziDCZ6o9LbRc1AZsOgG7IRQ/sdHE/pRrrHTWM4PI1DJu9Uz5LfKT4IQnMg79ifGWsz827nXdDrgXyTWwbZR5Ddwh4jPO8GH1zCmMXuD/OlEF30rRj51nmSeF73XYW63IXIj+vvpmY7Acmr6yNyfn53T0dhDcW3vYhRxqi857YmDwPBy7E8/N3xnzjsv6/xH7NuokNL71WTT4NvBy24iclX4opvmCLmW6kNvqQjo8tjY8RE1BthfYWz1GM6a3lr8CbF1zOZo+RDgHD6O6BjI8SeaqPUB0I/g9nNHxuDJrV9Gaqz40R/w2QLtSTn2lQe6Fza2o7zq1zYfY7/QUaI8+a+/OoUwW3wj5vBTbehvkn5fzI/6rn/3b1/MDqyrk17jOUg3tA607Q2gtaiBNqnVuLAy68CdnWaJ2H96MuUw5uAd1bQBe5W+6MPMt2XeOPXdZI9T5zjROgtRO0OkBrF2jBZmqucaPLGtdRrGDTgSG5Fjf51/P5tn18OqWJdCroSaegN1ey0F3o5tWM0/fYdFfI8+Cl9ctWaz/QQaplRsxaJp+VGdymPGA4twq1TIrp11AdXIv59OZYM/sXrmXCj7QNDuiqlimolskx1KcI42JzqGsKbiebKXYIaoj/if+obV6P2uYNqG020jm6rbZJd1a4tsn+2HxPbVqTdX6J89ZKrdPct73+uMRPAQNCzrMu8PcA+atUMixSg2FPqjfstdmzXe9x11BHHdbAXb3wGtDSLJlV0fwSywz+DndE5F2IQzncxQuvBY3rsF/IP4fzMvjtqrimvk+dWfOZ3zL+x4zpbBjvteIMC+NxT4vxmvDTxHjcBXHDeO9tDoynOLgGxnu3qhxW9pcYz3dE3THe+zUXjKe43sT40gfE+JILxo8B48MK4zEHY3zJwnjwZ5nzefhI1IoRb8UXdmsxDZiawx0g5z5WrKZarPTtFK9TjV5bCb1sw3MV363j+jR/O8/9UDfHeuncGvEI67c6l8N5bDVebFe1Kds5HuxT3SujGo/7fTTRoPwY6tmV2M3tTF/FEuy/KI7gengYdxICB6lgnRTPoha8Q4d8dKFvge6nN8I29KwIRurEvYhF78Y7GW9U3VWwxxvFKswZ5lhdCx0GD/rhryyf8wvKz9yv2g7bk/dFlsqhoYPthM8ouIZR4jbH9nxWQDhBcTvdeeUzC2DYuhTOyimnQx95V1jyl843TJmNm++hf42UE9HdaIV5VNOzMC/ZpW8Br0IbB0RggDFP3kdEvUiLDQicZzTzfWfUAVDLaWL68EvAP5ozByxpAR7cqO5KkK2a/oDupgL/2EaoLiTfo61s0vyG8wK33KgB90QqOa6qL+H+oFVf2oy9bcKaPkL1JZVPtqraxQTnTYy9aC+5LwKZLn+2pGIkyBr662I737HbDseflNPLGgV8WNVZkh3bcFcLdBGrVmORb4fCLcRjzD+ZS+B+OOfV0v4kJsD+3M5YQOPv+F6KvLO3AxiwhzAglVi4U+sJ4mxqYa/WG55L9S/chXrbHPA8C6wJhgabxzDXDUbMCPHv2OYxo0sPc/45BOzsGRwzDuFeOsWe6CvnBoOXYuMlFQdiPO7IXxZtqs4J3nfNGd068A41mMqdzgLdtwe+bXa904la4OdULbIFtRO6B9MFvqk7V1V9v6l0hWogpq5U7kBDV7ZDV4LQlU32WiSwFHfWKjhj6oJNXnXynBFxskM33yS9xJrWgkeEj3TGD/mg3rSsfOpvN+WjZPQpyGifxGlVVyNb7kPewPUAxlnEjqBVuVvr3Lvfo7CW7sJDVoQFU6Sf8Hmw1XjhTKWdKJCv4bW6+07PBcddbr5H6ND/keq71Pg/BZW71HRfP9iLOOEeYEKftG/3u9Sof2ypvm+Zp9pEJ2jsxvg9GN/tdt8S6zDv0VIOp2Su7l5KmX8MMm+DzDfwPVqpS83QJdJNA7pUuQPm0GM+h7DO4/iOlTqDWwiD5nrQDCzVI+iJFbsu55P31/bJ/oWfpU+GbDln+qA+GePeruWTf1b/sqPHTj+WPjEy+vCD9N+CxC8/eCJtf/f49NCf/NW3Wo/vXP/7r06u2ub76pu9W1viT24589bR7LmJvx+UfY/9yqMPjjK9o48ePXF05JGjn31QkrHoyT4bv7vq7RduWeV5nf8J7/7s9hd3bXj+pmv8T4jXHnvm8eZ/3Py1F1vevVzY+uQj536t9cwfPn167vdK+wIrb/qDgQMjjzzyiyO/9OnY6Oix0T17BniR9xw70S+XL764+Zt3fP7A9t/N/+ZE57Nf/vrLvkvPvzZ7cNOb//qZYwfLl18+uv/V/5j8h4eu+8Ku/xk+uePbe3/06xf23ZVr+sG7/m8Uv9HxR0fvemvl2vu9D6f3bfzxUz/47sbnHn7u7V/9ja6rX/3i3kfH/9To/dHLkms7/1c+d7yuns+r50H5vF19335ePtvfkM8W9X3lEfn0qff1n1PPDvV8Vj7rJuXT88b/AzdExjYINgAA"
);
var _a102;
var Src14OwnedProxyFactory = (_a102 = class extends ContractFactory {
  constructor(accountOrProvider) {
    super(
      bytecode,
      Src14OwnedProxy.abi,
      accountOrProvider,
      Src14OwnedProxy.storageSlots
    );
  }
  static deploy(wallet, options = {}) {
    const factory = new _a102(wallet);
    return factory.deploy(options);
  }
}, __name15(_a102, "Src14OwnedProxyFactory"), __publicField(_a102, "bytecode", bytecode), _a102);

// node_modules/fuels/dist/index.mjs
var __defProp16 = Object.defineProperty;
var __name16 = (target, value) => __defProp16(target, "name", { value, configurable: true });
function createConfig(config) {
  return config;
}
__name16(createConfig, "createConfig");
var Commands = ((Commands2) => {
  Commands2["build"] = "build";
  Commands2["deploy"] = "deploy";
  Commands2["dev"] = "dev";
  Commands2["init"] = "init";
  Commands2["versions"] = "versions";
  Commands2["node"] = "node";
  return Commands2;
})(Commands || {});

export {
  ErrorCode,
  FuelError,
  BN,
  bn,
  toFixed,
  toNumber,
  toHex,
  toBytes,
  formatUnits,
  format,
  max,
  multiply,
  capitalizeString,
  chunkAndPadBytes,
  arrayify,
  concatBytes,
  concat,
  hexlify,
  normalizeString,
  DateTime,
  sleep,
  defaultSnapshotConfigs,
  defaultConsensusKey,
  isDefined,
  encodeBase58,
  decodeBase58,
  dataSlice,
  toUtf8Bytes,
  toUtf8String,
  compressBytecode,
  decompressBytecode,
  assertUnreachable,
  bufferFromString2,
  decrypt2,
  encrypt2,
  keyFromPassword2,
  randomBytes2,
  stringFromBuffer2,
  scrypt22 as scrypt2,
  keccak2562,
  decryptJsonWalletData2,
  encryptJsonWalletData2,
  pbkdf222 as pbkdf22,
  computeHmac2,
  ripemd16022 as ripemd1602,
  randomUUID2,
  sha2563 as sha256,
  hash,
  uint64ToBytesBE,
  hashMessage,
  Coder,
  ENCODING_V1,
  WORD_SIZE,
  BYTES_32,
  UTXO_ID_LEN,
  ASSET_ID_LEN,
  CONTRACT_ID_LEN,
  calculateVmTxMemory,
  SCRIPT_FIXED_SIZE,
  INPUT_COIN_FIXED_SIZE,
  ArrayCoder,
  B256Coder,
  B512Coder,
  BigNumberCoder,
  BooleanCoder,
  ByteCoder,
  EnumCoder,
  NumberCoder,
  OptionCoder,
  RawSliceCoder,
  StdStringCoder,
  StrSliceCoder,
  StringCoder,
  StructCoder,
  TupleCoder,
  VecCoder,
  Interface,
  decodeScriptData,
  isB256,
  isPublicKey,
  isEvmAddress,
  normalizeB256,
  isAddress,
  addressify,
  getRandomB256,
  toB256AddressEvm,
  padFirst12BytesOfEvmAddress,
  fromEvmAddressToB256,
  fromPublicKeyToB256,
  fromDynamicInputToB256,
  Address,
  ByteArrayCoder,
  TxPointerCoder,
  InputType,
  InputCoinCoder,
  InputContractCoder,
  InputMessageCoder,
  InputCoder,
  OutputType,
  OutputCoinCoder,
  OutputContractCoder,
  OutputChangeCoder,
  OutputVariableCoder,
  OutputContractCreatedCoder,
  OutputCoder,
  PolicyType,
  sortPolicies,
  PoliciesCoder,
  ReceiptType,
  getMintedAssetId,
  createAssetId,
  getMessageId,
  StorageSlotCoder,
  UpgradePurposeTypeEnum,
  UpgradePurposeCoder,
  WitnessCoder,
  TransactionType,
  TransactionScriptCoder,
  TransactionCreateCoder,
  TransactionMintCoder,
  TransactionUpgradeCoder,
  TransactionUploadCoder,
  TransactionBlobCoder,
  TransactionCoder,
  UtxoIdCoder,
  ZeroBytes32,
  EmptyRoot,
  CONTRACT_MAX_SIZE,
  MAX_WITNESSES,
  MAX_SCRIPT_LENGTH,
  MAX_SCRIPT_DATA_LENGTH,
  MAX_STATIC_CONTRACTS,
  MAX_PREDICATE_LENGTH,
  MAX_PREDICATE_DATA_LENGTH,
  FAILED_REQUIRE_SIGNAL,
  FAILED_TRANSFER_TO_ADDRESS_SIGNAL,
  FAILED_ASSERT_EQ_SIGNAL,
  FAILED_ASSERT_SIGNAL,
  FAILED_ASSERT_NE_SIGNAL,
  FAILED_UNKNOWN_SIGNAL,
  PANIC_REASONS,
  PANIC_DOC_URL,
  CHAIN_IDS,
  getDefaultChainId,
  getAssetNetwork,
  getAssetWithNetwork,
  getAssetEth,
  getAssetFuel,
  urlJoin,
  resolveIconPaths,
  fuelAssetsBaseUrl,
  rawAssets,
  assets,
  getAssetById,
  getAssetsByOwner,
  coinQuantityfy,
  addAmountToCoinQuantities,
  inputify,
  outputify,
  isMessageCoin,
  isRawCoin,
  isRawMessage,
  isCoin,
  isMessage,
  deserializeChain,
  serializeChain,
  deserializeNodeInfo,
  serializeNodeInfo,
  deserializeProviderCache,
  serializeProviderCache,
  deserializeReceipt,
  getReceiptsWithMissingData,
  assembleReceiptByType,
  buildBlockExplorerUrl,
  getGasUsedFromReceipts,
  resolveGasDependentCosts,
  gasUsedByInputs,
  getMinGas,
  getMaxGas,
  calculateMetadataGasForTxCreate,
  calculateMetadataGasForTxScript,
  calculateMetadataGasForTxBlob,
  calculateMetadataGasForTxUpgrade,
  calculateMetadataGasForTxUpload,
  calculateMinGasForTxUpload,
  calculateGasFee,
  normalizeJSON,
  assemblePanicError,
  assembleRevertError,
  extractTxError,
  ChangeOutputCollisionError,
  NoWitnessAtIndexError,
  NoWitnessByOwnerError,
  isRequestInputCoin,
  isRequestInputMessage,
  isRequestInputMessageWithoutData,
  isRequestInputCoinOrMessage,
  isRequestInputResource,
  getRequestInputResourceOwner,
  isRequestInputResourceFromOwner,
  isPredicate,
  getAssetAmountInRequestInputs,
  cacheRequestInputsResources,
  cacheRequestInputsResourcesFromOwner,
  getBurnableAssetCount,
  validateTransactionForAssetBurn,
  BaseTransactionRequest,
  BlobTransactionRequest,
  CreateTransactionRequest,
  returnZeroScript,
  withdrawScript,
  ScriptTransactionRequest,
  UpgradeTransactionRequest,
  UploadTransactionRequest,
  AbstractScriptRequest,
  transactionRequestify,
  isTransactionTypeScript,
  isTransactionTypeCreate,
  isTransactionTypeBlob,
  isTransactionTypeUpgrade,
  isTransactionTypeUpload,
  calculateTXFeeForSummary,
  getInputsByTypes,
  getInputsByType,
  getInputsCoin,
  getInputsMessage,
  getInputsCoinAndMessage,
  isInputCoin,
  getInputsContract,
  aggregateInputsAmountsByAssetAndOwner,
  getInputFromAssetId,
  getInputContractFromIndex,
  getInputAccountAddress,
  getOutputsByType,
  getOutputsContractCreated,
  getOutputsCoin,
  getOutputsChange,
  getOutputsContract,
  getOutputsVariable,
  TransactionTypeName,
  TransactionStatus,
  OperationName,
  AddressType,
  ChainName,
  getReceiptsByType,
  getTransactionTypeName,
  isType2 as isType,
  isTypeMint,
  isTypeCreate,
  isTypeScript,
  isTypeUpgrade,
  isTypeUpload,
  isTypeBlob,
  hasSameAssetId,
  getReceiptsCall,
  getReceiptsMessageOut,
  addOperation,
  getReceiptsTransferOut,
  getWithdrawFromFuelOperations,
  getContractCallOperations,
  getTransferOperations,
  getPayProducerOperations,
  getContractCreatedOperations,
  getOperations,
  processGqlReceipt,
  extractMintedAssetsFromReceipts,
  extractBurnedAssetsFromReceipts,
  getTransactionStatusName,
  processGraphqlStatus,
  getTotalFeeFromStatus,
  assembleTransactionSummary,
  getAllDecodedLogs,
  TransactionResponse,
  getDecodedLogs,
  RESOURCES_PAGE_SIZE_LIMIT,
  TRANSACTIONS_PAGE_SIZE_LIMIT,
  BALANCES_PAGE_SIZE_LIMIT,
  NON_PAGINATED_BALANCES_SIZE,
  BLOCKS_PAGE_SIZE_LIMIT,
  DEFAULT_RESOURCE_CACHE_TTL,
  GAS_USED_MODIFIER,
  Provider,
  getTransactionSummary,
  getTransactionSummaryFromRequest,
  getTransactionsSummaries,
  assembleTransactionSummaryFromJson,
  AbstractAccount,
  Account,
  Signer,
  BaseWalletUnlocked,
  english,
  Language,
  MNEMONIC_SIZES,
  mnemonic_default,
  hdwallet_default,
  WalletLocked,
  WalletUnlocked,
  Wallet,
  MemoryStorage,
  MnemonicVault,
  PrivateKeyVault,
  WalletManager,
  Vault,
  StorageAbstract,
  getBytecodeDataOffset,
  getBytecodeConfigurableOffset,
  getBytecodeId,
  getLegacyBlobId,
  deployScriptOrPredicate,
  getPredicateRoot,
  Predicate,
  FuelConnectorMethods,
  FuelConnectorEventTypes,
  FuelConnectorEventType,
  LocalStorage,
  FuelConnector,
  cacheFor,
  dispatchFuelConnectorEvent,
  deferPromise,
  withTimeout,
  Fuel,
  AbstractProgram,
  AbstractContract,
  assert2 as assert,
  getAbisFromAllCalls,
  getResultLogs,
  getAllResultLogs,
  InstructionSet,
  ScriptRequest,
  extractInvocationResult,
  buildFunctionResult,
  buildDryRunResult,
  FunctionInvocationScope,
  MultiCallInvocationScope,
  Contract,
  Script,
  getContractRoot,
  getContractStorageRoot,
  getContractId,
  hexlifyWithPrefix,
  ContractFactory,
  DEFAULT_PRECISION2 as DEFAULT_PRECISION,
  DEFAULT_MIN_PRECISION2 as DEFAULT_MIN_PRECISION,
  DEFAULT_DECIMAL_UNITS2 as DEFAULT_DECIMAL_UNITS,
  DECIMAL_FUEL,
  DECIMAL_WEI,
  DECIMAL_KWEI,
  DECIMAL_MWEI,
  DECIMAL_GWEI,
  DEVNET_NETWORK_URL,
  TESTNET_NETWORK_URL,
  Src14OwnedProxy,
  Src14OwnedProxyFactory,
  createConfig,
  Commands
};
/*! Bundled license information:

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/modular.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/curve.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/weierstrass.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/_shortw_utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/secp256k1.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=chunk-RBCZXTC3.js.map
