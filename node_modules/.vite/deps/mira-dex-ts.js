import {
  Address,
  BN,
  Contract,
  ContractFactory,
  Script,
  arrayify,
  concat,
  decompressBytecode,
  sha256
} from "./chunk-RBCZXTC3.js";
import "./chunk-CKWBFEDU.js";
import "./chunk-NPY75PGV.js";
import "./chunk-SKMNXGXP.js";
import {
  __publicField
} from "./chunk-ONY6HBPH.js";

// node_modules/mira-dex-ts/dist/sdk/constants.js
var DEFAULT_AMM_CONTRACT_ID = "0x2e40f2b244b98ed6b8204b3de0156c6961f98525c8162f80162fcf53eebd90e7";

// node_modules/mira-dex-ts/dist/sdk/typegen/AddLiquidityScript.js
var bytecode = decompressBytecode("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");

// node_modules/mira-dex-ts/dist/sdk/typegen/AddLiquidityScriptLoader.js
var abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "(struct std::asset_id::AssetId, struct std::asset_id::AssetId, bool)",
      "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6",
      "metadataTypeId": 0
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 3
    },
    {
      "type": "str",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    },
    {
      "type": "struct interfaces::data_structures::Asset",
      "concreteTypeId": "affa437f314a241a60e97d006b83a963a5eaf0e0185484335e9ed03cd078d7f8",
      "metadataTypeId": 4
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 7
    },
    {
      "type": "u32",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "(_, _, _)",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 6
        },
        {
          "name": "__tuple_element",
          "typeId": 6
        },
        {
          "name": "__tuple_element",
          "typeId": 2
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 1
    },
    {
      "type": "bool",
      "metadataTypeId": 2
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "Address",
          "typeId": 5
        },
        {
          "name": "ContractId",
          "typeId": 7
        }
      ]
    },
    {
      "type": "struct interfaces::data_structures::Asset",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "id",
          "typeId": 6
        },
        {
          "name": "amount",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "pool_id",
          "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
        },
        {
          "name": "amount_0_desired",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "amount_1_desired",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "amount_0_min",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "amount_1_min",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "recipient",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "deadline",
          "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
        }
      ],
      "name": "main",
      "output": "affa437f314a241a60e97d006b83a963a5eaf0e0185484335e9ed03cd078d7f8",
      "attributes": null
    }
  ],
  "loggedTypes": [
    {
      "logId": "10098701174489624218",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "AMM_CONTRACT_ID",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "offset": 88
    }
  ]
};
var bytecode2 = decompressBytecode("H4sIAAAAAAAAA5NyMGAIcGQwkHIJYNjlycBg5MDSCOQrxALZQJoDyG9ScBVmCHIVYPFyYWCoK5+1wuLN5bQjh1otLsfstmyqbMi4PK1L+WOGrY7O5U2KDGDA6ACh8YP/QOCSmpiSk5mXqlCQWFycmsJQkJ+fE5+bWpKYkliSSIQZAUD1Cin5qcV56iUKqRWZxSUQcc+84tK0tMzkzNS8EoXE3PzSPIhESH6+Qm5pckZuJkQA5AYQOAMGDEw9qqfN2tz0ZkFE0czJySwszUzJLKmE6WNghNimwAGlBSC07AQILWMAoaU7oHQGhJZqgdJQeVGoPPcMKN0CALLGHTmYAQAA");
var AddLiquidityScriptLoader = class extends Script {
  constructor(wallet) {
    super(bytecode2, abi, wallet);
  }
};
__publicField(AddLiquidityScriptLoader, "abi", abi);
__publicField(AddLiquidityScriptLoader, "bytecode", bytecode2);

// node_modules/mira-dex-ts/dist/sdk/typegen/CreatePoolAndAddLiquidityScript.js
var bytecode3 = decompressBytecode("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");

// node_modules/mira-dex-ts/dist/sdk/typegen/CreatePoolAndAddLiquidityScriptLoader.js
var abi2 = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "b256",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
    },
    {
      "type": "bool",
      "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 0
    },
    {
      "type": "str",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    },
    {
      "type": "struct interfaces::data_structures::Asset",
      "concreteTypeId": "affa437f314a241a60e97d006b83a963a5eaf0e0185484335e9ed03cd078d7f8",
      "metadataTypeId": 1
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 4
    },
    {
      "type": "u32",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "Address",
          "typeId": 2
        },
        {
          "name": "ContractId",
          "typeId": 4
        }
      ]
    },
    {
      "type": "struct interfaces::data_structures::Asset",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "id",
          "typeId": 3
        },
        {
          "name": "amount",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "token_0_contract_id",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        },
        {
          "name": "token_0_sub_id",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "token_1_contract_id",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        },
        {
          "name": "token_1_sub_id",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "is_stable",
          "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
        },
        {
          "name": "amount_0_desired",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "amount_1_desired",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "recipient",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "deadline",
          "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
        }
      ],
      "name": "main",
      "output": "affa437f314a241a60e97d006b83a963a5eaf0e0185484335e9ed03cd078d7f8",
      "attributes": null
    }
  ],
  "loggedTypes": [
    {
      "logId": "10098701174489624218",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "AMM_CONTRACT_ID",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "offset": 88
    }
  ]
};
var bytecode4 = decompressBytecode("H4sIAAAAAAAAA5NyMGAIcGQwkHIJYNjlycBg5MDSCOQrxALZQJoDyG9ScBVmCHIVYPFyYWAoK/60Zs5Wn8siNfY5BpX2Lh5LPWKWi34+9mbBCYuzZfYWDBBwAErjBf+BwCU1MSUnMy9VoSCxuDg1hSG5KDWxJDW+ID8/hxgjGHIz80pgZoHAGTBgYOpRPW3W5qY3CyIKk2dghOiSmgGlY6B0C4QWOwOhBUUAGn66fRgBAAA=");
var CreatePoolAndAddLiquidityScriptLoader = class extends Script {
  constructor(wallet) {
    super(bytecode4, abi2, wallet);
  }
};
__publicField(CreatePoolAndAddLiquidityScriptLoader, "abi", abi2);
__publicField(CreatePoolAndAddLiquidityScriptLoader, "bytecode", bytecode4);

// node_modules/mira-dex-ts/dist/sdk/typegen/RemoveLiquidityScript.js
var bytecode5 = decompressBytecode("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");

// node_modules/mira-dex-ts/dist/sdk/typegen/RemoveLiquidityScriptLoader.js
var abi3 = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "(struct std::asset_id::AssetId, struct std::asset_id::AssetId, bool)",
      "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6",
      "metadataTypeId": 1
    },
    {
      "type": "(u64, u64)",
      "concreteTypeId": "41bd1a98f0a59642d8f824c805b798a5f268d1f7d05808eb05c4189c493f1be0",
      "metadataTypeId": 0
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 4
    },
    {
      "type": "str",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 7
    },
    {
      "type": "u32",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "(_, _)",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "(_, _, _)",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 6
        },
        {
          "name": "__tuple_element",
          "typeId": 6
        },
        {
          "name": "__tuple_element",
          "typeId": 3
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 2
    },
    {
      "type": "bool",
      "metadataTypeId": 3
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "Address",
          "typeId": 5
        },
        {
          "name": "ContractId",
          "typeId": 7
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "pool_id",
          "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
        },
        {
          "name": "liquidity",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "amount_0_min",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "amount_1_min",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "recipient",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "deadline",
          "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
        }
      ],
      "name": "main",
      "output": "41bd1a98f0a59642d8f824c805b798a5f268d1f7d05808eb05c4189c493f1be0",
      "attributes": null
    }
  ],
  "loggedTypes": [
    {
      "logId": "10098701174489624218",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "AMM_CONTRACT_ID",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "offset": 88
    }
  ]
};
var bytecode6 = decompressBytecode("H4sIAAAAAAAAA5NyMGAIcGQwkHIJYNjlycBg5MDSCOQrxALZQJoDyG9ScBVmCHIVYPFyYWBo0zphtK15kfLCWzN+vIp221zq0Xr763S2qNlONVmL7qQtZ4CAA1AaL/gPBC6piSk5mXmpCgWJxcWpKQT1JJUW5YFoz7zi0rS0zOTM1LwShcTc/NK8ErD8GTBgYAKZDQI9qqfN2tz0ZkF4MFPEX0DpDxBaggNCC3VAaM4fADSL2yUYAQAA");
var RemoveLiquidityScriptLoader = class extends Script {
  constructor(wallet) {
    super(bytecode6, abi3, wallet);
  }
};
__publicField(RemoveLiquidityScriptLoader, "abi", abi3);
__publicField(RemoveLiquidityScriptLoader, "bytecode", bytecode6);

// node_modules/mira-dex-ts/dist/sdk/typegen/SwapExactInputScript.js
var bytecode7 = decompressBytecode("");

// node_modules/mira-dex-ts/dist/sdk/typegen/SwapExactInputScriptLoader.js
var abi4 = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "(struct std::asset_id::AssetId, struct std::asset_id::AssetId, bool)",
      "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6",
      "metadataTypeId": 1
    },
    {
      "type": "(u64, struct std::asset_id::AssetId)",
      "concreteTypeId": "e10d8bfc338a29565debd72645b365f9b0481e462fd7d591848de4a73223d58d",
      "metadataTypeId": 0
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 4
    },
    {
      "type": "str",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    },
    {
      "type": "struct std::asset_id::AssetId",
      "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
      "metadataTypeId": 8
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 9
    },
    {
      "type": "struct std::vec::Vec<(struct std::asset_id::AssetId, struct std::asset_id::AssetId, bool)>",
      "concreteTypeId": "a5cbfec6a05585025be4180a09c2bd7944724d54ac729c9bebe421d061ee5378",
      "metadataTypeId": 11,
      "typeArguments": [
        "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
      ]
    },
    {
      "type": "struct std::vec::Vec<(u64, struct std::asset_id::AssetId)>",
      "concreteTypeId": "6f03bcbe6f8a1e01b5dcb5701ab21443606d1b323a888ead4e9a2ecda650ae2e",
      "metadataTypeId": 11,
      "typeArguments": [
        "e10d8bfc338a29565debd72645b365f9b0481e462fd7d591848de4a73223d58d"
      ]
    },
    {
      "type": "u32",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "(_, _)",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "__tuple_element",
          "typeId": 8
        }
      ]
    },
    {
      "type": "(_, _, _)",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 8
        },
        {
          "name": "__tuple_element",
          "typeId": 8
        },
        {
          "name": "__tuple_element",
          "typeId": 3
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 2
    },
    {
      "type": "bool",
      "metadataTypeId": 3
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "Address",
          "typeId": 7
        },
        {
          "name": "ContractId",
          "typeId": 9
        }
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 5
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 6
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 9,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 10,
      "components": [
        {
          "name": "ptr",
          "typeId": 6
        },
        {
          "name": "cap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        5
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 11,
      "components": [
        {
          "name": "buf",
          "typeId": 10,
          "typeArguments": [
            {
              "name": "",
              "typeId": 5
            }
          ]
        },
        {
          "name": "len",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        5
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "amount_in",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "asset_in",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        },
        {
          "name": "amount_out_min",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "pools",
          "concreteTypeId": "a5cbfec6a05585025be4180a09c2bd7944724d54ac729c9bebe421d061ee5378"
        },
        {
          "name": "recipient",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "deadline",
          "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
        }
      ],
      "name": "main",
      "output": "6f03bcbe6f8a1e01b5dcb5701ab21443606d1b323a888ead4e9a2ecda650ae2e",
      "attributes": null
    }
  ],
  "loggedTypes": [
    {
      "logId": "10098701174489624218",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "AMM_CONTRACT_ID",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "offset": 88
    }
  ]
};
var bytecode8 = decompressBytecode("H4sIAAAAAAAAA5NyMGAIcGQwkHIJYNjlycBg5MDSCOQrxALZQJoDyG9ScBVmCHIVYPFyYWDgOqfMztL5bF35lcl9Vlfsy6zk0gI08sqdZm+uiFFZfu8EAxgwzYDQ+MF/IHBJTUzJycxLVShILC5OTWEIyi8tSS2yUvD0C3P08XSJD3AM8QCpTUtNLSbGzIL8/Jz43NSSxJTEkkQgPwDIV8jLL1EoKEotTs0r8cwrLk1Ly0zOBLIVgHYVlJYoJObml+aVQPQXlycWwNwGAmfAgIEJwmNg7FE9bdbmpjcLyicEGHFJ8D7Ytnl5CkH9zPil1QUgtO0UKD0HSq+B0FZHILTlAQhtkAChtRZA6QaoOVCXqN6B0II7oDTUPMEcKA2OCyCtAqEFvkDpECitAaH5oeL8FyA07xko7QOhefZAaaj9PFBzeaD6eXggNPcbCM31AEJzguOGgYED6l/2K1DaAkKz9UBpqP1sUPtZofaz2QAAT+4ohvACAAA=");
var SwapExactInputScriptLoader = class extends Script {
  constructor(wallet) {
    super(bytecode8, abi4, wallet);
  }
};
__publicField(SwapExactInputScriptLoader, "abi", abi4);
__publicField(SwapExactInputScriptLoader, "bytecode", bytecode8);

// node_modules/mira-dex-ts/dist/sdk/typegen/SwapExactOutputScript.js
var bytecode9 = decompressBytecode("");

// node_modules/mira-dex-ts/dist/sdk/typegen/SwapExactOutputScriptLoader.js
var abi5 = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "(struct std::asset_id::AssetId, struct std::asset_id::AssetId, bool)",
      "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6",
      "metadataTypeId": 1
    },
    {
      "type": "(u64, struct std::asset_id::AssetId)",
      "concreteTypeId": "e10d8bfc338a29565debd72645b365f9b0481e462fd7d591848de4a73223d58d",
      "metadataTypeId": 0
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 4
    },
    {
      "type": "str",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    },
    {
      "type": "struct std::asset_id::AssetId",
      "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
      "metadataTypeId": 8
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 9
    },
    {
      "type": "struct std::vec::Vec<(struct std::asset_id::AssetId, struct std::asset_id::AssetId, bool)>",
      "concreteTypeId": "a5cbfec6a05585025be4180a09c2bd7944724d54ac729c9bebe421d061ee5378",
      "metadataTypeId": 11,
      "typeArguments": [
        "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
      ]
    },
    {
      "type": "struct std::vec::Vec<(u64, struct std::asset_id::AssetId)>",
      "concreteTypeId": "6f03bcbe6f8a1e01b5dcb5701ab21443606d1b323a888ead4e9a2ecda650ae2e",
      "metadataTypeId": 11,
      "typeArguments": [
        "e10d8bfc338a29565debd72645b365f9b0481e462fd7d591848de4a73223d58d"
      ]
    },
    {
      "type": "u32",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "(_, _)",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "__tuple_element",
          "typeId": 8
        }
      ]
    },
    {
      "type": "(_, _, _)",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 8
        },
        {
          "name": "__tuple_element",
          "typeId": 8
        },
        {
          "name": "__tuple_element",
          "typeId": 3
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 2
    },
    {
      "type": "bool",
      "metadataTypeId": 3
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "Address",
          "typeId": 7
        },
        {
          "name": "ContractId",
          "typeId": 9
        }
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 5
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 6
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 9,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 10,
      "components": [
        {
          "name": "ptr",
          "typeId": 6
        },
        {
          "name": "cap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        5
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 11,
      "components": [
        {
          "name": "buf",
          "typeId": 10,
          "typeArguments": [
            {
              "name": "",
              "typeId": 5
            }
          ]
        },
        {
          "name": "len",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        5
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "amount_out",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "asset_out",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        },
        {
          "name": "amount_in_max",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "pools",
          "concreteTypeId": "a5cbfec6a05585025be4180a09c2bd7944724d54ac729c9bebe421d061ee5378"
        },
        {
          "name": "recipient",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "deadline",
          "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
        }
      ],
      "name": "main",
      "output": "6f03bcbe6f8a1e01b5dcb5701ab21443606d1b323a888ead4e9a2ecda650ae2e",
      "attributes": null
    }
  ],
  "loggedTypes": [
    {
      "logId": "10098701174489624218",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "AMM_CONTRACT_ID",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "offset": 88
    }
  ]
};
var bytecode10 = decompressBytecode("H4sIAAAAAAAAA5NyMGAIcGQwkHIJYNjlycBg5MDSCOQrxALZQJoDyG9ScBVmCHIVYPFyYWBwSq/euVdsBd8z59qYxeUau9U4+VfE7b25+Kygwpcnl6xLGMCAqQNC4wf/gcAlNTElJzMvVaEgsbg4NYUhKL+0JLXISsHTL8zRx9MlPsAxxAOkNi01tZgYMwvy83Pic1NLElMSSxKB/AAgXyEvv0ShoCi1ODUP6j5cQF3AtSI5NTUlMy9dITOvoLREITE3vxSkq7g8sQDmZhA4AwYMTBAeA2OP6mmzNje9WVA+IcCIS4L3wbbNy1MI6meGUPbAGAHTPlA6BkLbQP1pPQFCG16B0DosEFr7CYTWmAHzN4SWnwKhBZZAaWg8CkRAaRMoDVXP/wBK20BpqDjfHSi9A0LzbIHSUP3cUPdwa0Borg9Q+gKUhqrngrqHE6qPE0IxcELdxXEEQrND7WdLgNCsC6A0CwDJwp/j4AIAAA==");
var SwapExactOutputScriptLoader = class extends Script {
  constructor(wallet) {
    super(bytecode10, abi5, wallet);
  }
};
__publicField(SwapExactOutputScriptLoader, "abi", abi5);
__publicField(SwapExactOutputScriptLoader, "bytecode", bytecode10);

// node_modules/mira-dex-ts/dist/sdk/typegen/MiraAmmContract.js
var AccessErrorInput;
(function(AccessErrorInput2) {
  AccessErrorInput2["NotOwner"] = "NotOwner";
})(AccessErrorInput || (AccessErrorInput = {}));
var AccessErrorOutput;
(function(AccessErrorOutput2) {
  AccessErrorOutput2["NotOwner"] = "NotOwner";
})(AccessErrorOutput || (AccessErrorOutput = {}));
var InitializationErrorInput;
(function(InitializationErrorInput2) {
  InitializationErrorInput2["CannotReinitialized"] = "CannotReinitialized";
})(InitializationErrorInput || (InitializationErrorInput = {}));
var InitializationErrorOutput;
(function(InitializationErrorOutput2) {
  InitializationErrorOutput2["CannotReinitialized"] = "CannotReinitialized";
})(InitializationErrorOutput || (InitializationErrorOutput = {}));
var ReentrancyErrorInput;
(function(ReentrancyErrorInput2) {
  ReentrancyErrorInput2["NonReentrant"] = "NonReentrant";
})(ReentrancyErrorInput || (ReentrancyErrorInput = {}));
var ReentrancyErrorOutput;
(function(ReentrancyErrorOutput2) {
  ReentrancyErrorOutput2["NonReentrant"] = "NonReentrant";
})(ReentrancyErrorOutput || (ReentrancyErrorOutput = {}));
var abi6 = {
  "programType": "contract",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "()",
      "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
    },
    {
      "type": "(struct std::asset_id::AssetId, struct std::asset_id::AssetId, bool)",
      "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6",
      "metadataTypeId": 2
    },
    {
      "type": "(u64, u64)",
      "concreteTypeId": "41bd1a98f0a59642d8f824c805b798a5f268d1f7d05808eb05c4189c493f1be0",
      "metadataTypeId": 0
    },
    {
      "type": "(u64, u64, u64, u64)",
      "concreteTypeId": "8e01ff69affed33f4459c1cd8303bcc6d694800f53e508dd1e088a51017b6e11",
      "metadataTypeId": 3
    },
    {
      "type": "b256",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
    },
    {
      "type": "bool",
      "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
    },
    {
      "type": "enum interfaces::errors::AmmError",
      "concreteTypeId": "75021c092fbe6c5da8e67b3bb45d05bac56d20ca3deb794f199db139578eee3b",
      "metadataTypeId": 4
    },
    {
      "type": "enum interfaces::errors::InputError",
      "concreteTypeId": "2c16264fa4a4e0c4dceefe1b6eee32bbd8f32e19b79110d831a389a95f37c915",
      "metadataTypeId": 5
    },
    {
      "type": "enum standards::src5::AccessError",
      "concreteTypeId": "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d",
      "metadataTypeId": 6
    },
    {
      "type": "enum standards::src5::State",
      "concreteTypeId": "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
      "metadataTypeId": 7
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 8
    },
    {
      "type": "enum std::option::Option<struct interfaces::data_structures::PoolMetadata>",
      "concreteTypeId": "71d71358b0c76d3c686d18d22a0ed92ab6dc7cdabc753d4c154debcae0a03dcf",
      "metadataTypeId": 9,
      "typeArguments": [
        "44a0560c7eea4ea134ff419f7d7735d4cde25c72966cff31ad934e76a41bdfac"
      ]
    },
    {
      "type": "enum std::option::Option<struct std::bytes::Bytes>",
      "concreteTypeId": "50b87f43f0097a720c18f3fb2100c4502484b716128f2706b3e187aa35a6dfe8",
      "metadataTypeId": 9,
      "typeArguments": [
        "cdd87b7d12fe505416570c294c884bca819364863efe3bf539245fa18515fbbb"
      ]
    },
    {
      "type": "enum std::option::Option<struct std::contract_id::ContractId>",
      "concreteTypeId": "0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8",
      "metadataTypeId": 9,
      "typeArguments": [
        "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
      ]
    },
    {
      "type": "enum std::option::Option<struct std::string::String>",
      "concreteTypeId": "7c06d929390a9aeeb8ffccf8173ac0d101a9976d99dda01cce74541a81e75ac0",
      "metadataTypeId": 9,
      "typeArguments": [
        "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
      ]
    },
    {
      "type": "enum std::option::Option<u64>",
      "concreteTypeId": "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d",
      "metadataTypeId": 9,
      "typeArguments": [
        "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
      ]
    },
    {
      "type": "enum std::option::Option<u8>",
      "concreteTypeId": "2da102c46c7263beeed95818cd7bee801716ba8303dddafdcd0f6c9efda4a0f1",
      "metadataTypeId": 9,
      "typeArguments": [
        "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
      ]
    },
    {
      "type": "enum sway_libs::ownership::errors::InitializationError",
      "concreteTypeId": "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893",
      "metadataTypeId": 10
    },
    {
      "type": "enum sway_libs::reentrancy::errors::ReentrancyError",
      "concreteTypeId": "4d216c57b3357523323f59401c7355785b41bdf832f6e1106272186b94797038",
      "metadataTypeId": 11
    },
    {
      "type": "struct interfaces::data_structures::Asset",
      "concreteTypeId": "affa437f314a241a60e97d006b83a963a5eaf0e0185484335e9ed03cd078d7f8",
      "metadataTypeId": 14
    },
    {
      "type": "struct interfaces::data_structures::PoolMetadata",
      "concreteTypeId": "44a0560c7eea4ea134ff419f7d7735d4cde25c72966cff31ad934e76a41bdfac",
      "metadataTypeId": 15
    },
    {
      "type": "struct interfaces::events::BurnEvent",
      "concreteTypeId": "362a6a689aa3d6b3e2d50426f7c94ce2717b22f1df0b7ffe541cbcb25e0b9c65",
      "metadataTypeId": 16
    },
    {
      "type": "struct interfaces::events::CreatePoolEvent",
      "concreteTypeId": "a9a76f9e31034cee0ebff18e0c0dc3b3511e277ab8644fb5b42ab97d62b52037",
      "metadataTypeId": 17
    },
    {
      "type": "struct interfaces::events::MintEvent",
      "concreteTypeId": "ae2069277682335a733c89d400032730e629e08e19f5127cba9ddd54854c1ff6",
      "metadataTypeId": 18
    },
    {
      "type": "struct interfaces::events::SwapEvent",
      "concreteTypeId": "6e2b2beb181a5f3d2c643986a5df4197407de6383085035d82fe20a2d2d779bf",
      "metadataTypeId": 19
    },
    {
      "type": "struct standards::src20::SetDecimalsEvent",
      "concreteTypeId": "fbe071a6e7ca2b2b5e503e82638f9f11c861a6fb452b65473eca8260db87392d",
      "metadataTypeId": 20
    },
    {
      "type": "struct standards::src20::SetNameEvent",
      "concreteTypeId": "6ce295b0fb4c1c15e8ed1cfa4babda47d8a04940a5266a3229e12243a2e37c2c",
      "metadataTypeId": 21
    },
    {
      "type": "struct standards::src20::SetSymbolEvent",
      "concreteTypeId": "a8a4b78066c51a50da6349bd395fe1c67e774d75c1db2c5c22288a432d7a363d",
      "metadataTypeId": 22
    },
    {
      "type": "struct standards::src20::TotalSupplyEvent",
      "concreteTypeId": "f255d5cc2114d1b6bc34bef4c28d4b60caccffd9a672ed16b79ea217e1c4a8a3",
      "metadataTypeId": 23
    },
    {
      "type": "struct std::asset_id::AssetId",
      "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
      "metadataTypeId": 25
    },
    {
      "type": "struct std::bytes::Bytes",
      "concreteTypeId": "cdd87b7d12fe505416570c294c884bca819364863efe3bf539245fa18515fbbb",
      "metadataTypeId": 26
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 28
    },
    {
      "type": "struct std::string::String",
      "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c",
      "metadataTypeId": 29
    },
    {
      "type": "struct sway_libs::ownership::events::OwnershipSet",
      "concreteTypeId": "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5",
      "metadataTypeId": 30
    },
    {
      "type": "struct sway_libs::ownership::events::OwnershipTransferred",
      "concreteTypeId": "b3fffbcb3158d7c010c31b194b60fb7857adb4ad61bdcf4b8b42958951d9f308",
      "metadataTypeId": 31
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    },
    {
      "type": "u8",
      "concreteTypeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
    }
  ],
  "metadataTypes": [
    {
      "type": "(_, _)",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "(_, _)",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 32
        },
        {
          "name": "__tuple_element",
          "typeId": 32
        }
      ]
    },
    {
      "type": "(_, _, _)",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 25
        },
        {
          "name": "__tuple_element",
          "typeId": 25
        },
        {
          "name": "__tuple_element",
          "typeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
        }
      ]
    },
    {
      "type": "(_, _, _, _)",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "enum interfaces::errors::AmmError",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "InsufficientLiquidity",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "NoLiquidityAdded",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "CannotAddLessThanMinimumLiquidity",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "CurveInvariantViolation",
          "typeId": 1
        }
      ]
    },
    {
      "type": "enum interfaces::errors::InputError",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "PoolAlreadyExists",
          "typeId": 2
        },
        {
          "name": "PoolDoesNotExist",
          "typeId": 2
        },
        {
          "name": "InvalidAsset",
          "typeId": 25
        },
        {
          "name": "ZeroInputAmount",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "ZeroOutputAmount",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "IdenticalAssets",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "UnsortedAssetPair",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "LPTokenHashCollision",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "NotAdmin",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "ProtocolFeesAreTooHigh",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "PoolInvariantViolation",
          "typeId": 0
        },
        {
          "name": "AssetSymbolNotSet",
          "typeId": 25
        },
        {
          "name": "AssetDecimalsNotSet",
          "typeId": 25
        }
      ]
    },
    {
      "type": "enum standards::src5::AccessError",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "NotOwner",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum standards::src5::State",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "Uninitialized",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "Initialized",
          "typeId": 8
        },
        {
          "name": "Revoked",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "Address",
          "typeId": 24
        },
        {
          "name": "ContractId",
          "typeId": 28
        }
      ]
    },
    {
      "type": "enum std::option::Option",
      "metadataTypeId": 9,
      "components": [
        {
          "name": "None",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "Some",
          "typeId": 12
        }
      ],
      "typeParameters": [
        12
      ]
    },
    {
      "type": "enum sway_libs::ownership::errors::InitializationError",
      "metadataTypeId": 10,
      "components": [
        {
          "name": "CannotReinitialized",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum sway_libs::reentrancy::errors::ReentrancyError",
      "metadataTypeId": 11,
      "components": [
        {
          "name": "NonReentrant",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 12
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 13
    },
    {
      "type": "struct interfaces::data_structures::Asset",
      "metadataTypeId": 14,
      "components": [
        {
          "name": "id",
          "typeId": 25
        },
        {
          "name": "amount",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct interfaces::data_structures::PoolMetadata",
      "metadataTypeId": 15,
      "components": [
        {
          "name": "reserve_0",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "reserve_1",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "liquidity",
          "typeId": 14
        },
        {
          "name": "decimals_0",
          "typeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
        },
        {
          "name": "decimals_1",
          "typeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
        }
      ]
    },
    {
      "type": "struct interfaces::events::BurnEvent",
      "metadataTypeId": 16,
      "components": [
        {
          "name": "pool_id",
          "typeId": 2
        },
        {
          "name": "recipient",
          "typeId": 8
        },
        {
          "name": "liquidity",
          "typeId": 14
        },
        {
          "name": "asset_0_out",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "asset_1_out",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct interfaces::events::CreatePoolEvent",
      "metadataTypeId": 17,
      "components": [
        {
          "name": "pool_id",
          "typeId": 2
        },
        {
          "name": "decimals_0",
          "typeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
        },
        {
          "name": "decimals_1",
          "typeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
        }
      ]
    },
    {
      "type": "struct interfaces::events::MintEvent",
      "metadataTypeId": 18,
      "components": [
        {
          "name": "pool_id",
          "typeId": 2
        },
        {
          "name": "recipient",
          "typeId": 8
        },
        {
          "name": "liquidity",
          "typeId": 14
        },
        {
          "name": "asset_0_in",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "asset_1_in",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct interfaces::events::SwapEvent",
      "metadataTypeId": 19,
      "components": [
        {
          "name": "pool_id",
          "typeId": 2
        },
        {
          "name": "recipient",
          "typeId": 8
        },
        {
          "name": "asset_0_in",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "asset_1_in",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "asset_0_out",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "asset_1_out",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct standards::src20::SetDecimalsEvent",
      "metadataTypeId": 20,
      "components": [
        {
          "name": "asset",
          "typeId": 25
        },
        {
          "name": "decimals",
          "typeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
        },
        {
          "name": "sender",
          "typeId": 8
        }
      ]
    },
    {
      "type": "struct standards::src20::SetNameEvent",
      "metadataTypeId": 21,
      "components": [
        {
          "name": "asset",
          "typeId": 25
        },
        {
          "name": "name",
          "typeId": 9,
          "typeArguments": [
            {
              "name": "",
              "typeId": 29
            }
          ]
        },
        {
          "name": "sender",
          "typeId": 8
        }
      ]
    },
    {
      "type": "struct standards::src20::SetSymbolEvent",
      "metadataTypeId": 22,
      "components": [
        {
          "name": "asset",
          "typeId": 25
        },
        {
          "name": "symbol",
          "typeId": 9,
          "typeArguments": [
            {
              "name": "",
              "typeId": 29
            }
          ]
        },
        {
          "name": "sender",
          "typeId": 8
        }
      ]
    },
    {
      "type": "struct standards::src20::TotalSupplyEvent",
      "metadataTypeId": 23,
      "components": [
        {
          "name": "asset",
          "typeId": 25
        },
        {
          "name": "supply",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "sender",
          "typeId": 8
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 24,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 25,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::bytes::Bytes",
      "metadataTypeId": 26,
      "components": [
        {
          "name": "buf",
          "typeId": 27
        },
        {
          "name": "len",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct std::bytes::RawBytes",
      "metadataTypeId": 27,
      "components": [
        {
          "name": "ptr",
          "typeId": 13
        },
        {
          "name": "cap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 28,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::string::String",
      "metadataTypeId": 29,
      "components": [
        {
          "name": "bytes",
          "typeId": 26
        }
      ]
    },
    {
      "type": "struct sway_libs::ownership::events::OwnershipSet",
      "metadataTypeId": 30,
      "components": [
        {
          "name": "new_owner",
          "typeId": 8
        }
      ]
    },
    {
      "type": "struct sway_libs::ownership::events::OwnershipTransferred",
      "metadataTypeId": 31,
      "components": [
        {
          "name": "new_owner",
          "typeId": 8
        },
        {
          "name": "previous_owner",
          "typeId": 8
        }
      ]
    },
    {
      "type": "u256",
      "metadataTypeId": 32
    }
  ],
  "functions": [
    {
      "inputs": [],
      "name": "owner",
      "output": "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "decimals",
      "output": "2da102c46c7263beeed95818cd7bee801716ba8303dddafdcd0f6c9efda4a0f1",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "name",
      "output": "7c06d929390a9aeeb8ffccf8173ac0d101a9976d99dda01cce74541a81e75ac0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "symbol",
      "output": "7c06d929390a9aeeb8ffccf8173ac0d101a9976d99dda01cce74541a81e75ac0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "total_assets",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "total_supply",
      "output": "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "pool_id",
          "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
        },
        {
          "name": "to",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        }
      ],
      "name": "burn",
      "output": "41bd1a98f0a59642d8f824c805b798a5f268d1f7d05808eb05c4189c493f1be0",
      "attributes": [
        {
          "name": "payable",
          "arguments": []
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "token_0_contract_id",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        },
        {
          "name": "token_0_sub_id",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "token_1_contract_id",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        },
        {
          "name": "token_1_sub_id",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "is_stable",
          "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
        }
      ],
      "name": "create_pool",
      "output": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "fees",
      "output": "8e01ff69affed33f4459c1cd8303bcc6d694800f53e508dd1e088a51017b6e11",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "hook",
      "output": "0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "pool_id",
          "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
        },
        {
          "name": "to",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        }
      ],
      "name": "mint",
      "output": "affa437f314a241a60e97d006b83a963a5eaf0e0185484335e9ed03cd078d7f8",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "pool_id",
          "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
        }
      ],
      "name": "pool_metadata",
      "output": "71d71358b0c76d3c686d18d22a0ed92ab6dc7cdabc753d4c154debcae0a03dcf",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "contract_id",
          "concreteTypeId": "0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8"
        }
      ],
      "name": "set_hook",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "volatile_fee",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "stable_fee",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "set_protocol_fees",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "pool_id",
          "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
        },
        {
          "name": "asset_0_out",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "asset_1_out",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "to",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "data",
          "concreteTypeId": "50b87f43f0097a720c18f3fb2100c4502484b716128f2706b3e187aa35a6dfe8"
        }
      ],
      "name": "swap",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "payable",
          "arguments": []
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "new_owner",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        }
      ],
      "name": "transfer_ownership",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "5557842539076482339",
      "concreteTypeId": "4d216c57b3357523323f59401c7355785b41bdf832f6e1106272186b94797038"
    },
    {
      "logId": "3176768710663004356",
      "concreteTypeId": "2c16264fa4a4e0c4dceefe1b6eee32bbd8f32e19b79110d831a389a95f37c915"
    },
    {
      "logId": "8431332278172281949",
      "concreteTypeId": "75021c092fbe6c5da8e67b3bb45d05bac56d20ca3deb794f199db139578eee3b"
    },
    {
      "logId": "17462098202904023478",
      "concreteTypeId": "f255d5cc2114d1b6bc34bef4c28d4b60caccffd9a672ed16b79ea217e1c4a8a3"
    },
    {
      "logId": "3903049024573527731",
      "concreteTypeId": "362a6a689aa3d6b3e2d50426f7c94ce2717b22f1df0b7ffe541cbcb25e0b9c65"
    },
    {
      "logId": "7845998088195677205",
      "concreteTypeId": "6ce295b0fb4c1c15e8ed1cfa4babda47d8a04940a5266a3229e12243a2e37c2c"
    },
    {
      "logId": "12152039456660331088",
      "concreteTypeId": "a8a4b78066c51a50da6349bd395fe1c67e774d75c1db2c5c22288a432d7a363d"
    },
    {
      "logId": "18149631459970394923",
      "concreteTypeId": "fbe071a6e7ca2b2b5e503e82638f9f11c861a6fb452b65473eca8260db87392d"
    },
    {
      "logId": "12224862438738316526",
      "concreteTypeId": "a9a76f9e31034cee0ebff18e0c0dc3b3511e277ab8644fb5b42ab97d62b52037"
    },
    {
      "logId": "12547144180067087194",
      "concreteTypeId": "ae2069277682335a733c89d400032730e629e08e19f5127cba9ddd54854c1ff6"
    },
    {
      "logId": "4571204900286667806",
      "concreteTypeId": "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d"
    },
    {
      "logId": "7938487056892321597",
      "concreteTypeId": "6e2b2beb181a5f3d2c643986a5df4197407de6383085035d82fe20a2d2d779bf"
    },
    {
      "logId": "2161305517876418151",
      "concreteTypeId": "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893"
    },
    {
      "logId": "16280289466020123285",
      "concreteTypeId": "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5"
    },
    {
      "logId": "12970362301975156672",
      "concreteTypeId": "b3fffbcb3158d7c010c31b194b60fb7857adb4ad61bdcf4b8b42958951d9f308"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "LP_FEE_VOLATILE",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "offset": 62440
    },
    {
      "name": "LP_FEE_STABLE",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "offset": 62432
    }
  ]
};
var storageSlots = [
  {
    "key": "22bff5eb85bdd67aa101f965a7da5f5140424064c36d0a59097fef5439ff5675",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "618f5159598624e8d2c389b09c5067df5674486eb10d0b37403686dfe080b17c",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "618f5159598624e8d2c389b09c5067df5674486eb10d0b37403686dfe080b17d",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "ea8bccdaf471150bc22cb2c940956b384c7404ddf20308253176c4ccb740113d",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  }
];
var MiraAmmContract = class extends Contract {
  constructor(id, accountOrProvider) {
    super(id, abi6, accountOrProvider);
  }
};
__publicField(MiraAmmContract, "abi", abi6);
__publicField(MiraAmmContract, "storageSlots", storageSlots);

// node_modules/mira-dex-ts/dist/sdk/utils.js
function contractIdInput(contractId) {
  return { bits: contractId };
}
function addressInput(address) {
  const addressInstance = address instanceof Address ? address : new Address(address);
  return { Address: { bits: addressInstance.toB256() } };
}
function assetInput(asset) {
  return asset;
}
function poolIdInput(poolId) {
  poolId = reorderPoolId(poolId);
  return [assetInput(poolId[0]), assetInput(poolId[1]), poolId[2]];
}
function buildPoolId(assetA, assetB, isStable) {
  if (typeof assetA === "string") {
    assetA = { bits: assetA };
  }
  if (typeof assetB === "string") {
    assetB = { bits: assetB };
  }
  return reorderPoolId([assetA, assetB, isStable]);
}
function reorderPoolId(poolId) {
  if (assetLessThan(poolId[0], poolId[1])) {
    return poolId;
  } else {
    return [poolId[1], poolId[0], poolId[2]];
  }
}
function assetLessThan(assetA, assetB) {
  let assetAInt = parseInt(assetA.bits, 16);
  let assetBInt = parseInt(assetB.bits, 16);
  return assetAInt < assetBInt;
}
function getAssetId(contractId, subId) {
  const contractIdBytes = arrayify(contractId);
  const subIdBytes = arrayify(subId);
  const assetId = sha256(concat([contractIdBytes, subIdBytes]));
  return { "bits": assetId };
}
function getLPAssetId(contractId, poolId) {
  const poolSubId = sha256(concat([arrayify(poolId[0].bits), arrayify(poolId[1].bits), poolId[2] ? Uint8Array.of(1) : Uint8Array.of(0)]));
  return getAssetId(contractId, poolSubId);
}
function arrangePoolParams(pool, firstAsset) {
  if (firstAsset.bits === pool.poolId[0].bits) {
    return [pool.poolId[1], pool.reserve0, pool.reserve1, pool.decimals0, pool.decimals1];
  }
  if (firstAsset.bits === pool.poolId[1].bits) {
    return [pool.poolId[0], pool.reserve1, pool.reserve0, pool.decimals1, pool.decimals0];
  }
  throw new Error(`AssetId ${firstAsset.bits} not in pool (${pool.poolId[0].bits}, ${pool.poolId[1].bits}, ${pool.poolId[2]})`);
}
function reorderAssetContracts(tokenAContract, tokenASubId, tokenBContract, tokenBSubId, isStable) {
  const assetA = getAssetId(tokenAContract, tokenASubId);
  const assetB = getAssetId(tokenBContract, tokenBSubId);
  const poolId = buildPoolId(assetA, assetB, isStable);
  const [token0Contract, token0SubId, token1Contract, token1SubId] = poolId[0].bits === assetA.bits ? [tokenAContract, tokenASubId, tokenBContract, tokenBSubId] : [tokenBContract, tokenBSubId, tokenAContract, tokenASubId];
  return [token0Contract, token0SubId, token1Contract, token1SubId];
}
function poolContainsAsset(poolId, asset) {
  return poolId[0].bits === asset.bits || poolId[1].bits === asset.bits;
}

// node_modules/mira-dex-ts/dist/sdk/typegen/MiraAmmContractFactory.js
var bytecode11 = decompressBytecode("");
var _MiraAmmContractFactory = class _MiraAmmContractFactory extends ContractFactory {
  constructor(accountOrProvider) {
    super(bytecode11, MiraAmmContract.abi, accountOrProvider);
  }
  deploy(deployOptions) {
    return super.deploy({
      storageSlots: MiraAmmContract.storageSlots,
      ...deployOptions
    });
  }
  static async deploy(wallet, options = {}) {
    const factory = new _MiraAmmContractFactory(wallet);
    return factory.deploy(options);
  }
};
__publicField(_MiraAmmContractFactory, "bytecode", bytecode11);
var MiraAmmContractFactory = _MiraAmmContractFactory;

// node_modules/mira-dex-ts/dist/sdk/mira_amm.js
var MiraAmm = class _MiraAmm {
  constructor(account, contractIdOpt) {
    __publicField(this, "account");
    __publicField(this, "ammContract");
    __publicField(this, "addLiquidityScriptLoader");
    __publicField(this, "createPoolAndAddLiquidityScriptLoader");
    __publicField(this, "removeLiquidityScriptLoader");
    __publicField(this, "swapExactInputScriptLoader");
    __publicField(this, "swapExactOutputScriptLoader");
    const contractId = contractIdOpt ?? DEFAULT_AMM_CONTRACT_ID;
    const contractIdConfigurables = { AMM_CONTRACT_ID: contractIdInput(contractId) };
    this.account = account;
    this.ammContract = new MiraAmmContract(contractId, account);
    this.addLiquidityScriptLoader = new AddLiquidityScriptLoader(account).setConfigurableConstants(contractIdConfigurables);
    this.createPoolAndAddLiquidityScriptLoader = new CreatePoolAndAddLiquidityScriptLoader(account).setConfigurableConstants(contractIdConfigurables);
    this.removeLiquidityScriptLoader = new RemoveLiquidityScriptLoader(account).setConfigurableConstants(contractIdConfigurables);
    this.swapExactInputScriptLoader = new SwapExactInputScriptLoader(account).setConfigurableConstants(contractIdConfigurables);
    this.swapExactOutputScriptLoader = new SwapExactOutputScriptLoader(account).setConfigurableConstants(contractIdConfigurables);
  }
  static async deploy(wallet) {
    const { waitForResult } = await MiraAmmContractFactory.deploy(wallet);
    const { contract, transactionResult } = await waitForResult();
    console.log("Deployed MiraAmm contract with status:", transactionResult.status, "and id:", contract.id.toB256());
    return new _MiraAmm(wallet, contract.id.toB256());
  }
  id() {
    return this.ammContract.id.toB256();
  }
  async addLiquidity(poolId, amountADesired, amountBDesired, amountAMin, amountBMin, deadline, txParams) {
    const assetA = poolId[0];
    poolId = reorderPoolId(poolId);
    const [amount0Desired, amount1Desired, amount0Min, amount1Min] = assetA.bits === poolId[0].bits ? [amountADesired, amountBDesired, amountAMin, amountBMin] : [amountBDesired, amountADesired, amountBMin, amountAMin];
    let request = await this.addLiquidityScriptLoader.functions.main(poolIdInput(poolId), amount0Desired, amount1Desired, amount0Min, amount1Min, addressInput(this.account.address), deadline).addContracts([this.ammContract]).txParams(txParams ?? {}).getTransactionRequest();
    const inputAssets = [
      {
        assetId: poolId[0].bits,
        amount: amount0Desired
      },
      {
        assetId: poolId[1].bits,
        amount: amount1Desired
      }
    ];
    return await this.prepareRequest(request, 2, inputAssets);
  }
  async createPoolAndAddLiquidity(tokenAContract, tokenASubId, tokenBContract, tokenBSubId, isStable, amountADesired, amountBDesired, deadline, txParams) {
    const [token0Contract, token0SubId, token1Contract, token1SubId] = reorderAssetContracts(tokenAContract, tokenASubId, tokenBContract, tokenBSubId, isStable);
    const [amount0Desired, amount1Desired] = tokenAContract === token0Contract ? [amountADesired, amountBDesired] : [amountBDesired, amountADesired];
    let request = await this.createPoolAndAddLiquidityScriptLoader.functions.main(contractIdInput(token0Contract), token0SubId, contractIdInput(token1Contract), token1SubId, isStable, amount0Desired, amount1Desired, addressInput(this.account.address), deadline).addContracts([this.ammContract]).txParams(txParams ?? {}).getTransactionRequest();
    const token0Asset = getAssetId(token0Contract, token0SubId);
    const token1Asset = getAssetId(token1Contract, token1SubId);
    const inputAssets = [
      {
        assetId: token0Asset.bits,
        amount: amount0Desired
      },
      {
        assetId: token1Asset.bits,
        amount: amount1Desired
      }
    ];
    return await this.prepareRequest(request, 2, inputAssets, [token0Contract, token1Contract]);
  }
  async createPool(tokenAContract, tokenASubId, tokenBContract, tokenBSubId, isStable, txParams) {
    const [token0Contract, token0SubId, token1Contract, token1SubId] = reorderAssetContracts(tokenAContract, tokenASubId, tokenBContract, tokenBSubId, isStable);
    let request = await this.ammContract.functions.create_pool(contractIdInput(token0Contract), token0SubId, contractIdInput(token1Contract), token1SubId, isStable).txParams(txParams ?? {}).getTransactionRequest();
    return await this.prepareRequest(request, 0, [], [token0Contract, token1Contract]);
  }
  async removeLiquidity(poolId, liquidity, amountAMin, amountBMin, deadline, txParams) {
    const assetA = poolId[0];
    poolId = reorderPoolId(poolId);
    const [amount0Min, amount1Min] = assetA.bits === poolId[0].bits ? [amountAMin, amountBMin] : [amountBMin, amountAMin];
    let request = await this.removeLiquidityScriptLoader.functions.main(poolIdInput(poolId), liquidity, amount0Min, amount1Min, addressInput(this.account.address), deadline).addContracts([this.ammContract]).txParams(txParams ?? {}).getTransactionRequest();
    const inputAssets = [{
      assetId: getLPAssetId(this.ammContract.id.toB256(), poolId).bits,
      amount: liquidity
    }];
    return await this.prepareRequest(request, 2, inputAssets);
  }
  async swapExactInput(amountIn, assetIn, amountOutMin, pools, deadline, txParams) {
    let request = await this.swapExactInputScriptLoader.functions.main(amountIn, assetInput(assetIn), amountOutMin, pools.map(poolIdInput), addressInput(this.account.address), deadline).addContracts([this.ammContract]).txParams(txParams ?? {}).getTransactionRequest();
    const inputAssets = [{
      assetId: assetIn.bits,
      amount: amountIn
    }];
    return await this.prepareRequest(request, 1, inputAssets);
  }
  async swapExactOutput(amountOut, assetOut, amountInMax, pools, deadline, txParams) {
    let request = await this.swapExactOutputScriptLoader.functions.main(amountOut, assetInput(assetOut), amountInMax, pools.map(poolIdInput), addressInput(this.account.address), deadline).addContracts([this.ammContract]).txParams(txParams ?? {}).getTransactionRequest();
    let assetIn = assetOut;
    for (const pool of pools.reverse()) {
      if (pool[0].bits === assetIn.bits) {
        assetIn = pool[1];
      } else {
        assetIn = pool[0];
      }
    }
    const inputAssets = [{
      assetId: assetIn.bits,
      amount: amountInMax
    }];
    return await this.prepareRequest(request, 1, inputAssets);
  }
  async transferOwnership(newOwner, txParams) {
    const request = await this.ammContract.functions.transfer_ownership(addressInput(newOwner)).txParams(txParams ?? {}).getTransactionRequest();
    return await this.prepareRequest(request);
  }
  async setHook(newAddress, txParams) {
    const request = await this.ammContract.functions.set_hook(newAddress ? contractIdInput(newAddress) : void 0).txParams(txParams ?? {}).getTransactionRequest();
    return await this.prepareRequest(request);
  }
  async fundRequest(request) {
    const gasCost = await this.account.getTransactionCost(request);
    return await this.account.fund(request, gasCost);
  }
  async prepareRequest(request, variableOutputs = 0, inputAssets = [], inputContracts = []) {
    if (variableOutputs > 0) {
      request.addVariableOutputs(variableOutputs);
    }
    request.addResources(await this.account.getResourcesToSpend(inputAssets));
    const uniqueContracts = new Set(inputContracts.map((c) => Address.fromAddressOrString(c)));
    for (const contract of uniqueContracts) {
      request.addContractInputAndOutput(contract);
    }
    request = await this.fundRequest(request);
    await this.account.provider.estimateTxDependencies(request);
    return request;
  }
};

// node_modules/mira-dex-ts/dist/sdk/errors.js
var InsufficientReservesError = class extends Error {
};
var InvalidAmountError = class extends Error {
};

// node_modules/mira-dex-ts/dist/sdk/math.js
var BASIS_POINTS = new BN(1e4);
var ONE_E_18 = new BN(10).pow(new BN(18));
function adjust(amount, powDecimals2) {
  return amount.mul(ONE_E_18).div(powDecimals2);
}
function roundingUpDivision(nominator, denominator) {
  let roundingDownDivisionResult = nominator.div(denominator);
  if (nominator.mod(denominator).isZero()) {
    return roundingDownDivisionResult;
  } else {
    return roundingDownDivisionResult.add(new BN(1));
  }
}
function getAmountOut(isStable, reserveIn, reserveOut, powDecimalsIn, powDecimalsOut, inputAmount) {
  if (inputAmount.lte(0)) {
    throw new InvalidAmountError();
  }
  if (isStable) {
    const xy = k(true, reserveIn, reserveOut, powDecimalsIn, powDecimalsOut);
    const amountInAdjusted = adjust(inputAmount, powDecimalsIn);
    const reserveInAdjusted = adjust(reserveIn, powDecimalsIn);
    const reserveOutAdjusted = adjust(reserveOut, powDecimalsOut);
    const y = reserveOutAdjusted.sub(getY(amountInAdjusted.add(reserveInAdjusted), xy, reserveOutAdjusted));
    return y.mul(powDecimalsOut).div(ONE_E_18);
  } else {
    return inputAmount.mul(reserveOut).div(reserveIn.add(inputAmount));
  }
}
function getAmountIn(isStable, reserveIn, reserveOut, powDecimalsIn, powDecimalsOut, outputAmount) {
  if (outputAmount.gte(reserveOut)) {
    throw new InsufficientReservesError();
  }
  if (outputAmount.lte(0)) {
    throw new InvalidAmountError();
  }
  if (isStable) {
    const xy = k(true, reserveIn, reserveOut, powDecimalsIn, powDecimalsOut);
    const amountOutAdjusted = adjust(outputAmount, powDecimalsOut);
    const reserveInAdjusted = adjust(reserveIn, powDecimalsIn);
    const reserveOutAdjusted = adjust(reserveOut, powDecimalsOut);
    const y = getY(reserveOutAdjusted.sub(amountOutAdjusted), xy, reserveInAdjusted).sub(reserveInAdjusted);
    return roundingUpDivision(y.mul(powDecimalsIn), ONE_E_18);
  } else {
    return roundingUpDivision(outputAmount.mul(reserveIn), reserveOut.sub(outputAmount));
  }
}
function powDecimals(decimals) {
  return new BN(10).pow(new BN(decimals));
}
function k(isStable, x, y, powDecimalsX, powDecimalsY) {
  if (isStable) {
    const _x = x.mul(ONE_E_18).div(powDecimalsX);
    const _y = y.mul(ONE_E_18).div(powDecimalsY);
    const _a = _x.mul(_y).div(ONE_E_18);
    const _b = _x.mul(_x).div(ONE_E_18).add(_y.mul(_y).div(ONE_E_18));
    return _a.mul(_b);
  } else {
    return x.mul(y);
  }
}
function f(x0, y) {
  return x0.mul(y.mul(y).div(ONE_E_18).mul(y).div(ONE_E_18)).add(x0.mul(x0).div(ONE_E_18).mul(x0).div(ONE_E_18).mul(y));
}
function d(x0, y) {
  return new BN(3).mul(x0).mul(y.mul(y).div(ONE_E_18)).div(ONE_E_18).add(x0.mul(x0).div(ONE_E_18).mul(x0).div(ONE_E_18));
}
function getY(x0, xy, y) {
  let i = 0;
  let yPrev;
  let kValue;
  let dy;
  while (i < 255) {
    yPrev = y;
    kValue = f(x0, y);
    if (kValue.lt(xy)) {
      dy = xy.sub(kValue).div(d(x0, y));
      y = y.add(dy);
    } else {
      dy = kValue.sub(xy).div(d(x0, y));
      y = y.sub(dy);
    }
    if (y.gt(yPrev)) {
      if (y.sub(yPrev).lte(new BN(1))) {
        return y;
      }
    } else {
      if (yPrev.sub(y).lte(new BN(1))) {
        return y;
      }
    }
    i++;
  }
  return y;
}
function subtractFee(poolId, amount, ammFees) {
  const feeBP = poolId[2] ? ammFees.lpFeeStable.add(ammFees.protocolFeeStable) : ammFees.lpFeeVolatile.add(ammFees.protocolFeeVolatile);
  const fee = calculateFeeToSubtract(amount, feeBP);
  return amount.sub(fee);
}
function addFee(poolId, amount, ammFees) {
  const feeBP = poolId[2] ? ammFees.lpFeeStable.add(ammFees.protocolFeeStable) : ammFees.lpFeeVolatile.add(ammFees.protocolFeeVolatile);
  const fee = calculateFeeToAdd(amount, feeBP);
  return amount.add(fee);
}
function calculateFeeToSubtract(amount, fee) {
  const nominator = amount.mul(fee);
  return roundingUpDivision(nominator, BASIS_POINTS);
}
function calculateFeeToAdd(amount, fee) {
  const nominator = amount.mul(fee);
  const denominator = BASIS_POINTS.sub(fee);
  return roundingUpDivision(nominator, denominator);
}

// node_modules/mira-dex-ts/dist/sdk/readonly_mira_amm.js
var DECIMALS_PRECISION = 1e12;
var ReadonlyMiraAmm = class {
  constructor(provider, contractIdOpt) {
    __publicField(this, "provider");
    __publicField(this, "ammContract");
    let contractId = contractIdOpt ?? DEFAULT_AMM_CONTRACT_ID;
    this.provider = provider;
    this.ammContract = new MiraAmmContract(contractId, provider);
  }
  id() {
    return this.ammContract.id.toString();
  }
  async ammMetadata() {
    return {
      id: this.id(),
      fees: await this.fees(),
      hook: await this.hook(),
      totalAssets: await this.totalAssets(),
      owner: await this.owner()
    };
  }
  async poolMetadata(poolId) {
    poolId = reorderPoolId(poolId);
    const result = await this.ammContract.functions.pool_metadata(poolIdInput(poolId)).get();
    const value = result.value;
    if (!value) {
      return null;
    }
    return {
      poolId,
      reserve0: value.reserve_0,
      reserve1: value.reserve_1,
      liquidity: [value.liquidity.id, value.liquidity.amount],
      decimals0: value.decimals_0,
      decimals1: value.decimals_1
    };
  }
  async fees() {
    const result = await this.ammContract.functions.fees().get();
    const [lpFeeVolatile, lpFeeStable, protocolFeeVolatile, protocolFeeStable] = result.value;
    return {
      lpFeeVolatile,
      lpFeeStable,
      protocolFeeVolatile,
      protocolFeeStable
    };
  }
  async hook() {
    var _a;
    const result = await this.ammContract.functions.hook().get();
    return ((_a = result.value) == null ? void 0 : _a.bits) || null;
  }
  async totalAssets() {
    const result = await this.ammContract.functions.total_assets().get();
    return result.value;
  }
  async lpAssetInfo(assetId) {
    const name = await this.ammContract.functions.name(assetInput(assetId)).get();
    const symbol = await this.ammContract.functions.symbol(assetInput(assetId)).get();
    const decimals = await this.ammContract.functions.decimals(assetInput(assetId)).get();
    const totalSupply = await this.ammContract.functions.total_supply(assetInput(assetId)).get();
    if (name.value && symbol.value && decimals.value && totalSupply.value) {
      return {
        assetId,
        name: name.value,
        symbol: symbol.value,
        decimals: decimals.value,
        totalSupply: totalSupply.value
      };
    } else {
      return null;
    }
  }
  async totalSupply(assetId) {
    return (await this.ammContract.functions.total_supply(assetInput(assetId)).get()).value;
  }
  async owner() {
    var _a, _b;
    const result = await this.ammContract.functions.owner().get();
    const ownershipState = result.value;
    const identity = ownershipState.Initialized;
    const bits = ((_a = identity == null ? void 0 : identity.Address) == null ? void 0 : _a.bits) ?? ((_b = identity == null ? void 0 : identity.ContractId) == null ? void 0 : _b.bits);
    return bits || null;
  }
  async getOtherTokenToAddLiquidity(poolId, amount, isFirstToken) {
    poolId = reorderPoolId(poolId);
    const pool = await this.poolMetadata(poolId);
    if (!pool) {
      throw new Error("Pool not found");
    }
    if (pool.reserve0.isZero() || pool.reserve1.isZero()) {
      throw new Error("Reserve is zero. Any number of tokens can be added");
    }
    if (isFirstToken) {
      const otherTokenAmount = new BN(amount).mul(pool.reserve1).div(pool.reserve0).add(new BN(1));
      return [pool.poolId[1], otherTokenAmount];
    } else {
      const otherTokenAmount = new BN(amount).mul(pool.reserve0).div(pool.reserve1).add(new BN(1));
      return [pool.poolId[0], otherTokenAmount];
    }
  }
  async getLiquidityPosition(poolId, lpTokensAmount) {
    poolId = reorderPoolId(poolId);
    const lpTokensBN = new BN(lpTokensAmount);
    if (lpTokensBN.isNeg() || lpTokensBN.isZero()) {
      throw new Error("Non positive input amount");
    }
    const pool = await this.poolMetadata(poolId);
    if (!pool) {
      throw new Error("Pool not found");
    }
    if (lpTokensBN.gt(pool.liquidity[1])) {
      throw new Error("Not enough liquidity");
    }
    const amount0 = pool.reserve0.mul(lpTokensBN).div(pool.liquidity[1]);
    const amount1 = pool.reserve1.mul(lpTokensBN).div(pool.liquidity[1]);
    return [[pool.poolId[0], amount0], [pool.poolId[1], amount1]];
  }
  async getAmountsOut(assetIdIn, assetAmountIn, pools) {
    const assetAmount = new BN(assetAmountIn);
    if (assetAmount.isNeg() || assetAmount.isZero()) {
      throw new Error("Non positive input amount");
    }
    const fees = await this.fees();
    let assetIn = assetIdIn;
    let amountIn = assetAmount;
    const amountsOut = [[assetIn, amountIn]];
    for (let poolId of pools) {
      poolId = reorderPoolId(poolId);
      const pool = await this.poolMetadata(poolId);
      if (!pool) {
        throw new Error("Pool not found");
      }
      amountIn = subtractFee(poolId, amountIn, fees);
      let [assetOut, reserveIn, reserveOut, decimalsIn, decimalsOut] = arrangePoolParams(pool, assetIn);
      let amountOut = getAmountOut(poolId[2], reserveIn, reserveOut, powDecimals(decimalsIn), powDecimals(decimalsOut), amountIn);
      assetIn = assetOut;
      amountIn = amountOut;
      amountsOut.push([assetIn, amountIn]);
    }
    return amountsOut;
  }
  async getAmountsIn(assetIdOut, assetAmountOut, pools) {
    const assetAmount = new BN(assetAmountOut);
    if (assetAmount.isNeg() || assetAmount.isZero()) {
      throw new Error("Non positive input amount");
    }
    const fees = await this.fees();
    let assetOut = assetIdOut;
    let amountOut = assetAmount;
    const amountsIn = [[assetOut, amountOut]];
    for (let poolId of pools.reverse()) {
      poolId = reorderPoolId(poolId);
      const pool = await this.poolMetadata(poolId);
      if (!pool) {
        throw new Error("Pool not found");
      }
      let [assetIn, reserveOut, reserveIn, decimalsOut, decimalsIn] = arrangePoolParams(pool, assetOut);
      let amountIn = getAmountIn(poolId[2], reserveIn, reserveOut, powDecimals(decimalsIn), powDecimals(decimalsOut), amountOut);
      amountIn = addFee(poolId, amountIn, fees);
      assetOut = assetIn;
      amountOut = amountIn;
      amountsIn.push([assetOut, amountOut]);
    }
    return amountsIn;
  }
  async previewSwapExactInput(assetIdIn, assetAmountIn, pools) {
    const amountsOut = await this.getAmountsOut(assetIdIn, assetAmountIn, pools);
    return amountsOut[amountsOut.length - 1];
  }
  async previewSwapExactOutput(assetIdOut, assetAmountOut, pools) {
    const amountsIn = await this.getAmountsIn(assetIdOut, assetAmountOut, pools);
    return amountsIn[amountsIn.length - 1];
  }
  // Returns the price of the provided assetId retrieved through the provided pools
  async getCurrentRate(assetId, pools) {
    if (pools.length === 0) {
      throw new Error("No pools provided");
    }
    let lastPool = pools[pools.length - 1];
    if (!poolContainsAsset(lastPool, assetId)) {
      pools = pools.slice().reverse();
      lastPool = pools[pools.length - 1];
      if (!poolContainsAsset(lastPool, assetId)) {
        throw new Error("Asset not found in border pools");
      }
    }
    let assetIdIn = assetId;
    for (let poolId of pools.slice().reverse()) {
      if (poolId[0].bits === assetIdIn.bits) {
        assetIdIn = poolId[1];
      } else if (poolId[1].bits === assetIdIn.bits) {
        assetIdIn = poolId[0];
      } else {
        throw new Error("Incorrect pools");
      }
    }
    let currentRate = new BN(DECIMALS_PRECISION);
    let assetIn = assetIdIn;
    let assetDecimalsIn, assetDecimalsOut;
    const fees = await this.fees();
    const volatileFee = fees.lpFeeVolatile.toNumber() + fees.protocolFeeVolatile.toNumber();
    for (const poolId of pools) {
      const pool = await this.poolMetadata(poolId);
      if (!pool) {
        throw new Error(`Pool not found ${poolId}`);
      }
      const [reserveIn, reserveOut, assetOut, decimalsIn, decimalsOut] = poolId[0].bits === assetIn.bits ? [pool.reserve0, pool.reserve1, poolId[1], pool.decimals0, pool.decimals1] : [pool.reserve1, pool.reserve0, poolId[0], pool.decimals1, pool.decimals0];
      if (assetIdIn.bits === assetIn.bits) {
        assetDecimalsIn = decimalsIn;
      }
      if (poolId[2]) {
        const assetAmountIn = 100;
        const amountsOut = await this.getAmountsOut(assetIn, assetAmountIn, [poolId]);
        const assetOut2 = amountsOut[amountsOut.length - 1][1];
        currentRate = currentRate.mul(assetAmountIn).div(assetOut2);
      } else {
        currentRate = currentRate.mul(reserveIn).div(reserveOut).mul(BASIS_POINTS.sub(volatileFee)).div(BASIS_POINTS);
      }
      assetIn = assetOut;
      assetDecimalsOut = decimalsOut;
    }
    let rate = currentRate.toNumber() / DECIMALS_PRECISION;
    return [rate, assetDecimalsIn, assetDecimalsOut];
  }
};
export {
  MiraAmm,
  ReadonlyMiraAmm,
  buildPoolId,
  getAssetId,
  getLPAssetId
};
//# sourceMappingURL=mira-dex-ts.js.map
