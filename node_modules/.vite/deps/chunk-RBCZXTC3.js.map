{
  "version": 3,
  "sources": ["../../@fuel-ts/math/node_modules/bn.js/lib/bn.js", "../../@fuel-ts/versions/src/lib/getBuiltinVersions.ts", "../../@fuel-ts/versions/src/lib/semver.ts", "../../@fuel-ts/versions/src/lib/checkFuelCoreVersionCompatibility.ts", "../../@fuel-ts/versions/src/index.ts", "../../@fuel-ts/errors/src/error-codes.ts", "../../@fuel-ts/errors/src/fuel-error.ts", "../../@fuel-ts/math/src/bn.ts", "../../@fuel-ts/math/src/configs.ts", "../../@fuel-ts/math/src/decimal.ts", "../../@fuel-ts/math/src/functional.ts", "../../@fuel-ts/math/src/math.ts", "../../fflate/esm/browser.js", "../../@fuel-ts/utils/src/utils/capitalizeString.ts", "../../@fuel-ts/utils/src/utils/chunkAndPadBytes.ts", "../../@fuel-ts/utils/src/utils/arrayify.ts", "../../@fuel-ts/utils/src/utils/concat.ts", "../../@fuel-ts/utils/src/utils/hexlify.ts", "../../@fuel-ts/utils/src/utils/normalizeString.ts", "../../@fuel-ts/utils/src/utils/date-time.ts", "../../@fuel-ts/utils/src/utils/sleep.ts", "../../@fuel-ts/utils/src/utils/defaultSnapshots/chainConfig.json", "../../@fuel-ts/utils/src/utils/defaultSnapshots/metadata.json", "../../@fuel-ts/utils/src/utils/defaultSnapshots/stateConfig.json", "../../@fuel-ts/utils/src/utils/defaultSnapshotConfigs.ts", "../../@fuel-ts/utils/src/utils/isDefined.ts", "../../@fuel-ts/utils/src/utils/base58.ts", "../../@fuel-ts/utils/src/utils/dataSlice.ts", "../../@fuel-ts/utils/src/utils/toUtf8Bytes.ts", "../../@fuel-ts/utils/src/utils/toUtf8String.ts", "../../@fuel-ts/utils/src/utils/bytecode.ts", "../../@fuel-ts/utils/src/index.ts", "../../@fuel-ts/crypto/node_modules/@noble/hashes/src/_assert.ts", "../../@fuel-ts/crypto/node_modules/@noble/hashes/src/crypto.ts", "../../@fuel-ts/crypto/node_modules/@noble/hashes/src/utils.ts", "../../@fuel-ts/crypto/node_modules/@noble/hashes/src/hmac.ts", "../../@fuel-ts/crypto/node_modules/@noble/hashes/src/pbkdf2.ts", "../../@fuel-ts/crypto/node_modules/@noble/hashes/src/_md.ts", "../../@fuel-ts/crypto/node_modules/@noble/hashes/src/sha256.ts", "../../@fuel-ts/crypto/node_modules/@noble/hashes/src/scrypt.ts", "../../@fuel-ts/crypto/node_modules/@noble/hashes/src/_u64.ts", "../../@fuel-ts/crypto/node_modules/@noble/hashes/src/sha3.ts", "../../@fuel-ts/crypto/node_modules/@noble/hashes/src/ripemd160.ts", "../../@fuel-ts/crypto/node_modules/@noble/hashes/src/sha512.ts", "../../@fuel-ts/crypto/src/shared/scrypt.ts", "../../@fuel-ts/crypto/src/shared/keccak256.ts", "../../@fuel-ts/crypto/src/shared/ripemd160.ts", "../../@fuel-ts/crypto/src/browser/aes-ctr.ts", "../../@fuel-ts/crypto/src/browser/bufferFromString.ts", "../../@fuel-ts/crypto/src/browser/pbkdf2.ts", "../../@fuel-ts/crypto/src/browser/crypto.ts", "../../@fuel-ts/crypto/src/browser/randomBytes.ts", "../../@fuel-ts/crypto/src/browser/stringFromBuffer.ts", "../../@fuel-ts/crypto/src/browser/encryptJsonWalletData.ts", "../../@fuel-ts/crypto/src/browser/hmac.ts", "../../@fuel-ts/crypto/src/browser/randomUUID.ts", "../../@fuel-ts/crypto/src/browser/index.ts", "../../@fuel-ts/crypto/src/index.browser.ts", "../../@fuel-ts/hasher/node_modules/@noble/hashes/src/_assert.ts", "../../@fuel-ts/hasher/node_modules/@noble/hashes/src/crypto.ts", "../../@fuel-ts/hasher/node_modules/@noble/hashes/src/utils.ts", "../../@fuel-ts/hasher/node_modules/@noble/hashes/src/_md.ts", "../../@fuel-ts/hasher/node_modules/@noble/hashes/src/sha256.ts", "../../@fuel-ts/hasher/src/hasher.ts", "../../@fuel-ts/abi-coder/src/encoding/coders/AbstractCoder.ts", "../../@fuel-ts/abi-coder/src/encoding/coders/ArrayCoder.ts", "../../@fuel-ts/abi-coder/src/utils/constants.ts", "../../@fuel-ts/abi-coder/src/utils/utilities.ts", "../../@fuel-ts/abi-coder/src/encoding/coders/B256Coder.ts", "../../@fuel-ts/abi-coder/src/encoding/coders/B512Coder.ts", "../../@fuel-ts/abi-coder/src/encoding/coders/BigNumberCoder.ts", "../../@fuel-ts/abi-coder/src/encoding/coders/BooleanCoder.ts", "../../@fuel-ts/abi-coder/src/encoding/coders/ByteCoder.ts", "../../@fuel-ts/abi-coder/src/encoding/coders/EnumCoder.ts", "../../@fuel-ts/abi-coder/src/encoding/coders/NumberCoder.ts", "../../@fuel-ts/abi-coder/src/encoding/coders/OptionCoder.ts", "../../@fuel-ts/abi-coder/src/encoding/coders/RawSliceCoder.ts", "../../@fuel-ts/abi-coder/src/encoding/coders/StdStringCoder.ts", "../../@fuel-ts/abi-coder/src/encoding/coders/StrSliceCoder.ts", "../../@fuel-ts/abi-coder/src/encoding/coders/StringCoder.ts", "../../@fuel-ts/abi-coder/src/encoding/coders/StructCoder.ts", "../../@fuel-ts/abi-coder/src/encoding/coders/TupleCoder.ts", "../../@fuel-ts/abi-coder/src/encoding/coders/VecCoder.ts", "../../@fuel-ts/abi-coder/src/Interface.ts", "../../@fuel-ts/abi-coder/src/ResolvedAbiType.ts", "../../@fuel-ts/abi-coder/src/utils/json-abi.ts", "../../@fuel-ts/abi-coder/src/encoding/strategies/getCoderForEncoding.ts", "../../@fuel-ts/abi-coder/src/encoding/strategies/getCoderV1.ts", "../../@fuel-ts/abi-coder/src/encoding/coders/VoidCoder.ts", "../../@fuel-ts/abi-coder/src/encoding/strategies/getCoders.ts", "../../@fuel-ts/abi-coder/src/AbiCoder.ts", "../../@fuel-ts/abi-coder/src/FunctionFragment.ts", "../../@fuel-ts/abi-coder/src/utils/getFunctionInputs.ts", "../../@fuel-ts/abi-coder/src/utils/padValuesWithUndefined.ts", "../../@fuel-ts/abi-coder/src/utils/transpile-abi.ts", "../../@fuel-ts/abi-coder/src/utils/scriptData.ts", "../../@fuel-ts/address/node_modules/@noble/hashes/src/_assert.ts", "../../@fuel-ts/address/node_modules/@noble/hashes/src/crypto.ts", "../../@fuel-ts/address/node_modules/@noble/hashes/src/utils.ts", "../../@fuel-ts/address/node_modules/@noble/hashes/src/_md.ts", "../../@fuel-ts/address/node_modules/@noble/hashes/src/sha256.ts", "../../@fuel-ts/address/src/address.ts", "../../@fuel-ts/address/src/utils.ts", "../../@fuel-ts/transactions/src/coders/input.ts", "../../@fuel-ts/transactions/src/coders/byte-array.ts", "../../@fuel-ts/transactions/src/coders/tx-pointer.ts", "../../@fuel-ts/transactions/src/coders/output.ts", "../../@fuel-ts/transactions/src/coders/policy.ts", "../../@fuel-ts/transactions/src/receipt.ts", "../../@fuel-ts/transactions/src/coders/storage-slot.ts", "../../@fuel-ts/transactions/src/coders/transaction.ts", "../../@fuel-ts/transactions/src/coders/upgrade-purpose.ts", "../../@fuel-ts/transactions/src/coders/witness.ts", "../../@fuel-ts/transactions/src/coders/utxo-id.ts", "../../ramda/es/internal/_isPlaceholder.js", "../../ramda/es/internal/_curry1.js", "../../ramda/es/internal/_curry2.js", "../../ramda/es/add.js", "../../ramda/es/internal/_concat.js", "../../ramda/es/internal/_arity.js", "../../ramda/es/internal/_curryN.js", "../../ramda/es/curryN.js", "../../ramda/es/addIndex.js", "../../ramda/es/addIndexRight.js", "../../ramda/es/internal/_curry3.js", "../../ramda/es/adjust.js", "../../ramda/es/internal/_isArray.js", "../../ramda/es/internal/_isTransformer.js", "../../ramda/es/internal/_dispatchable.js", "../../ramda/es/internal/_reduced.js", "../../ramda/es/internal/_xfBase.js", "../../ramda/es/internal/_xall.js", "../../ramda/es/all.js", "../../ramda/es/internal/_arrayFromIterator.js", "../../ramda/es/internal/_includesWith.js", "../../ramda/es/internal/_functionName.js", "../../ramda/es/internal/_has.js", "../../ramda/es/internal/_objectIs.js", "../../ramda/es/internal/_isArguments.js", "../../ramda/es/keys.js", "../../ramda/es/type.js", "../../ramda/es/internal/_equals.js", "../../ramda/es/equals.js", "../../ramda/es/internal/_indexOf.js", "../../ramda/es/internal/_includes.js", "../../ramda/es/internal/_map.js", "../../ramda/es/internal/_quote.js", "../../ramda/es/internal/_toISOString.js", "../../ramda/es/internal/_complement.js", "../../ramda/es/internal/_arrayReduce.js", "../../ramda/es/internal/_filter.js", "../../ramda/es/internal/_isObject.js", "../../ramda/es/internal/_xfilter.js", "../../ramda/es/filter.js", "../../ramda/es/reject.js", "../../ramda/es/internal/_toString.js", "../../ramda/es/toString.js", "../../ramda/es/max.js", "../../ramda/es/internal/_xmap.js", "../../ramda/es/map.js", "../../ramda/es/internal/_isInteger.js", "../../ramda/es/internal/_isString.js", "../../ramda/es/internal/_nth.js", "../../ramda/es/prop.js", "../../ramda/es/pluck.js", "../../ramda/es/internal/_isArrayLike.js", "../../ramda/es/internal/_createReduce.js", "../../ramda/es/internal/_xArrayReduce.js", "../../ramda/es/bind.js", "../../ramda/es/internal/_xReduce.js", "../../ramda/es/internal/_xwrap.js", "../../ramda/es/reduce.js", "../../ramda/es/allPass.js", "../../ramda/es/always.js", "../../ramda/es/and.js", "../../ramda/es/internal/_xany.js", "../../ramda/es/any.js", "../../ramda/es/anyPass.js", "../../ramda/es/internal/_reduce.js", "../../ramda/es/ap.js", "../../ramda/es/internal/_aperture.js", "../../ramda/es/internal/_xaperture.js", "../../ramda/es/aperture.js", "../../ramda/es/append.js", "../../ramda/es/apply.js", "../../ramda/es/values.js", "../../ramda/es/applySpec.js", "../../ramda/es/applyTo.js", "../../ramda/es/ascend.js", "../../ramda/es/curry.js", "../../ramda/es/ascendNatural.js", "../../ramda/es/internal/_assoc.js", "../../ramda/es/isNil.js", "../../ramda/es/assocPath.js", "../../ramda/es/assoc.js", "../../ramda/es/nAry.js", "../../ramda/es/binary.js", "../../ramda/es/internal/_isFunction.js", "../../ramda/es/liftN.js", "../../ramda/es/lift.js", "../../ramda/es/both.js", "../../ramda/es/call.js", "../../ramda/es/internal/_makeFlat.js", "../../ramda/es/internal/_forceReduced.js", "../../ramda/es/internal/_flatCat.js", "../../ramda/es/internal/_xchain.js", "../../ramda/es/chain.js", "../../ramda/es/clamp.js", "../../ramda/es/internal/_cloneRegExp.js", "../../ramda/es/internal/_clone.js", "../../ramda/es/clone.js", "../../ramda/es/collectBy.js", "../../ramda/es/comparator.js", "../../ramda/es/not.js", "../../ramda/es/complement.js", "../../ramda/es/internal/_pipe.js", "../../ramda/es/internal/_checkForMethod.js", "../../ramda/es/slice.js", "../../ramda/es/tail.js", "../../ramda/es/pipe.js", "../../ramda/es/reverse.js", "../../ramda/es/compose.js", "../../ramda/es/head.js", "../../ramda/es/internal/_identity.js", "../../ramda/es/identity.js", "../../ramda/es/pipeWith.js", "../../ramda/es/composeWith.js", "../../ramda/es/concat.js", "../../ramda/es/cond.js", "../../ramda/es/constructN.js", "../../ramda/es/construct.js", "../../ramda/es/converge.js", "../../ramda/es/count.js", "../../ramda/es/internal/_xreduceBy.js", "../../ramda/es/reduceBy.js", "../../ramda/es/countBy.js", "../../ramda/es/dec.js", "../../ramda/es/defaultTo.js", "../../ramda/es/descend.js", "../../ramda/es/descendNatural.js", "../../ramda/es/internal/_Set.js", "../../ramda/es/difference.js", "../../ramda/es/differenceWith.js", "../../ramda/es/remove.js", "../../ramda/es/internal/_dissoc.js", "../../ramda/es/dissocPath.js", "../../ramda/es/dissoc.js", "../../ramda/es/divide.js", "../../ramda/es/internal/_xdrop.js", "../../ramda/es/drop.js", "../../ramda/es/internal/_xtake.js", "../../ramda/es/take.js", "../../ramda/es/internal/_dropLast.js", "../../ramda/es/internal/_xdropLast.js", "../../ramda/es/dropLast.js", "../../ramda/es/internal/_dropLastWhile.js", "../../ramda/es/internal/_xdropLastWhile.js", "../../ramda/es/dropLastWhile.js", "../../ramda/es/internal/_xdropRepeatsWith.js", "../../ramda/es/last.js", "../../ramda/es/dropRepeatsWith.js", "../../ramda/es/dropRepeats.js", "../../ramda/es/eqBy.js", "../../ramda/es/dropRepeatsBy.js", "../../ramda/es/internal/_xdropWhile.js", "../../ramda/es/dropWhile.js", "../../ramda/es/or.js", "../../ramda/es/either.js", "../../ramda/es/internal/_isTypedArray.js", "../../ramda/es/empty.js", "../../ramda/es/takeLast.js", "../../ramda/es/endsWith.js", "../../ramda/es/eqProps.js", "../../ramda/es/evolve.js", "../../ramda/es/internal/_xfind.js", "../../ramda/es/find.js", "../../ramda/es/internal/_xfindIndex.js", "../../ramda/es/findIndex.js", "../../ramda/es/internal/_xfindLast.js", "../../ramda/es/findLast.js", "../../ramda/es/internal/_xfindLastIndex.js", "../../ramda/es/findLastIndex.js", "../../ramda/es/flatten.js", "../../ramda/es/flip.js", "../../ramda/es/flow.js", "../../ramda/es/forEach.js", "../../ramda/es/forEachObjIndexed.js", "../../ramda/es/fromPairs.js", "../../ramda/es/groupBy.js", "../../ramda/es/groupWith.js", "../../ramda/es/gt.js", "../../ramda/es/gte.js", "../../ramda/es/hasPath.js", "../../ramda/es/has.js", "../../ramda/es/hasIn.js", "../../ramda/es/ifElse.js", "../../ramda/es/inc.js", "../../ramda/es/includes.js", "../../ramda/es/indexBy.js", "../../ramda/es/indexOf.js", "../../ramda/es/init.js", "../../ramda/es/innerJoin.js", "../../ramda/es/insert.js", "../../ramda/es/insertAll.js", "../../ramda/es/internal/_xuniqBy.js", "../../ramda/es/uniqBy.js", "../../ramda/es/uniq.js", "../../ramda/es/intersection.js", "../../ramda/es/intersperse.js", "../../ramda/es/internal/_objectAssign.js", "../../ramda/es/objOf.js", "../../ramda/es/internal/_stepCat.js", "../../ramda/es/into.js", "../../ramda/es/invert.js", "../../ramda/es/invertObj.js", "../../ramda/es/invoker.js", "../../ramda/es/is.js", "../../ramda/es/isEmpty.js", "../../ramda/es/isNotEmpty.js", "../../ramda/es/isNotNil.js", "../../ramda/es/join.js", "../../ramda/es/juxt.js", "../../ramda/es/keysIn.js", "../../ramda/es/lastIndexOf.js", "../../ramda/es/internal/_isNumber.js", "../../ramda/es/length.js", "../../ramda/es/lens.js", "../../ramda/es/update.js", "../../ramda/es/lensIndex.js", "../../ramda/es/internal/_path.js", "../../ramda/es/lensPath.js", "../../ramda/es/lensProp.js", "../../ramda/es/lt.js", "../../ramda/es/lte.js", "../../ramda/es/mapAccum.js", "../../ramda/es/mapAccumRight.js", "../../ramda/es/mapObjIndexed.js", "../../ramda/es/match.js", "../../ramda/es/mathMod.js", "../../ramda/es/maxBy.js", "../../ramda/es/sum.js", "../../ramda/es/mean.js", "../../ramda/es/median.js", "../../ramda/es/memoizeWith.js", "../../ramda/es/mergeAll.js", "../../ramda/es/mergeWithKey.js", "../../ramda/es/mergeDeepWithKey.js", "../../ramda/es/mergeDeepLeft.js", "../../ramda/es/mergeDeepRight.js", "../../ramda/es/mergeDeepWith.js", "../../ramda/es/mergeLeft.js", "../../ramda/es/mergeRight.js", "../../ramda/es/mergeWith.js", "../../ramda/es/min.js", "../../ramda/es/minBy.js", "../../ramda/es/internal/_modify.js", "../../ramda/es/modifyPath.js", "../../ramda/es/modify.js", "../../ramda/es/modulo.js", "../../ramda/es/move.js", "../../ramda/es/multiply.js", "../../ramda/es/partialObject.js", "../../ramda/es/negate.js", "../../ramda/es/none.js", "../../ramda/es/nth.js", "../../ramda/es/nthArg.js", "../../ramda/es/o.js", "../../ramda/es/of.js", "../../ramda/es/omit.js", "../../ramda/es/on.js", "../../ramda/es/once.js", "../../ramda/es/internal/_assertPromise.js", "../../ramda/es/otherwise.js", "../../ramda/es/over.js", "../../ramda/es/pair.js", "../../ramda/es/internal/_createPartialApplicator.js", "../../ramda/es/partial.js", "../../ramda/es/partialRight.js", "../../ramda/es/partition.js", "../../ramda/es/path.js", "../../ramda/es/paths.js", "../../ramda/es/pathEq.js", "../../ramda/es/pathOr.js", "../../ramda/es/pathSatisfies.js", "../../ramda/es/pick.js", "../../ramda/es/pickAll.js", "../../ramda/es/pickBy.js", "../../ramda/es/prepend.js", "../../ramda/es/product.js", "../../ramda/es/useWith.js", "../../ramda/es/project.js", "../../ramda/es/internal/_promap.js", "../../ramda/es/internal/_xpromap.js", "../../ramda/es/promap.js", "../../ramda/es/propEq.js", "../../ramda/es/propIs.js", "../../ramda/es/propOr.js", "../../ramda/es/propSatisfies.js", "../../ramda/es/props.js", "../../ramda/es/range.js", "../../ramda/es/reduceRight.js", "../../ramda/es/reduceWhile.js", "../../ramda/es/reduced.js", "../../ramda/es/times.js", "../../ramda/es/repeat.js", "../../ramda/es/replace.js", "../../ramda/es/internal/_xscan.js", "../../ramda/es/scan.js", "../../ramda/es/sequence.js", "../../ramda/es/set.js", "../../ramda/es/sort.js", "../../ramda/es/sortBy.js", "../../ramda/es/sortWith.js", "../../ramda/es/split.js", "../../ramda/es/splitAt.js", "../../ramda/es/splitEvery.js", "../../ramda/es/splitWhen.js", "../../ramda/es/splitWhenever.js", "../../ramda/es/startsWith.js", "../../ramda/es/subtract.js", "../../ramda/es/swap.js", "../../ramda/es/symmetricDifference.js", "../../ramda/es/symmetricDifferenceWith.js", "../../ramda/es/takeLastWhile.js", "../../ramda/es/internal/_xtakeWhile.js", "../../ramda/es/takeWhile.js", "../../ramda/es/internal/_xtap.js", "../../ramda/es/tap.js", "../../ramda/es/internal/_isRegExp.js", "../../ramda/es/test.js", "../../ramda/es/andThen.js", "../../ramda/es/toLower.js", "../../ramda/es/toPairs.js", "../../ramda/es/toPairsIn.js", "../../ramda/es/toUpper.js", "../../ramda/es/transduce.js", "../../ramda/es/transpose.js", "../../ramda/es/traverse.js", "../../ramda/es/trim.js", "../../ramda/es/tryCatch.js", "../../ramda/es/unapply.js", "../../ramda/es/unary.js", "../../ramda/es/uncurryN.js", "../../ramda/es/unfold.js", "../../ramda/es/union.js", "../../ramda/es/internal/_xuniqWith.js", "../../ramda/es/uniqWith.js", "../../ramda/es/unionWith.js", "../../ramda/es/unless.js", "../../ramda/es/unnest.js", "../../ramda/es/until.js", "../../ramda/es/unwind.js", "../../ramda/es/valuesIn.js", "../../ramda/es/view.js", "../../ramda/es/when.js", "../../ramda/es/where.js", "../../ramda/es/whereAny.js", "../../ramda/es/whereEq.js", "../../ramda/es/without.js", "../../ramda/es/xor.js", "../../ramda/es/xprod.js", "../../ramda/es/zip.js", "../../ramda/es/zipObj.js", "../../ramda/es/zipWith.js", "../../ramda/es/thunkify.js", "../../graphql-request/src/defaultJsonSerializer.ts", "../../graphql-request/src/helpers.ts", "../../graphql-request/src/parseArgs.ts", "../../graphql/version.mjs", "../../graphql/jsutils/devAssert.mjs", "../../graphql/jsutils/isObjectLike.mjs", "../../graphql/jsutils/invariant.mjs", "../../graphql/language/location.mjs", "../../graphql/language/printLocation.mjs", "../../graphql/error/GraphQLError.mjs", "../../graphql/error/syntaxError.mjs", "../../graphql/language/ast.mjs", "../../graphql/language/directiveLocation.mjs", "../../graphql/language/kinds.mjs", "../../graphql/language/characterClasses.mjs", "../../graphql/language/blockString.mjs", "../../graphql/language/tokenKind.mjs", "../../graphql/language/lexer.mjs", "../../graphql/jsutils/inspect.mjs", "../../graphql/jsutils/instanceOf.mjs", "../../graphql/language/source.mjs", "../../graphql/language/parser.mjs", "../../graphql/jsutils/didYouMean.mjs", "../../graphql/jsutils/identityFunc.mjs", "../../graphql/jsutils/keyMap.mjs", "../../graphql/jsutils/keyValMap.mjs", "../../graphql/jsutils/mapValue.mjs", "../../graphql/jsutils/naturalCompare.mjs", "../../graphql/jsutils/suggestionList.mjs", "../../graphql/jsutils/toObjMap.mjs", "../../graphql/language/printString.mjs", "../../graphql/language/visitor.mjs", "../../graphql/language/printer.mjs", "../../graphql/utilities/valueFromASTUntyped.mjs", "../../graphql/type/assertName.mjs", "../../graphql/type/definition.mjs", "../../graphql/utilities/typeComparators.mjs", "../../graphql/type/scalars.mjs", "../../graphql/type/directives.mjs", "../../graphql/jsutils/isIterableObject.mjs", "../../graphql/utilities/astFromValue.mjs", "../../graphql/type/introspection.mjs", "../../graphql/utilities/typeFromAST.mjs", "../../graphql/language/predicates.mjs", "../../graphql/validation/rules/ExecutableDefinitionsRule.mjs", "../../graphql/validation/rules/FieldsOnCorrectTypeRule.mjs", "../../graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs", "../../graphql/validation/rules/KnownArgumentNamesRule.mjs", "../../graphql/validation/rules/KnownDirectivesRule.mjs", "../../graphql/validation/rules/KnownFragmentNamesRule.mjs", "../../graphql/validation/rules/KnownTypeNamesRule.mjs", "../../graphql/validation/rules/LoneAnonymousOperationRule.mjs", "../../graphql/validation/rules/LoneSchemaDefinitionRule.mjs", "../../graphql/validation/rules/MaxIntrospectionDepthRule.mjs", "../../graphql/validation/rules/NoFragmentCyclesRule.mjs", "../../graphql/validation/rules/NoUndefinedVariablesRule.mjs", "../../graphql/validation/rules/NoUnusedFragmentsRule.mjs", "../../graphql/validation/rules/NoUnusedVariablesRule.mjs", "../../graphql/utilities/sortValueNode.mjs", "../../graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs", "../../graphql/validation/rules/PossibleFragmentSpreadsRule.mjs", "../../graphql/validation/rules/PossibleTypeExtensionsRule.mjs", "../../graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs", "../../graphql/validation/rules/ScalarLeafsRule.mjs", "../../graphql/utilities/valueFromAST.mjs", "../../graphql/execution/values.mjs", "../../graphql/execution/collectFields.mjs", "../../graphql/validation/rules/SingleFieldSubscriptionsRule.mjs", "../../graphql/jsutils/groupBy.mjs", "../../graphql/validation/rules/UniqueArgumentDefinitionNamesRule.mjs", "../../graphql/validation/rules/UniqueArgumentNamesRule.mjs", "../../graphql/validation/rules/UniqueDirectiveNamesRule.mjs", "../../graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs", "../../graphql/validation/rules/UniqueEnumValueNamesRule.mjs", "../../graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs", "../../graphql/validation/rules/UniqueFragmentNamesRule.mjs", "../../graphql/validation/rules/UniqueInputFieldNamesRule.mjs", "../../graphql/validation/rules/UniqueOperationNamesRule.mjs", "../../graphql/validation/rules/UniqueOperationTypesRule.mjs", "../../graphql/validation/rules/UniqueTypeNamesRule.mjs", "../../graphql/validation/rules/UniqueVariableNamesRule.mjs", "../../graphql/validation/rules/ValuesOfCorrectTypeRule.mjs", "../../graphql/validation/rules/VariablesAreInputTypesRule.mjs", "../../graphql/validation/rules/VariablesInAllowedPositionRule.mjs", "../../graphql/validation/specifiedRules.mjs", "../../graphql/jsutils/memoize3.mjs", "../../graphql/execution/execute.mjs", "../../graphql/utilities/extendSchema.mjs", "../../graphql/utilities/findBreakingChanges.mjs", "../../graphql-request/src/resolveRequestDocument.ts", "../../graphql-request/src/types.ts", "../../graphql-request/src/index.ts", "../../graphql-request/src/graphql-ws.ts", "../../graphql-tag/node_modules/tslib/tslib.es6.mjs", "../../graphql-tag/src/index.ts", "../../@fuel-ts/address/src/configs.ts", "../../@fuel-ts/transactions/src/configs.ts", "../../@fuels/vm-asm/dist/web/index.mjs", "../../@fuel-ts/account/node_modules/@noble/hashes/src/_assert.ts", "../../@fuel-ts/account/node_modules/@noble/hashes/src/crypto.ts", "../../@fuel-ts/account/node_modules/@noble/hashes/src/utils.ts", "../../@fuel-ts/account/node_modules/@noble/hashes/src/_md.ts", "../../@fuel-ts/account/node_modules/@noble/hashes/src/sha256.ts", "../../@fuel-ts/account/node_modules/@noble/hashes/src/hmac.ts", "../../@fuel-ts/account/node_modules/@noble/curves/src/abstract/utils.ts", "../../@fuel-ts/account/node_modules/@noble/curves/src/abstract/modular.ts", "../../@fuel-ts/account/node_modules/@noble/curves/src/abstract/curve.ts", "../../@fuel-ts/account/node_modules/@noble/curves/src/abstract/weierstrass.ts", "../../@fuel-ts/account/node_modules/@noble/curves/src/_shortw_utils.ts", "../../@fuel-ts/account/node_modules/@noble/curves/src/abstract/hash-to-curve.ts", "../../@fuel-ts/account/node_modules/@noble/curves/src/secp256k1.ts", "../../@fuel-ts/account/src/providers/chains.ts", "../../@fuel-ts/account/src/assets/utils/network.ts", "../../@fuel-ts/account/src/assets/utils/url.ts", "../../@fuel-ts/account/src/assets/utils/resolveIconPaths.ts", "../../@fuel-ts/account/src/assets/utils/fuelAssetsBaseUrl.ts", "../../@fuel-ts/account/src/assets/assets.ts", "../../@fuel-ts/account/src/assets/asset-api.ts", "../../@fuel-ts/account/src/account.ts", "../../@fuel-ts/account/src/providers/coin-quantity.ts", "../../@fuel-ts/account/src/providers/provider.ts", "../../@fuel-ts/account/src/providers/__generated__/operations.ts", "../../@fuel-ts/account/src/providers/fuel-graphql-subscriber.ts", "../../@fuel-ts/account/src/providers/utils/handle-gql-error-message.ts", "../../@fuel-ts/account/src/providers/resource-cache.ts", "../../@fuel-ts/account/src/providers/transaction-request/input.ts", "../../@fuel-ts/account/src/providers/transaction-request/output.ts", "../../@fuel-ts/account/src/providers/transaction-request/transaction-request.ts", "../../@fuel-ts/account/src/providers/message.ts", "../../@fuel-ts/account/src/providers/resource.ts", "../../@fuel-ts/account/src/providers/utils/receipts.ts", "../../@fuel-ts/account/src/providers/utils/serialization.ts", "../../@fuel-ts/account/src/providers/utils/block-explorer.ts", "../../@fuel-ts/account/src/providers/utils/gas.ts", "../../@fuel-ts/account/src/providers/utils/json.ts", "../../@fuel-ts/account/src/providers/utils/extract-tx-error.ts", "../../@fuel-ts/account/src/providers/transaction-request/errors.ts", "../../@fuel-ts/account/src/providers/transaction-request/helpers.ts", "../../@fuel-ts/account/src/providers/transaction-request/witness.ts", "../../@fuel-ts/account/src/providers/transaction-request/blob-transaction-request.ts", "../../@fuel-ts/account/src/providers/transaction-request/hash-transaction.ts", "../../@fuel-ts/account/src/providers/transaction-request/create-transaction-request.ts", "../../@fuel-ts/account/src/providers/transaction-request/storage-slot.ts", "../../@fuel-ts/account/src/providers/transaction-request/script-transaction-request.ts", "../../@fuel-ts/account/src/providers/transaction-request/scripts.ts", "../../@fuel-ts/account/src/providers/transaction-request/upgrade-transaction-request.ts", "../../@fuel-ts/account/src/providers/transaction-request/upload-transaction-request.ts", "../../@fuel-ts/account/src/providers/transaction-request/types.ts", "../../@fuel-ts/account/src/providers/transaction-request/utils.ts", "../../@fuel-ts/account/src/providers/transaction-response/transaction-response.ts", "../../@fuel-ts/account/src/providers/transaction-summary/assemble-transaction-summary.ts", "../../@fuel-ts/account/src/providers/transaction-summary/calculate-tx-fee-for-summary.ts", "../../@fuel-ts/account/src/providers/transaction-summary/operations.ts", "../../@fuel-ts/account/src/providers/transaction-summary/input.ts", "../../@fuel-ts/account/src/providers/transaction-summary/output.ts", "../../@fuel-ts/account/src/providers/transaction-summary/types.ts", "../../@fuel-ts/account/src/providers/transaction-summary/receipt.ts", "../../@fuel-ts/account/src/providers/transaction-summary/status.ts", "../../@fuel-ts/account/src/providers/transaction-response/getAllDecodedLogs.ts", "../../@fuel-ts/account/src/providers/transaction-response/getDecodedLogs.ts", "../../@fuel-ts/account/src/providers/utils/auto-retry-fetch.ts", "../../@fuel-ts/account/src/providers/utils/helpers.ts", "../../@fuel-ts/account/src/providers/utils/validate-pagination-args.ts", "../../@fuel-ts/account/src/providers/transaction-summary/get-transaction-summary.ts", "../../@fuel-ts/account/src/providers/transaction-summary/assemble-transaction-summary-from-serialized.ts", "../../@fuel-ts/account/src/providers/utils/merge-quantities.ts", "../../@fuel-ts/account/src/types.ts", "../../@fuel-ts/account/src/utils/formatTransferToContractScriptData.ts", "../../@fuel-ts/account/src/wallet/base-wallet-unlocked.ts", "../../@fuel-ts/account/src/signer/signer.ts", "../../@fuel-ts/account/src/wallet/keystore-wallet.ts", "../../@fuel-ts/account/src/hdwallet/hdwallet.ts", "../../@fuel-ts/account/src/mnemonic/mnemonic.ts", "../../@fuel-ts/account/src/wordlists/words/english.ts", "../../@fuel-ts/account/src/wordlists/index.ts", "../../@fuel-ts/account/src/mnemonic/utils.ts", "../../@fuel-ts/account/src/wallet/wallets.ts", "../../@fuel-ts/account/src/wallet/wallet.ts", "../../@fuel-ts/account/src/wallet-manager/wallet-manager.ts", "../../@fuel-ts/account/src/wallet-manager/storages/memory-storage.ts", "../../@fuel-ts/account/src/wallet-manager/vaults/mnemonic-vault.ts", "../../@fuel-ts/account/src/wallet-manager/vaults/privatekey-vault.ts", "../../@fuel-ts/account/src/wallet-manager/types.ts", "../../@fuel-ts/account/src/predicate/predicate.ts", "../../@fuel-ts/account/src/utils/deployScriptOrPredicate.ts", "../../@fuel-ts/account/src/utils/predicate-script-loader-instructions.ts", "../../@fuel-ts/account/src/predicate/utils/getPredicateRoot.ts", "../../@fuel-ts/account/src/connectors/fuel.ts", "../../@fuel-ts/account/src/connectors/fuel-connector.ts", "../../@fuel-ts/account/src/connectors/types/connector-types.ts", "../../@fuel-ts/account/src/connectors/types/local-storage.ts", "../../@fuel-ts/account/src/connectors/utils/cache.ts", "../../@fuel-ts/account/src/connectors/utils/dispatch-fuel-connector-event.ts", "../../@fuel-ts/account/src/connectors/utils/promises.ts", "../../@fuel-ts/merkle/src/binary/binaryMerkleTree.ts", "../../@fuel-ts/merkle/src/common/common.ts", "../../@fuel-ts/merkle/src/binary/types/node.ts", "../../@fuel-ts/merkle/src/sparse/sparseMerkleTree.ts", "../../@fuel-ts/merkle/src/sparse/proofs.ts", "../../@fuel-ts/merkle/src/sparse/treeHasher.ts", "../../@fuel-ts/merkle/src/sparse/types/sparseCompactMerkleProof.ts", "../../@fuel-ts/merkle/src/sparse/types/sparseMerkleProof.ts", "../../@fuel-ts/merkle/src/sparse/utils.ts", "../../@fuel-ts/program/src/types.ts", "../../@fuel-ts/program/src/utils.ts", "../../@fuel-ts/program/src/functions/invocation-scope.ts", "../../@fuel-ts/program/src/functions/base-invocation-scope.ts", "../../@fuel-ts/program/src/contract-call-script.ts", "../../@fuel-ts/program/src/instruction-set.ts", "../../@fuel-ts/program/src/script-request.ts", "../../@fuel-ts/program/src/response.ts", "../../@fuel-ts/program/src/functions/multicall-scope.ts", "../../@fuel-ts/program/src/contract.ts", "../../@fuel-ts/script/src/script.ts", "../../@fuel-ts/script/src/script-invocation-scope.ts", "../../@fuel-ts/script/src/types.ts", "../../@fuel-ts/script/src/scripts.ts", "../../@fuel-ts/contract/src/contract-factory.ts", "../../@fuel-ts/contract/src/loader/loader-script.ts", "../../@fuel-ts/contract/src/loader/utils.ts", "../../@fuel-ts/contract/src/util.ts", "../../@fuel-ts/math/src/configs.ts", "../../@fuel-ts/account/src/configs.ts", "../../@fuel-ts/recipes/src/types/Src14OwnedProxy.ts", "../../@fuel-ts/recipes/src/types/Src14OwnedProxyFactory.ts", "../../fuels/src/index.ts", "../../fuels/src/cli/utils/createConfig.ts", "../../fuels/src/cli/types.ts"],
  "sourcesContent": ["(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {\n      Buffer = window.Buffer;\n    } else {\n      Buffer = require('buffer').Buffer;\n    }\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n      this.negative = 1;\n    }\n\n    if (start < number.length) {\n      if (base === 16) {\n        this._parseHex(number, start, endian);\n      } else {\n        this._parseBase(number, base, start);\n        if (endian === 'le') {\n          this._initArray(this.toArray(), base, endian);\n        }\n      }\n    }\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [number & 0x3ffffff];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [0];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this._strip();\n  };\n\n  function parseHex4Bits (string, index) {\n    var c = string.charCodeAt(index);\n    // '0' - '9'\n    if (c >= 48 && c <= 57) {\n      return c - 48;\n    // 'A' - 'F'\n    } else if (c >= 65 && c <= 70) {\n      return c - 55;\n    // 'a' - 'f'\n    } else if (c >= 97 && c <= 102) {\n      return c - 87;\n    } else {\n      assert(false, 'Invalid character in ' + string);\n    }\n  }\n\n  function parseHexByte (string, lowerBound, index) {\n    var r = parseHex4Bits(string, index);\n    if (index - 1 >= lowerBound) {\n      r |= parseHex4Bits(string, index - 1) << 4;\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start, endian) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    // 24-bits chunks\n    var off = 0;\n    var j = 0;\n\n    var w;\n    if (endian === 'be') {\n      for (i = number.length - 1; i >= start; i -= 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    } else {\n      var parseLength = number.length - start;\n      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    }\n\n    this._strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var b = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        b = c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        b = c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        b = c;\n      }\n      assert(c >= 0 && b < mul, 'Invalid character');\n      r += b;\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [0];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    this._strip();\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  function move (dest, src) {\n    dest.words = src.words;\n    dest.length = src.length;\n    dest.negative = src.negative;\n    dest.red = src.red;\n  }\n\n  BN.prototype._move = function _move (dest) {\n    move(dest, this);\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype._strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  // Check Symbol.for because not everywhere where Symbol defined\n  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility\n  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {\n    try {\n      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;\n    } catch (e) {\n      BN.prototype.inspect = inspect;\n    }\n  } else {\n    BN.prototype.inspect = inspect;\n  }\n\n  function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  }\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modrn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16, 2);\n  };\n\n  if (Buffer) {\n    BN.prototype.toBuffer = function toBuffer (endian, length) {\n      return this.toArrayLike(Buffer, endian, length);\n    };\n  }\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  var allocate = function allocate (ArrayType, size) {\n    if (ArrayType.allocUnsafe) {\n      return ArrayType.allocUnsafe(size);\n    }\n    return new ArrayType(size);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    this._strip();\n\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    var res = allocate(ArrayType, reqLength);\n    var postfix = endian === 'le' ? 'LE' : 'BE';\n    this['_toArrayLike' + postfix](res, byteLength);\n    return res;\n  };\n\n  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {\n    var position = 0;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position++] = word & 0xff;\n      if (position < res.length) {\n        res[position++] = (word >> 8) & 0xff;\n      }\n      if (position < res.length) {\n        res[position++] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position < res.length) {\n          res[position++] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position < res.length) {\n      res[position++] = carry;\n\n      while (position < res.length) {\n        res[position++] = 0;\n      }\n    }\n  };\n\n  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {\n    var position = res.length - 1;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position--] = word & 0xff;\n      if (position >= 0) {\n        res[position--] = (word >> 8) & 0xff;\n      }\n      if (position >= 0) {\n        res[position--] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position >= 0) {\n          res[position--] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position >= 0) {\n      res[position--] = carry;\n\n      while (position >= 0) {\n        res[position--] = 0;\n      }\n    }\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] >>> wbit) & 0x01;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this._strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this._strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this._strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    // Temporary disable, see https://github.com/indutny/bn.js/issues/211\n    // var fftm = new FFTM();\n    // return fftm.mulp(self, num, out);\n    return bigMulTo(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out._strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this._strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) <= num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this._strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this._strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q._strip();\n    }\n    a._strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modrn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modrn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modrn = function modrn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return isNegNum ? -acc : acc;\n  };\n\n  // WARNING: DEPRECATED\n  BN.prototype.modn = function modn (num) {\n    return this.modrn(num);\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    this._strip();\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this._strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is a BN v4 instance\n        r.strip();\n      } else {\n        // r is a BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n\n    move(a, a.umod(this.m)._forceRed(this));\n    return a;\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n", "import type { Versions } from './types';\n\nexport function getBuiltinVersions(): Versions {\n  return {\n    FUEL_CORE: '0.41.9',\n    FORC: '0.67.0',\n    FUELS: '0.100.3',\n  };\n}\n", "function parseVersion(version: string): { major: number; minor: number; patch: number } {\n  const [major, minor, patch] = version.split('.').map((v) => parseInt(v, 10));\n  return { major, minor, patch };\n}\n\nfunction versionDiffs(\n  version1: string,\n  version2: string\n): { major: number; minor: number; patch: number; fullVersionDiff: number } {\n  const semver1 = parseVersion(version1);\n  const semver2 = parseVersion(version2);\n  const major = semver1.major - semver2.major;\n  const minor = semver1.minor - semver2.minor;\n  const patch = semver1.patch - semver2.patch;\n  return {\n    major,\n    minor,\n    patch,\n    fullVersionDiff: major || minor || patch,\n  };\n}\n\nexport function gt(version1: string, version2: string): boolean {\n  const { fullVersionDiff } = versionDiffs(version1, version2);\n  return fullVersionDiff > 0;\n}\n\nexport function eq(version1: string, version2: string): boolean {\n  const { fullVersionDiff } = versionDiffs(version1, version2);\n  return fullVersionDiff === 0;\n}\n\nexport function gte(version1: string, version2: string): boolean {\n  const { fullVersionDiff } = versionDiffs(version1, version2);\n  return fullVersionDiff >= 0;\n}\n\nexport function majorEq(version1: string, version2: string): boolean {\n  const { major } = versionDiffs(version1, version2);\n  return major === 0;\n}\n\nexport function minorEq(version1: string, version2: string): boolean {\n  const { minor } = versionDiffs(version1, version2);\n  return minor === 0;\n}\n\nexport function patchEq(version1: string, version2: string): boolean {\n  const { patch } = versionDiffs(version1, version2);\n  return patch === 0;\n}\n", "import { getBuiltinVersions } from './getBuiltinVersions';\nimport { majorEq, minorEq, patchEq } from './semver';\n\nexport function checkFuelCoreVersionCompatibility(networkVersion: string) {\n  const { FUEL_CORE: supportedVersion } = getBuiltinVersions();\n\n  if (/^\\d+\\.\\d+\\.\\d+\\D+/m.test(networkVersion)) {\n    // eslint-disable-next-line no-console\n    console.warn(`You're running against an unreleased fuel-core version: ${networkVersion}. Things may work as expected, but it's not guaranteed. Please use a released version.      \nThis unreleased fuel-core build may include features and updates not yet supported by this version of the TS-SDK.`);\n  }\n\n  return {\n    supportedVersion,\n    isMajorSupported: majorEq(networkVersion, supportedVersion),\n    isMinorSupported: minorEq(networkVersion, supportedVersion),\n    isPatchSupported: patchEq(networkVersion, supportedVersion),\n  };\n}\n", "/*\n  1) Variables\n  ------------\n    `FUELS` — comes from `/packages/fuels/package.json`\n    `FUEL_CORE` — comes from `/internal/fuel-core/VERSION`\n    `FORC` — comes from `/internal/forc/VERSION`\n\n  3) Pre Build\n  ------------\n    There's a `prebuild` script in:\n     - packages/versions/package.json\n\n    Before build, it will call this file:\n      - packages/versions/scripts/replaceVersions.ts\n\n    Which will replace static versions at:\n      - packages/versions/src/lib/getBuiltinVersions.ts\n\n    If no env variables are set, it uses the current versions\n    from the original locations mentioned in the 1st step.\n\n  3)  CI\n  ------------\n    As part of the CI release (1) routine, the changes made\n    to the versions package by the `prebuild` routine will\n    be committed by the same script (2) that handles the\n    docs versioning.\n\n      - (1) <repoRoot>/.github/workflows/release.yaml\n      - (2) <repoRoot>/changeset-version-with-docs.ts\n\n  4) Build\n  ------------\n    By the time we get to the `build` step, everything is in\n    place already and ready to be built and released.\n*/\n\nimport { getBuiltinVersions } from './lib/getBuiltinVersions';\n\nexport const versions = getBuiltinVersions();\n\nexport * from './lib/types';\nexport * from './lib/checkFuelCoreVersionCompatibility';\nexport * from './lib/semver';\n", "/**\n * Represents the different error codes thrown by the SDK\n */\nexport enum ErrorCode {\n  // abi\n  NO_ABIS_FOUND = 'no-abis-found',\n  ABI_TYPES_AND_VALUES_MISMATCH = 'abi-types-and-values-mismatch',\n  ABI_MAIN_METHOD_MISSING = 'abi-main-method-missing',\n  INVALID_COMPONENT = 'invalid-component',\n  CONFIGURABLE_NOT_FOUND = 'configurable-not-found',\n  TYPE_NOT_FOUND = 'type-not-found',\n  LOG_TYPE_NOT_FOUND = 'log-type-not-found',\n  TYPE_NOT_SUPPORTED = 'type-not-supported',\n  INVALID_DECODE_VALUE = 'invalid-decode-value',\n  JSON_ABI_ERROR = 'json-abi-error',\n  TYPE_ID_NOT_FOUND = 'type-id-not-found',\n  BIN_FILE_NOT_FOUND = 'bin-file-not-found',\n  CODER_NOT_FOUND = 'coder-not-found',\n  INVALID_DATA = 'invalid-data',\n  FUNCTION_NOT_FOUND = 'function-not-found',\n  UNSUPPORTED_ENCODING_VERSION = 'unsupported-encoding-version',\n  TIMEOUT_EXCEEDED = 'timeout-exceeded',\n  CONFIG_FILE_NOT_FOUND = 'config-file-not-found',\n  CONFIG_FILE_ALREADY_EXISTS = 'config-file-already-exists',\n  WORKSPACE_NOT_DETECTED = 'workspace-not-detected',\n\n  // address\n  INVALID_ADDRESS = 'invalid-address',\n  INVALID_EVM_ADDRESS = 'invalid-evm-address',\n  INVALID_B256_ADDRESS = 'invalid-b256-address',\n\n  // provider\n  CHAIN_INFO_CACHE_EMPTY = 'chain-info-cache-empty',\n  NODE_INFO_CACHE_EMPTY = 'node-info-cache-empty',\n  MISSING_PROVIDER = 'missing-provider',\n  INVALID_PROVIDER = 'invalid-provider',\n  CONNECTION_REFUSED = 'connection-refused',\n  INVALID_URL = 'invalid-url',\n  UNSUPPORTED_FEATURE = 'unsupported-feature',\n\n  // wallet\n  INVALID_PUBLIC_KEY = 'invalid-public-key',\n  WALLET_MANAGER_ERROR = 'wallet-manager-error',\n  HD_WALLET_ERROR = 'hd-wallet-error',\n  MISSING_CONNECTOR = 'missing-connector',\n\n  // errors\n  PARSE_FAILED = 'parse-failed',\n  ENCODE_ERROR = 'encode-error',\n  DECODE_ERROR = 'decode-error',\n  ENV_DEPENDENCY_MISSING = 'env-dependency-missing',\n  INVALID_TTL = 'invalid-ttl',\n  INVALID_INPUT_PARAMETERS = 'invalid-input-parameters',\n  NOT_IMPLEMENTED = 'not-implemented',\n  NOT_SUPPORTED = 'not-supported',\n  CONVERTING_FAILED = 'converting-error',\n  ELEMENT_NOT_FOUND = 'element-not-found',\n  MISSING_REQUIRED_PARAMETER = 'missing-required-parameter',\n  INVALID_REQUEST = 'invalid-request',\n  INVALID_TRANSFER_AMOUNT = 'invalid-transfer-amount',\n  INSUFFICIENT_FUNDS_OR_MAX_COINS = 'not-enough-funds-or-max-coins-reached',\n\n  // crypto\n  INVALID_CREDENTIALS = 'invalid-credentials',\n\n  /** @deprecated This error code is no longer used */\n  HASHER_LOCKED = 'hasher-locked',\n\n  // transaction\n  GAS_PRICE_TOO_LOW = 'gas-price-too-low',\n  GAS_LIMIT_TOO_LOW = 'gas-limit-too-low',\n  MAX_FEE_TOO_LOW = 'max-fee-too-low',\n  TRANSACTION_NOT_FOUND = 'transaction-not-found',\n  TRANSACTION_FAILED = 'transaction-failed',\n  INVALID_CONFIGURABLE_CONSTANTS = 'invalid-configurable-constants',\n  INVALID_TRANSACTION_INPUT = 'invalid-transaction-input',\n  INVALID_TRANSACTION_OUTPUT = 'invalid-transaction-output',\n  INVALID_TRANSACTION_STATUS = 'invalid-transaction-status',\n  UNSUPPORTED_TRANSACTION_TYPE = 'unsupported-transaction-type',\n  TRANSACTION_ERROR = 'transaction-error',\n  INVALID_POLICY_TYPE = 'invalid-policy-type',\n  DUPLICATED_POLICY = 'duplicated-policy',\n  TRANSACTION_SQUEEZED_OUT = 'transaction-squeezed-out',\n  CONTRACT_SIZE_EXCEEDS_LIMIT = 'contract-size-exceeds-limit',\n  INVALID_CHUNK_SIZE_MULTIPLIER = 'invalid-chunk-size-multiplier',\n  MAX_INPUTS_EXCEEDED = 'max-inputs-exceeded',\n  FUNDS_TOO_LOW = 'funds-too-low',\n  MAX_OUTPUTS_EXCEEDED = 'max-outputs-exceeded',\n  ASSET_BURN_DETECTED = 'asset-burn-detected',\n\n  // receipt\n  INVALID_RECEIPT_TYPE = 'invalid-receipt-type',\n\n  // mnemonic\n  INVALID_WORD_LIST = 'invalid-word-list',\n  INVALID_MNEMONIC = 'invalid-mnemonic',\n  INVALID_ENTROPY = 'invalid-entropy',\n  INVALID_SEED = 'invalid-seed',\n  INVALID_CHECKSUM = 'invalid-checksum',\n\n  // wallet / account\n  INVALID_PASSWORD = 'invalid-password',\n  ACCOUNT_REQUIRED = 'account-required',\n  UNLOCKED_WALLET_REQUIRED = 'unlocked-wallet-required',\n\n  // asset\n  ASSET_NOT_FOUND = 'asset-not-found',\n\n  // bn\n  NUMBER_TOO_BIG = 'number-too-big',\n\n  // chain\n  ERROR_BUILDING_BLOCK_EXPLORER_URL = 'error-building-block-explorer-url',\n\n  // docs\n  VITEPRESS_PLUGIN_ERROR = 'vitepress-plugin-error',\n\n  // script\n  SCRIPT_REVERTED = 'script-reverted',\n  SCRIPT_RETURN_INVALID_TYPE = 'script-return-invalid-type',\n\n  // graphql\n  STREAM_PARSING_ERROR = 'stream-parsing-error',\n\n  // launchNode\n  NODE_LAUNCH_FAILED = 'node-launch-failed',\n\n  // Unknown\n  UNKNOWN = 'unknown',\n}\n", "import { versions } from '@fuel-ts/versions';\n\nimport { ErrorCode } from './error-codes';\n\nexport class FuelError extends Error {\n  static readonly CODES = ErrorCode;\n  readonly VERSIONS = versions;\n  readonly metadata: Record<string, unknown>;\n  readonly rawError: unknown;\n\n  static parse(e: unknown) {\n    const error = e as FuelError;\n\n    if (error.code === undefined) {\n      throw new FuelError(\n        ErrorCode.PARSE_FAILED,\n        \"Failed to parse the error object. The required 'code' property is missing.\"\n      );\n    }\n\n    const enumValues = Object.values(ErrorCode);\n    const codeIsKnown = enumValues.includes(error.code);\n\n    if (!codeIsKnown) {\n      throw new FuelError(\n        ErrorCode.PARSE_FAILED,\n        `Unknown error code: ${error.code}. Accepted codes: ${enumValues.join(', ')}.`\n      );\n    }\n\n    return new FuelError(error.code, error.message);\n  }\n\n  code: ErrorCode;\n\n  constructor(\n    code: ErrorCode,\n    message: string,\n    metadata: Record<string, unknown> = {},\n    rawError: unknown = null\n  ) {\n    super(message);\n    this.code = code;\n    this.name = 'FuelError';\n    this.metadata = metadata;\n    this.rawError = rawError;\n  }\n\n  toObject() {\n    const { code, name, message, metadata, VERSIONS, rawError } = this;\n    return { code, name, message, metadata, VERSIONS, rawError };\n  }\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport BnJs from 'bn.js';\n\nimport { DEFAULT_DECIMAL_UNITS, DEFAULT_MIN_PRECISION, DEFAULT_PRECISION } from './configs';\nimport type { FormatConfig } from './types';\n\ntype CompareResult = -1 | 0 | 1;\nexport type BNInput = number | string | number[] | Uint8Array | Buffer | BnJs;\n\ninterface BNHelper {\n  caller(v: BNInput, methodName: string): BN | boolean | CompareResult;\n  toHex: (bytesPadding?: number) => string;\n  toBytes: (bytesPadding?: number) => Uint8Array;\n  toJSON: () => string;\n}\ninterface BNInputOverrides {\n  add: (v: BNInput) => BN;\n  pow: (v: BNInput) => BN;\n  sub: (v: BNInput) => BN;\n  div: (v: BNInput) => BN;\n  mul: (v: BNInput) => BN;\n  mod: (v: BNInput) => BN;\n  divRound: (v: BNInput) => BN;\n  lt: (v: BNInput) => boolean;\n  lte: (v: BNInput) => boolean;\n  gt: (v: BNInput) => boolean;\n  gte: (v: BNInput) => boolean;\n  eq: (v: BNInput) => boolean;\n  cmp: (v: BNInput) => CompareResult;\n}\ninterface BNOverrides {\n  sqr: () => BN;\n  neg: () => BN;\n  abs: () => BN;\n  toTwos: (width: number) => BN;\n  fromTwos: (width: number) => BN;\n}\ninterface BNHiddenTypes {\n  mulTo: (num: BN, out: BN) => BN;\n  divmod: (num: BNInput, mode?: string, positive?: boolean) => { mod: BN; div: BN };\n}\ntype BNInputOverridesKeys = keyof BNInputOverrides;\n\nexport class BN extends BnJs implements BNInputOverrides, BNHiddenTypes, BNHelper, BNOverrides {\n  MAX_U64 = '0xFFFFFFFFFFFFFFFF';\n\n  constructor(value?: BNInput | null, base?: number | 'hex', endian?: BnJs.Endianness) {\n    let bnValue = value;\n    let bnBase = base;\n\n    if (BN.isBN(value)) {\n      bnValue = value.toArray();\n    }\n    // trim '0x' from hex strings as BN doesn't support it - https://github.com/ChainSafe/web3.js/issues/3847\n    else if (typeof value === 'string' && value.slice(0, 2) === '0x') {\n      bnValue = value.substring(2);\n      bnBase = base || 'hex';\n    }\n\n    if (typeof bnValue === 'number' && bnValue > Number.MAX_SAFE_INTEGER) {\n      throw new FuelError(\n        ErrorCode.NUMBER_TOO_BIG,\n        `Value ${bnValue} is too large to be represented as a number, use string instead.`\n      );\n    }\n\n    super(bnValue == null ? 0 : bnValue, bnBase, endian);\n  }\n\n  // ANCHOR: HELPERS\n  // make sure we always include `0x` in hex strings\n  override toString(base?: number | 'hex', length?: number) {\n    const output = super.toString(base, length);\n\n    if (base === 16 || base === 'hex') {\n      return `0x${output}`;\n    }\n\n    return output;\n  }\n\n  toHex(bytesPadding?: number): string {\n    const bytes = bytesPadding || 0;\n    const bytesLength = bytes * 2;\n\n    if (this.isNeg()) {\n      throw new FuelError(ErrorCode.CONVERTING_FAILED, 'Cannot convert negative value to hex.');\n    }\n    if (bytesPadding && this.byteLength() > bytesPadding) {\n      throw new FuelError(\n        ErrorCode.CONVERTING_FAILED,\n        `Provided value ${this} is too large. It should fit within ${bytesPadding} bytes.`\n      );\n    }\n\n    return this.toString(16, bytesLength);\n  }\n\n  toBytes(bytesPadding?: number): Uint8Array {\n    if (this.isNeg()) {\n      throw new FuelError(ErrorCode.CONVERTING_FAILED, 'Cannot convert negative value to bytes.');\n    }\n\n    return Uint8Array.from(this.toArray(undefined, bytesPadding));\n  }\n\n  override toJSON(): string {\n    return this.toString(16);\n  }\n\n  override valueOf(): string {\n    return this.toString();\n  }\n\n  format(options?: FormatConfig): string {\n    const {\n      units = DEFAULT_DECIMAL_UNITS,\n      precision: initialPrecision = DEFAULT_PRECISION,\n      minPrecision: initialMinPrecision = DEFAULT_MIN_PRECISION,\n    } = options || {};\n\n    // If units is 0, return the whole number formatted with commas\n    if (units === 0) {\n      return this.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    }\n\n    // Adjust precision and minPrecision\n    // TODO: This really should throw an error because you can't have a precision less than the minPrecision but this would be a breaking change\n    const minPrecision =\n      initialMinPrecision > initialPrecision ? initialPrecision : initialMinPrecision;\n    const precision =\n      initialPrecision > initialMinPrecision ? initialPrecision : initialMinPrecision;\n\n    const formattedUnits = this.formatUnits(units);\n    const [integerPart, fractionalPart = ''] = formattedUnits.split('.');\n\n    const formattedInteger = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n    // If precision is 0, return only the integer part\n    if (precision === 0) {\n      return formattedInteger;\n    }\n\n    // Remove trailing zeros and apply precision\n    let formattedFractional = fractionalPart.replace(/0+$/, '');\n\n    // Always return the first non-zero number if it exceeds the precision and the integer part is zero\n    if (formattedFractional.length > precision) {\n      if (integerPart === '0') {\n        const firstNonZeroIndex = formattedFractional.search(/[1-9]/);\n        if (firstNonZeroIndex >= 0 && firstNonZeroIndex < precision) {\n          formattedFractional = formattedFractional.slice(0, precision);\n        } else {\n          formattedFractional = formattedFractional.slice(0, firstNonZeroIndex + 1);\n        }\n      } else {\n        formattedFractional = formattedFractional.slice(0, precision);\n      }\n    } else {\n      formattedFractional = formattedFractional.slice(0, precision);\n    }\n\n    // Ensure we meet the minimum precision\n    if (formattedFractional.length < minPrecision) {\n      formattedFractional = formattedFractional.padEnd(minPrecision, '0');\n    }\n\n    // If after removing trailing zeros, the fractional part is empty and minPrecision is 0, return only the integer part\n    if (formattedFractional === '' && minPrecision === 0) {\n      return formattedInteger;\n    }\n\n    // Only add the decimal point and fractional part if there's a fractional part\n    return formattedFractional ? `${formattedInteger}.${formattedFractional}` : formattedInteger;\n  }\n\n  formatUnits(units: number = DEFAULT_DECIMAL_UNITS): string {\n    const valueString = this.toString();\n    const valueLength = valueString.length;\n\n    if (valueLength <= units) {\n      const paddedZeros = '0'.repeat(units - valueLength);\n      return `0.${paddedZeros}${valueString}`;\n    }\n\n    const integerPart = valueString.slice(0, valueLength - units);\n    const fractionalPart = valueString.slice(valueLength - units);\n\n    return `${integerPart}.${fractionalPart}`;\n  }\n  // END ANCHOR: HELPERS\n\n  // ANCHOR: OVERRIDES to accept better inputs\n  override add(v: BNInput): BN {\n    return this.caller(v, 'add') as BN;\n  }\n\n  override pow(v: BNInput): BN {\n    return this.caller(v, 'pow') as BN;\n  }\n\n  override sub(v: BNInput): BN {\n    return this.caller(v, 'sub') as BN;\n  }\n\n  override div(v: BNInput): BN {\n    return this.caller(v, 'div') as BN;\n  }\n\n  override mul(v: BNInput): BN {\n    return this.caller(v, 'mul') as BN;\n  }\n\n  override mod(v: BNInput): BN {\n    return this.caller(v, 'mod') as BN;\n  }\n\n  override divRound(v: BNInput): BN {\n    return this.caller(v, 'divRound') as BN;\n  }\n\n  override lt(v: BNInput): boolean {\n    return this.caller(v, 'lt') as boolean;\n  }\n\n  override lte(v: BNInput): boolean {\n    return this.caller(v, 'lte') as boolean;\n  }\n\n  override gt(v: BNInput): boolean {\n    return this.caller(v, 'gt') as boolean;\n  }\n\n  override gte(v: BNInput): boolean {\n    return this.caller(v, 'gte') as boolean;\n  }\n\n  override eq(v: BNInput): boolean {\n    return this.caller(v, 'eq') as boolean;\n  }\n\n  override cmp(v: BNInput): CompareResult {\n    return this.caller(v, 'cmp') as CompareResult;\n  }\n  // END ANCHOR: OVERRIDES to accept better inputs\n\n  // ANCHOR: OVERRIDES to output our BN type\n  override sqr(): BN {\n    return new BN(super.sqr().toArray());\n  }\n\n  override neg(): BN {\n    return new BN(super.neg().toArray());\n  }\n\n  override abs(): BN {\n    return new BN(super.abs().toArray());\n  }\n\n  override toTwos(width: number): BN {\n    return new BN(super.toTwos(width).toArray());\n  }\n\n  override fromTwos(width: number): BN {\n    return new BN(super.fromTwos(width).toArray());\n  }\n  // END ANCHOR: OVERRIDES to output our BN type\n\n  // ANCHOR: OVERRIDES to avoid losing references\n  caller(v: BNInput, methodName: BNInputOverridesKeys): BN | boolean | CompareResult {\n    const output = super[methodName](new BN(v));\n\n    if (BN.isBN(output)) {\n      return new BN(output.toArray());\n    }\n\n    if (typeof output === 'boolean') {\n      return output as boolean;\n    }\n\n    return output as CompareResult;\n  }\n\n  override clone() {\n    return new BN(this.toArray());\n  }\n\n  mulTo(num: BN, out: BN) {\n    const output: BnJs = (new BnJs(this.toArray()) as BN).mulTo(num, out);\n\n    return new BN(output.toArray());\n  }\n\n  override egcd(p: BnJs) {\n    const { a, b, gcd } = new BnJs(this.toArray()).egcd(p);\n\n    return {\n      a: new BN(a.toArray()),\n      b: new BN(b.toArray()),\n      gcd: new BN(gcd.toArray()),\n    };\n  }\n\n  override divmod(num: BNInput, mode?: string, positive?: boolean): { mod: BN; div: BN } {\n    const { div, mod } = (new BnJs(this.toArray()) as BN).divmod(new BN(num), mode, positive);\n\n    return {\n      div: new BN(div?.toArray()),\n      mod: new BN(mod?.toArray()),\n    };\n  }\n\n  maxU64(): BN {\n    return this.gte(this.MAX_U64) ? new BN(this.MAX_U64) : this;\n  }\n\n  max(num: BNInput): BN {\n    return this.gte(num) ? new BN(num) : this;\n  }\n\n  normalizeZeroToOne(): BN {\n    return this.isZero() ? new BN(1) : this;\n  }\n  // END ANCHOR: OVERRIDES to avoid losing references\n}\n\n// functional shortcut to create BN\nexport const bn = (value?: BNInput | null, base?: number | 'hex', endian?: BnJs.Endianness) =>\n  new BN(value, base, endian);\n\nbn.parseUnits = (value: string, units: number = DEFAULT_DECIMAL_UNITS): BN => {\n  const valueToParse = value === '.' ? '0.' : value;\n  const [valueUnits = '0', valueDecimals = '0'] = valueToParse.split('.');\n  const length = valueDecimals.length;\n\n  if (units === 0) {\n    const valueWithoutDecimals = valueToParse.replace(',', '').split('.')[0];\n    return bn(valueWithoutDecimals);\n  }\n\n  if (length > units) {\n    throw new FuelError(\n      ErrorCode.CONVERTING_FAILED,\n      `Decimal can't have more than ${units} digits.`\n    );\n  }\n\n  const decimals = Array.from({ length: units }).fill('0');\n  decimals.splice(0, length, valueDecimals);\n  const amount = `${valueUnits.replaceAll(',', '')}${decimals.join('')}`;\n  return bn(amount);\n};\n", "export const DEFAULT_PRECISION = 9;\nexport const DEFAULT_MIN_PRECISION = 3;\nexport const DEFAULT_DECIMAL_UNITS = 9;\n\n// Decimal units on the Fuel Network\nexport const DECIMAL_FUEL = 9;\n\n// Decimal units on the Ethereum network\nexport const DECIMAL_WEI = 18;\nexport const DECIMAL_KWEI = 15;\nexport const DECIMAL_MWEI = 12;\nexport const DECIMAL_GWEI = 9;\n", "import { DEFAULT_PRECISION, DEFAULT_MIN_PRECISION } from './configs';\nimport type { ToFixedConfig } from './types';\n\nexport function toFixed(value?: string | number, options?: ToFixedConfig) {\n  const { precision = DEFAULT_PRECISION, minPrecision = DEFAULT_MIN_PRECISION } = options || {};\n\n  const [valueUnits = '0', valueDecimals = '0'] = String(value || '0.0').split('.');\n  const groupRegex = /(\\d)(?=(\\d{3})+\\b)/g;\n  const units = valueUnits.replace(groupRegex, '$1,');\n  let decimals = valueDecimals.slice(0, precision);\n\n  // strip traling zeros limited by minPrecision\n  if (minPrecision < precision) {\n    const trimmedDecimal = decimals.match(/.*[1-9]{1}/);\n    const lastNonZeroIndex = trimmedDecimal?.[0].length || 0;\n    const keepChars = Math.max(minPrecision, lastNonZeroIndex);\n    decimals = decimals.slice(0, keepChars);\n  }\n\n  const decimalPortion = decimals ? `.${decimals}` : '';\n  return `${units}${decimalPortion}`;\n}\n", "import type { BNInput } from './bn';\nimport { bn } from './bn';\nimport type { FormatConfig } from './types';\n\n/**\n * Functional shortcuts\n */\n\n// Shortcut to bn(value).toNumber\nexport function toNumber(value: BNInput): number {\n  return bn(value).toNumber();\n}\n\n// Shortcut to bn(value).toHex\nexport function toHex(value: BNInput, bytesPadding?: number): string {\n  return bn(value).toHex(bytesPadding);\n}\n\n// Shortcut to bn(value).toBytes\nexport function toBytes(value: BNInput, bytesPadding?: number): Uint8Array {\n  return bn(value).toBytes(bytesPadding);\n}\n\n// Shortcut to bn.(value).formatUnits\nexport function formatUnits(value: BNInput, units?: number): string {\n  return bn(value).formatUnits(units);\n}\n\n// Shortcut to bn.(value).format\nexport function format(value: BNInput, options?: FormatConfig): string {\n  return bn(value).format(options);\n}\n", "import type { BN } from './bn';\nimport { bn } from './bn';\nimport type { BigNumberish } from './types';\n\nexport function max(...numbers: Array<BigNumberish>): BN {\n  return numbers.reduce<BN>((prev, cur) => (bn(cur).gt(prev) ? bn(cur) : prev), bn(0));\n}\n\nexport function multiply(...numbers: Array<BigNumberish>): BN {\n  return bn(Math.ceil(numbers.reduce<BN>((a, b) => bn(a).mul(b), bn(1)).toNumber()));\n}\n", "// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexport var FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? (st.l ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 20) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return wk(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) {\n        if (ev.data.length) {\n            strm.push(ev.data[0], ev.data[1]);\n            postMessage([ev.data[0].length]);\n        }\n        else\n            strm.flush();\n    };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, flush, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else if (dat.length == 1) {\n            strm.queuedSize -= dat[0];\n            if (strm.ondrain)\n                strm.ondrain(dat[0]);\n        }\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.queuedSize = 0;\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        strm.queuedSize += d.length;\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n    if (flush) {\n        strm.flush = function () { w.postMessage([]); };\n    }\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            this.b.set(chunk.subarray(0, split), this.s.z);\n            this.s.z = this.b.length;\n            this.p(this.b, false);\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * deflated output for small inputs.\n     */\n    Deflate.prototype.flush = function () {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        this.p(this.b, false);\n        this.s.w = this.s.i, this.s.i -= 2;\n    };\n    return Deflate;\n}());\nexport { Deflate };\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6, 1);\n    }\n    return AsyncDeflate;\n}());\nexport { AsyncDeflate };\nexport function deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nexport function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexport { Inflate };\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7, 0);\n    }\n    return AsyncInflate;\n}());\nexport { AsyncInflate };\nexport function inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * GZIPped output for small inputs.\n     */\n    Gzip.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Gzip;\n}());\nexport { Gzip };\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8, 1);\n    }\n    return AsyncGzip;\n}());\nexport { AsyncGzip };\nexport function gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nexport function gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l && !final) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexport { Gunzip };\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, 0, function (offset) { return _this.onmember && _this.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexport { AsyncGunzip };\nexport function gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * zlibbed output for small inputs.\n     */\n    Zlib.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Zlib;\n}());\nexport { Zlib };\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10, 1);\n    }\n    return AsyncZlib;\n}());\nexport { AsyncZlib };\nexport function zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nexport function zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexport { Unzlib };\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11, 0);\n    }\n    return AsyncUnzlib;\n}());\nexport { AsyncUnzlib };\nexport function unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzip as compress, AsyncGzip as AsyncCompress };\nexport { gzipSync as compressSync, Gzip as Compress };\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.o = StrmOpt.call(this, opts, cb) || {};\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n    }\n    // init substream\n    // overriden by AsyncDecompress\n    Decompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (dat, final) {\n            _this.ondata(dat, final);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o)\n                        : new this.Z(this.o);\n                this.i();\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexport { Decompress };\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        Decompress.call(this, opts, cb);\n        this.queuedSize = 0;\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n    }\n    AsyncDecompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        };\n        this.s.ondrain = function (size) {\n            _this.queuedSize -= size;\n            if (_this.ondrain)\n                _this.ondrain(size);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        this.queuedSize += chunk.length;\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexport { AsyncDecompress };\nexport function decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexport { DecodeUTF8 };\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexport { EncodeUTF8 };\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nexport function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nexport function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexport { ZipPassThrough };\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexport { ZipDeflate };\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexport { AsyncZipDeflate };\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this.ondata(err, dat, final);\n                    _this.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this.d & 1))\n                        return;\n                    _this.u.splice(-1, 1);\n                    _this.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexport { Zip };\nexport function zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nexport function zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexport { UnzipPassThrough };\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this = this;\n        this.i = new Inflate(function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexport { UnzipInflate };\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexport { AsyncUnzipInflate };\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this.k[0] == chks_3 && _this.c)\n                                        _this.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexport { Unzip };\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nexport function unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    // Synchronously decompress under 512KB, or barely-compressed data\n                    if (su < 524288 || sc > 0.8 * su) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nexport function unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\n", "export const capitalizeString = (str: string) => {\n  if (!str.length) {\n    return str;\n  }\n  return str[0].toUpperCase() + str.slice(1);\n};\n", "/**\n * Function to take a byte array and split into chunks of a given size\n *\n * @param bytes - The byte array to chunk\n * @param chunkSize - The size of each chunk\n * @returns An array of byte arrays of a specified size\n */\nexport const chunkAndPadBytes = (bytes: Uint8Array, chunkSize: number): Uint8Array[] => {\n  const chunks: Uint8Array[] = [];\n\n  for (let offset = 0; offset < bytes.length; offset += chunkSize) {\n    const chunk = new Uint8Array(chunkSize);\n    chunk.set(bytes.slice(offset, offset + chunkSize));\n    chunks.push(chunk);\n  }\n\n  const lastChunk = chunks[chunks.length - 1];\n  const remainingBytes = bytes.length % chunkSize;\n  const paddedChunkLength = remainingBytes + ((8 - (remainingBytes % 8)) % 8);\n  const newChunk = lastChunk.slice(0, paddedChunkLength);\n  chunks[chunks.length - 1] = newChunk;\n\n  return chunks;\n};\n", "import { FuelError, ErrorCode } from '@fuel-ts/errors';\n\nexport type BytesLike = Uint8Array | string;\n\n/**\n * Get a typed Uint8Array from a BytesLike object.\n *\n * @param value - the BytesLike data.\n * @param name - a display name for the error result.\n * @param copy - create a copy of the original data (if applicable).\n * @returns - a typed Uint8Array.\n */\nexport const arrayify = (value: BytesLike, name?: string, copy: boolean = true): Uint8Array => {\n  if (value instanceof Uint8Array) {\n    if (copy) {\n      return new Uint8Array(value);\n    }\n    return value;\n  }\n\n  if (typeof value === 'string' && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {\n    const result = new Uint8Array((value.length - 2) / 2);\n    let offset = 2;\n    for (let i = 0; i < result.length; i++) {\n      result[i] = parseInt(value.substring(offset, offset + 2), 16);\n      offset += 2;\n    }\n    return result;\n  }\n\n  const nameMessage = name ? ` ${name} -` : '';\n  const message = `invalid data:${nameMessage} ${value}\\nIf you are attempting to transform a hex value, please make sure it is being passed as a string and wrapped in quotes.`;\n  throw new FuelError(ErrorCode.INVALID_DATA, message);\n};\n", "import { arrayify } from './arrayify';\nimport type { BytesLike } from './arrayify';\n\n/**\n * Concatenates multiple Uint8Arrays into a single Uint8Array.\n *\n * @param arrays - The arrays to concatenate.\n * @returns - The concatenated array.\n */\nexport const concatBytes = (\n  arrays: ReadonlyArray<Uint8Array> | ReadonlyArray<number[]>\n): Uint8Array => {\n  const byteArrays = arrays.map((array) => {\n    if (array instanceof Uint8Array) {\n      return array;\n    }\n    return Uint8Array.from(array);\n  });\n\n  const totalSize = byteArrays.reduce((accum, item) => accum + item.length, 0);\n  const concatenated = new Uint8Array(totalSize);\n\n  byteArrays.reduce((offset, object) => {\n    concatenated.set(object, offset);\n    return offset + object.length;\n  }, 0);\n\n  return concatenated;\n};\n\n/**\n * Concatenates multiple BytesLike into a single Uint8Array.\n *\n * @param arrays - The arrays to concatenate.\n * @returns - The concatenated array.\n */\nexport const concat = (arrays: ReadonlyArray<BytesLike>): Uint8Array => {\n  const bytes = arrays.map((v) => arrayify(v));\n\n  return concatBytes(bytes);\n};\n", "import { arrayify } from './arrayify';\nimport type { BytesLike } from './arrayify';\n\nconst HexCharacters: string = '0123456789abcdef';\n\n/**\n *  Returns a hex representation of the inputted bytes.\n */\nexport function hexlify(data: BytesLike): string {\n  const bytes = arrayify(data);\n\n  let result = '0x';\n  for (let i = 0; i < bytes.length; i++) {\n    const v = bytes[i];\n    result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n  }\n  return result;\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\n\n/**\n * Converts `some.string-value` into `SomeStringValue`.\n *\n * Examples:\n *  my-simple.test —— MySimpleTest\n *  myFile.ts —— MyFileTs\n *  my-abi.json —— MyAbiJson\n */\nexport const normalizeString = (str: string): string => {\n  const transformations: ((s: string) => string)[] = [\n    (s) => s.replace(/\\s+/g, '-'), // spaces to -\n    (s) => s.replace(/\\./g, '-'), // dots to -\n    (s) => s.replace(/_/g, '-'), // underscore to -\n    (s) => s.replace(/-[a-z]/g, (match) => match.slice(-1).toUpperCase()), // delete '-' and capitalize the letter after them\n    (s) => s.replace(/-/g, ''), // delete any '-' left\n    (s) => s.replace(/^\\d+/, ''), // removes leading digits\n    (s) => s[0].toUpperCase() + s.slice(1), // capitalize first letter\n  ];\n\n  const output = transformations.reduce((s, t) => t(s), str);\n\n  if (output === '') {\n    const errMsg = `The provided string '${str}' results in an empty output after`.concat(\n      ` normalization, therefore, it can't normalize string.`\n    );\n    throw new FuelError(ErrorCode.PARSE_FAILED, errMsg);\n  }\n\n  return output;\n};\n", "/**\n * Tai64 timestamp.\n */\ntype Tai64Timestamp = string;\n\n/**\n * This constant is used to calculate the offset between the Unix epoch and the TAI64 epoch.\n * It allows for a **rough** conversion between the two time formats.\n *\n * // Value expires on:  28 June 2024\n * {@link https://data.iana.org/time-zones/data/leap-seconds.list}\n * {@link https://github.com/hl2/tai64/blob/master/src/leapSeconds.ts}\n */\nconst TAI64_LEAP_SECONDS: number = 37;\n\n/**\n * Tai64 (Temps Atomique International) is a time format\n *\n * The offset between the Unix epoch and the TAI64 epoch.\n * The TAI64 epoch is 2^62 nanoseconds after the Unix epoch (+ the offset of \"leap seconds\" relevant to the date).\n *\n * {@link https://cr.yp.to/libtai/tai64.html}\n * {@link https://cr.yp.to/proto/tai64.txt}\n */\nconst TAI64_UNIX_OFFSET: bigint = BigInt(2 ** 62) + BigInt(TAI64_LEAP_SECONDS);\n\n/**\n * Converts milliseconds to seconds and vice versa.\n *\n * @param ms - milliseconds to convert\n * @returns seconds\n */\nconst msToSeconds = (ms: number): number => Math.floor(ms / 1000);\n\n/**\n * Converts seconds to milliseconds and vice versa.\n *\n * @param seconds - seconds to convert\n * @returns milliseconds\n */\nconst secondsToMs = (seconds: number): number => seconds * 1000;\n\n/**\n * Converts Tai64 (seconds) time units to UNIX (seconds) time units.\n *\n * @param tai64 - Tai64 timestamp\n * @returns Unix seconds timestamp\n */\nconst tai64ToUnixSeconds = (tai64: Tai64Timestamp): number =>\n  Number(BigInt(tai64) - TAI64_UNIX_OFFSET);\n\n/**\n * Converts Unix (seconds) to Tai64 (seconds).\n *\n * @param unixSeconds - unix seconds timestamp\n * @returns Tai64 timestamp\n */\nconst unixSecondsToTai64 = (unixSeconds: number): string =>\n  String(BigInt(unixSeconds) + TAI64_UNIX_OFFSET);\n\n/**\n * Helper to convert Tai64 (seconds) time units to UNIX (milliseconds) time units and vice.\n *\n * @param tai64 - Tai64 timestamp\n * @returns Unix milliseconds timestamp\n */\nconst tai64ToUnixMilliseconds = (tai64: Tai64Timestamp): number =>\n  secondsToMs(tai64ToUnixSeconds(tai64));\n\n/**\n * This class is used to represent a date and time in the Tai64 format.\n *\n * ```typescript\n * import { DateTime } from 'fuels';\n *\n * // Constants\n * const tai64 = '4611686020108779340';\n * const unixMilliseconds = 1681391398000;\n * const seconds = 1681391398;\n *\n * // Instantiation\n * let date: DateTime = DateTime.now();\n * date = DateTime.fromTai64(tai64);\n * date = DateTime.fromUnixMilliseconds(unixMilliseconds);\n * date = DateTime.fromUnixSeconds(seconds);\n *\n * // Utility functions\n * tai64.toTai64() // '4611686020108779340'\n * milliseconds.toUnixMilliseconds() // 1681391398000\n * seconds.toUnixSeconds() // 1681391398\n *\n * // All date methods are available\n * const now: Date = DateTime.now();\n * now.toISOString(); // '2023-04-13T13:09:58.000Z'\n * now.getTime(); // 1681391398000\n * ```\n */\nexport class DateTime extends Date implements Date {\n  static TAI64_NULL: Tai64Timestamp = '';\n\n  /**\n   * Generates a new DateTime instance from a Tai64 timestamp.\n   *\n   * @param tai64 - Tai64 timestamp\n   * @returns a new DateTime instance\n   */\n  static fromTai64(tai64: Tai64Timestamp): DateTime {\n    return new DateTime(tai64ToUnixMilliseconds(tai64));\n  }\n\n  /**\n   * @param unixMilliseconds - unix milliseconds timestamp\n   * @returns a new DateTime instance\n   */\n  static fromUnixMilliseconds(unixMilliseconds: number): DateTime {\n    return new DateTime(unixMilliseconds);\n  }\n\n  /**\n   * @param unixSeconds - unix seconds timestamp\n   * @returns a new DateTime instance\n   */\n  static fromUnixSeconds(unixSeconds: number): DateTime {\n    return new DateTime(secondsToMs(unixSeconds));\n  }\n\n  /**\n   * Hide the constructor to prevent direct instantiation.\n   */\n  private constructor(date: Date | number | string) {\n    super(date);\n  }\n\n  /**\n   * Returns the Tai64 timestamp.\n   *\n   * @returns the Tai64 timestamp\n   */\n  toTai64(): Tai64Timestamp {\n    return unixSecondsToTai64(this.toUnixSeconds());\n  }\n\n  /**\n   * @returns the unix milliseconds timestamp\n   */\n  toUnixMilliseconds(): number {\n    return this.getTime();\n  }\n\n  /**\n   * @returns the unix seconds timestamp\n   */\n  toUnixSeconds(): number {\n    return msToSeconds(this.getTime());\n  }\n}\n", "export function sleep(time: number) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(true);\n    }, time);\n  });\n}\n", "{\n  \"chain_name\": \"local_testnet\",\n  \"consensus_parameters\": {\n    \"V2\": {\n      \"tx_params\": {\n        \"V1\": {\n          \"max_inputs\": 255,\n          \"max_outputs\": 255,\n          \"max_witnesses\": 255,\n          \"max_gas_per_tx\": 30000000,\n          \"max_size\": 112640,\n          \"max_bytecode_subsections\": 256\n        }\n      },\n      \"predicate_params\": {\n        \"V1\": {\n          \"max_predicate_length\": 24576,\n          \"max_predicate_data_length\": 24576,\n          \"max_message_data_length\": 102400,\n          \"max_gas_per_predicate\": 1000000\n        }\n      },\n      \"script_params\": {\n        \"V1\": {\n          \"max_script_length\": 102400,\n          \"max_script_data_length\": 102400\n        }\n      },\n      \"contract_params\": {\n        \"V1\": {\n          \"contract_max_size\": 112640,\n          \"max_storage_slots\": 1760\n        }\n      },\n      \"fee_params\": {\n        \"V1\": {\n          \"gas_price_factor\": 1150000,\n          \"gas_per_byte\": 63\n        }\n      },\n      \"chain_id\": 0,\n      \"gas_costs\": {\n        \"V4\": {\n          \"add\": 2,\n          \"addi\": 2,\n          \"and\": 2,\n          \"andi\": 2,\n          \"bal\": 274,\n          \"bhei\": 2,\n          \"bhsh\": 2,\n          \"burn\": 7566,\n          \"cb\": 2,\n          \"cfsi\": 2,\n          \"div\": 2,\n          \"divi\": 2,\n          \"eck1\": 1489,\n          \"ecr1\": 20513,\n          \"eq\": 2,\n          \"exp\": 2,\n          \"expi\": 2,\n          \"flag\": 2,\n          \"gm\": 2,\n          \"gt\": 2,\n          \"gtf\": 3,\n          \"ji\": 2,\n          \"jmp\": 2,\n          \"jne\": 2,\n          \"jnei\": 2,\n          \"jnzi\": 2,\n          \"jmpf\": 2,\n          \"jmpb\": 2,\n          \"jnzf\": 2,\n          \"jnzb\": 2,\n          \"jnef\": 2,\n          \"jneb\": 2,\n          \"lb\": 2,\n          \"log\": 80,\n          \"lt\": 2,\n          \"lw\": 2,\n          \"mint\": 6566,\n          \"mlog\": 2,\n          \"mod\": 2,\n          \"modi\": 2,\n          \"move\": 2,\n          \"movi\": 1,\n          \"mroo\": 3,\n          \"mul\": 2,\n          \"muli\": 2,\n          \"mldv\": 3,\n          \"noop\": 1,\n          \"not\": 2,\n          \"or\": 1,\n          \"ori\": 2,\n          \"poph\": 2,\n          \"popl\": 2,\n          \"pshh\": 5,\n          \"pshl\": 5,\n          \"ret_contract\": 43,\n          \"rvrt_contract\": 39,\n          \"sb\": 2,\n          \"sll\": 2,\n          \"slli\": 2,\n          \"srl\": 2,\n          \"srli\": 2,\n          \"srw\": 237,\n          \"sub\": 2,\n          \"subi\": 2,\n          \"sw\": 2,\n          \"sww\": 5708,\n          \"time\": 106,\n          \"tr\": 9253,\n          \"tro\": 7199,\n          \"wdcm\": 2,\n          \"wqcm\": 2,\n          \"wdop\": 2,\n          \"wqop\": 3,\n          \"wdml\": 3,\n          \"wqml\": 3,\n          \"wddv\": 3,\n          \"wqdv\": 4,\n          \"wdmd\": 6,\n          \"wqmd\": 9,\n          \"wdam\": 6,\n          \"wqam\": 6,\n          \"wdmm\": 6,\n          \"wqmm\": 6,\n          \"xor\": 2,\n          \"xori\": 2,\n          \"ecop\": 2,\n          \"aloc\": {\n            \"LightOperation\": {\n              \"base\": 2,\n              \"units_per_gas\": 35\n            }\n          },\n          \"bsiz\": {\n            \"LightOperation\": {\n              \"base\": 25,\n              \"units_per_gas\": 564\n            }\n          },\n          \"bldd\": {\n            \"LightOperation\": {\n              \"base\": 33,\n              \"units_per_gas\": 130\n            }\n          },\n          \"cfe\": {\n            \"LightOperation\": {\n              \"base\": 10,\n              \"units_per_gas\": 62\n            }\n          },\n          \"cfei\": {\n            \"LightOperation\": {\n              \"base\": 10,\n              \"units_per_gas\": 66\n            }\n          },\n          \"call\": {\n            \"LightOperation\": {\n              \"base\": 6934,\n              \"units_per_gas\": 14\n            }\n          },\n          \"ccp\": {\n            \"LightOperation\": {\n              \"base\": 21,\n              \"units_per_gas\": 155\n            }\n          },\n          \"croo\": {\n            \"LightOperation\": {\n              \"base\": 69,\n              \"units_per_gas\": 4\n            }\n          },\n          \"csiz\": {\n            \"LightOperation\": {\n              \"base\": 25,\n              \"units_per_gas\": 580\n            }\n          },\n          \"ed19\": {\n            \"LightOperation\": {\n              \"base\": 3232,\n              \"units_per_gas\": 7\n            }\n          },\n          \"k256\": {\n            \"LightOperation\": {\n              \"base\": 21,\n              \"units_per_gas\": 6\n            }\n          },\n          \"ldc\": {\n            \"LightOperation\": {\n              \"base\": 84,\n              \"units_per_gas\": 113\n            }\n          },\n          \"logd\": {\n            \"LightOperation\": {\n              \"base\": 278,\n              \"units_per_gas\": 5\n            }\n          },\n          \"mcl\": {\n            \"LightOperation\": {\n              \"base\": 2,\n              \"units_per_gas\": 1282\n            }\n          },\n          \"mcli\": {\n            \"LightOperation\": {\n              \"base\": 2,\n              \"units_per_gas\": 1250\n            }\n          },\n          \"mcp\": {\n            \"LightOperation\": {\n              \"base\": 3,\n              \"units_per_gas\": 385\n            }\n          },\n          \"mcpi\": {\n            \"LightOperation\": {\n              \"base\": 7,\n              \"units_per_gas\": 585\n            }\n          },\n          \"meq\": {\n            \"LightOperation\": {\n              \"base\": 2,\n              \"units_per_gas\": 1234\n            }\n          },\n          \"retd_contract\": {\n            \"LightOperation\": {\n              \"base\": 227,\n              \"units_per_gas\": 5\n            }\n          },\n          \"s256\": {\n            \"LightOperation\": {\n              \"base\": 25,\n              \"units_per_gas\": 5\n            }\n          },\n          \"scwq\": {\n            \"HeavyOperation\": {\n              \"base\": 5666,\n              \"gas_per_unit\": 6628\n            }\n          },\n          \"smo\": {\n            \"LightOperation\": {\n              \"base\": 14635,\n              \"units_per_gas\": 3\n            }\n          },\n          \"srwq\": {\n            \"HeavyOperation\": {\n              \"base\": 245,\n              \"gas_per_unit\": 243\n            }\n          },\n          \"swwq\": {\n            \"HeavyOperation\": {\n              \"base\": 5661,\n              \"gas_per_unit\": 5776\n            }\n          },\n          \"epar\": {\n            \"HeavyOperation\": {\n              \"base\": 5661,\n              \"gas_per_unit\": 5776\n            }\n          },\n          \"contract_root\": {\n            \"LightOperation\": {\n              \"base\": 24,\n              \"units_per_gas\": 3\n            }\n          },\n          \"state_root\": {\n            \"HeavyOperation\": {\n              \"base\": 189,\n              \"gas_per_unit\": 96\n            }\n          },\n          \"new_storage_per_byte\": 63,\n          \"vm_initialization\": {\n            \"LightOperation\": {\n              \"base\": 3127,\n              \"units_per_gas\": 61\n            }\n          }\n        }\n      },\n      \"base_asset_id\": \"0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07\",\n      \"block_gas_limit\": 30000000,\n      \"block_transaction_size_limit\": 260096,\n      \"privileged_address\": \"0000000000000000000000000000000000000000000000000000000000000000\"\n    }\n  },\n  \"consensus\": {\n    \"PoA\": {\n      \"signing_key\": \"0x94ffcc53b892684acefaebc8a3d4a595e528a8cf664eeb3ef36f1020b0809d0d\"\n    }\n  }\n}\n", "{\n  \"chain_config\": \"chainConfig.json\",\n  \"table_encoding\": {\n    \"Json\": {\n      \"filepath\": \"stateConfig.json\"\n    }\n  }\n}\n", "{\n  \"coins\": [],\n  \"messages\": [],\n  \"contracts\": [],\n  \"blobs\": [],\n  \"block_height\": 0,\n  \"da_block_height\": 0\n}\n", "import chainConfigJson from './defaultSnapshots/chainConfig.json';\nimport metadataJson from './defaultSnapshots/metadata.json';\nimport stateConfigJson from './defaultSnapshots/stateConfig.json';\nimport type { SnapshotConfigs } from './types';\n\nexport const defaultSnapshotConfigs: SnapshotConfigs = {\n  chainConfig: chainConfigJson,\n  metadata: metadataJson,\n  stateConfig: stateConfigJson,\n};\n\nexport const defaultConsensusKey =\n  '0xa449b1ffee0e2205fa924c6740cc48b3b473aa28587df6dab12abc245d1f5298';\n", "export function isDefined<T>(value: T | undefined): value is T {\n  return value !== undefined;\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\n\nimport { arrayify } from './arrayify';\nimport type { BytesLike } from './arrayify';\n\nconst BN_0 = bn(0);\nconst BN_58 = bn(58);\nconst Alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nlet Lookup: null | Record<string, BN> = null;\n\nfunction getAlpha(letter: string): BN {\n  if (Lookup == null) {\n    Lookup = {};\n    for (let i = 0; i < Alphabet.length; i++) {\n      Lookup[Alphabet[i]] = bn(i);\n    }\n  }\n  const result = Lookup[letter];\n  if (result == null) {\n    throw new FuelError(ErrorCode.INVALID_DATA, `invalid base58 value ${letter}`);\n  }\n  return bn(result);\n}\n\n/**\n *  Encode value as a Base58-encoded string.\n */\nexport function encodeBase58(_value: BytesLike): string {\n  const bytes = arrayify(_value);\n\n  let value = bn(bytes);\n  let result = '';\n  while (value.gt(BN_0)) {\n    result = Alphabet[Number(value.mod(BN_58))] + result;\n    value = value.div(BN_58);\n  }\n\n  // Account for leading padding zeros\n  for (let i = 0; i < bytes.length; i++) {\n    if (bytes[i]) {\n      break;\n    }\n    result = Alphabet[0] + result;\n  }\n\n  return result;\n}\n\nexport function decodeBase58(value: string): BN {\n  let result = BN_0;\n  for (let i = 0; i < value.length; i++) {\n    result = result.mul(BN_58);\n    result = result.add(getAlpha(value[i].toString()));\n  }\n  return result;\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport { arrayify } from './arrayify';\nimport type { BytesLike } from './arrayify';\nimport { hexlify } from './hexlify';\n\n/**\n *  Returns a hex string by slicing data from the start offset to the end offset.\n *\n * @param data - the data to be sliced.\n * @param start - the start offset (default: 0).\n * @param end - the end offset (default: length of data).\n * @returns - a sliced hex string from start to end.\n */\nexport function dataSlice(data: BytesLike, start?: number, end?: number): string {\n  const bytes = arrayify(data);\n  if (end != null && end > bytes.length) {\n    throw new FuelError(ErrorCode.INVALID_DATA, 'cannot slice beyond data bounds');\n  }\n  return hexlify(bytes.slice(start == null ? 0 : start, end == null ? bytes.length : end));\n}\n", "import { FuelError, ErrorCode } from '@fuel-ts/errors';\n\n/**\n *  Returns the UTF-8 byte representation of str.\n *\n *  If form is disabled, the string is not normalized.\n * @param stri - the string to convert to UTF-8 bytes.\n * @param form - whether to normalize the string.\n * @returns - the UTF-8 byte representation of str.\n */\nexport function toUtf8Bytes(stri: string, form = true): Uint8Array {\n  let str = stri;\n\n  if (form) {\n    str = stri.normalize('NFC');\n  }\n\n  const result: Array<number> = [];\n\n  for (let i = 0; i < str.length; i += 1) {\n    const c = str.charCodeAt(i);\n\n    if (c < 0x80) {\n      result.push(c);\n    } else if (c < 0x800) {\n      result.push((c >> 6) | 0xc0);\n      result.push((c & 0x3f) | 0x80);\n    } else if ((c & 0xfc00) === 0xd800) {\n      i += 1;\n      const c2 = str.charCodeAt(i);\n\n      if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n        throw new FuelError(\n          ErrorCode.INVALID_INPUT_PARAMETERS,\n          'Invalid UTF-8 in the input string.'\n        );\n      }\n\n      // Surrogate Pair\n      const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n      result.push((pair >> 18) | 0xf0);\n      result.push(((pair >> 12) & 0x3f) | 0x80);\n      result.push(((pair >> 6) & 0x3f) | 0x80);\n      result.push((pair & 0x3f) | 0x80);\n    } else {\n      result.push((c >> 12) | 0xe0);\n      result.push(((c >> 6) & 0x3f) | 0x80);\n      result.push((c & 0x3f) | 0x80);\n    }\n  }\n\n  return new Uint8Array(result);\n}\n", "import { arrayify } from './arrayify';\nimport type { BytesLike } from './arrayify';\n\n/**\n *  These errors are logged when decoding a UTF-8 string fails.\n *\n *  `\"UNEXPECTED_CONTINUE\"` - a continuation byte was present where there\n *  was nothing to continue.\n *\n *  `\"BAD_PREFIX\"` - an invalid (non-continuation) byte to start a\n *  UTF-8 codepoint was found.\n *\n *  `\"OVERRUN\"` - the string is too short to process the expected\n *  codepoint length.\n *\n *  `\"MISSING_CONTINUE\"` - a missing continuation byte was expected but\n *  not found. The offset indicates the index the continuation byte\n *  was expected at.\n *\n *  `\"OUT_OF_RANGE\"` - the computed code point is outside the range\n *  for UTF-8. The badCodepoint indicates the computed codepoint, which was\n *  outside the valid UTF-8 range.\n *\n *  `\"UTF16_SURROGATE\"` - the UTF-8 strings contained a UTF-16 surrogate\n *  pair. The badCodepoint is the computed codepoint, which was inside the\n *  UTF-16 surrogate range.\n *\n *  `\"OVERLONG\"` - the string is an overlong representation. The\n *   badCodepoint indicates the computed codepoint, which has already\n *  been bounds checked.\n *\n *\n *  @returns string\n */\ntype Utf8ErrorReason =\n  | 'UNEXPECTED_CONTINUE'\n  | 'BAD_PREFIX'\n  | 'OVERRUN'\n  | 'MISSING_CONTINUE'\n  | 'OUT_OF_RANGE'\n  | 'UTF16_SURROGATE'\n  | 'OVERLONG';\n\nfunction onError(\n  reason: Utf8ErrorReason,\n  offset: number,\n  bytes: Uint8Array,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  output: Array<number>,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  badCodepoint?: number\n): number {\n  // #TODO: Log these as warnings after https://github.com/FuelLabs/fuels-ts/issues/2298 is implemented.\n  // eslint-disable-next-line no-console\n  console.log(`invalid codepoint at offset ${offset}; ${reason}, bytes: ${bytes}`);\n  return offset;\n}\n\nfunction helper(codePoints: Array<number>): string {\n  return codePoints\n    .map((codePoint) => {\n      if (codePoint <= 0xffff) {\n        return String.fromCharCode(codePoint);\n      }\n      // eslint-disable-next-line no-param-reassign\n      codePoint -= 0x10000;\n      return String.fromCharCode(\n        ((codePoint >> 10) & 0x3ff) + 0xd800,\n        (codePoint & 0x3ff) + 0xdc00\n      );\n    })\n    .join('');\n}\n\nfunction getUtf8CodePoints(_bytes: BytesLike): Array<number> {\n  const bytes = arrayify(_bytes, 'bytes');\n\n  const result: Array<number> = [];\n  let i = 0;\n\n  // Invalid bytes are ignored\n  while (i < bytes.length) {\n    const c = bytes[i++];\n\n    // 0xxx xxxx\n    if (c >> 7 === 0) {\n      result.push(c);\n      continue;\n    }\n\n    // Multibyte; how many bytes left for this character?\n    let extraLength: null | number = null;\n    let overlongMask: null | number = null;\n\n    // 110x xxxx 10xx xxxx\n    if ((c & 0xe0) === 0xc0) {\n      extraLength = 1;\n      overlongMask = 0x7f;\n\n      // 1110 xxxx 10xx xxxx 10xx xxxx\n    } else if ((c & 0xf0) === 0xe0) {\n      extraLength = 2;\n      overlongMask = 0x7ff;\n\n      // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n    } else if ((c & 0xf8) === 0xf0) {\n      extraLength = 3;\n      overlongMask = 0xffff;\n    } else {\n      if ((c & 0xc0) === 0x80) {\n        i += onError('UNEXPECTED_CONTINUE', i - 1, bytes, result);\n      } else {\n        i += onError('BAD_PREFIX', i - 1, bytes, result);\n      }\n      continue;\n    }\n\n    // Do we have enough bytes in our data?\n    if (i - 1 + extraLength >= bytes.length) {\n      i += onError('OVERRUN', i - 1, bytes, result);\n      continue;\n    }\n\n    // Remove the length prefix from the char\n    let res: null | number = c & ((1 << (8 - extraLength - 1)) - 1);\n\n    for (let j = 0; j < extraLength; j++) {\n      const nextChar = bytes[i];\n\n      // Invalid continuation byte\n      if ((nextChar & 0xc0) !== 0x80) {\n        i += onError('MISSING_CONTINUE', i, bytes, result);\n        res = null;\n        break;\n      }\n\n      res = (res << 6) | (nextChar & 0x3f);\n      i++;\n    }\n\n    // See above loop for invalid continuation byte\n    if (res === null) {\n      continue;\n    }\n\n    // Maximum code point\n    if (res > 0x10ffff) {\n      i += onError('OUT_OF_RANGE', i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n\n    // Reserved for UTF-16 surrogate halves\n    if (res >= 0xd800 && res <= 0xdfff) {\n      i += onError('UTF16_SURROGATE', i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n\n    // Check for overlong sequences (more bytes than needed)\n    if (res <= overlongMask) {\n      i += onError('OVERLONG', i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n\n    result.push(res);\n  }\n\n  return result;\n}\n\n/**\n *  Returns the string represented by the UTF-8 data bytes.\n *\n * @param bytes - the UTF-8 data bytes\n * @returns the string represented by the UTF-8 data bytes\n */\n\nexport function toUtf8String(bytes: BytesLike): string {\n  return helper(getUtf8CodePoints(bytes));\n}\n", "import { gzipSync, gunzipSync } from 'fflate';\n\nimport { arrayify } from './arrayify';\nimport type { BytesLike } from './arrayify';\n\nexport const compressBytecode = (bytecodeAsBinary?: BytesLike) => {\n  if (!bytecodeAsBinary) {\n    return '';\n  }\n\n  const bytecodeCompressBytes = arrayify(bytecodeAsBinary);\n  const bytecodeCompressGzipped = gzipSync(bytecodeCompressBytes, { mtime: 0 });\n  const bytecodeCompressBinary = String.fromCharCode.apply(\n    null,\n    new Uint8Array(bytecodeCompressGzipped) as unknown as number[]\n  );\n  const bytecodeCompressEncoded = btoa(bytecodeCompressBinary);\n\n  return bytecodeCompressEncoded;\n};\n\nexport const decompressBytecode = (bytecodeAsBase64: string) => {\n  const bytecodeDecompressBinary = atob(bytecodeAsBase64);\n  const bytecodeDecompressDecoded = new Uint8Array(bytecodeDecompressBinary.length).map((_, i) =>\n    bytecodeDecompressBinary.charCodeAt(i)\n  );\n  const bytecodeDecompressBytes = gunzipSync(bytecodeDecompressDecoded);\n\n  return bytecodeDecompressBytes;\n};\n", "export * from './utils/capitalizeString';\nexport * from './utils/chunkAndPadBytes';\nexport * from './utils/concat';\nexport * from './utils/arrayify';\nexport * from './utils/hexlify';\nexport * from './utils/normalizeString';\nexport * from './utils/date-time';\nexport * from './utils/types';\nexport * from './utils/sleep';\nexport * from './utils/defaultSnapshotConfigs';\nexport * from './utils/isDefined';\nexport * from './utils/base58';\nexport * from './utils/dataSlice';\nexport * from './utils/toUtf8Bytes';\nexport * from './utils/toUtf8String';\nexport * from './utils/bytecode';\n\n/**\n * Used to verify that a switch statement exhausts all variants.\n */\nexport function assertUnreachable(_x: never): never {\n  throw new Error(\"Didn't expect to get here\");\n}\n", "/**\n * Internal assertion helpers.\n * @module\n */\n\n/** Asserts something is positive integer. */\nfunction anumber(n: number): void {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n}\n\n/** Is number an Uint8Array? Copied from utils for perf. */\nfunction isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n/** Asserts something is Uint8Array. */\nfunction abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n\n/** Hash interface. */\nexport type Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\n\n/** Asserts something is hash */\nfunction ahash(h: Hash): void {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  anumber(h.outputLen);\n  anumber(h.blockLen);\n}\n\n/** Asserts a hash instance has not been destroyed / finished */\nfunction aexists(instance: any, checkFinished = true): void {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\n\n/** Asserts output is properly-sized byte array */\nfunction aoutput(out: any, instance: any): void {\n  abytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error('digestInto() expects output buffer of length at least ' + min);\n  }\n}\n\nexport { anumber, abytes, ahash, aexists, aoutput };\n", "/**\n * Internal webcrypto alias.\n * We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n * See utils.ts for details.\n * @module\n */\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto: any =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n", "/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport function u8(arr: TypedArray): Uint8Array {\n  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\nexport function u32(arr: TypedArray): Uint32Array {\n  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n\n// Cast array to view\nexport function createView(arr: TypedArray): DataView {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word: number, shift: number): number {\n  return (word << (32 - shift)) | (word >>> shift);\n}\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word: number, shift: number): number {\n  return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE: boolean = /* @__PURE__ */ (() =>\n  new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n// The byte swap operation for uint32\nexport function byteSwap(word: number): number {\n  return (\n    ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff)\n  );\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const byteSwapIfBE: (n: number) => number = isLE\n  ? (n: number) => n\n  : (n: number) => byteSwap(n);\n\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr: Uint32Array): void {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * Convert byte array to hex string.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * Convert hex string to byte array.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async (): Promise<void> => {};\n\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(\n  iters: number,\n  tick: number,\n  cb: (i: number) => void\n): Promise<void> {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * Convert JS string to byte array.\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('utf8ToBytes expected string, got ' + typeof str);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n/** Accepted input of hash functions. Strings are converted to byte arrays. */\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n/** For runtime check if class implements interface */\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\n/** Hash function */\nexport type CHash = ReturnType<typeof wrapConstructor>;\n/** Hash function with output */\nexport type CHashO = ReturnType<typeof wrapConstructorWithOpts>;\n/** XOF with output */\nexport type CHashXO = ReturnType<typeof wrapXOFConstructorWithOpts>;\n\n/** Wraps hash function, creating an interface on top of it */\nexport function wrapConstructor<T extends Hash<T>>(\n  hashCons: () => Hash<T>\n): {\n  (msg: Input): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(): Hash<T>;\n} {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts: T): Hash<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts: T): HashXOF<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return crypto.randomBytes(bytesLength);\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash } from './_assert.js';\nimport { Hash, toBytes, type CHash, type Input } from './utils.js';\n\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    ahash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input): this {\n    aexists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    abytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest(): Uint8Array {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy(): void {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac: {\n  (hash: CHash, key: Input, message: Input): Uint8Array;\n  create(hash: CHash, key: Input): HMAC<any>;\n} = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n", "/**\n * PBKDF (RFC 2898). Can be used to create a key from password and salt.\n * @module\n */\nimport { ahash, anumber } from './_assert.js';\nimport { hmac } from './hmac.js';\nimport {\n  asyncLoop,\n  checkOpts,\n  createView,\n  Hash,\n  toBytes,\n  type CHash,\n  type Input,\n} from './utils.js';\n\nexport type Pbkdf2Opt = {\n  c: number; // Iterations\n  dkLen?: number; // Desired key length in bytes (Intended output length in octets of the derived key\n  asyncTick?: number; // Maximum time in ms for which async function can block execution\n};\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash: CHash, _password: Input, _salt: Input, _opts: Pbkdf2Opt) {\n  ahash(hash);\n  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\n  const { c, dkLen, asyncTick } = opts;\n  anumber(c);\n  anumber(dkLen);\n  anumber(asyncTick);\n  if (c < 1) throw new Error('PBKDF2: iterations (c) should be >= 1');\n  const password = toBytes(_password);\n  const salt = toBytes(_salt);\n  // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n  const DK = new Uint8Array(dkLen);\n  // U1 = PRF(Password, Salt + INT_32_BE(i))\n  const PRF = hmac.create(hash, password);\n  const PRFSalt = PRF._cloneInto().update(salt);\n  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\n\nfunction pbkdf2Output<T extends Hash<T>>(\n  PRF: Hash<T>,\n  PRFSalt: Hash<T>,\n  DK: Uint8Array,\n  prfW: Hash<T>,\n  u: Uint8Array\n) {\n  PRF.destroy();\n  PRFSalt.destroy();\n  if (prfW) prfW.destroy();\n  u.fill(0);\n  return DK;\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n * @example\n * const key = pbkdf2(sha256, 'password', 'salt', { dkLen: 32, c: 2 ** 18 });\n */\nexport function pbkdf2(hash: CHash, password: Input, salt: Input, opts: Pbkdf2Opt): Uint8Array {\n  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    for (let ui = 1; ui < c; ui++) {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    }\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function. Async version.\n * @example\n * await pbkdf2Async(sha256, 'password', 'salt', { dkLen: 32, c: 500_000 });\n */\nexport async function pbkdf2Async(\n  hash: CHash,\n  password: Input,\n  salt: Input,\n  opts: Pbkdf2Opt\n): Promise<Uint8Array> {\n  const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    await asyncLoop(c - 1, asyncTick, () => {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    });\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n", "/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { aexists, aoutput } from './_assert.js';\nimport { type Input, Hash, createView, toBytes } from './utils.js';\n\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(\n  view: DataView,\n  byteOffset: number,\n  value: bigint,\n  isLE: boolean\n): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n/** Choice: a ? b : c */\nexport function Chi(a: number, b: number, c: number): number {\n  return (a & b) ^ (~a & c);\n}\n\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a: number, b: number, c: number): number {\n  return (a & b) ^ (a & c) ^ (b & c);\n}\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    aexists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    aoutput(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest(): Uint8Array {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n", "/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj } from './_md.js';\nimport { type CHash, rotr, wrapConstructor } from './utils.js';\n\n/** Round constants: first 32 bits of fractional parts of the cube roots of the first 64 primes 2..311). */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n/** Initial state: first 32 bits of fractional parts of the square roots of the first 8 primes 2..19. */\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n/**\n * Temporary buffer, not used to store anything between runs.\n * Named this way because it matches specification.\n */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  protected A: number = SHA256_IV[0] | 0;\n  protected B: number = SHA256_IV[1] | 0;\n  protected C: number = SHA256_IV[2] | 0;\n  protected D: number = SHA256_IV[3] | 0;\n  protected E: number = SHA256_IV[4] | 0;\n  protected F: number = SHA256_IV[5] | 0;\n  protected G: number = SHA256_IV[6] | 0;\n  protected H: number = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean(): void {\n    SHA256_W.fill(0);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n\n/**\n * Constants taken from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf.\n */\nclass SHA224 extends SHA256 {\n  protected A = 0xc1059ed8 | 0;\n  protected B = 0x367cd507 | 0;\n  protected C = 0x3070dd17 | 0;\n  protected D = 0xf70e5939 | 0;\n  protected E = 0xffc00b31 | 0;\n  protected F = 0x68581511 | 0;\n  protected G = 0x64f98fa7 | 0;\n  protected H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/** SHA2-256 hash function */\nexport const sha256: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/** SHA2-224 hash function */\nexport const sha224: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n", "/**\n * RFC 7914 Scrypt KDF. Can be used to create a key from password and salt.\n * @module\n */\nimport { anumber } from './_assert.js';\nimport { pbkdf2 } from './pbkdf2.js';\nimport { sha256 } from './sha256.js';\nimport { asyncLoop, byteSwap32, checkOpts, type Input, isLE, rotl, u32 } from './utils.js';\n\n// The main Scrypt loop: uses Salsa extensively.\n// Six versions of the function were tried, this is the fastest one.\n// prettier-ignore\nfunction XorAndSalsa(\n  prev: Uint32Array,\n  pi: number,\n  input: Uint32Array,\n  ii: number,\n  out: Uint32Array,\n  oi: number\n) {\n  // Based on https://cr.yp.to/salsa20.html\n  // Xor blocks\n  let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];\n  let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];\n  let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];\n  let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];\n  let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];\n  let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];\n  let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];\n  let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];\n  // Save state to temporary variables (salsa)\n  let x00 = y00, x01 = y01, x02 = y02, x03 = y03,\n      x04 = y04, x05 = y05, x06 = y06, x07 = y07,\n      x08 = y08, x09 = y09, x10 = y10, x11 = y11,\n      x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n  // Main loop (salsa)\n  for (let i = 0; i < 8; i += 2) {\n    x04 ^= rotl(x00 + x12 | 0,  7); x08 ^= rotl(x04 + x00 | 0,  9);\n    x12 ^= rotl(x08 + x04 | 0, 13); x00 ^= rotl(x12 + x08 | 0, 18);\n    x09 ^= rotl(x05 + x01 | 0,  7); x13 ^= rotl(x09 + x05 | 0,  9);\n    x01 ^= rotl(x13 + x09 | 0, 13); x05 ^= rotl(x01 + x13 | 0, 18);\n    x14 ^= rotl(x10 + x06 | 0,  7); x02 ^= rotl(x14 + x10 | 0,  9);\n    x06 ^= rotl(x02 + x14 | 0, 13); x10 ^= rotl(x06 + x02 | 0, 18);\n    x03 ^= rotl(x15 + x11 | 0,  7); x07 ^= rotl(x03 + x15 | 0,  9);\n    x11 ^= rotl(x07 + x03 | 0, 13); x15 ^= rotl(x11 + x07 | 0, 18);\n    x01 ^= rotl(x00 + x03 | 0,  7); x02 ^= rotl(x01 + x00 | 0,  9);\n    x03 ^= rotl(x02 + x01 | 0, 13); x00 ^= rotl(x03 + x02 | 0, 18);\n    x06 ^= rotl(x05 + x04 | 0,  7); x07 ^= rotl(x06 + x05 | 0,  9);\n    x04 ^= rotl(x07 + x06 | 0, 13); x05 ^= rotl(x04 + x07 | 0, 18);\n    x11 ^= rotl(x10 + x09 | 0,  7); x08 ^= rotl(x11 + x10 | 0,  9);\n    x09 ^= rotl(x08 + x11 | 0, 13); x10 ^= rotl(x09 + x08 | 0, 18);\n    x12 ^= rotl(x15 + x14 | 0,  7); x13 ^= rotl(x12 + x15 | 0,  9);\n    x14 ^= rotl(x13 + x12 | 0, 13); x15 ^= rotl(x14 + x13 | 0, 18);\n  }\n  // Write output (salsa)\n  out[oi++] = (y00 + x00) | 0; out[oi++] = (y01 + x01) | 0;\n  out[oi++] = (y02 + x02) | 0; out[oi++] = (y03 + x03) | 0;\n  out[oi++] = (y04 + x04) | 0; out[oi++] = (y05 + x05) | 0;\n  out[oi++] = (y06 + x06) | 0; out[oi++] = (y07 + x07) | 0;\n  out[oi++] = (y08 + x08) | 0; out[oi++] = (y09 + x09) | 0;\n  out[oi++] = (y10 + x10) | 0; out[oi++] = (y11 + x11) | 0;\n  out[oi++] = (y12 + x12) | 0; out[oi++] = (y13 + x13) | 0;\n  out[oi++] = (y14 + x14) | 0; out[oi++] = (y15 + x15) | 0;\n}\n\nfunction BlockMix(input: Uint32Array, ii: number, out: Uint32Array, oi: number, r: number) {\n  // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\n  let head = oi + 0;\n  let tail = oi + 16 * r;\n  for (let i = 0; i < 16; i++) out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\n  for (let i = 0; i < r; i++, head += 16, ii += 16) {\n    // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\n    XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\n    if (i > 0) tail += 16; // First iteration overwrites tmp value in tail\n    XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\n  }\n}\n\nexport type ScryptOpts = {\n  N: number; // cost factor\n  r: number; // block size\n  p: number; // parallelization\n  dkLen?: number; // key length\n  asyncTick?: number; // block execution max time\n  maxmem?: number;\n  onProgress?: (progress: number) => void;\n};\n\n// Common prologue and epilogue for sync/async functions\nfunction scryptInit(password: Input, salt: Input, _opts?: ScryptOpts) {\n  // Maxmem - 1GB+1KB by default\n  const opts = checkOpts(\n    {\n      dkLen: 32,\n      asyncTick: 10,\n      maxmem: 1024 ** 3 + 1024,\n    },\n    _opts\n  );\n  const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;\n  anumber(N);\n  anumber(r);\n  anumber(p);\n  anumber(dkLen);\n  anumber(asyncTick);\n  anumber(maxmem);\n  if (onProgress !== undefined && typeof onProgress !== 'function')\n    throw new Error('progressCb should be function');\n  const blockSize = 128 * r;\n  const blockSize32 = blockSize / 4;\n\n  // Max N is 2^32 (Integrify is 32-bit). Real limit is 2^22: JS engines Uint8Array limit is 4GB in 2024.\n  // Spec check `N >= 2 ** (blockSize / 8)` is not done for compat with popular libs,\n  // which used incorrect r: 1, p: 8. Also, the check seems to be a spec error:\n  // https://www.rfc-editor.org/errata_search.php?rfc=7914\n  if (N <= 1 || (N & (N - 1)) !== 0 || N > 2 ** 32) {\n    throw new Error('Scrypt: N must be larger than 1, a power of 2, and less than 2^32');\n  }\n  if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {\n    throw new Error(\n      'Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)'\n    );\n  }\n  if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\n    throw new Error(\n      'Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32'\n    );\n  }\n  const memUsed = blockSize * (N + p);\n  if (memUsed > maxmem) {\n    throw new Error(\n      'Scrypt: memused is bigger than maxMem. Expected 128 * r * (N + p) > maxmem of ' + maxmem\n    );\n  }\n  // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\n  // Since it has only one iteration there is no reason to use async variant\n  const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });\n  const B32 = u32(B);\n  // Re-used between parallel iterations. Array(iterations) of B\n  const V = u32(new Uint8Array(blockSize * N));\n  const tmp = u32(new Uint8Array(blockSize));\n  let blockMixCb = () => {};\n  if (onProgress) {\n    const totalBlockMix = 2 * N * p;\n    // Invoke callback if progress changes from 10.01 to 10.02\n    // Allows to draw smooth progress bar on up to 8K screen\n    const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\n    let blockMixCnt = 0;\n    blockMixCb = () => {\n      blockMixCnt++;\n      if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))\n        onProgress(blockMixCnt / totalBlockMix);\n    };\n  }\n  return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };\n}\n\nfunction scryptOutput(\n  password: Input,\n  dkLen: number,\n  B: Uint8Array,\n  V: Uint32Array,\n  tmp: Uint32Array\n) {\n  const res = pbkdf2(sha256, password, B, { c: 1, dkLen });\n  B.fill(0);\n  V.fill(0);\n  tmp.fill(0);\n  return res;\n}\n\n/**\n * Scrypt KDF from RFC 7914.\n * @param password - pass\n * @param salt - salt\n * @param opts - parameters\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\n * - `p` is parallelization factor (1 is common)\n * - `dkLen` is output key length in bytes e.g. 32.\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\n * - `onProgress` - callback function that would be executed for progress report\n * @returns Derived key\n * @example\n * scrypt('password', 'salt', { N: 2**18, r: 8, p: 1, dkLen: 32 });\n */\nexport function scrypt(password: Input, salt: Input, opts: ScryptOpts): Uint8Array {\n  const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(\n    password,\n    salt,\n    opts\n  );\n  if (!isLE) byteSwap32(B32);\n  for (let pi = 0; pi < p; pi++) {\n    const Pi = blockSize32 * pi;\n    for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n    for (let i = 0, pos = 0; i < N - 1; i++) {\n      BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n      blockMixCb();\n    }\n    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n    blockMixCb();\n    for (let i = 0; i < N; i++) {\n      // First u32 of the last 64-byte block (u32 is LE)\n      const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n      for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n      BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n      blockMixCb();\n    }\n  }\n  if (!isLE) byteSwap32(B32);\n  return scryptOutput(password, dkLen, B, V, tmp);\n}\n\n/**\n * Scrypt KDF from RFC 7914. Async version.\n * @example\n * await scryptAsync('password', 'salt', { N: 2**18, r: 8, p: 1, dkLen: 32 });\n */\nexport async function scryptAsync(\n  password: Input,\n  salt: Input,\n  opts: ScryptOpts\n): Promise<Uint8Array> {\n  const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(\n    password,\n    salt,\n    opts\n  );\n  if (!isLE) byteSwap32(B32);\n  for (let pi = 0; pi < p; pi++) {\n    const Pi = blockSize32 * pi;\n    for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n    let pos = 0;\n    await asyncLoop(N - 1, asyncTick, () => {\n      BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n      blockMixCb();\n    });\n    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n    blockMixCb();\n    await asyncLoop(N, asyncTick, () => {\n      // First u32 of the last 64-byte block (u32 is LE)\n      const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n      for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n      BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n      blockMixCb();\n    });\n  }\n  if (!isLE) byteSwap32(B32);\n  return scryptOutput(password, dkLen, B, V, tmp);\n}\n", "/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\nfunction fromBig(\n  n: bigint,\n  le = false\n): {\n  h: number;\n  l: number;\n} {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false): Uint32Array[] {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number): bigint => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number): number => h >>> s;\nconst shrSL = (h: number, l: number, s: number): number => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number): number => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number): number => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number): number => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number): number => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number): number => l;\nconst rotr32L = (h: number, _l: number): number => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number): number => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number): number => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number): number => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number): number => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(\n  Ah: number,\n  Al: number,\n  Bh: number,\n  Bl: number\n): {\n  h: number;\n  l: number;\n} {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number): number => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number): number =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number): number =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number): number =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number): number =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number): number =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n// prettier-ignore\nconst u64: { fromBig: typeof fromBig; split: typeof split; toBig: (h: number, l: number) => bigint; shrSH: (h: number, _l: number, s: number) => number; shrSL: (h: number, l: number, s: number) => number; rotrSH: (h: number, l: number, s: number) => number; rotrSL: (h: number, l: number, s: number) => number; rotrBH: (h: number, l: number, s: number) => number; rotrBL: (h: number, l: number, s: number) => number; rotr32H: (_h: number, l: number) => number; rotr32L: (h: number, _l: number) => number; rotlSH: (h: number, l: number, s: number) => number; rotlSL: (h: number, l: number, s: number) => number; rotlBH: (h: number, l: number, s: number) => number; rotlBL: (h: number, l: number, s: number) => number; add: typeof add; add3L: (Al: number, Bl: number, Cl: number) => number; add3H: (low: number, Ah: number, Bh: number, Ch: number) => number; add4L: (Al: number, Bl: number, Cl: number, Dl: number) => number; add4H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number) => number; add5H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) => number; add5L: (Al: number, Bl: number, Cl: number, Dl: number, El: number) => number; } = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n", "/**\n * SHA3 (keccak) hash function, based on a new \"Sponge function\" design.\n * Different from older hashes, the internal state is bigger than output size.\n *\n * Check out [FIPS-202](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf),\n * [Website](https://keccak.team/keccak.html),\n * [the differences between SHA-3 and Keccak](https://crypto.stackexchange.com/questions/15727/what-are-the-key-differences-between-the-draft-sha-3-standard-and-the-keccak-sub).\n *\n * Check out `sha3-addons` module for cSHAKE, k12, and others.\n * @module\n */\nimport { abytes, aexists, anumber, aoutput } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport {\n  byteSwap32,\n  Hash,\n  isLE,\n  toBytes,\n  u32,\n  wrapConstructor,\n  wrapXOFConstructorWithOpts,\n  type CHash,\n  type CHashXO,\n  type HashXOF,\n  type Input,\n} from './utils.js';\n\n// Various per round constants calculations\nconst SHA3_PI: number[] = [];\nconst SHA3_ROTL: number[] = [];\nconst _SHA3_IOTA: bigint[] = [];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h: number, l: number, s: number) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n\n/** `keccakf1600` internal function, additionally allows to adjust round count. */\nexport function keccakP(s: Uint32Array, rounds: number = 24): void {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\n/** Keccak sponge function. */\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    anumber(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    // 0 < blockLen < 200\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak(): void {\n    if (!isLE) byteSwap32(this.state32);\n    keccakP(this.state32, this.rounds);\n    if (!isLE) byteSwap32(this.state32);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input): this {\n    aexists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish(): void {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    aexists(this, false);\n    abytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    anumber(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array): Uint8Array {\n    aoutput(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest(): Uint8Array {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy(): void {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\n/** SHA3-224 hash function. */\nexport const sha3_224: CHash = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/** SHA3-256 hash function. Different from keccak-256. */\nexport const sha3_256: CHash = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\n/** SHA3-384 hash function. */\nexport const sha3_384: CHash = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\n/** SHA3-512 hash function. */\nexport const sha3_512: CHash = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\n\n/** keccak-224 hash function. */\nexport const keccak_224: CHash = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/** keccak-256 hash function. Different from SHA3-256. */\nexport const keccak_256: CHash = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\n/** keccak-384 hash function. */\nexport const keccak_384: CHash = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\n/** keccak-512 hash function. */\nexport const keccak_512: CHash = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapXOFConstructorWithOpts<HashXOF<Keccak>, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\n/** SHAKE128 XOF with 128-bit security. */\nexport const shake128: CHashXO = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\n/** SHAKE256 XOF with 256-bit security. */\nexport const shake256: CHashXO = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n", "/**\n * RIPEMD-160 legacy hash function.\n * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\n * @module\n */\nimport { HashMD } from './_md.js';\nimport { rotl, wrapConstructor, type CHash } from './utils.js';\n\nconst Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = /* @__PURE__ */ new Uint8Array(new Array(16).fill(0).map((_, i) => i));\nconst Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++) for (let j of [idxL, idxR]) j.push(j[i].map((k) => Rho[k]));\n\nconst shifts = /* @__PURE__ */ [\n  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = /* @__PURE__ */ new Uint32Array([\n  0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr = /* @__PURE__ */ new Uint32Array([\n  0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// It's called f() in spec.\nfunction f(group: number, x: number, y: number, z: number): number {\n  if (group === 0) return x ^ y ^ z;\n  else if (group === 1) return (x & y) | (~x & z);\n  else if (group === 2) return (x | ~y) ^ z;\n  else if (group === 3) return (x & z) | (y & ~z);\n  else return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst R_BUF = /* @__PURE__ */ new Uint32Array(16);\nexport class RIPEMD160 extends HashMD<RIPEMD160> {\n  private h0 = 0x67452301 | 0;\n  private h1 = 0xefcdab89 | 0;\n  private h2 = 0x98badcfe | 0;\n  private h3 = 0x10325476 | 0;\n  private h4 = 0xc3d2e1f0 | 0;\n\n  constructor() {\n    super(64, 20, 8, true);\n  }\n  protected get(): [number, number, number, number, number] {\n    const { h0, h1, h2, h3, h4 } = this;\n    return [h0, h1, h2, h3, h4];\n  }\n  protected set(h0: number, h1: number, h2: number, h3: number, h4: number): void {\n    this.h0 = h0 | 0;\n    this.h1 = h1 | 0;\n    this.h2 = h2 | 0;\n    this.h3 = h3 | 0;\n    this.h4 = h4 | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) R_BUF[i] = view.getUint32(offset, true);\n    // prettier-ignore\n    let al = this.h0 | 0, ar = al,\n        bl = this.h1 | 0, br = bl,\n        cl = this.h2 | 0, cr = cl,\n        dl = this.h3 | 0, dr = dl,\n        el = this.h4 | 0, er = el;\n\n    // Instead of iterating 0 to 80, we split it into 5 groups\n    // And use the groups in constants, functions, etc. Much simpler\n    for (let group = 0; group < 5; group++) {\n      const rGroup = 4 - group;\n      const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n      const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n      const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n      for (let i = 0; i < 16; i++) {\n        const tl = (rotl(al + f(group, bl, cl, dl) + R_BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n      }\n      // 2 loops are 10% faster\n      for (let i = 0; i < 16; i++) {\n        const tr = (rotl(ar + f(rGroup, br, cr, dr) + R_BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n      }\n    }\n    // Add the compressed chunk to the current hash value\n    this.set(\n      (this.h1 + cl + dr) | 0,\n      (this.h2 + dl + er) | 0,\n      (this.h3 + el + ar) | 0,\n      (this.h4 + al + br) | 0,\n      (this.h0 + bl + cr) | 0\n    );\n  }\n  protected roundClean(): void {\n    R_BUF.fill(0);\n  }\n  destroy(): void {\n    this.destroyed = true;\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0);\n  }\n}\n\n/** RIPEMD-160 - a legacy hash function from 1990s. */\nexport const ripemd160: CHash = /* @__PURE__ */ wrapConstructor(() => new RIPEMD160());\n", "/**\n * SHA2-512 a.k.a. sha512 and sha384. It is slower than sha256 in js because u64 operations are slow.\n *\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [the paper on truncated SHA512/256](https://eprint.iacr.org/2010/548.pdf).\n * @module\n */\nimport { HashMD } from './_md.js';\nimport u64 from './_u64.js';\nimport { type CHash, wrapConstructor } from './utils.js';\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD<SHA512> {\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n  // Also looks cleaner and easier to verify with spec.\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n  // h -- high 32 bits, l -- low 32 bits\n  protected Ah: number = 0x6a09e667 | 0;\n  protected Al: number = 0xf3bcc908 | 0;\n  protected Bh: number = 0xbb67ae85 | 0;\n  protected Bl: number = 0x84caa73b | 0;\n  protected Ch: number = 0x3c6ef372 | 0;\n  protected Cl: number = 0xfe94f82b | 0;\n  protected Dh: number = 0xa54ff53a | 0;\n  protected Dl: number = 0x5f1d36f1 | 0;\n  protected Eh: number = 0x510e527f | 0;\n  protected El: number = 0xade682d1 | 0;\n  protected Fh: number = 0x9b05688c | 0;\n  protected Fl: number = 0x2b3e6c1f | 0;\n  protected Gh: number = 0x1f83d9ab | 0;\n  protected Gl: number = 0xfb41bd6b | 0;\n  protected Hh: number = 0x5be0cd19 | 0;\n  protected Hl: number = 0x137e2179 | 0;\n\n  constructor() {\n    super(128, 64, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ): void {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean(): void {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n  destroy(): void {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nexport class SHA512_224 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  protected Ah: number = 0x8c3d37c8 | 0;\n  protected Al: number = 0x19544da2 | 0;\n  protected Bh: number = 0x73e19966 | 0;\n  protected Bl: number = 0x89dcd4d6 | 0;\n  protected Ch: number = 0x1dfab7ae | 0;\n  protected Cl: number = 0x32ff9c82 | 0;\n  protected Dh: number = 0x679dd514 | 0;\n  protected Dl: number = 0x582f9fcf | 0;\n  protected Eh: number = 0x0f6d2b69 | 0;\n  protected El: number = 0x7bd44da8 | 0;\n  protected Fh: number = 0x77e36f73 | 0;\n  protected Fl: number = 0x04c48942 | 0;\n  protected Gh: number = 0x3f9d85a8 | 0;\n  protected Gl: number = 0x6a1d36c8 | 0;\n  protected Hh: number = 0x1112e6ad | 0;\n  protected Hl: number = 0x91d692a1 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\nexport class SHA512_256 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  protected Ah: number = 0x22312194 | 0;\n  protected Al: number = 0xfc2bf72c | 0;\n  protected Bh: number = 0x9f555fa3 | 0;\n  protected Bl: number = 0xc84c64c2 | 0;\n  protected Ch: number = 0x2393b86b | 0;\n  protected Cl: number = 0x6f53b151 | 0;\n  protected Dh: number = 0x96387719 | 0;\n  protected Dl: number = 0x5940eabd | 0;\n  protected Eh: number = 0x96283ee2 | 0;\n  protected El: number = 0xa88effe3 | 0;\n  protected Fh: number = 0xbe5e1e25 | 0;\n  protected Fl: number = 0x53863992 | 0;\n  protected Gh: number = 0x2b0199fc | 0;\n  protected Gl: number = 0x2c85b8aa | 0;\n  protected Hh: number = 0x0eb72ddc | 0;\n  protected Hl: number = 0x81c52ca2 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 32;\n  }\n}\n\nexport class SHA384 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  protected Ah: number = 0xcbbb9d5d | 0;\n  protected Al: number = 0xc1059ed8 | 0;\n  protected Bh: number = 0x629a292a | 0;\n  protected Bl: number = 0x367cd507 | 0;\n  protected Ch: number = 0x9159015a | 0;\n  protected Cl: number = 0x3070dd17 | 0;\n  protected Dh: number = 0x152fecd8 | 0;\n  protected Dl: number = 0xf70e5939 | 0;\n  protected Eh: number = 0x67332667 | 0;\n  protected El: number = 0xffc00b31 | 0;\n  protected Fh: number = 0x8eb44a87 | 0;\n  protected Fl: number = 0x68581511 | 0;\n  protected Gh: number = 0xdb0c2e0d | 0;\n  protected Gl: number = 0x64f98fa7 | 0;\n  protected Hh: number = 0x47b5481d | 0;\n  protected Hl: number = 0xbefa4fa4 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 48;\n  }\n}\n\n/** SHA2-512 hash function. */\nexport const sha512: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA512());\n/** SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks. */\nexport const sha512_224: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\n/** SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks. */\nexport const sha512_256: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\n/** SHA2-384 hash function. */\nexport const sha384: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n", "import { scrypt as scryptNoble } from '@noble/hashes/scrypt';\n\nimport type { IScryptParams } from '../types';\n\nexport const scrypt = (params: IScryptParams): Uint8Array => {\n  const { password, salt, n, p, r, dklen } = params;\n  const derivedKey = scryptNoble(password, salt, { N: n, r, p, dkLen: dklen });\n\n  return derivedKey;\n};\n", "import { keccak_256 } from '@noble/hashes/sha3';\n\nexport const keccak256 = (data: Uint8Array): Uint8Array => keccak_256(data);\n", "import type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify } from '@fuel-ts/utils';\nimport { ripemd160 as noble_ripemd160 } from '@noble/hashes/ripemd160';\n\nexport function ripemd160(_data: BytesLike): Uint8Array {\n  const data = arrayify(_data, 'data');\n  return noble_ripemd160(data);\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport type { CryptoApi, Keystore } from '../types';\n\nimport { bufferFromString } from './bufferFromString';\nimport { pbkdf2 } from './pbkdf2';\nimport { randomBytes } from './randomBytes';\nimport { stringFromBuffer } from './stringFromBuffer';\n\nconst ALGORITHM = 'AES-CTR';\n\n/**\n * Generate a pbkdf2 key from a password and random salt\n */\nexport const keyFromPassword: CryptoApi['keyFromPassword'] = (\n  password: string,\n  saltBuffer: Uint8Array\n): Uint8Array => {\n  const passBuffer = bufferFromString(String(password).normalize('NFKC'), 'utf-8');\n  const key = pbkdf2(passBuffer, saltBuffer, 100000, 32, 'sha256');\n  return arrayify(key);\n};\n\n/**\n * Encrypts a data object that can be any serializable value using\n * a provided password.\n *\n * @returns Promise<Keystore> object\n */\nexport const encrypt: CryptoApi['encrypt'] = async <T>(\n  password: string,\n  data: T\n): Promise<Keystore> => {\n  const iv = randomBytes(16);\n  const salt = randomBytes(32);\n  const secret = keyFromPassword(password, salt);\n  const dataString = JSON.stringify(data);\n  const dataBuffer = bufferFromString(dataString, 'utf-8');\n  const alg = {\n    name: ALGORITHM,\n    counter: iv,\n    length: 64,\n  };\n  const key = await crypto.subtle.importKey('raw', secret, alg, false, ['encrypt']);\n  const encBuffer = await crypto.subtle.encrypt(alg, key, dataBuffer);\n\n  return {\n    data: stringFromBuffer(new Uint8Array(encBuffer)),\n    iv: stringFromBuffer(iv),\n    salt: stringFromBuffer(salt),\n  };\n};\n\n/**\n * Given a password and a keystore object, decrypts the text and returns\n * the resulting value\n */\nexport const decrypt: CryptoApi['decrypt'] = async <T>(\n  password: string,\n  keystore: Keystore\n): Promise<T> => {\n  const iv = bufferFromString(keystore.iv);\n  const salt = bufferFromString(keystore.salt);\n  const secret = keyFromPassword(password, salt);\n  const encryptedText = bufferFromString(keystore.data);\n\n  const alg = {\n    name: ALGORITHM,\n    counter: iv,\n    length: 64,\n  };\n  const key = await crypto.subtle.importKey('raw', secret, alg, false, ['decrypt']);\n\n  const ptBuffer = await crypto.subtle.decrypt(alg, key, encryptedText);\n  const decryptedData = new TextDecoder().decode(ptBuffer);\n\n  try {\n    return JSON.parse(decryptedData);\n  } catch {\n    throw new FuelError(ErrorCode.INVALID_CREDENTIALS, 'Invalid credentials.');\n  }\n};\n", "import type { CryptoApi, Encoding } from '../types';\n\nexport const bufferFromString: CryptoApi['bufferFromString'] = (\n  string: string,\n  encoding: Encoding = 'base64'\n): Uint8Array => {\n  switch (encoding) {\n    case 'utf-8': {\n      return new TextEncoder().encode(string);\n    }\n\n    case 'base64': {\n      const binaryString = atob(string);\n      const len = binaryString.length;\n      const bytes = new Uint8Array(len).map((_, i) => binaryString.charCodeAt(i));\n\n      return bytes;\n    }\n\n    case 'hex':\n    default: {\n      const bufferLength = string.length / 2;\n\n      const buffer = new Uint8Array(bufferLength).map((_, i) => {\n        const startIndex = i * 2;\n        const byteValue = parseInt(string.substring(startIndex, startIndex + 2), 16);\n        return byteValue;\n      });\n\n      return buffer;\n    }\n  }\n};\n", "import type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify } from '@fuel-ts/utils';\nimport { pbkdf2 as pb } from '@noble/hashes/pbkdf2';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512 } from '@noble/hashes/sha512';\n\nimport type { CryptoApi } from '../types';\n\nexport const pbkdf2: CryptoApi['pbkdf2'] = (\n  password: BytesLike,\n  salt: BytesLike,\n  iterations: number,\n  keylen: number,\n  algo: 'sha256' | 'sha512'\n): string => {\n  const algorithm = { sha256, sha512 }[algo];\n  return hexlify(pb(algorithm, password, salt, { c: iterations, dkLen: keylen }));\n};\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nconst { crypto, btoa } = globalThis;\n\nif (!crypto) {\n  throw new FuelError(\n    ErrorCode.ENV_DEPENDENCY_MISSING,\n    `Could not find 'crypto' in current browser environment.`\n  );\n}\n\nif (!btoa) {\n  throw new FuelError(\n    ErrorCode.ENV_DEPENDENCY_MISSING,\n    `Could not find 'btoa' in current browser environment.`\n  );\n}\n\nexport { crypto, btoa };\n", "import type { CryptoApi } from '../types';\n\nimport { crypto } from './crypto';\n\nexport const randomBytes: CryptoApi['randomBytes'] = (length: number): Uint8Array => {\n  const randomValues = crypto.getRandomValues(new Uint8Array(length));\n  return randomValues;\n};\n", "import type { CryptoApi, Encoding } from '../types';\n\nimport { btoa } from './crypto';\n\nexport const stringFromBuffer: CryptoApi['stringFromBuffer'] = (\n  buffer: Uint8Array,\n  encoding: Encoding = 'base64'\n): string => {\n  switch (encoding) {\n    case 'utf-8': {\n      return new TextDecoder().decode(buffer);\n    }\n    case 'base64': {\n      const binary = String.fromCharCode.apply(null, new Uint8Array(buffer) as unknown as number[]);\n      return btoa(binary);\n    }\n\n    case 'hex':\n    default: {\n      let hexString = '';\n      for (let i = 0; i < buffer.length; i += 1) {\n        const hex = buffer[i].toString(16);\n        hexString += hex.length === 1 ? `0${hex}` : hex;\n      }\n      return hexString;\n    }\n  }\n};\n", "import type { CryptoApi } from '../types';\n\nimport { crypto } from './crypto';\n\nexport const encryptJsonWalletData: CryptoApi['encryptJsonWalletData'] = async (\n  data: Uint8Array,\n  key: Uint8Array,\n  iv: Uint8Array\n): Promise<Uint8Array> => {\n  const subtle = crypto.subtle;\n  const keyBuffer = new Uint8Array(key.subarray(0, 16));\n  const ivBuffer = iv;\n  const dataBuffer = data;\n\n  const cryptoKey = await subtle.importKey(\n    'raw',\n    keyBuffer,\n    { name: 'AES-CTR', length: 128 },\n    false,\n    ['encrypt', 'decrypt']\n  );\n\n  const encrypted = (await subtle.encrypt(\n    { name: 'AES-CTR', counter: ivBuffer, length: 128 },\n    cryptoKey,\n    dataBuffer\n  )) as ArrayBuffer;\n\n  return new Uint8Array(encrypted);\n};\n\nexport const decryptJsonWalletData: CryptoApi['decryptJsonWalletData'] = async (\n  data: Uint8Array,\n  key: Uint8Array,\n  iv: Uint8Array\n): Promise<Uint8Array> => {\n  const subtle = crypto.subtle;\n  const keyBuffer = new Uint8Array(key.subarray(0, 16)).buffer;\n  const ivBuffer = new Uint8Array(iv).buffer;\n  const dataBuffer = new Uint8Array(data).buffer;\n\n  const cryptoKey = await subtle.importKey(\n    'raw',\n    keyBuffer,\n    { name: 'AES-CTR', length: 128 },\n    false,\n    ['encrypt', 'decrypt']\n  );\n\n  const decrypted = (await subtle.decrypt(\n    { name: 'AES-CTR', counter: ivBuffer, length: 128 },\n    cryptoKey,\n    dataBuffer\n  )) as ArrayBuffer;\n\n  return new Uint8Array(decrypted);\n};\n", "import { hexlify } from '@fuel-ts/utils';\nimport { hmac } from '@noble/hashes/hmac';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512 } from '@noble/hashes/sha512';\n\nimport type { CryptoApi } from '../types';\n\nexport const computeHmac: CryptoApi['computeHmac'] = (\n  algorithm: 'sha256' | 'sha512',\n  key: Uint8Array,\n  data: Uint8Array\n): string => {\n  const hash = algorithm === 'sha256' ? sha256 : sha512;\n  const signature = hmac.create(hash, key).update(data).digest();\n  return hexlify(signature);\n};\n", "import type { CryptoApi } from '../types';\n\nimport { crypto } from './crypto';\n\nexport const randomUUID: CryptoApi['randomUUID'] = () => crypto.randomUUID();\n", "import { scrypt, keccak256, ripemd160 } from '../shared';\nimport type { CryptoApi } from '../types';\n\nimport { decrypt, encrypt, keyFromPassword } from './aes-ctr';\nimport { bufferFromString } from './bufferFromString';\nimport { decryptJsonWalletData, encryptJsonWalletData } from './encryptJsonWalletData';\nimport { computeHmac } from './hmac';\nimport { pbkdf2 } from './pbkdf2';\nimport { randomBytes } from './randomBytes';\nimport { randomUUID } from './randomUUID';\nimport { stringFromBuffer } from './stringFromBuffer';\n\nconst api: CryptoApi = {\n  bufferFromString,\n  stringFromBuffer,\n  decrypt,\n  encrypt,\n  keyFromPassword,\n  randomBytes,\n  scrypt,\n  keccak256,\n  decryptJsonWalletData,\n  encryptJsonWalletData,\n  computeHmac,\n  pbkdf2,\n  ripemd160,\n  randomUUID,\n};\n\nexport default api;\n", "import cryptoApi from './browser';\n\nexport * from './types';\n\nexport const {\n  bufferFromString,\n  decrypt,\n  encrypt,\n  keyFromPassword,\n  randomBytes,\n  stringFromBuffer,\n  scrypt,\n  keccak256,\n  decryptJsonWalletData,\n  encryptJsonWalletData,\n  pbkdf2,\n  computeHmac,\n  ripemd160,\n  randomUUID,\n} = cryptoApi;\n", "/**\n * Internal assertion helpers.\n * @module\n */\n\n/** Asserts something is positive integer. */\nfunction anumber(n: number): void {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n}\n\n/** Is number an Uint8Array? Copied from utils for perf. */\nfunction isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n/** Asserts something is Uint8Array. */\nfunction abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n\n/** Hash interface. */\nexport type Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\n\n/** Asserts something is hash */\nfunction ahash(h: Hash): void {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  anumber(h.outputLen);\n  anumber(h.blockLen);\n}\n\n/** Asserts a hash instance has not been destroyed / finished */\nfunction aexists(instance: any, checkFinished = true): void {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\n\n/** Asserts output is properly-sized byte array */\nfunction aoutput(out: any, instance: any): void {\n  abytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error('digestInto() expects output buffer of length at least ' + min);\n  }\n}\n\nexport { anumber, abytes, ahash, aexists, aoutput };\n", "/**\n * Internal webcrypto alias.\n * We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n * See utils.ts for details.\n * @module\n */\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto: any =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n", "/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport function u8(arr: TypedArray): Uint8Array {\n  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\nexport function u32(arr: TypedArray): Uint32Array {\n  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n\n// Cast array to view\nexport function createView(arr: TypedArray): DataView {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word: number, shift: number): number {\n  return (word << (32 - shift)) | (word >>> shift);\n}\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word: number, shift: number): number {\n  return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE: boolean = /* @__PURE__ */ (() =>\n  new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n// The byte swap operation for uint32\nexport function byteSwap(word: number): number {\n  return (\n    ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff)\n  );\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const byteSwapIfBE: (n: number) => number = isLE\n  ? (n: number) => n\n  : (n: number) => byteSwap(n);\n\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr: Uint32Array): void {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * Convert byte array to hex string.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * Convert hex string to byte array.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async (): Promise<void> => {};\n\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(\n  iters: number,\n  tick: number,\n  cb: (i: number) => void\n): Promise<void> {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * Convert JS string to byte array.\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('utf8ToBytes expected string, got ' + typeof str);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n/** Accepted input of hash functions. Strings are converted to byte arrays. */\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n/** For runtime check if class implements interface */\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\n/** Hash function */\nexport type CHash = ReturnType<typeof wrapConstructor>;\n/** Hash function with output */\nexport type CHashO = ReturnType<typeof wrapConstructorWithOpts>;\n/** XOF with output */\nexport type CHashXO = ReturnType<typeof wrapXOFConstructorWithOpts>;\n\n/** Wraps hash function, creating an interface on top of it */\nexport function wrapConstructor<T extends Hash<T>>(\n  hashCons: () => Hash<T>\n): {\n  (msg: Input): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(): Hash<T>;\n} {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts: T): Hash<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts: T): HashXOF<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return crypto.randomBytes(bytesLength);\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { aexists, aoutput } from './_assert.js';\nimport { type Input, Hash, createView, toBytes } from './utils.js';\n\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(\n  view: DataView,\n  byteOffset: number,\n  value: bigint,\n  isLE: boolean\n): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n/** Choice: a ? b : c */\nexport function Chi(a: number, b: number, c: number): number {\n  return (a & b) ^ (~a & c);\n}\n\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a: number, b: number, c: number): number {\n  return (a & b) ^ (a & c) ^ (b & c);\n}\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    aexists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    aoutput(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest(): Uint8Array {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n", "/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj } from './_md.js';\nimport { type CHash, rotr, wrapConstructor } from './utils.js';\n\n/** Round constants: first 32 bits of fractional parts of the cube roots of the first 64 primes 2..311). */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n/** Initial state: first 32 bits of fractional parts of the square roots of the first 8 primes 2..19. */\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n/**\n * Temporary buffer, not used to store anything between runs.\n * Named this way because it matches specification.\n */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  protected A: number = SHA256_IV[0] | 0;\n  protected B: number = SHA256_IV[1] | 0;\n  protected C: number = SHA256_IV[2] | 0;\n  protected D: number = SHA256_IV[3] | 0;\n  protected E: number = SHA256_IV[4] | 0;\n  protected F: number = SHA256_IV[5] | 0;\n  protected G: number = SHA256_IV[6] | 0;\n  protected H: number = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean(): void {\n    SHA256_W.fill(0);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n\n/**\n * Constants taken from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf.\n */\nclass SHA224 extends SHA256 {\n  protected A = 0xc1059ed8 | 0;\n  protected B = 0x367cd507 | 0;\n  protected C = 0x3070dd17 | 0;\n  protected D = 0xf70e5939 | 0;\n  protected E = 0xffc00b31 | 0;\n  protected F = 0x68581511 | 0;\n  protected G = 0x64f98fa7 | 0;\n  protected H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/** SHA2-256 hash function */\nexport const sha256: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/** SHA2-224 hash function */\nexport const sha224: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n", "import type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, concat, hexlify, toUtf8Bytes } from '@fuel-ts/utils';\nimport { sha256 as sha256AsBytes } from '@noble/hashes/sha256';\n\n/**\n * The prefix for the message to be hashed\n */\nconst MESSAGE_PREFIX = '\\x19Fuel Signed Message:\\n';\n\n/**\n * - When a string is provided, we hash as a UTF-8 string using SHA-256.\n *\n * - When an object with `personalSign` property is provided, we hash using SHA-256 of the following format:\n * ```console\n * 0x19 <0x46 (F)> <uel Signed Message:\\n\" + len(message)> <message>\n * ```\n *\n * Following a similar approach to that of [EIP-191](https://eips.ethereum.org/EIPS/eip-191).\n */\nexport type HashableMessage = string | { personalSign: BytesLike };\n\n/**\n * @param data - The data to be hashed\n * @returns A sha256 hash of the data in hex format\n */\nexport function sha256(data: BytesLike): string {\n  return hexlify(sha256AsBytes(arrayify(data)));\n}\n\n/**\n * wrap sha256\n *\n * @param data - The data to be hash\n * @returns A sha256 hash of the data\n */\nexport function hash(data: BytesLike): string {\n  return sha256(data);\n}\n\n/**\n * Convert a uint64 number to a big-endian byte array\n */\nexport function uint64ToBytesBE(value: number): Uint8Array {\n  const bigIntValue = BigInt(value);\n  const buffer = new ArrayBuffer(8);\n  const dataView = new DataView(buffer);\n  dataView.setBigUint64(0, bigIntValue, false); // write the uint64 value in big-endian order\n  return new Uint8Array(dataView.buffer);\n}\n\n/**\n * Hashes a message using SHA256.\n *\n * - When a `message` string is provided, we hash as a UTF-8 string using SHA-256.\n *\n * - When a `message` object with `personalSign` property is provided, we hash using SHA-256 of the following format:\n * ```console\n * 0x19 <0x46 (F)> <uel Signed Message:\\n\" + len(message)> <message>\n * ```\n *\n * Following a similar approach to that of [EIP-191](https://eips.ethereum.org/EIPS/eip-191).\n *\n * @param message - The message to be hashed @see {@link HashableMessage}\n * @returns A sha256 hash of the message\n */\nexport function hashMessage(message: HashableMessage) {\n  if (typeof message === 'string') {\n    return sha256(toUtf8Bytes(message));\n  }\n\n  const { personalSign } = message;\n  const messageBytes: Uint8Array =\n    typeof personalSign === 'string' ? toUtf8Bytes(personalSign) : personalSign;\n  const payload = concat([\n    toUtf8Bytes(MESSAGE_PREFIX),\n    toUtf8Bytes(String(messageBytes.length)),\n    messageBytes,\n  ]);\n  return hexlify(sha256(payload));\n}\n", "import type { BN } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\n\nimport type { Option } from './OptionCoder';\n\ntype Primitive = string | number | boolean;\n\n/**\n * The type of value you can provide to `Coder.encode`\n */\nexport type InputValue<T = void> =\n  | Primitive\n  | BN\n  | Option<T>\n  | BytesLike\n  | InputValue[]\n  | { [key: string]: InputValue }\n  | Record<string, Primitive | BytesLike>;\n\n/**\n * The type of value you can get from `Coder.decode`\n */\nexport type DecodedValue =\n  | Primitive\n  | DecodedValue[]\n  | { [key: string]: DecodedValue }\n  | Record<string, Primitive>;\n\nexport type TypesOfCoder<TCoder> =\n  TCoder extends Coder<infer TInput, infer TDecoded> ? { Input: TInput; Decoded: TDecoded } : never;\n\nexport abstract class Coder<TInput = unknown, TDecoded = unknown> {\n  readonly name: string;\n  readonly type: string;\n  readonly encodedLength: number;\n\n  constructor(name: string, type: string, encodedLength: number) {\n    this.name = name;\n    this.type = type;\n    this.encodedLength = encodedLength;\n  }\n\n  abstract encode(value: TInput, length?: number): Uint8Array;\n\n  abstract decode(data: Uint8Array, offset: number, length?: number): [TDecoded, number];\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { concat } from '@fuel-ts/utils';\n\nimport { MAX_BYTES } from '../../utils/constants';\nimport { hasNestedOption } from '../../utils/utilities';\n\nimport type { TypesOfCoder } from './AbstractCoder';\nimport { Coder } from './AbstractCoder';\n\ntype InputValueOf<TCoder extends Coder> = Array<TypesOfCoder<TCoder>['Input']>;\ntype DecodedValueOf<TCoder extends Coder> = Array<TypesOfCoder<TCoder>['Decoded']>;\n\nexport class ArrayCoder<TCoder extends Coder> extends Coder<\n  InputValueOf<TCoder>,\n  DecodedValueOf<TCoder>\n> {\n  coder: TCoder;\n  length: number;\n  #hasNestedOption: boolean;\n\n  constructor(coder: TCoder, length: number) {\n    super('array', `[${coder.type}; ${length}]`, length * coder.encodedLength);\n    this.coder = coder;\n    this.length = length;\n    this.#hasNestedOption = hasNestedOption([coder]);\n  }\n\n  encode(value: InputValueOf<TCoder>): Uint8Array {\n    if (!Array.isArray(value)) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Expected array value.`);\n    }\n\n    if (this.length !== value.length) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Types/values length mismatch.`);\n    }\n\n    return concat(Array.from(value).map((v) => this.coder.encode(v)));\n  }\n\n  decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoder>, number] {\n    if ((!this.#hasNestedOption && data.length < this.encodedLength) || data.length > MAX_BYTES) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid array data size.`);\n    }\n\n    let newOffset = offset;\n    const decodedValue = Array(this.length)\n      .fill(0)\n      .map(() => {\n        let decoded;\n        [decoded, newOffset] = this.coder.decode(data, newOffset);\n        return decoded;\n      });\n\n    return [decodedValue as DecodedValueOf<TCoder>, newOffset];\n  }\n}\n", "/**\n * Types and Type Regex\n */\nexport const U8_CODER_TYPE = 'u8';\nexport const U16_CODER_TYPE = 'u16';\nexport const U32_CODER_TYPE = 'u32';\nexport const U64_CODER_TYPE = 'u64';\nexport const U256_CODER_TYPE = 'u256';\nexport const RAW_PTR_CODER_TYPE = 'raw untyped ptr';\nexport const RAW_SLICE_CODER_TYPE = 'raw untyped slice';\nexport const BOOL_CODER_TYPE = 'bool';\nexport const B256_CODER_TYPE = 'b256';\nexport const B512_CODER_TYPE = 'struct std::b512::B512';\nexport const OPTION_CODER_TYPE = 'enum std::option::Option';\nexport const VEC_CODER_TYPE = 'struct std::vec::Vec';\nexport const BYTES_CODER_TYPE = 'struct std::bytes::Bytes';\nexport const STD_STRING_CODER_TYPE = 'struct std::string::String';\nexport const STR_SLICE_CODER_TYPE = 'str';\nexport const VOID_TYPE = '()';\n\nexport const optionRegEx: RegExp = /^enum (std::option::)?Option$/m;\nexport const stringRegEx = /^str\\[(?<length>[0-9]+)\\]/;\nexport const arrayRegEx = /^\\[(?<item>[\\w\\s\\\\[\\]]+);\\s*(?<length>[0-9]+)\\]/;\nexport const structRegEx = /^struct.+/;\nexport const enumRegEx = /^enum.+$/;\nexport const tupleRegEx = /^\\((?<items>.*)\\)$/;\nexport const genericRegEx = /^generic.+$/;\n\nexport const fullNameRegExMatch = /([^\\s]+)$/m;\n\n/**\n * Encoding versions\n */\nexport const ENCODING_V1 = '1';\nexport type EncodingVersion = typeof ENCODING_V1;\n\n/**\n * Property space and config constants\n */\nexport const WORD_SIZE = 8;\nexport const BYTES_32 = 32;\nexport const UTXO_ID_LEN = BYTES_32 + 2;\nexport const MAX_INPUTS = 255;\nexport const ASSET_ID_LEN = BYTES_32;\nexport const CONTRACT_ID_LEN = BYTES_32;\nexport const ADDRESS_LEN = BYTES_32;\nexport const NONCE_LEN = BYTES_32;\nexport const TX_LEN = WORD_SIZE * 4;\nexport const TX_POINTER_LEN = WORD_SIZE * 2;\nexport const MAX_BYTES = 2 ** 32 - 1; // Max u32\n\nexport const calculateVmTxMemory = ({ maxInputs }: { maxInputs: number }) =>\n  BYTES_32 + // Tx ID\n  ASSET_ID_LEN + // Base asset ID\n  // Asset ID/Balance coin input pairs\n  maxInputs * (ASSET_ID_LEN + WORD_SIZE) +\n  WORD_SIZE; // Tx size\n\n// SCRIPT_FIXED_SIZE = 104\nexport const SCRIPT_FIXED_SIZE =\n  WORD_SIZE + // Identifier\n  WORD_SIZE + // Gas limit\n  WORD_SIZE + // Script size\n  WORD_SIZE + // Script data size\n  WORD_SIZE + // Policies\n  WORD_SIZE + // Inputs size\n  WORD_SIZE + // Outputs size\n  WORD_SIZE + // Witnesses size\n  BYTES_32; // Receipts root\n\n// INPUT_COIN_FIXED_SIZE = 176\nexport const INPUT_COIN_FIXED_SIZE =\n  WORD_SIZE + // Identifier\n  TX_LEN + // Utxo Length\n  WORD_SIZE + // Output Index\n  ADDRESS_LEN + // Owner\n  WORD_SIZE + // Amount\n  ASSET_ID_LEN + // Asset id\n  TX_POINTER_LEN + // TxPointer\n  WORD_SIZE + // Witnesses index\n  WORD_SIZE + // Predicate size\n  WORD_SIZE + // Predicate data size\n  WORD_SIZE; // Predicate gas used\n\n// INPUT_MESSAGE_FIXED_SIZE = 168\nexport const INPUT_MESSAGE_FIXED_SIZE =\n  WORD_SIZE + // Identifier\n  ADDRESS_LEN + // Sender\n  ADDRESS_LEN + // Recipient\n  WORD_SIZE + // Amount\n  NONCE_LEN + // Nonce\n  WORD_SIZE + // witness_index\n  WORD_SIZE + // Data size\n  WORD_SIZE + // Predicate size\n  WORD_SIZE + // Predicate data size\n  WORD_SIZE; // Predicate gas used\n", "import type { Coder } from '../encoding/coders/AbstractCoder';\n\nimport { OPTION_CODER_TYPE, WORD_SIZE } from './constants';\n\n/**\n * Turns:\n  Uint8Array(24) [\n    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 24\n  ]\n\n  Into:\n  Array [\n    Uint8Array(8) [\n      0, 0, 0, 0, 0, 0, 0, 1\n    ],\n    Uint8Array(8) [\n      0, 0, 0, 0, 0, 0, 0, 2\n    ],\n    Uint8Array(8) [\n      0, 0, 0, 0, 0, 0, 0, 24\n    ]\n  ]\n *\n */\nexport const chunkByLength = (data: Uint8Array, length = WORD_SIZE): Uint8Array[] => {\n  const chunks = [];\n  let offset = 0;\n  let chunk = data.slice(offset, offset + length);\n  while (chunk.length) {\n    chunks.push(chunk);\n    offset += length;\n    chunk = data.slice(offset, offset + length);\n  }\n\n  return chunks;\n};\n\nexport const isUint8Array = (value: unknown): value is Uint8Array => value instanceof Uint8Array;\n\nexport type TCoders = Record<string, Coder>;\n\n/**\n * Finds a deeply nested option in a coders object.\n *\n * @param coders - the coders object to search.\n * @returns - whether the coder has been found.\n */\nexport const hasNestedOption = (coders: Record<string, Coder> | Coder[]): boolean => {\n  const array = Array.isArray(coders) ? coders : Object.values(coders);\n\n  for (const node of array) {\n    if (node.type === OPTION_CODER_TYPE) {\n      return true;\n    }\n\n    if ('coder' in node && (node.coder as Coder).type === OPTION_CODER_TYPE) {\n      return true;\n    }\n\n    if ('coders' in node) {\n      const child = hasNestedOption(node.coders as TCoders);\n      if (child) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn, toHex } from '@fuel-ts/math';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport { WORD_SIZE } from '../../utils/constants';\n\nimport { Coder } from './AbstractCoder';\n\nexport class B256Coder extends Coder<string, string> {\n  constructor() {\n    super('b256', 'b256', WORD_SIZE * 4);\n  }\n\n  encode(value: string): Uint8Array {\n    let encodedValue;\n    try {\n      encodedValue = arrayify(value);\n    } catch (error) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    if (encodedValue.length !== this.encodedLength) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    return encodedValue;\n  }\n\n  decode(data: Uint8Array, offset: number): [string, number] {\n    if (data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid b256 data size.`);\n    }\n\n    let bytes = data.slice(offset, offset + this.encodedLength);\n\n    const decoded = bn(bytes);\n    if (decoded.isZero()) {\n      bytes = new Uint8Array(32);\n    }\n\n    if (bytes.length !== this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid b256 byte data size.`);\n    }\n\n    return [toHex(bytes, 32), offset + 32];\n  }\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn, toHex } from '@fuel-ts/math';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport { WORD_SIZE } from '../../utils/constants';\n\nimport { Coder } from './AbstractCoder';\n\nexport class B512Coder extends Coder<string, string> {\n  constructor() {\n    super('b512', 'struct B512', WORD_SIZE * 8);\n  }\n\n  encode(value: string): Uint8Array {\n    let encodedValue;\n    try {\n      encodedValue = arrayify(value);\n    } catch (error) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    if (encodedValue.length !== this.encodedLength) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    return encodedValue;\n  }\n\n  decode(data: Uint8Array, offset: number): [string, number] {\n    if (data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid b512 data size.`);\n    }\n\n    let bytes = data.slice(offset, offset + this.encodedLength);\n\n    const decoded = bn(bytes);\n    if (decoded.isZero()) {\n      bytes = new Uint8Array(64);\n    }\n\n    if (bytes.length !== this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid b512 byte data size.`);\n    }\n\n    return [toHex(bytes, this.encodedLength), offset + this.encodedLength];\n  }\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { type BNInput, type BN, toBytes, bn } from '@fuel-ts/math';\n\nimport { WORD_SIZE } from '../../utils/constants';\n\nimport { Coder } from './AbstractCoder';\n\ntype BigNumberCoderType = 'u64' | 'u256';\n\nconst encodedLengths: { [key in BigNumberCoderType]: number } = {\n  u64: WORD_SIZE,\n  u256: WORD_SIZE * 4,\n};\n\nexport class BigNumberCoder extends Coder<BNInput, BN> {\n  constructor(baseType: BigNumberCoderType) {\n    super('bigNumber', baseType, encodedLengths[baseType]);\n  }\n\n  encode(value: BNInput): Uint8Array {\n    let bytes;\n\n    // We throw an error if the value is a number and it's more than the max safe integer\n    // This is because we can experience some odd behavior with integers more than the max safe integer\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER#description\n    if (typeof value === 'number' && value > Number.MAX_SAFE_INTEGER) {\n      throw new FuelError(\n        ErrorCode.ENCODE_ERROR,\n        `Invalid ${this.type} type - number value is too large. Number can only safely handle up to 53 bits.`\n      );\n    }\n\n    try {\n      bytes = toBytes(value, this.encodedLength);\n    } catch (error) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n\n    return bytes;\n  }\n\n  decode(data: Uint8Array, offset: number): [BN, number] {\n    if (data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid ${this.type} data size.`);\n    }\n\n    let bytes = data.slice(offset, offset + this.encodedLength);\n    bytes = bytes.slice(0, this.encodedLength);\n\n    if (bytes.length !== this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid ${this.type} byte data size.`);\n    }\n\n    return [bn(bytes), offset + this.encodedLength];\n  }\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn, toBytes } from '@fuel-ts/math';\n\nimport type { EncodingOptions } from '../../types/EncodingOptions';\nimport { WORD_SIZE } from '../../utils/constants';\n\nimport { Coder } from './AbstractCoder';\n\nexport class BooleanCoder extends Coder<boolean, boolean> {\n  options: EncodingOptions;\n\n  constructor(\n    options: EncodingOptions = {\n      padToWordSize: false,\n    }\n  ) {\n    const encodedLength = options.padToWordSize ? WORD_SIZE : 1;\n    super('boolean', 'boolean', encodedLength);\n\n    this.options = options;\n  }\n\n  encode(value: boolean): Uint8Array {\n    const isTrueBool = value === true || value === false;\n\n    if (!isTrueBool) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid boolean value.`);\n    }\n\n    return toBytes(value ? 1 : 0, this.encodedLength);\n  }\n\n  decode(data: Uint8Array, offset: number): [boolean, number] {\n    if (data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid boolean data size.`);\n    }\n\n    const bytes = bn(data.slice(offset, offset + this.encodedLength));\n\n    if (bytes.isZero()) {\n      return [false, offset + this.encodedLength];\n    }\n\n    if (!bytes.eq(bn(1))) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid boolean value.`);\n    }\n\n    return [true, offset + this.encodedLength];\n  }\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\n\nimport { WORD_SIZE } from '../../utils/constants';\n\nimport { Coder } from './AbstractCoder';\nimport { BigNumberCoder } from './BigNumberCoder';\n\nexport class ByteCoder extends Coder<number[], Uint8Array> {\n  static memorySize = 1;\n  constructor() {\n    super('struct', 'struct Bytes', WORD_SIZE);\n  }\n\n  encode(value: number[] | Uint8Array): Uint8Array {\n    const bytes = value instanceof Uint8Array ? value : new Uint8Array(value);\n    const lengthBytes = new BigNumberCoder('u64').encode(bytes.length);\n\n    return new Uint8Array([...lengthBytes, ...bytes]);\n  }\n\n  decode(data: Uint8Array, offset: number): [Uint8Array, number] {\n    if (data.length < WORD_SIZE) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid byte data size.`);\n    }\n\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = bn(new BigNumberCoder('u64').decode(lengthBytes, 0)[0]).toNumber();\n\n    const dataBytes = data.slice(offsetAndLength, offsetAndLength + length);\n\n    if (dataBytes.length !== length) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid bytes byte data size.`);\n    }\n\n    return [dataBytes, offsetAndLength + length];\n  }\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { toNumber } from '@fuel-ts/math';\nimport { concat } from '@fuel-ts/utils';\nimport type { RequireExactlyOne } from 'type-fest';\n\nimport { OPTION_CODER_TYPE, optionRegEx, VOID_TYPE } from '../../utils/constants';\nimport { hasNestedOption } from '../../utils/utilities';\n\nimport type { TypesOfCoder } from './AbstractCoder';\nimport { Coder } from './AbstractCoder';\nimport { BigNumberCoder } from './BigNumberCoder';\n\nexport type InputValueOf<TCoders extends Record<string, Coder>> = RequireExactlyOne<{\n  [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Input'];\n}>;\nexport type DecodedValueOf<TCoders extends Record<string, Coder>> = RequireExactlyOne<{\n  [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Decoded'];\n}>;\n\nexport class EnumCoder<TCoders extends Record<string, Coder>> extends Coder<\n  InputValueOf<TCoders>,\n  DecodedValueOf<TCoders>\n> {\n  override name: string;\n  coders: TCoders;\n  #caseIndexCoder: BigNumberCoder;\n  #encodedValueSize: number;\n  #shouldValidateLength: boolean;\n\n  constructor(name: string, coders: TCoders) {\n    const caseIndexCoder = new BigNumberCoder('u64');\n    const encodedValueSize = Object.values(coders).reduce(\n      (min, coder) => Math.min(min, coder.encodedLength),\n      0\n    );\n    super(`enum ${name}`, `enum ${name}`, caseIndexCoder.encodedLength + encodedValueSize);\n    this.name = name;\n    this.coders = coders;\n    this.#caseIndexCoder = caseIndexCoder;\n    this.#encodedValueSize = encodedValueSize;\n    this.#shouldValidateLength = !(optionRegEx.test(this.type) || hasNestedOption(coders));\n  }\n\n  // Checks that we're handling a native enum that is of type void.\n  #isNativeEnum(coder: Coder): boolean {\n    return this.type !== OPTION_CODER_TYPE && coder.type === VOID_TYPE;\n  }\n\n  #encodeNativeEnum(value: string): Uint8Array {\n    const valueCoder = this.coders[value];\n    const encodedValue = valueCoder.encode([]);\n    const caseIndex = Object.keys(this.coders).indexOf(value);\n\n    const padding = new Uint8Array(this.#encodedValueSize - valueCoder.encodedLength);\n    return concat([this.#caseIndexCoder.encode(caseIndex), padding, encodedValue]);\n  }\n\n  encode(value: InputValueOf<TCoders>): Uint8Array {\n    if (typeof value === 'string' && this.coders[value]) {\n      return this.#encodeNativeEnum(value);\n    }\n\n    const [caseKey, ...empty] = Object.keys(value);\n    if (!caseKey) {\n      throw new FuelError(ErrorCode.INVALID_DECODE_VALUE, 'A field for the case must be provided.');\n    }\n    if (empty.length !== 0) {\n      throw new FuelError(ErrorCode.INVALID_DECODE_VALUE, 'Only one field must be provided.');\n    }\n    const valueCoder = this.coders[caseKey];\n    const caseIndex = Object.keys(this.coders).indexOf(caseKey);\n    if (caseIndex === -1) {\n      const validCases = Object.keys(this.coders)\n        .map((v) => `'${v}'`)\n        .join(', ');\n      throw new FuelError(\n        ErrorCode.INVALID_DECODE_VALUE,\n        `Invalid case '${caseKey}'. Valid cases: ${validCases}.`\n      );\n    }\n\n    const encodedValue = valueCoder.encode(value[caseKey]);\n\n    return new Uint8Array([...this.#caseIndexCoder.encode(caseIndex), ...encodedValue]);\n  }\n\n  #decodeNativeEnum(caseKey: string, newOffset: number): [DecodedValueOf<TCoders>, number] {\n    return [caseKey as unknown as DecodedValueOf<TCoders>, newOffset];\n  }\n\n  decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoders>, number] {\n    if (this.#shouldValidateLength && data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid enum data size.`);\n    }\n\n    const caseBytes = new BigNumberCoder('u64').decode(data, offset)[0];\n    const caseIndex = toNumber(caseBytes);\n    const caseKey = Object.keys(this.coders)[caseIndex];\n    if (!caseKey) {\n      throw new FuelError(\n        ErrorCode.INVALID_DECODE_VALUE,\n        `Invalid caseIndex \"${caseIndex}\". Valid cases: ${Object.keys(this.coders)}.`\n      );\n    }\n    const valueCoder = this.coders[caseKey];\n    const offsetAndCase = offset + this.#caseIndexCoder.encodedLength;\n\n    if (this.#shouldValidateLength && data.length < offsetAndCase + valueCoder.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid enum data size.`);\n    }\n\n    const [decoded, newOffset] = valueCoder.decode(data, offsetAndCase);\n\n    if (this.#isNativeEnum(this.coders[caseKey])) {\n      return this.#decodeNativeEnum(caseKey, newOffset);\n    }\n\n    return [{ [caseKey]: decoded } as DecodedValueOf<TCoders>, newOffset];\n  }\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { toNumber, toBytes } from '@fuel-ts/math';\n\nimport type { EncodingOptions } from '../../types/EncodingOptions';\nimport { WORD_SIZE } from '../../utils/constants';\n\nimport { Coder } from './AbstractCoder';\n\ntype NumberCoderType = 'u8' | 'u16' | 'u32';\n\nconst getLength = (baseType: NumberCoderType): number => {\n  switch (baseType) {\n    case 'u8':\n      return 1;\n    case 'u16':\n      return 2;\n    case 'u32':\n      return 4;\n    default:\n      throw new FuelError(ErrorCode.TYPE_NOT_SUPPORTED, `Invalid number type: ${baseType}`);\n  }\n};\n\nexport class NumberCoder extends Coder<number, number> {\n  baseType: NumberCoderType;\n  options: EncodingOptions;\n\n  constructor(\n    baseType: NumberCoderType,\n    options: EncodingOptions = {\n      padToWordSize: false,\n    }\n  ) {\n    const length = options.padToWordSize ? WORD_SIZE : getLength(baseType);\n    super('number', baseType, length);\n    this.baseType = baseType;\n    this.options = options;\n  }\n\n  encode(value: number | string): Uint8Array {\n    let bytes;\n\n    try {\n      bytes = toBytes(value);\n    } catch (error) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.baseType}.`);\n    }\n\n    if (bytes.length > this.encodedLength) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.baseType}, too many bytes.`);\n    }\n\n    return toBytes(bytes, this.encodedLength);\n  }\n\n  decode(data: Uint8Array, offset: number): [number, number] {\n    if (data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid number data size.`);\n    }\n\n    const bytes = data.slice(offset, offset + this.encodedLength);\n\n    if (bytes.length !== this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid number byte data size.`);\n    }\n\n    return [toNumber(bytes), offset + this.encodedLength];\n  }\n}\n", "import type { Coder } from './AbstractCoder';\nimport type { InputValueOf, DecodedValueOf } from './EnumCoder';\nimport { EnumCoder } from './EnumCoder';\n\ntype SwayOption<T> = { None: [] } | { Some: T };\nexport type Option<T> = T | undefined;\n\nexport class OptionCoder<TCoders extends Record<string, Coder>> extends EnumCoder<TCoders> {\n  override encode(value?: Option<unknown>): Uint8Array {\n    const result = super.encode(this.toSwayOption(value) as unknown as InputValueOf<TCoders>);\n    return result;\n  }\n\n  private toSwayOption(input?: Option<unknown>): SwayOption<unknown> {\n    if (input !== undefined) {\n      return { Some: input };\n    }\n\n    return { None: [] };\n  }\n\n  override decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoders>, number] {\n    const [decoded, newOffset] = super.decode(data, offset);\n    return [this.toOption(decoded) as DecodedValueOf<TCoders>, newOffset];\n  }\n\n  private toOption(output?: DecodedValueOf<TCoders>): Option<unknown> {\n    if (output && 'Some' in output) {\n      return output.Some;\n    }\n\n    return undefined;\n  }\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\n\nimport { WORD_SIZE } from '../../utils/constants';\n\nimport { Coder } from './AbstractCoder';\nimport { ArrayCoder } from './ArrayCoder';\nimport { BigNumberCoder } from './BigNumberCoder';\nimport { NumberCoder } from './NumberCoder';\n\nexport class RawSliceCoder extends Coder<number[], number[]> {\n  constructor() {\n    super('raw untyped slice', 'raw untyped slice', WORD_SIZE);\n  }\n\n  encode(value: number[]): Uint8Array {\n    if (!Array.isArray(value)) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Expected array value.`);\n    }\n\n    const internalCoder = new ArrayCoder(new NumberCoder('u8'), value.length);\n    const bytes = internalCoder.encode(value);\n    const lengthBytes = new BigNumberCoder('u64').encode(bytes.length);\n\n    return new Uint8Array([...lengthBytes, ...bytes]);\n  }\n\n  decode(data: Uint8Array, offset: number): [number[], number] {\n    if (data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid raw slice data size.`);\n    }\n\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = bn(new BigNumberCoder('u64').decode(lengthBytes, 0)[0]).toNumber();\n    const dataBytes = data.slice(offsetAndLength, offsetAndLength + length);\n\n    if (dataBytes.length !== length) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid raw slice byte data size.`);\n    }\n\n    const internalCoder = new ArrayCoder(new NumberCoder('u8'), length);\n    const [decodedValue] = internalCoder.decode(dataBytes, 0);\n\n    return [decodedValue, offsetAndLength + length];\n  }\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport { toUtf8Bytes, toUtf8String } from '@fuel-ts/utils';\n\nimport { WORD_SIZE } from '../../utils/constants';\n\nimport { Coder } from './AbstractCoder';\nimport { BigNumberCoder } from './BigNumberCoder';\n\nexport class StdStringCoder extends Coder<string, string> {\n  static memorySize = 1;\n  constructor() {\n    super('struct', 'struct String', WORD_SIZE);\n  }\n\n  encode(value: string): Uint8Array {\n    const bytes = toUtf8Bytes(value);\n    const lengthBytes = new BigNumberCoder('u64').encode(value.length);\n\n    return new Uint8Array([...lengthBytes, ...bytes]);\n  }\n\n  decode(data: Uint8Array, offset: number): [string, number] {\n    if (data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid std string data size.`);\n    }\n\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = bn(new BigNumberCoder('u64').decode(lengthBytes, 0)[0]).toNumber();\n    const dataBytes = data.slice(offsetAndLength, offsetAndLength + length);\n\n    if (dataBytes.length !== length) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid std string byte data size.`);\n    }\n\n    return [toUtf8String(dataBytes), offsetAndLength + length];\n  }\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport { toUtf8Bytes, toUtf8String } from '@fuel-ts/utils';\n\nimport { WORD_SIZE } from '../../utils/constants';\n\nimport { Coder } from './AbstractCoder';\nimport { BigNumberCoder } from './BigNumberCoder';\n\nexport class StrSliceCoder extends Coder<string, string> {\n  static memorySize = 1;\n  constructor() {\n    super('strSlice', 'str', WORD_SIZE);\n  }\n\n  encode(value: string): Uint8Array {\n    const bytes = toUtf8Bytes(value);\n    const lengthBytes = new BigNumberCoder('u64').encode(value.length);\n\n    return new Uint8Array([...lengthBytes, ...bytes]);\n  }\n\n  decode(data: Uint8Array, offset: number): [string, number] {\n    if (data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid string slice data size.`);\n    }\n\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = bn(new BigNumberCoder('u64').decode(lengthBytes, 0)[0]).toNumber();\n    const bytes = data.slice(offsetAndLength, offsetAndLength + length);\n\n    if (bytes.length !== length) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid string slice byte data size.`);\n    }\n\n    return [toUtf8String(bytes), offsetAndLength + length];\n  }\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { toUtf8Bytes, toUtf8String } from '@fuel-ts/utils';\n\nimport { Coder } from './AbstractCoder';\n\nexport class StringCoder<TLength extends number = number> extends Coder<string, string> {\n  constructor(length: TLength) {\n    super('string', `str[${length}]`, length);\n  }\n\n  encode(value: string): Uint8Array {\n    if (value.length !== this.encodedLength) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Value length mismatch during encode.`);\n    }\n\n    return toUtf8Bytes(value);\n  }\n\n  decode(data: Uint8Array, offset: number): [string, number] {\n    if (data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid string data size.`);\n    }\n\n    const bytes = data.slice(offset, offset + this.encodedLength);\n\n    if (bytes.length !== this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid string byte data size.`);\n    }\n\n    return [toUtf8String(bytes), offset + this.encodedLength];\n  }\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { concatBytes } from '@fuel-ts/utils';\n\nimport { hasNestedOption } from '../../utils/utilities';\n\nimport type { TypesOfCoder } from './AbstractCoder';\nimport { Coder } from './AbstractCoder';\nimport { OptionCoder } from './OptionCoder';\n\ntype InputValueOf<TCoders extends Record<string, Coder>> = {\n  [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Input'];\n};\ntype DecodedValueOf<TCoders extends Record<string, Coder>> = {\n  [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Decoded'];\n};\n\nexport class StructCoder<TCoders extends Record<string, Coder>> extends Coder<\n  InputValueOf<TCoders>,\n  DecodedValueOf<TCoders>\n> {\n  override name: string;\n  coders: TCoders;\n  #hasNestedOption: boolean;\n\n  constructor(name: string, coders: TCoders) {\n    const encodedLength = Object.values(coders).reduce(\n      (acc, coder) => acc + coder.encodedLength,\n      0\n    );\n    super('struct', `struct ${name}`, encodedLength);\n    this.name = name;\n    this.coders = coders;\n    this.#hasNestedOption = hasNestedOption(coders);\n  }\n\n  encode(value: InputValueOf<TCoders>): Uint8Array {\n    return concatBytes(\n      Object.keys(this.coders).map((fieldName) => {\n        const fieldCoder = this.coders[fieldName];\n        const fieldValue = value[fieldName];\n\n        if (!(fieldCoder instanceof OptionCoder) && fieldValue == null) {\n          throw new FuelError(\n            ErrorCode.ENCODE_ERROR,\n            `Invalid ${this.type}. Field \"${fieldName}\" not present.`\n          );\n        }\n\n        return fieldCoder.encode(fieldValue);\n      })\n    );\n  }\n\n  decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoders>, number] {\n    if (!this.#hasNestedOption && data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid struct data size.`);\n    }\n\n    let newOffset = offset;\n    const decodedValue = Object.keys(this.coders).reduce((obj, fieldName) => {\n      const fieldCoder = this.coders[fieldName];\n      let decoded;\n      [decoded, newOffset] = fieldCoder.decode(data, newOffset);\n\n      // eslint-disable-next-line no-param-reassign\n      obj[fieldName as keyof DecodedValueOf<TCoders>] = decoded;\n      return obj;\n    }, {} as DecodedValueOf<TCoders>);\n\n    return [decodedValue, newOffset];\n  }\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { concatBytes } from '@fuel-ts/utils';\n\nimport { hasNestedOption } from '../../utils/utilities';\n\nimport type { TypesOfCoder } from './AbstractCoder';\nimport { Coder } from './AbstractCoder';\n\ntype InputValueOf<TCoders extends Coder[]> = {\n  [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Input'];\n};\ntype DecodedValueOf<TCoders extends Coder[]> = {\n  [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Decoded'];\n};\n\nexport class TupleCoder<TCoders extends Coder[]> extends Coder<\n  InputValueOf<TCoders>,\n  DecodedValueOf<TCoders>\n> {\n  coders: TCoders;\n  #hasNestedOption: boolean;\n\n  constructor(coders: TCoders) {\n    const encodedLength = coders.reduce((acc, coder) => acc + coder.encodedLength, 0);\n    super('tuple', `(${coders.map((coder) => coder.type).join(', ')})`, encodedLength);\n    this.coders = coders;\n    this.#hasNestedOption = hasNestedOption(coders);\n  }\n\n  encode(value: InputValueOf<TCoders>): Uint8Array {\n    if (this.coders.length !== value.length) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Types/values length mismatch.`);\n    }\n\n    return concatBytes(this.coders.map((coder, i) => coder.encode(value[i])));\n  }\n\n  decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoders>, number] {\n    if (!this.#hasNestedOption && data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid tuple data size.`);\n    }\n\n    let newOffset = offset;\n    const decodedValue = this.coders.map((coder) => {\n      let decoded;\n      [decoded, newOffset] = coder.decode(data, newOffset);\n\n      return decoded;\n    });\n\n    return [decodedValue as DecodedValueOf<TCoders>, newOffset];\n  }\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport { concatBytes } from '@fuel-ts/utils';\n\nimport { MAX_BYTES, WORD_SIZE } from '../../utils/constants';\nimport { hasNestedOption, isUint8Array } from '../../utils/utilities';\n\nimport { Coder } from './AbstractCoder';\nimport type { TypesOfCoder } from './AbstractCoder';\nimport { BigNumberCoder } from './BigNumberCoder';\n\ntype InputValueOf<TCoder extends Coder> = Array<TypesOfCoder<TCoder>['Input']> | Uint8Array;\ntype DecodedValueOf<TCoder extends Coder> = Array<TypesOfCoder<TCoder>['Decoded']>;\n\nexport class VecCoder<TCoder extends Coder> extends Coder<\n  InputValueOf<TCoder>,\n  DecodedValueOf<TCoder>\n> {\n  coder: TCoder;\n  #hasNestedOption: boolean;\n\n  constructor(coder: TCoder) {\n    super('struct', `struct Vec`, WORD_SIZE);\n    this.coder = coder;\n    this.#hasNestedOption = hasNestedOption([coder]);\n  }\n\n  encode(value: InputValueOf<TCoder>): Uint8Array {\n    if (!Array.isArray(value) && !isUint8Array(value)) {\n      throw new FuelError(\n        ErrorCode.ENCODE_ERROR,\n        `Expected array value, or a Uint8Array. You can use arrayify to convert a value to a Uint8Array.`\n      );\n    }\n\n    const lengthCoder = new BigNumberCoder('u64');\n\n    if (isUint8Array(value)) {\n      return new Uint8Array([...lengthCoder.encode(value.length), ...value]);\n    }\n\n    const bytes = value.map((v) => this.coder.encode(v));\n    const lengthBytes = lengthCoder.encode(value.length);\n\n    return new Uint8Array([...lengthBytes, ...concatBytes(bytes)]);\n  }\n\n  decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoder>, number] {\n    if ((!this.#hasNestedOption && data.length < this.encodedLength) || data.length > MAX_BYTES) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid vec data size.`);\n    }\n\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = bn(new BigNumberCoder('u64').decode(lengthBytes, 0)[0]).toNumber();\n    const dataLength = length * this.coder.encodedLength;\n    const dataBytes = data.slice(offsetAndLength, offsetAndLength + dataLength);\n\n    if (!this.#hasNestedOption && dataBytes.length !== dataLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid vec byte data size.`);\n    }\n\n    let newOffset = offsetAndLength;\n    const chunks = [];\n    for (let i = 0; i < length; i++) {\n      const [decoded, optionOffset] = this.coder.decode(data, newOffset);\n      chunks.push(decoded);\n      newOffset = optionOffset;\n    }\n\n    return [chunks, newOffset];\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport { AbiCoder } from './AbiCoder';\nimport { FunctionFragment } from './FunctionFragment';\nimport type { DecodedValue, InputValue } from './encoding/coders/AbstractCoder';\nimport type { JsonAbiArgument, JsonAbiOld } from './types/JsonAbi';\nimport type { Configurable, JsonAbi } from './types/JsonAbiNew';\nimport { type EncodingVersion } from './utils/constants';\nimport { getEncodingVersion } from './utils/json-abi';\nimport { parseConcreteType, transpileAbi } from './utils/transpile-abi';\n\nexport class Interface {\n  readonly functions!: Record<string, FunctionFragment>;\n  readonly configurables: Record<string, Configurable>;\n  readonly jsonAbi: JsonAbi;\n  readonly encoding: EncodingVersion;\n  private readonly jsonAbiOld: JsonAbiOld;\n\n  constructor(jsonAbi: JsonAbi) {\n    this.jsonAbi = jsonAbi;\n    this.encoding = getEncodingVersion(jsonAbi.encodingVersion);\n    this.jsonAbiOld = transpileAbi(jsonAbi) as JsonAbiOld;\n    this.functions = Object.fromEntries(\n      this.jsonAbi.functions.map((fn) => [fn.name, new FunctionFragment(this.jsonAbiOld, fn)])\n    );\n\n    this.configurables = Object.fromEntries(this.jsonAbi.configurables.map((x) => [x.name, x]));\n  }\n\n  /**\n   * Returns function fragment for a dynamic input.\n   * @param nameOrSignatureOrSelector - name (e.g. 'transfer'), signature (e.g. 'transfer(address,uint256)') or selector (e.g. '0x00000000a9059cbb') of the function fragment\n   */\n  getFunction(nameOrSignatureOrSelector: string): FunctionFragment {\n    const fn = Object.values<FunctionFragment>(this.functions).find(\n      (f) =>\n        f.name === nameOrSignatureOrSelector ||\n        f.signature === nameOrSignatureOrSelector ||\n        f.selector === nameOrSignatureOrSelector\n    );\n\n    if (fn !== undefined) {\n      return fn;\n    }\n\n    throw new FuelError(\n      ErrorCode.FUNCTION_NOT_FOUND,\n      `function ${nameOrSignatureOrSelector} not found: ${JSON.stringify(fn)}.`\n    );\n  }\n\n  // Decode the result of a function call\n  decodeFunctionResult(functionFragment: FunctionFragment | string, data: BytesLike): any {\n    const fragment =\n      typeof functionFragment === 'string' ? this.getFunction(functionFragment) : functionFragment;\n\n    return fragment.decodeOutput(data);\n  }\n\n  decodeLog(data: BytesLike, logId: string): any {\n    const loggedType = this.jsonAbiOld.loggedTypes.find((type) => type.logId === logId);\n    if (!loggedType) {\n      throw new FuelError(\n        ErrorCode.LOG_TYPE_NOT_FOUND,\n        `Log type with logId '${logId}' doesn't exist in the ABI.`\n      );\n    }\n\n    return AbiCoder.decode(this.jsonAbiOld, loggedType.loggedType, arrayify(data), 0, {\n      encoding: this.encoding,\n    });\n  }\n\n  encodeConfigurable(name: string, value: InputValue) {\n    const configurable = this.jsonAbiOld.configurables.find((c) => c.name === name);\n    if (!configurable) {\n      throw new FuelError(\n        ErrorCode.CONFIGURABLE_NOT_FOUND,\n        `A configurable with the '${name}' was not found in the ABI.`\n      );\n    }\n\n    return AbiCoder.encode(this.jsonAbiOld, configurable.configurableType, value, {\n      encoding: this.encoding,\n    });\n  }\n\n  encodeType(concreteTypeId: string, value: InputValue): Uint8Array {\n    const typeArg = parseConcreteType(\n      this.jsonAbi,\n      this.jsonAbiOld.types,\n      concreteTypeId,\n      ''\n    ) as JsonAbiArgument;\n    return AbiCoder.encode(this.jsonAbiOld, typeArg, value, {\n      encoding: this.encoding,\n    });\n  }\n\n  decodeType(concreteTypeId: string, data: Uint8Array): [DecodedValue | undefined, number] {\n    const typeArg = parseConcreteType(\n      this.jsonAbi,\n      this.jsonAbiOld.types,\n      concreteTypeId,\n      ''\n    ) as JsonAbiArgument;\n\n    return AbiCoder.decode(this.jsonAbiOld, typeArg, data, 0, { encoding: this.encoding });\n  }\n}\n", "import { FuelError, ErrorCode } from '@fuel-ts/errors';\n\nimport type { JsonAbiOld, JsonAbiArgument } from './types/JsonAbi';\nimport { arrayRegEx, enumRegEx, genericRegEx, stringRegEx, structRegEx } from './utils/constants';\nimport { findTypeById } from './utils/json-abi';\n\nexport class ResolvedAbiType {\n  readonly abi: JsonAbiOld;\n  name: string;\n  readonly type: string;\n  readonly originalTypeArguments: readonly JsonAbiArgument[] | null;\n  readonly components: readonly ResolvedAbiType[] | null;\n\n  constructor(abi: JsonAbiOld, argument: JsonAbiArgument) {\n    this.abi = abi;\n\n    this.name = argument.name;\n\n    const jsonABIType = findTypeById(abi, argument.type);\n\n    if (jsonABIType.type.length > 256) {\n      throw new FuelError(\n        ErrorCode.INVALID_COMPONENT,\n        `The provided ABI type is too long: ${jsonABIType.type}.`\n      );\n    }\n\n    this.type = jsonABIType.type;\n    this.originalTypeArguments = argument.typeArguments;\n    this.components = ResolvedAbiType.getResolvedGenericComponents(\n      abi,\n      argument,\n      jsonABIType.components,\n      jsonABIType.typeParameters ??\n        ResolvedAbiType.getImplicitGenericTypeParameters(abi, jsonABIType.components)\n    );\n  }\n\n  private static getResolvedGenericComponents(\n    abi: JsonAbiOld,\n    arg: JsonAbiArgument,\n    components: readonly JsonAbiArgument[] | null,\n    typeParameters: readonly number[] | null\n  ) {\n    if (components === null) {\n      return null;\n    }\n    if (typeParameters === null || typeParameters.length === 0) {\n      return components.map((c) => new ResolvedAbiType(abi, c));\n    }\n\n    const typeParametersAndArgsMap = typeParameters.reduce(\n      (obj, typeParameter, typeParameterIndex) => {\n        const o: Record<number, JsonAbiArgument> = { ...obj };\n        o[typeParameter] = structuredClone(\n          arg.typeArguments?.[typeParameterIndex]\n        ) as JsonAbiArgument;\n        return o;\n      },\n      {} as Record<number, JsonAbiArgument>\n    );\n\n    const resolvedComponents = this.resolveGenericArgTypes(\n      abi,\n      components,\n      typeParametersAndArgsMap\n    );\n\n    return resolvedComponents.map((c) => new ResolvedAbiType(abi, c));\n  }\n\n  private static resolveGenericArgTypes(\n    abi: JsonAbiOld,\n    args: readonly JsonAbiArgument[],\n    typeParametersAndArgsMap: Record<number, JsonAbiArgument>\n  ): readonly JsonAbiArgument[] {\n    return args.map((arg) => {\n      if (typeParametersAndArgsMap[arg.type] !== undefined) {\n        return {\n          ...typeParametersAndArgsMap[arg.type],\n          name: arg.name,\n        };\n      }\n\n      if (arg.typeArguments) {\n        return {\n          ...structuredClone(arg),\n          typeArguments: this.resolveGenericArgTypes(\n            abi,\n            arg.typeArguments,\n            typeParametersAndArgsMap\n          ),\n        };\n      }\n\n      const argType = findTypeById(abi, arg.type);\n      const implicitTypeParameters = this.getImplicitGenericTypeParameters(abi, argType.components);\n\n      if (implicitTypeParameters && implicitTypeParameters.length > 0) {\n        return {\n          ...structuredClone(arg),\n          typeArguments: implicitTypeParameters.map((itp) => typeParametersAndArgsMap[itp]),\n        };\n      }\n\n      return arg;\n    });\n  }\n\n  private static getImplicitGenericTypeParameters(\n    abi: JsonAbiOld,\n    args: readonly JsonAbiArgument[] | null,\n    implicitGenericParametersParam?: number[]\n  ) {\n    if (!Array.isArray(args)) {\n      return null;\n    }\n\n    const implicitGenericParameters: number[] = implicitGenericParametersParam ?? [];\n\n    args.forEach((a) => {\n      const argType = findTypeById(abi, a.type);\n\n      if (genericRegEx.test(argType.type)) {\n        implicitGenericParameters.push(argType.typeId);\n        return;\n      }\n\n      if (!Array.isArray(a.typeArguments)) {\n        return;\n      }\n      this.getImplicitGenericTypeParameters(abi, a.typeArguments, implicitGenericParameters);\n    });\n\n    return implicitGenericParameters.length > 0 ? implicitGenericParameters : null;\n  }\n\n  getSignature(): string {\n    const prefix = this.getArgSignaturePrefix();\n    const content = this.getArgSignatureContent();\n\n    return `${prefix}${content}`;\n  }\n\n  private getArgSignaturePrefix(): string {\n    const structMatch = structRegEx.test(this.type);\n    if (structMatch) {\n      return 's';\n    }\n\n    const arrayMatch = arrayRegEx.test(this.type);\n    if (arrayMatch) {\n      return 'a';\n    }\n\n    const enumMatch = enumRegEx.test(this.type);\n    if (enumMatch) {\n      return 'e';\n    }\n\n    return '';\n  }\n\n  private getArgSignatureContent(): string {\n    if (this.type === 'raw untyped ptr') {\n      return 'rawptr';\n    }\n\n    if (this.type === 'raw untyped slice') {\n      return 'rawslice';\n    }\n\n    const strMatch = stringRegEx.exec(this.type)?.groups;\n    if (strMatch) {\n      return `str[${strMatch.length}]`;\n    }\n\n    if (this.components === null) {\n      return this.type;\n    }\n\n    const arrayMatch = arrayRegEx.exec(this.type)?.groups;\n\n    if (arrayMatch) {\n      return `[${this.components[0].getSignature()};${arrayMatch.length}]`;\n    }\n\n    const typeArgumentsSignature =\n      this.originalTypeArguments !== null\n        ? `<${this.originalTypeArguments\n            .map((a) => new ResolvedAbiType(this.abi, a).getSignature())\n            .join(',')}>`\n        : '';\n\n    const componentsSignature = `(${this.components.map((c) => c.getSignature()).join(',')})`;\n\n    return `${typeArgumentsSignature}${componentsSignature}`;\n  }\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport type { ResolvedAbiType } from '../ResolvedAbiType';\nimport type { JsonAbiOld, JsonAbiArgument, JsonAbiType } from '../types/JsonAbi';\nimport type { AbiFunction, JsonAbi } from '../types/JsonAbiNew';\n\nimport { ENCODING_V1, VOID_TYPE, type EncodingVersion } from './constants';\n\n/**\n * Asserts that the encoding version is supported by the ABI coder.\n *\n * @param encoding - the encoding version to check\n * @returns the encoding version\n * @throws FuelError if the encoding version is not supported\n */\nexport const getEncodingVersion = (encoding?: string): EncodingVersion => {\n  switch (encoding) {\n    case undefined:\n    case ENCODING_V1:\n      return ENCODING_V1;\n\n    default:\n      throw new FuelError(\n        ErrorCode.UNSUPPORTED_ENCODING_VERSION,\n        `Encoding version '${encoding}' is unsupported.`\n      );\n  }\n};\n\n/**\n * Find a function by name in the ABI.\n *\n * @param abi - the JsonAbi object\n * @param name - the name of the function to find\n * @returns the JsonAbi function object\n */\nexport const findFunctionByName = (abi: JsonAbi, name: string): AbiFunction => {\n  const fn = abi.functions.find((f) => f.name === name);\n  if (!fn) {\n    throw new FuelError(\n      ErrorCode.FUNCTION_NOT_FOUND,\n      `Function with name '${name}' doesn't exist in the ABI`\n    );\n  }\n  return fn;\n};\n\n/**\n * Find a type by its typeId in the ABI.\n *\n * @param abi - the JsonAbi object\n * @param typeId - the typeId of the type to find\n * @returns the JsonAbi type object\n */\nexport const findTypeById = (abi: JsonAbiOld, typeId: number): JsonAbiType => {\n  const type = abi.types.find((t) => t.typeId === typeId);\n  if (!type) {\n    throw new FuelError(\n      ErrorCode.TYPE_NOT_FOUND,\n      `Type with typeId '${typeId}' doesn't exist in the ABI.`\n    );\n  }\n  return type;\n};\n\n/**\n * Find all non-void inputs in a list of inputs.\n * i.e. all inputs that are not of the type '()'.\n *\n * @param abi - the JsonAbi object\n * @param inputs - the list of inputs to filter\n * @returns the list of non-void inputs\n */\nexport const findNonVoidInputs = (\n  abi: JsonAbiOld,\n  inputs: readonly JsonAbiArgument[]\n): JsonAbiArgument[] => inputs.filter((input) => findTypeById(abi, input.type).type !== VOID_TYPE);\n\n/**\n * Find the vector buffer argument in a list of components.\n *\n * @param components - the list of components to search\n * @returns the vector buffer argument\n */\nexport const findVectorBufferArgument = (\n  components: readonly ResolvedAbiType[]\n): JsonAbiArgument => {\n  const bufferComponent = components.find((c) => c.name === 'buf');\n  const bufferTypeArgument = bufferComponent?.originalTypeArguments?.[0];\n  if (!bufferComponent || !bufferTypeArgument) {\n    throw new FuelError(\n      ErrorCode.INVALID_COMPONENT,\n      `The Vec type provided is missing or has a malformed 'buf' component.`\n    );\n  }\n  return bufferTypeArgument;\n};\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport type { GetCoderFn } from '../../types/GetCoder';\nimport type { EncodingVersion } from '../../utils/constants';\nimport { ENCODING_V1 } from '../../utils/constants';\n\nimport { getCoder as getCoderV1 } from './getCoderV1';\n\n/**\n * Retrieves the appropriate encoding function for a given encoding version.\n *\n * @param encoding - the version to provide a strategy for.\n * @throws for an unsupported encoding version.\n * @returns the appropriate encoding strategy.\n */\nexport function getCoderForEncoding(encoding: EncodingVersion = ENCODING_V1): GetCoderFn {\n  switch (encoding) {\n    case ENCODING_V1:\n      return getCoderV1;\n    default:\n      throw new FuelError(\n        ErrorCode.UNSUPPORTED_ENCODING_VERSION,\n        `Encoding version ${encoding} is unsupported.`\n      );\n  }\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport { ResolvedAbiType } from '../../ResolvedAbiType';\nimport type { EncodingOptions } from '../../types/EncodingOptions';\nimport type { GetCoderFn } from '../../types/GetCoder';\nimport {\n  B256_CODER_TYPE,\n  B512_CODER_TYPE,\n  BOOL_CODER_TYPE,\n  BYTES_CODER_TYPE,\n  ENCODING_V1,\n  OPTION_CODER_TYPE,\n  RAW_PTR_CODER_TYPE,\n  RAW_SLICE_CODER_TYPE,\n  STD_STRING_CODER_TYPE,\n  STR_SLICE_CODER_TYPE,\n  U16_CODER_TYPE,\n  U256_CODER_TYPE,\n  U32_CODER_TYPE,\n  U64_CODER_TYPE,\n  U8_CODER_TYPE,\n  VEC_CODER_TYPE,\n  VOID_TYPE,\n  arrayRegEx,\n  enumRegEx,\n  fullNameRegExMatch,\n  stringRegEx,\n  structRegEx,\n  tupleRegEx,\n} from '../../utils/constants';\nimport { findVectorBufferArgument } from '../../utils/json-abi';\nimport type { Coder } from '../coders/AbstractCoder';\nimport { ArrayCoder } from '../coders/ArrayCoder';\nimport { B256Coder } from '../coders/B256Coder';\nimport { B512Coder } from '../coders/B512Coder';\nimport { BigNumberCoder } from '../coders/BigNumberCoder';\nimport { BooleanCoder } from '../coders/BooleanCoder';\nimport { ByteCoder } from '../coders/ByteCoder';\nimport { EnumCoder } from '../coders/EnumCoder';\nimport { NumberCoder } from '../coders/NumberCoder';\nimport { OptionCoder } from '../coders/OptionCoder';\nimport { RawSliceCoder } from '../coders/RawSliceCoder';\nimport { StdStringCoder } from '../coders/StdStringCoder';\nimport { StrSliceCoder } from '../coders/StrSliceCoder';\nimport { StringCoder } from '../coders/StringCoder';\nimport { StructCoder } from '../coders/StructCoder';\nimport { TupleCoder } from '../coders/TupleCoder';\nimport { VecCoder } from '../coders/VecCoder';\nimport { VoidCoder } from '../coders/VoidCoder';\n\nimport { getCoders } from './getCoders';\n\n/**\n * Retrieves coders that adhere to the v0 spec.\n *\n * @param resolvedAbiType - the resolved type to return a coder for.\n * @param options - options to be utilized during the encoding process.\n * @returns the coder for a given type.\n */\nexport const getCoder: GetCoderFn = (\n  resolvedAbiType: ResolvedAbiType,\n  _options?: EncodingOptions\n): Coder => {\n  switch (resolvedAbiType.type) {\n    case U8_CODER_TYPE:\n    case U16_CODER_TYPE:\n    case U32_CODER_TYPE:\n      return new NumberCoder(resolvedAbiType.type);\n    case U64_CODER_TYPE:\n    case RAW_PTR_CODER_TYPE:\n      return new BigNumberCoder('u64');\n    case U256_CODER_TYPE:\n      return new BigNumberCoder('u256');\n    case RAW_SLICE_CODER_TYPE:\n      return new RawSliceCoder();\n    case BOOL_CODER_TYPE:\n      return new BooleanCoder();\n    case B256_CODER_TYPE:\n      return new B256Coder();\n    case B512_CODER_TYPE:\n      return new B512Coder();\n    case BYTES_CODER_TYPE:\n      return new ByteCoder();\n    case STD_STRING_CODER_TYPE:\n      return new StdStringCoder();\n    case STR_SLICE_CODER_TYPE:\n      return new StrSliceCoder();\n    case VOID_TYPE:\n      return new VoidCoder();\n    default:\n      break;\n  }\n\n  const stringMatch = stringRegEx.exec(resolvedAbiType.type)?.groups;\n  if (stringMatch) {\n    const length = parseInt(stringMatch.length, 10);\n\n    return new StringCoder(length);\n  }\n\n  // ABI types underneath MUST have components by definition\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const components = resolvedAbiType.components!;\n\n  const arrayMatch = arrayRegEx.exec(resolvedAbiType.type)?.groups;\n\n  if (arrayMatch) {\n    const length = parseInt(arrayMatch.length, 10);\n    const arg = components[0];\n    if (!arg) {\n      throw new FuelError(\n        ErrorCode.INVALID_COMPONENT,\n        `The provided Array type is missing an item of 'component'.`\n      );\n    }\n\n    const arrayElementCoder = getCoder(arg);\n    return new ArrayCoder(arrayElementCoder as Coder, length);\n  }\n\n  if (resolvedAbiType.type === VEC_CODER_TYPE) {\n    const arg = findVectorBufferArgument(components);\n    const argType = new ResolvedAbiType(resolvedAbiType.abi, arg);\n\n    const itemCoder = getCoder(argType, { encoding: ENCODING_V1 });\n    return new VecCoder(itemCoder as Coder);\n  }\n\n  // component name\n  const coderName = resolvedAbiType.type.match(fullNameRegExMatch)?.[0];\n\n  const structMatch = structRegEx.test(resolvedAbiType.type);\n  if (structMatch && coderName) {\n    const coders = getCoders(components, { getCoder });\n    return new StructCoder(coderName, coders);\n  }\n\n  const enumMatch = enumRegEx.test(resolvedAbiType.type);\n  if (enumMatch && coderName) {\n    const coders = getCoders(components, { getCoder });\n    const isOptionEnum = resolvedAbiType.type === OPTION_CODER_TYPE;\n    if (isOptionEnum) {\n      return new OptionCoder(coderName, coders);\n    }\n    return new EnumCoder(coderName, coders);\n  }\n\n  const tupleMatch = tupleRegEx.exec(resolvedAbiType.type)?.groups;\n  if (tupleMatch) {\n    const coders = components.map((component) => getCoder(component, { encoding: ENCODING_V1 }));\n    return new TupleCoder(coders as Coder[]);\n  }\n\n  throw new FuelError(\n    ErrorCode.CODER_NOT_FOUND,\n    `Coder not found: ${JSON.stringify(resolvedAbiType)}.`\n  );\n};\n", "import { VOID_TYPE } from '../../utils/constants';\n\nimport { Coder } from './AbstractCoder';\n\nexport class VoidCoder extends Coder<undefined, undefined> {\n  constructor() {\n    super('void', VOID_TYPE, 0);\n  }\n\n  encode(_value: undefined): Uint8Array {\n    return new Uint8Array([]);\n  }\n\n  decode(_data: Uint8Array, offset: number): [undefined, number] {\n    return [undefined, offset];\n  }\n}\n", "import type { ResolvedAbiType } from '../../ResolvedAbiType';\nimport type { EncodingOptions } from '../../types/EncodingOptions';\nimport type { GetCoderFn } from '../../types/GetCoder';\nimport type { Coder } from '../coders/AbstractCoder';\n\n/**\n * @param components - types array to create coders for.\n * @param options - options - options to be utilized during the encoding process.\n * @returns an object containing types and an appropriate coder.\n */\nexport function getCoders(\n  components: readonly ResolvedAbiType[],\n  options: EncodingOptions & { getCoder: GetCoderFn }\n) {\n  const { getCoder } = options;\n  return components.reduce((obj, component) => {\n    const o: Record<string, Coder> = obj;\n\n    o[component.name] = getCoder(component, options);\n    return o;\n  }, {});\n}\n", "import { ResolvedAbiType } from './ResolvedAbiType';\nimport type { DecodedValue, InputValue, Coder } from './encoding/coders/AbstractCoder';\nimport { getCoderForEncoding } from './encoding/strategies/getCoderForEncoding';\nimport type { EncodingOptions } from './types/EncodingOptions';\nimport type { JsonAbiOld, JsonAbiArgument } from './types/JsonAbi';\n\nexport abstract class AbiCoder {\n  static getCoder(\n    abi: JsonAbiOld,\n    argument: JsonAbiArgument,\n    options: EncodingOptions = {\n      padToWordSize: false,\n    }\n  ): Coder {\n    const resolvedAbiType = new ResolvedAbiType(abi, argument);\n    return getCoderForEncoding(options.encoding)(resolvedAbiType, options);\n  }\n\n  static encode(\n    abi: JsonAbiOld,\n    argument: JsonAbiArgument,\n    value: InputValue,\n    options?: EncodingOptions\n  ) {\n    return this.getCoder(abi, argument, options).encode(value);\n  }\n\n  static decode(\n    abi: JsonAbiOld,\n    argument: JsonAbiArgument,\n    data: Uint8Array,\n    offset: number,\n    options?: EncodingOptions\n  ): [DecodedValue | undefined, number] {\n    return this.getCoder(abi, argument, options).decode(data, offset) as [\n      DecodedValue | undefined,\n      number,\n    ];\n  }\n}\n", "import { bufferFromString } from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { sha256 } from '@fuel-ts/hasher';\nimport { bn } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport { AbiCoder } from './AbiCoder';\nimport { ResolvedAbiType } from './ResolvedAbiType';\nimport type { DecodedValue, InputValue } from './encoding/coders/AbstractCoder';\nimport { StdStringCoder } from './encoding/coders/StdStringCoder';\nimport { TupleCoder } from './encoding/coders/TupleCoder';\nimport type { JsonAbiOld, JsonAbiFunction } from './types/JsonAbi';\nimport type { AbiFunction, AbiFunctionAttribute } from './types/JsonAbiNew';\nimport type { EncodingVersion } from './utils/constants';\nimport { getFunctionInputs } from './utils/getFunctionInputs';\nimport { findNonVoidInputs, getEncodingVersion } from './utils/json-abi';\nimport { padValuesWithUndefined } from './utils/padValuesWithUndefined';\n\nexport class FunctionFragment {\n  readonly signature: string;\n  readonly selector: string;\n  readonly selectorBytes: Uint8Array;\n  readonly encoding: EncodingVersion;\n  readonly name: string;\n  readonly jsonFn: AbiFunction;\n  readonly attributes: readonly AbiFunctionAttribute[];\n\n  private readonly jsonAbiOld: JsonAbiOld;\n  private readonly jsonFnOld: JsonAbiFunction;\n\n  constructor(jsonAbi: JsonAbiOld, fn: AbiFunction) {\n    this.jsonFn = fn;\n    this.jsonAbiOld = jsonAbi;\n    this.jsonFnOld = jsonAbi.functions.find((f) => f.name === fn.name) as JsonAbiFunction;\n    this.name = fn.name;\n    this.signature = FunctionFragment.getSignature(this.jsonAbiOld, this.jsonFnOld);\n    this.selector = FunctionFragment.getFunctionSelector(this.signature);\n    this.selectorBytes = new StdStringCoder().encode(this.name);\n    this.encoding = getEncodingVersion(jsonAbi.encoding);\n\n    this.attributes = this.jsonFn.attributes ?? [];\n  }\n\n  private static getSignature(abi: JsonAbiOld, fn: JsonAbiFunction): string {\n    const inputsSignatures = fn.inputs.map((input) =>\n      new ResolvedAbiType(abi, input).getSignature()\n    );\n    return `${fn.name}(${inputsSignatures.join(',')})`;\n  }\n\n  private static getFunctionSelector(functionSignature: string) {\n    const hashedFunctionSignature = sha256(bufferFromString(functionSignature, 'utf-8'));\n    // get first 4 bytes of signature + 0x prefix. then left-pad it to 8 bytes using toHex(8)\n    return bn(hashedFunctionSignature.slice(0, 10)).toHex(8);\n  }\n\n  encodeArguments(values: InputValue[]): Uint8Array {\n    const inputs = getFunctionInputs({ jsonAbi: this.jsonAbiOld, inputs: this.jsonFnOld.inputs });\n    const mandatoryInputLength = inputs.filter((i) => !i.isOptional).length;\n    if (values.length < mandatoryInputLength) {\n      throw new FuelError(\n        ErrorCode.ABI_TYPES_AND_VALUES_MISMATCH,\n        `Invalid number of arguments. Expected a minimum of ${mandatoryInputLength} arguments, received ${values.length}`\n      );\n    }\n\n    const coders = this.jsonFnOld.inputs.map((t) =>\n      AbiCoder.getCoder(this.jsonAbiOld, t, {\n        encoding: this.encoding,\n      })\n    );\n\n    const argumentValues = padValuesWithUndefined(values, this.jsonFn.inputs);\n    return new TupleCoder(coders).encode(argumentValues);\n  }\n\n  decodeArguments(data: BytesLike) {\n    const bytes = arrayify(data);\n    const nonVoidInputs = findNonVoidInputs(this.jsonAbiOld, this.jsonFnOld.inputs);\n\n    if (nonVoidInputs.length === 0) {\n      // The VM is current return 0x0000000000000000, but we should treat it as undefined / void\n      if (bytes.length === 0) {\n        return undefined;\n      }\n\n      throw new FuelError(\n        ErrorCode.DECODE_ERROR,\n        `Types/values length mismatch during decode. ${JSON.stringify({\n          count: {\n            types: this.jsonFn.inputs.length,\n            nonVoidInputs: nonVoidInputs.length,\n            values: bytes.length,\n          },\n          value: {\n            args: this.jsonFn.inputs,\n            nonVoidInputs,\n            values: bytes,\n          },\n        })}`\n      );\n    }\n\n    const result = this.jsonFnOld.inputs.reduce(\n      (obj: { decoded: unknown[]; offset: number }, input) => {\n        const coder = AbiCoder.getCoder(this.jsonAbiOld, input, { encoding: this.encoding });\n        const [decodedValue, decodedOffset] = coder.decode(bytes, obj.offset);\n\n        return {\n          decoded: [...obj.decoded, decodedValue],\n          offset: decodedOffset,\n        };\n      },\n      { decoded: [], offset: 0 }\n    );\n\n    return result.decoded;\n  }\n\n  decodeOutput(data: BytesLike): [DecodedValue | undefined, number] {\n    const bytes = arrayify(data);\n    const coder = AbiCoder.getCoder(this.jsonAbiOld, this.jsonFnOld.output, {\n      encoding: this.encoding,\n    });\n\n    return coder.decode(bytes, 0) as [DecodedValue | undefined, number];\n  }\n\n  /**\n   * Checks if the function is read-only i.e. it only reads from storage, does not write to it.\n   *\n   * @returns True if the function is read-only or pure, false otherwise.\n   */\n  isReadOnly(): boolean {\n    const storageAttribute = this.attributes.find((attr) => attr.name === 'storage');\n    return !storageAttribute?.arguments?.includes('write');\n  }\n}\n", "import type { JsonAbiOld, JsonAbiArgument } from '../types/JsonAbi';\n\nimport { optionRegEx, VOID_TYPE } from './constants';\nimport { findTypeById } from './json-abi';\n\nexport type FunctionInput<TArg extends JsonAbiArgument = JsonAbiArgument> = TArg & {\n  isOptional: boolean;\n};\n\nexport const getFunctionInputs = (params: {\n  jsonAbi: JsonAbiOld;\n  inputs: readonly JsonAbiArgument[];\n}): Array<FunctionInput> => {\n  const { jsonAbi, inputs } = params;\n  let isMandatory = false;\n\n  return inputs.reduceRight((result, input) => {\n    const type = findTypeById(jsonAbi, input.type);\n    isMandatory = isMandatory || (type.type !== VOID_TYPE && !optionRegEx.test(type.type));\n    return [{ ...input, isOptional: !isMandatory }, ...result];\n  }, [] as FunctionInput[]);\n};\n", "import type { InputValue } from '../encoding/coders/AbstractCoder';\n\nexport const padValuesWithUndefined = (values: InputValue[], inputs: ArrayLike<unknown>) => {\n  if (values.length >= inputs.length) {\n    return values;\n  }\n\n  const paddedValues = values.slice();\n  paddedValues.length = inputs.length;\n  paddedValues.fill(undefined, values.length);\n  return paddedValues;\n};\n", "/* eslint-disable no-restricted-globals */\n/* eslint-disable no-param-reassign */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n\nconst findTypeByConcreteId = (types, id) => types.find((x) => x.concreteTypeId === id);\n\nconst findConcreteTypeById = (abi, id) => abi.concreteTypes.find((x) => x.concreteTypeId === id);\n\nfunction finsertTypeIdByConcreteTypeId(abi, types, id) {\n  const concreteType = findConcreteTypeById(abi, id);\n\n  if (concreteType.metadataTypeId !== undefined) {\n    return concreteType.metadataTypeId;\n  }\n\n  const type = findTypeByConcreteId(types, id);\n  if (type) {\n    return type.typeId;\n  }\n\n  types.push({\n    typeId: types.length,\n    type: concreteType.type,\n    components: parseComponents(concreteType.components),\n    concreteTypeId: id,\n    typeParameters: concreteType.typeParameters ?? null,\n    originalConcreteTypeId: concreteType?.concreteTypeId,\n  });\n\n  return types.length - 1;\n}\n\nfunction parseFunctionTypeArguments(abi, types, concreteType) {\n  return (\n    concreteType.typeArguments?.map((cTypeId) => {\n      const self = findConcreteTypeById(abi, cTypeId);\n      const type = !isNaN(cTypeId) ? cTypeId : finsertTypeIdByConcreteTypeId(abi, types, cTypeId);\n      return {\n        name: '',\n        type,\n        // originalTypeId: cTypeId,\n        typeArguments: parseFunctionTypeArguments(abi, types, self),\n      };\n    }) ?? null\n  );\n}\n\nexport function parseConcreteType(abi, types, concreteTypeId, name) {\n  const type = finsertTypeIdByConcreteTypeId(abi, types, concreteTypeId);\n  const concrete = findConcreteTypeById(abi, concreteTypeId);\n  return {\n    name: name ?? '',\n    type,\n    // concreteTypeId,\n    typeArguments: parseFunctionTypeArguments(abi, types, concrete),\n  };\n}\n\nfunction parseComponents(abi, types, components) {\n  return (\n    components?.map((component) => {\n      const { typeId, name, typeArguments } = component;\n      const type = !isNaN(typeId) ? typeId : finsertTypeIdByConcreteTypeId(abi, types, typeId);\n      return {\n        name,\n        type,\n        // originalTypeId: typeId,\n        typeArguments: parseComponents(abi, types, typeArguments),\n      };\n    }) ?? null\n  );\n}\n\n/**\n * This will transpile new ABIs (spec: \"1\") to the old format.\n *\n * The new format got these new props:\n *    - `specVersion`,\n *    - `concreteTypes`\n *    - `metadataTypes`\n *\n * The old format contains only:\n *    - `types`\n */\nexport function transpileAbi(abi) {\n  // do not transpile older versions\n  if (!abi.specVersion) {\n    return abi;\n  }\n\n  // 0. define empty types array\n  const types = [];\n\n  // 1. root level of metadata types\n  abi.metadataTypes.forEach((m) => {\n    const t = {\n      typeId: m.metadataTypeId,\n      type: m.type,\n      components: m.components ?? (m.type === '()' ? [] : null),\n      typeParameters: m.typeParameters ?? null,\n    };\n    types.push(t);\n  });\n\n  // 2. the metadata's components\n  types.forEach((t) => {\n    t.components = parseComponents(abi, types, t.components);\n  });\n\n  // 3. functions inputs/outputs\n  const functions = abi.functions.map((fn) => {\n    const inputs = fn.inputs.map(({ concreteTypeId, name }) =>\n      parseConcreteType(abi, types, concreteTypeId, name)\n    );\n    const output = parseConcreteType(abi, types, fn.output, '');\n    return { ...fn, inputs, output };\n  });\n\n  // 4. configurables\n  const configurables = abi.configurables.map((conf) => ({\n    name: conf.name,\n    configurableType: parseConcreteType(abi, types, conf.concreteTypeId),\n    offset: conf.offset,\n  }));\n\n  // 5. loggedTypes\n  const loggedTypes = abi.loggedTypes.map((log) => ({\n    logId: log.logId,\n    loggedType: parseConcreteType(abi, types, log.concreteTypeId),\n  }));\n\n  // transpiled ABI\n  const transpiled = {\n    encoding: abi.encodingVersion,\n    types,\n    functions,\n    loggedTypes,\n    messagesTypes: abi.messagesTypes,\n    configurables,\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return transpiled as any;\n}\n", "import type { BN } from '@fuel-ts/math';\n\nimport { Interface } from '../Interface';\nimport { B256Coder } from '../encoding/coders/B256Coder';\nimport { BigNumberCoder } from '../encoding/coders/BigNumberCoder';\nimport { StdStringCoder } from '../encoding/coders/StdStringCoder';\nimport type { JsonAbi } from '../types/JsonAbiNew';\n\nimport { WORD_SIZE } from './constants';\n\nexport type DecodedScriptData = {\n  amount: BN;\n  assetId: string;\n  contractId: string;\n  functionSelector: string;\n  functionArgs: unknown[] | undefined;\n};\n\n/**\n * Decodes the script data used when calling programs to deduce the amount, asset ID,\n * contract ID, function selector and function arguments passed.\n *\n * @param scriptData - the script data to decode.\n * @param abi - the abi used for the call, to deduce arguments (optional).\n * @returns the decoded script data.\n */\nexport const decodeScriptData = (scriptData: Uint8Array, abi?: JsonAbi): DecodedScriptData => {\n  // Slice all data sections at required offsets\n  const [amount, amountOffset] = new BigNumberCoder('u64').decode(scriptData, 0);\n  const [assetId, assetIdOffset] = new B256Coder().decode(scriptData, amountOffset);\n  const [contractId, contractIdOffset] = new B256Coder().decode(scriptData, assetIdOffset);\n  const [functionSelector, functionSelectorOffset] = new StdStringCoder().decode(\n    scriptData,\n    contractIdOffset + WORD_SIZE + WORD_SIZE\n  );\n\n  // Slice the function arguments after the function selector\n  const functionArgsBytes = scriptData.slice(functionSelectorOffset);\n\n  // Decode the function arguments using the function selector if we have the abi\n  const functionArgs = abi\n    ? new Interface(abi).getFunction(functionSelector).decodeArguments(functionArgsBytes)\n    : undefined;\n\n  return {\n    amount,\n    assetId,\n    contractId,\n    functionSelector,\n    functionArgs,\n  };\n};\n", "/**\n * Internal assertion helpers.\n * @module\n */\n\n/** Asserts something is positive integer. */\nfunction anumber(n: number): void {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n}\n\n/** Is number an Uint8Array? Copied from utils for perf. */\nfunction isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n/** Asserts something is Uint8Array. */\nfunction abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n\n/** Hash interface. */\nexport type Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\n\n/** Asserts something is hash */\nfunction ahash(h: Hash): void {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  anumber(h.outputLen);\n  anumber(h.blockLen);\n}\n\n/** Asserts a hash instance has not been destroyed / finished */\nfunction aexists(instance: any, checkFinished = true): void {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\n\n/** Asserts output is properly-sized byte array */\nfunction aoutput(out: any, instance: any): void {\n  abytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error('digestInto() expects output buffer of length at least ' + min);\n  }\n}\n\nexport { anumber, abytes, ahash, aexists, aoutput };\n", "/**\n * Internal webcrypto alias.\n * We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n * See utils.ts for details.\n * @module\n */\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto: any =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n", "/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport function u8(arr: TypedArray): Uint8Array {\n  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\nexport function u32(arr: TypedArray): Uint32Array {\n  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n\n// Cast array to view\nexport function createView(arr: TypedArray): DataView {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word: number, shift: number): number {\n  return (word << (32 - shift)) | (word >>> shift);\n}\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word: number, shift: number): number {\n  return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE: boolean = /* @__PURE__ */ (() =>\n  new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n// The byte swap operation for uint32\nexport function byteSwap(word: number): number {\n  return (\n    ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff)\n  );\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const byteSwapIfBE: (n: number) => number = isLE\n  ? (n: number) => n\n  : (n: number) => byteSwap(n);\n\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr: Uint32Array): void {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * Convert byte array to hex string.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * Convert hex string to byte array.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async (): Promise<void> => {};\n\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(\n  iters: number,\n  tick: number,\n  cb: (i: number) => void\n): Promise<void> {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * Convert JS string to byte array.\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('utf8ToBytes expected string, got ' + typeof str);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n/** Accepted input of hash functions. Strings are converted to byte arrays. */\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n/** For runtime check if class implements interface */\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\n/** Hash function */\nexport type CHash = ReturnType<typeof wrapConstructor>;\n/** Hash function with output */\nexport type CHashO = ReturnType<typeof wrapConstructorWithOpts>;\n/** XOF with output */\nexport type CHashXO = ReturnType<typeof wrapXOFConstructorWithOpts>;\n\n/** Wraps hash function, creating an interface on top of it */\nexport function wrapConstructor<T extends Hash<T>>(\n  hashCons: () => Hash<T>\n): {\n  (msg: Input): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(): Hash<T>;\n} {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts: T): Hash<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts: T): HashXOF<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return crypto.randomBytes(bytesLength);\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { aexists, aoutput } from './_assert.js';\nimport { type Input, Hash, createView, toBytes } from './utils.js';\n\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(\n  view: DataView,\n  byteOffset: number,\n  value: bigint,\n  isLE: boolean\n): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n/** Choice: a ? b : c */\nexport function Chi(a: number, b: number, c: number): number {\n  return (a & b) ^ (~a & c);\n}\n\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a: number, b: number, c: number): number {\n  return (a & b) ^ (a & c) ^ (b & c);\n}\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    aexists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    aoutput(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest(): Uint8Array {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n", "/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj } from './_md.js';\nimport { type CHash, rotr, wrapConstructor } from './utils.js';\n\n/** Round constants: first 32 bits of fractional parts of the cube roots of the first 64 primes 2..311). */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n/** Initial state: first 32 bits of fractional parts of the square roots of the first 8 primes 2..19. */\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n/**\n * Temporary buffer, not used to store anything between runs.\n * Named this way because it matches specification.\n */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  protected A: number = SHA256_IV[0] | 0;\n  protected B: number = SHA256_IV[1] | 0;\n  protected C: number = SHA256_IV[2] | 0;\n  protected D: number = SHA256_IV[3] | 0;\n  protected E: number = SHA256_IV[4] | 0;\n  protected F: number = SHA256_IV[5] | 0;\n  protected G: number = SHA256_IV[6] | 0;\n  protected H: number = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean(): void {\n    SHA256_W.fill(0);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n\n/**\n * Constants taken from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf.\n */\nclass SHA224 extends SHA256 {\n  protected A = 0xc1059ed8 | 0;\n  protected B = 0x367cd507 | 0;\n  protected C = 0x3070dd17 | 0;\n  protected D = 0xf70e5939 | 0;\n  protected E = 0xffc00b31 | 0;\n  protected F = 0x68581511 | 0;\n  protected G = 0x64f98fa7 | 0;\n  protected H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/** SHA2-256 hash function */\nexport const sha256: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/** SHA2-224 hash function */\nexport const sha224: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n", "import { FuelError } from '@fuel-ts/errors';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\nimport { sha256 } from '@noble/hashes/sha256';\n\nimport type { B256Address, EvmAddress, AssetId, ChecksumAddress, AddressInput } from './types';\nimport {\n  getRandomB256,\n  isB256,\n  isEvmAddress,\n  toB256AddressEvm,\n  fromPublicKeyToB256,\n  fromDynamicInputToB256,\n  normalizeB256,\n} from './utils';\n\n/**\n * `Address` provides a type safe wrapper for converting between different address formats\n * ands comparing them for equality.\n */\nexport class Address {\n  // #region address-2\n  readonly b256Address: B256Address;\n  // #endregion address-2\n\n  /**\n   * @param address - A B256 address, public key, EVM address, or Address instance\n   */\n  constructor(address: AddressInput) {\n    const b256Address = fromDynamicInputToB256(address);\n    this.b256Address = normalizeB256(b256Address);\n  }\n\n  /**\n   * Takes an B256 Address and returns back an checksum address.\n   * The implementation follows the ERC-55 https://github.com/ethereum/ercs/blob/master/ERCS/erc-55.md.\n   *\n   * @returns A new `ChecksumAddress` instance\n   */\n  toChecksum(): ChecksumAddress {\n    return Address.toChecksum(this.b256Address);\n  }\n\n  /**\n   * Returns the `b256Address` property\n   */\n  toAddress(): B256Address {\n    return this.b256Address;\n  }\n\n  /**\n   * Returns the B256 hash address as a string\n   *\n   * @returns The B256 address\n   */\n  toB256(): B256Address {\n    return this.b256Address;\n  }\n\n  /**\n   * Returns the B256 hash address as a Uint8Array\n   *\n   * @returns The B256 address as a Uint8Array\n   */\n  toBytes(): Uint8Array {\n    return arrayify(this.b256Address);\n  }\n\n  /**\n   * Returns the B256 hash address as a string\n   *\n   * @returns The B256 address\n   */\n  toHexString(): B256Address {\n    return this.toB256();\n  }\n\n  /**\n   * returns the address `checksum` as a string\n   *\n   * @returns The `b256Address` property as a string\n   */\n  toString(): string {\n    return this.toChecksum();\n  }\n\n  /**\n   * Converts and returns the `b256Address` property as a string\n   * @returns The `b256Address` property as a JSON string\n   */\n  toJSON(): string {\n    return this.b256Address;\n  }\n\n  /**\n   * Converts to an EVM address\n   *\n   * @returns an {@link EvmAddress | `EvmAddress`} representation of the address\n   */\n  toEvmAddress(): EvmAddress {\n    return {\n      bits: toB256AddressEvm(this.b256Address),\n    } as EvmAddress;\n  }\n\n  /**\n   * Wraps the B256 property and returns as an `AssetId`.\n   * @returns The B256 property as an {@link AssetId | `AssetId`}\n   */\n  toAssetId(): AssetId {\n    return {\n      bits: this.b256Address,\n    } as AssetId;\n  }\n\n  /**\n   * Wraps the B256 address `checksum` and returns it as a string\n   * @returns The B256 address `checksum` as a string\n   */\n  valueOf(): string {\n    return this.toChecksum();\n  }\n\n  /**\n   * Compares this the `b256Address` property to another for direct equality\n   * @param other - Another address to compare against\n   * @returns The equality of the comparison\n   */\n  equals(other: Address): boolean {\n    return this.toChecksum() === other.toChecksum();\n  }\n\n  /**\n   * Takes a Public Key, hashes it, and creates an `Address`\n   *\n   * @param publicKey - A wallets public key\n   * @returns A new `Address` instance\n   *\n   * @deprecated Use `new Address` instead\n   */\n  static fromPublicKey(publicKey: string): Address {\n    const b256Address = fromPublicKeyToB256(publicKey);\n    return new Address(b256Address);\n  }\n\n  /**\n   * Takes a B256 Address and creates an `Address`\n   *\n   * @param b256Address - A b256 hash\n   * @returns A new `Address` instance\n   *\n   * @deprecated Use `new Address` instead\n   */\n  static fromB256(b256Address: string): Address {\n    if (!isB256(b256Address)) {\n      throw new FuelError(\n        FuelError.CODES.INVALID_B256_ADDRESS,\n        `Invalid B256 Address: ${b256Address}.`\n      );\n    }\n\n    return new Address(b256Address);\n  }\n\n  /**\n   * Creates an `Address` with a randomized `b256Address` property\n   *\n   * @returns A new `Address` instance\n   */\n  static fromRandom(): Address {\n    return new Address(getRandomB256());\n  }\n\n  /**\n   * Takes an ambiguous string and attempts to create an `Address`\n   *\n   * @param address - An ambiguous string\n   * @returns A new `Address` instance\n   *\n   * @deprecated Use `new Address` instead\n   */\n  static fromString(address: string): Address {\n    return new Address(address);\n  }\n\n  /**\n   * Takes an ambiguous string or address and creates an `Address`\n   *\n   * @returns a new `Address` instance\n   *\n   * @deprecated Use `new Address` instead\n   */\n  static fromAddressOrString(address: string | Address): Address {\n    return new Address(address);\n  }\n\n  /**\n   * Takes a dynamic string or `Address` and creates an `Address`\n   *\n   * @param addressId - A string containing B256, or Public Key\n   * @throws Error - Unknown address if the format is not recognized\n   * @returns A new `Address` instance\n   *\n   * @deprecated Use `new Address` instead\n   */\n  static fromDynamicInput(address: string | Address): Address {\n    return new Address(address);\n  }\n\n  /**\n   * Takes an Evm Address and returns back an `Address`\n   *\n   * @returns A new `Address` instance\n   *\n   * @deprecated Use `new Address` instead\n   */\n  static fromEvmAddress(evmAddress: string): Address {\n    if (!isEvmAddress(evmAddress)) {\n      throw new FuelError(\n        FuelError.CODES.INVALID_EVM_ADDRESS,\n        `Invalid Evm Address: ${evmAddress}.`\n      );\n    }\n\n    return new Address(evmAddress);\n  }\n\n  /**\n   * Takes an ChecksumAddress and validates if it is a valid checksum address.\n   *\n   * @returns A `boolean` instance indicating if the address is valid.\n   */\n  static isChecksumValid(address: ChecksumAddress): boolean {\n    let addressParsed = address;\n\n    if (!address.startsWith('0x')) {\n      addressParsed = `0x${address}`;\n    }\n    if (addressParsed.trim().length !== 66) {\n      return false;\n    }\n\n    return Address.toChecksum(hexlify(addressParsed)) === addressParsed;\n  }\n\n  /** @hidden */\n  private static toChecksum(address: string) {\n    if (!isB256(address)) {\n      throw new FuelError(\n        FuelError.CODES.INVALID_B256_ADDRESS,\n        `Invalid B256 Address: ${address}.`\n      );\n    }\n\n    const addressHex = hexlify(address).toLowerCase().slice(2);\n    const checksum = sha256(addressHex);\n\n    let ret = '0x';\n    for (let i = 0; i < 32; ++i) {\n      const byte = checksum[i];\n      const ha = addressHex.charAt(i * 2);\n      const hb = addressHex.charAt(i * 2 + 1);\n      ret += (byte & 0xf0) >= 0x80 ? ha.toUpperCase() : ha;\n      ret += (byte & 0x0f) >= 0x08 ? hb.toUpperCase() : hb;\n    }\n\n    return ret;\n  }\n}\n", "import { randomBytes } from '@fuel-ts/crypto';\nimport { FuelError } from '@fuel-ts/errors';\nimport { arrayify, concat, hexlify } from '@fuel-ts/utils';\nimport { sha256 } from '@noble/hashes/sha256';\n\nimport type { Address } from './address';\nimport type { AddressLike, ContractIdLike, B256Address, B256AddressEvm } from './types';\n\n/**\n * Determines if a given string is B256 format\n *\n * @hidden\n */\nexport function isB256(address: string): boolean {\n  return address.length === 66 && /(0x)[0-9a-f]{64}$/i.test(address);\n}\n\n/**\n * Determines if a given string is in Public Key format (512 bits)\n *\n * @hidden\n */\nexport function isPublicKey(address: string): boolean {\n  return address.length === 130 && /(0x)[0-9a-f]{128}$/i.test(address);\n}\n\n/**\n * Determines if a given string is in EVM Address format\n *\n * @hidden\n */\nexport function isEvmAddress(address: string): boolean {\n  return address.length === 42 && /(0x)[0-9a-f]{40}$/i.test(address);\n}\n\n/**\n * Normalizes a B256 address to lowercase\n *\n * @param address - The B256 address to normalize\n * @returns The normalized B256 address\n *\n * @hidden\n */\nexport function normalizeB256(address: B256Address): B256Address {\n  return address.toLowerCase();\n}\n\n/**\n * A simple type guard to check if an object is an Address\n *\n * @hidden\n */\nexport function isAddress(address: object): address is Address {\n  return 'b256Address' in address;\n}\n\n/**\n * Takes an indeterminate address type and returns an address\n *\n * @hidden\n */\nexport const addressify = (addressLike: AddressLike | ContractIdLike): Address => {\n  if (isAddress(addressLike)) {\n    return addressLike;\n  }\n\n  if ('address' in addressLike && isAddress(addressLike.address)) {\n    return addressLike.address;\n  }\n\n  if ('id' in addressLike && isAddress(addressLike.id)) {\n    return addressLike.id;\n  }\n\n  throw new FuelError(FuelError.CODES.INVALID_ADDRESS, 'Invalid address');\n};\n\n/**\n * @hidden\n */\nexport const getRandomB256 = () => hexlify(randomBytes(32));\n\n/**\n * Takes a B256 address and clears the first 12 bytes, this is required for an EVM Address\n *\n * @param b256 - the address to clear\n * @returns b256 with first 12 bytes cleared\n *\n * @hidden\n */\nexport const toB256AddressEvm = (b256: B256Address): B256AddressEvm => {\n  try {\n    if (!isB256(b256)) {\n      throw new FuelError(FuelError.CODES.INVALID_B256_ADDRESS, `Invalid B256 Address: ${b256}.`);\n    }\n\n    const evmBytes = arrayify(b256).slice(12);\n    const paddedBytes = new Uint8Array(12).fill(0);\n    return hexlify(concat([paddedBytes, evmBytes])) as B256AddressEvm;\n  } catch (error) {\n    throw new FuelError(\n      FuelError.CODES.PARSE_FAILED,\n      `Cannot generate EVM Address B256 from: ${b256}.`\n    );\n  }\n};\n\n/**\n * Pads the first 12 bytes of an Evm address. This is useful for padding addresses returned from\n * the EVM to interact with the Sway EVM Address Type.\n *\n * @param address - Evm address to be padded\n * @returns Evm address padded to a b256 address\n *\n * @hidden\n */\nexport const padFirst12BytesOfEvmAddress = (address: string): B256AddressEvm => {\n  if (!isEvmAddress(address)) {\n    throw new FuelError(FuelError.CODES.INVALID_EVM_ADDRESS, 'Invalid EVM address format.');\n  }\n\n  return address.replace('0x', '0x000000000000000000000000') as B256AddressEvm;\n};\n\n/**\n * Converts an EVM address to a B256 address\n *\n * @param address - The EVM address to convert\n * @returns The B256 address\n *\n * @hidden\n */\nexport const fromEvmAddressToB256 = (address: string): B256Address =>\n  padFirst12BytesOfEvmAddress(address);\n\n/**\n * Converts a Public Key to a B256 address\n *\n * @param publicKey - The Public Key to convert\n * @returns The B256 address\n *\n * @hidden\n */\nexport const fromPublicKeyToB256 = (publicKey: string): B256Address => {\n  if (!isPublicKey(publicKey)) {\n    throw new FuelError(FuelError.CODES.INVALID_PUBLIC_KEY, `Invalid Public Key: ${publicKey}.`);\n  }\n\n  return hexlify(sha256(arrayify(publicKey)));\n};\n\n/**\n * Converts a dynamic input to a B256 address\n *\n * @param address - The dynamic input to convert\n * @returns The B256 address\n *\n * @hidden\n */\nexport const fromDynamicInputToB256 = (address: string | Address): B256Address => {\n  if (typeof address !== 'string' && 'toB256' in address) {\n    return address.toB256();\n  }\n\n  if (isB256(address)) {\n    return address;\n  }\n\n  if (isPublicKey(address)) {\n    return fromPublicKeyToB256(address);\n  }\n\n  if (isEvmAddress(address)) {\n    return fromEvmAddressToB256(address);\n  }\n\n  throw new FuelError(\n    FuelError.CODES.PARSE_FAILED,\n    `Unknown address format: only 'B256', 'Public Key (512)', or 'EVM Address' are supported.`\n  );\n};\n", "/* eslint-disable max-classes-per-file */\nimport { Coder, B256Coder, NumberCoder, BigNumberCoder } from '@fuel-ts/abi-coder';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { sha256 } from '@fuel-ts/hasher';\nimport type { BN } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { concat, arrayify } from '@fuel-ts/utils';\n\nimport { ByteArrayCoder } from './byte-array';\nimport type { TxPointer } from './tx-pointer';\nimport { TxPointerCoder } from './tx-pointer';\n\nexport enum InputType {\n  Coin = 0,\n  Contract = 1,\n  Message = 2,\n}\n\nexport type InputCoin = {\n  type: InputType.Coin;\n\n  /** Hash of transaction (b256) */\n  txID: string;\n\n  /** Index of transaction output (u16) */\n  outputIndex: number;\n\n  /** Owning address or script hash (b256) */\n  owner: string;\n\n  /** Amount of coins (u64) */\n  amount: BN;\n\n  /** Asset ID of the coins (b256) */\n  assetId: string;\n\n  /** Points to the TX whose output is being spent. (TxPointer) */\n  txPointer: TxPointer;\n\n  /** Index of witness that authorizes spending the coin (u16) */\n  witnessIndex: number;\n\n  /** Gas used by predicate (u64) */\n  predicateGasUsed: BN;\n\n  /** Length of predicate, in instructions (u64) */\n  predicateLength: BN;\n\n  /** Length of predicate input data, in bytes (u64) */\n  predicateDataLength: BN;\n\n  /** Predicate bytecode (byte[]) */\n  predicate: string;\n\n  /** Predicate input data (parameters) (byte[]) */\n  predicateData: string;\n};\n\nexport class InputCoinCoder extends Coder<InputCoin, InputCoin> {\n  constructor() {\n    super('InputCoin', 'struct InputCoin', 0);\n  }\n\n  encode(value: InputCoin): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.txID));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.outputIndex));\n    parts.push(new B256Coder().encode(value.owner));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n    parts.push(new TxPointerCoder().encode(value.txPointer));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.witnessIndex));\n    parts.push(new BigNumberCoder('u64').encode(value.predicateGasUsed));\n    parts.push(new BigNumberCoder('u64').encode(value.predicateLength));\n    parts.push(new BigNumberCoder('u64').encode(value.predicateDataLength));\n    parts.push(new ByteArrayCoder(value.predicateLength.toNumber()).encode(value.predicate));\n    parts.push(\n      new ByteArrayCoder(value.predicateDataLength.toNumber()).encode(value.predicateData)\n    );\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [InputCoin, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const txID = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const outputIndex = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const owner = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n    [decoded, o] = new TxPointerCoder().decode(data, o);\n    const txPointer = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const witnessIndex = Number(decoded);\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const predicateGasUsed = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const predicateLength = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const predicateDataLength = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateLength.toNumber()).decode(data, o);\n    const predicate = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateDataLength.toNumber()).decode(data, o);\n    const predicateData = decoded;\n\n    return [\n      {\n        type: InputType.Coin,\n        txID,\n        outputIndex,\n        owner,\n        amount,\n        assetId,\n        txPointer,\n        witnessIndex,\n        predicateGasUsed,\n        predicateLength,\n        predicateDataLength,\n        predicate,\n        predicateData,\n      },\n      o,\n    ];\n  }\n}\n\nexport type InputContract = {\n  type: InputType.Contract;\n\n  /** Hash of transaction (b256) */\n  txID: string;\n\n  /** Index of transaction output (u16) */\n  outputIndex: number;\n\n  /** Root of amount of coins owned by contract before transaction execution (b256) */\n  balanceRoot: string;\n\n  /** State root of contract before transaction execution (b256) */\n  stateRoot: string;\n\n  /** Points to the TX whose output is being spent. (TxPointer) */\n  txPointer: TxPointer;\n\n  /** Contract ID (b256) */\n  contractID: string;\n};\n\nexport class InputContractCoder extends Coder<InputContract, InputContract> {\n  constructor() {\n    super('InputContract', 'struct InputContract', 0);\n  }\n\n  encode(value: InputContract): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.txID));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.outputIndex));\n    parts.push(new B256Coder().encode(value.balanceRoot));\n    parts.push(new B256Coder().encode(value.stateRoot));\n    parts.push(new TxPointerCoder().encode(value.txPointer));\n    parts.push(new B256Coder().encode(value.contractID));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [InputContract, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const txID = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const outputIndex = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const balanceRoot = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const stateRoot = decoded;\n    [decoded, o] = new TxPointerCoder().decode(data, o);\n    const txPointer = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const contractID = decoded;\n\n    return [\n      {\n        type: InputType.Contract,\n        txID,\n        outputIndex,\n        balanceRoot,\n        stateRoot,\n        txPointer,\n        contractID,\n      },\n      o,\n    ];\n  }\n}\n\nexport type InputMessage = {\n  type: InputType.Message;\n\n  /** Address of sender */\n  sender: string;\n\n  /** Address of recipient */\n  recipient: string;\n\n  /** Amount of coins */\n  amount: BN;\n\n  /** Unique nonce of message */\n  nonce: string;\n\n  /** Index of witness that authorizes message (u16) */\n  witnessIndex: number;\n\n  /** Gas used by predicate (u64) */\n  predicateGasUsed: BN;\n\n  /** Length of data (u64) */\n  dataLength?: number;\n\n  /** Length of predicate, in instructions (u64) */\n  predicateLength: BN;\n\n  /** Length of predicate input data, in bytes (u64) */\n  predicateDataLength: BN;\n\n  /** data of message */\n  data?: string;\n\n  /** Predicate bytecode (byte[]) */\n  predicate: string;\n\n  /** Predicate input data (parameters) (byte[]) */\n  predicateData: string;\n};\n\nexport class InputMessageCoder extends Coder<InputMessage, InputMessage> {\n  constructor() {\n    super('InputMessage', 'struct InputMessage', 0);\n  }\n\n  static getMessageId(\n    value: Pick<InputMessage, 'sender' | 'recipient' | 'nonce' | 'amount' | 'data'>\n  ): string {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new ByteArrayCoder(32).encode(value.sender));\n    parts.push(new ByteArrayCoder(32).encode(value.recipient));\n    parts.push(new ByteArrayCoder(32).encode(value.nonce));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(arrayify(value.data || '0x'));\n\n    return sha256(concat(parts));\n  }\n\n  static encodeData(messageData?: BytesLike): Uint8Array {\n    const bytes = arrayify(messageData || '0x');\n    const dataLength = bytes.length;\n    return new ByteArrayCoder(dataLength).encode(bytes);\n  }\n\n  encode(value: InputMessage): Uint8Array {\n    const parts: Uint8Array[] = [];\n    const data = InputMessageCoder.encodeData(value.data);\n\n    parts.push(new ByteArrayCoder(32).encode(value.sender));\n    parts.push(new ByteArrayCoder(32).encode(value.recipient));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(new ByteArrayCoder(32).encode(value.nonce));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.witnessIndex));\n    parts.push(new BigNumberCoder('u64').encode(value.predicateGasUsed));\n    parts.push(new BigNumberCoder('u64').encode(data.length));\n    parts.push(new BigNumberCoder('u64').encode(value.predicateLength));\n    parts.push(new BigNumberCoder('u64').encode(value.predicateDataLength));\n    parts.push(new ByteArrayCoder(data.length).encode(data));\n    parts.push(new ByteArrayCoder(value.predicateLength.toNumber()).encode(value.predicate));\n    parts.push(\n      new ByteArrayCoder(value.predicateDataLength.toNumber()).encode(value.predicateData)\n    );\n\n    return concat(parts);\n  }\n\n  static decodeData(messageData: BytesLike): Uint8Array {\n    const bytes = arrayify(messageData);\n    const dataLength = bytes.length;\n    const [data] = new ByteArrayCoder(dataLength).decode(bytes, 0);\n\n    return arrayify(data);\n  }\n\n  decode(data: Uint8Array, offset: number): [InputMessage, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const sender = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const recipient = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const nonce = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const witnessIndex = Number(decoded);\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const predicateGasUsed = decoded;\n    [decoded, o] = new NumberCoder('u32', { padToWordSize: true }).decode(data, o);\n    const dataLength = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const predicateLength = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const predicateDataLength = decoded;\n    [decoded, o] = new ByteArrayCoder(dataLength).decode(data, o);\n    const messageData = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateLength.toNumber()).decode(data, o);\n    const predicate = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateDataLength.toNumber()).decode(data, o);\n    const predicateData = decoded;\n\n    return [\n      {\n        type: InputType.Message,\n        sender,\n        recipient,\n        amount,\n        witnessIndex,\n        nonce,\n        predicateGasUsed,\n        dataLength,\n        predicateLength,\n        predicateDataLength,\n        data: messageData,\n        predicate,\n        predicateData,\n      },\n      o,\n    ];\n  }\n}\n\nexport type Input = InputCoin | InputContract | InputMessage;\n\nexport class InputCoder extends Coder<Input, Input> {\n  constructor() {\n    super('Input', 'struct Input', 0);\n  }\n\n  encode(value: Input): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8', { padToWordSize: true }).encode(value.type));\n\n    const { type } = value;\n\n    switch (type) {\n      case InputType.Coin: {\n        parts.push(new InputCoinCoder().encode(value));\n        break;\n      }\n      case InputType.Contract: {\n        parts.push(new InputContractCoder().encode(value));\n        break;\n      }\n      case InputType.Message: {\n        parts.push(new InputMessageCoder().encode(value));\n        break;\n      }\n      default: {\n        throw new FuelError(\n          ErrorCode.INVALID_TRANSACTION_INPUT,\n          `Invalid transaction input type: ${type}.`\n        );\n      }\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Input, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8', { padToWordSize: true }).decode(data, o);\n    const type = decoded as InputType;\n    switch (type) {\n      case InputType.Coin: {\n        [decoded, o] = new InputCoinCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case InputType.Contract: {\n        [decoded, o] = new InputContractCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case InputType.Message: {\n        [decoded, o] = new InputMessageCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new FuelError(\n          ErrorCode.INVALID_TRANSACTION_INPUT,\n          `Invalid transaction input type: ${type}.`\n        );\n      }\n    }\n  }\n}\n", "import { Coder } from '@fuel-ts/abi-coder';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { concat, hexlify, arrayify } from '@fuel-ts/utils';\n\nexport class ByteArrayCoder extends Coder<BytesLike, string> {\n  length: number;\n  #paddingLength: number;\n\n  constructor(length: number) {\n    const paddingLength = (8 - (length % 8)) % 8;\n    const encodedLength = length + paddingLength;\n    super(\n      'ByteArray',\n      // While this might sound like a [u8; N] coder it's actually not.\n      // A [u8; N] coder would pad every u8 to 8 bytes which would\n      // make every u8 have the same size as a u64.\n      // We are packing four u8s into u64s here, avoiding this padding.\n      `[u64; ${encodedLength / 4}]`,\n      encodedLength\n    );\n    this.length = length;\n    this.#paddingLength = paddingLength;\n  }\n\n  encode(value: BytesLike): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    const data = arrayify(value);\n    parts.push(data);\n    // Write padding\n    if (this.#paddingLength) {\n      parts.push(new Uint8Array(this.#paddingLength));\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [string, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = [hexlify(data.slice(o, o + this.length)), o + this.length];\n    const value = decoded;\n    // Read padding\n    if (this.#paddingLength) {\n      [decoded, o] = [null, o + this.#paddingLength];\n    }\n\n    return [value, o];\n  }\n}\n", "import { NumberCoder, StructCoder } from '@fuel-ts/abi-coder';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nexport type TxPointer = {\n  /** Block height (u32) */\n  blockHeight: number;\n\n  /** Transaction index (u16) */\n  txIndex: number;\n};\n\nexport class TxPointerCoder extends StructCoder<{\n  blockHeight: NumberCoder;\n  txIndex: NumberCoder;\n}> {\n  constructor() {\n    super('TxPointer', {\n      blockHeight: new NumberCoder('u32', { padToWordSize: true }),\n      txIndex: new NumberCoder('u16', { padToWordSize: true }),\n    });\n  }\n\n  public static decodeFromGqlScalar(value: string) {\n    // taken from https://github.com/FuelLabs/fuel-vm/blob/7366db6955589cb3444c9b2bb46e45c8539f19f5/fuel-tx/src/tx_pointer.rs#L87\n    if (value.length !== 12) {\n      throw new FuelError(\n        ErrorCode.DECODE_ERROR,\n        `Invalid TxPointer scalar string length ${value.length}. It must have length 12.`\n      );\n    }\n    const [blockHeight, txIndex] = [value.substring(0, 8), value.substring(8)];\n    return {\n      blockHeight: parseInt(blockHeight, 16),\n      txIndex: parseInt(txIndex, 16),\n    };\n  }\n}\n", "/* eslint-disable max-classes-per-file */\nimport { Coder, B256Coder, NumberCoder, BigNumberCoder } from '@fuel-ts/abi-coder';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { concat } from '@fuel-ts/utils';\n\nexport enum OutputType /* u8 */ {\n  Coin = 0,\n  Contract = 1,\n  Change = 2,\n  Variable = 3,\n  ContractCreated = 4,\n}\n\nexport type OutputCoin = {\n  type: OutputType.Coin;\n  /** Receiving address or script hash (b256) */\n  to: string;\n  /** Amount of coins to send (u64) */\n  amount: BN;\n  /** Asset ID of coins (b256) */\n  assetId: string;\n};\n\nexport class OutputCoinCoder extends Coder<OutputCoin, OutputCoin> {\n  constructor() {\n    super('OutputCoin', 'struct OutputCoin', 0);\n  }\n\n  encode(value: OutputCoin): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputCoin, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n\n    return [\n      {\n        type: OutputType.Coin,\n        to,\n        amount,\n        assetId,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputContract = {\n  type: OutputType.Contract;\n  /** Index of input contract (u8) */\n  inputIndex: number;\n  /** Root of amount of coins owned by contract after transaction execution (b256) */\n  balanceRoot: string;\n  /** State root of contract after transaction execution (b256) */\n  stateRoot: string;\n};\n\nexport class OutputContractCoder extends Coder<OutputContract, OutputContract> {\n  constructor() {\n    super('OutputContract', 'struct OutputContract', 0);\n  }\n\n  encode(value: OutputContract): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8', { padToWordSize: true }).encode(value.inputIndex));\n    parts.push(new B256Coder().encode(value.balanceRoot));\n    parts.push(new B256Coder().encode(value.stateRoot));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputContract, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8', { padToWordSize: true }).decode(data, o);\n    const inputIndex = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const balanceRoot = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const stateRoot = decoded;\n\n    return [\n      {\n        type: OutputType.Contract,\n        inputIndex,\n        balanceRoot,\n        stateRoot,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputChange = {\n  type: OutputType.Change;\n  /** Receiving address or script hash (b256) */\n  to: string;\n  /** Amount of coins to send (u64) */\n  amount: BN;\n  /** Asset ID of coins (b256) */\n  assetId: string;\n};\n\nexport class OutputChangeCoder extends Coder<OutputChange, OutputChange> {\n  constructor() {\n    super('OutputChange', 'struct OutputChange', 0);\n  }\n\n  encode(value: OutputChange): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputChange, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n\n    return [\n      {\n        type: OutputType.Change,\n        to,\n        amount,\n        assetId,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputVariable = {\n  type: OutputType.Variable;\n  /** Receiving address or script hash (b256) */\n  to: string;\n  /** Amount of coins to send (u64) */\n  amount: BN;\n  /** Asset ID of coins (b256) */\n  assetId: string;\n};\n\nexport class OutputVariableCoder extends Coder<OutputVariable, OutputVariable> {\n  constructor() {\n    super('OutputVariable', 'struct OutputVariable', 0);\n  }\n\n  encode(value: OutputVariable): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputVariable, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n\n    return [\n      {\n        type: OutputType.Variable,\n        to,\n        amount,\n        assetId,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputContractCreated = {\n  type: OutputType.ContractCreated;\n  /** Contract ID (b256) */\n  contractId: string;\n  /** State root of contract (b256) */\n  stateRoot: string;\n};\n\nexport class OutputContractCreatedCoder extends Coder<\n  OutputContractCreated,\n  OutputContractCreated\n> {\n  constructor() {\n    super('OutputContractCreated', 'struct OutputContractCreated', 0);\n  }\n\n  encode(value: OutputContractCreated): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.contractId));\n    parts.push(new B256Coder().encode(value.stateRoot));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputContractCreated, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const contractId = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const stateRoot = decoded;\n\n    return [\n      {\n        type: OutputType.ContractCreated,\n        contractId,\n        stateRoot,\n      },\n      o,\n    ];\n  }\n}\n\nexport type Output =\n  | OutputCoin\n  | OutputContract\n  | OutputChange\n  | OutputVariable\n  | OutputContractCreated;\n\nexport class OutputCoder extends Coder<Output, Output> {\n  constructor() {\n    super('Output', ' struct Output', 0);\n  }\n\n  encode(value: Output): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8', { padToWordSize: true }).encode(value.type));\n\n    const { type } = value;\n\n    switch (type) {\n      case OutputType.Coin: {\n        parts.push(new OutputCoinCoder().encode(value));\n        break;\n      }\n      case OutputType.Contract: {\n        parts.push(new OutputContractCoder().encode(value));\n        break;\n      }\n      case OutputType.Change: {\n        parts.push(new OutputChangeCoder().encode(value));\n        break;\n      }\n      case OutputType.Variable: {\n        parts.push(new OutputVariableCoder().encode(value));\n        break;\n      }\n      case OutputType.ContractCreated: {\n        parts.push(new OutputContractCreatedCoder().encode(value));\n        break;\n      }\n      default: {\n        throw new FuelError(\n          ErrorCode.INVALID_TRANSACTION_OUTPUT,\n          `Invalid transaction output type: ${type}.`\n        );\n      }\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Output, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8', { padToWordSize: true }).decode(data, o);\n    const type = decoded as OutputType;\n    switch (type) {\n      case OutputType.Coin: {\n        [decoded, o] = new OutputCoinCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.Contract: {\n        [decoded, o] = new OutputContractCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.Change: {\n        [decoded, o] = new OutputChangeCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.Variable: {\n        [decoded, o] = new OutputVariableCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.ContractCreated: {\n        [decoded, o] = new OutputContractCreatedCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new FuelError(\n          ErrorCode.INVALID_TRANSACTION_OUTPUT,\n          `Invalid transaction output type: ${type}.`\n        );\n      }\n    }\n  }\n}\n", "import { BigNumberCoder, Coder, NumberCoder } from '@fuel-ts/abi-coder';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { concat } from '@fuel-ts/utils';\n\n// Bitfield of used policy types.\nexport enum PolicyType {\n  Tip = 1,\n  WitnessLimit = 2,\n  Maturity = 4,\n  MaxFee = 8,\n  Expiration = 16,\n}\n\nexport type Policy =\n  | PolicyTip\n  | PolicyWitnessLimit\n  | PolicyMaturity\n  | PolicyMaxFee\n  | PolicyExpiration;\n\nexport type PolicyTip = {\n  type: PolicyType.Tip;\n  data: BN;\n};\n\nexport type PolicyWitnessLimit = {\n  type: PolicyType.WitnessLimit;\n  data: BN;\n};\n\nexport type PolicyMaturity = {\n  type: PolicyType.Maturity;\n  data: number;\n};\n\nexport type PolicyExpiration = {\n  type: PolicyType.Expiration;\n  data: number;\n};\n\nexport type PolicyMaxFee = {\n  type: PolicyType.MaxFee;\n  data: BN;\n};\n\nexport const sortPolicies = (policies: Policy[]): Policy[] =>\n  policies.sort((a, b) => a.type - b.type);\n\nfunction validateDuplicatedPolicies(policies: Policy[]): void {\n  const seenTypes = new Set<PolicyType>();\n\n  policies.forEach((policy) => {\n    if (seenTypes.has(policy.type)) {\n      throw new FuelError(\n        ErrorCode.DUPLICATED_POLICY,\n        `Duplicate policy type found: ${PolicyType.MaxFee}`\n      );\n    }\n    seenTypes.add(policy.type);\n  });\n}\n\nexport class PoliciesCoder extends Coder<Policy[], Policy[]> {\n  constructor() {\n    super('Policies', 'array Policy', 0);\n  }\n\n  encode(policies: Policy[]): Uint8Array {\n    validateDuplicatedPolicies(policies);\n    const sortedPolicies = sortPolicies(policies);\n\n    const parts: Uint8Array[] = [];\n\n    sortedPolicies.forEach(({ data, type }) => {\n      switch (type) {\n        case PolicyType.MaxFee:\n        case PolicyType.Tip:\n        case PolicyType.WitnessLimit:\n          parts.push(new BigNumberCoder('u64').encode(data));\n          break;\n\n        case PolicyType.Maturity:\n        case PolicyType.Expiration:\n          parts.push(new NumberCoder('u32', { padToWordSize: true }).encode(data));\n          break;\n\n        default: {\n          throw new FuelError(ErrorCode.INVALID_POLICY_TYPE, `Invalid policy type: ${type}`);\n        }\n      }\n    });\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number, policyTypes: number): [Policy[], number] {\n    let o = offset;\n    const policies: Policy[] = [];\n\n    if (policyTypes & PolicyType.Tip) {\n      const [tip, nextOffset] = new BigNumberCoder('u64').decode(data, o);\n      o = nextOffset;\n      policies.push({ type: PolicyType.Tip, data: tip });\n    }\n\n    if (policyTypes & PolicyType.WitnessLimit) {\n      const [witnessLimit, nextOffset] = new BigNumberCoder('u64').decode(data, o);\n      o = nextOffset;\n      policies.push({ type: PolicyType.WitnessLimit, data: witnessLimit });\n    }\n\n    if (policyTypes & PolicyType.Maturity) {\n      const [maturity, nextOffset] = new NumberCoder('u32', { padToWordSize: true }).decode(\n        data,\n        o\n      );\n      o = nextOffset;\n      policies.push({ type: PolicyType.Maturity, data: maturity });\n    }\n\n    if (policyTypes & PolicyType.MaxFee) {\n      const [maxFee, nextOffset] = new BigNumberCoder('u64').decode(data, o);\n      o = nextOffset;\n      policies.push({ type: PolicyType.MaxFee, data: maxFee });\n    }\n\n    if (policyTypes & PolicyType.Expiration) {\n      const [expiration, nextOffset] = new NumberCoder('u32', { padToWordSize: true }).decode(\n        data,\n        o\n      );\n      o = nextOffset;\n      policies.push({ type: PolicyType.Expiration, data: expiration });\n    }\n\n    return [policies, o];\n  }\n}\n", "import { BigNumberCoder } from '@fuel-ts/abi-coder';\nimport type { AssetId } from '@fuel-ts/address';\nimport { sha256 } from '@fuel-ts/hasher';\nimport type { BN } from '@fuel-ts/math';\nimport { arrayify, concat } from '@fuel-ts/utils';\n\nimport { ByteArrayCoder } from './coders/byte-array';\n\nexport enum ReceiptType /* u8 */ {\n  Call = 0,\n  Return = 1,\n  ReturnData = 2,\n  Panic = 3,\n  Revert = 4,\n  Log = 5,\n  LogData = 6,\n  Transfer = 7,\n  TransferOut = 8,\n  ScriptResult = 9,\n  MessageOut = 10,\n  Mint = 11,\n  Burn = 12,\n}\n\nexport type ReceiptCall = {\n  type: ReceiptType.Call;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Contract ID of called contract (b256) */\n  to: string;\n  /** Amount of coins to forward, i.e. $rB (u64) */\n  amount: BN;\n  /** Asset ID of coins to forward, i.e. MEM[$rC, 32] (b256) */\n  assetId: string;\n  /** Gas to forward, i.e. $rD (u64) */\n  gas: BN;\n  /** Method name offset (u64) */\n  param1: BN;\n  /** Method args offset (u64) */\n  param2: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport type ReceiptReturn = {\n  type: ReceiptType.Return;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  val: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport type ReceiptReturnData = {\n  type: ReceiptType.ReturnData;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  ptr: BN;\n  /** Value of register $rB (u64) */\n  len: BN;\n  /** Hash of MEM[$rA, $rB] (b256) */\n  digest: string;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of the memory range MEM[$rA, $rB]. */\n  data: string;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport type ReceiptPanic = {\n  type: ReceiptType.Panic;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Panic reason (u64) */\n  reason: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n  /** Value of optional contract ID */\n  contractId: string;\n};\n\nexport type ReceiptRevert = {\n  type: ReceiptType.Revert;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  val: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport type ReceiptLog = {\n  type: ReceiptType.Log;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  ra: BN;\n  /** Value of register $rB (u64) */\n  rb: BN;\n  /** Value of register $rC (u64) */\n  rc: BN;\n  /** Value of register $rD (u64) */\n  rd: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport type ReceiptLogData = {\n  type: ReceiptType.LogData;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  ra: BN;\n  /** Value of register $rB (u64) */\n  rb: BN;\n  /** Value of register $rC (u64) */\n  ptr: BN;\n  /** Value of register $rD (u64) */\n  len: BN;\n  /** Hash of MEM[$rC, $rD] (b256) */\n  digest: string;\n  /** Value of the memory range MEM[$rC, $rD]. */\n  data: string;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport type ReceiptTransfer = {\n  type: ReceiptType.Transfer;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Contract ID of contract to transfer coins to (b256) */\n  to: string;\n  /** Amount of coins transferred (u64) */\n  amount: BN;\n  /** Asset ID of coins transferred (b256) */\n  assetId: string;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport type ReceiptTransferOut = {\n  type: ReceiptType.TransferOut;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Address to transfer coins to (b256) */\n  to: string;\n  /** Amount of coins transferred (u64) */\n  amount: BN;\n  /** Asset ID of coins transferred (b256) */\n  assetId: string;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport type ReceiptScriptResult = {\n  type: ReceiptType.ScriptResult;\n  /** Result variant with embedded `PanicReason` in first 8 bits and `instr` (u64) */\n  result: BN;\n  /** Gas consumed by the script (u64) */\n  gasUsed: BN;\n};\n\nexport type ReceiptMessageOut = {\n  type: ReceiptType.MessageOut;\n  /** Hexadecimal string representation of the 256-bit (32-byte) message ID */\n  messageId: string;\n  /** Hexadecimal string representation of the 256-bit (32-byte) address of the message sender: MEM[$fp, 32] */\n  sender: string;\n  /** Hexadecimal string representation of the 256-bit (32-byte) address of the message recipient: MEM[$rA, 32] */\n  recipient: string;\n  /** Hexadecimal string representation of a 64-bit unsigned integer; value of register $rD */\n  amount: BN;\n  /** Hexadecimal string representation of the 256-bit (32-byte) message nonce */\n  nonce: string;\n  /** Decimal string representation of a 16-bit unsigned integer; value of register $rC. */\n  len: number;\n  /** Hexadecimal string representation of 256-bit (32-byte), hash of MEM[$rA + 32, $rB] */\n  digest: string;\n  /** Hexadecimal string representation of the value of the memory range MEM[$rA + 32, $rB] */\n  data: Uint8Array;\n};\n\nexport type ReceiptMint = {\n  type: ReceiptType.Mint;\n\n  subId: string;\n\n  contractId: string;\n\n  assetId: string;\n\n  val: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport type ReceiptBurn = {\n  type: ReceiptType.Burn;\n\n  subId: string;\n\n  contractId: string;\n\n  assetId: string;\n\n  val: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport type Receipt =\n  | ReceiptCall\n  | ReceiptReturn\n  | ReceiptReturnData\n  | ReceiptPanic\n  | ReceiptRevert\n  | ReceiptLog\n  | ReceiptLogData\n  | ReceiptTransfer\n  | ReceiptTransferOut\n  | ReceiptScriptResult\n  | ReceiptMessageOut\n  | ReceiptMint\n  | ReceiptBurn;\n\nexport const getMintedAssetId = (contractId: string, subId: string): string => {\n  const contractIdBytes = arrayify(contractId);\n  const subIdBytes = arrayify(subId);\n\n  return sha256(concat([contractIdBytes, subIdBytes]));\n};\n\nexport const createAssetId = (contractId: string, subId: string): AssetId => ({\n  bits: getMintedAssetId(contractId, subId),\n});\n\nexport const getMessageId = (\n  value: Pick<ReceiptMessageOut, 'sender' | 'recipient' | 'nonce' | 'amount' | 'data'>\n): string => {\n  const parts: Uint8Array[] = [];\n\n  parts.push(new ByteArrayCoder(32).encode(value.sender));\n  parts.push(new ByteArrayCoder(32).encode(value.recipient));\n  parts.push(new ByteArrayCoder(32).encode(value.nonce));\n  parts.push(new BigNumberCoder('u64').encode(value.amount));\n  parts.push(arrayify(value.data || '0x'));\n\n  return sha256(concat(parts));\n};\n", "import { B256Coder, StructCoder } from '@fuel-ts/abi-coder';\n\nexport type StorageSlot = {\n  /** Key (b256) */\n  key: string;\n  /** Value (b256) */\n  value: string;\n};\n\nexport class StorageSlotCoder extends StructCoder<{\n  key: B256Coder;\n  value: B256Coder;\n}> {\n  constructor() {\n    super('StorageSlot', {\n      key: new B256Coder(),\n      value: new B256Coder(),\n    });\n  }\n}\n", "/* eslint-disable max-classes-per-file */\n\nimport { Coder, ArrayCoder, B256Coder, NumberCoder, BigNumberCoder } from '@fuel-ts/abi-coder';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { type BN } from '@fuel-ts/math';\nimport { concat } from '@fuel-ts/utils';\n\nimport { ByteArrayCoder } from './byte-array';\nimport type { Input, InputContract } from './input';\nimport { InputCoder, InputContractCoder } from './input';\nimport type { Output, OutputContract } from './output';\nimport { OutputCoder, OutputContractCoder } from './output';\nimport type { Policy } from './policy';\nimport { PoliciesCoder } from './policy';\nimport { StorageSlotCoder } from './storage-slot';\nimport type { StorageSlot } from './storage-slot';\nimport type { TxPointer } from './tx-pointer';\nimport { TxPointerCoder } from './tx-pointer';\nimport { UpgradePurposeCoder, type UpgradePurpose } from './upgrade-purpose';\nimport type { Witness } from './witness';\nimport { WitnessCoder } from './witness';\n\nexport enum TransactionType /* u8 */ {\n  Script = 0,\n  Create = 1,\n  Mint = 2,\n  Upgrade = 3,\n  Upload = 4,\n  Blob = 5,\n}\n\n/** @hidden */\nexport type BaseTransactionType = {\n  /** The type of the transaction */\n  type: TransactionType;\n  /** List of witnesses (Witness[]) */\n  witnesses: Witness[];\n\n  /** Number of witnesses (u16) */\n  witnessesCount: number;\n\n  /** List of outputs (Output[]) */\n  outputs: Output[];\n\n  /** List of inputs (Input[]) */\n  inputs: Input[];\n\n  /** List of policies. */\n  policies: Policy[];\n\n  /** Bitfield of used policy types (u32) */\n  policyTypes: number;\n\n  /** Number of inputs (u16) */\n  inputsCount: number;\n\n  /** Number of outputs (u16) */\n  outputsCount: number;\n};\n\nexport type TransactionScript = BaseTransactionType & {\n  type: TransactionType.Script;\n\n  /** Gas limit for transaction (u64) */\n  scriptGasLimit: BN;\n\n  /** Merkle root of receipts (b256) */\n  receiptsRoot: string;\n\n  /** Script length, in instructions (u64) */\n  scriptLength: BN;\n\n  /** Length of script input data, in bytes (u64) */\n  scriptDataLength: BN;\n\n  /** Script to execute (byte[]) */\n  script: string;\n\n  /** Script input data (parameters) (byte[]) */\n  scriptData: string;\n};\n\nexport class TransactionScriptCoder extends Coder<TransactionScript, TransactionScript> {\n  constructor() {\n    super('TransactionScript', 'struct TransactionScript', 0);\n  }\n\n  encode(value: TransactionScript): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new BigNumberCoder('u64').encode(value.scriptGasLimit));\n    parts.push(new B256Coder().encode(value.receiptsRoot));\n    parts.push(new BigNumberCoder('u64').encode(value.scriptLength));\n    parts.push(new BigNumberCoder('u64').encode(value.scriptDataLength));\n    parts.push(new NumberCoder('u32', { padToWordSize: true }).encode(value.policyTypes));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.inputsCount));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.outputsCount));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.witnessesCount));\n    parts.push(new ByteArrayCoder(value.scriptLength.toNumber()).encode(value.script));\n    parts.push(new ByteArrayCoder(value.scriptDataLength.toNumber()).encode(value.scriptData));\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [TransactionScript, number] {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const scriptGasLimit = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const receiptsRoot = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const scriptLength = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const scriptDataLength = decoded;\n    [decoded, o] = new NumberCoder('u32', { padToWordSize: true }).decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new ByteArrayCoder(scriptLength.toNumber()).decode(data, o);\n    const script = decoded;\n    [decoded, o] = new ByteArrayCoder(scriptDataLength.toNumber()).decode(data, o);\n    const scriptData = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n\n    return [\n      {\n        type: TransactionType.Script,\n        scriptGasLimit,\n        scriptLength,\n        scriptDataLength,\n        policyTypes,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        receiptsRoot,\n        script,\n        scriptData,\n        policies,\n        inputs,\n        outputs,\n        witnesses,\n      },\n      o,\n    ];\n  }\n}\n\nexport type TransactionCreate = BaseTransactionType & {\n  type: TransactionType.Create;\n\n  /** Witness index of contract bytecode to create (u8) */\n  bytecodeWitnessIndex: number;\n\n  /** Salt (b256) */\n  salt: string;\n\n  /** Number of storage slots to initialize (u16) */\n  storageSlotsCount: BN;\n\n  /** List of inputs (StorageSlot[]) */\n  storageSlots: StorageSlot[];\n};\n\nexport class TransactionCreateCoder extends Coder<TransactionCreate, TransactionCreate> {\n  constructor() {\n    super('TransactionCreate', 'struct TransactionCreate', 0);\n  }\n\n  encode(value: TransactionCreate): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.bytecodeWitnessIndex));\n    parts.push(new B256Coder().encode(value.salt));\n    parts.push(new BigNumberCoder('u64').encode(value.storageSlotsCount));\n    parts.push(new NumberCoder('u32', { padToWordSize: true }).encode(value.policyTypes));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.inputsCount));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.outputsCount));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.witnessesCount));\n    parts.push(\n      new ArrayCoder(new StorageSlotCoder(), value.storageSlotsCount.toNumber()).encode(\n        value.storageSlots\n      )\n    );\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [TransactionCreate, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const bytecodeWitnessIndex = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const salt = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const storageSlotsCount = decoded;\n    [decoded, o] = new NumberCoder('u32', { padToWordSize: true }).decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new ArrayCoder(new StorageSlotCoder(), storageSlotsCount.toNumber()).decode(\n      data,\n      o\n    );\n    const storageSlots = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n\n    return [\n      {\n        type: TransactionType.Create,\n        bytecodeWitnessIndex,\n        policyTypes,\n        storageSlotsCount,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        salt,\n        policies,\n        storageSlots,\n        inputs,\n        outputs,\n        witnesses,\n      },\n      o,\n    ];\n  }\n}\n\nexport type TransactionMint = {\n  type: TransactionType.Mint;\n\n  /** The location of the Mint transaction in the block. */\n  txPointer: TxPointer;\n\n  /** The contract utxo that assets are minted to. */\n  inputContract: InputContract;\n\n  /** The contract utxo that assets are being minted to. */\n  outputContract: OutputContract;\n\n  /** The amount of funds minted. */\n  mintAmount: BN;\n\n  /** The asset ID corresponding to the minted amount. */\n  mintAssetId: string;\n\n  gasPrice: BN;\n};\n\nexport class TransactionMintCoder extends Coder<TransactionMint, TransactionMint> {\n  constructor() {\n    super('TransactionMint', 'struct TransactionMint', 0);\n  }\n\n  encode(value: TransactionMint): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new TxPointerCoder().encode(value.txPointer));\n    parts.push(new InputContractCoder().encode(value.inputContract));\n    parts.push(new OutputContractCoder().encode(value.outputContract));\n    parts.push(new BigNumberCoder('u64').encode(value.mintAmount));\n    parts.push(new B256Coder().encode(value.mintAssetId));\n    parts.push(new BigNumberCoder('u64').encode(value.gasPrice));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [TransactionMint, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new TxPointerCoder().decode(data, o);\n    const txPointer = decoded;\n    [decoded, o] = new InputContractCoder().decode(data, o);\n    const inputContract = decoded;\n    [decoded, o] = new OutputContractCoder().decode(data, o);\n    const outputContract = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const mintAmount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const mintAssetId = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const gasPrice = decoded;\n\n    return [\n      {\n        type: TransactionType.Mint,\n        txPointer,\n        inputContract,\n        outputContract,\n        mintAmount,\n        mintAssetId,\n        gasPrice,\n      },\n      o,\n    ];\n  }\n}\n\nexport type TransactionUpgrade = BaseTransactionType & {\n  type: TransactionType.Upgrade;\n\n  /** The purpose of the upgrade. */\n  upgradePurpose: UpgradePurpose;\n};\n\nexport class TransactionUpgradeCoder extends Coder<TransactionUpgrade, TransactionUpgrade> {\n  constructor() {\n    super('TransactionUpgrade', 'struct TransactionUpgrade', 0);\n  }\n\n  encode(value: TransactionUpgrade): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new UpgradePurposeCoder().encode(value.upgradePurpose));\n    parts.push(new NumberCoder('u32', { padToWordSize: true }).encode(value.policyTypes));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.inputsCount));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.outputsCount));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.witnessesCount));\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [TransactionUpgrade, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new UpgradePurposeCoder().decode(data, o);\n    const upgradePurpose = decoded;\n    [decoded, o] = new NumberCoder('u32', { padToWordSize: true }).decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n\n    return [\n      {\n        type: TransactionType.Upgrade,\n        upgradePurpose,\n        policyTypes,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        policies,\n        inputs,\n        outputs,\n        witnesses,\n      },\n      o,\n    ];\n  }\n}\n\nexport type TransactionUpload = BaseTransactionType & {\n  type: TransactionType.Upload;\n\n  /** The root of the Merkle tree is created over the bytecode. (b256) */\n  root: string;\n\n  /** Index of witness that authorizes spending the coin (u16) */\n  witnessIndex: number;\n\n  /** The index of the subsection of the bytecode. (u16) */\n  subsectionIndex: number;\n\n  /** The total number of subsections on which bytecode was divided. (u16) */\n  subsectionsNumber: number;\n\n  /** Number of Merkle nodes in the proof. (u16) */\n  proofSetCount: number;\n\n  /** List of proof nodes (b256[]) */\n  proofSet: string[];\n};\n\nexport class TransactionUploadCoder extends Coder<TransactionUpload, TransactionUpload> {\n  constructor() {\n    super('TransactionUpload', 'struct TransactionUpload', 0);\n  }\n\n  encode(value: TransactionUpload): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.root));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.witnessIndex));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.subsectionIndex));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.subsectionsNumber));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.proofSetCount));\n    parts.push(new NumberCoder('u32', { padToWordSize: true }).encode(value.policyTypes));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.inputsCount));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.outputsCount));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.witnessesCount));\n    parts.push(new ArrayCoder(new B256Coder(), value.proofSetCount).encode(value.proofSet));\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [TransactionUpload, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const root = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const witnessIndex = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const subsectionIndex = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const subsectionsNumber = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const proofSetCount = decoded;\n    [decoded, o] = new NumberCoder('u32', { padToWordSize: true }).decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new ArrayCoder(new B256Coder(), proofSetCount).decode(data, o);\n    const proofSet = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n\n    return [\n      {\n        type: TransactionType.Upload,\n        root,\n        witnessIndex,\n        subsectionIndex,\n        subsectionsNumber,\n        proofSetCount,\n        policyTypes,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        proofSet,\n        policies,\n        inputs,\n        outputs,\n        witnesses,\n      },\n      o,\n    ];\n  }\n}\n\nexport type TransactionBlob = BaseTransactionType & {\n  type: TransactionType.Blob;\n\n  /** Hash of the bytecode. (b256) */\n  blobId: string;\n\n  /** Witness index of contract bytecode (u16) */\n  witnessIndex: number;\n};\n\nexport class TransactionBlobCoder extends Coder<TransactionBlob, TransactionBlob> {\n  constructor() {\n    super('TransactionBlob', 'struct TransactionBlob', 0);\n  }\n\n  encode(value: TransactionBlob): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.blobId));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.witnessIndex));\n    parts.push(new NumberCoder('u32', { padToWordSize: true }).encode(value.policyTypes));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.inputsCount));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.outputsCount));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.witnessesCount));\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [TransactionBlob, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const blobId = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const witnessIndex = decoded;\n    [decoded, o] = new NumberCoder('u32', { padToWordSize: true }).decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n\n    return [\n      {\n        type: TransactionType.Blob,\n        blobId,\n        witnessIndex,\n        policyTypes,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        policies,\n        inputs,\n        outputs,\n        witnesses,\n      },\n      o,\n    ];\n  }\n}\n\ntype PossibleTransactions =\n  | TransactionScript\n  | TransactionCreate\n  | TransactionMint\n  | TransactionUpgrade\n  | TransactionUpload\n  | TransactionBlob;\n\nexport type Transaction<TTransactionType = void> = TTransactionType extends TransactionType\n  ? Extract<PossibleTransactions, { type: TTransactionType }>\n  : Partial<Omit<TransactionScript, 'type'>> &\n      Partial<Omit<TransactionCreate, 'type'>> &\n      Partial<Omit<TransactionMint, 'type'>> &\n      Partial<Omit<TransactionUpgrade, 'type'>> &\n      Partial<Omit<TransactionUpload, 'type'>> &\n      Partial<Omit<TransactionBlob, 'type'>> & {\n        type: TransactionType;\n      };\n\nexport class TransactionCoder extends Coder<Transaction, Transaction> {\n  constructor() {\n    super('Transaction', 'struct Transaction', 0);\n  }\n\n  encode(value: Transaction): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8', { padToWordSize: true }).encode(value.type));\n\n    const { type } = value;\n\n    switch (value.type) {\n      case TransactionType.Script: {\n        parts.push(\n          new TransactionScriptCoder().encode(value as Transaction<TransactionType.Script>)\n        );\n        break;\n      }\n      case TransactionType.Create: {\n        parts.push(\n          new TransactionCreateCoder().encode(value as Transaction<TransactionType.Create>)\n        );\n        break;\n      }\n      case TransactionType.Mint: {\n        parts.push(new TransactionMintCoder().encode(value as Transaction<TransactionType.Mint>));\n        break;\n      }\n      case TransactionType.Upgrade: {\n        parts.push(\n          new TransactionUpgradeCoder().encode(value as Transaction<TransactionType.Upgrade>)\n        );\n        break;\n      }\n      case TransactionType.Upload: {\n        parts.push(\n          new TransactionUploadCoder().encode(value as Transaction<TransactionType.Upload>)\n        );\n        break;\n      }\n      case TransactionType.Blob: {\n        parts.push(new TransactionBlobCoder().encode(value as Transaction<TransactionType.Blob>));\n        break;\n      }\n      default: {\n        throw new FuelError(\n          ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n          `Unsupported transaction type: ${type}`\n        );\n      }\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Transaction, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8', { padToWordSize: true }).decode(data, o);\n    const type = decoded as TransactionType;\n\n    switch (type) {\n      case TransactionType.Script: {\n        [decoded, o] = new TransactionScriptCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case TransactionType.Create: {\n        [decoded, o] = new TransactionCreateCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case TransactionType.Mint: {\n        [decoded, o] = new TransactionMintCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case TransactionType.Upgrade: {\n        [decoded, o] = new TransactionUpgradeCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case TransactionType.Upload: {\n        [decoded, o] = new TransactionUploadCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case TransactionType.Blob: {\n        [decoded, o] = new TransactionBlobCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new FuelError(\n          ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n          `Unsupported transaction type: ${type}`\n        );\n      }\n    }\n  }\n}\n", "import { B256Coder, Coder, NumberCoder } from '@fuel-ts/abi-coder';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { concat } from '@fuel-ts/utils';\n\nexport enum UpgradePurposeTypeEnum {\n  ConsensusParameters = 0,\n  StateTransition = 1,\n}\n\nexport type UpgradePurpose =\n  | {\n      type: UpgradePurposeTypeEnum.ConsensusParameters;\n      data: ConsensusParameters;\n    }\n  | {\n      type: UpgradePurposeTypeEnum.StateTransition;\n      data: StateTransition;\n    };\n\nexport interface ConsensusParameters {\n  /** Index of witness that contains a serialized(with postcard) consensus parameters. (u16) */\n  witnessIndex: number;\n\n  /** The hash of the serialized consensus parameters. */\n  checksum: string;\n}\n\nexport interface StateTransition {\n  /** The root of the new bytecode of the state transition function. */\n  bytecodeRoot: string;\n}\n\nexport class UpgradePurposeCoder extends Coder<UpgradePurpose, UpgradePurpose> {\n  constructor() {\n    super('UpgradePurpose', 'UpgradePurpose', 0);\n  }\n\n  encode(upgradePurposeType: UpgradePurpose): Uint8Array {\n    const parts: Uint8Array[] = [];\n    const { type } = upgradePurposeType;\n\n    parts.push(new NumberCoder('u8', { padToWordSize: true }).encode(type));\n\n    switch (type) {\n      case UpgradePurposeTypeEnum.ConsensusParameters: {\n        const data = upgradePurposeType.data as ConsensusParameters;\n\n        parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(data.witnessIndex));\n        parts.push(new B256Coder().encode(data.checksum));\n        break;\n      }\n\n      case UpgradePurposeTypeEnum.StateTransition: {\n        const data = upgradePurposeType.data as StateTransition;\n\n        parts.push(new B256Coder().encode(data.bytecodeRoot));\n        break;\n      }\n\n      default: {\n        throw new FuelError(\n          ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n          `Unsupported transaction type: ${type}`\n        );\n      }\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [UpgradePurpose, number] {\n    let o = offset;\n    let decoded;\n\n    [decoded, o] = new NumberCoder('u8', { padToWordSize: true }).decode(data, o);\n    const type = decoded as UpgradePurposeTypeEnum;\n\n    switch (type) {\n      case UpgradePurposeTypeEnum.ConsensusParameters: {\n        [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n        const witnessIndex = decoded;\n        [decoded, o] = new B256Coder().decode(data, o);\n        const checksum = decoded;\n\n        return [{ type, data: { witnessIndex, checksum } }, o];\n      }\n\n      case UpgradePurposeTypeEnum.StateTransition: {\n        [decoded, o] = new B256Coder().decode(data, o);\n        const bytecodeRoot = decoded;\n\n        return [{ type, data: { bytecodeRoot } }, o];\n      }\n\n      default: {\n        throw new FuelError(\n          ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n          `Unsupported transaction type: ${type}`\n        );\n      }\n    }\n  }\n}\n", "import { Coder, NumberCoder } from '@fuel-ts/abi-coder';\nimport { concat } from '@fuel-ts/utils';\n\nimport { ByteArrayCoder } from './byte-array';\n\nexport type Witness = {\n  /** Length of witness data byte array */\n  dataLength: number;\n  /** Witness data (byte[]) */\n  data: string;\n};\n\nexport class WitnessCoder extends Coder<Witness, Witness> {\n  constructor() {\n    super(\n      'Witness',\n      // Types of dynamic length are not supported in the ABI\n      'unknown',\n      0\n    );\n  }\n\n  encode(value: Witness): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u32', { padToWordSize: true }).encode(value.dataLength));\n    parts.push(new ByteArrayCoder(value.dataLength).encode(value.data));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Witness, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u32', { padToWordSize: true }).decode(data, o);\n    const dataLength = decoded;\n    [decoded, o] = new ByteArrayCoder(dataLength).decode(data, o);\n    const witnessData = decoded;\n\n    return [\n      {\n        dataLength,\n        data: witnessData,\n      },\n      o,\n    ];\n  }\n}\n", "import { B256Coder, NumberCoder, StructCoder } from '@fuel-ts/abi-coder';\n\nexport type UtxoId = {\n  /** Transaction ID (b256) */\n  transactionId: string;\n  /** Output index (u8) */\n  outputIndex: number;\n};\n\nexport class UtxoIdCoder extends StructCoder<{\n  transactionId: B256Coder;\n  outputIndex: NumberCoder;\n}> {\n  constructor() {\n    super('UtxoId', {\n      transactionId: new B256Coder(),\n      outputIndex: new NumberCoder('u16', { padToWordSize: true }),\n    });\n  }\n}\n", "export default function _isPlaceholder(a) {\n  return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n}", "import _isPlaceholder from \"./_isPlaceholder.js\";\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}", "import _curry1 from \"./_curry1.js\";\nimport _isPlaceholder from \"./_isPlaceholder.js\";\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n          return fn(a, _b);\n        });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b);\n        }) : fn(a, b);\n    }\n  };\n}", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Adds two values.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a\n * @param {Number} b\n * @return {Number}\n * @see R.subtract\n * @example\n *\n *      R.add(2, 3);       //=>  5\n *      R.add(7)(10);      //=> 17\n */\nvar add = /*#__PURE__*/_curry2(function add(a, b) {\n  return Number(a) + Number(b);\n});\nexport default add;", "/**\n * Private `concat` function to merge two array-like objects.\n *\n * @private\n * @param {Array|Arguments} [set1=[]] An array-like object.\n * @param {Array|Arguments} [set2=[]] An array-like object.\n * @return {Array} A new, merged array.\n * @example\n *\n *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n */\nexport default function _concat(set1, set2) {\n  set1 = set1 || [];\n  set2 = set2 || [];\n  var idx;\n  var len1 = set1.length;\n  var len2 = set2.length;\n  var result = [];\n  idx = 0;\n  while (idx < len1) {\n    result[result.length] = set1[idx];\n    idx += 1;\n  }\n  idx = 0;\n  while (idx < len2) {\n    result[result.length] = set2[idx];\n    idx += 1;\n  }\n  return result;\n}", "export default function _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0:\n      return function () {\n        return fn.apply(this, arguments);\n      };\n    case 1:\n      return function (a0) {\n        return fn.apply(this, arguments);\n      };\n    case 2:\n      return function (a0, a1) {\n        return fn.apply(this, arguments);\n      };\n    case 3:\n      return function (a0, a1, a2) {\n        return fn.apply(this, arguments);\n      };\n    case 4:\n      return function (a0, a1, a2, a3) {\n        return fn.apply(this, arguments);\n      };\n    case 5:\n      return function (a0, a1, a2, a3, a4) {\n        return fn.apply(this, arguments);\n      };\n    case 6:\n      return function (a0, a1, a2, a3, a4, a5) {\n        return fn.apply(this, arguments);\n      };\n    case 7:\n      return function (a0, a1, a2, a3, a4, a5, a6) {\n        return fn.apply(this, arguments);\n      };\n    case 8:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n        return fn.apply(this, arguments);\n      };\n    case 9:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n        return fn.apply(this, arguments);\n      };\n    case 10:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n        return fn.apply(this, arguments);\n      };\n    default:\n      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n}", "import _arity from \"./_arity.js\";\nimport _isPlaceholder from \"./_isPlaceholder.js\";\n\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curryN(length, received, fn) {\n  return function () {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n    var hasPlaceholder = false;\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n      combined[combinedIdx] = result;\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      } else {\n        hasPlaceholder = true;\n      }\n      combinedIdx += 1;\n    }\n    return !hasPlaceholder && left <= 0 ? fn.apply(this, combined) : _arity(Math.max(0, left), _curryN(length, combined, fn));\n  };\n}", "import _arity from \"./internal/_arity.js\";\nimport _curry1 from \"./internal/_curry1.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport _curryN from \"./internal/_curryN.js\";\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      const sumArgs = (...args) => R.sum(args);\n *\n *      const curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n */\nvar curryN = /*#__PURE__*/_curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n  return _arity(length, _curryN(length, [], fn));\n});\nexport default curryN;", "import _concat from \"./internal/_concat.js\";\nimport _curry1 from \"./internal/_curry1.js\";\nimport curryN from \"./curryN.js\";\n\n/**\n * Creates a new list iteration function from an existing one by adding two new\n * parameters to its callback function: the current index, and the entire list.\n *\n * This would turn, for instance, [`R.map`](#map) function into one that\n * more closely resembles `Array.prototype.map`. Note that this will only work\n * for functions in which the iteration callback function is the first\n * parameter, and where the list is the last parameter. (This latter might be\n * unimportant if the list parameter is not used.)\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Function\n * @category List\n * @sig (((a ...) -> b) ... -> [a] -> *) -> (((a ..., Int, [a]) -> b) ... -> [a] -> *)\n * @param {Function} fn A list iteration function that does not pass index or list to its callback\n * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n * @example\n *\n *      const mapIndexed = R.addIndex(R.map);\n *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n */\nvar addIndex = /*#__PURE__*/_curry1(function addIndex(fn) {\n  return curryN(fn.length, function () {\n    var idx = 0;\n    var origFn = arguments[0];\n    var list = arguments[arguments.length - 1];\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = function () {\n      var result = origFn.apply(this, _concat(arguments, [idx, list]));\n      idx += 1;\n      return result;\n    };\n    return fn.apply(this, args);\n  });\n});\nexport default addIndex;", "import _concat from \"./internal/_concat.js\";\nimport _curry1 from \"./internal/_curry1.js\";\nimport curryN from \"./curryN.js\";\n\n/**\n * As with `addIndex`, `addIndexRight` creates a new list iteration function\n * from an existing one by adding two new parameters to its callback function:\n * the current index, and the entire list.\n *\n * Unlike `addIndex`, `addIndexRight` iterates from the right to the left.\n *\n * @func\n * @memberOf R\n * @since v0.29.0\n * @category Function\n * @category List\n * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)\n * @param {Function} fn A list iteration function that does not pass index or list to its callback\n * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n * @example\n *\n *      const revmap = (fn, ary) => R.map(fn, R.reverse(ary));\n *      const revmapIndexed = R.addIndexRight(revmap);\n *      revmapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n *      //=> [ '5-r', '4-a', '3-b', '2-o', '1-o', '0-f' ]\n */\nvar addIndexRight = /*#__PURE__*/_curry1(function addIndex(fn) {\n  return curryN(fn.length, function () {\n    var origFn = arguments[0];\n    var list = arguments[arguments.length - 1];\n    var idx = list.length - 1;\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = function () {\n      var result = origFn.apply(this, _concat(arguments, [idx, list]));\n      idx -= 1;\n      return result;\n    };\n    return fn.apply(this, args);\n  });\n});\nexport default addIndexRight;", "import _curry1 from \"./_curry1.js\";\nimport _curry2 from \"./_curry2.js\";\nimport _isPlaceholder from \"./_isPlaceholder.js\";\n\n/**\n * Optimized internal three-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry3(fn) {\n  return function f3(a, b, c) {\n    switch (arguments.length) {\n      case 0:\n        return f3;\n      case 1:\n        return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {\n          return fn(a, _b, _c);\n        });\n      case 2:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {\n          return fn(_a, b, _c);\n        }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {\n          return fn(a, _b, _c);\n        }) : _curry1(function (_c) {\n          return fn(a, b, _c);\n        });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {\n          return fn(_a, _b, c);\n        }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {\n          return fn(_a, b, _c);\n        }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {\n          return fn(a, _b, _c);\n        }) : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b, c);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b, c);\n        }) : _isPlaceholder(c) ? _curry1(function (_c) {\n          return fn(a, b, _c);\n        }) : fn(a, b, c);\n    }\n  };\n}", "import _concat from \"./internal/_concat.js\";\nimport _curry3 from \"./internal/_curry3.js\";\n\n/**\n * Applies a function to the value at the given index of an array, returning a\n * new copy of the array with the element at the given index replaced with the\n * result of the function application.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig Number -> (a -> a) -> [a] -> [a]\n * @param {Number} idx The index.\n * @param {Function} fn The function to apply.\n * @param {Array|Arguments} list An array-like object whose value\n *        at the supplied index will be replaced.\n * @return {Array} A copy of the supplied array-like object with\n *         the element at index `idx` replaced with the value\n *         returned by applying `fn` to the existing element.\n * @see R.update\n * @example\n *\n *      R.adjust(1, R.toUpper, ['a', 'b', 'c', 'd']);      //=> ['a', 'B', 'c', 'd']\n *      R.adjust(-1, R.toUpper, ['a', 'b', 'c', 'd']);     //=> ['a', 'b', 'c', 'D']\n * @symb R.adjust(-1, f, [a, b]) = [a, f(b)]\n * @symb R.adjust(0, f, [a, b]) = [f(a), b]\n */\nvar adjust = /*#__PURE__*/_curry3(function adjust(idx, fn, list) {\n  var len = list.length;\n  if (idx >= len || idx < -len) {\n    return list;\n  }\n  var _idx = (len + idx) % len;\n  var _list = _concat(list);\n  _list[_idx] = fn(list[_idx]);\n  return _list;\n});\nexport default adjust;", "/**\n * Tests whether or not an object is an array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n * @example\n *\n *      _isArray([]); //=> true\n *      _isArray(null); //=> false\n *      _isArray({}); //=> false\n */\nexport default Array.isArray || function _isArray(val) {\n  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';\n};", "export default function _isTransformer(obj) {\n  return obj != null && typeof obj['@@transducer/step'] === 'function';\n}", "import _isArray from \"./_isArray.js\";\nimport _isTransformer from \"./_isTransformer.js\";\n\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer created by [transducerCreator] to return a new transformer\n * (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} transducerCreator transducer factory if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\nexport default function _dispatchable(methodNames, transducerCreator, fn) {\n  return function () {\n    if (arguments.length === 0) {\n      return fn();\n    }\n    var obj = arguments[arguments.length - 1];\n    if (!_isArray(obj)) {\n      var idx = 0;\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, Array.prototype.slice.call(arguments, 0, -1));\n        }\n        idx += 1;\n      }\n      if (_isTransformer(obj)) {\n        var transducer = transducerCreator.apply(null, Array.prototype.slice.call(arguments, 0, -1));\n        return transducer(obj);\n      }\n    }\n    return fn.apply(this, arguments);\n  };\n}", "export default function _reduced(x) {\n  return x && x['@@transducer/reduced'] ? x : {\n    '@@transducer/value': x,\n    '@@transducer/reduced': true\n  };\n}", "export default {\n  init: function () {\n    return this.xf['@@transducer/init']();\n  },\n  result: function (result) {\n    return this.xf['@@transducer/result'](result);\n  }\n};", "import _reduced from \"./_reduced.js\";\nimport _xfBase from \"./_xfBase.js\";\nvar XAll = /*#__PURE__*/function () {\n  function XAll(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.all = true;\n  }\n  XAll.prototype['@@transducer/init'] = _xfBase.init;\n  XAll.prototype['@@transducer/result'] = function (result) {\n    if (this.all) {\n      result = this.xf['@@transducer/step'](result, true);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XAll.prototype['@@transducer/step'] = function (result, input) {\n    if (!this.f(input)) {\n      this.all = false;\n      result = _reduced(this.xf['@@transducer/step'](result, false));\n    }\n    return result;\n  };\n  return XAll;\n}();\nexport default function _xall(f) {\n  return function (xf) {\n    return new XAll(f, xf);\n  };\n}", "import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xall from \"./internal/_xall.js\";\n\n/**\n * Returns `true` if all elements of the list match the predicate, `false` if\n * there are any that don't.\n *\n * Dispatches to the `all` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is satisfied by every element, `false`\n *         otherwise.\n * @see R.any, R.none, R.transduce\n * @example\n *\n *      const equals3 = R.equals(3);\n *      R.all(equals3)([3, 3, 3, 3]); //=> true\n *      R.all(equals3)([3, 3, 1, 3]); //=> false\n */\nvar all = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['all'], _xall, function all(fn, list) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (!fn(list[idx])) {\n      return false;\n    }\n    idx += 1;\n  }\n  return true;\n}));\nexport default all;", "export default function _arrayFromIterator(iter) {\n  var list = [];\n  var next;\n  while (!(next = iter.next()).done) {\n    list.push(next.value);\n  }\n  return list;\n}", "export default function _includesWith(pred, x, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n}", "export default function _functionName(f) {\n  // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n  var match = String(f).match(/^function (\\w*)/);\n  return match == null ? '' : match[1];\n}", "export default function _has(prop, obj) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}", "// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\nfunction _objectIs(a, b) {\n  // SameValue algorithm\n  if (a === b) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return a !== 0 || 1 / a === 1 / b;\n  } else {\n    // Step 6.a: NaN == NaN\n    return a !== a && b !== b;\n  }\n}\nexport default typeof Object.is === 'function' ? Object.is : _objectIs;", "import _has from \"./_has.js\";\nvar toString = Object.prototype.toString;\nvar _isArguments = /*#__PURE__*/function () {\n  return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {\n    return toString.call(x) === '[object Arguments]';\n  } : function _isArguments(x) {\n    return _has('callee', x);\n  };\n}();\nexport default _isArguments;", "import _curry1 from \"./internal/_curry1.js\";\nimport _has from \"./internal/_has.js\";\nimport _isArguments from \"./internal/_isArguments.js\";\n\n// cover IE < 9 keys issues\nvar hasEnumBug = ! /*#__PURE__*/{\n  toString: null\n}.propertyIsEnumerable('toString');\nvar nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n// Safari bug\nvar hasArgsEnumBug = /*#__PURE__*/function () {\n  'use strict';\n\n  return arguments.propertyIsEnumerable('length');\n}();\nvar contains = function contains(list, item) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (list[idx] === item) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n};\n\n/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @see R.keysIn, R.values, R.toPairs\n * @example\n *\n *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */\nvar keys = typeof Object.keys === 'function' && !hasArgsEnumBug ? /*#__PURE__*/_curry1(function keys(obj) {\n  return Object(obj) !== obj ? [] : Object.keys(obj);\n}) : /*#__PURE__*/_curry1(function keys(obj) {\n  if (Object(obj) !== obj) {\n    return [];\n  }\n  var prop, nIdx;\n  var ks = [];\n  var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n  for (prop in obj) {\n    if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n      ks[ks.length] = prop;\n    }\n  }\n  if (hasEnumBug) {\n    nIdx = nonEnumerableProps.length - 1;\n    while (nIdx >= 0) {\n      prop = nonEnumerableProps[nIdx];\n      if (_has(prop, obj) && !contains(ks, prop)) {\n        ks[ks.length] = prop;\n      }\n      nIdx -= 1;\n    }\n  }\n  return ks;\n});\nexport default keys;", "import _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig * -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n *      R.type(() => {}); //=> \"Function\"\n *      R.type(async () => {}); //=> \"AsyncFunction\"\n *      R.type(undefined); //=> \"Undefined\"\n *      R.type(BigInt(123)); //=> \"BigInt\"\n */\nvar type = /*#__PURE__*/_curry1(function type(val) {\n  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n});\nexport default type;", "import _arrayFromIterator from \"./_arrayFromIterator.js\";\nimport _includesWith from \"./_includesWith.js\";\nimport _functionName from \"./_functionName.js\";\nimport _has from \"./_has.js\";\nimport _objectIs from \"./_objectIs.js\";\nimport keys from \"../keys.js\";\nimport type from \"../type.js\";\n\n/**\n * private _uniqContentEquals function.\n * That function is checking equality of 2 iterator contents with 2 assumptions\n * - iterators lengths are the same\n * - iterators values are unique\n *\n * false-positive result will be returned for comparison of, e.g.\n * - [1,2,3] and [1,2,3,4]\n * - [1,1,1] and [1,2,3]\n * */\n\nfunction _uniqContentEquals(aIterator, bIterator, stackA, stackB) {\n  var a = _arrayFromIterator(aIterator);\n  var b = _arrayFromIterator(bIterator);\n  function eq(_a, _b) {\n    return _equals(_a, _b, stackA.slice(), stackB.slice());\n  }\n\n  // if *a* array contains any element that is not included in *b*\n  return !_includesWith(function (b, aItem) {\n    return !_includesWith(eq, aItem, b);\n  }, b, a);\n}\nexport default function _equals(a, b, stackA, stackB) {\n  if (_objectIs(a, b)) {\n    return true;\n  }\n  var typeA = type(a);\n  if (typeA !== type(b)) {\n    return false;\n  }\n  if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {\n    return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) && typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);\n  }\n  if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n    return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);\n  }\n  switch (typeA) {\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n      if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {\n        return a === b;\n      }\n      break;\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n      if (!(typeof a === typeof b && _objectIs(a.valueOf(), b.valueOf()))) {\n        return false;\n      }\n      break;\n    case 'Date':\n      if (!_objectIs(a.valueOf(), b.valueOf())) {\n        return false;\n      }\n      break;\n    case 'Error':\n      return a.name === b.name && a.message === b.message;\n    case 'RegExp':\n      if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {\n        return false;\n      }\n      break;\n  }\n  var idx = stackA.length - 1;\n  while (idx >= 0) {\n    if (stackA[idx] === a) {\n      return stackB[idx] === b;\n    }\n    idx -= 1;\n  }\n  switch (typeA) {\n    case 'Map':\n      if (a.size !== b.size) {\n        return false;\n      }\n      return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));\n    case 'Set':\n      if (a.size !== b.size) {\n        return false;\n      }\n      return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n    case 'Date':\n    case 'Error':\n    case 'RegExp':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'ArrayBuffer':\n      break;\n    default:\n      // Values of other types are only equal if identical.\n      return false;\n  }\n  var keysA = keys(a);\n  if (keysA.length !== keys(b).length) {\n    return false;\n  }\n  var extendedStackA = stackA.concat([a]);\n  var extendedStackB = stackB.concat([b]);\n  idx = keysA.length - 1;\n  while (idx >= 0) {\n    var key = keysA[idx];\n    if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {\n      return false;\n    }\n    idx -= 1;\n  }\n  return true;\n}", "import _curry2 from \"./internal/_curry2.js\";\nimport _equals from \"./internal/_equals.js\";\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      const a = {}; a.v = a;\n *      const b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\nvar equals = /*#__PURE__*/_curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\nexport default equals;", "import equals from \"../equals.js\";\nexport default function _indexOf(list, a, idx) {\n  var inf, item;\n  // Array.prototype.indexOf doesn't exist below IE9\n  if (typeof list.indexOf === 'function') {\n    switch (typeof a) {\n      case 'number':\n        if (a === 0) {\n          // manually crawl the list to distinguish between +0 and -0\n          inf = 1 / a;\n          while (idx < list.length) {\n            item = list[idx];\n            if (item === 0 && 1 / item === inf) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        } else if (a !== a) {\n          // NaN\n          while (idx < list.length) {\n            item = list[idx];\n            if (typeof item === 'number' && item !== item) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        }\n        // non-zero numbers can utilise Set\n        return list.indexOf(a, idx);\n\n      // all these types can utilise Set\n      case 'string':\n      case 'boolean':\n      case 'function':\n      case 'undefined':\n        return list.indexOf(a, idx);\n      case 'object':\n        if (a === null) {\n          // null can utilise Set\n          return list.indexOf(a, idx);\n        }\n    }\n  }\n  // anything else not covered above, defer to R.equals\n  while (idx < list.length) {\n    if (equals(list[idx], a)) {\n      return idx;\n    }\n    idx += 1;\n  }\n  return -1;\n}", "import _indexOf from \"./_indexOf.js\";\nexport default function _includes(a, list) {\n  return _indexOf(list, a, 0) >= 0;\n}", "export default function _map(fn, functor) {\n  var idx = 0;\n  var len = functor.length;\n  var result = Array(len);\n  while (idx < len) {\n    result[idx] = fn(functor[idx]);\n    idx += 1;\n  }\n  return result;\n}", "export default function _quote(s) {\n  var escaped = s.replace(/\\\\/g, '\\\\\\\\').replace(/[\\b]/g, '\\\\b') // \\b matches word boundary; [\\b] matches backspace\n  .replace(/\\f/g, '\\\\f').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t').replace(/\\v/g, '\\\\v').replace(/\\0/g, '\\\\0');\n  return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n}", "/**\n * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n */\nvar pad = function pad(n) {\n  return (n < 10 ? '0' : '') + n;\n};\nvar _toISOString = typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {\n  return d.toISOString();\n} : function _toISOString(d) {\n  return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';\n};\nexport default _toISOString;", "export default function _complement(f) {\n  return function () {\n    return !f.apply(this, arguments);\n  };\n}", "export default function _arrayReduce(reducer, acc, list) {\n  var index = 0;\n  var length = list.length;\n  while (index < length) {\n    acc = reducer(acc, list[index]);\n    index += 1;\n  }\n  return acc;\n}", "export default function _filter(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  while (idx < len) {\n    if (fn(list[idx])) {\n      result[result.length] = list[idx];\n    }\n    idx += 1;\n  }\n  return result;\n}", "export default function _isObject(x) {\n  return Object.prototype.toString.call(x) === '[object Object]';\n}", "import _xfBase from \"./_xfBase.js\";\nvar XFilter = /*#__PURE__*/function () {\n  function XFilter(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XFilter.prototype['@@transducer/init'] = _xfBase.init;\n  XFilter.prototype['@@transducer/result'] = _xfBase.result;\n  XFilter.prototype['@@transducer/step'] = function (result, input) {\n    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n  };\n  return XFilter;\n}();\nexport default function _xfilter(f) {\n  return function (xf) {\n    return new XFilter(f, xf);\n  };\n}", "import _arrayReduce from \"./internal/_arrayReduce.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _filter from \"./internal/_filter.js\";\nimport _isObject from \"./internal/_isObject.js\";\nimport _xfilter from \"./internal/_xfilter.js\";\nimport keys from \"./keys.js\";\n\n/**\n * Takes a predicate and a `Filterable`, and returns a new filterable of the\n * same type containing the members of the given filterable which satisfy the\n * given predicate. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * Dispatches to the `filter` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @category Object\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array} Filterable\n * @see R.reject, R.transduce, R.addIndex\n * @example\n *\n *      const isEven = n => n % 2 === 0;\n *\n *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nvar filter = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/filter', 'filter'], _xfilter, function (pred, filterable) {\n  return _isObject(filterable) ? _arrayReduce(function (acc, key) {\n    if (pred(filterable[key])) {\n      acc[key] = filterable[key];\n    }\n    return acc;\n  }, {}, keys(filterable)) :\n  // else\n  _filter(pred, filterable);\n}));\nexport default filter;", "import _complement from \"./internal/_complement.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport filter from \"./filter.js\";\n\n/**\n * The complement of [`filter`](#filter).\n *\n * Acts as a transducer if a transformer is given in list position. Filterable\n * objects include plain objects or any object that has a filter method such\n * as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.filter, R.transduce, R.addIndex\n * @example\n *\n *      const isOdd = (n) => n % 2 !== 0;\n *\n *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nvar reject = /*#__PURE__*/_curry2(function reject(pred, filterable) {\n  return filter(_complement(pred), filterable);\n});\nexport default reject;", "import _includes from \"./_includes.js\";\nimport _map from \"./_map.js\";\nimport _quote from \"./_quote.js\";\nimport _toISOString from \"./_toISOString.js\";\nimport keys from \"../keys.js\";\nimport reject from \"../reject.js\";\nexport default function _toString(x, seen) {\n  var recur = function recur(y) {\n    var xs = seen.concat([x]);\n    return _includes(y, xs) ? '<Circular>' : _toString(y, xs);\n  };\n\n  //  mapPairs :: (Object, [String]) -> [String]\n  var mapPairs = function (obj, keys) {\n    return _map(function (k) {\n      return _quote(k) + ': ' + recur(obj[k]);\n    }, keys.slice().sort());\n  };\n  switch (Object.prototype.toString.call(x)) {\n    case '[object Arguments]':\n      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n    case '[object Array]':\n      return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {\n        return /^\\d+$/.test(k);\n      }, keys(x)))).join(', ') + ']';\n    case '[object Boolean]':\n      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n    case '[object Date]':\n      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n    case '[object Map]':\n      return 'new Map(' + recur(Array.from(x)) + ')';\n    case '[object Null]':\n      return 'null';\n    case '[object Number]':\n      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n    case '[object Set]':\n      return 'new Set(' + recur(Array.from(x).sort()) + ')';\n    case '[object String]':\n      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n    case '[object Undefined]':\n      return 'undefined';\n    default:\n      if (typeof x.toString === 'function') {\n        var repr = x.toString();\n        if (repr !== '[object Object]') {\n          return repr;\n        }\n      }\n      return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n  }\n}", "import _curry1 from \"./internal/_curry1.js\";\nimport _toString from \"./internal/_toString.js\";\n\n/**\n * Returns the string representation of the given value. `eval`'ing the output\n * should result in a value equivalent to the input value. Many of the built-in\n * `toString` methods do not satisfy this requirement.\n *\n * If the given value is an `[object Object]` with a `toString` method other\n * than `Object.prototype.toString`, this method is invoked with no arguments\n * to produce the return value. This means user-defined constructor functions\n * can provide a suitable `toString` method. For example:\n *\n *     function Point(x, y) {\n *       this.x = x;\n *       this.y = y;\n *     }\n *\n *     Point.prototype.toString = function() {\n *       return 'new Point(' + this.x + ', ' + this.y + ')';\n *     };\n *\n *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category String\n * @sig * -> String\n * @param {*} val\n * @return {String}\n * @example\n *\n *      R.toString(42); //=> '42'\n *      R.toString('abc'); //=> '\"abc\"'\n *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n */\nvar toString = /*#__PURE__*/_curry1(function toString(val) {\n  return _toString(val, []);\n});\nexport default toString;", "import _curry2 from \"./internal/_curry2.js\";\nimport toString from \"./toString.js\";\n\n/**\n * Returns the larger of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.maxBy, R.min\n * @example\n *\n *      R.max(789, 123); //=> 789\n *      R.max('a', 'b'); //=> 'b'\n */\nvar max = /*#__PURE__*/_curry2(function max(a, b) {\n  if (a === b) {\n    return b;\n  }\n  function safeMax(x, y) {\n    if (x > y !== y > x) {\n      return y > x ? y : x;\n    }\n    return undefined;\n  }\n  var maxByValue = safeMax(a, b);\n  if (maxByValue !== undefined) {\n    return maxByValue;\n  }\n  var maxByType = safeMax(typeof a, typeof b);\n  if (maxByType !== undefined) {\n    return maxByType === typeof a ? a : b;\n  }\n  var stringA = toString(a);\n  var maxByStringValue = safeMax(stringA, toString(b));\n  if (maxByStringValue !== undefined) {\n    return maxByStringValue === stringA ? a : b;\n  }\n  return b;\n});\nexport default max;", "import _xfBase from \"./_xfBase.js\";\nvar XMap = /*#__PURE__*/function () {\n  function XMap(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XMap.prototype['@@transducer/init'] = _xfBase.init;\n  XMap.prototype['@@transducer/result'] = _xfBase.result;\n  XMap.prototype['@@transducer/step'] = function (result, input) {\n    return this.xf['@@transducer/step'](result, this.f(input));\n  };\n  return XMap;\n}();\nvar _xmap = function _xmap(f) {\n  return function (xf) {\n    return new XMap(f, xf);\n  };\n};\nexport default _xmap;", "import _arrayReduce from \"./internal/_arrayReduce.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _map from \"./internal/_map.js\";\nimport _xmap from \"./internal/_xmap.js\";\nimport curryN from \"./curryN.js\";\nimport keys from \"./keys.js\";\n\n/**\n * Takes a function and\n * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n * applies the function to each of the functor's values, and returns\n * a functor of the same shape.\n *\n * Ramda provides suitable `map` implementations for `Array` and `Object`,\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n *\n * Dispatches to the `map` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * Also treats functions as functors and will compose them together.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => (a -> b) -> f a -> f b\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {Array} list The list to be iterated over.\n * @return {Array} The new list.\n * @see R.transduce, R.addIndex, R.pluck, R.project\n * @example\n *\n *      const double = x => x * 2;\n *\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n *\n *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n * @symb R.map(f, [a, b]) = [f(a), f(b)]\n * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }\n * @symb R.map(f, functor_o) = functor_o.map(f)\n */\nvar map = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/map', 'map'], _xmap, function map(fn, functor) {\n  switch (Object.prototype.toString.call(functor)) {\n    case '[object Function]':\n      return curryN(functor.length, function () {\n        return fn.call(this, functor.apply(this, arguments));\n      });\n    case '[object Object]':\n      return _arrayReduce(function (acc, key) {\n        acc[key] = fn(functor[key]);\n        return acc;\n      }, {}, keys(functor));\n    default:\n      return _map(fn, functor);\n  }\n}));\nexport default map;", "/**\n * Determine if the passed argument is an integer.\n *\n * @private\n * @param {*} n\n * @category Type\n * @return {Boolean}\n */\nexport default Number.isInteger || function _isInteger(n) {\n  return n << 0 === n;\n};", "export default function _isString(x) {\n  return Object.prototype.toString.call(x) === '[object String]';\n}", "import _isString from \"./_isString.js\";\nexport default function _nth(offset, list) {\n  var idx = offset < 0 ? list.length + offset : offset;\n  return _isString(list) ? list.charAt(idx) : list[idx];\n}", "import _curry2 from \"./internal/_curry2.js\";\nimport _isInteger from \"./internal/_isInteger.js\";\nimport _nth from \"./internal/_nth.js\";\n\n/**\n * Returns a function that when supplied an object returns the indicated\n * property of that object, if it exists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig Idx -> {s: a} -> a | Undefined\n * @param {String|Number} p The property name or array index\n * @param {Object} obj The object to query\n * @return {*} The value at `obj.p`.\n * @see R.path, R.props, R.pluck, R.project, R.nth\n * @example\n *\n *      R.prop('x', {x: 100}); //=> 100\n *      R.prop('x', {}); //=> undefined\n *      R.prop(0, [100]); //=> 100\n *      R.compose(R.inc, R.prop('x'))({ x: 3 }) //=> 4\n */\n\nvar prop = /*#__PURE__*/_curry2(function prop(p, obj) {\n  if (obj == null) {\n    return;\n  }\n  return _isInteger(p) ? _nth(p, obj) : obj[p];\n});\nexport default prop;", "import _curry2 from \"./internal/_curry2.js\";\nimport map from \"./map.js\";\nimport prop from \"./prop.js\";\n\n/**\n * Returns a new list by plucking the same named property off all objects in\n * the list supplied.\n *\n * `pluck` will work on\n * any [functor](https://github.com/fantasyland/fantasy-land#functor) in\n * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => k -> f {k: v} -> f v\n * @param {Number|String} key The key name to pluck off of each object.\n * @param {Array} f The array or functor to consider.\n * @return {Array} The list of values for the given key.\n * @see R.project, R.prop, R.props\n * @example\n *\n *      var getAges = R.pluck('age');\n *      getAges([{name: 'fred', age: 29}, {name: 'wilma', age: 27}]); //=> [29, 27]\n *\n *      R.pluck(0, [[1, 2], [3, 4]]);               //=> [1, 3]\n *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}\n * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]\n * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]\n */\nvar pluck = /*#__PURE__*/_curry2(function pluck(p, list) {\n  return map(prop(p), list);\n});\nexport default pluck;", "import _curry1 from \"./_curry1.js\";\nimport _isArray from \"./_isArray.js\";\nimport _isString from \"./_isString.js\";\n\n/**\n * Tests whether or not an object is similar to an array.\n *\n * @private\n * @category Type\n * @category List\n * @sig * -> Boolean\n * @param {*} x The object to test.\n * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n * @example\n *\n *      _isArrayLike([]); //=> true\n *      _isArrayLike(true); //=> false\n *      _isArrayLike({}); //=> false\n *      _isArrayLike({length: 10}); //=> false\n *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n *      _isArrayLike({nodeType: 1, length: 1}) // => false\n */\nvar _isArrayLike = /*#__PURE__*/_curry1(function isArrayLike(x) {\n  if (_isArray(x)) {\n    return true;\n  }\n  if (!x) {\n    return false;\n  }\n  if (typeof x !== 'object') {\n    return false;\n  }\n  if (_isString(x)) {\n    return false;\n  }\n  if (x.length === 0) {\n    return true;\n  }\n  if (x.length > 0) {\n    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n  }\n  return false;\n});\nexport default _isArrayLike;", "import _isArrayLike from \"./_isArrayLike.js\";\nvar symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';\nexport default function _createReduce(arrayReduce, methodReduce, iterableReduce) {\n  return function _reduce(xf, acc, list) {\n    if (_isArrayLike(list)) {\n      return arrayReduce(xf, acc, list);\n    }\n    if (list == null) {\n      return acc;\n    }\n    if (typeof list['fantasy-land/reduce'] === 'function') {\n      return methodReduce(xf, acc, list, 'fantasy-land/reduce');\n    }\n    if (list[symIterator] != null) {\n      return iterableReduce(xf, acc, list[symIterator]());\n    }\n    if (typeof list.next === 'function') {\n      return iterableReduce(xf, acc, list);\n    }\n    if (typeof list.reduce === 'function') {\n      return methodReduce(xf, acc, list, 'reduce');\n    }\n    throw new TypeError('reduce: list must be array or iterable');\n  };\n}", "export default function _xArrayReduce(xf, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    acc = xf['@@transducer/step'](acc, list[idx]);\n    if (acc && acc['@@transducer/reduced']) {\n      acc = acc['@@transducer/value'];\n      break;\n    }\n    idx += 1;\n  }\n  return xf['@@transducer/result'](acc);\n}", "import _arity from \"./internal/_arity.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Creates a function that is bound to a context.\n * Note: `R.bind` does not provide the additional argument-binding capabilities of\n * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @category Object\n * @sig (* -> *) -> {*} -> (* -> *)\n * @param {Function} fn The function to bind to context\n * @param {Object} thisObj The context to bind `fn` to\n * @return {Function} A function that will execute in the context of `thisObj`.\n * @see R.partial\n * @example\n *\n *      const log = R.bind(console.log, console);\n *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n *      // logs {a: 2}\n * @symb R.bind(f, o)(a, b) = f.call(o, a, b)\n */\nvar bind = /*#__PURE__*/_curry2(function bind(fn, thisObj) {\n  return _arity(fn.length, function () {\n    return fn.apply(thisObj, arguments);\n  });\n});\nexport default bind;", "import _createReduce from \"./_createReduce.js\";\nimport _xArrayReduce from \"./_xArrayReduce.js\";\nimport bind from \"../bind.js\";\nfunction _xIterableReduce(xf, acc, iter) {\n  var step = iter.next();\n  while (!step.done) {\n    acc = xf['@@transducer/step'](acc, step.value);\n    if (acc && acc['@@transducer/reduced']) {\n      acc = acc['@@transducer/value'];\n      break;\n    }\n    step = iter.next();\n  }\n  return xf['@@transducer/result'](acc);\n}\nfunction _xMethodReduce(xf, acc, obj, methodName) {\n  return xf['@@transducer/result'](obj[methodName](bind(xf['@@transducer/step'], xf), acc));\n}\nvar _xReduce = /*#__PURE__*/_createReduce(_xArrayReduce, _xMethodReduce, _xIterableReduce);\nexport default _xReduce;", "var XWrap = /*#__PURE__*/function () {\n  function XWrap(fn) {\n    this.f = fn;\n  }\n  XWrap.prototype['@@transducer/init'] = function () {\n    throw new Error('init not implemented on XWrap');\n  };\n  XWrap.prototype['@@transducer/result'] = function (acc) {\n    return acc;\n  };\n  XWrap.prototype['@@transducer/step'] = function (acc, x) {\n    return this.f(acc, x);\n  };\n  return XWrap;\n}();\nexport default function _xwrap(fn) {\n  return new XWrap(fn);\n}", "import _curry3 from \"./internal/_curry3.js\";\nimport _xReduce from \"./internal/_xReduce.js\";\nimport _xwrap from \"./internal/_xwrap.js\";\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * [`R.reduced`](#reduced) to shortcut the iteration.\n *\n * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function\n * is *(value, acc)*.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Be cautious of mutating and returning the accumulator. If you reuse it across\n * invocations, it will continue to accumulate onto the same value. The general\n * recommendation is to always return a new value. If you can't do so for\n * performance reasons, then be sure to reinitialize the accumulator on each\n * invocation.\n *\n * Dispatches to the `reduce` method of the third argument, if present. When\n * doing so, it is up to the user to handle the [`R.reduced`](#reduced)\n * shortcuting, as this is not implemented by `reduce`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex, R.reduceRight\n * @example\n *\n *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n *      //          -               -10\n *      //         / \\              / \\\n *      //        -   4           -6   4\n *      //       / \\              / \\\n *      //      -   3   ==>     -3   3\n *      //     / \\              / \\\n *      //    -   2           -1   2\n *      //   / \\              / \\\n *      //  0   1            0   1\n *\n * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\n */\nvar reduce = /*#__PURE__*/_curry3(function (xf, acc, list) {\n  return _xReduce(typeof xf === 'function' ? _xwrap(xf) : xf, acc, list);\n});\nexport default reduce;", "import _curry1 from \"./internal/_curry1.js\";\nimport curryN from \"./curryN.js\";\nimport max from \"./max.js\";\nimport pluck from \"./pluck.js\";\nimport reduce from \"./reduce.js\";\n\n/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if every one of the provided predicates is satisfied\n * by those arguments.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see R.anyPass, R.both\n * @example\n *\n *      const isQueen = R.propEq('Q', 'rank');\n *      const isSpade = R.propEq('♠︎', 'suit');\n *      const isQueenOfSpades = R.allPass([isQueen, isSpade]);\n *\n *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\n */\nvar allPass = /*#__PURE__*/_curry1(function allPass(preds) {\n  return curryN(reduce(max, 0, pluck('length', preds)), function () {\n    var idx = 0;\n    var len = preds.length;\n    while (idx < len) {\n      if (!preds[idx].apply(this, arguments)) {\n        return false;\n      }\n      idx += 1;\n    }\n    return true;\n  });\n});\nexport default allPass;", "import _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Returns a function that always returns the given value. Note that for\n * non-primitives the value returned is a reference to the original value.\n *\n * This function is known as `const`, `constant`, or `K` (for K combinator) in\n * other languages and libraries.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> (* -> a)\n * @param {*} val The value to wrap in a function\n * @return {Function} A Function :: * -> val.\n * @example\n *\n *      const t = R.always('Tee');\n *      t(); //=> 'Tee'\n */\nvar always = /*#__PURE__*/_curry1(function always(val) {\n  return function () {\n    return val;\n  };\n});\nexport default always;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Returns the first argument if it is falsy, otherwise the second argument.\n * Acts as the boolean `and` statement if both inputs are `Boolean`s.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any}\n * @see R.both, R.or\n * @example\n *\n *      R.and(true, true); //=> true\n *      R.and(true, false); //=> false\n *      R.and(false, true); //=> false\n *      R.and(false, false); //=> false\n */\nvar and = /*#__PURE__*/_curry2(function and(a, b) {\n  return a && b;\n});\nexport default and;", "import _reduced from \"./_reduced.js\";\nimport _xfBase from \"./_xfBase.js\";\nvar XAny = /*#__PURE__*/function () {\n  function XAny(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.any = false;\n  }\n  XAny.prototype['@@transducer/init'] = _xfBase.init;\n  XAny.prototype['@@transducer/result'] = function (result) {\n    if (!this.any) {\n      result = this.xf['@@transducer/step'](result, false);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XAny.prototype['@@transducer/step'] = function (result, input) {\n    if (this.f(input)) {\n      this.any = true;\n      result = _reduced(this.xf['@@transducer/step'](result, true));\n    }\n    return result;\n  };\n  return XAny;\n}();\nexport default function _xany(f) {\n  return function (xf) {\n    return new XAny(f, xf);\n  };\n}", "import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xany from \"./internal/_xany.js\";\n\n/**\n * Returns `true` if at least one of the elements of the list match the predicate,\n * `false` otherwise.\n *\n * Dispatches to the `any` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\n *         otherwise.\n * @see R.all, R.none, R.transduce\n * @example\n *\n *      const lessThan0 = R.flip(R.lt)(0);\n *      const lessThan2 = R.flip(R.lt)(2);\n *      R.any(lessThan0)([1, 2]); //=> false\n *      R.any(lessThan2)([1, 2]); //=> true\n */\nvar any = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['any'], _xany, function any(fn, list) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (fn(list[idx])) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n}));\nexport default any;", "import _curry1 from \"./internal/_curry1.js\";\nimport curryN from \"./curryN.js\";\nimport max from \"./max.js\";\nimport pluck from \"./pluck.js\";\nimport reduce from \"./reduce.js\";\n\n/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if at least one of the provided predicates is\n * satisfied by those arguments.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see R.allPass, R.either\n * @example\n *\n *      const isClub = R.propEq('♣', 'suit');\n *      const isSpade = R.propEq('♠', 'suit');\n *      const isBlackCard = R.anyPass([isClub, isSpade]);\n *\n *      isBlackCard({rank: '10', suit: '♣'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '♠'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '♦'}); //=> false\n */\nvar anyPass = /*#__PURE__*/_curry1(function anyPass(preds) {\n  return curryN(reduce(max, 0, pluck('length', preds)), function () {\n    var idx = 0;\n    var len = preds.length;\n    while (idx < len) {\n      if (preds[idx].apply(this, arguments)) {\n        return true;\n      }\n      idx += 1;\n    }\n    return false;\n  });\n});\nexport default anyPass;", "import _arrayReduce from \"./_arrayReduce.js\";\nimport _createReduce from \"./_createReduce.js\";\nfunction _iterableReduce(reducer, acc, iter) {\n  var step = iter.next();\n  while (!step.done) {\n    acc = reducer(acc, step.value);\n    step = iter.next();\n  }\n  return acc;\n}\nfunction _methodReduce(reducer, acc, obj, methodName) {\n  return obj[methodName](reducer, acc);\n}\nvar _reduce = /*#__PURE__*/_createReduce(_arrayReduce, _methodReduce, _iterableReduce);\nexport default _reduce;", "import _concat from \"./internal/_concat.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport _reduce from \"./internal/_reduce.js\";\nimport map from \"./map.js\";\n\n/**\n * ap applies a list of functions to a list of values.\n *\n * Dispatches to the `ap` method of the first argument, if present. Also\n * treats curried functions as applicatives.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig [a -> b] -> [a] -> [b]\n * @sig Apply f => f (a -> b) -> f a -> f b\n * @sig (r -> a -> b) -> (r -> a) -> (r -> b)\n * @param {*} applyF\n * @param {*} applyX\n * @return {*}\n * @example\n *\n *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> [\"tasty pizza\", \"tasty salad\", \"PIZZA\", \"SALAD\"]\n *\n *      // R.ap can also be used as S combinator\n *      // when only two functions are passed\n *      R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'\n * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]\n */\nvar ap = /*#__PURE__*/_curry2(function ap(applyF, applyX) {\n  return typeof applyX['fantasy-land/ap'] === 'function' ? applyX['fantasy-land/ap'](applyF) : typeof applyF.ap === 'function' ? applyF.ap(applyX) : typeof applyF === 'function' ? function (x) {\n    return applyF(x)(applyX(x));\n  } : _reduce(function (acc, f) {\n    return _concat(acc, map(f, applyX));\n  }, [], applyF);\n});\nexport default ap;", "export default function _aperture(n, list) {\n  var idx = 0;\n  var limit = list.length - (n - 1);\n  var acc = new Array(limit >= 0 ? limit : 0);\n  while (idx < limit) {\n    acc[idx] = Array.prototype.slice.call(list, idx, idx + n);\n    idx += 1;\n  }\n  return acc;\n}", "import _concat from \"./_concat.js\";\nimport _xfBase from \"./_xfBase.js\";\nvar XAperture = /*#__PURE__*/function () {\n  function XAperture(n, xf) {\n    this.xf = xf;\n    this.pos = 0;\n    this.full = false;\n    this.acc = new Array(n);\n  }\n  XAperture.prototype['@@transducer/init'] = _xfBase.init;\n  XAperture.prototype['@@transducer/result'] = function (result) {\n    this.acc = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XAperture.prototype['@@transducer/step'] = function (result, input) {\n    this.store(input);\n    return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;\n  };\n  XAperture.prototype.store = function (input) {\n    this.acc[this.pos] = input;\n    this.pos += 1;\n    if (this.pos === this.acc.length) {\n      this.pos = 0;\n      this.full = true;\n    }\n  };\n  XAperture.prototype.getCopy = function () {\n    return _concat(Array.prototype.slice.call(this.acc, this.pos), Array.prototype.slice.call(this.acc, 0, this.pos));\n  };\n  return XAperture;\n}();\nexport default function _xaperture(n) {\n  return function (xf) {\n    return new XAperture(n, xf);\n  };\n}", "import _aperture from \"./internal/_aperture.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xaperture from \"./internal/_xaperture.js\";\n\n/**\n * Returns a new list, composed of n-tuples of consecutive elements. If `n` is\n * greater than the length of the list, an empty list is returned.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @param {Number} n The size of the tuples to create\n * @param {Array} list The list to split into `n`-length tuples\n * @return {Array} The resulting list of `n`-length tuples\n * @see R.transduce\n * @example\n *\n *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n */\nvar aperture = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xaperture, _aperture));\nexport default aperture;", "import _concat from \"./internal/_concat.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Returns a new list containing the contents of the given list, followed by\n * the given element.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The element to add to the end of the new list.\n * @param {Array} list The list of elements to add a new item to.\n *        list.\n * @return {Array} A new list containing the elements of the old list followed by `el`.\n * @see R.prepend\n * @example\n *\n *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n *      R.append('tests', []); //=> ['tests']\n *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n */\nvar append = /*#__PURE__*/_curry2(function append(el, list) {\n  return _concat(list, [el]);\n});\nexport default append;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Applies function `fn` to the argument list `args`. This is useful for\n * creating a fixed-arity function from a variadic function. `fn` should be a\n * bound function if context is significant.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> a) -> [*] -> a\n * @param {Function} fn The function which will be called with `args`\n * @param {Array} args The arguments to call `fn` with\n * @return {*} result The result, equivalent to `fn(...args)`\n * @see R.call, R.unapply\n * @example\n *\n *      const nums = [1, 2, 3, -99, 42, 6, 7];\n *      R.apply(Math.max, nums); //=> 42\n * @symb R.apply(f, [a, b, c]) = f(a, b, c)\n */\nvar apply = /*#__PURE__*/_curry2(function apply(fn, args) {\n  return fn.apply(this, args);\n});\nexport default apply;", "import _curry1 from \"./internal/_curry1.js\";\nimport keys from \"./keys.js\";\n\n/**\n * Returns a list of all the enumerable own properties of the supplied object.\n * Note that the order of the output array is not guaranteed across different\n * JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [v]\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own properties.\n * @see R.valuesIn, R.keys, R.toPairs\n * @example\n *\n *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n */\nvar values = /*#__PURE__*/_curry1(function values(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var vals = [];\n  var idx = 0;\n  while (idx < len) {\n    vals[idx] = obj[props[idx]];\n    idx += 1;\n  }\n  return vals;\n});\nexport default values;", "import _curry1 from \"./internal/_curry1.js\";\nimport _isArray from \"./internal/_isArray.js\";\nimport apply from \"./apply.js\";\nimport curryN from \"./curryN.js\";\nimport max from \"./max.js\";\nimport pluck from \"./pluck.js\";\nimport reduce from \"./reduce.js\";\nimport keys from \"./keys.js\";\nimport values from \"./values.js\";\n\n// Use custom mapValues function to avoid issues with specs that include a \"map\" key and R.map\n// delegating calls to .map\nfunction mapValues(fn, obj) {\n  return _isArray(obj) ? obj.map(fn) : keys(obj).reduce(function (acc, key) {\n    acc[key] = fn(obj[key]);\n    return acc;\n  }, {});\n}\n\n/**\n * Given a spec object recursively mapping properties to functions, creates a\n * function producing an object of the same structure, by mapping each property\n * to the result of calling its associated function with the supplied arguments.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n * @param {Object} spec an object recursively mapping properties to functions for\n *        producing the values for these properties.\n * @return {Function} A function that returns an object of the same structure\n * as `spec', with each property set to the value returned by calling its\n * associated function with the supplied arguments.\n * @see R.converge, R.juxt\n * @example\n *\n *      const getMetrics = R.applySpec({\n *        sum: R.add,\n *        nested: { mul: R.multiply }\n *      });\n *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }\n */\nvar applySpec = /*#__PURE__*/_curry1(function applySpec(spec) {\n  spec = mapValues(function (v) {\n    return typeof v == 'function' ? v : applySpec(v);\n  }, spec);\n  return curryN(reduce(max, 0, pluck('length', values(spec))), function () {\n    var args = arguments;\n    return mapValues(function (f) {\n      return apply(f, args);\n    }, spec);\n  });\n});\nexport default applySpec;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Takes a value and applies a function to it.\n *\n * This function is also known as the `thrush` combinator.\n *\n * @func\n * @memberOf R\n * @since v0.25.0\n * @category Function\n * @sig a -> (a -> b) -> b\n * @param {*} x The value\n * @param {Function} f The function to apply\n * @return {*} The result of applying `f` to `x`\n * @example\n *\n *      const t42 = R.applyTo(42);\n *      t42(R.identity); //=> 42\n *      t42(R.add(1)); //=> 43\n */\nvar applyTo = /*#__PURE__*/_curry2(function applyTo(x, f) {\n  return f(x);\n});\nexport default applyTo;", "import _curry3 from \"./internal/_curry3.js\";\n\n/**\n * Makes an ascending comparator function out of a function that returns a value\n * that can be compared with `<` and `>`.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Function\n * @sig Ord b => (a -> b) -> a -> a -> Number\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if fn(a) < fn(b), `1` if fn(b) < fn(a), otherwise `0`\n * @see R.descend, R.ascendNatural, R.descendNatural\n * @example\n *\n *      const byAge = R.ascend(R.prop('age'));\n *      const people = [\n *        { name: 'Emma', age: 70 },\n *        { name: 'Peter', age: 78 },\n *        { name: 'Mikhail', age: 62 },\n *      ];\n *      const peopleByYoungestFirst = R.sort(byAge, people);\n *        //=> [{ name: 'Mikhail', age: 62 },{ name: 'Emma', age: 70 }, { name: 'Peter', age: 78 }]\n */\nvar ascend = /*#__PURE__*/_curry3(function ascend(fn, a, b) {\n  var aa = fn(a);\n  var bb = fn(b);\n  return aa < bb ? -1 : aa > bb ? 1 : 0;\n});\nexport default ascend;", "import _curry1 from \"./internal/_curry1.js\";\nimport curryN from \"./curryN.js\";\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * Please note that default parameters don't count towards a [function arity](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length)\n * and therefore `curry` won't work well with those.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN, R.partial\n * @example\n *\n *      const addFourNumbers = (a, b, c, d) => a + b + c + d;\n *      const curriedAddFourNumbers = R.curry(addFourNumbers);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n *\n *      // R.curry not working well with default parameters\n *      const h = R.curry((a, b, c = 2) => a + b + c);\n *      h(1)(2)(7); //=> Error! (`3` is not a function!)\n */\nvar curry = /*#__PURE__*/_curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\nexport default curry;", "import curry from \"./curry.js\";\n\n/**\n * Makes an ascending comparator function out of a function that returns a value\n * that can be compared with natural sorting using localeCompare.\n *\n * @func\n * @memberOf R\n * @since v0.30.1\n * @category Function\n * @sig Ord b => s -> (a -> b) -> a -> a -> Number\n * @param {String|Array} locales A string with a BCP 47 language tag, or an array of such strings. Corresponds to the locales parameter of the Intl.Collator() constructor.\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if a occurs before b, `1` if a occurs after b, otherwise `0`\n * @see R.ascend\n * @example\n *\n *      const unsorted = ['3', '1', '10', 'Ørjan', 'Bob', 'Älva'];\n *\n *      R.sort(R.ascendNatural('en', R.identity), unsorted);\n *      // => ['1', '3', '10', 'Älva', 'Bob', 'Ørjan']\n *\n *      R.sort(R.ascendNatural('sv', R.identity), unsorted);\n *      // => ['1', '3', '10', 'Bob', 'Älva', 'Ørjan']\n *\n *     R.sort(R.ascend(R.identity), unsorted);\n *      // => ['1', '10', '3', 'Bob', 'Älva', 'Ørjan']\n */\nvar ascendNatural = /*#__PURE__*/curry(function ascendNatural(locales, fn, a, b) {\n  const aa = fn(a);\n  const bb = fn(b);\n  return aa.localeCompare(bb, locales, {\n    numeric: true\n  });\n});\nexport default ascendNatural;", "import _isArray from \"./_isArray.js\";\nimport _isInteger from \"./_isInteger.js\";\n\n/**\n * Makes a shallow clone of an object, setting or overriding the specified\n * property with the given value. Note that this copies and flattens prototype\n * properties onto the new object as well. All non-primitive properties are\n * copied by reference.\n *\n * @private\n * @param {String|Number} prop The property name to set\n * @param {*} val The new value\n * @param {Object|Array} obj The object to clone\n * @return {Object|Array} A new object equivalent to the original except for the changed property.\n */\nexport default function _assoc(prop, val, obj) {\n  if (_isInteger(prop) && _isArray(obj)) {\n    var arr = [].concat(obj);\n    arr[prop] = val;\n    return arr;\n  }\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  result[prop] = val;\n  return result;\n}", "import _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Checks if the input value is `null` or `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Type\n * @sig * -> Boolean\n * @param {*} x The value to test.\n * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n * @example\n *\n *      R.isNil(null); //=> true\n *      R.isNil(undefined); //=> true\n *      R.isNil(0); //=> false\n *      R.isNil([]); //=> false\n */\nvar isNil = /*#__PURE__*/_curry1(function isNil(x) {\n  return x == null;\n});\nexport default isNil;", "import _curry3 from \"./internal/_curry3.js\";\nimport _has from \"./internal/_has.js\";\nimport _isInteger from \"./internal/_isInteger.js\";\nimport _assoc from \"./internal/_assoc.js\";\nimport isNil from \"./isNil.js\";\n\n/**\n * Makes a shallow clone of an object, setting or overriding the nodes required\n * to create the given path, and placing the specific value at the tail end of\n * that path. Note that this copies and flattens prototype properties onto the\n * new object as well. All non-primitive properties are copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig [Idx] -> a -> {a} -> {a}\n * @param {Array} path the path to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except along the specified path.\n * @see R.dissocPath\n * @example\n *\n *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\n *\n *      // Any missing or non-object keys in path will be overridden\n *      R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}\n */\nvar assocPath = /*#__PURE__*/_curry3(function assocPath(path, val, obj) {\n  if (path.length === 0) {\n    return val;\n  }\n  var idx = path[0];\n  if (path.length > 1) {\n    var nextObj = !isNil(obj) && _has(idx, obj) && typeof obj[idx] === 'object' ? obj[idx] : _isInteger(path[1]) ? [] : {};\n    val = assocPath(Array.prototype.slice.call(path, 1), val, nextObj);\n  }\n  return _assoc(idx, val, obj);\n});\nexport default assocPath;", "import _curry3 from \"./internal/_curry3.js\";\nimport assocPath from \"./assocPath.js\";\n\n/**\n * Makes a shallow clone of an object, setting or overriding the specified\n * property with the given value. Note that this copies and flattens prototype\n * properties onto the new object as well. All non-primitive properties are\n * copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig Idx -> a -> {k: v} -> {k: v}\n * @param {String|Number} prop The property name to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except for the changed property.\n * @see R.dissoc, R.pick\n * @example\n *\n *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n */\nvar assoc = /*#__PURE__*/_curry3(function assoc(prop, val, obj) {\n  return assocPath([prop], val, obj);\n});\nexport default assoc;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly `n` parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} n The desired arity of the new function.\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity `n`.\n * @see R.binary, R.unary\n * @example\n *\n *      const takesTwoArgs = (a, b) => [a, b];\n *\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      const takesOneArg = R.nAry(1, takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only `n` arguments are passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.nAry(0, f)(a, b) = f()\n * @symb R.nAry(1, f)(a, b) = f(a)\n * @symb R.nAry(2, f)(a, b) = f(a, b)\n */\nvar nAry = /*#__PURE__*/_curry2(function nAry(n, fn) {\n  switch (n) {\n    case 0:\n      return function () {\n        return fn.call(this);\n      };\n    case 1:\n      return function (a0) {\n        return fn.call(this, a0);\n      };\n    case 2:\n      return function (a0, a1) {\n        return fn.call(this, a0, a1);\n      };\n    case 3:\n      return function (a0, a1, a2) {\n        return fn.call(this, a0, a1, a2);\n      };\n    case 4:\n      return function (a0, a1, a2, a3) {\n        return fn.call(this, a0, a1, a2, a3);\n      };\n    case 5:\n      return function (a0, a1, a2, a3, a4) {\n        return fn.call(this, a0, a1, a2, a3, a4);\n      };\n    case 6:\n      return function (a0, a1, a2, a3, a4, a5) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5);\n      };\n    case 7:\n      return function (a0, a1, a2, a3, a4, a5, a6) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5, a6);\n      };\n    case 8:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);\n      };\n    case 9:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);\n      };\n    case 10:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);\n      };\n    default:\n      throw new Error('First argument to nAry must be a non-negative integer no greater than ten');\n  }\n});\nexport default nAry;", "import _curry1 from \"./internal/_curry1.js\";\nimport nAry from \"./nAry.js\";\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 2 parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (a -> b -> c -> ... -> z) -> ((a, b) -> z)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 2.\n * @see R.nAry, R.unary\n * @example\n *\n *      const takesThreeArgs = function(a, b, c) {\n *        return [a, b, c];\n *      };\n *      takesThreeArgs.length; //=> 3\n *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n *\n *      const takesTwoArgs = R.binary(takesThreeArgs);\n *      takesTwoArgs.length; //=> 2\n *      // Only 2 arguments are passed to the wrapped function\n *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n * @symb R.binary(f)(a, b, c) = f(a, b)\n */\nvar binary = /*#__PURE__*/_curry1(function binary(fn) {\n  return nAry(2, fn);\n});\nexport default binary;", "export default function _isFunction(x) {\n  var type = Object.prototype.toString.call(x);\n  return type === '[object Function]' || type === '[object AsyncFunction]' || type === '[object GeneratorFunction]' || type === '[object AsyncGeneratorFunction]';\n}", "import _curry2 from \"./internal/_curry2.js\";\nimport _arrayReduce from \"./internal/_arrayReduce.js\";\nimport ap from \"./ap.js\";\nimport curryN from \"./curryN.js\";\nimport map from \"./map.js\";\n\n/**\n * \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig Number -> (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.lift, R.ap\n * @example\n *\n *      const madd3 = R.liftN(3, (...args) => R.sum(args));\n *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n */\nvar liftN = /*#__PURE__*/_curry2(function liftN(arity, fn) {\n  var lifted = curryN(arity, fn);\n  return curryN(arity, function () {\n    return _arrayReduce(ap, map(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));\n  });\n});\nexport default liftN;", "import _curry1 from \"./internal/_curry1.js\";\nimport liftN from \"./liftN.js\";\n\n/**\n * \"lifts\" a function of arity >= 1 so that it may \"map over\" a list, Function or other\n * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.liftN\n * @example\n *\n *      const madd3 = R.lift((a, b, c) => a + b + c);\n *\n *      madd3([100, 200], [30, 40], [5, 6, 7]); //=> [135, 136, 137, 145, 146, 147, 235, 236, 237, 245, 246, 247]\n *\n *      const madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);\n *\n *      madd5([10, 20], [1], [2, 3], [4], [100, 200]); //=> [117, 217, 118, 218, 127, 227, 128, 228]\n */\nvar lift = /*#__PURE__*/_curry1(function lift(fn) {\n  return liftN(fn.length, fn);\n});\nexport default lift;", "import _curry2 from \"./internal/_curry2.js\";\nimport _isFunction from \"./internal/_isFunction.js\";\nimport and from \"./and.js\";\nimport lift from \"./lift.js\";\n\n/**\n * A function which calls the two provided functions and returns the `&&`\n * of the results.\n * It returns the result of the first function if it is false-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * false-y value.\n *\n * In addition to functions, `R.both` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f A predicate\n * @param {Function} g Another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n * @see R.either, R.allPass, R.and\n * @example\n *\n *      const gt10 = R.gt(R.__, 10)\n *      const lt20 = R.lt(R.__, 20)\n *      const f = R.both(gt10, lt20);\n *      f(15); //=> true\n *      f(30); //=> false\n *\n *      R.both(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(false)\n *      R.both([false, false, 'a'], [11]); //=> [false, false, 11]\n */\nvar both = /*#__PURE__*/_curry2(function both(f, g) {\n  return _isFunction(f) ? function _both() {\n    return f.apply(this, arguments) && g.apply(this, arguments);\n  } : lift(and)(f, g);\n});\nexport default both;", "import _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Returns the result of calling its first argument with the remaining\n * arguments. This is occasionally useful as a converging function for\n * [`R.converge`](#converge): the first branch can produce a function while the\n * remaining branches produce values to be passed to that function as its\n * arguments.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig ((*... -> a), *...) -> a\n * @param {Function} fn The function to apply to the remaining arguments.\n * @param {...*} args Any number of positional arguments.\n * @return {*}\n * @see R.apply\n * @example\n *\n *      R.call(R.add, 1, 2); //=> 3\n *\n *      const indentN = R.pipe(\n *        R.repeat(' '),\n *        R.join(''),\n *        R.replace(/^(?!$)/gm)\n *      );\n *\n *      const format = R.converge(\n *        R.call,\n *        [\n *          R.pipe(R.prop('indent'), indentN),\n *          R.prop('value')\n *        ]\n *      );\n *\n *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n * @symb R.call(f, a, b) = f(a, b)\n */\nvar call = /*#__PURE__*/_curry1(function call(fn) {\n  return fn.apply(this, Array.prototype.slice.call(arguments, 1));\n});\nexport default call;", "import _isArrayLike from \"./_isArrayLike.js\";\n\n/**\n * `_makeFlat` is a helper function that returns a one-level or fully recursive\n * function based on the flag passed in.\n *\n * @private\n */\nexport default function _makeFlat(recursive) {\n  return function flatt(list) {\n    var value, jlen, j;\n    var result = [];\n    var idx = 0;\n    var ilen = list.length;\n    while (idx < ilen) {\n      if (_isArrayLike(list[idx])) {\n        value = recursive ? flatt(list[idx]) : list[idx];\n        j = 0;\n        jlen = value.length;\n        while (j < jlen) {\n          result[result.length] = value[j];\n          j += 1;\n        }\n      } else {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n    return result;\n  };\n}", "export default function _forceReduced(x) {\n  return {\n    '@@transducer/value': x,\n    '@@transducer/reduced': true\n  };\n}", "import _forceReduced from \"./_forceReduced.js\";\nimport _isArrayLike from \"./_isArrayLike.js\";\nimport _xArrayReduce from \"./_xArrayReduce.js\";\nimport _xReduce from \"./_xReduce.js\";\nimport _xfBase from \"./_xfBase.js\";\nvar tInit = '@@transducer/init';\nvar tStep = '@@transducer/step';\nvar tResult = '@@transducer/result';\nvar XPreservingReduced = /*#__PURE__*/function () {\n  function XPreservingReduced(xf) {\n    this.xf = xf;\n  }\n  XPreservingReduced.prototype[tInit] = _xfBase.init;\n  XPreservingReduced.prototype[tResult] = _xfBase.result;\n  XPreservingReduced.prototype[tStep] = function (result, input) {\n    var ret = this.xf[tStep](result, input);\n    return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;\n  };\n  return XPreservingReduced;\n}();\nvar XFlatCat = /*#__PURE__*/function () {\n  function XFlatCat(xf) {\n    this.xf = new XPreservingReduced(xf);\n  }\n  XFlatCat.prototype[tInit] = _xfBase.init;\n  XFlatCat.prototype[tResult] = _xfBase.result;\n  XFlatCat.prototype[tStep] = function (result, input) {\n    return !_isArrayLike(input) ? _xArrayReduce(this.xf, result, [input]) : _xReduce(this.xf, result, input);\n  };\n  return XFlatCat;\n}();\nvar _flatCat = function _xcat(xf) {\n  return new XFlatCat(xf);\n};\nexport default _flatCat;", "import _flatCat from \"./_flatCat.js\";\nimport _xmap from \"./_xmap.js\";\nexport default function _xchain(f) {\n  return function (xf) {\n    return _xmap(f)(_flatCat(xf));\n  };\n}", "import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _makeFlat from \"./internal/_makeFlat.js\";\nimport _xchain from \"./internal/_xchain.js\";\nimport map from \"./map.js\";\n\n/**\n * `chain` maps a function over a list and concatenates the results. `chain`\n * is also known as `flatMap` in some libraries.\n *\n * Dispatches to the `chain` method of the second argument, if present,\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n *\n * If second argument is a function, `chain(f, g)(x)` is equivalent to `f(g(x), x)`.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain m => (a -> m b) -> m a -> m b\n * @param {Function} fn The function to map with\n * @param {Array} list The list to map over\n * @return {Array} The result of flat-mapping `list` with `fn`\n * @example\n *\n *      const duplicate = n => [n, n];\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n *\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\n */\nvar chain = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/chain', 'chain'], _xchain, function chain(fn, monad) {\n  if (typeof monad === 'function') {\n    return function (x) {\n      return fn(monad(x))(x);\n    };\n  }\n  return _makeFlat(false)(map(fn, monad));\n}));\nexport default chain;", "import _curry3 from \"./internal/_curry3.js\";\n\n/**\n * Restricts a number to be within a range.\n *\n * Also works for other ordered types such as Strings and Dates.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Relation\n * @sig Ord a => a -> a -> a -> a\n * @param {Number} minimum The lower limit of the clamp (inclusive)\n * @param {Number} maximum The upper limit of the clamp (inclusive)\n * @param {Number} value Value to be clamped\n * @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise\n * @example\n *\n *      R.clamp(1, 10, -5) // => 1\n *      R.clamp(1, 10, 15) // => 10\n *      R.clamp(1, 10, 4)  // => 4\n */\nvar clamp = /*#__PURE__*/_curry3(function clamp(min, max, value) {\n  if (min > max) {\n    throw new Error('min must not be greater than max in clamp(min, max, value)');\n  }\n  return value < min ? min : value > max ? max : value;\n});\nexport default clamp;", "export default function _cloneRegExp(pattern) {\n  return new RegExp(pattern.source, pattern.flags ? pattern.flags : (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : '') + (pattern.dotAll ? 's' : ''));\n}", "import _cloneRegExp from \"./_cloneRegExp.js\";\nimport type from \"../type.js\";\n\n/**\n * Copies an object.\n *\n * @private\n * @param {*} value The value to be copied\n * @param {Boolean} deep Whether or not to perform deep cloning.\n * @return {*} The copied value.\n */\nexport default function _clone(value, deep, map) {\n  map || (map = new _ObjectMap());\n\n  // this avoids the slower switch with a quick if decision removing some milliseconds in each run.\n  if (_isPrimitive(value)) {\n    return value;\n  }\n  var copy = function copy(copiedValue) {\n    // Check for circular and same references on the object graph and return its corresponding clone.\n    var cachedCopy = map.get(value);\n    if (cachedCopy) {\n      return cachedCopy;\n    }\n    map.set(value, copiedValue);\n    for (var key in value) {\n      if (Object.prototype.hasOwnProperty.call(value, key)) {\n        copiedValue[key] = deep ? _clone(value[key], true, map) : value[key];\n      }\n    }\n    return copiedValue;\n  };\n  switch (type(value)) {\n    case 'Object':\n      return copy(Object.create(Object.getPrototypeOf(value)));\n    case 'Array':\n      return copy(Array(value.length));\n    case 'Date':\n      return new Date(value.valueOf());\n    case 'RegExp':\n      return _cloneRegExp(value);\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'BigInt64Array':\n    case 'BigUint64Array':\n      return value.slice();\n    default:\n      return value;\n  }\n}\nfunction _isPrimitive(param) {\n  var type = typeof param;\n  return param == null || type != 'object' && type != 'function';\n}\nvar _ObjectMap = /*#__PURE__*/function () {\n  function _ObjectMap() {\n    this.map = {};\n    this.length = 0;\n  }\n  _ObjectMap.prototype.set = function (key, value) {\n    var hashedKey = this.hash(key);\n    var bucket = this.map[hashedKey];\n    if (!bucket) {\n      this.map[hashedKey] = bucket = [];\n    }\n    bucket.push([key, value]);\n    this.length += 1;\n  };\n  _ObjectMap.prototype.hash = function (key) {\n    var hashedKey = [];\n    for (var value in key) {\n      hashedKey.push(Object.prototype.toString.call(key[value]));\n    }\n    return hashedKey.join();\n  };\n  _ObjectMap.prototype.get = function (key) {\n    /**\n     * depending on the number of objects to be cloned is faster to just iterate over the items in the map just because the hash function is so costly,\n     * on my tests this number is 180, anything above that using the hash function is faster.\n     */\n    if (this.length <= 180) {\n      for (var p in this.map) {\n        var bucket = this.map[p];\n        for (var i = 0; i < bucket.length; i += 1) {\n          var element = bucket[i];\n          if (element[0] === key) {\n            return element[1];\n          }\n        }\n      }\n      return;\n    }\n    var hashedKey = this.hash(key);\n    var bucket = this.map[hashedKey];\n    if (!bucket) {\n      return;\n    }\n    for (var i = 0; i < bucket.length; i += 1) {\n      var element = bucket[i];\n      if (element[0] === key) {\n        return element[1];\n      }\n    }\n  };\n  return _ObjectMap;\n}();", "import _clone from \"./internal/_clone.js\";\nimport _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Creates a deep copy of the source that can be used in place of the source\n * object without retaining any references to it.\n * The source object may contain (nested) `Array`s and `Object`s,\n * `Number`s, `String`s, `Boolean`s and `Date`s.\n * `Function`s are assigned by reference rather than copied.\n *\n * Dispatches to a `clone` method if present.\n *\n * Note that if the source object has multiple nodes that share a reference,\n * the returned object will have the same structure, but the references will\n * be pointed to the location within the cloned value.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {*} -> {*}\n * @param {*} value The object or array to clone\n * @return {*} A deeply cloned copy of `val`\n * @example\n *\n *      const objects = [{}, {}, {}];\n *      const objectsClone = R.clone(objects);\n *      objects === objectsClone; //=> false\n *      objects[0] === objectsClone[0]; //=> false\n */\nvar clone = /*#__PURE__*/_curry1(function clone(value) {\n  return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, true);\n});\nexport default clone;", "import _curry2 from \"./internal/_curry2.js\";\nimport _reduce from \"./internal/_reduce.js\";\n\n/**\n * Splits a list into sub-lists, based on the result of calling a key-returning function on each element,\n * and grouping the results according to values returned.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category List\n * @typedefn Idx = String | Int | Symbol\n * @sig Idx a => (b -> a) -> [b] -> [[b]]\n * @param {Function} fn Function :: a -> Idx\n * @param {Array} list The array to group\n * @return {Array}\n *    An array of arrays where each sub-array contains items for which\n *    the String-returning function has returned the same value.\n * @see R.groupBy, R.partition\n * @example\n *      R.collectBy(R.prop('type'), [\n *        {type: 'breakfast', item: '☕️'},\n *        {type: 'lunch', item: '🌯'},\n *        {type: 'dinner', item: '🍝'},\n *        {type: 'breakfast', item: '🥐'},\n *        {type: 'lunch', item: '🍕'}\n *      ]);\n *\n *      // [ [ {type: 'breakfast', item: '☕️'},\n *      //     {type: 'breakfast', item: '🥐'} ],\n *      //   [ {type: 'lunch', item: '🌯'},\n *      //     {type: 'lunch', item: '🍕'} ],\n *      //   [ {type: 'dinner', item: '🍝'} ] ]\n */\nvar collectBy = /*#__PURE__*/_curry2(function collectBy(fn, list) {\n  var group = _reduce(function (o, x) {\n    var tag = fn(x);\n    if (o[tag] === undefined) {\n      o[tag] = [];\n    }\n    o[tag].push(x);\n    return o;\n  }, {}, list);\n  var newList = [];\n  for (var tag in group) {\n    newList.push(group[tag]);\n  }\n  return newList;\n});\nexport default collectBy;", "import _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Makes a comparator function out of a function that reports whether the first\n * element is less than the second.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((a, b) -> Boolean) -> ((a, b) -> Number)\n * @param {Function} pred A predicate function of arity two which will return `true` if the first argument\n * is less than the second, `false` otherwise\n * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`\n * @example\n *\n *      const byAge = R.comparator((a, b) => a.age < b.age);\n *      const people = [\n *        { name: 'Emma', age: 70 },\n *        { name: 'Peter', age: 78 },\n *        { name: 'Mikhail', age: 62 },\n *      ];\n *      const peopleByIncreasingAge = R.sort(byAge, people);\n *        //=> [{ name: 'Mikhail', age: 62 },{ name: 'Emma', age: 70 }, { name: 'Peter', age: 78 }]\n */\nvar comparator = /*#__PURE__*/_curry1(function comparator(pred) {\n  return function (a, b) {\n    return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;\n  };\n});\nexport default comparator;", "import _curry1 from \"./internal/_curry1.js\";\n\n/**\n * A function that returns the `!` of its argument. It will return `true` when\n * passed false-y value, and `false` when passed a truth-y one.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig * -> Boolean\n * @param {*} a any value\n * @return {Boolean} the logical inverse of passed argument.\n * @see R.complement\n * @example\n *\n *      R.not(true); //=> false\n *      R.not(false); //=> true\n *      R.not(0); //=> true\n *      R.not(1); //=> false\n */\nvar not = /*#__PURE__*/_curry1(function not(a) {\n  return !a;\n});\nexport default not;", "import lift from \"./lift.js\";\nimport not from \"./not.js\";\n\n/**\n * Takes a function `f` and returns a function `g` such that if called with the same arguments\n * when `f` returns a \"truthy\" value, `g` returns `false` and when `f` returns a \"falsy\" value `g` returns `true`.\n *\n * `R.complement` may be applied to any functor\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> *) -> (*... -> Boolean)\n * @param {Function} f\n * @return {Function}\n * @see R.not\n * @example\n *\n *      const isNotNil = R.complement(R.isNil);\n *      R.isNil(null); //=> true\n *      isNotNil(null); //=> false\n *      R.isNil(7); //=> false\n *      isNotNil(7); //=> true\n */\nvar complement = /*#__PURE__*/lift(not);\nexport default complement;", "export default function _pipe(f, g) {\n  return function () {\n    return g.call(this, f.apply(this, arguments));\n  };\n}", "import _isArray from \"./_isArray.js\";\n\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implementation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\nexport default function _checkForMethod(methodname, fn) {\n  return function () {\n    var length = arguments.length;\n    if (length === 0) {\n      return fn();\n    }\n    var obj = arguments[length - 1];\n    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}", "import _checkForMethod from \"./internal/_checkForMethod.js\";\nimport _curry3 from \"./internal/_curry3.js\";\n\n/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * Dispatches to the `slice` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @sig Number -> Number -> String -> String\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {*} list\n * @return {*}\n * @example\n *\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n */\nvar slice = /*#__PURE__*/_curry3( /*#__PURE__*/_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\n}));\nexport default slice;", "import _checkForMethod from \"./internal/_checkForMethod.js\";\nimport _curry1 from \"./internal/_curry1.js\";\nimport slice from \"./slice.js\";\n\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\nvar tail = /*#__PURE__*/_curry1( /*#__PURE__*/_checkForMethod('tail', /*#__PURE__*/slice(1, Infinity)));\nexport default tail;", "import _arity from \"./internal/_arity.js\";\nimport _pipe from \"./internal/_pipe.js\";\nimport reduce from \"./reduce.js\";\nimport tail from \"./tail.js\";\n\n/**\n * Performs left-to-right function composition. The first argument may have\n * any arity; the remaining arguments must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      const f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n * @symb R.pipe(f, g, h)(a)(b) = h(g(f(a)))(b)\n */\nexport default function pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n  return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));\n}", "import _curry1 from \"./internal/_curry1.js\";\nimport _isString from \"./internal/_isString.js\";\n\n/**\n * Returns a new list or string with the elements or characters in reverse\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {Array|String} list\n * @return {Array|String}\n * @example\n *\n *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n *      R.reverse([1, 2]);     //=> [2, 1]\n *      R.reverse([1]);        //=> [1]\n *      R.reverse([]);         //=> []\n *\n *      R.reverse('abc');      //=> 'cba'\n *      R.reverse('ab');       //=> 'ba'\n *      R.reverse('a');        //=> 'a'\n *      R.reverse('');         //=> ''\n */\nvar reverse = /*#__PURE__*/_curry1(function reverse(list) {\n  return _isString(list) ? list.split('').reverse().join('') : Array.prototype.slice.call(list, 0).reverse();\n});\nexport default reverse;", "import pipe from \"./pipe.js\";\nimport reverse from \"./reverse.js\";\n\n/**\n * Performs right-to-left function composition. The last argument may have\n * any arity; the remaining arguments must be unary.\n *\n * **Note:** The result of compose is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipe\n * @example\n *\n *      const classyGreeting = (firstName, lastName) => \"The name's \" + lastName + \", \" + firstName + \" \" + lastName\n *      const yellGreeting = R.compose(R.toUpper, classyGreeting);\n *      yellGreeting('James', 'Bond'); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7\n *\n * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))\n * @symb R.compose(f, g, h)(a)(b) = f(g(h(a)))(b)\n */\nexport default function compose() {\n  if (arguments.length === 0) {\n    throw new Error('compose requires at least one argument');\n  }\n  return pipe.apply(this, reverse(arguments));\n}", "import _curry1 from \"./internal/_curry1.js\";\nimport _nth from \"./internal/_nth.js\";\n\n/**\n * Returns the first element of the given list or string. In some libraries\n * this function is named `first`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> a | Undefined\n * @sig String -> String | Undefined\n * @param {Array|String} list\n * @return {*}\n * @see R.tail, R.init, R.last\n * @example\n *\n *      R.head(['fi', 'fo', 'fum']); //=> 'fi'\n *      R.head([]); //=> undefined\n *\n *      R.head('abc'); //=> 'a'\n *      R.head(''); //=> undefined\n */\nvar head = /*#__PURE__*/_curry1(function (list) {\n  return _nth(0, list);\n});\nexport default head;", "export default function _identity(x) {\n  return x;\n}", "import _curry1 from \"./internal/_curry1.js\";\nimport _identity from \"./internal/_identity.js\";\n\n/**\n * A function that does nothing but return the parameter supplied to it. Good\n * as a default or placeholder function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> a\n * @param {*} x The value to return.\n * @return {*} The input value, `x`.\n * @example\n *\n *      R.identity(1); //=> 1\n *\n *      const obj = {};\n *      R.identity(obj) === obj; //=> true\n * @symb R.identity(a) = a\n */\nvar identity = /*#__PURE__*/_curry1(_identity);\nexport default identity;", "import _arity from \"./internal/_arity.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport head from \"./head.js\";\nimport _reduce from \"./internal/_reduce.js\";\nimport tail from \"./tail.js\";\nimport identity from \"./identity.js\";\n\n/**\n * Performs left-to-right function composition using transforming function. The first function may have\n * any arity; the remaining functions must be unary.\n *\n * **Note:** The result of pipeWith is not automatically curried. Transforming function is not used on the\n * first argument.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Function\n * @sig ((* -> *), [((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)]) -> ((a, b, ..., n) -> z)\n * @param {Function} transformer The transforming function\n * @param {Array} functions The functions to pipe\n * @return {Function}\n * @see R.composeWith, R.pipe\n * @example\n *\n *      const pipeWhileNotNil = R.pipeWith((f, res) => R.isNil(res) ? res : f(res));\n *      const f = pipeWhileNotNil([Math.pow, R.negate, R.inc])\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipeWith(f)([g, h, i])(...args) = f(i, f(h, g(...args)))\n */\nvar pipeWith = /*#__PURE__*/_curry2(function pipeWith(xf, list) {\n  if (list.length <= 0) {\n    return identity;\n  }\n  var headList = head(list);\n  var tailList = tail(list);\n  return _arity(headList.length, function () {\n    return _reduce(function (result, f) {\n      return xf.call(this, f, result);\n    }, headList.apply(this, arguments), tailList);\n  });\n});\nexport default pipeWith;", "import _curry2 from \"./internal/_curry2.js\";\nimport pipeWith from \"./pipeWith.js\";\nimport reverse from \"./reverse.js\";\n\n/**\n * Performs right-to-left function composition using transforming function. The last function may have\n * any arity; the remaining functions must be unary. Unlike `compose`, functions are passed in an array.\n *\n * **Note:** The result of composeWith is not automatically curried. Transforming function is not used\n * on the last argument.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Function\n * @sig ((* -> *), [(y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)]) -> ((a, b, ..., n) -> z)\n * @param {Function} transformer The transforming function\n * @param {Array} functions The functions to compose\n * @return {Function}\n * @see R.compose, R.pipeWith\n * @example\n *\n *      const composeWhileNotNil = R.composeWith((f, res) => R.isNil(res) ? res : f(res));\n *\n *      composeWhileNotNil([R.inc, R.prop('age')])({age: 1}) //=> 2\n *      composeWhileNotNil([R.inc, R.prop('age')])({}) //=> undefined\n *\n * @symb R.composeWith(f)([g, h, i])(...args) = f(g, f(h, i(...args)))\n */\nvar composeWith = /*#__PURE__*/_curry2(function composeWith(xf, list) {\n  return pipeWith.apply(this, [xf, reverse(list)]);\n});\nexport default composeWith;", "import _curry2 from \"./internal/_curry2.js\";\nimport _isArray from \"./internal/_isArray.js\";\nimport _isFunction from \"./internal/_isFunction.js\";\nimport _isString from \"./internal/_isString.js\";\nimport toString from \"./toString.js\";\n\n/**\n * Returns the result of concatenating the given lists or strings.\n *\n * Note: `R.concat` expects both arguments to be of the same type,\n * unlike the native `Array.prototype.concat` method. It will throw\n * an error if you `concat` an Array with a non-Array value.\n *\n * Dispatches to the `concat` method of the first argument, if present.\n * Can also concatenate two members of a [fantasy-land\n * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @sig String -> String -> String\n * @param {Array|String} firstList The first list\n * @param {Array|String} secondList The second list\n * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of\n * `secondList`.\n *\n * @example\n *\n *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n *      R.concat([], []); //=> []\n */\nvar concat = /*#__PURE__*/_curry2(function concat(a, b) {\n  if (_isArray(a)) {\n    if (_isArray(b)) {\n      return a.concat(b);\n    }\n    throw new TypeError(toString(b) + ' is not an array');\n  }\n  if (_isString(a)) {\n    if (_isString(b)) {\n      return a + b;\n    }\n    throw new TypeError(toString(b) + ' is not a string');\n  }\n  if (a != null && _isFunction(a['fantasy-land/concat'])) {\n    return a['fantasy-land/concat'](b);\n  }\n  if (a != null && _isFunction(a.concat)) {\n    return a.concat(b);\n  }\n  throw new TypeError(toString(a) + ' does not have a method named \"concat\" or \"fantasy-land/concat\"');\n});\nexport default concat;", "import _arity from \"./internal/_arity.js\";\nimport _curry1 from \"./internal/_curry1.js\";\nimport map from \"./map.js\";\nimport max from \"./max.js\";\nimport reduce from \"./reduce.js\";\n\n/**\n * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.\n * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments\n * to `fn` are applied to each of the predicates in turn until one returns a\n * \"truthy\" value, at which point `fn` returns the result of applying its\n * arguments to the corresponding transformer. If none of the predicates\n * matches, `fn` returns undefined.\n *\n * **Please note**: This is not a direct substitute for a `switch` statement.\n * Remember that both elements of every pair passed to `cond` are *functions*,\n * and `cond` returns a function.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Logic\n * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n * @param {Array} pairs A list of [predicate, transformer]\n * @return {Function}\n * @see R.ifElse, R.unless, R.when\n * @example\n *\n *      const fn = R.cond([\n *        [R.equals(0),   R.always('water freezes at 0°C')],\n *        [R.equals(100), R.always('water boils at 100°C')],\n *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n *      ]);\n *      fn(0); //=> 'water freezes at 0°C'\n *      fn(50); //=> 'nothing special happens at 50°C'\n *      fn(100); //=> 'water boils at 100°C'\n */\nvar cond = /*#__PURE__*/_curry1(function cond(pairs) {\n  var arity = reduce(max, 0, map(function (pair) {\n    return pair[0].length;\n  }, pairs));\n  return _arity(arity, function () {\n    var idx = 0;\n    while (idx < pairs.length) {\n      if (pairs[idx][0].apply(this, arguments)) {\n        return pairs[idx][1].apply(this, arguments);\n      }\n      idx += 1;\n    }\n  });\n});\nexport default cond;", "import _curry2 from \"./internal/_curry2.js\";\nimport curry from \"./curry.js\";\nimport nAry from \"./nAry.js\";\n\n/**\n * Wraps a constructor function inside a curried function that can be called\n * with the same arguments and returns the same type. The arity of the function\n * returned is specified to allow using variadic constructor functions.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Function\n * @sig Number -> (* -> {*}) -> (* -> {*})\n * @param {Number} n The arity of the constructor function.\n * @param {Function} Fn The constructor function to wrap.\n * @return {Function} A wrapped, curried constructor function.\n * @example\n *\n *      // Variadic Constructor function\n *      function Salad() {\n *        this.ingredients = arguments;\n *      }\n *\n *      Salad.prototype.recipe = function() {\n *        const instructions = R.map(ingredient => 'Add a dollop of ' + ingredient, this.ingredients);\n *        return R.join('\\n', instructions);\n *      };\n *\n *      const ThreeLayerSalad = R.constructN(3, Salad);\n *\n *      // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.\n *      const salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup');\n *\n *      console.log(salad.recipe());\n *      // Add a dollop of Mayonnaise\n *      // Add a dollop of Potato Chips\n *      // Add a dollop of Ketchup\n */\nvar constructN = /*#__PURE__*/_curry2(function constructN(n, Fn) {\n  if (n > 10) {\n    throw new Error('Constructor with greater than ten arguments');\n  }\n  if (n === 0) {\n    return function () {\n      return new Fn();\n    };\n  }\n  return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {\n    switch (n) {\n      case 1:\n        return new Fn($0);\n      case 2:\n        return new Fn($0, $1);\n      case 3:\n        return new Fn($0, $1, $2);\n      case 4:\n        return new Fn($0, $1, $2, $3);\n      case 5:\n        return new Fn($0, $1, $2, $3, $4);\n      case 6:\n        return new Fn($0, $1, $2, $3, $4, $5);\n      case 7:\n        return new Fn($0, $1, $2, $3, $4, $5, $6);\n      case 8:\n        return new Fn($0, $1, $2, $3, $4, $5, $6, $7);\n      case 9:\n        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);\n      case 10:\n        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);\n    }\n  }));\n});\nexport default constructN;", "import _curry1 from \"./internal/_curry1.js\";\nimport constructN from \"./constructN.js\";\n\n/**\n * Wraps a constructor function inside a curried function that can be called\n * with the same arguments and returns the same type.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> {*}) -> (* -> {*})\n * @param {Function} fn The constructor function to wrap.\n * @return {Function} A wrapped, curried constructor function.\n * @see R.invoker\n * @example\n *\n *      // Constructor function\n *      function Animal(kind) {\n *        this.kind = kind;\n *      };\n *      Animal.prototype.sighting = function() {\n *        return \"It's a \" + this.kind + \"!\";\n *      }\n *\n *      const AnimalConstructor = R.construct(Animal)\n *\n *      // Notice we no longer need the 'new' keyword:\n *      AnimalConstructor('Pig'); //=> {\"kind\": \"Pig\", \"sighting\": function (){...}};\n *\n *      const animalTypes = [\"Lion\", \"Tiger\", \"Bear\"];\n *      const animalSighting = R.invoker(0, 'sighting');\n *      const sightNewAnimal = R.compose(animalSighting, AnimalConstructor);\n *      R.map(sightNewAnimal, animalTypes); //=> [\"It's a Lion!\", \"It's a Tiger!\", \"It's a Bear!\"]\n */\nvar construct = /*#__PURE__*/_curry1(function construct(Fn) {\n  return constructN(Fn.length, Fn);\n});\nexport default construct;", "import _curry2 from \"./internal/_curry2.js\";\nimport _map from \"./internal/_map.js\";\nimport curryN from \"./curryN.js\";\nimport max from \"./max.js\";\nimport pluck from \"./pluck.js\";\nimport reduce from \"./reduce.js\";\n\n/**\n * Accepts a converging function and a list of branching functions and returns\n * a new function. The arity of the new function is the same as the arity of\n * the longest branching function. When invoked, this new function is applied\n * to some arguments, and each branching function is applied to those same\n * arguments. The results of each branching function are passed as arguments\n * to the converging function to produce the return value.\n *\n * @func\n * @memberOf R\n * @since v0.4.2\n * @category Function\n * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} after A function. `after` will be invoked with the return values of\n *        `fn1` and `fn2` as its arguments.\n * @param {Array} functions A list of functions.\n * @return {Function} A new function.\n * @see R.useWith\n * @example\n *\n *      const average = R.converge(R.divide, [R.sum, R.length])\n *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4\n *\n *      const strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])\n *      strangeConcat(\"Yodel\") //=> \"YODELyodel\"\n *\n * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))\n */\nvar converge = /*#__PURE__*/_curry2(function converge(after, fns) {\n  return curryN(reduce(max, 0, pluck('length', fns)), function () {\n    var args = arguments;\n    var context = this;\n    return after.apply(context, _map(function (fn) {\n      return fn.apply(context, args);\n    }, fns));\n  });\n});\nexport default converge;", "import _reduce from \"./internal/_reduce.js\";\nimport curry from \"./curry.js\";\n\n/**\n * Returns the number of items in a given `list` matching the predicate `f`\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} predicate to match items against\n * @return {Array} list of items to count in\n * @example\n *\n *      const even = x => x % 2 == 0;\n *\n *      R.count(even, [1, 2, 3, 4, 5]); // => 2\n *      R.map(R.count(even), [[1, 1, 1], [2, 3, 4, 5], [6]]); // => [0, 2, 1]\n */\nvar count = /*#__PURE__*/curry(function (pred, list) {\n  return _reduce(function (a, e) {\n    return pred(e) ? a + 1 : a;\n  }, 0, list);\n});\nexport default count;", "import _clone from \"./_clone.js\";\nimport _has from \"./_has.js\";\nimport _xfBase from \"./_xfBase.js\";\nvar XReduceBy = /*#__PURE__*/function () {\n  function XReduceBy(valueFn, valueAcc, keyFn, xf) {\n    this.valueFn = valueFn;\n    this.valueAcc = valueAcc;\n    this.keyFn = keyFn;\n    this.xf = xf;\n    this.inputs = {};\n  }\n  XReduceBy.prototype['@@transducer/init'] = _xfBase.init;\n  XReduceBy.prototype['@@transducer/result'] = function (result) {\n    var key;\n    for (key in this.inputs) {\n      if (_has(key, this.inputs)) {\n        result = this.xf['@@transducer/step'](result, this.inputs[key]);\n        if (result['@@transducer/reduced']) {\n          result = result['@@transducer/value'];\n          break;\n        }\n      }\n    }\n    this.inputs = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XReduceBy.prototype['@@transducer/step'] = function (result, input) {\n    var key = this.keyFn(input);\n    this.inputs[key] = this.inputs[key] || [key, _clone(this.valueAcc, false)];\n    this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);\n    return result;\n  };\n  return XReduceBy;\n}();\nexport default function _xreduceBy(valueFn, valueAcc, keyFn) {\n  return function (xf) {\n    return new XReduceBy(valueFn, valueAcc, keyFn, xf);\n  };\n}", "import _clone from \"./internal/_clone.js\";\nimport _curryN from \"./internal/_curryN.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _has from \"./internal/_has.js\";\nimport _reduced from \"./internal/_reduced.js\";\nimport _xReduce from \"./internal/_xReduce.js\";\nimport _xreduceBy from \"./internal/_xreduceBy.js\";\nimport _xwrap from \"./internal/_xwrap.js\";\n\n/**\n * Groups the elements of the list according to the result of calling\n * the String-returning function `keyFn` on each element and reduces the elements\n * of each group to a single value via the reducer function `valueFn`.\n *\n * The value function receives two values: *(acc, value)*. It may use\n * [`R.reduced`](#reduced) to short circuit the iteration.\n *\n * This function is basically a more general [`groupBy`](#groupBy) function.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category List\n * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}\n * @param {Function} valueFn The function that reduces the elements of each group to a single\n *        value. Receives two values, accumulator for a particular group and the current element.\n * @param {*} acc The (initial) accumulator value for each group.\n * @param {Function} keyFn The function that maps the list's element into a key.\n * @param {Array} list The array to group.\n * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of\n *         `valueFn` for elements which produced that key when passed to `keyFn`.\n * @see R.groupBy, R.reduce, R.reduced\n * @example\n *\n *      const groupNames = (acc, {name}) => acc.concat(name)\n *      const toGrade = ({score}) =>\n *        score < 65 ? 'F' :\n *        score < 70 ? 'D' :\n *        score < 80 ? 'C' :\n *        score < 90 ? 'B' : 'A'\n *\n *      var students = [\n *        {name: 'Abby', score: 83},\n *        {name: 'Bart', score: 62},\n *        {name: 'Curt', score: 88},\n *        {name: 'Dora', score: 92},\n *      ]\n *\n *      reduceBy(groupNames, [], toGrade, students)\n *      //=> {\"A\": [\"Dora\"], \"B\": [\"Abby\", \"Curt\"], \"F\": [\"Bart\"]}\n */\nvar reduceBy = /*#__PURE__*/_curryN(4, [], /*#__PURE__*/_dispatchable([], _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {\n  var xf = _xwrap(function (acc, elt) {\n    var key = keyFn(elt);\n    var value = valueFn(_has(key, acc) ? acc[key] : _clone(valueAcc, false), elt);\n    if (value && value['@@transducer/reduced']) {\n      return _reduced(acc);\n    }\n    acc[key] = value;\n    return acc;\n  });\n  return _xReduce(xf, {}, list);\n}));\nexport default reduceBy;", "import reduceBy from \"./reduceBy.js\";\n\n/**\n * Counts the elements of a list according to how many match each value of a\n * key generated by the supplied function. Returns an object mapping the keys\n * produced by `fn` to the number of occurrences in the list. Note that all\n * keys are coerced to strings because of how JavaScript objects work.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig (a -> String) -> [a] -> {*}\n * @param {Function} fn The function used to map values to keys.\n * @param {Array} list The list to count elements from.\n * @return {Object} An object mapping keys to number of occurrences in the list.\n * @example\n *\n *      const numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n *\n *      const letters = ['a', 'b', 'A', 'a', 'B', 'c'];\n *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}\n */\nvar countBy = /*#__PURE__*/reduceBy(function (acc, elem) {\n  return acc + 1;\n}, 0);\nexport default countBy;", "import add from \"./add.js\";\n\n/**\n * Decrements its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number} n - 1\n * @see R.inc\n * @example\n *\n *      R.dec(42); //=> 41\n */\nvar dec = /*#__PURE__*/add(-1);\nexport default dec;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Returns the second argument if it is not `null`, `undefined` or `NaN`;\n * otherwise the first argument is returned.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {a} default The default value.\n * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.\n * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value\n * @example\n *\n *      const defaultTo42 = R.defaultTo(42);\n *\n *      defaultTo42(null);  //=> 42\n *      defaultTo42(undefined);  //=> 42\n *      defaultTo42(false);  //=> false\n *      defaultTo42('Ramda');  //=> 'Ramda'\n *      // parseInt('string') results in NaN\n *      defaultTo42(parseInt('string')); //=> 42\n */\nvar defaultTo = /*#__PURE__*/_curry2(function defaultTo(d, v) {\n  return v == null || v !== v ? d : v;\n});\nexport default defaultTo;", "import _curry3 from \"./internal/_curry3.js\";\n\n/**\n * Makes a descending comparator function out of a function that returns a value\n * that can be compared with `<` and `>`.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Function\n * @sig Ord b => (a -> b) -> a -> a -> Number\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`\n * @see R.ascend, R.descendNatural, R.ascendNatural\n * @example\n *\n *      const byAge = R.descend(R.prop('age'));\n *      const people = [\n *        { name: 'Emma', age: 70 },\n *        { name: 'Peter', age: 78 },\n *        { name: 'Mikhail', age: 62 },\n *      ];\n *      const peopleByOldestFirst = R.sort(byAge, people);\n *        //=> [{ name: 'Peter', age: 78 }, { name: 'Emma', age: 70 }, { name: 'Mikhail', age: 62 }]\n */\nvar descend = /*#__PURE__*/_curry3(function descend(fn, a, b) {\n  var aa = fn(a);\n  var bb = fn(b);\n  return aa > bb ? -1 : aa < bb ? 1 : 0;\n});\nexport default descend;", "import curry from \"./curry.js\";\n\n/**\n * Makes a descending comparator function out of a function that returns a value\n * that can be compared with natural sorting using localeCompare.\n *\n * @func\n * @memberOf R\n * @since v0.30.1\n * @category Function\n * @sig Ord b => s -> (a -> b) -> a -> a -> Number\n * @param {String|Array} locales A string with a BCP 47 language tag, or an array of such strings. Corresponds to the locales parameter of the Intl.Collator() constructor.\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if a occurs after b, `1` if a occurs before b, otherwise `0`\n * @see R.descend\n * @example\n *\n *      const unsorted = ['3', '1', '10', 'Ørjan', 'Bob', 'Älva'];\n *\n *      R.sort(R.descendNatural('en', R.identity), unsorted);\n *      // => ['Ørjan', 'Bob', 'Älva', '10', '3', '1']\n *\n *      R.sort(R.descendNatural('sv', R.identity), unsorted);\n *      // => ['Ørjan', 'Älva', 'Bob', '10', '3', '1']\n *\n *     R.sort(R.descend(R.identity), unsorted);\n *      // => ['Ørjan', 'Älva', 'Bob', '3', '10', '1']\n */\nvar descendNatural = /*#__PURE__*/curry(function descendNatural(locales, fn, a, b) {\n  const aa = fn(a);\n  const bb = fn(b);\n  return bb.localeCompare(aa, locales, {\n    numeric: true\n  });\n});\nexport default descendNatural;", "import _includes from \"./_includes.js\";\nvar _Set = /*#__PURE__*/function () {\n  function _Set() {\n    /* globals Set */\n    this._nativeSet = typeof Set === 'function' ? new Set() : null;\n    this._items = {};\n  }\n  // until we figure out why jsdoc chokes on this\n  // @param item The item to add to the Set\n  // @returns {boolean} true if the item did not exist prior, otherwise false\n  //\n  _Set.prototype.add = function (item) {\n    return !hasOrAdd(item, true, this);\n  };\n\n  //\n  // @param item The item to check for existence in the Set\n  // @returns {boolean} true if the item exists in the Set, otherwise false\n  //\n  _Set.prototype.has = function (item) {\n    return hasOrAdd(item, false, this);\n  };\n\n  //\n  // Combines the logic for checking whether an item is a member of the set and\n  // for adding a new item to the set.\n  //\n  // @param item       The item to check or add to the Set instance.\n  // @param shouldAdd  If true, the item will be added to the set if it doesn't\n  //                   already exist.\n  // @param set        The set instance to check or add to.\n  // @return {boolean} true if the item already existed, otherwise false.\n  //\n  return _Set;\n}();\nfunction hasOrAdd(item, shouldAdd, set) {\n  var type = typeof item;\n  var prevSize, newSize;\n  switch (type) {\n    case 'string':\n    case 'number':\n      // distinguish between +0 and -0\n      if (item === 0 && 1 / item === -Infinity) {\n        if (set._items['-0']) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items['-0'] = true;\n          }\n          return false;\n        }\n      }\n      // these types can all utilise the native Set\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n          set._nativeSet.add(item);\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = {};\n            set._items[type][item] = true;\n          }\n          return false;\n        } else if (item in set._items[type]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][item] = true;\n          }\n          return false;\n        }\n      }\n    case 'boolean':\n      // set._items['boolean'] holds a two element array\n      // representing [ falseExists, trueExists ]\n      if (type in set._items) {\n        var bIdx = item ? 1 : 0;\n        if (set._items[type][bIdx]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][bIdx] = true;\n          }\n          return false;\n        }\n      } else {\n        if (shouldAdd) {\n          set._items[type] = item ? [false, true] : [true, false];\n        }\n        return false;\n      }\n    case 'function':\n      // compare functions for reference equality\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n          set._nativeSet.add(item);\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = [item];\n          }\n          return false;\n        }\n        if (!_includes(item, set._items[type])) {\n          if (shouldAdd) {\n            set._items[type].push(item);\n          }\n          return false;\n        }\n        return true;\n      }\n    case 'undefined':\n      if (set._items[type]) {\n        return true;\n      } else {\n        if (shouldAdd) {\n          set._items[type] = true;\n        }\n        return false;\n      }\n    case 'object':\n      if (item === null) {\n        if (!set._items['null']) {\n          if (shouldAdd) {\n            set._items['null'] = true;\n          }\n          return false;\n        }\n        return true;\n      }\n    /* falls through */\n    default:\n      // reduce the search size of heterogeneous sets by creating buckets\n      // for each type.\n      type = Object.prototype.toString.call(item);\n      if (!(type in set._items)) {\n        if (shouldAdd) {\n          set._items[type] = [item];\n        }\n        return false;\n      }\n      // scan through all previously applied items\n      if (!_includes(item, set._items[type])) {\n        if (shouldAdd) {\n          set._items[type].push(item);\n        }\n        return false;\n      }\n      return true;\n  }\n}\n\n// A simple Set type that honours R.equals semantics\nexport default _Set;", "import _curry2 from \"./internal/_curry2.js\";\nimport _Set from \"./internal/_Set.js\";\n\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Objects and Arrays are compared in terms of\n * value equality, not reference equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without\n * @example\n *\n *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]\n */\nvar difference = /*#__PURE__*/_curry2(function difference(first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  var secondLen = second.length;\n  var toFilterOut = new _Set();\n  for (var i = 0; i < secondLen; i += 1) {\n    toFilterOut.add(second[i]);\n  }\n  while (idx < firstLen) {\n    if (toFilterOut.add(first[idx])) {\n      out[out.length] = first[idx];\n    }\n    idx += 1;\n  }\n  return out;\n});\nexport default difference;", "import _includesWith from \"./internal/_includesWith.js\";\nimport _curry3 from \"./internal/_curry3.js\";\n\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Duplication is determined according to the\n * value returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith\n * @example\n *\n *      const cmp = (x, y) => x.a === y.a;\n *      const l1 = [{a: 1}, {a: 2}, {a: 3}];\n *      const l2 = [{a: 3}, {a: 4}];\n *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n *\n *      R.differenceWith(R.equals, [1, 2, 3, 3, 3], []); //=> [1, 2, 3]\n *      R.differenceWith(R.equals, [1, 2, 3, 3, 3], [1]); //=> [2, 3]\n */\nvar differenceWith = /*#__PURE__*/_curry3(function differenceWith(pred, first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  while (idx < firstLen) {\n    if (!_includesWith(pred, first[idx], second) && !_includesWith(pred, first[idx], out)) {\n      out.push(first[idx]);\n    }\n    idx += 1;\n  }\n  return out;\n});\nexport default differenceWith;", "import _curry3 from \"./internal/_curry3.js\";\n\n/**\n * Removes the sub-list of `list` starting at index `start` and containing\n * `count` elements. _Note that this is not destructive_: it returns a copy of\n * the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.2.2\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {Number} start The position to start removing elements\n * @param {Number} count The number of elements to remove\n * @param {Array} list The list to remove from\n * @return {Array} A new Array with `count` elements from `start` removed.\n * @see R.without\n * @example\n *\n *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]\n */\nvar remove = /*#__PURE__*/_curry3(function remove(start, count, list) {\n  var result = Array.prototype.slice.call(list, 0);\n  result.splice(start, count);\n  return result;\n});\nexport default remove;", "import _isInteger from \"./_isInteger.js\";\nimport _isArray from \"./_isArray.js\";\nimport remove from \"../remove.js\";\n\n/**\n * Returns a new object that does not contain a `prop` property.\n *\n * @private\n * @param {String|Number} prop The name of the property to dissociate\n * @param {Object|Array} obj The object to clone\n * @return {Object} A new object equivalent to the original but without the specified property\n */\nexport default function _dissoc(prop, obj) {\n  if (obj == null) {\n    return obj;\n  }\n  if (_isInteger(prop) && _isArray(obj)) {\n    return remove(prop, 1, obj);\n  }\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  delete result[prop];\n  return result;\n}", "import _curry2 from \"./internal/_curry2.js\";\nimport _dissoc from \"./internal/_dissoc.js\";\nimport _isInteger from \"./internal/_isInteger.js\";\nimport _isArray from \"./internal/_isArray.js\";\nimport assoc from \"./assoc.js\";\n\n/**\n * Makes a shallow clone of an object. Note that this copies and flattens\n * prototype properties onto the new object as well. All non-primitive\n * properties are copied by reference.\n *\n * @private\n * @param {String|Integer} prop The prop operating\n * @param {Object|Array} obj The object to clone\n * @return {Object|Array} A new object equivalent to the original.\n */\nfunction _shallowCloneObject(prop, obj) {\n  if (_isInteger(prop) && _isArray(obj)) {\n    return [].concat(obj);\n  }\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  return result;\n}\n\n/**\n * Makes a shallow clone of an object, omitting the property at the given path.\n * Note that this copies and flattens prototype properties onto the new object\n * as well. All non-primitive properties are copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.11.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig [Idx] -> {k: v} -> {k: v}\n * @param {Array} path The path to the value to omit\n * @param {Object} obj The object to clone\n * @return {Object} A new object without the property at path\n * @see R.assocPath\n * @example\n *\n *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}\n */\nvar dissocPath = /*#__PURE__*/_curry2(function dissocPath(path, obj) {\n  if (obj == null) {\n    return obj;\n  }\n  switch (path.length) {\n    case 0:\n      return obj;\n    case 1:\n      return _dissoc(path[0], obj);\n    default:\n      var head = path[0];\n      var tail = Array.prototype.slice.call(path, 1);\n      if (obj[head] == null) {\n        return _shallowCloneObject(head, obj);\n      } else {\n        return assoc(head, dissocPath(tail, obj[head]), obj);\n      }\n  }\n});\nexport default dissocPath;", "import _curry2 from \"./internal/_curry2.js\";\nimport dissocPath from \"./dissocPath.js\";\n\n/**\n * Returns a new object that does not contain a `prop` property.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Object\n * @sig String -> {k: v} -> {k: v}\n * @param {String} prop The name of the property to dissociate\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original but without the specified property\n * @see R.assoc, R.omit\n * @example\n *\n *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}\n */\nvar dissoc = /*#__PURE__*/_curry2(function dissoc(prop, obj) {\n  return dissocPath([prop], obj);\n});\nexport default dissoc;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Divides two numbers. Equivalent to `a / b`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a / b`.\n * @see R.multiply\n * @example\n *\n *      R.divide(71, 100); //=> 0.71\n *\n *      const half = R.divide(R.__, 2);\n *      half(42); //=> 21\n *\n *      const reciprocal = R.divide(1);\n *      reciprocal(4);   //=> 0.25\n */\nvar divide = /*#__PURE__*/_curry2(function divide(a, b) {\n  return a / b;\n});\nexport default divide;", "import _xfBase from \"./_xfBase.js\";\nvar XDrop = /*#__PURE__*/function () {\n  function XDrop(n, xf) {\n    this.xf = xf;\n    this.n = n;\n  }\n  XDrop.prototype['@@transducer/init'] = _xfBase.init;\n  XDrop.prototype['@@transducer/result'] = _xfBase.result;\n  XDrop.prototype['@@transducer/step'] = function (result, input) {\n    if (this.n > 0) {\n      this.n -= 1;\n      return result;\n    }\n    return this.xf['@@transducer/step'](result, input);\n  };\n  return XDrop;\n}();\nexport default function _xdrop(n) {\n  return function (xf) {\n    return new XDrop(n, xf);\n  };\n}", "import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xdrop from \"./internal/_xdrop.js\";\nimport slice from \"./slice.js\";\n\n/**\n * Returns all but the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `drop` method).\n *\n * Dispatches to the `drop` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*} A copy of list without the first `n` elements\n * @see R.take, R.transduce, R.dropLast, R.dropWhile\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nvar drop = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['drop'], _xdrop, function drop(n, xs) {\n  return slice(Math.max(0, n), Infinity, xs);\n}));\nexport default drop;", "import _reduced from \"./_reduced.js\";\nimport _xfBase from \"./_xfBase.js\";\nvar XTake = /*#__PURE__*/function () {\n  function XTake(n, xf) {\n    this.xf = xf;\n    this.n = n;\n    this.i = 0;\n  }\n  XTake.prototype['@@transducer/init'] = _xfBase.init;\n  XTake.prototype['@@transducer/result'] = _xfBase.result;\n  XTake.prototype['@@transducer/step'] = function (result, input) {\n    this.i += 1;\n    var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);\n    return this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;\n  };\n  return XTake;\n}();\nexport default function _xtake(n) {\n  return function (xf) {\n    return new XTake(n, xf);\n  };\n}", "import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xtake from \"./internal/_xtake.js\";\nimport slice from \"./slice.js\";\n\n/**\n * Returns the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `take` method).\n *\n * Dispatches to the `take` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*}\n * @see R.drop\n * @example\n *\n *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(3, 'ramda');               //=> 'ram'\n *\n *      const personnel = [\n *        'Dave Brubeck',\n *        'Paul Desmond',\n *        'Eugene Wright',\n *        'Joe Morello',\n *        'Gerry Mulligan',\n *        'Bob Bates',\n *        'Joe Dodge',\n *        'Ron Crotty'\n *      ];\n *\n *      const takeFive = R.take(5);\n *      takeFive(personnel);\n *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n * @symb R.take(-1, [a, b]) = [a, b]\n * @symb R.take(0, [a, b]) = []\n * @symb R.take(1, [a, b]) = [a]\n * @symb R.take(2, [a, b]) = [a, b]\n */\nvar take = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['take'], _xtake, function take(n, xs) {\n  return slice(0, n < 0 ? Infinity : n, xs);\n}));\nexport default take;", "import take from \"../take.js\";\nexport default function dropLast(n, xs) {\n  return take(n < xs.length ? xs.length - n : 0, xs);\n}", "import _xfBase from \"./_xfBase.js\";\nvar XDropLast = /*#__PURE__*/function () {\n  function XDropLast(n, xf) {\n    if (n <= 0) {\n      return xf;\n    }\n    this.xf = xf;\n    this.pos = 0;\n    this.full = false;\n    this.acc = new Array(n);\n  }\n  XDropLast.prototype['@@transducer/init'] = _xfBase.init;\n  XDropLast.prototype['@@transducer/result'] = function (result) {\n    this.acc = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XDropLast.prototype['@@transducer/step'] = function (result, input) {\n    if (this.full) {\n      result = this.xf['@@transducer/step'](result, this.acc[this.pos]);\n    }\n    this.store(input);\n    return result;\n  };\n  XDropLast.prototype.store = function (input) {\n    this.acc[this.pos] = input;\n    this.pos += 1;\n    if (this.pos === this.acc.length) {\n      this.pos = 0;\n      this.full = true;\n    }\n  };\n  return XDropLast;\n}();\nexport default function _xdropLast(n) {\n  return function (xf) {\n    return new XDropLast(n, xf);\n  };\n}", "import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _dropLast from \"./internal/_dropLast.js\";\nimport _xdropLast from \"./internal/_xdropLast.js\";\n\n/**\n * Returns a list containing all but the last `n` elements of the given `list`.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `list` to skip.\n * @param {Array} list The list of elements to consider.\n * @return {Array} A copy of the list with only the first `list.length - n` elements\n * @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile\n * @example\n *\n *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(3, 'ramda');               //=> 'ra'\n */\nvar dropLast = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xdropLast, _dropLast));\nexport default dropLast;", "import slice from \"../slice.js\";\nexport default function dropLastWhile(pred, xs) {\n  var idx = xs.length - 1;\n  while (idx >= 0 && pred(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(0, idx + 1, xs);\n}", "import _xfBase from \"./_xfBase.js\";\nimport _xReduce from \"./_xReduce.js\";\nvar XDropLastWhile = /*#__PURE__*/function () {\n  function XDropLastWhile(fn, xf) {\n    this.f = fn;\n    this.retained = [];\n    this.xf = xf;\n  }\n  XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;\n  XDropLastWhile.prototype['@@transducer/result'] = function (result) {\n    this.retained = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XDropLastWhile.prototype['@@transducer/step'] = function (result, input) {\n    return this.f(input) ? this.retain(result, input) : this.flush(result, input);\n  };\n  XDropLastWhile.prototype.flush = function (result, input) {\n    result = _xReduce(this.xf, result, this.retained);\n    this.retained = [];\n    return this.xf['@@transducer/step'](result, input);\n  };\n  XDropLastWhile.prototype.retain = function (result, input) {\n    this.retained.push(input);\n    return result;\n  };\n  return XDropLastWhile;\n}();\nexport default function _xdropLastWhile(fn) {\n  return function (xf) {\n    return new XDropLastWhile(fn, xf);\n  };\n}", "import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _dropLastWhile from \"./internal/_dropLastWhile.js\";\nimport _xdropLastWhile from \"./internal/_xdropLastWhile.js\";\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value from the right\n * to the supplied predicate function, skipping elements until the predicate\n * function returns a `falsy` value. The predicate function is applied to one argument:\n * *(value)*.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} predicate The function to be called on each element\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array without any trailing elements that return `falsy` values from the `predicate`.\n * @see R.takeLastWhile, R.addIndex, R.drop, R.dropWhile\n * @example\n *\n *      const lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n *\n *      R.dropLastWhile(x => x !== 'd' , 'Ramda'); //=> 'Ramd'\n */\nvar dropLastWhile = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xdropLastWhile, _dropLastWhile));\nexport default dropLastWhile;", "import _xfBase from \"./_xfBase.js\";\nvar XDropRepeatsWith = /*#__PURE__*/function () {\n  function XDropRepeatsWith(pred, xf) {\n    this.xf = xf;\n    this.pred = pred;\n    this.lastValue = undefined;\n    this.seenFirstValue = false;\n  }\n  XDropRepeatsWith.prototype['@@transducer/init'] = _xfBase.init;\n  XDropRepeatsWith.prototype['@@transducer/result'] = _xfBase.result;\n  XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {\n    var sameAsLast = false;\n    if (!this.seenFirstValue) {\n      this.seenFirstValue = true;\n    } else if (this.pred(this.lastValue, input)) {\n      sameAsLast = true;\n    }\n    this.lastValue = input;\n    return sameAsLast ? result : this.xf['@@transducer/step'](result, input);\n  };\n  return XDropRepeatsWith;\n}();\nexport default function _xdropRepeatsWith(pred) {\n  return function (xf) {\n    return new XDropRepeatsWith(pred, xf);\n  };\n}", "import _curry1 from \"./internal/_curry1.js\";\nimport _nth from \"./internal/_nth.js\";\n\n/**\n * Returns the last element of the given list or string.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig [a] -> a | Undefined\n * @sig String -> String | Undefined\n * @param {*} list\n * @return {*}\n * @see R.init, R.head, R.tail\n * @example\n *\n *      R.last(['fi', 'fo', 'fum']); //=> 'fum'\n *      R.last([]); //=> undefined\n *\n *      R.last('abc'); //=> 'c'\n *      R.last(''); //=> undefined\n */\nvar last = /*#__PURE__*/_curry1(function (list) {\n  return _nth(-1, list);\n});\nexport default last;", "import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xdropRepeatsWith from \"./internal/_xdropRepeatsWith.js\";\nimport last from \"./last.js\";\n\n/**\n * Returns a new list without any consecutively repeating elements. Equality is\n * determined by applying the supplied predicate to each pair of consecutive elements. The\n * first element in a series of equal elements will be preserved.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig ((a, a) -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *      const l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n */\nvar dropRepeatsWith = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n  var result = [];\n  var idx = 1;\n  var len = list.length;\n  if (len !== 0) {\n    result[0] = list[0];\n    while (idx < len) {\n      if (!pred(last(result), list[idx])) {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n  }\n  return result;\n}));\nexport default dropRepeatsWith;", "import _curry1 from \"./internal/_curry1.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xdropRepeatsWith from \"./internal/_xdropRepeatsWith.js\";\nimport dropRepeatsWith from \"./dropRepeatsWith.js\";\nimport equals from \"./equals.js\";\n\n/**\n * Returns a new list without any consecutively repeating elements.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n */\nvar dropRepeats = /*#__PURE__*/_curry1( /*#__PURE__*/_dispatchable([], function () {\n  return _xdropRepeatsWith(equals);\n}, /*#__PURE__*/dropRepeatsWith(equals)));\nexport default dropRepeats;", "import _curry3 from \"./internal/_curry3.js\";\nimport equals from \"./equals.js\";\n\n/**\n * Takes a function and two values in its domain and returns `true` if the\n * values map to the same value in the codomain; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Relation\n * @sig (a -> b) -> a -> a -> Boolean\n * @param {Function} f\n * @param {*} x\n * @param {*} y\n * @return {Boolean}\n * @example\n *\n *      R.eqBy(Math.abs, 5, -5); //=> true\n */\nvar eqBy = /*#__PURE__*/_curry3(function eqBy(f, x, y) {\n  return equals(f(x), f(y));\n});\nexport default eqBy;", "import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xdropRepeatsWith from \"./internal/_xdropRepeatsWith.js\";\nimport dropRepeatsWith from \"./dropRepeatsWith.js\";\nimport eqBy from \"./eqBy.js\";\n\n/**\n * Returns a new list without any consecutively repeating elements,\n * based upon the value returned by applying the supplied function to\n * each list element. [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.29.0\n * @category List\n * @sig (a -> b) -> [a] -> [a]\n * @param {Function} fn A function used to produce a value to use during comparisons.\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *     R.dropRepeatsBy(Math.abs, [1, -1, -1, 2, 3, -4, 4, 2, 2]); //=> [1, 2, 3, -4, 2]\n */\nvar dropRepeatsBy = /*#__PURE__*/_curry2(function (fn, list) {\n  return _dispatchable([], function () {\n    return _xdropRepeatsWith(eqBy(fn));\n  }, dropRepeatsWith(eqBy(fn)))(list);\n});\nexport default dropRepeatsBy;", "import _xfBase from \"./_xfBase.js\";\nvar XDropWhile = /*#__PURE__*/function () {\n  function XDropWhile(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XDropWhile.prototype['@@transducer/init'] = _xfBase.init;\n  XDropWhile.prototype['@@transducer/result'] = _xfBase.result;\n  XDropWhile.prototype['@@transducer/step'] = function (result, input) {\n    if (this.f) {\n      if (this.f(input)) {\n        return result;\n      }\n      this.f = null;\n    }\n    return this.xf['@@transducer/step'](result, input);\n  };\n  return XDropWhile;\n}();\nexport default function _xdropWhile(f) {\n  return function (xf) {\n    return new XDropWhile(f, xf);\n  };\n}", "import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xdropWhile from \"./internal/_xdropWhile.js\";\nimport slice from \"./slice.js\";\n\n/**\n * Returns a new list excluding the leading elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is applied to one argument: *(value)*.\n *\n * Dispatches to the `dropWhile` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeWhile, R.transduce, R.addIndex\n * @example\n *\n *      const lteTwo = x => x <= 2;\n *\n *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n *\n *      R.dropWhile(x => x !== 'd' , 'Ramda'); //=> 'da'\n */\nvar dropWhile = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['dropWhile'], _xdropWhile, function dropWhile(pred, xs) {\n  var idx = 0;\n  var len = xs.length;\n  while (idx < len && pred(xs[idx])) {\n    idx += 1;\n  }\n  return slice(idx, Infinity, xs);\n}));\nexport default dropWhile;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Returns the first argument if it is truthy, otherwise the second argument.\n * Acts as the boolean `or` statement if both inputs are `Boolean`s.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any}\n * @see R.either, R.and\n * @example\n *\n *      R.or(true, true); //=> true\n *      R.or(true, false); //=> true\n *      R.or(false, true); //=> true\n *      R.or(false, false); //=> false\n */\nvar or = /*#__PURE__*/_curry2(function or(a, b) {\n  return a || b;\n});\nexport default or;", "import _curry2 from \"./internal/_curry2.js\";\nimport _isFunction from \"./internal/_isFunction.js\";\nimport lift from \"./lift.js\";\nimport or from \"./or.js\";\n\n/**\n * A function wrapping calls to the two functions in an `||` operation,\n * returning the result of the first function if it is truth-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * truth-y value.\n *\n * In addition to functions, `R.either` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f a predicate\n * @param {Function} g another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n * @see R.both, R.anyPass, R.or\n * @example\n *\n *      const gt10 = x => x > 10;\n *      const even = x => x % 2 === 0;\n *      const f = R.either(gt10, even);\n *      f(101); //=> true\n *      f(8); //=> true\n *\n *      R.either(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(55)\n *      R.either([false, false, 'a'], [11]) // => [11, 11, \"a\"]\n */\nvar either = /*#__PURE__*/_curry2(function either(f, g) {\n  return _isFunction(f) ? function _either() {\n    return f.apply(this, arguments) || g.apply(this, arguments);\n  } : lift(or)(f, g);\n});\nexport default either;", "/**\n * Tests whether or not an object is a typed array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is a typed array, `false` otherwise.\n * @example\n *\n *      _isTypedArray(new Uint8Array([])); //=> true\n *      _isTypedArray(new Float32Array([])); //=> true\n *      _isTypedArray([]); //=> false\n *      _isTypedArray(null); //=> false\n *      _isTypedArray({}); //=> false\n */\nexport default function _isTypedArray(val) {\n  var type = Object.prototype.toString.call(val);\n  return type === '[object Uint8ClampedArray]' || type === '[object Int8Array]' || type === '[object Uint8Array]' || type === '[object Int16Array]' || type === '[object Uint16Array]' || type === '[object Int32Array]' || type === '[object Uint32Array]' || type === '[object Float32Array]' || type === '[object Float64Array]' || type === '[object BigInt64Array]' || type === '[object BigUint64Array]';\n}", "import _curry1 from \"./internal/_curry1.js\";\nimport _isArguments from \"./internal/_isArguments.js\";\nimport _isArray from \"./internal/_isArray.js\";\nimport _isObject from \"./internal/_isObject.js\";\nimport _isString from \"./internal/_isString.js\";\nimport _isTypedArray from \"./internal/_isTypedArray.js\";\n\n/**\n * Returns the empty value of its argument's type. Ramda defines the empty\n * value of Array (`[]`), Object (`{}`), String (`''`),\n * TypedArray (`Uint8Array []`, `Float32Array []`, etc), and Arguments. Other\n * types are supported if they define `<Type>.empty`,\n * `<Type>.prototype.empty` or implement the\n * [FantasyLand Monoid spec](https://github.com/fantasyland/fantasy-land#monoid).\n *\n * Dispatches to the `empty` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig a -> a\n * @param {*} x\n * @return {*}\n * @example\n *\n *      R.empty(Just(42));               //=> Nothing()\n *      R.empty([1, 2, 3]);              //=> []\n *      R.empty('unicorns');             //=> ''\n *      R.empty({x: 1, y: 2});           //=> {}\n *      R.empty(Uint8Array.from('123')); //=> Uint8Array []\n */\nvar empty = /*#__PURE__*/_curry1(function empty(x) {\n  return x != null && typeof x['fantasy-land/empty'] === 'function' ? x['fantasy-land/empty']() : x != null && x.constructor != null && typeof x.constructor['fantasy-land/empty'] === 'function' ? x.constructor['fantasy-land/empty']() : x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {\n    return arguments;\n  }() : _isTypedArray(x) ? x.constructor.from('') : void 0 // else\n  ;\n});\n\nexport default empty;", "import _curry2 from \"./internal/_curry2.js\";\nimport drop from \"./drop.js\";\n\n/**\n * Returns a new list containing the last `n` elements of the given list.\n * If `n > list.length`, returns a list of `list.length` elements.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements to return.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.dropLast\n * @example\n *\n *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.takeLast(3, 'ramda');               //=> 'mda'\n */\nvar takeLast = /*#__PURE__*/_curry2(function takeLast(n, xs) {\n  return drop(n >= 0 ? xs.length - n : 0, xs);\n});\nexport default takeLast;", "import _curry2 from \"./internal/_curry2.js\";\nimport equals from \"./equals.js\";\nimport takeLast from \"./takeLast.js\";\n\n/**\n * Checks if a list ends with the provided sublist.\n *\n * Similarly, checks if a string ends with the provided substring.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category List\n * @sig [a] -> [a] -> Boolean\n * @sig String -> String -> Boolean\n * @param {*} suffix\n * @param {*} list\n * @return {Boolean}\n * @see R.startsWith\n * @example\n *\n *      R.endsWith('c', 'abc')                //=> true\n *      R.endsWith('b', 'abc')                //=> false\n *      R.endsWith(['c'], ['a', 'b', 'c'])    //=> true\n *      R.endsWith(['b'], ['a', 'b', 'c'])    //=> false\n */\nvar endsWith = /*#__PURE__*/_curry2(function (suffix, list) {\n  return equals(takeLast(suffix.length, list), suffix);\n});\nexport default endsWith;", "import _curry3 from \"./internal/_curry3.js\";\nimport equals from \"./equals.js\";\n\n/**\n * Reports whether two objects have the same value, in [`R.equals`](#equals)\n * terms, for the specified property. Useful as a curried predicate.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig k -> {k: v} -> {k: v} -> Boolean\n * @param {String} prop The name of the property to compare\n * @param {Object} obj1\n * @param {Object} obj2\n * @return {Boolean}\n *\n * @example\n *\n *      const o1 = { a: 1, b: 2, c: 3, d: 4 };\n *      const o2 = { a: 10, b: 20, c: 3, d: 40 };\n *      R.eqProps('a', o1, o2); //=> false\n *      R.eqProps('c', o1, o2); //=> true\n */\nvar eqProps = /*#__PURE__*/_curry3(function eqProps(prop, obj1, obj2) {\n  return equals(obj1[prop], obj2[prop]);\n});\nexport default eqProps;", "import _curry2 from \"./internal/_curry2.js\";\nimport _isArray from \"./internal/_isArray.js\";\nimport _isObject from \"./internal/_isObject.js\";\n\n/**\n * Creates a new object by recursively evolving a shallow copy of `object`,\n * according to the `transformation` functions. All non-primitive properties\n * are copied by reference.\n *\n * A `transformation` function will not be invoked if its corresponding key\n * does not exist in the evolved object.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {k: (v -> v)} -> {k: v} -> {k: v}\n * @param {Object} transformations The object specifying transformation functions to apply\n *        to the object.\n * @param {Object} object The object to be transformed.\n * @return {Object} The transformed object.\n * @example\n *\n *      const tomato = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\n *      const transformations = {\n *        firstName: R.trim,\n *        lastName: R.trim, // Will not get invoked.\n *        data: {elapsed: R.add(1), remaining: R.add(-1)}\n *      };\n *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\n */\nvar evolve = /*#__PURE__*/_curry2(function evolve(transformations, object) {\n  if (!_isObject(object) && !_isArray(object)) {\n    return object;\n  }\n  var result = object instanceof Array ? [] : {};\n  var transformation, key, type;\n  for (key in object) {\n    transformation = transformations[key];\n    type = typeof transformation;\n    result[key] = type === 'function' ? transformation(object[key]) : transformation && type === 'object' ? evolve(transformation, object[key]) : object[key];\n  }\n  return result;\n});\nexport default evolve;", "import _reduced from \"./_reduced.js\";\nimport _xfBase from \"./_xfBase.js\";\nvar XFind = /*#__PURE__*/function () {\n  function XFind(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.found = false;\n  }\n  XFind.prototype['@@transducer/init'] = _xfBase.init;\n  XFind.prototype['@@transducer/result'] = function (result) {\n    if (!this.found) {\n      result = this.xf['@@transducer/step'](result, void 0);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XFind.prototype['@@transducer/step'] = function (result, input) {\n    if (this.f(input)) {\n      this.found = true;\n      result = _reduced(this.xf['@@transducer/step'](result, input));\n    }\n    return result;\n  };\n  return XFind;\n}();\nexport default function _xfind(f) {\n  return function (xf) {\n    return new XFind(f, xf);\n  };\n}", "import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xfind from \"./internal/_xfind.js\";\n\n/**\n * Returns the first element of the list which matches the predicate, or\n * `undefined` if no element matches.\n *\n * Dispatches to the `find` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> a | undefined\n * @param {Function} fn The predicate function used to determine if the element is the\n *        desired one.\n * @param {Array} list The array to consider.\n * @return {Object} The element found, or `undefined`.\n * @see R.transduce\n * @example\n *\n *      const xs = [{a: 1}, {a: 2}, {a: 3}];\n *      R.find(R.propEq(2, 'a'))(xs); //=> {a: 2}\n *      R.find(R.propEq(4, 'a'))(xs); //=> undefined\n */\nvar find = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['find'], _xfind, function find(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    if (fn(list[idx])) {\n      return list[idx];\n    }\n    idx += 1;\n  }\n}));\nexport default find;", "import _reduced from \"./_reduced.js\";\nimport _xfBase from \"./_xfBase.js\";\nvar XFindIndex = /*#__PURE__*/function () {\n  function XFindIndex(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.idx = -1;\n    this.found = false;\n  }\n  XFindIndex.prototype['@@transducer/init'] = _xfBase.init;\n  XFindIndex.prototype['@@transducer/result'] = function (result) {\n    if (!this.found) {\n      result = this.xf['@@transducer/step'](result, -1);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XFindIndex.prototype['@@transducer/step'] = function (result, input) {\n    this.idx += 1;\n    if (this.f(input)) {\n      this.found = true;\n      result = _reduced(this.xf['@@transducer/step'](result, this.idx));\n    }\n    return result;\n  };\n  return XFindIndex;\n}();\nexport default function _xfindIndex(f) {\n  return function (xf) {\n    return new XFindIndex(f, xf);\n  };\n}", "import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xfindIndex from \"./internal/_xfindIndex.js\";\n\n/**\n * Returns the index of the first element of the list which matches the\n * predicate, or `-1` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Number} The index of the element found, or `-1`.\n * @see R.transduce, R.indexOf\n * @example\n *\n *      const xs = [{a: 1}, {a: 2}, {a: 3}];\n *      R.findIndex(R.propEq(2, 'a'))(xs); //=> 1\n *      R.findIndex(R.propEq(4, 'a'))(xs); //=> -1\n */\nvar findIndex = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xfindIndex, function findIndex(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    if (fn(list[idx])) {\n      return idx;\n    }\n    idx += 1;\n  }\n  return -1;\n}));\nexport default findIndex;", "import _xfBase from \"./_xfBase.js\";\nvar XFindLast = /*#__PURE__*/function () {\n  function XFindLast(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XFindLast.prototype['@@transducer/init'] = _xfBase.init;\n  XFindLast.prototype['@@transducer/result'] = function (result) {\n    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));\n  };\n  XFindLast.prototype['@@transducer/step'] = function (result, input) {\n    if (this.f(input)) {\n      this.last = input;\n    }\n    return result;\n  };\n  return XFindLast;\n}();\nexport default function _xfindLast(f) {\n  return function (xf) {\n    return new XFindLast(f, xf);\n  };\n}", "import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xfindLast from \"./internal/_xfindLast.js\";\n\n/**\n * Returns the last element of the list which matches the predicate, or\n * `undefined` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> a | undefined\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Object} The element found, or `undefined`.\n * @see R.transduce\n * @example\n *\n *      const xs = [{a: 1, b: 0}, {a:1, b: 1}];\n *      R.findLast(R.propEq(1, 'a'))(xs); //=> {a: 1, b: 1}\n *      R.findLast(R.propEq(4, 'a'))(xs); //=> undefined\n */\nvar findLast = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xfindLast, function findLast(fn, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    if (fn(list[idx])) {\n      return list[idx];\n    }\n    idx -= 1;\n  }\n}));\nexport default findLast;", "import _xfBase from \"./_xfBase.js\";\nvar XFindLastIndex = /*#__PURE__*/function () {\n  function XFindLastIndex(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.idx = -1;\n    this.lastIdx = -1;\n  }\n  XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;\n  XFindLastIndex.prototype['@@transducer/result'] = function (result) {\n    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));\n  };\n  XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {\n    this.idx += 1;\n    if (this.f(input)) {\n      this.lastIdx = this.idx;\n    }\n    return result;\n  };\n  return XFindLastIndex;\n}();\nexport default function _xfindLastIndex(f) {\n  return function (xf) {\n    return new XFindLastIndex(f, xf);\n  };\n}", "import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xfindLastIndex from \"./internal/_xfindLastIndex.js\";\n\n/**\n * Returns the index of the last element of the list which matches the\n * predicate, or `-1` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Number} The index of the element found, or `-1`.\n * @see R.transduce, R.lastIndexOf\n * @example\n *\n *      const xs = [{a: 1, b: 0}, {a:1, b: 1}];\n *      R.findLastIndex(R.propEq(1, 'a'))(xs); //=> 1\n *      R.findLastIndex(R.propEq(4, 'a'))(xs); //=> -1\n */\nvar findLastIndex = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xfindLastIndex, function findLastIndex(fn, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    if (fn(list[idx])) {\n      return idx;\n    }\n    idx -= 1;\n  }\n  return -1;\n}));\nexport default findLastIndex;", "import _curry1 from \"./internal/_curry1.js\";\nimport _makeFlat from \"./internal/_makeFlat.js\";\n\n/**\n * Returns a new list by pulling every item out of it (and all its sub-arrays)\n * and putting them in a new array, depth-first.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b]\n * @param {Array} list The array to consider.\n * @return {Array} The flattened list.\n * @see R.unnest\n * @example\n *\n *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n */\nvar flatten = /*#__PURE__*/_curry1( /*#__PURE__*/_makeFlat(true));\nexport default flatten;", "import _curry1 from \"./internal/_curry1.js\";\nimport curryN from \"./curryN.js\";\n\n/**\n * Returns a new function much like the supplied one, except that the first two\n * arguments' order is reversed.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)\n * @param {Function} fn The function to invoke with its first two parameters reversed.\n * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n * @example\n *\n *      const mergeThree = (a, b, c) => [].concat(a, b, c);\n *\n *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n *\n *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n * @symb R.flip(f)(a, b, c) = f(b, a, c)\n */\nvar flip = /*#__PURE__*/_curry1(function flip(fn) {\n  return curryN(fn.length, function (a, b) {\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = b;\n    args[1] = a;\n    return fn.apply(this, args);\n  });\n});\nexport default flip;", "import applyTo from \"./applyTo.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport _reduce from \"./internal/_reduce.js\";\n\n/**\n * Takes the value of an expression and applies it to a function\n * which is the left-to-right serial composition of the functions\n * given in the second argument.\n *\n * The functions in the pipeline should be unary functions.\n *\n * `flow` is helps to avoid introducing an extra function with named arguments\n * for computing the result of a function pipeline which depends on given initial values.\n * Rather than defining a referential transparent function `f = (_x, _y) => R.pipe(g(_x), h(_y), …)`\n * which is only later needed once `z = f(x, y)`,\n * the introduction of `f`, `_x` and `_y` can be avoided: `z = flow(x, [g, h(y),…]`\n *\n * In some libraries this function is named `pipe`.\n *\n * @func\n * @memberOf R\n * @since v0.30.0\n * @category Function\n * @sig a → [(a → b), …, (y → z)] → z\n * @param {*} a The seed value\n * @param {Array<Function>} pipeline functions composing the pipeline\n * @return {*} z The result of applying the seed value to the function pipeline\n * @see R.pipe\n * @example\n *      R.flow(9, [Math.sqrt, R.negate, R.inc]); //=> -2\n *\n *      const personObj = { first: 'Jane', last: 'Doe' };\n *      const fullName = R.flow(personObj, [R.values, R.join(' ')]); //=> \"Jane Doe\"\n *      const givenName = R.flow('    ', [R.trim, R.when(R.isEmpty, R.always(fullName))]); //=> \"Jane Doe\"\n */\nvar flow = /*#__PURE__*/_curry2(function flow(seed, pipeline) {\n  return _reduce(applyTo, seed, pipeline);\n});\nexport default flow;", "import _checkForMethod from \"./internal/_checkForMethod.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Iterate over an input `list`, calling a provided function `fn` for each\n * element in the list.\n *\n * `fn` receives one argument: *(value)*.\n *\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n *\n * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n * the original array. In some libraries this function is named `each`.\n *\n * Dispatches to the `forEach` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> *) -> [a] -> [a]\n * @param {Function} fn The function to invoke. Receives one argument, `value`.\n * @param {Array} list The list to iterate over.\n * @return {Array} The original list.\n * @see R.addIndex\n * @example\n *\n *      const printXPlusFive = x => console.log(x + 5);\n *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n *      // logs 6\n *      // logs 7\n *      // logs 8\n * @symb R.forEach(f, [a, b, c]) = [a, b, c]\n */\nvar forEach = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('forEach', function forEach(fn, list) {\n  var len = list.length;\n  var idx = 0;\n  while (idx < len) {\n    fn(list[idx]);\n    idx += 1;\n  }\n  return list;\n}));\nexport default forEach;", "import _curry2 from \"./internal/_curry2.js\";\nimport keys from \"./keys.js\";\n\n/**\n * Iterate over an input `object`, calling a provided function `fn` for each\n * key and value in the object.\n *\n * `fn` receives three argument: *(value, key, obj)*.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Object\n * @sig ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a\n * @param {Function} fn The function to invoke. Receives three argument, `value`, `key`, `obj`.\n * @param {Object} obj The object to iterate over.\n * @return {Object} The original object.\n * @example\n *\n *      const printKeyConcatValue = (value, key) => console.log(key + ':' + value);\n *      R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}\n *      // logs x:1\n *      // logs y:2\n * @symb R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}\n */\nvar forEachObjIndexed = /*#__PURE__*/_curry2(function forEachObjIndexed(fn, obj) {\n  var keyList = keys(obj);\n  var idx = 0;\n  while (idx < keyList.length) {\n    var key = keyList[idx];\n    fn(obj[key], key, obj);\n    idx += 1;\n  }\n  return obj;\n});\nexport default forEachObjIndexed;", "import _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Creates a new object from a list key-value pairs. If a key appears in\n * multiple pairs, the rightmost pair is included in the object.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [[k,v]] -> {k: v}\n * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n * @return {Object} The object made by pairing up `keys` and `values`.\n * @see R.toPairs, R.pair\n * @example\n *\n *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n */\nvar fromPairs = /*#__PURE__*/_curry1(function fromPairs(pairs) {\n  var result = {};\n  var idx = 0;\n  while (idx < pairs.length) {\n    result[pairs[idx][0]] = pairs[idx][1];\n    idx += 1;\n  }\n  return result;\n});\nexport default fromPairs;", "import _checkForMethod from \"./internal/_checkForMethod.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport reduceBy from \"./reduceBy.js\";\n\n/**\n * Splits a list into sub-lists stored in an object, based on the result of\n * calling a key-returning function on each element, and grouping the\n * results according to values returned.\n *\n * Dispatches to the `groupBy` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @typedefn Idx = String | Int | Symbol\n * @sig Idx a => (b -> a) -> [b] -> {a: [b]}\n * @param {Function} fn Function :: a -> Idx\n * @param {Array} list The array to group\n * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements\n *         that produced that key when passed to `fn`.\n * @see R.reduceBy, R.transduce, R.indexBy, R.collectBy\n * @example\n *\n *      const byGrade = R.groupBy(function(student) {\n *        const score = student.score;\n *        return score < 65 ? 'F' :\n *               score < 70 ? 'D' :\n *               score < 80 ? 'C' :\n *               score < 90 ? 'B' : 'A';\n *      });\n *      const students = [{name: 'Abby', score: 84},\n *                      {name: 'Eddy', score: 58},\n *                      // ...\n *                      {name: 'Jack', score: 69}];\n *      byGrade(students);\n *      // {\n *      //   'A': [{name: 'Dianne', score: 99}],\n *      //   'B': [{name: 'Abby', score: 84}]\n *      //   // ...,\n *      //   'F': [{name: 'Eddy', score: 58}]\n *      // }\n */\nvar groupBy = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('groupBy', /*#__PURE__*/reduceBy(function (acc, item) {\n  acc.push(item);\n  return acc;\n}, [])));\nexport default groupBy;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Takes a list and returns a list of lists where each sublist's elements are\n * all satisfied pairwise comparison according to the provided function.\n * Only adjacent elements are passed to the comparison function.\n *\n * @func\n * @memberOf R\n * @since v0.21.0\n * @category List\n * @sig ((a, a) → Boolean) → [a] → [[a]]\n * @param {Function} fn Function for determining whether two given (adjacent)\n *        elements should be in the same group\n * @param {Array} list The array to group. Also accepts a string, which will be\n *        treated as a list of characters.\n * @return {List} A list that contains sublists of elements,\n *         whose concatenations are equal to the original list.\n * @example\n *\n * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]\n *\n * R.groupWith((a, b) => a + 1 === b, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0, 1], [1, 2, 3], [5], [8], [13], [21]]\n *\n * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]\n *\n * const isVowel = R.test(/^[aeiou]$/i);\n * R.groupWith(R.eqBy(isVowel), 'aestiou')\n * //=> ['ae', 'st', 'iou']\n */\nvar groupWith = /*#__PURE__*/_curry2(function (fn, list) {\n  var res = [];\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    var nextidx = idx + 1;\n    while (nextidx < len && fn(list[nextidx - 1], list[nextidx])) {\n      nextidx += 1;\n    }\n    res.push(list.slice(idx, nextidx));\n    idx = nextidx;\n  }\n  return res;\n});\nexport default groupWith;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Returns `true` if the first argument is greater than the second; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see R.lt\n * @example\n *\n *      R.gt(2, 1); //=> true\n *      R.gt(2, 2); //=> false\n *      R.gt(2, 3); //=> false\n *      R.gt('a', 'z'); //=> false\n *      R.gt('z', 'a'); //=> true\n */\nvar gt = /*#__PURE__*/_curry2(function gt(a, b) {\n  return a > b;\n});\nexport default gt;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Returns `true` if the first argument is greater than or equal to the second;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n * @see R.lte\n * @example\n *\n *      R.gte(2, 1); //=> true\n *      R.gte(2, 2); //=> true\n *      R.gte(2, 3); //=> false\n *      R.gte('a', 'z'); //=> false\n *      R.gte('z', 'a'); //=> true\n */\nvar gte = /*#__PURE__*/_curry2(function gte(a, b) {\n  return a >= b;\n});\nexport default gte;", "import _curry2 from \"./internal/_curry2.js\";\nimport _has from \"./internal/_has.js\";\nimport isNil from \"./isNil.js\";\n\n/**\n * Returns whether or not a path exists in an object. Only the object's\n * own properties are checked.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig [Idx] -> {a} -> Boolean\n * @param {Array} path The path to use.\n * @param {Object} obj The object to check the path in.\n * @return {Boolean} Whether the path exists.\n * @see R.has\n * @example\n *\n *      R.hasPath(['a', 'b'], {a: {b: 2}});         // => true\n *      R.hasPath(['a', 'b'], {a: {b: undefined}}); // => true\n *      R.hasPath(['a', 'b'], {a: {c: 2}});         // => false\n *      R.hasPath(['a', 'b'], {});                  // => false\n */\nvar hasPath = /*#__PURE__*/_curry2(function hasPath(_path, obj) {\n  if (_path.length === 0 || isNil(obj)) {\n    return false;\n  }\n  var val = obj;\n  var idx = 0;\n  while (idx < _path.length) {\n    if (!isNil(val) && _has(_path[idx], val)) {\n      val = val[_path[idx]];\n      idx += 1;\n    } else {\n      return false;\n    }\n  }\n  return true;\n});\nexport default hasPath;", "import _curry2 from \"./internal/_curry2.js\";\nimport hasPath from \"./hasPath.js\";\n\n/**\n * Returns whether or not an object has an own property with the specified name\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Object\n * @sig s -> {s: x} -> Boolean\n * @param {String} prop The name of the property to check for.\n * @param {Object} obj The object to query.\n * @return {Boolean} Whether the property exists.\n * @example\n *\n *      const hasName = R.has('name');\n *      hasName({name: 'alice'});   //=> true\n *      hasName({name: 'bob'});     //=> true\n *      hasName({});                //=> false\n *\n *      const point = {x: 0, y: 0};\n *      const pointHas = R.has(R.__, point);\n *      pointHas('x');  //=> true\n *      pointHas('y');  //=> true\n *      pointHas('z');  //=> false\n */\nvar has = /*#__PURE__*/_curry2(function has(prop, obj) {\n  return hasPath([prop], obj);\n});\nexport default has;", "import _curry2 from \"./internal/_curry2.js\";\nimport isNil from \"./isNil.js\";\n\n/**\n * Returns whether or not an object or its prototype chain has a property with\n * the specified name\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Object\n * @sig s -> {s: x} -> Boolean\n * @param {String} prop The name of the property to check for.\n * @param {Object} obj The object to query.\n * @return {Boolean} Whether the property exists.\n * @example\n *\n *      function Rectangle(width, height) {\n *        this.width = width;\n *        this.height = height;\n *      }\n *      Rectangle.prototype.area = function() {\n *        return this.width * this.height;\n *      };\n *\n *      const square = new Rectangle(2, 2);\n *      R.hasIn('width', square);  //=> true\n *      R.hasIn('area', square);  //=> true\n */\nvar hasIn = /*#__PURE__*/_curry2(function hasIn(prop, obj) {\n  if (isNil(obj)) {\n    return false;\n  }\n  return prop in obj;\n});\nexport default hasIn;", "import _curry3 from \"./internal/_curry3.js\";\nimport curryN from \"./curryN.js\";\n\n/**\n * Creates a function that will process either the `onTrue` or the `onFalse`\n * function depending upon the result of the `condition` predicate.\n *\n * Note that `ifElse` takes its arity from the longest of the three functions passed to it.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\n * @param {Function} condition A predicate function\n * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n * @return {Function} A new function that will process either the `onTrue` or the `onFalse`\n *                    function depending upon the result of the `condition` predicate.\n * @see R.unless, R.when, R.cond\n * @example\n *\n *      const incCount = R.ifElse(\n *        R.has('count'),\n *        R.over(R.lensProp('count'), R.inc),\n *        R.assoc('count', 1)\n *      );\n *      incCount({ count: 1 }); //=> { count: 2 }\n *      incCount({});           //=> { count: 1 }\n */\nvar ifElse = /*#__PURE__*/_curry3(function ifElse(condition, onTrue, onFalse) {\n  return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {\n    return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);\n  });\n});\nexport default ifElse;", "import add from \"./add.js\";\n\n/**\n * Increments its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number} n + 1\n * @see R.dec\n * @example\n *\n *      R.inc(42); //=> 43\n */\nvar inc = /*#__PURE__*/add(1);\nexport default inc;", "import _includes from \"./internal/_includes.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Returns `true` if the specified value is equal, in [`R.equals`](#equals)\n * terms, to at least one element of the given list; `false` otherwise.\n * Also works with strings.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category List\n * @sig a -> [a] -> Boolean\n * @param {Object} a The item to compare against.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.\n * @see R.any\n * @example\n *\n *      R.includes(3, [1, 2, 3]); //=> true\n *      R.includes(4, [1, 2, 3]); //=> false\n *      R.includes({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true\n *      R.includes([42], [[42]]); //=> true\n *      R.includes('ba', 'banana'); //=>true\n */\nvar includes = /*#__PURE__*/_curry2(_includes);\nexport default includes;", "import reduceBy from \"./reduceBy.js\";\n\n/**\n * Given a function that generates a key, turns a list of objects into an\n * object indexing the objects by the given key. Note that if multiple\n * objects generate the same value for the indexing key only the last value\n * will be included in the generated object.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @typedefn Idx = String | Int | Symbol\n * @sig Idx a => (b -> a) -> [b] -> {a: b}\n * @param {Function} fn Function :: a -> Idx\n * @param {Array} array The array of objects to index\n * @return {Object} An object indexing each array element by the given property.\n * @see R.groupBy\n * @example\n *\n *      const list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];\n *      R.indexBy(R.prop('id'), list);\n *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}\n */\nvar indexBy = /*#__PURE__*/reduceBy(function (acc, elem) {\n  return elem;\n}, null);\nexport default indexBy;", "import _curry2 from \"./internal/_curry2.js\";\nimport _indexOf from \"./internal/_indexOf.js\";\nimport _isArray from \"./internal/_isArray.js\";\n\n/**\n * Returns the position of the first occurrence of an item in an array, or -1\n * if the item is not included in the array. [`R.equals`](#equals) is used to\n * determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Number\n * @param {*} target The item to find.\n * @param {Array} xs The array to search in.\n * @return {Number} the index of the target, or -1 if the target is not found.\n * @see R.lastIndexOf, R.findIndex\n * @example\n *\n *      R.indexOf(3, [1,2,3,4]); //=> 2\n *      R.indexOf(10, [1,2,3,4]); //=> -1\n */\nvar indexOf = /*#__PURE__*/_curry2(function indexOf(target, xs) {\n  return typeof xs.indexOf === 'function' && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);\n});\nexport default indexOf;", "import slice from \"./slice.js\";\n\n/**\n * Returns all but the last element of the given list or string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.last, R.head, R.tail\n * @example\n *\n *      R.init([1, 2, 3]);  //=> [1, 2]\n *      R.init([1, 2]);     //=> [1]\n *      R.init([1]);        //=> []\n *      R.init([]);         //=> []\n *\n *      R.init('abc');  //=> 'ab'\n *      R.init('ab');   //=> 'a'\n *      R.init('a');    //=> ''\n *      R.init('');     //=> ''\n */\nvar init = /*#__PURE__*/slice(0, -1);\nexport default init;", "import _includesWith from \"./internal/_includesWith.js\";\nimport _curry3 from \"./internal/_curry3.js\";\nimport _filter from \"./internal/_filter.js\";\n\n/**\n * Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list\n * `xs'` comprising each of the elements of `xs` which is equal to one or more\n * elements of `ys` according to `pred`.\n *\n * `pred` must be a binary function expecting an element from each list.\n *\n * `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should\n * not be significant, but since `xs'` is ordered the implementation guarantees\n * that its values are in the same order as they appear in `xs`. Duplicates are\n * not removed, so `xs'` may contain duplicates if `xs` contains duplicates.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Relation\n * @sig ((a, b) -> Boolean) -> [a] -> [b] -> [a]\n * @param {Function} pred\n * @param {Array} xs\n * @param {Array} ys\n * @return {Array}\n * @see R.intersection\n * @example\n *\n *      R.innerJoin(\n *        (record, id) => record.id === id,\n *        [{id: 824, name: 'Richie Furay'},\n *         {id: 956, name: 'Dewey Martin'},\n *         {id: 313, name: 'Bruce Palmer'},\n *         {id: 456, name: 'Stephen Stills'},\n *         {id: 177, name: 'Neil Young'}],\n *        [177, 456, 999]\n *      );\n *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n */\nvar innerJoin = /*#__PURE__*/_curry3(function innerJoin(pred, xs, ys) {\n  return _filter(function (x) {\n    return _includesWith(pred, x, ys);\n  }, xs);\n});\nexport default innerJoin;", "import _curry3 from \"./internal/_curry3.js\";\n\n/**\n * Inserts the supplied element into the list, at the specified `index`. _Note that\n\n * this is not destructive_: it returns a copy of the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.2.2\n * @category List\n * @sig Number -> a -> [a] -> [a]\n * @param {Number} index The position to insert the element\n * @param {*} elt The element to insert into the Array\n * @param {Array} list The list to insert into\n * @return {Array} A new Array with `elt` inserted at `index`.\n * @example\n *\n *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]\n */\nvar insert = /*#__PURE__*/_curry3(function insert(idx, elt, list) {\n  idx = idx < list.length && idx >= 0 ? idx : list.length;\n  var result = Array.prototype.slice.call(list, 0);\n  result.splice(idx, 0, elt);\n  return result;\n});\nexport default insert;", "import _curry3 from \"./internal/_curry3.js\";\n\n/**\n * Inserts the sub-list into the list, at the specified `index`. _Note that this is not\n * destructive_: it returns a copy of the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a] -> [a]\n * @param {Number} index The position to insert the sub-list\n * @param {Array} elts The sub-list to insert into the Array\n * @param {Array} list The list to insert the sub-list into\n * @return {Array} A new Array with `elts` inserted starting at `index`.\n * @example\n *\n *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]\n */\nvar insertAll = /*#__PURE__*/_curry3(function insertAll(idx, elts, list) {\n  idx = idx < list.length && idx >= 0 ? idx : list.length;\n  return [].concat(Array.prototype.slice.call(list, 0, idx), elts, Array.prototype.slice.call(list, idx));\n});\nexport default insertAll;", "import _Set from \"./_Set.js\";\nimport _xfBase from \"./_xfBase.js\";\nvar XUniqBy = /*#__PURE__*/function () {\n  function XUniqBy(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.set = new _Set();\n  }\n  XUniqBy.prototype['@@transducer/init'] = _xfBase.init;\n  XUniqBy.prototype['@@transducer/result'] = _xfBase.result;\n  XUniqBy.prototype['@@transducer/step'] = function (result, input) {\n    return this.set.add(this.f(input)) ? this.xf['@@transducer/step'](result, input) : result;\n  };\n  return XUniqBy;\n}();\nexport default function _xuniqBy(f) {\n  return function (xf) {\n    return new XUniqBy(f, xf);\n  };\n}", "import _Set from \"./internal/_Set.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xuniqBy from \"./internal/_xuniqBy.js\";\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied function to\n * each list element. Prefers the first item if the supplied function produces\n * the same value on two items. [`R.equals`](#equals) is used for comparison.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> b) -> [a] -> [a]\n * @param {Function} fn A function used to produce a value to use during comparisons.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n */\nvar uniqBy = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xuniqBy, function (fn, list) {\n  var set = new _Set();\n  var result = [];\n  var idx = 0;\n  var appliedItem, item;\n  while (idx < list.length) {\n    item = list[idx];\n    appliedItem = fn(item);\n    if (set.add(appliedItem)) {\n      result.push(item);\n    }\n    idx += 1;\n  }\n  return result;\n}));\nexport default uniqBy;", "import identity from \"./identity.js\";\nimport uniqBy from \"./uniqBy.js\";\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list. [`R.equals`](#equals) is used to determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniq([1, 1, 2, 1]); //=> [1, 2]\n *      R.uniq([1, '1']);     //=> [1, '1']\n *      R.uniq([[42], [42]]); //=> [[42]]\n */\nvar uniq = /*#__PURE__*/uniqBy(identity);\nexport default uniq;", "import _curry2 from \"./internal/_curry2.js\";\nimport _filter from \"./internal/_filter.js\";\nimport _Set from \"./internal/_Set.js\";\nimport uniq from \"./uniq.js\";\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of those\n * elements common to both lists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The list of elements found in both `list1` and `list2`.\n * @see R.innerJoin\n * @example\n *\n *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n */\nvar intersection = /*#__PURE__*/_curry2(function intersection(list1, list2) {\n  var toKeep = new _Set();\n  for (var i = 0; i < list1.length; i += 1) {\n    toKeep.add(list1[i]);\n  }\n  return uniq(_filter(toKeep.has.bind(toKeep), list2));\n});\nexport default intersection;", "import _checkForMethod from \"./internal/_checkForMethod.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Creates a new list with the separator interposed between elements.\n *\n * Dispatches to the `intersperse` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} separator The element to add to the list.\n * @param {Array} list The list to be interposed.\n * @return {Array} The new list.\n * @example\n *\n *      R.intersperse('a', ['b', 'n', 'n', 's']); //=> ['b', 'a', 'n', 'a', 'n', 'a', 's']\n */\nvar intersperse = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('intersperse', function _intersperse(separator, list) {\n  var length = list.length;\n  if (length === 0) {\n    return [];\n  }\n  var out = Array(length * 2 - 1);\n  var idx = 0;\n  while (idx < length) {\n    var i = idx * 2;\n    if (idx === length - 1) {\n      out[i] = list[idx];\n    } else {\n      out[i] = list[idx];\n      out[i + 1] = separator;\n    }\n    idx += 1;\n  }\n  return out;\n}));\nexport default intersperse;", "import _has from \"./_has.js\";\n\n// Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nfunction _objectAssign(target) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n  var output = Object(target);\n  var idx = 1;\n  var length = arguments.length;\n  while (idx < length) {\n    var source = arguments[idx];\n    if (source != null) {\n      for (var nextKey in source) {\n        if (_has(nextKey, source)) {\n          output[nextKey] = source[nextKey];\n        }\n      }\n    }\n    idx += 1;\n  }\n  return output;\n}\nexport default typeof Object.assign === 'function' ? Object.assign : _objectAssign;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Creates an object containing a single key:value pair.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @sig String -> a -> {String:a}\n * @param {String} key\n * @param {*} val\n * @return {Object}\n * @see R.pair\n * @example\n *\n *      const matchPhrases = R.compose(\n *        R.objOf('must'),\n *        R.map(R.objOf('match_phrase'))\n *      );\n *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n */\nvar objOf = /*#__PURE__*/_curry2(function objOf(key, val) {\n  var obj = {};\n  obj[key] = val;\n  return obj;\n});\nexport default objOf;", "import _objectAssign from \"./_objectAssign.js\";\nimport _identity from \"./_identity.js\";\nimport _isArrayLike from \"./_isArrayLike.js\";\nimport _isTransformer from \"./_isTransformer.js\";\nimport objOf from \"../objOf.js\";\nvar _stepCatArray = {\n  '@@transducer/init': Array,\n  '@@transducer/step': function (xs, x) {\n    xs.push(x);\n    return xs;\n  },\n  '@@transducer/result': _identity\n};\nvar _stepCatString = {\n  '@@transducer/init': String,\n  '@@transducer/step': function (a, b) {\n    return a + b;\n  },\n  '@@transducer/result': _identity\n};\nvar _stepCatObject = {\n  '@@transducer/init': Object,\n  '@@transducer/step': function (result, input) {\n    return _objectAssign(result, _isArrayLike(input) ? objOf(input[0], input[1]) : input);\n  },\n  '@@transducer/result': _identity\n};\nexport default function _stepCat(obj) {\n  if (_isTransformer(obj)) {\n    return obj;\n  }\n  if (_isArrayLike(obj)) {\n    return _stepCatArray;\n  }\n  if (typeof obj === 'string') {\n    return _stepCatString;\n  }\n  if (typeof obj === 'object') {\n    return _stepCatObject;\n  }\n  throw new Error('Cannot create transformer for ' + obj);\n}", "import _curry3 from \"./internal/_curry3.js\";\nimport _isTransformer from \"./internal/_isTransformer.js\";\nimport _xReduce from \"./internal/_xReduce.js\";\nimport _stepCat from \"./internal/_stepCat.js\";\n\n/**\n * Transforms the items of the list with the transducer and appends the\n * transformed items to the accumulator using an appropriate iterator function\n * based on the accumulator type.\n *\n * The accumulator can be an array, string, object or a transformer. Iterated\n * items will be appended to arrays and concatenated to strings. Objects will\n * be merged directly or 2-item arrays will be merged as key, value pairs.\n *\n * The accumulator can also be a transformer object that provides a 2-arity\n * reducing iterator function, step, 0-arity initial value function, init, and\n * 1-arity result extraction function result. The step function is used as the\n * iterator function in reduce. The result function is used to convert the\n * final accumulator into the return type and in most cases is R.identity. The\n * init function is used to provide the initial accumulator.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the\n * transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig a -> (b -> b) -> [c] -> a\n * @param {*} acc The initial accumulator value.\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.transduce\n * @example\n *\n *      const numbers = [1, 2, 3, 4];\n *      const transducer = R.compose(R.map(R.add(1)), R.take(2));\n *\n *      R.into([], transducer, numbers); //=> [2, 3]\n *\n *      const intoArray = R.into([]);\n *      intoArray(transducer, numbers); //=> [2, 3]\n */\nvar into = /*#__PURE__*/_curry3(function into(acc, transducer, list) {\n  var xf = transducer(_isTransformer(acc) ? acc : _stepCat(acc));\n  return _xReduce(xf, xf['@@transducer/init'](), list);\n});\nexport default into;", "import _curry1 from \"./internal/_curry1.js\";\nimport _has from \"./internal/_has.js\";\nimport keys from \"./keys.js\";\n\n/**\n * Same as [`R.invertObj`](#invertObj), however this accounts for objects with\n * duplicate values by putting the values into an array.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {s: x} -> {x: [ s, ... ]}\n * @param {Object} obj The object or array to invert\n * @return {Object} out A new object with keys in an array.\n * @see R.invertObj\n * @example\n *\n *      const raceResultsByFirstName = {\n *        first: 'alice',\n *        second: 'jake',\n *        third: 'alice',\n *      };\n *      R.invert(raceResultsByFirstName);\n *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }\n */\nvar invert = /*#__PURE__*/_curry1(function invert(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var idx = 0;\n  var out = {};\n  while (idx < len) {\n    var key = props[idx];\n    var val = obj[key];\n    var list = _has(val, out) ? out[val] : out[val] = [];\n    list[list.length] = key;\n    idx += 1;\n  }\n  return out;\n});\nexport default invert;", "import _curry1 from \"./internal/_curry1.js\";\nimport keys from \"./keys.js\";\n\n/**\n * Returns a new object with the keys of the given object as values, and the\n * values of the given object, which are coerced to strings, as keys. Note\n * that the last key found is preferred when handling the same value.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {s: x} -> {x: s}\n * @param {Object} obj The object or array to invert\n * @return {Object} out A new object\n * @see R.invert\n * @example\n *\n *      const raceResults = {\n *        first: 'alice',\n *        second: 'jake'\n *      };\n *      R.invertObj(raceResults);\n *      //=> { 'alice': 'first', 'jake':'second' }\n *\n *      // Alternatively:\n *      const raceResults = ['alice', 'jake'];\n *      R.invertObj(raceResults);\n *      //=> { 'alice': '0', 'jake':'1' }\n */\nvar invertObj = /*#__PURE__*/_curry1(function invertObj(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var idx = 0;\n  var out = {};\n  while (idx < len) {\n    var key = props[idx];\n    out[obj[key]] = key;\n    idx += 1;\n  }\n  return out;\n});\nexport default invertObj;", "import _curry2 from \"./internal/_curry2.js\";\nimport _isFunction from \"./internal/_isFunction.js\";\nimport curryN from \"./curryN.js\";\nimport toString from \"./toString.js\";\n\n/**\n * Given an `arity` (Number) and a `name` (String) the `invoker` function\n * returns a curried function that takes `arity` arguments and a `context`\n * object. It will \"invoke\" the `name`'d function (a method) on the `context`\n * object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n * @param {Number} arity Number of arguments the returned function should take\n *        before the target object.\n * @param {String} method Name of any of the target object's methods to call.\n * @return {Function} A new curried function.\n * @see R.construct\n * @example\n *      // A function with no arguments\n *      const asJson = invoker(0, \"json\")\n *      // Just like calling .then((response) => response.json())\n *      fetch(\"http://example.com/index.json\").then(asJson)\n *\n *      // A function with one argument\n *      const sliceFrom = invoker(1, 'slice');\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n *\n *      // A function with two arguments\n *      const sliceFrom6 = invoker(2, 'slice')(6);\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n *\n *      // NOTE: You can't simply pass some of the arguments to the initial invoker function.\n *      const firstCreditCardSection = invoker(2, \"slice\", 0, 4)\n *      firstCreditCardSection(\"4242 4242 4242 4242\") // => Function<...>\n *\n *      // Since invoker returns a curried function, you may partially apply it to create the function you need.\n *      const firstCreditCardSection = invoker(2, \"slice\")(0, 4)\n *      firstCreditCardSection(\"4242 4242 4242 4242\") // => \"4242\"\n *\n * @symb R.invoker(0, 'method')(o) = o['method']()\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\n */\nvar invoker = /*#__PURE__*/_curry2(function invoker(arity, method) {\n  return curryN(arity + 1, function () {\n    var target = arguments[arity];\n    if (target != null && _isFunction(target[method])) {\n      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));\n    }\n    throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n  });\n});\nexport default invoker;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * See if an object (i.e. `val`) is an instance of the supplied constructor. This\n * function will check up the inheritance chain, if any.\n * If `val` was created using `Object.create`, `R.is(Object, val) === true`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Type\n * @sig (* -> {*}) -> a -> Boolean\n * @param {Object} ctor A constructor\n * @param {*} val The value to test\n * @return {Boolean}\n * @example\n *\n *      R.is(Object, {}); //=> true\n *      R.is(Number, 1); //=> true\n *      R.is(Object, 1); //=> false\n *      R.is(String, 's'); //=> true\n *      R.is(String, new String('')); //=> true\n *      R.is(Object, new String('')); //=> true\n *      R.is(Object, 's'); //=> false\n *      R.is(Number, {}); //=> false\n */\nvar is = /*#__PURE__*/_curry2(function is(Ctor, val) {\n  return val instanceof Ctor || val != null && (val.constructor === Ctor || Ctor.name === 'Object' && typeof val === 'object');\n});\nexport default is;", "import _curry1 from \"./internal/_curry1.js\";\nimport empty from \"./empty.js\";\nimport equals from \"./equals.js\";\n\n/**\n * Returns `true` if the given value is its type's empty value; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> Boolean\n * @param {*} x\n * @return {Boolean}\n * @see R.empty, R.isNotEmpty\n * @example\n *\n *      R.isEmpty([1, 2, 3]);           //=> false\n *      R.isEmpty([]);                  //=> true\n *      R.isEmpty('');                  //=> true\n *      R.isEmpty(null);                //=> false\n *      R.isEmpty({});                  //=> true\n *      R.isEmpty({length: 0});         //=> false\n *      R.isEmpty(Uint8Array.from('')); //=> true\n */\nvar isEmpty = /*#__PURE__*/_curry1(function isEmpty(x) {\n  return x != null && equals(x, empty(x));\n});\nexport default isEmpty;", "import _curry1 from \"./internal/_curry1.js\";\nimport isEmpty from \"./isEmpty.js\";\n\n/**\n * Returns `false` if the given value is its type's empty value; `true`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.29.2\n * @category Logic\n * @sig a -> Boolean\n * @param {*} x\n * @return {Boolean}\n * @see R.empty, R.isEmpty\n * @example\n *\n *      R.isNotEmpty([1, 2, 3]);           //=> true\n *      R.isNotEmpty([]);                  //=> false\n *      R.isNotEmpty('');                  //=> false\n *      R.isNotEmpty(null);                //=> true\n *      R.isNotEmpty({});                  //=> false\n *      R.isNotEmpty({length: 0});         //=> true\n *      R.isNotEmpty(Uint8Array.from('')); //=> false\n */\nvar isNotEmpty = /*#__PURE__*/_curry1(function isNotEmpty(x) {\n  return !isEmpty(x);\n});\nexport default isNotEmpty;", "import isNil from \"./isNil.js\";\nimport _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Checks if the input value is not `null` and not `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.29.0\n * @category Type\n * @sig * -> Boolean\n * @param {*} x The value to test.\n * @return {Boolean} `true` if `x` is not `undefined` or not `null`, otherwise `false`.\n * @example\n *\n *      R.isNotNil(null); //=> false\n *      R.isNotNil(undefined); //=> false\n *      R.isNotNil(0); //=> true\n *      R.isNotNil([]); //=> true\n */\nvar isNotNil = /*#__PURE__*/_curry1(function isNotNil(x) {\n  return !isNil(x);\n});\nexport default isNotNil;", "import invoker from \"./invoker.js\";\n\n/**\n * Returns a string made by inserting the `separator` between each element and\n * concatenating all the elements into a single string.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig String -> [a] -> String\n * @param {Number|String} separator The string used to separate the elements.\n * @param {Array} xs The elements to join into a string.\n * @return {String} str The string made by concatenating `xs` with `separator`.\n * @see R.split\n * @example\n *\n *      const spacer = R.join(' ');\n *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n *      R.join('|', [1, 2, 3]);    //=> '1|2|3'\n */\nvar join = /*#__PURE__*/invoker(1, 'join');\nexport default join;", "import _curry1 from \"./internal/_curry1.js\";\nimport converge from \"./converge.js\";\n\n/**\n * juxt applies a list of functions to a list of values.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Function\n * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n * @param {Array} fns An array of functions\n * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n * @see R.applySpec\n * @example\n *\n *      const getRange = R.juxt([Math.min, Math.max]);\n *      getRange(3, 4, 9, -3); //=> [-3, 9]\n * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]\n */\nvar juxt = /*#__PURE__*/_curry1(function juxt(fns) {\n  return converge(function () {\n    return Array.prototype.slice.call(arguments, 0);\n  }, fns);\n});\nexport default juxt;", "import _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Returns a list containing the names of all the properties of the supplied\n * object, including prototype properties.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own and prototype properties.\n * @see R.keys, R.valuesIn\n * @example\n *\n *      const F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      const f = new F();\n *      R.keysIn(f); //=> ['x', 'y']\n */\nvar keysIn = /*#__PURE__*/_curry1(function keysIn(obj) {\n  var prop;\n  var ks = [];\n  for (prop in obj) {\n    ks[ks.length] = prop;\n  }\n  return ks;\n});\nexport default keysIn;", "import _curry2 from \"./internal/_curry2.js\";\nimport _isArray from \"./internal/_isArray.js\";\nimport equals from \"./equals.js\";\n\n/**\n * Returns the position of the last occurrence of an item in an array, or -1 if\n * the item is not included in the array. [`R.equals`](#equals) is used to\n * determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Number\n * @param {*} target The item to find.\n * @param {Array} xs The array to search in.\n * @return {Number} the index of the target, or -1 if the target is not found.\n * @see R.indexOf, R.findLastIndex\n * @example\n *\n *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6\n *      R.lastIndexOf(10, [1,2,3,4]); //=> -1\n */\nvar lastIndexOf = /*#__PURE__*/_curry2(function lastIndexOf(target, xs) {\n  if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {\n    return xs.lastIndexOf(target);\n  } else {\n    var idx = xs.length - 1;\n    while (idx >= 0) {\n      if (equals(xs[idx], target)) {\n        return idx;\n      }\n      idx -= 1;\n    }\n    return -1;\n  }\n});\nexport default lastIndexOf;", "export default function _isNumber(x) {\n  return Object.prototype.toString.call(x) === '[object Number]';\n}", "import _curry1 from \"./internal/_curry1.js\";\nimport _isNumber from \"./internal/_isNumber.js\";\n\n/**\n * Returns the number of elements in the array by returning `list.length`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [a] -> Number\n * @param {Array} list The array to inspect.\n * @return {Number} The length of the array.\n * @example\n *\n *      R.length([]); //=> 0\n *      R.length([1, 2, 3]); //=> 3\n */\nvar length = /*#__PURE__*/_curry1(function length(list) {\n  return list != null && _isNumber(list.length) ? list.length : NaN;\n});\nexport default length;", "import _curry2 from \"./internal/_curry2.js\";\nimport map from \"./map.js\";\n\n/**\n * Returns a lens for the given getter and setter functions. The getter \"gets\"\n * the value of the focus; the setter \"sets\" the value of the focus. The setter\n * should not mutate the data structure.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n * @param {Function} getter\n * @param {Function} setter\n * @return {Lens}\n * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n * @example\n *\n *      const xLens = R.lens(R.prop('x'), R.assoc('x'));\n *\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n */\nvar lens = /*#__PURE__*/_curry2(function lens(getter, setter) {\n  return function (toFunctorFn) {\n    return function (target) {\n      return map(function (focus) {\n        return setter(focus, target);\n      }, toFunctorFn(getter(target)));\n    };\n  };\n});\nexport default lens;", "import _curry3 from \"./internal/_curry3.js\";\nimport adjust from \"./adjust.js\";\nimport always from \"./always.js\";\n\n/**\n * Returns a new copy of the array with the element at the provided index\n * replaced with the given value.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig Number -> a -> [a] -> [a]\n * @param {Number} idx The index to update.\n * @param {*} x The value to exist at the given index of the returned array.\n * @param {Array|Arguments} list The source array-like object to be updated.\n * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\n * @see R.adjust\n * @example\n *\n *      R.update(1, '_', ['a', 'b', 'c']);      //=> ['a', '_', 'c']\n *      R.update(-1, '_', ['a', 'b', 'c']);     //=> ['a', 'b', '_']\n * @symb R.update(-1, a, [b, c]) = [b, a]\n * @symb R.update(0, a, [b, c]) = [a, c]\n * @symb R.update(1, a, [b, c]) = [b, a]\n */\nvar update = /*#__PURE__*/_curry3(function update(idx, x, list) {\n  return adjust(idx, always(x), list);\n});\nexport default update;", "import _curry1 from \"./internal/_curry1.js\";\nimport _nth from \"./internal/_nth.js\";\nimport lens from \"./lens.js\";\nimport update from \"./update.js\";\n\n/**\n * Returns a lens whose focus is the specified index.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Number -> Lens s a\n * @param {Number} n\n * @return {Lens}\n * @see R.view, R.set, R.over, R.nth\n * @example\n *\n *      const headLens = R.lensIndex(0);\n *\n *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'\n *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']\n *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']\n */\nvar lensIndex = /*#__PURE__*/_curry1(function lensIndex(n) {\n  return lens(function (val) {\n    return _nth(n, val);\n  }, update(n));\n});\nexport default lensIndex;", "import _isInteger from \"./_isInteger.js\";\nimport _nth from \"./_nth.js\";\nexport default function _path(pathAr, obj) {\n  var val = obj;\n  for (var i = 0; i < pathAr.length; i += 1) {\n    if (val == null) {\n      return undefined;\n    }\n    var p = pathAr[i];\n    if (_isInteger(p)) {\n      val = _nth(p, val);\n    } else {\n      val = val[p];\n    }\n  }\n  return val;\n}", "import _curry1 from \"./internal/_curry1.js\";\nimport assocPath from \"./assocPath.js\";\nimport lens from \"./lens.js\";\nimport _path from \"./internal/_path.js\";\n\n/**\n * Returns a lens whose focus is the specified path.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig [Idx] -> Lens s a\n * @param {Array} path The path to use.\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      const xHeadYLens = R.lensPath(['x', 0, 'y']);\n *\n *      R.view(xHeadYLens, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> 2\n *      R.set(xHeadYLens, 1, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> {x: [{y: 1, z: 3}, {y: 4, z: 5}]}\n *      R.over(xHeadYLens, R.negate, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> {x: [{y: -2, z: 3}, {y: 4, z: 5}]}\n */\n\nvar lensPath = /*#__PURE__*/_curry1(function lensPath(p) {\n  return lens(function (val) {\n    return _path(p, val);\n  }, assocPath(p));\n});\nexport default lensPath;", "import _curry1 from \"./internal/_curry1.js\";\nimport assoc from \"./assoc.js\";\nimport lens from \"./lens.js\";\nimport prop from \"./prop.js\";\n\n/**\n * Returns a lens whose focus is the specified property.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig String -> Lens s a\n * @param {String} k\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      const xLens = R.lensProp('x');\n *\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n */\nvar lensProp = /*#__PURE__*/_curry1(function lensProp(k) {\n  return lens(prop(k), assoc(k));\n});\nexport default lensProp;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Returns `true` if the first argument is less than the second; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see R.gt\n * @example\n *\n *      R.lt(2, 1); //=> false\n *      R.lt(2, 2); //=> false\n *      R.lt(2, 3); //=> true\n *      R.lt('a', 'z'); //=> true\n *      R.lt('z', 'a'); //=> false\n */\nvar lt = /*#__PURE__*/_curry2(function lt(a, b) {\n  return a < b;\n});\nexport default lt;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Returns `true` if the first argument is less than or equal to the second;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n * @see R.gte\n * @example\n *\n *      R.lte(2, 1); //=> false\n *      R.lte(2, 2); //=> true\n *      R.lte(2, 3); //=> true\n *      R.lte('a', 'z'); //=> true\n *      R.lte('z', 'a'); //=> false\n */\nvar lte = /*#__PURE__*/_curry2(function lte(a, b) {\n  return a <= b;\n});\nexport default lte;", "import _curry3 from \"./internal/_curry3.js\";\n\n/**\n * The `mapAccum` function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from left to right, and returning a final value of this\n * accumulator together with the new list.\n *\n * The iterator function receives two arguments, *acc* and *value*, and should\n * return a tuple *[acc, value]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.scan, R.addIndex, R.mapAccumRight\n * @example\n *\n *      const digits = ['1', '2', '3', '4'];\n *      const appender = (a, b) => [a + b, a + b];\n *\n *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n * @symb R.mapAccum(f, a, [b, c, d]) = [\n *   f(f(f(a, b)[0], c)[0], d)[0],\n *   [\n *     f(a, b)[1],\n *     f(f(a, b)[0], c)[1],\n *     f(f(f(a, b)[0], c)[0], d)[1]\n *   ]\n * ]\n */\nvar mapAccum = /*#__PURE__*/_curry3(function mapAccum(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = Array(len);\n  var tuple = [acc];\n  while (idx < len) {\n    tuple = fn(tuple[0], list[idx]);\n    result[idx] = tuple[1];\n    idx += 1;\n  }\n  return [tuple[0], result];\n});\nexport default mapAccum;", "import _curry3 from \"./internal/_curry3.js\";\n\n/**\n * The `mapAccumRight` function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from right to left, and returning a final value of this\n * accumulator together with the new list.\n *\n * Similar to [`mapAccum`](#mapAccum), except moves through the input list from\n * the right to the left.\n *\n * The iterator function receives two arguments, *acc* and *value*, and should\n * return a tuple *[acc, value]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.addIndex, R.mapAccum\n * @example\n *\n *      const digits = ['1', '2', '3', '4'];\n *      const appender = (a, b) => [b + a, b + a];\n *\n *      R.mapAccumRight(appender, 5, digits); //=> ['12345', ['12345', '2345', '345', '45']]\n * @symb R.mapAccumRight(f, a, [b, c, d]) = [\n *   f(f(f(a, d)[0], c)[0], b)[0],\n *   [\n *     f(a, d)[1],\n *     f(f(a, d)[0], c)[1],\n *     f(f(f(a, d)[0], c)[0], b)[1]\n *   ]\n * ]\n */\nvar mapAccumRight = /*#__PURE__*/_curry3(function mapAccumRight(fn, acc, list) {\n  var idx = list.length - 1;\n  var result = Array(list.length);\n  var tuple = [acc];\n  while (idx >= 0) {\n    tuple = fn(tuple[0], list[idx]);\n    result[idx] = tuple[1];\n    idx -= 1;\n  }\n  return [tuple[0], result];\n});\nexport default mapAccumRight;", "import _arrayReduce from \"./internal/_arrayReduce.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport keys from \"./keys.js\";\n\n/**\n * An Object-specific version of [`map`](#map). The function is applied to three\n * arguments: *(value, key, obj)*. If only the value is significant, use\n * [`map`](#map) instead.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig ((*, String, Object) -> *) -> Object -> Object\n * @param {Function} fn\n * @param {Object} obj\n * @return {Object}\n * @see R.map\n * @example\n *\n *      const xyz = { x: 1, y: 2, z: 3 };\n *      const prependKeyAndDouble = (num, key, obj) => key + (num * 2);\n *\n *      R.mapObjIndexed(prependKeyAndDouble, xyz); //=> { x: 'x2', y: 'y4', z: 'z6' }\n */\nvar mapObjIndexed = /*#__PURE__*/_curry2(function mapObjIndexed(fn, obj) {\n  return _arrayReduce(function (acc, key) {\n    acc[key] = fn(obj[key], key, obj);\n    return acc;\n  }, {}, keys(obj));\n});\nexport default mapObjIndexed;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Tests a regular expression against a String. Note that this function will\n * return an empty array when there are no matches. This differs from\n * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n * which returns `null` when there are no matches.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig RegExp -> String -> [String | Undefined]\n * @param {RegExp} rx A regular expression.\n * @param {String} str The string to match against\n * @return {Array} The list of matches or empty array.\n * @see R.test\n * @example\n *\n *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n *      R.match(/a/, 'b'); //=> []\n *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n */\nvar match = /*#__PURE__*/_curry2(function match(rx, str) {\n  return str.match(rx) || [];\n});\nexport default match;", "import _curry2 from \"./internal/_curry2.js\";\nimport _isInteger from \"./internal/_isInteger.js\";\n\n/**\n * `mathMod` behaves like the modulo operator should mathematically, unlike the\n * `%` operator (and by extension, [`R.modulo`](#modulo)). So while\n * `-17 % 5` is `-2`, `mathMod(-17, 5)` is `3`. `mathMod` requires Integer\n * arguments, and returns NaN when the modulus is zero or negative.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} m The dividend.\n * @param {Number} p the modulus.\n * @return {Number} The result of `b mod a`.\n * @see R.modulo\n * @example\n *\n *      R.mathMod(-17, 5);  //=> 3\n *      R.mathMod(17, 5);   //=> 2\n *      R.mathMod(17, -5);  //=> NaN\n *      R.mathMod(17, 0);   //=> NaN\n *      R.mathMod(17.2, 5); //=> NaN\n *      R.mathMod(17, 5.3); //=> NaN\n *\n *      const clock = R.mathMod(R.__, 12);\n *      clock(15); //=> 3\n *      clock(24); //=> 0\n *\n *      const seventeenMod = R.mathMod(17);\n *      seventeenMod(3);  //=> 2\n *      seventeenMod(4);  //=> 1\n *      seventeenMod(10); //=> 7\n */\nvar mathMod = /*#__PURE__*/_curry2(function mathMod(m, p) {\n  if (!_isInteger(m)) {\n    return NaN;\n  }\n  if (!_isInteger(p) || p < 1) {\n    return NaN;\n  }\n  return (m % p + p) % p;\n});\nexport default mathMod;", "import _curry3 from \"./internal/_curry3.js\";\nimport max from \"./max.js\";\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * larger result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.max, R.minBy\n * @example\n *\n *      //  square :: Number -> Number\n *      const square = n => n * n;\n *\n *      R.maxBy(square, -3, 2); //=> -3\n *\n *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5\n *      R.reduce(R.maxBy(square), 0, []); //=> 0\n */\nvar maxBy = /*#__PURE__*/_curry3(function maxBy(f, a, b) {\n  var resultB = f(b);\n  return max(f(a), resultB) === resultB ? b : a;\n});\nexport default maxBy;", "import add from \"./add.js\";\nimport reduce from \"./reduce.js\";\n\n/**\n * Adds together all the elements of a list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list An array of numbers\n * @return {Number} The sum of all the numbers in the list.\n * @see R.reduce\n * @example\n *\n *      R.sum([2,4,6,8,100,1]); //=> 121\n */\nvar sum = /*#__PURE__*/reduce(add, 0);\nexport default sum;", "import _curry1 from \"./internal/_curry1.js\";\nimport sum from \"./sum.js\";\n\n/**\n * Returns the mean of the given list of numbers.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list\n * @return {Number}\n * @see R.median\n * @example\n *\n *      R.mean([2, 7, 9]); //=> 6\n *      R.mean([]); //=> NaN\n */\nvar mean = /*#__PURE__*/_curry1(function mean(list) {\n  return sum(list) / list.length;\n});\nexport default mean;", "import _curry1 from \"./internal/_curry1.js\";\nimport mean from \"./mean.js\";\n\n/**\n * Returns the median of the given list of numbers.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list\n * @return {Number}\n * @see R.mean\n * @example\n *\n *      R.median([2, 9, 7]); //=> 7\n *      R.median([7, 2, 10, 9]); //=> 8\n *      R.median([]); //=> NaN\n */\nvar median = /*#__PURE__*/_curry1(function median(list) {\n  var len = list.length;\n  if (len === 0) {\n    return NaN;\n  }\n  var width = 2 - len % 2;\n  var idx = (len - width) / 2;\n  return mean(Array.prototype.slice.call(list, 0).sort(function (a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n  }).slice(idx, idx + width));\n});\nexport default median;", "import _arity from \"./internal/_arity.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport _has from \"./internal/_has.js\";\n\n/**\n * Takes a string-returning function `keyGen` and a function `fn` and returns\n * a new function that returns cached results for subsequent\n * calls with the same arguments.\n *\n * When the function is invoked, `keyGen` is applied to the same arguments\n * and its result becomes the cache key. If the cache contains something\n * under that key, the function simply returns it and does not invoke `fn` at all.\n *\n * Otherwise `fn` is applied to the same arguments and its return value\n * is cached under that key and returned by the function.\n *\n * Care must be taken when implementing `keyGen` to avoid key collision,\n * or if tracking references, memory leaks and mutating arguments.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Function\n * @sig (*... -> String) -> (*... -> a) -> (*... -> a)\n * @param {Function} keyGen The function to generate the cache key.\n * @param {Function} fn The function to memoize.\n * @return {Function} Memoized version of `fn`.\n * @example\n *      const withAge = memoizeWith(o => `${o.birth}/${o.death}`, ({birth, death}) => {\n *      //                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^\n *      //                          keyGen                        fn\n *        console.log(`computing age for ${birth}/${death}`);\n *        return ({birth, death, age: death - birth});\n *      });\n *\n *      withAge({birth: 1921, death: 1999});\n *      //=> LOG: computing age for 1921/1999\n *      //=> {birth: 1921, death: 1999, age: 78} (returned from fn)\n *\n *      withAge({birth: 1921, death: 1999});\n *      //=> {birth: 1921, death: 1999, age: 78} (returned from cache)\n */\nvar memoizeWith = /*#__PURE__*/_curry2(function memoizeWith(keyGen, fn) {\n  var cache = {};\n  return _arity(fn.length, function () {\n    var key = keyGen.apply(this, arguments);\n    if (!_has(key, cache)) {\n      cache[key] = fn.apply(this, arguments);\n    }\n    return cache[key];\n  });\n});\nexport default memoizeWith;", "import _objectAssign from \"./internal/_objectAssign.js\";\nimport _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Creates one new object with the own properties from a list of objects.\n * If a key exists in more than one object, the value from the last\n * object it exists in will be used.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig [{k: v}] -> {k: v}\n * @param {Array} list An array of objects\n * @return {Object} A merged object.\n * @see R.reduce\n * @example\n *\n *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}\n * @symb R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }\n */\nvar mergeAll = /*#__PURE__*/_curry1(function mergeAll(list) {\n  return _objectAssign.apply(null, [{}].concat(list));\n});\nexport default mergeAll;", "import _curry3 from \"./internal/_curry3.js\";\nimport _has from \"./internal/_has.js\";\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the key\n * and the values associated with the key in each object, with the result being\n * used as the value associated with the key in the returned object.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepWithKey, R.merge, R.mergeWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeWithKey(concatValues,\n *                     { a: true, thing: 'foo', values: [10, 20] },\n *                     { b: true, thing: 'bar', values: [15, 35] });\n *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }\n */\nvar mergeWithKey = /*#__PURE__*/_curry3(function mergeWithKey(fn, l, r) {\n  var result = {};\n  var k;\n  l = l || {};\n  r = r || {};\n  for (k in l) {\n    if (_has(k, l)) {\n      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n    }\n  }\n  for (k in r) {\n    if (_has(k, r) && !_has(k, result)) {\n      result[k] = r[k];\n    }\n  }\n  return result;\n});\nexport default mergeWithKey;", "import _curry3 from \"./internal/_curry3.js\";\nimport _isObject from \"./internal/_isObject.js\";\nimport mergeWithKey from \"./mergeWithKey.js\";\n\n/**\n * Creates a new object with the own properties of the two provided objects.\n * If a key exists in both objects:\n * - and both associated values are also objects then the values will be\n *   recursively merged.\n * - otherwise the provided function is applied to the key and associated values\n *   using the resulting value as the new value associated with the key.\n * If a key only exists in one object, the value will be associated with the key\n * of the resulting object.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.mergeWithKey, R.mergeDeepWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeDeepWithKey(concatValues,\n *                         { a: true, c: { thing: 'foo', values: [10, 20] }},\n *                         { b: true, c: { thing: 'bar', values: [15, 35] }});\n *      //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}\n */\nvar mergeDeepWithKey = /*#__PURE__*/_curry3(function mergeDeepWithKey(fn, lObj, rObj) {\n  return mergeWithKey(function (k, lVal, rVal) {\n    if (_isObject(lVal) && _isObject(rVal)) {\n      return mergeDeepWithKey(fn, lVal, rVal);\n    } else {\n      return fn(k, lVal, rVal);\n    }\n  }, lObj, rObj);\n});\nexport default mergeDeepWithKey;", "import _curry2 from \"./internal/_curry2.js\";\nimport mergeDeepWithKey from \"./mergeDeepWithKey.js\";\n\n/**\n * Creates a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects:\n * - and both values are objects, the two values will be recursively merged\n * - otherwise the value from the first object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig {a} -> {a} -> {a}\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.merge, R.mergeDeepRight, R.mergeDeepWith, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepLeft({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\n *                      { age: 40, contact: { email: 'baa@example.com' }});\n *      //=> { name: 'fred', age: 10, contact: { email: 'moo@example.com' }}\n */\nvar mergeDeepLeft = /*#__PURE__*/_curry2(function mergeDeepLeft(lObj, rObj) {\n  return mergeDeepWithKey(function (k, lVal, rVal) {\n    return lVal;\n  }, lObj, rObj);\n});\nexport default mergeDeepLeft;", "import _curry2 from \"./internal/_curry2.js\";\nimport mergeDeepWithKey from \"./mergeDeepWithKey.js\";\n\n/**\n * Creates a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects:\n * - and both values are objects, the two values will be recursively merged\n * - otherwise the value from the second object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig {a} -> {a} -> {a}\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.merge, R.mergeDeepLeft, R.mergeDeepWith, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepRight({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\n *                       { age: 40, contact: { email: 'baa@example.com' }});\n *      //=> { name: 'fred', age: 40, contact: { email: 'baa@example.com' }}\n */\nvar mergeDeepRight = /*#__PURE__*/_curry2(function mergeDeepRight(lObj, rObj) {\n  return mergeDeepWithKey(function (k, lVal, rVal) {\n    return rVal;\n  }, lObj, rObj);\n});\nexport default mergeDeepRight;", "import _curry3 from \"./internal/_curry3.js\";\nimport mergeDeepWithKey from \"./mergeDeepWithKey.js\";\n\n/**\n * Creates a new object with the own properties of the two provided objects.\n * If a key exists in both objects:\n * - and both associated values are also objects then the values will be\n *   recursively merged.\n * - otherwise the provided function is applied to associated values using the\n *   resulting value as the new value associated with the key.\n * If a key only exists in one object, the value will be associated with the key\n * of the resulting object.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig ((a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.mergeWith, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepWith(R.concat,\n *                      { a: true, c: { values: [10, 20] }},\n *                      { b: true, c: { values: [15, 35] }});\n *      //=> { a: true, b: true, c: { values: [10, 20, 15, 35] }}\n */\nvar mergeDeepWith = /*#__PURE__*/_curry3(function mergeDeepWith(fn, lObj, rObj) {\n  return mergeDeepWithKey(function (k, lVal, rVal) {\n    return fn(lVal, rVal);\n  }, lObj, rObj);\n});\nexport default mergeDeepWith;", "import _objectAssign from \"./internal/_objectAssign.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Create a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects,\n * the value from the first object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Object\n * @sig {k: v} -> {k: v} -> {k: v}\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeRight, R.mergeDeepLeft, R.mergeWith, R.mergeWithKey\n * @example\n *\n *      R.mergeLeft({ 'age': 40 }, { 'name': 'fred', 'age': 10 });\n *      //=> { 'name': 'fred', 'age': 40 }\n *\n *      const resetToDefault = R.mergeLeft({x: 0});\n *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n * @symb R.mergeLeft(a, b) = {...b, ...a}\n */\nvar mergeLeft = /*#__PURE__*/_curry2(function mergeLeft(l, r) {\n  return _objectAssign({}, r, l);\n});\nexport default mergeLeft;", "import _objectAssign from \"./internal/_objectAssign.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Create a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects,\n * the value from the second object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Object\n * @sig {k: v} -> {k: v} -> {k: v}\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeLeft, R.mergeDeepRight, R.mergeWith, R.mergeWithKey\n * @example\n *\n *      R.mergeRight({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n *      //=> { 'name': 'fred', 'age': 40 }\n *\n *      const withDefaults = R.mergeRight({x: 0, y: 0});\n *      withDefaults({y: 2}); //=> {x: 0, y: 2}\n * @symb R.mergeRight(a, b) = {...a, ...b}\n */\nvar mergeRight = /*#__PURE__*/_curry2(function mergeRight(l, r) {\n  return _objectAssign({}, l, r);\n});\nexport default mergeRight;", "import _curry3 from \"./internal/_curry3.js\";\nimport mergeWithKey from \"./mergeWithKey.js\";\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the values\n * associated with the key in each object, with the result being used as the\n * value associated with the key in the returned object.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig ((a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepWith, R.merge, R.mergeWithKey\n * @example\n *\n *      R.mergeWith(R.concat,\n *                  { a: true, values: [10, 20] },\n *                  { b: true, values: [15, 35] });\n *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n */\nvar mergeWith = /*#__PURE__*/_curry3(function mergeWith(fn, l, r) {\n  return mergeWithKey(function (_, _l, _r) {\n    return fn(_l, _r);\n  }, l, r);\n});\nexport default mergeWith;", "import _curry2 from \"./internal/_curry2.js\";\nimport toString from \"./toString.js\";\n\n/**\n * Returns the smaller of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.minBy, R.max\n * @example\n *\n *      R.min(789, 123); //=> 123\n *      R.min('a', 'b'); //=> 'a'\n */\nvar min = /*#__PURE__*/_curry2(function min(a, b) {\n  if (a === b) {\n    return a;\n  }\n  function safeMin(x, y) {\n    if (x < y !== y < x) {\n      return y < x ? y : x;\n    }\n    return undefined;\n  }\n  var minByValue = safeMin(a, b);\n  if (minByValue !== undefined) {\n    return minByValue;\n  }\n  var minByType = safeMin(typeof a, typeof b);\n  if (minByType !== undefined) {\n    return minByType === typeof a ? a : b;\n  }\n  var stringA = toString(a);\n  var minByStringValue = safeMin(stringA, toString(b));\n  if (minByStringValue !== undefined) {\n    return minByStringValue === stringA ? a : b;\n  }\n  return a;\n});\nexport default min;", "import _curry3 from \"./internal/_curry3.js\";\nimport min from \"./min.js\";\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * smaller result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.min, R.maxBy\n * @example\n *\n *      //  square :: Number -> Number\n *      const square = n => n * n;\n *\n *      R.minBy(square, -3, 2); //=> 2\n *\n *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n */\nvar minBy = /*#__PURE__*/_curry3(function minBy(f, a, b) {\n  var resultB = f(b);\n  return min(f(a), resultB) === resultB ? b : a;\n});\nexport default minBy;", "import _isArray from \"./_isArray.js\";\nimport _isInteger from \"./_isInteger.js\";\n\n/**\n * Makes a shallow clone of an object, applying the given fn to the specified\n * property with the given value. Note that this copies and flattens prototype\n * properties onto the new object as well. All non-primitive properties are\n * copied by reference.\n *\n * @private\n * @param {String|Number} prop The property name to set\n * @param {Function} fn The function to apply to the property\n * @param {Object|Array} obj The object to clone\n * @return {Object|Array} A new object equivalent to the original except for the changed property.\n */\nexport default function _modify(prop, fn, obj) {\n  if (_isInteger(prop) && _isArray(obj)) {\n    var arr = [].concat(obj);\n    arr[prop] = fn(arr[prop]);\n    return arr;\n  }\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  result[prop] = fn(result[prop]);\n  return result;\n}", "import _curry3 from \"./internal/_curry3.js\";\nimport _isArray from \"./internal/_isArray.js\";\nimport _isObject from \"./internal/_isObject.js\";\nimport _has from \"./internal/_has.js\";\nimport _assoc from \"./internal/_assoc.js\";\nimport _modify from \"./internal/_modify.js\";\n\n/**\n * Creates a shallow clone of the passed object by applying an `fn` function\n * to the value at the given path.\n *\n * The function will not be invoked, and the object will not change\n * if its corresponding path does not exist in the object.\n * All non-primitive properties are copied to the new object by reference.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Object\n * @sig [Idx] -> (v -> v) -> {k: v} -> {k: v}\n * @param {Array} path The path to be modified.\n * @param {Function} fn The function to apply to the path.\n * @param {Object} object The object to be transformed.\n * @return {Object} The transformed object.\n * @example\n *\n *      const person = {name: 'James', address: { zipCode: '90216' }};\n *      R.modifyPath(['address', 'zipCode'], R.reverse, person); //=> {name: 'James', address: { zipCode: '61209' }}\n *\n *      // Can handle arrays too\n *      const person = {name: 'James', addresses: [{ zipCode: '90216' }]};\n *      R.modifyPath(['addresses', 0, 'zipCode'], R.reverse, person); //=> {name: 'James', addresses: [{ zipCode: '61209' }]}\n */\nvar modifyPath = /*#__PURE__*/_curry3(function modifyPath(path, fn, object) {\n  if (!_isObject(object) && !_isArray(object)) {\n    return object;\n  }\n  if (path.length === 0) {\n    return fn(object);\n  }\n  var idx = path[0];\n  if (!_has(idx, object)) {\n    return object;\n  }\n  if (path.length === 1) {\n    return _modify(idx, fn, object);\n  }\n  var val = modifyPath(Array.prototype.slice.call(path, 1), fn, object[idx]);\n  if (val === object[idx]) {\n    return object;\n  }\n  return _assoc(idx, val, object);\n});\nexport default modifyPath;", "import _curry3 from \"./internal/_curry3.js\";\nimport modifyPath from \"./modifyPath.js\";\n\n/**\n * Creates a copy of the passed object by applying an `fn` function to the given `prop` property.\n *\n * The function will not be invoked, and the object will not change\n * if its corresponding property does not exist in the object.\n * All non-primitive properties are copied to the new object by reference.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Object\n * @sig Idx -> (v -> v) -> {k: v} -> {k: v}\n * @param {String|Number} prop The property to be modified.\n * @param {Function} fn The function to apply to the property.\n * @param {Object} object The object to be transformed.\n * @return {Object} The transformed object.\n * @example\n *\n *      const person = {name: 'James', age: 20, pets: ['dog', 'cat']};\n *      R.modify('age', R.add(1), person); //=> {name: 'James', age: 21, pets: ['dog', 'cat']}\n *      R.modify('pets', R.append('turtle'), person); //=> {name: 'James', age: 20, pets: ['dog', 'cat', 'turtle']}\n */\nvar modify = /*#__PURE__*/_curry3(function modify(prop, fn, object) {\n  return modifyPath([prop], fn, object);\n});\nexport default modify;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Divides the first parameter by the second and returns the remainder. Note\n * that this function preserves the JavaScript-style behavior for modulo. For\n * mathematical modulo see [`mathMod`](#mathMod).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The value to the divide.\n * @param {Number} b The pseudo-modulus\n * @return {Number} The result of `b % a`.\n * @see R.mathMod\n * @example\n *\n *      R.modulo(17, 3); //=> 2\n *      // JS behavior:\n *      R.modulo(-17, 3); //=> -2\n *      R.modulo(17, -3); //=> 2\n *\n *      const isOdd = R.modulo(R.__, 2);\n *      isOdd(42); //=> 0\n *      isOdd(21); //=> 1\n */\nvar modulo = /*#__PURE__*/_curry2(function modulo(a, b) {\n  return a % b;\n});\nexport default modulo;", "import _curry3 from \"./internal/_curry3.js\";\n\n/**\n * Move an item, at index `from`, to index `to`, in a list of elements.\n * A new list will be created containing the new elements order.\n *\n * @func\n * @memberOf R\n * @since v0.27.1\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {Number} from The source index\n * @param {Number} to The destination index\n * @param {Array} list The list which will serve to realise the move\n * @return {Array} The new list reordered\n * @example\n *\n *      R.move(0, 2, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['b', 'c', 'a', 'd', 'e', 'f']\n *      R.move(-1, 0, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['f', 'a', 'b', 'c', 'd', 'e'] list rotation\n */\nvar move = /*#__PURE__*/_curry3(function (from, to, list) {\n  var length = list.length;\n  var result = list.slice();\n  var positiveFrom = from < 0 ? length + from : from;\n  var positiveTo = to < 0 ? length + to : to;\n  var item = result.splice(positiveFrom, 1);\n  return positiveFrom < 0 || positiveFrom >= list.length || positiveTo < 0 || positiveTo >= list.length ? list : [].concat(result.slice(0, positiveTo)).concat(item).concat(result.slice(positiveTo, list.length));\n});\nexport default move;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Multiplies two numbers. Equivalent to `a * b` but curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a * b`.\n * @see R.divide\n * @example\n *\n *      const double = R.multiply(2);\n *      const triple = R.multiply(3);\n *      double(3);       //=>  6\n *      triple(4);       //=> 12\n *      R.multiply(2, 5);  //=> 10\n */\nvar multiply = /*#__PURE__*/_curry2(function multiply(a, b) {\n  return a * b;\n});\nexport default multiply;", "import mergeDeepRight from \"./mergeDeepRight.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Takes a function `f` and an object, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the object\n * provided initially merged deeply (right) with the object provided as an argument to `g`.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Function\n * @sig (({ a, b, c, ..., n }) -> x) -> { a, b, c, ...} -> ({ d, e, f, ..., n } -> x)\n * @param {Function} f\n * @param {Object} props\n * @return {Function}\n * @see R.partial, R.partialRight, R.curry, R.mergeDeepRight\n * @example\n *\n *      const multiply2 = ({ a, b }) => a * b;\n *      const double = R.partialObject(multiply2, { a: 2 });\n *      double({ b: 2 }); //=> 4\n *\n *      const greet = ({ salutation, title, firstName, lastName }) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      const sayHello = R.partialObject(greet, { salutation: 'Hello' });\n *      const sayHelloToMs = R.partialObject(sayHello, { title: 'Ms.' });\n *      sayHelloToMs({ firstName: 'Jane', lastName: 'Jones' }); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partialObject(f, { a, b })({ c, d }) = f({ a, b, c, d })\n */\nvar partialObject = /*#__PURE__*/_curry2((f, o) => props => f.call(this, mergeDeepRight(o, props)));\nexport default partialObject;", "import _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Negates its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number}\n * @example\n *\n *      R.negate(42); //=> -42\n */\nvar negate = /*#__PURE__*/_curry1(function negate(n) {\n  return -n;\n});\nexport default negate;", "import _complement from \"./internal/_complement.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport all from \"./all.js\";\n\n/**\n * Returns `true` if no elements of the list match the predicate, `false`\n * otherwise.\n *\n * Dispatches to the `all` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.\n * @see R.all, R.any\n * @example\n *\n *      const isEven = n => n % 2 === 0;\n *      const isOdd = n => n % 2 !== 0;\n *\n *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true\n *      R.none(isOdd, [1, 3, 5, 7, 8, 11]); //=> false\n */\nvar none = /*#__PURE__*/_curry2(function none(fn, input) {\n  return all(_complement(fn), input);\n});\nexport default none;", "import _curry2 from \"./internal/_curry2.js\";\nimport _nth from \"./internal/_nth.js\";\n\n/**\n * Returns the nth element of the given list or string. If n is negative the\n * element at index length + n is returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> a | Undefined\n * @sig Number -> String -> String | Undefined\n * @param {Number} offset\n * @param {*} list\n * @return {*}\n * @example\n *\n *      const list = ['foo', 'bar', 'baz', 'quux'];\n *      R.nth(1, list); //=> 'bar'\n *      R.nth(-1, list); //=> 'quux'\n *      R.nth(-99, list); //=> undefined\n *\n *      R.nth(2, 'abc'); //=> 'c'\n *      R.nth(3, 'abc'); //=> undefined\n * @symb R.nth(-1, [a, b, c]) = c\n * @symb R.nth(0, [a, b, c]) = a\n * @symb R.nth(1, [a, b, c]) = b\n */\nvar nth = /*#__PURE__*/_curry2(_nth);\nexport default nth;", "import _curry1 from \"./internal/_curry1.js\";\nimport _nth from \"./internal/_nth.js\";\nimport curryN from \"./curryN.js\";\n\n/**\n * Returns a function which returns its nth argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig Number -> *... -> *\n * @param {Number} n\n * @return {Function}\n * @example\n *\n *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'\n *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'\n * @symb R.nthArg(-1)(a, b, c) = c\n * @symb R.nthArg(0)(a, b, c) = a\n * @symb R.nthArg(1)(a, b, c) = b\n */\nvar nthArg = /*#__PURE__*/_curry1(function nthArg(n) {\n  var arity = n < 0 ? 1 : n + 1;\n  return curryN(arity, function () {\n    return _nth(n, arguments);\n  });\n});\nexport default nthArg;", "import _curry3 from \"./internal/_curry3.js\";\n\n/**\n * `o` is a curried composition function that returns a unary function.\n * Like [`compose`](#compose), `o` performs right-to-left function composition.\n * Unlike [`compose`](#compose), the rightmost function passed to `o` will be\n * invoked with only one argument. Also, unlike [`compose`](#compose), `o` is\n * limited to accepting only 2 unary functions. The name o was chosen because\n * of its similarity to the mathematical composition operator ∘.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Function\n * @sig (b -> c) -> (a -> b) -> a -> c\n * @param {Function} f\n * @param {Function} g\n * @return {Function}\n * @see R.compose, R.pipe\n * @example\n *\n *      const classyGreeting = name => \"The name's \" + name.last + \", \" + name.first + \" \" + name.last\n *      const yellGreeting = R.o(R.toUpper, classyGreeting);\n *      yellGreeting({first: 'James', last: 'Bond'}); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.o(R.multiply(10), R.add(10))(-4) //=> 60\n *\n * @symb R.o(f, g, x) = f(g(x))\n */\nvar o = /*#__PURE__*/_curry3(function o(f, g, x) {\n  return f(g(x));\n});\nexport default o;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Given a constructor and a value, returns a new instance of that constructor\n * containing the value.\n *\n * Dispatches to the `fantasy-land/of` method of the constructor first (if present)\n * or to the `of` method last (if present). When neither are present, wraps the\n * value in an array.\n *\n * Note this `of` is different from the ES6 `of`; See\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig (* -> {*}) -> a -> {a}\n * @param {Object} Ctor A constructor\n * @param {*} val any value\n * @return {*} An instance of the `Ctor` wrapping `val`.\n * @example\n *\n *      R.of(Array, 42);   //=> [42]\n *      R.of(Array, [42]); //=> [[42]]\n *      R.of(Maybe, 42);   //=> Maybe.Just(42)\n */\nvar of = /*#__PURE__*/_curry2(function of(Ctor, val) {\n  return typeof Ctor['fantasy-land/of'] === 'function' ? Ctor['fantasy-land/of'](val) : typeof Ctor.of === 'function' ? Ctor.of(val) : [val];\n});\nexport default of;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Returns a partial copy of an object omitting the keys specified.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [String] -> {String: *} -> {String: *}\n * @param {Array} names an array of String property names to omit from the new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with properties from `names` not on it.\n * @see R.pick\n * @example\n *\n *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n */\nvar omit = /*#__PURE__*/_curry2(function omit(names, obj) {\n  var result = {};\n  var index = {};\n  var idx = 0;\n  var len = names.length;\n  while (idx < len) {\n    index[names[idx]] = 1;\n    idx += 1;\n  }\n  for (var prop in obj) {\n    if (!index.hasOwnProperty(prop)) {\n      result[prop] = obj[prop];\n    }\n  }\n  return result;\n});\nexport default omit;", "import curryN from \"./internal/_curryN.js\";\n\n/**\n * Takes a binary function `f`, a unary function `g`, and two values.\n * Applies `g` to each value, then applies the result of each to `f`.\n *\n * Also known as the P combinator.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Function\n * @sig ((a, a) -> b) -> (c -> a) -> c -> c -> b\n * @param {Function} f a binary function\n * @param {Function} g a unary function\n * @param {any} a any value\n * @param {any} b any value\n * @return {any} The result of `f`\n * @example\n *\n *      const eqBy = R.on((a, b) => a === b);\n *      eqBy(R.prop('a'), {b:0, a:1}, {a:1}) //=> true;\n *\n *      const containsInsensitive = R.on(R.includes, R.toLower);\n *      containsInsensitive('o', 'FOO'); //=> true\n * @symb R.on(f, g, a, b) = f(g(a), g(b))\n */\nvar on = /*#__PURE__*/curryN(4, [], function on(f, g, a, b) {\n  return f(g(a), g(b));\n});\nexport default on;", "import _arity from \"./internal/_arity.js\";\nimport _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Accepts a function `fn` and returns a function that guards invocation of\n * `fn` such that `fn` can only ever be called once, no matter how many times\n * the returned function is invoked. The first value calculated is returned in\n * subsequent invocations.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a... -> b) -> (a... -> b)\n * @param {Function} fn The function to wrap in a call-only-once wrapper.\n * @return {Function} The wrapped function.\n * @example\n *\n *      const addOneOnce = R.once(x => x + 1);\n *      addOneOnce(10); //=> 11\n *      addOneOnce(addOneOnce(50)); //=> 11\n */\nvar once = /*#__PURE__*/_curry1(function once(fn) {\n  var called = false;\n  var result;\n  return _arity(fn.length, function () {\n    if (called) {\n      return result;\n    }\n    called = true;\n    result = fn.apply(this, arguments);\n    return result;\n  });\n});\nexport default once;", "import _isFunction from \"./_isFunction.js\";\nimport _toString from \"./_toString.js\";\nexport default function _assertPromise(name, p) {\n  if (p == null || !_isFunction(p.then)) {\n    throw new TypeError('`' + name + '` expected a Promise, received ' + _toString(p, []));\n  }\n}", "import _curry2 from \"./internal/_curry2.js\";\nimport _assertPromise from \"./internal/_assertPromise.js\";\n\n/**\n * Returns the result of applying the onFailure function to the value inside\n * a failed promise. This is useful for handling rejected promises\n * inside function compositions.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Function\n * @sig (e -> b) -> (Promise e a) -> (Promise e b)\n * @sig (e -> (Promise f b)) -> (Promise e a) -> (Promise f b)\n * @param {Function} onFailure The function to apply. Can return a value or a promise of a value.\n * @param {Promise} p\n * @return {Promise} The result of calling `p.then(null, onFailure)`\n * @see R.andThen\n * @example\n *\n *      const failedFetch = id => Promise.reject('bad ID');\n *      const useDefault = () => ({ firstName: 'Bob', lastName: 'Loblaw' });\n *\n *      //recoverFromFailure :: String -> Promise ({ firstName, lastName })\n *      const recoverFromFailure = R.pipe(\n *        failedFetch,\n *        R.otherwise(useDefault),\n *        R.andThen(R.pick(['firstName', 'lastName'])),\n *      );\n *      recoverFromFailure(12345).then(console.log);\n */\nvar otherwise = /*#__PURE__*/_curry2(function otherwise(f, p) {\n  _assertPromise('otherwise', p);\n  return p.then(null, f);\n});\nexport default otherwise;", "import _curry3 from \"./internal/_curry3.js\";\n\n// `Identity` is a functor that holds a single value, where `map` simply\n// transforms the held value with the provided function.\nvar Identity = function (x) {\n  return {\n    value: x,\n    map: function (f) {\n      return Identity(f(x));\n    }\n  };\n};\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the result of applying the given function to\n * the focused value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> (a -> a) -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.view, R.set, R.lens, R.lensIndex, R.lensProp, R.lensPath\n * @example\n *\n *      const headLens = R.lensIndex(0);\n *\n *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n */\nvar over = /*#__PURE__*/_curry3(function over(lens, f, x) {\n  // The value returned by the getter function is first transformed with `f`,\n  // then set as the value of an `Identity`. This is then mapped over with the\n  // setter function of the lens.\n  return lens(function (y) {\n    return Identity(f(y));\n  })(x).value;\n});\nexport default over;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category List\n * @sig a -> b -> (a,b)\n * @param {*} fst\n * @param {*} snd\n * @return {Array}\n * @see R.objOf, R.of\n * @example\n *\n *      R.pair('foo', 'bar'); //=> ['foo', 'bar']\n */\nvar pair = /*#__PURE__*/_curry2(function pair(fst, snd) {\n  return [fst, snd];\n});\nexport default pair;", "import _arity from \"./_arity.js\";\nimport _curry2 from \"./_curry2.js\";\nexport default function _createPartialApplicator(concat) {\n  return _curry2(function (fn, args) {\n    return _arity(Math.max(0, fn.length - args.length), function () {\n      return fn.apply(this, concat(args, arguments));\n    });\n  });\n}", "import _concat from \"./internal/_concat.js\";\nimport _createPartialApplicator from \"./internal/_createPartialApplicator.js\";\n\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided initially followed by the arguments provided to `g`.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partialRight, R.curry\n * @example\n *\n *      const multiply2 = (a, b) => a * b;\n *      const double = R.partial(multiply2, [2]);\n *      double(3); //=> 6\n *\n *      const greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      const sayHello = R.partial(greet, ['Hello']);\n *      const sayHelloToMs = R.partial(sayHello, ['Ms.']);\n *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)\n */\nvar partial = /*#__PURE__*/_createPartialApplicator(_concat);\nexport default partial;", "import _concat from \"./internal/_concat.js\";\nimport _createPartialApplicator from \"./internal/_createPartialApplicator.js\";\nimport flip from \"./flip.js\";\n\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided to `g` followed by the arguments provided initially.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partial\n * @example\n *\n *      const greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      const greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n *\n *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)\n */\nvar partialRight = /*#__PURE__*/_createPartialApplicator( /*#__PURE__*/flip(_concat));\nexport default partialRight;", "import filter from \"./filter.js\";\nimport juxt from \"./juxt.js\";\nimport reject from \"./reject.js\";\n\n/**\n * Takes a predicate and a list or other `Filterable` object and returns the\n * pair of filterable objects of the same type of elements which do and do not\n * satisfy, the predicate, respectively. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\n * @param {Function} pred A predicate to determine which side the element belongs to.\n * @param {Array} filterable the list (or other filterable) to partition.\n * @return {Array} An array, containing first the subset of elements that satisfy the\n *         predicate, and second the subset of elements that do not satisfy.\n * @see R.filter, R.reject\n * @example\n *\n *      R.partition(R.includes('s'), ['sss', 'ttt', 'foo', 'bars']);\n *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n *\n *      R.partition(R.includes('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\n *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\n */\nvar partition = /*#__PURE__*/juxt([filter, reject]);\nexport default partition;", "import _curry2 from \"./internal/_curry2.js\";\nimport _path from \"./internal/_path.js\";\n\n/**\n * Retrieves the value at a given path. The nodes of the path can be arbitrary strings or non-negative integers.\n * For anything else, the value is unspecified. Integer paths are meant to index arrays, strings are meant for objects.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig [Idx] -> {a} -> a | Undefined\n * @sig Idx = String | NonNegativeInt\n * @param {Array} path The path to use.\n * @param {Object} obj The object or array to retrieve the nested property from.\n * @return {*} The data at `path`.\n * @see R.prop, R.nth, R.assocPath, R.dissocPath\n * @example\n *\n *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n *      R.path(['a', 'b', 0], {a: {b: [1, 2, 3]}}); //=> 1\n *      R.path(['a', 'b', -2], {a: {b: [1, 2, 3]}}); //=> 2\n *      R.path([2], {'2': 2}); //=> 2\n *      R.path([-2], {'-2': 'a'}); //=> undefined\n */\n\nvar path = /*#__PURE__*/_curry2(_path);\nexport default path;", "import _curry2 from \"./internal/_curry2.js\";\nimport _isInteger from \"./internal/_isInteger.js\";\nimport _nth from \"./internal/_nth.js\";\n\n/**\n * Retrieves the values at given paths of an object.\n *\n * @func\n * @memberOf R\n * @since v0.27.1\n * @category Object\n * @typedefn Idx = [String | Int | Symbol]\n * @sig [Idx] -> {a} -> [a | Undefined]\n * @param {Array} pathsArray The array of paths to be fetched.\n * @param {Object} obj The object to retrieve the nested properties from.\n * @return {Array} A list consisting of values at paths specified by \"pathsArray\".\n * @see R.path\n * @example\n *\n *      R.paths([['a', 'b'], ['p', 0, 'q']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, 3]\n *      R.paths([['a', 'b'], ['p', 'r']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, undefined]\n */\nvar paths = /*#__PURE__*/_curry2(function paths(pathsArray, obj) {\n  return pathsArray.map(function (paths) {\n    var val = obj;\n    var idx = 0;\n    var p;\n    while (idx < paths.length) {\n      if (val == null) {\n        return;\n      }\n      p = paths[idx];\n      val = _isInteger(p) ? _nth(p, val) : val[p];\n      idx += 1;\n    }\n    return val;\n  });\n});\nexport default paths;", "import _curry3 from \"./internal/_curry3.js\";\nimport _path from \"./internal/_path.js\";\nimport equals from \"./equals.js\";\n\n/**\n * Determines whether a nested path on an object has a specific value, in\n * [`R.equals`](#equals) terms. Most likely used to filter a list.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Relation\n * @typedefn Idx = String | Int | Symbol\n * @sig a -> [Idx] -> {a} -> Boolean\n * @param {*} val The value to compare the nested property with\n * @param {Array} path The path of the nested property to use\n * @param {Object} obj The object to check the nested property in\n * @return {Boolean} `true` if the value equals the nested object property,\n *         `false` otherwise.\n * @see R.whereEq, R.propEq, R.pathSatisfies, R.equals\n * @example\n *\n *      const user1 = { address: { zipCode: 90210 } };\n *      const user2 = { address: { zipCode: 55555 } };\n *      const user3 = { name: 'Bob' };\n *      const users = [ user1, user2, user3 ];\n *      const isFamous = R.pathEq(90210, ['address', 'zipCode']);\n *      R.filter(isFamous, users); //=> [ user1 ]\n */\nvar pathEq = /*#__PURE__*/_curry3(function pathEq(val, pathAr, obj) {\n  return equals(_path(pathAr, obj), val);\n});\nexport default pathEq;", "import _curry3 from \"./internal/_curry3.js\";\nimport _path from \"./internal/_path.js\";\nimport defaultTo from \"./defaultTo.js\";\n\n/**\n * If the given, non-null object has a value at the given path, returns the\n * value at that path. Otherwise returns the provided default value.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig a -> [Idx] -> {a} -> a\n * @param {*} d The default value.\n * @param {Array} p The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path` of the supplied object or the default value.\n * @example\n *\n *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n */\nvar pathOr = /*#__PURE__*/_curry3(function pathOr(d, p, obj) {\n  return defaultTo(d, _path(p, obj));\n});\nexport default pathOr;", "import _curry3 from \"./internal/_curry3.js\";\nimport _path from \"./internal/_path.js\";\n\n/**\n * Returns `true` if the specified object property at given path satisfies the\n * given predicate; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Logic\n * @typedefn Idx = String | Int | Symbol\n * @sig (a -> Boolean) -> [Idx] -> {a} -> Boolean\n * @param {Function} pred\n * @param {Array} propPath\n * @param {*} obj\n * @return {Boolean}\n * @see R.propSatisfies, R.path\n * @example\n *\n *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true\n *      R.pathSatisfies(R.is(Object), [], {x: {y: 2}}); //=> true\n */\nvar pathSatisfies = /*#__PURE__*/_curry3(function pathSatisfies(pred, propPath, obj) {\n  return pred(_path(propPath, obj));\n});\nexport default pathSatisfies;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Returns a partial copy of an object containing only the keys specified. If\n * the key does not exist, the property is ignored.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> {k: v}\n * @param {Array} names an array of String property names to copy onto a new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties from `names` on it.\n * @see R.omit, R.props\n * @example\n *\n *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n */\nvar pick = /*#__PURE__*/_curry2(function pick(names, obj) {\n  var result = {};\n  var idx = 0;\n  while (idx < names.length) {\n    if (names[idx] in obj) {\n      result[names[idx]] = obj[names[idx]];\n    }\n    idx += 1;\n  }\n  return result;\n});\nexport default pick;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Similar to `pick` except that this one includes a `key: undefined` pair for\n * properties that don't exist.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> {k: v}\n * @param {Array} names an array of String property names to copy onto a new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties from `names` on it.\n * @see R.pick\n * @example\n *\n *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}\n */\nvar pickAll = /*#__PURE__*/_curry2(function pickAll(names, obj) {\n  var result = {};\n  var idx = 0;\n  var len = names.length;\n  while (idx < len) {\n    var name = names[idx];\n    result[name] = obj[name];\n    idx += 1;\n  }\n  return result;\n});\nexport default pickAll;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Returns a partial copy of an object containing only the keys that satisfy\n * the supplied predicate.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @sig ((v, k) -> Boolean) -> {k: v} -> {k: v}\n * @param {Function} pred A predicate to determine whether or not a key\n *        should be included on the output object.\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties that satisfy `pred`\n *         on it.\n * @see R.pick, R.filter\n * @example\n *\n *      const isUpperCase = (val, key) => key.toUpperCase() === key;\n *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}\n */\nvar pickBy = /*#__PURE__*/_curry2(function pickBy(test, obj) {\n  var result = {};\n  for (var prop in obj) {\n    if (test(obj[prop], prop, obj)) {\n      result[prop] = obj[prop];\n    }\n  }\n  return result;\n});\nexport default pickBy;", "import _concat from \"./internal/_concat.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Returns a new list with the given element at the front, followed by the\n * contents of the list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The item to add to the head of the output list.\n * @param {Array} list The array to add to the tail of the output list.\n * @return {Array} A new array.\n * @see R.append\n * @example\n *\n *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n */\nvar prepend = /*#__PURE__*/_curry2(function prepend(el, list) {\n  return _concat([el], list);\n});\nexport default prepend;", "import multiply from \"./multiply.js\";\nimport reduce from \"./reduce.js\";\n\n/**\n * Multiplies together all the elements of a list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list An array of numbers\n * @return {Number} The product of all the numbers in the list.\n * @see R.reduce\n * @example\n *\n *      R.product([2,4,6,8,100,1]); //=> 38400\n */\nvar product = /*#__PURE__*/reduce(multiply, 1);\nexport default product;", "import _curry2 from \"./internal/_curry2.js\";\nimport curryN from \"./curryN.js\";\n\n/**\n * Accepts a function `fn` and a list of transformer functions and returns a\n * new curried function. When the new function is invoked, it calls the\n * function `fn` with parameters consisting of the result of calling each\n * supplied handler on successive arguments to the new function.\n *\n * If more arguments are passed to the returned function than transformer\n * functions, those arguments are passed directly to `fn` as additional\n * parameters. If you expect additional arguments that don't need to be\n * transformed, although you can ignore them, it's best to pass an identity\n * function so that the new function reports the correct arity.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} fn The function to wrap.\n * @param {Array} transformers A list of transformer functions\n * @return {Function} The wrapped function.\n * @see R.converge\n * @example\n *\n *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))\n */\nvar useWith = /*#__PURE__*/_curry2(function useWith(fn, transformers) {\n  return curryN(transformers.length, function () {\n    var args = [];\n    var idx = 0;\n    while (idx < transformers.length) {\n      args.push(transformers[idx].call(this, arguments[idx]));\n      idx += 1;\n    }\n    return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));\n  });\n});\nexport default useWith;", "import _map from \"./internal/_map.js\";\nimport identity from \"./identity.js\";\nimport pickAll from \"./pickAll.js\";\nimport useWith from \"./useWith.js\";\n\n/**\n * Reasonable analog to SQL `select` statement.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @category Relation\n * @sig [k] -> [{k: v}] -> [{k: v}]\n * @param {Array} props The property names to project\n * @param {Array} objs The objects to query\n * @return {Array} An array of objects with just the `props` properties.\n * @see R.pluck, R.props, R.prop\n * @example\n *\n *      const abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};\n *      const fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};\n *      const kids = [abby, fred];\n *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]\n */\nvar project = /*#__PURE__*/useWith(_map, [pickAll, identity]); // passing `identity` gives correct arity\nexport default project;", "export default function _promap(f, g, profunctor) {\n  return function (x) {\n    return g(profunctor(f(x)));\n  };\n}", "import _xfBase from \"./_xfBase.js\";\nimport _promap from \"./_promap.js\";\nvar XPromap = /*#__PURE__*/function () {\n  function XPromap(f, g, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.g = g;\n  }\n  XPromap.prototype['@@transducer/init'] = _xfBase.init;\n  XPromap.prototype['@@transducer/result'] = _xfBase.result;\n  XPromap.prototype['@@transducer/step'] = function (result, input) {\n    return this.xf['@@transducer/step'](result, _promap(this.f, this.g, input));\n  };\n  return XPromap;\n}();\nexport default function _xpromap(f, g) {\n  return function (xf) {\n    return new XPromap(f, g, xf);\n  };\n}", "import _curry3 from \"./internal/_curry3.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _promap from \"./internal/_promap.js\";\nimport _xpromap from \"./internal/_xpromap.js\";\n\n/**\n * Takes two functions as pre- and post- processors respectively for a third function,\n * i.e. `promap(f, g, h)(x) === g(h(f(x)))`.\n *\n * Dispatches to the `promap` method of the third argument, if present,\n * according to the [FantasyLand Profunctor spec](https://github.com/fantasyland/fantasy-land#profunctor).\n *\n * Acts as a transducer if a transformer is given in profunctor position.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Function\n * @sig (a -> b) -> (c -> d) -> (b -> c) -> (a -> d)\n * @sig Profunctor p => (a -> b) -> (c -> d) -> p b c -> p a d\n * @param {Function} f The preprocessor function, a -> b\n * @param {Function} g The postprocessor function, c -> d\n * @param {Profunctor} profunctor The profunctor instance to be promapped, e.g. b -> c\n * @return {Profunctor} The new profunctor instance, e.g. a -> d\n * @see R.transduce\n * @example\n *\n *      const decodeChar = R.promap(s => s.charCodeAt(), String.fromCharCode, R.add(-8))\n *      const decodeString = R.promap(R.split(''), R.join(''), R.map(decodeChar))\n *      decodeString(\"ziuli\") //=> \"ramda\"\n *\n * @symb R.promap(f, g, h) = x => g(h(f(x)))\n * @symb R.promap(f, g, profunctor) = profunctor.promap(f, g)\n */\nvar promap = /*#__PURE__*/_curry3( /*#__PURE__*/_dispatchable(['fantasy-land/promap', 'promap'], _xpromap, _promap));\nexport default promap;", "import _curry3 from \"./internal/_curry3.js\";\nimport prop from \"./prop.js\";\nimport equals from \"./equals.js\";\n\n/**\n * Returns `true` if the specified object property is equal, in\n * [`R.equals`](#equals) terms, to the given value; `false` otherwise.\n * You can test multiple properties with [`R.whereEq`](#whereEq),\n * and test nested path property with [`R.pathEq`](#pathEq).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig a -> String -> Object -> Boolean\n * @param {*} val The value to compare the property with\n * @param {String} name the specified object property's key\n * @param {*} obj The object to check the property in\n * @return {Boolean} `true` if the value equals the specified object property,\n *         `false` otherwise.\n * @see R.whereEq, R.pathEq, R.propSatisfies, R.equals\n * @example\n *\n *      const abby = {name: 'Abby', age: 7, hair: 'blond'};\n *      const fred = {name: 'Fred', age: 12, hair: 'brown'};\n *      const rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n *      const alois = {name: 'Alois', age: 15, disposition: 'surly'};\n *      const kids = [abby, fred, rusty, alois];\n *      const hasBrownHair = R.propEq('brown', 'hair');\n *      R.filter(hasBrownHair, kids); //=> [fred, rusty]\n */\nvar propEq = /*#__PURE__*/_curry3(function propEq(val, name, obj) {\n  return equals(val, prop(name, obj));\n});\nexport default propEq;", "import _curry3 from \"./internal/_curry3.js\";\nimport prop from \"./prop.js\";\nimport is from \"./is.js\";\n\n/**\n * Returns `true` if the specified object property is of the given type;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Type\n * @sig Type -> String -> Object -> Boolean\n * @param {Function} type\n * @param {String} name\n * @param {*} obj\n * @return {Boolean}\n * @see R.is, R.propSatisfies\n * @example\n *\n *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true\n *      R.propIs(Number, 'x', {x: 'foo'});    //=> false\n *      R.propIs(Number, 'x', {});            //=> false\n */\nvar propIs = /*#__PURE__*/_curry3(function propIs(type, name, obj) {\n  return is(type, prop(name, obj));\n});\nexport default propIs;", "import _curry3 from \"./internal/_curry3.js\";\nimport defaultTo from \"./defaultTo.js\";\nimport prop from \"./prop.js\";\n\n/**\n * Return the specified property of the given non-null object if the property\n * is present and it's value is not `null`, `undefined` or `NaN`.\n *\n * Otherwise the first argument is returned.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Object\n * @sig a -> String -> Object -> a\n * @param {*} val The default value.\n * @param {String} p The name of the property to return.\n * @param {Object} obj The object to query.\n * @return {*} The value of given property of the supplied object or the default value.\n * @example\n *\n *      const alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *      const favorite = R.prop('favoriteLibrary');\n *      const favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n *\n *      favorite(alice);  //=> undefined\n *      favoriteWithDefault(alice);  //=> 'Ramda'\n */\nvar propOr = /*#__PURE__*/_curry3(function propOr(val, p, obj) {\n  return defaultTo(val, prop(p, obj));\n});\nexport default propOr;", "import _curry3 from \"./internal/_curry3.js\";\nimport prop from \"./prop.js\";\n\n/**\n * Returns `true` if the specified object property satisfies the given\n * predicate; `false` otherwise. You can test multiple properties with\n * [`R.where`](#where).\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Logic\n * @sig (a -> Boolean) -> String -> {String: a} -> Boolean\n * @param {Function} pred\n * @param {String} name\n * @param {*} obj\n * @return {Boolean}\n * @see R.where, R.propEq, R.propIs\n * @example\n *\n *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true\n */\nvar propSatisfies = /*#__PURE__*/_curry3(function propSatisfies(pred, name, obj) {\n  return pred(prop(name, obj));\n});\nexport default propSatisfies;", "import _curry2 from \"./internal/_curry2.js\";\nimport prop from \"./prop.js\";\n\n/**\n * Acts as multiple `prop`: array of keys in, array of values out. Preserves\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> [v]\n * @param {Array} ps The property names to fetch\n * @param {Object} obj The object to query\n * @return {Array} The corresponding values or partially applied function.\n * @see R.prop, R.pluck, R.project\n * @example\n *\n *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]\n *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]\n *\n *      const fullName = R.compose(R.join(' '), R.props(['first', 'last']));\n *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'\n */\nvar props = /*#__PURE__*/_curry2(function props(ps, obj) {\n  return ps.map(function (p) {\n    return prop(p, obj);\n  });\n});\nexport default props;", "import _curry2 from \"./internal/_curry2.js\";\nimport _isNumber from \"./internal/_isNumber.js\";\n\n/**\n * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> Number -> [Number]\n * @param {Number} from The first number in the list.\n * @param {Number} to One more than the last number in the list.\n * @return {Array} The list of numbers in the set `[a, b)`.\n * @example\n *\n *      R.range(1, 5);    //=> [1, 2, 3, 4]\n *      R.range(50, 53);  //=> [50, 51, 52]\n */\nvar range = /*#__PURE__*/_curry2(function range(from, to) {\n  if (!(_isNumber(from) && _isNumber(to))) {\n    throw new TypeError('Both arguments to range must be numbers');\n  }\n  var result = Array(from < to ? to - from : 0);\n  var finish = from < 0 ? to + Math.abs(from) : to - from;\n  var idx = 0;\n  while (idx < finish) {\n    result[idx] = idx + from;\n    idx += 1;\n  }\n  return result;\n});\nexport default range;", "import _curry3 from \"./internal/_curry3.js\";\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * Similar to [`reduce`](#reduce), except moves through the input list from the\n * right to the left.\n *\n * The iterator function receives two values: *(value, acc)*, while the arguments'\n * order of `reduce`'s iterator function is *(acc, value)*. `reduceRight` may use [`reduced`](#reduced)\n * to short circuit the iteration.\n *\n * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduceRight` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n *\n * Be cautious of mutating and returning the accumulator. If you reuse it across\n * invocations, it will continue to accumulate onto the same value. The general\n * recommendation is to always return a new value. If you can't do so for\n * performance reasons, then be sure to reinitialize the accumulator on each\n * invocation.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> b) -> b -> [a] -> b\n * @param {Function} fn The iterator function. Receives two values, the current element from the array\n *        and the accumulator.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.addIndex, R.reduced\n * @example\n *\n *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2\n *      //    -               -2\n *      //   / \\              / \\\n *      //  1   -            1   3\n *      //     / \\              / \\\n *      //    2   -     ==>    2  -1\n *      //       / \\              / \\\n *      //      3   -            3   4\n *      //         / \\              / \\\n *      //        4   0            4   0\n *\n * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))\n */\nvar reduceRight = /*#__PURE__*/_curry3(function reduceRight(fn, acc, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    acc = fn(list[idx], acc);\n    if (acc && acc['@@transducer/reduced']) {\n      acc = acc['@@transducer/value'];\n      break;\n    }\n    idx -= 1;\n  }\n  return acc;\n});\nexport default reduceRight;", "import _curryN from \"./internal/_curryN.js\";\nimport _xReduce from \"./internal/_xReduce.js\";\nimport _xwrap from \"./internal/_xwrap.js\";\nimport _reduced from \"./internal/_reduced.js\";\n\n/**\n * Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating\n * through the list, successively calling the iterator function. `reduceWhile`\n * also takes a predicate that is evaluated before each step. If the predicate\n * returns `false`, it \"short-circuits\" the iteration and returns the current\n * value of the accumulator. `reduceWhile` may alternatively be short-circuited\n * via [`reduced`](#reduced).\n *\n * @func\n * @memberOf R\n * @since v0.22.0\n * @category List\n * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} pred The predicate. It is passed the accumulator and the\n *        current element.\n * @param {Function} fn The iterator function. Receives two values, the\n *        accumulator and the current element.\n * @param {*} a The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced\n * @example\n *\n *      const isOdd = (acc, x) => x % 2 !== 0;\n *      const xs = [1, 3, 5, 60, 777, 800];\n *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9\n *\n *      const ys = [2, 4, 6]\n *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111\n */\nvar reduceWhile = /*#__PURE__*/_curryN(4, [], function _reduceWhile(pred, fn, a, list) {\n  var xf = _xwrap(function (acc, x) {\n    return pred(acc, x) ? fn(acc, x) : _reduced(acc);\n  });\n  return _xReduce(xf, a, list);\n});\nexport default reduceWhile;", "import _curry1 from \"./internal/_curry1.js\";\nimport _reduced from \"./internal/_reduced.js\";\n\n/**\n * Returns a value wrapped to indicate that it is the final value of the reduce\n * and transduce functions. The returned value should be considered a black\n * box: the internal structure is not guaranteed to be stable.\n *\n * This optimization is available to the below functions:\n * - [`reduce`](#reduce)\n * - [`reduceWhile`](#reduceWhile)\n * - [`reduceBy`](#reduceBy)\n * - [`reduceRight`](#reduceRight)\n * - [`transduce`](#transduce)\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category List\n * @sig a -> *\n * @param {*} x The final value of the reduce.\n * @return {*} The wrapped value.\n * @see R.reduce, R.reduceWhile, R.reduceBy, R.reduceRight, R.transduce\n * @example\n *\n *     R.reduce(\n *       (acc, item) => item > 3 ? R.reduced(acc) : acc.concat(item),\n *       [],\n *       [1, 2, 3, 4, 5]) // [1, 2, 3]\n */\nvar reduced = /*#__PURE__*/_curry1(_reduced);\nexport default reduced;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Calls an input function `n` times, returning an array containing the results\n * of those function calls.\n *\n * `fn` is passed one argument: The current value of `n`, which begins at `0`\n * and is gradually incremented to `n - 1`.\n *\n * @func\n * @memberOf R\n * @since v0.2.3\n * @category List\n * @sig (Number -> a) -> Number -> [a]\n * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n * @return {Array} An array containing the return values of all calls to `fn`.\n * @see R.repeat\n * @example\n *\n *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n * @symb R.times(f, 0) = []\n * @symb R.times(f, 1) = [f(0)]\n * @symb R.times(f, 2) = [f(0), f(1)]\n */\nvar times = /*#__PURE__*/_curry2(function times(fn, n) {\n  var len = Number(n);\n  if (len < 0 || isNaN(len)) {\n    throw new RangeError('n must be a non-negative number');\n  }\n  var idx = 0;\n  var list = Array(len);\n  while (idx < len) {\n    list[idx] = fn(idx);\n    idx += 1;\n  }\n  return list;\n});\nexport default times;", "import _curry2 from \"./internal/_curry2.js\";\nimport always from \"./always.js\";\nimport times from \"./times.js\";\n\n/**\n * Returns a fixed list of size `n` containing a specified identical value.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig a -> n -> [a]\n * @param {*} value The value to repeat.\n * @param {Number} n The desired size of the output list.\n * @return {Array} A new array containing `n` `value`s.\n * @see R.times\n * @example\n *\n *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n *\n *      const obj = {};\n *      const repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]\n *      repeatedObjs[0] === repeatedObjs[1]; //=> true\n * @symb R.repeat(a, 0) = []\n * @symb R.repeat(a, 1) = [a]\n * @symb R.repeat(a, 2) = [a, a]\n */\nvar repeat = /*#__PURE__*/_curry2(function repeat(value, n) {\n  return times(always(value), n);\n});\nexport default repeat;", "import _curry3 from \"./internal/_curry3.js\";\n\n/**\n * Replace a substring or regex match in a string with a replacement.\n *\n * The first two parameters correspond to the parameters of the\n * `String.prototype.replace()` function, so the second parameter can also be a\n * function.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category String\n * @sig RegExp|String -> String -> String -> String\n * @param {RegExp|String} pattern A regular expression or a substring to match.\n * @param {String} replacement The string to replace the matches with.\n * @param {String} str The String to do the search and replacement in.\n * @return {String} The result.\n * @example\n *\n *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *\n *      // Use the \"g\" (global) flag to replace all occurrences:\n *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n */\nvar replace = /*#__PURE__*/_curry3(function replace(regex, replacement, str) {\n  return str.replace(regex, replacement);\n});\nexport default replace;", "import _curry3 from \"./_curry3.js\";\nimport _xfBase from \"./_xfBase.js\";\nvar tInit = '@@transducer/init';\nvar tStep = '@@transducer/step';\nvar XScan = /*#__PURE__*/function () {\n  function XScan(reducer, acc, xf) {\n    this.xf = xf;\n    this.f = reducer;\n    this.acc = acc;\n  }\n  XScan.prototype[tInit] = function () {\n    return this.xf[tStep](this.xf[tInit](), this.acc);\n  };\n  XScan.prototype['@@transducer/result'] = _xfBase.result;\n  XScan.prototype[tStep] = function (result, input) {\n    if (result['@@transducer/reduced']) {\n      return result;\n    }\n    this.acc = this.f(this.acc, input);\n    return this.xf[tStep](result, this.acc);\n  };\n  return XScan;\n}();\nvar _xscan = /*#__PURE__*/_curry3(function _xscan(reducer, acc, xf) {\n  return new XScan(reducer, acc, xf);\n});\nexport default _xscan;", "import _curry3 from \"./internal/_curry3.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xscan from \"./internal/_xscan.js\";\n\n/**\n * Scan is similar to [`reduce`](#reduce), but returns a list of successively\n * reduced values from the left.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> [a]\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {Array} A list of all intermediately reduced values.\n * @see R.reduce, R.mapAccum\n * @example\n *\n *      const numbers = [1, 2, 3, 4];\n *      const factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]\n */\nvar scan = /*#__PURE__*/_curry3( /*#__PURE__*/_dispatchable([], _xscan, function scan(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = Array(len + 1);\n  result[0] = acc;\n  while (idx < len) {\n    acc = fn(acc, list[idx]);\n    result[idx + 1] = acc;\n    idx += 1;\n  }\n  return result;\n}));\nexport default scan;", "import _curry2 from \"./internal/_curry2.js\";\nimport ap from \"./ap.js\";\nimport map from \"./map.js\";\nimport prepend from \"./prepend.js\";\nimport reduceRight from \"./reduceRight.js\";\nimport identity from \"./internal/_identity.js\";\n\n/**\n * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\n * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\n * Applicative of Traversable.\n *\n * Dispatches to the `\"fantasy-land/traverse\"` or the `traverse` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig fantasy-land/of :: TypeRep f => f ~> a -> f a\n * @sig (Applicative f, Traversable t) => TypeRep f -> t (f a) -> f (t a)\n * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\n * @param {Object|Function} TypeRepresentative with an `of` or `fantasy-land/of` method\n * @param {*} traversable\n * @return {*}\n * @see R.traverse\n * @example\n *\n *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n *\n *      R.sequence(R.of(Array), Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\n *      R.sequence(R.of(Array), Nothing());       //=> [Nothing()]\n */\nvar sequence = /*#__PURE__*/_curry2(function sequence(F, traversable) {\n  var of = typeof F['fantasy-land/of'] === 'function' ? F['fantasy-land/of'] : typeof F.of === 'function' ? F.of : F;\n  var TypeRep = {\n    'fantasy-land/of': of\n  };\n  return typeof traversable['fantasy-land/traverse'] === 'function' ? traversable['fantasy-land/traverse'](TypeRep, identity) : typeof traversable.traverse === 'function' ? traversable.traverse(TypeRep, identity) : reduceRight(function (x, acc) {\n    return ap(map(prepend, x), acc);\n  }, of([]), traversable);\n});\nexport default sequence;", "import _curry3 from \"./internal/_curry3.js\";\nimport always from \"./always.js\";\nimport over from \"./over.js\";\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the given value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> a -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.view, R.over, R.lens, R.lensIndex, R.lensProp, R.lensPath\n * @example\n *\n *      const xLens = R.lensProp('x');\n *\n *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}\n */\nvar set = /*#__PURE__*/_curry3(function set(lens, v, x) {\n  return over(lens, always(v), x);\n});\nexport default set;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Returns a copy of the list, sorted according to the comparator function,\n * which should accept two values at a time and return a negative number if the\n * first value is smaller, a positive number if it's larger, and zero if they\n * are equal. Please note that this is a **copy** of the list. It does not\n * modify the original.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, a) -> Number) -> [a] -> [a]\n * @param {Function} comparator A sorting function :: a -> b -> Int\n * @param {Array} list The list to sort\n * @return {Array} a new array with its elements sorted by the comparator function.\n * @see R.ascend, R.descend\n * @example\n *\n *      const diff = function(a, b) { return a - b; };\n *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]\n */\nvar sort = /*#__PURE__*/_curry2(function sort(comparator, list) {\n  return Array.prototype.slice.call(list, 0).sort(comparator);\n});\nexport default sort;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Sorts the list according to the supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord b => (a -> b) -> [a] -> [a]\n * @param {Function} fn\n * @param {Array} list The list to sort.\n * @return {Array} A new list sorted by the keys generated by `fn`.\n * @example\n *\n *      const sortByFirstItem = R.sortBy(R.prop(0));\n *      const pairs = [[-1, 1], [-2, 2], [-3, 3]];\n *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n *\n *      const sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\n *      const alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *      const bob = {\n *        name: 'Bob',\n *        age: -10\n *      };\n *      const clara = {\n *        name: 'clara',\n *        age: 314.159\n *      };\n *      const people = [clara, bob, alice];\n *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\n */\nvar sortBy = /*#__PURE__*/_curry2(function sortBy(fn, list) {\n  return Array.prototype.slice.call(list, 0).sort(function (a, b) {\n    var aa = fn(a);\n    var bb = fn(b);\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  });\n});\nexport default sortBy;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Sorts a list according to a list of comparators.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Relation\n * @sig [(a, a) -> Number] -> [a] -> [a]\n * @param {Array} functions A list of comparator functions.\n * @param {Array} list The list to sort.\n * @return {Array} A new list sorted according to the comarator functions.\n * @see R.ascend, R.descend\n * @example\n *\n *      const alice = {\n *        name: 'alice',\n *        age: 40\n *      };\n *      const bob = {\n *        name: 'bob',\n *        age: 30\n *      };\n *      const clara = {\n *        name: 'clara',\n *        age: 40\n *      };\n *      const people = [clara, bob, alice];\n *      const ageNameSort = R.sortWith([\n *        R.descend(R.prop('age')),\n *        R.ascend(R.prop('name'))\n *      ]);\n *      ageNameSort(people); //=> [alice, clara, bob]\n */\nvar sortWith = /*#__PURE__*/_curry2(function sortWith(fns, list) {\n  return Array.prototype.slice.call(list, 0).sort(function (a, b) {\n    var result = 0;\n    var i = 0;\n    while (result === 0 && i < fns.length) {\n      result = fns[i](a, b);\n      i += 1;\n    }\n    return result;\n  });\n});\nexport default sortWith;", "import invoker from \"./invoker.js\";\n\n/**\n * Splits a string into an array of strings based on the given\n * separator.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig (String | RegExp) -> String -> [String]\n * @param {String|RegExp} sep The pattern.\n * @param {String} str The string to separate into an array.\n * @return {Array} The array of strings from `str` separated by `sep`.\n * @see R.join\n * @example\n *\n *      const pathComponents = R.split('/');\n *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n *\n *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n */\nvar split = /*#__PURE__*/invoker(1, 'split');\nexport default split;", "import _curry2 from \"./internal/_curry2.js\";\nimport length from \"./length.js\";\nimport slice from \"./slice.js\";\n\n/**\n * Splits a given list or string at a given index.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig Number -> [a] -> [[a], [a]]\n * @sig Number -> String -> [String, String]\n * @param {Number} index The index where the array/string is split.\n * @param {Array|String} array The array/string to be split.\n * @return {Array}\n * @example\n *\n *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\n *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']\n *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']\n */\nvar splitAt = /*#__PURE__*/_curry2(function splitAt(index, array) {\n  return [slice(0, index, array), slice(index, length(array), array)];\n});\nexport default splitAt;", "import _curry2 from \"./internal/_curry2.js\";\nimport slice from \"./slice.js\";\n\n/**\n * Splits a collection into slices of the specified length.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @sig Number -> String -> [String]\n * @param {Number} n\n * @param {Array} list\n * @return {Array}\n * @example\n *\n *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n */\nvar splitEvery = /*#__PURE__*/_curry2(function splitEvery(n, list) {\n  if (n <= 0) {\n    throw new Error('First argument to splitEvery must be a positive integer');\n  }\n  var result = [];\n  var idx = 0;\n  while (idx < list.length) {\n    result.push(slice(idx, idx += n, list));\n  }\n  return result;\n});\nexport default splitEvery;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Takes a list and a predicate and returns a pair of lists with the following properties:\n *\n *  - the result of concatenating the two output lists is equivalent to the input list;\n *  - none of the elements of the first output list satisfies the predicate; and\n *  - if the second output list is non-empty, its first element satisfies the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n * @param {Function} pred The predicate that determines where the array is split.\n * @param {Array} list The array to be split.\n * @return {Array}\n * @example\n *\n *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n */\nvar splitWhen = /*#__PURE__*/_curry2(function splitWhen(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var prefix = [];\n  while (idx < len && !pred(list[idx])) {\n    prefix.push(list[idx]);\n    idx += 1;\n  }\n  return [prefix, Array.prototype.slice.call(list, idx)];\n});\nexport default splitWhen;", "import _curryN from \"./internal/_curryN.js\";\n/**\n * Splits an array into slices on every occurrence of a value.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [[a]]\n * @param {Function} pred The predicate that determines where the array is split.\n * @param {Array} list The array to be split.\n * @return {Array}\n * @example\n *\n *      R.splitWhenever(R.equals(2), [1, 2, 3, 2, 4, 5, 2, 6, 7]); //=> [[1], [3], [4, 5], [6, 7]]\n */\nvar splitWhenever = /*#__PURE__*/_curryN(2, [], function splitWhenever(pred, list) {\n  var acc = [];\n  var curr = [];\n  for (var i = 0; i < list.length; i = i + 1) {\n    if (!pred(list[i])) {\n      curr.push(list[i]);\n    }\n    if ((i < list.length - 1 && pred(list[i + 1]) || i === list.length - 1) && curr.length > 0) {\n      acc.push(curr);\n      curr = [];\n    }\n  }\n  return acc;\n});\nexport default splitWhenever;", "import _curry2 from \"./internal/_curry2.js\";\nimport equals from \"./equals.js\";\nimport take from \"./take.js\";\n\n/**\n * Checks if a list starts with the provided sublist.\n *\n * Similarly, checks if a string starts with the provided substring.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category List\n * @sig [a] -> [a] -> Boolean\n * @sig String -> String -> Boolean\n * @param {*} prefix\n * @param {*} list\n * @return {Boolean}\n * @see R.endsWith\n * @example\n *\n *      R.startsWith('a', 'abc')                //=> true\n *      R.startsWith('b', 'abc')                //=> false\n *      R.startsWith(['a'], ['a', 'b', 'c'])    //=> true\n *      R.startsWith(['b'], ['a', 'b', 'c'])    //=> false\n */\nvar startsWith = /*#__PURE__*/_curry2(function (prefix, list) {\n  return equals(take(prefix.length, list), prefix);\n});\nexport default startsWith;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Subtracts its second argument from its first argument.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a - b`.\n * @see R.add\n * @example\n *\n *      R.subtract(10, 8); //=> 2\n *\n *      const minus5 = R.subtract(R.__, 5);\n *      minus5(17); //=> 12\n *\n *      const complementaryAngle = R.subtract(90);\n *      complementaryAngle(30); //=> 60\n *      complementaryAngle(72); //=> 18\n */\nvar subtract = /*#__PURE__*/_curry2(function subtract(a, b) {\n  return Number(a) - Number(b);\n});\nexport default subtract;", "import _curry3 from \"./internal/_curry3.js\";\nimport _isArray from \"./internal/_isArray.js\";\nimport _isString from \"./internal/_isString.js\";\nimport clone from \"./clone.js\";\nvar swapObject = function (indexA, indexB, o) {\n  var copy = clone(o);\n  var properties = Object.getOwnPropertyNames(copy);\n  if (properties.includes(indexA) && properties.includes(indexB)) {\n    var tmp = copy[indexA];\n    copy[indexA] = copy[indexB];\n    copy[indexB] = tmp;\n  }\n  return copy;\n};\nvar swapList = function (indexA, indexB, list) {\n  var length = list.length;\n  var result = list.slice();\n  var positiveIndexA = indexA < 0 ? length + indexA : indexA;\n  var positiveIndexB = indexB < 0 ? length + indexB : indexB;\n  var positiveMin = Math.min(positiveIndexA, positiveIndexB);\n  var positiveMax = Math.max(positiveIndexA, positiveIndexB);\n  if (positiveIndexA < 0 || positiveIndexA > length) {\n    return result;\n  }\n  if (positiveIndexB < 0 || positiveIndexB > length) {\n    return result;\n  }\n  if (positiveIndexA === positiveIndexB) {\n    return result;\n  }\n  result = [].concat(result.slice(0, positiveMin)).concat([result[positiveMax]]).concat(result.slice(positiveMin + 1, positiveMax)).concat([result[positiveMin]]).concat(result.slice(positiveMax + 1, length));\n  return result;\n};\nvar swapString = function (indexA, indexB, s) {\n  var result = swapList(indexA, indexB, s);\n  return _isArray(result) ? result.join('') : result;\n};\n\n/**\n * Swap an item, at index `indexA` with another item, at index `indexB`, in an object or a list of elements.\n * A new result will be created containing the new elements order.\n *\n * @func\n * @memberOf R\n * @since v0.29.0\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {Number|string|Object} indexA The first index\n * @param {Number|string|Object} indexB The second index\n * @param {Array|Object} o Either the object or list which will serve to realise the swap\n * @return {Array|Object} The new object or list reordered\n * @example\n *\n *      R.swap(0, 2, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['c', 'b', 'a', 'd', 'e', 'f']\n *      R.swap(-1, 0, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['f', 'b', 'c', 'd', 'e', 'a']\n *      R.swap('a', 'b', {a: 1, b: 2}); //=> {a: 2, b: 1}\n *      R.swap(0, 2, 'foo'); //=> 'oof'\n */\nvar swap = /*#__PURE__*/_curry3(function (indexA, indexB, o) {\n  if (_isArray(o)) {\n    return swapList(indexA, indexB, o);\n  } else if (_isString(o)) {\n    return swapString(indexA, indexB, o);\n  } else {\n    return swapObject(indexA, indexB, o);\n  }\n});\nexport default swap;", "import _curry2 from \"./internal/_curry2.js\";\nimport concat from \"./concat.js\";\nimport difference from \"./difference.js\";\n\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifferenceWith, R.difference, R.differenceWith\n * @example\n *\n *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\n *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\n */\nvar symmetricDifference = /*#__PURE__*/_curry2(function symmetricDifference(list1, list2) {\n  return concat(difference(list1, list2), difference(list2, list1));\n});\nexport default symmetricDifference;", "import _curry3 from \"./internal/_curry3.js\";\nimport concat from \"./concat.js\";\nimport differenceWith from \"./differenceWith.js\";\n\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both. Duplication is determined according to the value\n * returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifference, R.difference, R.differenceWith\n * @example\n *\n *      const eqA = R.eqBy(R.prop('a'));\n *      const l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n *      const l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n */\nvar symmetricDifferenceWith = /*#__PURE__*/_curry3(function symmetricDifferenceWith(pred, list1, list2) {\n  return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));\n});\nexport default symmetricDifferenceWith;", "import _curry2 from \"./internal/_curry2.js\";\nimport slice from \"./slice.js\";\n\n/**\n * Returns a new list containing the last `n` elements of a given list, passing\n * each value to the supplied predicate function, and terminating when the\n * predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLastWhile, R.addIndex\n * @example\n *\n *      const isNotOne = x => x !== 1;\n *\n *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n *\n *      R.takeLastWhile(x => x !== 'R' , 'Ramda'); //=> 'amda'\n */\nvar takeLastWhile = /*#__PURE__*/_curry2(function takeLastWhile(fn, xs) {\n  var idx = xs.length - 1;\n  while (idx >= 0 && fn(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(idx + 1, Infinity, xs);\n});\nexport default takeLastWhile;", "import _reduced from \"./_reduced.js\";\nimport _xfBase from \"./_xfBase.js\";\nvar XTakeWhile = /*#__PURE__*/function () {\n  function XTakeWhile(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;\n  XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;\n  XTakeWhile.prototype['@@transducer/step'] = function (result, input) {\n    return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);\n  };\n  return XTakeWhile;\n}();\nexport default function _xtakeWhile(f) {\n  return function (xf) {\n    return new XTakeWhile(f, xf);\n  };\n}", "import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xtakeWhile from \"./internal/_xtakeWhile.js\";\nimport slice from \"./slice.js\";\n\n/**\n * Returns a new list containing the first `n` elements of a given list,\n * passing each value to the supplied predicate function, and terminating when\n * the predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * Dispatches to the `takeWhile` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropWhile, R.transduce, R.addIndex\n * @example\n *\n *      const isNotFour = x => x !== 4;\n *\n *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]\n *\n *      R.takeWhile(x => x !== 'd' , 'Ramda'); //=> 'Ram'\n */\nvar takeWhile = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['takeWhile'], _xtakeWhile, function takeWhile(fn, xs) {\n  var idx = 0;\n  var len = xs.length;\n  while (idx < len && fn(xs[idx])) {\n    idx += 1;\n  }\n  return slice(0, idx, xs);\n}));\nexport default takeWhile;", "import _xfBase from \"./_xfBase.js\";\nvar XTap = /*#__PURE__*/function () {\n  function XTap(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XTap.prototype['@@transducer/init'] = _xfBase.init;\n  XTap.prototype['@@transducer/result'] = _xfBase.result;\n  XTap.prototype['@@transducer/step'] = function (result, input) {\n    this.f(input);\n    return this.xf['@@transducer/step'](result, input);\n  };\n  return XTap;\n}();\nexport default function _xtap(f) {\n  return function (xf) {\n    return new XTap(f, xf);\n  };\n}", "import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xtap from \"./internal/_xtap.js\";\n\n/**\n * Runs the given function with the supplied object, then returns the object.\n *\n * Acts as a transducer if a transformer is given as second parameter.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a -> *) -> a -> a\n * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n * @param {*} x\n * @return {*} `x`.\n * @example\n *\n *      const sayX = x => console.log('x is ' + x);\n *      R.tap(sayX, 100); //=> 100\n *      // logs 'x is 100'\n * @symb R.tap(f, a) = (f(a), a)\n */\nvar tap = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xtap, function tap(fn, x) {\n  fn(x);\n  return x;\n}));\nexport default tap;", "export default function _isRegExp(x) {\n  return Object.prototype.toString.call(x) === '[object RegExp]';\n}", "import _cloneRegExp from \"./internal/_cloneRegExp.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport _isRegExp from \"./internal/_isRegExp.js\";\nimport toString from \"./toString.js\";\n\n/**\n * Determines whether a given string matches a given regular expression.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category String\n * @sig RegExp -> String -> Boolean\n * @param {RegExp} pattern\n * @param {String} str\n * @return {Boolean}\n * @see R.match\n * @example\n *\n *      R.test(/^x/, 'xyz'); //=> true\n *      R.test(/^y/, 'xyz'); //=> false\n */\nvar test = /*#__PURE__*/_curry2(function test(pattern, str) {\n  if (!_isRegExp(pattern)) {\n    throw new TypeError('‘test’ requires a value of type RegExp as its first argument; received ' + toString(pattern));\n  }\n  return _cloneRegExp(pattern).test(str);\n});\nexport default test;", "import _curry2 from \"./internal/_curry2.js\";\nimport _assertPromise from \"./internal/_assertPromise.js\";\n\n/**\n * Returns the result of applying the onSuccess function to the value inside\n * a successfully resolved promise. This is useful for working with promises\n * inside function compositions.\n *\n * @func\n * @memberOf R\n * @since v0.27.1\n * @category Function\n * @sig (a -> b) -> (Promise e a) -> (Promise e b)\n * @sig (a -> (Promise e b)) -> (Promise e a) -> (Promise e b)\n * @param {Function} onSuccess The function to apply. Can return a value or a promise of a value.\n * @param {Promise} p\n * @return {Promise} The result of calling `p.then(onSuccess)`\n * @see R.otherwise\n * @example\n *\n *      const makeQuery = email => ({ query: { email }});\n *      const fetchMember = request =>\n *        Promise.resolve({ firstName: 'Bob', lastName: 'Loblaw', id: 42 });\n *\n *      //getMemberName :: String -> Promise ({ firstName, lastName })\n *      const getMemberName = R.pipe(\n *        makeQuery,\n *        fetchMember,\n *        R.andThen(R.pick(['firstName', 'lastName']))\n *      );\n *\n *      getMemberName('bob@gmail.com').then(console.log);\n */\nvar andThen = /*#__PURE__*/_curry2(function andThen(f, p) {\n  _assertPromise('andThen', p);\n  return p.then(f);\n});\nexport default andThen;", "import invoker from \"./invoker.js\";\n\n/**\n * The lower case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to lower case.\n * @return {String} The lower case version of `str`.\n * @see R.toUpper\n * @example\n *\n *      R.toLower('XYZ'); //=> 'xyz'\n */\nvar toLower = /*#__PURE__*/invoker(0, 'toLowerCase');\nexport default toLower;", "import _curry1 from \"./internal/_curry1.js\";\nimport _has from \"./internal/_has.js\";\n\n/**\n * Converts an object into an array of key, value arrays. Only the object's\n * own properties are used.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Object\n * @sig {String: *} -> [[String,*]]\n * @param {Object} obj The object to extract from\n * @return {Array} An array of key, value arrays from the object's own properties.\n * @see R.fromPairs, R.keys, R.values\n * @example\n *\n *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]\n */\nvar toPairs = /*#__PURE__*/_curry1(function toPairs(obj) {\n  var pairs = [];\n  for (var prop in obj) {\n    if (_has(prop, obj)) {\n      pairs[pairs.length] = [prop, obj[prop]];\n    }\n  }\n  return pairs;\n});\nexport default toPairs;", "import _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Converts an object into an array of key, value arrays. The object's own\n * properties and prototype properties are used. Note that the order of the\n * output array is not guaranteed to be consistent across different JS\n * platforms.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Object\n * @sig {String: *} -> [[String,*]]\n * @param {Object} obj The object to extract from\n * @return {Array} An array of key, value arrays from the object's own\n *         and prototype properties.\n * @example\n *\n *      const F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      const f = new F();\n *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]\n */\nvar toPairsIn = /*#__PURE__*/_curry1(function toPairsIn(obj) {\n  var pairs = [];\n  for (var prop in obj) {\n    pairs[pairs.length] = [prop, obj[prop]];\n  }\n  return pairs;\n});\nexport default toPairsIn;", "import invoker from \"./invoker.js\";\n\n/**\n * The upper case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to upper case.\n * @return {String} The upper case version of `str`.\n * @see R.toLower\n * @example\n *\n *      R.toUpper('abc'); //=> 'ABC'\n */\nvar toUpper = /*#__PURE__*/invoker(0, 'toUpperCase');\nexport default toUpper;", "import _xReduce from \"./internal/_xReduce.js\";\nimport _xwrap from \"./internal/_xwrap.js\";\nimport curryN from \"./curryN.js\";\n\n/**\n * Initializes a transducer using supplied iterator function. Returns a single\n * item by iterating through the list, successively calling the transformed\n * iterator function and passing it an accumulator value and the current value\n * from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It will be\n * wrapped as a transformer to initialize the transducer. A transformer can be\n * passed directly in place of an iterator function. In both cases, iteration\n * may be stopped early with the [`R.reduced`](#reduced) function.\n *\n * A transducer is a function that accepts a transformer and returns a\n * transformer and can be composed directly.\n *\n * A transformer is an object that provides a 2-arity reducing iterator\n * function, step, 0-arity initial value function, init, and 1-arity result\n * extraction function, result. The step function is used as the iterator\n * function in reduce. The result function is used to convert the final\n * accumulator into the return type and in most cases is\n * [`R.identity`](#identity). The init function can be used to provide an\n * initial accumulator, but is ignored by transduce.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array. Wrapped as transformer, if necessary, and used to\n *        initialize the transducer\n * @param {*} acc The initial accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced, R.into\n * @example\n *\n *      const numbers = [1, 2, 3, 4];\n *      const transducer = R.compose(R.map(R.add(1)), R.take(2));\n *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n *\n *      const isOdd = (x) => x % 2 !== 0;\n *      const firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));\n *      R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]\n */\nvar transduce = /*#__PURE__*/curryN(4, function transduce(xf, fn, acc, list) {\n  return _xReduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);\n});\nexport default transduce;", "import _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Transposes the rows and columns of a 2D list.\n * When passed a list of `n` lists of length `x`,\n * returns a list of `x` lists of length `n`.\n *\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [[a]] -> [[a]]\n * @param {Array} list A 2D list\n * @return {Array} A 2D list\n * @example\n *\n *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]\n *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n *\n *      // If some of the rows are shorter than the following rows, their elements are skipped:\n *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]\n * @symb R.transpose([[a], [b], [c]]) = [a, b, c]\n * @symb R.transpose([[a, b], [c, d]]) = [[a, c], [b, d]]\n * @symb R.transpose([[a, b], [c]]) = [[a, c], [b]]\n */\nvar transpose = /*#__PURE__*/_curry1(function transpose(outerlist) {\n  var i = 0;\n  var result = [];\n  while (i < outerlist.length) {\n    var innerlist = outerlist[i];\n    var j = 0;\n    while (j < innerlist.length) {\n      if (typeof result[j] === 'undefined') {\n        result[j] = [];\n      }\n      result[j].push(innerlist[j]);\n      j += 1;\n    }\n    i += 1;\n  }\n  return result;\n});\nexport default transpose;", "import _curry3 from \"./internal/_curry3.js\";\nimport map from \"./map.js\";\nimport sequence from \"./sequence.js\";\n\n/**\n * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\n * into an Applicative of Traversable.\n *\n * Dispatches to the `traverse` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig fantasy-land/of :: TypeRep f => f ~> a -> f a\n * @sig (Applicative f, Traversable t) => TypeRep f -> (a -> f b) -> t a -> f (t b)\n * @sig (Applicative f, Traversable t) => (b -> f b) -> (a -> f b) -> t a -> f (t b)\n * @param {Object|Function} TypeRepresentative with an `of` or `fantasy-land/of` method\n * @param {Function} f\n * @param {*} traversable\n * @return {*}\n * @see R.sequence\n * @example\n *\n *      // Returns `Maybe.Nothing` if the given divisor is `0`\n *      const safeDiv = n => d => d === 0 ? Maybe.Nothing() : Maybe.Just(n / d)\n *\n *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Maybe.Just([5, 2.5, 2])\n *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Maybe.Nothing\n *\n *      // Using a Type Representative\n *      R.traverse(Maybe, safeDiv(10), Right(4)); //=> Just(Right(2.5))\n *      R.traverse(Maybe, safeDiv(10), Right(0)); //=> Nothing\n *      R.traverse(Maybe, safeDiv(10), Left(\"X\")); //=> Just(Left(\"X\"))\n */\nvar traverse = /*#__PURE__*/_curry3(function traverse(F, f, traversable) {\n  var of = typeof F['fantasy-land/of'] === 'function' ? F['fantasy-land/of'] : typeof F.of === 'function' ? F.of : F;\n  var TypeRep = {\n    'fantasy-land/of': of\n  };\n  return typeof traversable['fantasy-land/traverse'] === 'function' ? traversable['fantasy-land/traverse'](TypeRep, f) : typeof traversable.traverse === 'function' ? traversable.traverse(TypeRep, f) : sequence(TypeRep, map(f, traversable));\n});\nexport default traverse;", "import _curry1 from \"./internal/_curry1.js\";\nvar ws = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u2000\\u2001\\u2002\\u2003' + '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' + '\\u2029\\uFEFF';\nvar zeroWidth = '\\u200b';\nvar hasProtoTrim = typeof String.prototype.trim === 'function';\n/**\n * Removes (strips) whitespace from both ends of the string.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to trim.\n * @return {String} Trimmed version of `str`.\n * @example\n *\n *      R.trim('   xyz  '); //=> 'xyz'\n *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n */\nvar trim = !hasProtoTrim || /*#__PURE__*/ws.trim() || ! /*#__PURE__*/zeroWidth.trim() ? /*#__PURE__*/_curry1(function trim(str) {\n  var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n  var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n  return str.replace(beginRx, '').replace(endRx, '');\n}) : /*#__PURE__*/_curry1(function trim(str) {\n  return str.trim();\n});\nexport default trim;", "import _arity from \"./internal/_arity.js\";\nimport _concat from \"./internal/_concat.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n\n/**\n * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\n * function evaluates the `tryer`; if it does not throw, it simply returns the\n * result. If the `tryer` *does* throw, the returned function evaluates the\n * `catcher` function and returns its result. Note that for effective\n * composition with this function, both the `tryer` and `catcher` functions\n * must return the same type of results.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)\n * @param {Function} tryer The function that may throw.\n * @param {Function} catcher The function that will be evaluated if `tryer` throws.\n * @return {Function} A new function that will catch exceptions and send them to the catcher.\n * @example\n *\n *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true\n *      R.tryCatch(() => { throw 'foo'}, R.always('caught'))('bar') // =>\n *      'caught'\n *      R.tryCatch(R.times(R.identity), R.always([]))('s') // => []\n *      R.tryCatch(() => { throw 'this is not a valid value'}, (err, value)=>({error : err,  value }))('bar') // => {'error': 'this is not a valid value', 'value': 'bar'}\n */\nvar tryCatch = /*#__PURE__*/_curry2(function _tryCatch(tryer, catcher) {\n  return _arity(tryer.length, function () {\n    try {\n      return tryer.apply(this, arguments);\n    } catch (e) {\n      return catcher.apply(this, _concat([e], arguments));\n    }\n  });\n});\nexport default tryCatch;", "import _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Takes a function `fn`, which takes a single array argument, and returns a\n * function which:\n *\n *   - takes any number of positional arguments;\n *   - passes these arguments to `fn` as an array; and\n *   - returns the result.\n *\n * In other words, `R.unapply` derives a variadic function from a function which\n * takes an array. `R.unapply` is the inverse of [`R.apply`](#apply).\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Function\n * @sig ([*...] -> a) -> (*... -> a)\n * @param {Function} fn\n * @return {Function}\n * @see R.apply\n * @example\n *\n *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n * @symb R.unapply(f)(a, b) = f([a, b])\n */\nvar unapply = /*#__PURE__*/_curry1(function unapply(fn) {\n  return function () {\n    return fn(Array.prototype.slice.call(arguments, 0));\n  };\n});\nexport default unapply;", "import _curry1 from \"./internal/_curry1.js\";\nimport nAry from \"./nAry.js\";\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 1 parameter. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (a -> b -> c -> ... -> z) -> (a -> z)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 1.\n * @see R.binary, R.nAry\n * @example\n *\n *      const takesTwoArgs = function(a, b) {\n *        return [a, b];\n *      };\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      const takesOneArg = R.unary(takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only 1 argument is passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.unary(f)(a, b, c) = f(a)\n */\nvar unary = /*#__PURE__*/_curry1(function unary(fn) {\n  return nAry(1, fn);\n});\nexport default unary;", "import _curry2 from \"./internal/_curry2.js\";\nimport curryN from \"./curryN.js\";\n\n/**\n * Returns a function of arity `n` from a (manually) curried function.\n * Note that, the returned function is actually a ramda style\n * curryied function, which can accept one or more arguments in each\n * function calling.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Function\n * @sig Number -> (a -> b -> c ... -> z) -> ((a -> b -> c ...) -> z)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to uncurry.\n * @return {Function} A new function.\n * @see R.curry, R.curryN\n * @example\n *\n *      const addFour = a => b => c => d => a + b + c + d;\n *\n *      const uncurriedAddFour = R.uncurryN(4, addFour);\n *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n */\nvar uncurryN = /*#__PURE__*/_curry2(function uncurryN(depth, fn) {\n  return curryN(depth, function () {\n    var currentDepth = 1;\n    var value = fn;\n    var idx = 0;\n    var endIdx;\n    while (currentDepth <= depth && typeof value === 'function') {\n      endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n      value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));\n      currentDepth += 1;\n      idx = endIdx;\n    }\n    return value;\n  });\n});\nexport default uncurryN;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Builds a list from a seed value. Accepts an iterator function, which returns\n * either false to stop iteration or an array of length 2 containing the value\n * to add to the resulting list and the seed to be used in the next call to the\n * iterator function.\n *\n * The iterator function receives one argument: *(seed)*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (a -> [b]) -> * -> [b]\n * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n *        either false to quit iteration or an array of length two to proceed. The element\n *        at index 0 of this array will be added to the resulting array, and the element\n *        at index 1 will be passed to the next call to `fn`.\n * @param {*} seed The seed value.\n * @return {Array} The final list.\n * @example\n *\n *      const f = n => n > 50 ? false : [-n, n + 10];\n *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]\n */\nvar unfold = /*#__PURE__*/_curry2(function unfold(fn, seed) {\n  var pair = fn(seed);\n  var result = [];\n  while (pair && pair.length) {\n    result[result.length] = pair[0];\n    pair = fn(pair[1]);\n  }\n  return result;\n});\nexport default unfold;", "import _concat from \"./internal/_concat.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport compose from \"./compose.js\";\nimport uniq from \"./uniq.js\";\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} as The first list.\n * @param {Array} bs The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @example\n *\n *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n */\nvar union = /*#__PURE__*/_curry2( /*#__PURE__*/compose(uniq, _concat));\nexport default union;", "import _includesWith from \"./_includesWith.js\";\nimport _xfBase from \"./_xfBase.js\";\nvar XUniqWith = /*#__PURE__*/function () {\n  function XUniqWith(pred, xf) {\n    this.xf = xf;\n    this.pred = pred;\n    this.items = [];\n  }\n  XUniqWith.prototype['@@transducer/init'] = _xfBase.init;\n  XUniqWith.prototype['@@transducer/result'] = _xfBase.result;\n  XUniqWith.prototype['@@transducer/step'] = function (result, input) {\n    if (_includesWith(this.pred, input, this.items)) {\n      return result;\n    } else {\n      this.items.push(input);\n      return this.xf['@@transducer/step'](result, input);\n    }\n  };\n  return XUniqWith;\n}();\nexport default function _xuniqWith(pred) {\n  return function (xf) {\n    return new XUniqWith(pred, xf);\n  };\n}", "import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _includesWith from \"./internal/_includesWith.js\";\nimport _xuniqWith from \"./internal/_xuniqWith.js\";\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied predicate to\n * two list elements. Prefers the first item if two items compare equal based\n * on the predicate.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category List\n * @sig ((a, a) -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      const strEq = R.eqBy(String);\n *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\n */\nvar uniqWith = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xuniqWith, function (pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var item;\n  while (idx < len) {\n    item = list[idx];\n    if (!_includesWith(pred, item, result)) {\n      result[result.length] = item;\n    }\n    idx += 1;\n  }\n  return result;\n}));\nexport default uniqWith;", "import _concat from \"./internal/_concat.js\";\nimport _curry3 from \"./internal/_curry3.js\";\nimport uniqWith from \"./uniqWith.js\";\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list. Duplication is determined according to the value returned by\n * applying the supplied predicate to two list elements. If an element exists\n * in both lists, the first element from the first list will be used.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @see R.union\n * @example\n *\n *      const l1 = [{a: 1}, {a: 2}];\n *      const l2 = [{a: 1}, {a: 4}];\n *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n */\nvar unionWith = /*#__PURE__*/_curry3(function unionWith(pred, list1, list2) {\n  return uniqWith(pred, _concat(list1, list2));\n});\nexport default unionWith;", "import _curry3 from \"./internal/_curry3.js\";\n\n/**\n * Tests the final argument by passing it to the given predicate function. If\n * the predicate is not satisfied, the function will return the result of\n * calling the `whenFalseFn` function with the same argument. If the predicate\n * is satisfied, the argument is returned as is.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> b) -> a -> a | b\n * @param {Function} pred        A predicate function\n * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates\n *                               to a falsy value.\n * @param {*}        x           An object to test with the `pred` function and\n *                               pass to `whenFalseFn` if necessary.\n * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.\n * @see R.ifElse, R.when, R.cond\n * @example\n *\n *      let safeInc = R.unless(R.isNil, R.inc);\n *      safeInc(null); //=> null\n *      safeInc(1); //=> 2\n */\nvar unless = /*#__PURE__*/_curry3(function unless(pred, whenFalseFn, x) {\n  return pred(x) ? x : whenFalseFn(x);\n});\nexport default unless;", "import _identity from \"./internal/_identity.js\";\nimport chain from \"./chain.js\";\n\n/**\n * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from\n * any [Chain](https://github.com/fantasyland/fantasy-land#chain).\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain c => c (c a) -> c a\n * @param {*} list\n * @return {*}\n * @see R.flatten, R.chain\n * @example\n *\n *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]\n *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]\n */\nvar unnest = /*#__PURE__*/chain(_identity);\nexport default unnest;", "import _curry3 from \"./internal/_curry3.js\";\n\n/**\n * Takes a predicate, a transformation function, and an initial value,\n * and returns a value of the same type as the initial value.\n * It does so by applying the transformation until the predicate is satisfied,\n * at which point it returns the satisfactory value.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred A predicate function\n * @param {Function} fn The iterator function\n * @param {*} init Initial value\n * @return {*} Final value that satisfies predicate\n * @example\n *\n *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128\n */\nvar until = /*#__PURE__*/_curry3(function until(pred, fn, init) {\n  var val = init;\n  while (!pred(val)) {\n    val = fn(val);\n  }\n  return val;\n});\nexport default until;", "import _curry2 from \"./internal/_curry2.js\";\nimport _isArray from \"./internal/_isArray.js\";\nimport _map from \"./internal/_map.js\";\nimport _assoc from \"./internal/_assoc.js\";\n\n/**\n *\n * Deconstructs an array field from the input documents to output a document for each element.\n * Each output document is the input document with the value of the array field replaced by the element.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Object\n * @sig String -> {k: [v]} -> [{k: v}]\n * @param {String} key The key to determine which property of the object should be unwound.\n * @param {Object} object The object containing the list to unwind at the property named by the key.\n * @return {List} A list of new objects, each having the given key associated to an item from the unwound list.\n * @example\n *\n * R.unwind('hobbies', {\n *   name: 'alice',\n *   hobbies: ['Golf', 'Hacking'],\n *   colors: ['red', 'green'],\n * });\n * // [\n * //   { name: 'alice', hobbies: 'Golf', colors: ['red', 'green'] },\n * //   { name: 'alice', hobbies: 'Hacking', colors: ['red', 'green'] }\n * // ]\n */\n\nvar unwind = /*#__PURE__*/_curry2(function (key, object) {\n  // If key is not in object or key is not as a list in object\n  if (!(key in object && _isArray(object[key]))) {\n    return [object];\n  }\n  // Map over object[key] which is a list and assoc each element with key\n  return _map(function (item) {\n    return _assoc(key, item, object);\n  }, object[key]);\n});\nexport default unwind;", "import _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Returns a list of all the properties, including prototype properties, of the\n * supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @sig {k: v} -> [v]\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own and prototype properties.\n * @see R.values, R.keysIn\n * @example\n *\n *      const F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      const f = new F();\n *      R.valuesIn(f); //=> ['X', 'Y']\n */\nvar valuesIn = /*#__PURE__*/_curry1(function valuesIn(obj) {\n  var prop;\n  var vs = [];\n  for (prop in obj) {\n    vs[vs.length] = obj[prop];\n  }\n  return vs;\n});\nexport default valuesIn;", "import _curry2 from \"./internal/_curry2.js\";\n\n// `Const` is a functor that effectively ignores the function given to `map`.\nvar Const = function (x) {\n  return {\n    value: x,\n    'fantasy-land/map': function () {\n      return this;\n    }\n  };\n};\n\n/**\n * Returns a \"view\" of the given data structure, determined by the given lens.\n * The lens's focus determines which portion of the data structure is visible.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> s -> a\n * @param {Lens} lens\n * @param {*} x\n * @return {*}\n * @see R.set, R.over, R.lens, R.lensIndex, R.lensProp, R.lensPath\n * @example\n *\n *      const xLens = R.lensProp('x');\n *\n *      R.view(xLens, {x: 1, y: 2});  //=> 1\n *      R.view(xLens, {x: 4, y: 2});  //=> 4\n */\nvar view = /*#__PURE__*/_curry2(function view(lens, x) {\n  // Using `Const` effectively ignores the setter function of the `lens`,\n  // leaving the value returned by the getter function unmodified.\n  return lens(Const)(x).value;\n});\nexport default view;", "import _curry3 from \"./internal/_curry3.js\";\n\n/**\n * Tests the final argument by passing it to the given predicate function. If\n * the predicate is satisfied, the function will return the result of calling\n * the `whenTrueFn` function with the same argument. If the predicate is not\n * satisfied, the argument is returned as is.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> b) -> a -> a | b\n * @param {Function} pred       A predicate function\n * @param {Function} whenTrueFn A function to invoke when the `condition`\n *                              evaluates to a truthy value.\n * @param {*}        x          An object to test with the `pred` function and\n *                              pass to `whenTrueFn` if necessary.\n * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.\n * @see R.ifElse, R.unless, R.cond\n * @example\n *\n *      // truncate :: String -> String\n *      const truncate = R.when(\n *        R.propSatisfies(R.gt(R.__, 10), 'length'),\n *        R.pipe(R.take(10), R.append('…'), R.join(''))\n *      );\n *      truncate('12345');         //=> '12345'\n *      truncate('0123456789ABC'); //=> '0123456789…'\n */\nvar when = /*#__PURE__*/_curry3(function when(pred, whenTrueFn, x) {\n  return pred(x) ? whenTrueFn(x) : x;\n});\nexport default when;", "import _curry2 from \"./internal/_curry2.js\";\nimport _has from \"./internal/_has.js\";\n\n/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec. Each of the spec's own properties must be a predicate function.\n * Each predicate is applied to the value of the corresponding property of the\n * test object. `where` returns true if all the predicates return true, false\n * otherwise.\n *\n * `where` is well suited to declaratively expressing constraints for other\n * functions such as [`filter`](#filter) and [`find`](#find).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Object\n * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.propSatisfies, R.whereEq\n * @example\n *\n *      // pred :: Object -> Boolean\n *      const pred = R.where({\n *        a: R.equals('foo'),\n *        b: R.complement(R.equals('bar')),\n *        x: R.gt(R.__, 10),\n *        y: R.lt(R.__, 20)\n *      });\n *\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n */\nvar where = /*#__PURE__*/_curry2(function where(spec, testObj) {\n  for (var prop in spec) {\n    if (_has(prop, spec) && !spec[prop](testObj[prop])) {\n      return false;\n    }\n  }\n  return true;\n});\nexport default where;", "import _curry2 from \"./internal/_curry2.js\";\nimport _has from \"./internal/_has.js\";\n\n/**\n * Takes a spec object and a test object; each of the spec's own properties must be a predicate function.\n * Each predicate is applied to the value of the corresponding property of the\n * test object. `whereAny` returns true if at least one of the predicates return true,\n * false otherwise.\n *\n * `whereAny` is well suited to declaratively expressing constraints for other\n * functions such as [`filter`](#filter) and [`find`](#find).\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Object\n * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.propSatisfies, R.where\n * @example\n *\n *      // pred :: Object -> Boolean\n *      const pred = R.whereAny({\n *        a: R.equals('foo'),\n *        b: R.complement(R.equals('xxx')),\n *        x: R.gt(R.__, 10),\n *        y: R.lt(R.__, 20)\n *      });\n *\n *      pred({a: 'foo', b: 'xxx', x: 8, y: 34}); //=> true\n *      pred({a: 'xxx', b: 'xxx', x: 9, y: 21}); //=> false\n *      pred({a: 'bar', b: 'xxx', x: 10, y: 20}); //=> false\n *      pred({a: 'foo', b: 'bar', x: 10, y: 20}); //=> true\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> true\n */\nvar whereAny = /*#__PURE__*/_curry2(function whereAny(spec, testObj) {\n  for (var prop in spec) {\n    if (_has(prop, spec) && spec[prop](testObj[prop])) {\n      return true;\n    }\n  }\n  return false;\n});\nexport default whereAny;", "import _curry2 from \"./internal/_curry2.js\";\nimport equals from \"./equals.js\";\nimport map from \"./map.js\";\nimport where from \"./where.js\";\n\n/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec, false otherwise. An object satisfies the spec if, for each of the\n * spec's own properties, accessing that property of the object gives the same\n * value (in [`R.equals`](#equals) terms) as accessing that property of the\n * spec.\n *\n * `whereEq` is a specialization of [`where`](#where).\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @sig {String: *} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.propEq, R.where\n * @example\n *\n *      // pred :: Object -> Boolean\n *      const pred = R.whereEq({a: 1, b: 2});\n *\n *      pred({a: 1});              //=> false\n *      pred({a: 1, b: 2});        //=> true\n *      pred({a: 1, b: 2, c: 3});  //=> true\n *      pred({a: 1, b: 1});        //=> false\n */\nvar whereEq = /*#__PURE__*/_curry2(function whereEq(spec, testObj) {\n  return where(map(equals, spec), testObj);\n});\nexport default whereEq;", "import _curry2 from \"./internal/_curry2.js\";\nimport _Set from \"./internal/_Set.js\";\nimport reject from \"./reject.js\";\n\n/**\n * Returns a new list without values in the first argument.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @param {Array} list1 The values to be removed from `list2`.\n * @param {Array} list2 The array to remove values from.\n * @return {Array} The new array without values in `list1`.\n * @see R.transduce, R.difference, R.remove\n * @example\n *\n *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n */\nvar without = /*#__PURE__*/_curry2(function without(xs, list) {\n  var toRemove = new _Set();\n  for (var i = 0; i < xs.length; i += 1) {\n    toRemove.add(xs[i]);\n  }\n  return reject(toRemove.has.bind(toRemove), list);\n});\nexport default without;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Exclusive disjunction logical operation.\n * Returns `true` if one of the arguments is truthy and the other is falsy.\n * Otherwise, it returns `false`.\n *\n * @func\n * @memberOf R\n * @since v0.27.1\n * @category Logic\n * @sig a -> b -> Boolean\n * @param {Any} a\n * @param {Any} b\n * @return {Boolean} true if one of the arguments is truthy and the other is falsy\n * @see R.or, R.and\n * @example\n *\n *      R.xor(true, true); //=> false\n *      R.xor(true, false); //=> true\n *      R.xor(false, true); //=> true\n *      R.xor(false, false); //=> false\n */\nvar xor = /*#__PURE__*/_curry2(function xor(a, b) {\n  return Boolean(!a ^ !b);\n});\nexport default xor;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Creates a new list out of the two supplied by creating each possible pair\n * from the lists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b] -> [[a,b]]\n * @param {Array} as The first list.\n * @param {Array} bs The second list.\n * @return {Array} The list made by combining each possible pair from\n *         `as` and `bs` into pairs (`[a, b]`).\n * @example\n *\n *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\n * @symb R.xprod([a, b], [c, d]) = [[a, c], [a, d], [b, c], [b, d]]\n */\nvar xprod = /*#__PURE__*/_curry2(function xprod(a, b) {\n  // = xprodWith(prepend); (takes about 3 times as long...)\n  var i = 0;\n  var ilen = a.length;\n  var j;\n  var jlen = b.length;\n  var result = Array(ilen * jlen);\n  while (i < ilen) {\n    j = 0;\n    while (j < jlen) {\n      result[i * jlen + j] = [a[i], b[j]];\n      j += 1;\n    }\n    i += 1;\n  }\n  return result;\n});\nexport default xprod;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Creates a new list out of the two supplied by pairing up equally-positioned\n * items from both lists. The returned list is truncated to the length of the\n * shorter of the two input lists.\n * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b] -> [[a,b]]\n * @param {Array} list1 The first array to consider.\n * @param {Array} list2 The second array to consider.\n * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\n * @example\n *\n *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n * @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]\n */\nvar zip = /*#__PURE__*/_curry2(function zip(a, b) {\n  var len = Math.min(a.length, b.length);\n  var rv = Array(len);\n  var idx = 0;\n  while (idx < len) {\n    rv[idx] = [a[idx], b[idx]];\n    idx += 1;\n  }\n  return rv;\n});\nexport default zip;", "import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Creates a new object out of a list of keys and a list of values.\n * Key/value pairing is truncated to the length of the shorter of the two lists.\n * Note: `zipObj` is equivalent to `pipe(zip, fromPairs)`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [String] -> [*] -> {String: *}\n * @param {Array} keys The array that will be properties on the output object.\n * @param {Array} values The list of values on the output object.\n * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n * @example\n *\n *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n */\nvar zipObj = /*#__PURE__*/_curry2(function zipObj(keys, values) {\n  var idx = 0;\n  var len = Math.min(keys.length, values.length);\n  var out = {};\n  while (idx < len) {\n    out[keys[idx]] = values[idx];\n    idx += 1;\n  }\n  return out;\n});\nexport default zipObj;", "import _curry3 from \"./internal/_curry3.js\";\n\n/**\n * Creates a new list out of the two supplied by applying the function to each\n * equally-positioned pair in the lists. The returned list is truncated to the\n * length of the shorter of the two input lists.\n *\n * @function\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> c) -> [a] -> [b] -> [c]\n * @param {Function} fn The function used to combine the two elements into one value.\n * @param {Array} list1 The first array to consider.\n * @param {Array} list2 The second array to consider.\n * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`\n *         using `fn`.\n * @example\n *\n *      const f = (x, y) => {\n *        // ...\n *      };\n *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\n * @symb R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]\n */\nvar zipWith = /*#__PURE__*/_curry3(function zipWith(fn, a, b) {\n  var len = Math.min(a.length, b.length);\n  var rv = Array(len);\n  var idx = 0;\n  while (idx < len) {\n    rv[idx] = fn(a[idx], b[idx]);\n    idx += 1;\n  }\n  return rv;\n});\nexport default zipWith;", "import curryN from \"./curryN.js\";\nimport _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Creates a thunk out of a function. A thunk delays a calculation until\n * its result is needed, providing lazy evaluation of arguments.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Function\n * @sig ((a, b, ..., j) -> k) -> (a, b, ..., j) -> (() -> k)\n * @param {Function} fn A function to wrap in a thunk\n * @return {Function} Expects arguments for `fn` and returns a new function\n *  that, when called, applies those arguments to `fn`.\n * @see R.partial, R.partialRight\n * @example\n *\n *      R.thunkify(R.identity)(42)(); //=> 42\n *      R.thunkify((a, b) => a + b)(25, 17)(); //=> 42\n */\nvar thunkify = /*#__PURE__*/_curry1(function thunkify(fn) {\n  return curryN(fn.length, function createThunk() {\n    var fnArgs = arguments;\n    return function invokeThunk() {\n      return fn.apply(this, fnArgs);\n    };\n  });\n});\nexport default thunkify;", "import type { JsonSerializer } from './types.js'\n\nexport const defaultJsonSerializer: JsonSerializer = JSON\n", "export type RemoveIndex<T> = {\n  [K in keyof T as string extends K ? never : number extends K ? never : K]: T[K]\n}\n\nexport const uppercase = <S extends string>(str: S): Uppercase<S> => str.toUpperCase() as Uppercase<S>\n\n/**\n * Convert Headers instance into regular object\n */\nexport const HeadersInstanceToPlainObject = (headers: Response['headers']): Record<string, string> => {\n  const o: Record<string, string> = {}\n  headers.forEach((v, k) => {\n    o[k] = v\n  })\n  return o\n}\n", "import type {\n  BatchRequestDocument,\n  BatchRequestsOptions,\n  GraphQLClientRequestHeaders,\n  RawRequestExtendedOptions,\n  RawRequestOptions,\n  RequestDocument,\n  RequestExtendedOptions,\n  RequestOptions,\n  Variables,\n  VariablesAndRequestHeadersArgs,\n} from './types.js'\n\nexport const parseRequestArgs = <V extends Variables = Variables>(\n  documentOrOptions: RequestDocument | RequestOptions<V>,\n  variables?: V,\n  requestHeaders?: GraphQLClientRequestHeaders\n): RequestOptions<V> => {\n  return (documentOrOptions as RequestOptions<V>).document\n    ? (documentOrOptions as RequestOptions<V>)\n    : ({\n        document: documentOrOptions as RequestDocument,\n        variables: variables,\n        requestHeaders: requestHeaders,\n        signal: undefined,\n      } as unknown as RequestOptions<V>)\n}\n\nexport const parseRawRequestArgs = <V extends Variables = Variables>(\n  queryOrOptions: string | RawRequestOptions<V>,\n  variables?: V,\n  requestHeaders?: GraphQLClientRequestHeaders\n): RawRequestOptions<V> => {\n  return (queryOrOptions as RawRequestOptions<V>).query\n    ? (queryOrOptions as RawRequestOptions<V>)\n    : ({\n        query: queryOrOptions as string,\n        variables: variables,\n        requestHeaders: requestHeaders,\n        signal: undefined,\n      } as unknown as RawRequestOptions<V>)\n}\n\nexport const parseBatchRequestArgs = <V extends Variables = Variables>(\n  documentsOrOptions: BatchRequestDocument<V>[] | BatchRequestsOptions<V>,\n  requestHeaders?: GraphQLClientRequestHeaders\n): BatchRequestsOptions<V> => {\n  return (documentsOrOptions as BatchRequestsOptions<V>).documents\n    ? (documentsOrOptions as BatchRequestsOptions<V>)\n    : {\n        documents: documentsOrOptions as BatchRequestDocument<V>[],\n        requestHeaders: requestHeaders,\n        signal: undefined,\n      }\n}\n\nexport const parseRequestExtendedArgs = <V extends Variables = Variables>(\n  urlOrOptions: string | RequestExtendedOptions<V>,\n  document?: RequestDocument,\n  ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>\n): RequestExtendedOptions<V> => {\n  const [variables, requestHeaders] = variablesAndRequestHeaders\n  return (urlOrOptions as RequestExtendedOptions<V>).document\n    ? (urlOrOptions as RequestExtendedOptions<V>)\n    : ({\n        url: urlOrOptions as string,\n        document: document as RequestDocument,\n        variables,\n        requestHeaders,\n        signal: undefined,\n      } as unknown as RequestExtendedOptions<V>)\n}\n\nexport const parseRawRequestExtendedArgs = <V extends Variables = Variables>(\n  urlOrOptions: string | RawRequestExtendedOptions<V>,\n  query?: string,\n  ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>\n): RawRequestExtendedOptions<V> => {\n  const [variables, requestHeaders] = variablesAndRequestHeaders\n  return (urlOrOptions as RawRequestExtendedOptions<V>).query\n    ? (urlOrOptions as RawRequestExtendedOptions<V>)\n    : ({\n        url: urlOrOptions as string,\n        query: query as string,\n        variables,\n        requestHeaders,\n        signal: undefined,\n      } as unknown as RawRequestExtendedOptions<V>)\n}\n", "// Note: This file is autogenerated using \"resources/gen-version.js\" script and\n// automatically updated by \"npm version\" command.\n\n/**\n * A string containing the version of the GraphQL.js library\n */\nexport const version = '16.10.0';\n/**\n * An object containing the components of the GraphQL.js version string\n */\n\nexport const versionInfo = Object.freeze({\n  major: 16,\n  minor: 10,\n  patch: 0,\n  preReleaseTag: null,\n});\n", "export function devAssert(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n", "/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n", "export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n", "import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n", "import { getLocation } from './location.mjs';\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n", "import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedOptions(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedOptions(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n", "import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, {\n    source,\n    positions: [position],\n  });\n}\n", "/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nexport class Location {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  constructor(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Location';\n  }\n\n  toJSON() {\n    return {\n      start: this.start,\n      end: this.end,\n    };\n  }\n}\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexport class Token {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   *\n   * Note: is undefined for punctuation tokens, but typed as string for\n   * convenience in the parser.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  constructor(kind, start, end, line, column, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    this.value = value;\n    this.prev = null;\n    this.next = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Token';\n  }\n\n  toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column,\n    };\n  }\n}\n/**\n * The list of all possible AST node types.\n */\n\n/**\n * @internal\n */\nexport const QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: [\n    'name',\n    'variableDefinitions',\n    'directives',\n    'selectionSet',\n  ],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: [\n    'name', // Note: fragment variable definitions are deprecated and will removed in v17.0.0\n    'variableDefinitions',\n    'typeCondition',\n    'directives',\n    'selectionSet',\n  ],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: [\n    'description',\n    'name',\n    'type',\n    'defaultValue',\n    'directives',\n  ],\n  InterfaceTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n};\nconst kindValues = new Set(Object.keys(QueryDocumentKeys));\n/**\n * @internal\n */\n\nexport function isNode(maybeNode) {\n  const maybeKind =\n    maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;\n  return typeof maybeKind === 'string' && kindValues.has(maybeKind);\n}\n/** Name */\n\nvar OperationTypeNode;\n\n(function (OperationTypeNode) {\n  OperationTypeNode['QUERY'] = 'query';\n  OperationTypeNode['MUTATION'] = 'mutation';\n  OperationTypeNode['SUBSCRIPTION'] = 'subscription';\n})(OperationTypeNode || (OperationTypeNode = {}));\n\nexport { OperationTypeNode };\n", "/**\n * The set of allowed directive location values.\n */\nvar DirectiveLocation;\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n\nexport { DirectiveLocation };\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n", "/**\n * The set of allowed kind values for AST nodes.\n */\nvar Kind;\n\n(function (Kind) {\n  Kind['NAME'] = 'Name';\n  Kind['DOCUMENT'] = 'Document';\n  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';\n  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';\n  Kind['SELECTION_SET'] = 'SelectionSet';\n  Kind['FIELD'] = 'Field';\n  Kind['ARGUMENT'] = 'Argument';\n  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';\n  Kind['INLINE_FRAGMENT'] = 'InlineFragment';\n  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';\n  Kind['VARIABLE'] = 'Variable';\n  Kind['INT'] = 'IntValue';\n  Kind['FLOAT'] = 'FloatValue';\n  Kind['STRING'] = 'StringValue';\n  Kind['BOOLEAN'] = 'BooleanValue';\n  Kind['NULL'] = 'NullValue';\n  Kind['ENUM'] = 'EnumValue';\n  Kind['LIST'] = 'ListValue';\n  Kind['OBJECT'] = 'ObjectValue';\n  Kind['OBJECT_FIELD'] = 'ObjectField';\n  Kind['DIRECTIVE'] = 'Directive';\n  Kind['NAMED_TYPE'] = 'NamedType';\n  Kind['LIST_TYPE'] = 'ListType';\n  Kind['NON_NULL_TYPE'] = 'NonNullType';\n  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';\n  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';\n  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';\n  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';\n  Kind['FIELD_DEFINITION'] = 'FieldDefinition';\n  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';\n  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';\n  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';\n  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';\n  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';\n  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';\n  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';\n  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';\n  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';\n  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';\n  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';\n  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';\n  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';\n  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';\n})(Kind || (Kind = {}));\n\nexport { Kind };\n/**\n * The enum type representing the possible kind values of AST nodes.\n *\n * @deprecated Please use `Kind`. Will be remove in v17.\n */\n", "/**\n * ```\n * WhiteSpace ::\n *   - \"Horizontal Tab (U+0009)\"\n *   - \"Space (U+0020)\"\n * ```\n * @internal\n */\nexport function isWhiteSpace(code) {\n  return code === 0x0009 || code === 0x0020;\n}\n/**\n * ```\n * Digit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n * ```\n * @internal\n */\n\nexport function isDigit(code) {\n  return code >= 0x0030 && code <= 0x0039;\n}\n/**\n * ```\n * Letter :: one of\n *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`\n *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`\n *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`\n *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`\n * ```\n * @internal\n */\n\nexport function isLetter(code) {\n  return (\n    (code >= 0x0061 && code <= 0x007a) || // A-Z\n    (code >= 0x0041 && code <= 0x005a) // a-z\n  );\n}\n/**\n * ```\n * NameStart ::\n *   - Letter\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameStart(code) {\n  return isLetter(code) || code === 0x005f;\n}\n/**\n * ```\n * NameContinue ::\n *   - Letter\n *   - Digit\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameContinue(code) {\n  return isLetter(code) || isDigit(code) || code === 0x005f;\n}\n", "import { isWhiteSpace } from './characterClasses.mjs';\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\n\nexport function dedentBlockStringLines(lines) {\n  var _firstNonEmptyLine2;\n\n  let commonIndent = Number.MAX_SAFE_INTEGER;\n  let firstNonEmptyLine = null;\n  let lastNonEmptyLine = -1;\n\n  for (let i = 0; i < lines.length; ++i) {\n    var _firstNonEmptyLine;\n\n    const line = lines[i];\n    const indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    firstNonEmptyLine =\n      (_firstNonEmptyLine = firstNonEmptyLine) !== null &&\n      _firstNonEmptyLine !== void 0\n        ? _firstNonEmptyLine\n        : i;\n    lastNonEmptyLine = i;\n\n    if (i !== 0 && indent < commonIndent) {\n      commonIndent = indent;\n    }\n  }\n\n  return lines // Remove common indentation from all lines but first.\n    .map((line, i) => (i === 0 ? line : line.slice(commonIndent))) // Remove leading and trailing blank lines.\n    .slice(\n      (_firstNonEmptyLine2 = firstNonEmptyLine) !== null &&\n        _firstNonEmptyLine2 !== void 0\n        ? _firstNonEmptyLine2\n        : 0,\n      lastNonEmptyLine + 1,\n    );\n}\n\nfunction leadingWhitespace(str) {\n  let i = 0;\n\n  while (i < str.length && isWhiteSpace(str.charCodeAt(i))) {\n    ++i;\n  }\n\n  return i;\n}\n/**\n * @internal\n */\n\nexport function isPrintableAsBlockString(value) {\n  if (value === '') {\n    return true; // empty string is printable\n  }\n\n  let isEmptyLine = true;\n  let hasIndent = false;\n  let hasCommonIndent = true;\n  let seenNonEmptyLine = false;\n\n  for (let i = 0; i < value.length; ++i) {\n    switch (value.codePointAt(i)) {\n      case 0x0000:\n      case 0x0001:\n      case 0x0002:\n      case 0x0003:\n      case 0x0004:\n      case 0x0005:\n      case 0x0006:\n      case 0x0007:\n      case 0x0008:\n      case 0x000b:\n      case 0x000c:\n      case 0x000e:\n      case 0x000f:\n        return false;\n      // Has non-printable characters\n\n      case 0x000d:\n        //  \\r\n        return false;\n      // Has \\r or \\r\\n which will be replaced as \\n\n\n      case 10:\n        //  \\n\n        if (isEmptyLine && !seenNonEmptyLine) {\n          return false; // Has leading new line\n        }\n\n        seenNonEmptyLine = true;\n        isEmptyLine = true;\n        hasIndent = false;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        hasIndent || (hasIndent = isEmptyLine);\n        break;\n\n      default:\n        hasCommonIndent && (hasCommonIndent = hasIndent);\n        isEmptyLine = false;\n    }\n  }\n\n  if (isEmptyLine) {\n    return false; // Has trailing empty lines\n  }\n\n  if (hasCommonIndent && seenNonEmptyLine) {\n    return false; // Has internal indent\n  }\n\n  return true;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value, options) {\n  const escapedValue = value.replace(/\"\"\"/g, '\\\\\"\"\"'); // Expand a block string's raw value into independent lines.\n\n  const lines = escapedValue.split(/\\r\\n|[\\n\\r]/g);\n  const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line\n\n  const forceLeadingNewLine =\n    lines.length > 1 &&\n    lines\n      .slice(1)\n      .every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0))); // Trailing triple quotes just looks confusing but doesn't force trailing new line\n\n  const hasTrailingTripleQuotes = escapedValue.endsWith('\\\\\"\"\"'); // Trailing quote (single or double) or slash forces trailing new line\n\n  const hasTrailingQuote = value.endsWith('\"') && !hasTrailingTripleQuotes;\n  const hasTrailingSlash = value.endsWith('\\\\');\n  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;\n  const printAsMultipleLines =\n    !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability\n    (!isSingleLine ||\n      value.length > 70 ||\n      forceTrailingNewline ||\n      forceLeadingNewLine ||\n      hasTrailingTripleQuotes);\n  let result = ''; // Format a multi-line block quote to account for leading space.\n\n  const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));\n\n  if ((printAsMultipleLines && !skipLeadingNewLine) || forceLeadingNewLine) {\n    result += '\\n';\n  }\n\n  result += escapedValue;\n\n  if (printAsMultipleLines || forceTrailingNewline) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result + '\"\"\"';\n}\n", "/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind;\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n\nexport { TokenKind };\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n", "import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n", "const MAX_ARRAY_LENGTH = 10;\nconst MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (typeof value) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? `[function ${value.name}]` : '[function]';\n\n    case 'object':\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (value === null) {\n    return 'null';\n  }\n\n  if (previouslySeenValues.includes(value)) {\n    return '[Circular]';\n  }\n\n  const seenValues = [...previouslySeenValues, value];\n\n  if (isJSONable(value)) {\n    const jsonValue = value.toJSON(); // check for infinite recursion\n\n    if (jsonValue !== value) {\n      return typeof jsonValue === 'string'\n        ? jsonValue\n        : formatValue(jsonValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction isJSONable(value) {\n  return typeof value.toJSON === 'function';\n}\n\nfunction formatObject(object, seenValues) {\n  const entries = Object.entries(object);\n\n  if (entries.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  const properties = entries.map(\n    ([key, value]) => key + ': ' + formatValue(value, seenValues),\n  );\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  const len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  const remaining = array.length - len;\n  const items = [];\n\n  for (let i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(`... ${remaining} more items`);\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getObjectTag(object) {\n  const tag = Object.prototype.toString\n    .call(object)\n    .replace(/^\\[object /, '')\n    .replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    const name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n", "import { inspect } from './inspect.mjs';\n/* c8 ignore next 3 */\n\nconst isProduction =\n  globalThis.process && // eslint-disable-next-line no-undef\n  process.env.NODE_ENV === 'production';\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n * See: https://webpack.js.org/guides/production/\n */\n\nexport const instanceOf =\n  /* c8 ignore next 6 */\n  // FIXME: https://github.com/graphql/graphql-js/issues/2317\n  isProduction\n    ? function instanceOf(value, constructor) {\n        return value instanceof constructor;\n      }\n    : function instanceOf(value, constructor) {\n        if (value instanceof constructor) {\n          return true;\n        }\n\n        if (typeof value === 'object' && value !== null) {\n          var _value$constructor;\n\n          // Prefer Symbol.toStringTag since it is immune to minification.\n          const className = constructor.prototype[Symbol.toStringTag];\n          const valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.\n            Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009\n              ? value[Symbol.toStringTag]\n              : (_value$constructor = value.constructor) === null ||\n                _value$constructor === void 0\n              ? void 0\n              : _value$constructor.name;\n\n          if (className === valueClassName) {\n            const stringifiedValue = inspect(value);\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`);\n          }\n        }\n\n        return false;\n      };\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nexport class Source {\n  constructor(\n    body,\n    name = 'GraphQL request',\n    locationOffset = {\n      line: 1,\n      column: 1,\n    },\n  ) {\n    typeof body === 'string' ||\n      devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 ||\n      devAssert(\n        false,\n        'line in locationOffset is 1-indexed and must be positive.',\n      );\n    this.locationOffset.column > 0 ||\n      devAssert(\n        false,\n        'column in locationOffset is 1-indexed and must be positive.',\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\nexport function isSource(source) {\n  return instanceOf(source, Source);\n}\n", "import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  const document = parser.parseDocument();\n  Object.defineProperty(document, 'tokenCount', {\n    enumerable: false,\n    value: parser.tokenCount,\n  });\n  return document;\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options = {}) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n\n  get tokenCount() {\n    return this._tokenCounter;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.allowLegacyFragmentVariables === true) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this.advanceLexer();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this.advanceLexer();\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    if (this._options.noLocation !== true) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n  advanceLexer() {\n    const { maxTokens } = this._options;\n\n    const token = this._lexer.advance();\n\n    if (token.kind !== TokenKind.EOF) {\n      ++this._tokenCounter;\n\n      if (maxTokens !== undefined && this._tokenCounter > maxTokens) {\n        throw syntaxError(\n          this._lexer.source,\n          token.start,\n          `Document contains more that ${maxTokens} tokens. Parsing aborted.`,\n        );\n      }\n    }\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n", "const MAX_SUGGESTIONS = 5;\n/**\n * Given [ A, B, C ] return ' Did you mean A, B, or C?'.\n */\n\nexport function didYouMean(firstArg, secondArg) {\n  const [subMessage, suggestionsArg] = secondArg\n    ? [firstArg, secondArg]\n    : [undefined, firstArg];\n  let message = ' Did you mean ';\n\n  if (subMessage) {\n    message += subMessage + ' ';\n  }\n\n  const suggestions = suggestionsArg.map((x) => `\"${x}\"`);\n\n  switch (suggestions.length) {\n    case 0:\n      return '';\n\n    case 1:\n      return message + suggestions[0] + '?';\n\n    case 2:\n      return message + suggestions[0] + ' or ' + suggestions[1] + '?';\n  }\n\n  const selected = suggestions.slice(0, MAX_SUGGESTIONS);\n  const lastItem = selected.pop();\n  return message + selected.join(', ') + ', or ' + lastItem + '?';\n}\n", "/**\n * Returns the first argument it receives.\n */\nexport function identityFunc(x) {\n  return x;\n}\n", "/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * for each value in the array.\n *\n * This provides a convenient lookup for the array items if the key function\n * produces unique results.\n * ```ts\n * const phoneBook = [\n *   { name: 'Jon', num: '555-1234' },\n *   { name: 'Jenny', num: '867-5309' }\n * ]\n *\n * const entriesByName = keyMap(\n *   phoneBook,\n *   entry => entry.name\n * )\n *\n * // {\n * //   Jon: { name: 'Jon', num: '555-1234' },\n * //   Jenny: { name: 'Jenny', num: '867-5309' }\n * // }\n *\n * const jennyEntry = entriesByName['Jenny']\n *\n * // { name: 'Jenny', num: '857-6309' }\n * ```\n */\nexport function keyMap(list, keyFn) {\n  const result = Object.create(null);\n\n  for (const item of list) {\n    result[keyFn(item)] = item;\n  }\n\n  return result;\n}\n", "/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * and a function to produce the values from each item in the array.\n * ```ts\n * const phoneBook = [\n *   { name: 'Jon', num: '555-1234' },\n *   { name: 'Jenny', num: '867-5309' }\n * ]\n *\n * // { Jon: '555-1234', Jenny: '867-5309' }\n * const phonesByName = keyValMap(\n *   phoneBook,\n *   entry => entry.name,\n *   entry => entry.num\n * )\n * ```\n */\nexport function keyValMap(list, keyFn, valFn) {\n  const result = Object.create(null);\n\n  for (const item of list) {\n    result[keyFn(item)] = valFn(item);\n  }\n\n  return result;\n}\n", "/**\n * Creates an object map with the same keys as `map` and values generated by\n * running each value of `map` thru `fn`.\n */\nexport function mapValue(map, fn) {\n  const result = Object.create(null);\n\n  for (const key of Object.keys(map)) {\n    result[key] = fn(map[key], key);\n  }\n\n  return result;\n}\n", "/**\n * Returns a number indicating whether a reference string comes before, or after,\n * or is the same as the given string in natural sort order.\n *\n * See: https://en.wikipedia.org/wiki/Natural_sort_order\n *\n */\nexport function naturalCompare(aStr, bStr) {\n  let aIndex = 0;\n  let bIndex = 0;\n\n  while (aIndex < aStr.length && bIndex < bStr.length) {\n    let aChar = aStr.charCodeAt(aIndex);\n    let bChar = bStr.charCodeAt(bIndex);\n\n    if (isDigit(aChar) && isDigit(bChar)) {\n      let aNum = 0;\n\n      do {\n        ++aIndex;\n        aNum = aNum * 10 + aChar - DIGIT_0;\n        aChar = aStr.charCodeAt(aIndex);\n      } while (isDigit(aChar) && aNum > 0);\n\n      let bNum = 0;\n\n      do {\n        ++bIndex;\n        bNum = bNum * 10 + bChar - DIGIT_0;\n        bChar = bStr.charCodeAt(bIndex);\n      } while (isDigit(bChar) && bNum > 0);\n\n      if (aNum < bNum) {\n        return -1;\n      }\n\n      if (aNum > bNum) {\n        return 1;\n      }\n    } else {\n      if (aChar < bChar) {\n        return -1;\n      }\n\n      if (aChar > bChar) {\n        return 1;\n      }\n\n      ++aIndex;\n      ++bIndex;\n    }\n  }\n\n  return aStr.length - bStr.length;\n}\nconst DIGIT_0 = 48;\nconst DIGIT_9 = 57;\n\nfunction isDigit(code) {\n  return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;\n}\n", "import { naturalCompare } from './naturalCompare.mjs';\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\n\nexport function suggestionList(input, options) {\n  const optionsByDistance = Object.create(null);\n  const lexicalDistance = new LexicalDistance(input);\n  const threshold = Math.floor(input.length * 0.4) + 1;\n\n  for (const option of options) {\n    const distance = lexicalDistance.measure(option, threshold);\n\n    if (distance !== undefined) {\n      optionsByDistance[option] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort((a, b) => {\n    const distanceDiff = optionsByDistance[a] - optionsByDistance[b];\n    return distanceDiff !== 0 ? distanceDiff : naturalCompare(a, b);\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n */\n\nclass LexicalDistance {\n  constructor(input) {\n    this._input = input;\n    this._inputLowerCase = input.toLowerCase();\n    this._inputArray = stringToArray(this._inputLowerCase);\n    this._rows = [\n      new Array(input.length + 1).fill(0),\n      new Array(input.length + 1).fill(0),\n      new Array(input.length + 1).fill(0),\n    ];\n  }\n\n  measure(option, threshold) {\n    if (this._input === option) {\n      return 0;\n    }\n\n    const optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit\n\n    if (this._inputLowerCase === optionLowerCase) {\n      return 1;\n    }\n\n    let a = stringToArray(optionLowerCase);\n    let b = this._inputArray;\n\n    if (a.length < b.length) {\n      const tmp = a;\n      a = b;\n      b = tmp;\n    }\n\n    const aLength = a.length;\n    const bLength = b.length;\n\n    if (aLength - bLength > threshold) {\n      return undefined;\n    }\n\n    const rows = this._rows;\n\n    for (let j = 0; j <= bLength; j++) {\n      rows[0][j] = j;\n    }\n\n    for (let i = 1; i <= aLength; i++) {\n      const upRow = rows[(i - 1) % 3];\n      const currentRow = rows[i % 3];\n      let smallestCell = (currentRow[0] = i);\n\n      for (let j = 1; j <= bLength; j++) {\n        const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n        let currentCell = Math.min(\n          upRow[j] + 1, // delete\n          currentRow[j - 1] + 1, // insert\n          upRow[j - 1] + cost, // substitute\n        );\n\n        if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n          // transposition\n          const doubleDiagonalCell = rows[(i - 2) % 3][j - 2];\n          currentCell = Math.min(currentCell, doubleDiagonalCell + 1);\n        }\n\n        if (currentCell < smallestCell) {\n          smallestCell = currentCell;\n        }\n\n        currentRow[j] = currentCell;\n      } // Early exit, since distance can't go smaller than smallest element of the previous row.\n\n      if (smallestCell > threshold) {\n        return undefined;\n      }\n    }\n\n    const distance = rows[aLength % 3][bLength];\n    return distance <= threshold ? distance : undefined;\n  }\n}\n\nfunction stringToArray(str) {\n  const strLength = str.length;\n  const array = new Array(strLength);\n\n  for (let i = 0; i < strLength; ++i) {\n    array[i] = str.charCodeAt(i);\n  }\n\n  return array;\n}\n", "export function toObjMap(obj) {\n  if (obj == null) {\n    return Object.create(null);\n  }\n\n  if (Object.getPrototypeOf(obj) === null) {\n    return obj;\n  }\n\n  const map = Object.create(null);\n\n  for (const [key, value] of Object.entries(obj)) {\n    map[key] = value;\n  }\n\n  return map;\n}\n", "/**\n * Prints a string as a GraphQL StringValue literal. Replaces control characters\n * and excluded characters (\" U+0022 and \\\\ U+005C) with escape sequences.\n */\nexport function printString(str) {\n  return `\"${str.replace(escapedRegExp, escapedReplacer)}\"`;\n} // eslint-disable-next-line no-control-regex\n\nconst escapedRegExp = /[\\x00-\\x1f\\x22\\x5c\\x7f-\\x9f]/g;\n\nfunction escapedReplacer(str) {\n  return escapeSequences[str.charCodeAt(0)];\n} // prettier-ignore\n\nconst escapeSequences = [\n  '\\\\u0000',\n  '\\\\u0001',\n  '\\\\u0002',\n  '\\\\u0003',\n  '\\\\u0004',\n  '\\\\u0005',\n  '\\\\u0006',\n  '\\\\u0007',\n  '\\\\b',\n  '\\\\t',\n  '\\\\n',\n  '\\\\u000B',\n  '\\\\f',\n  '\\\\r',\n  '\\\\u000E',\n  '\\\\u000F',\n  '\\\\u0010',\n  '\\\\u0011',\n  '\\\\u0012',\n  '\\\\u0013',\n  '\\\\u0014',\n  '\\\\u0015',\n  '\\\\u0016',\n  '\\\\u0017',\n  '\\\\u0018',\n  '\\\\u0019',\n  '\\\\u001A',\n  '\\\\u001B',\n  '\\\\u001C',\n  '\\\\u001D',\n  '\\\\u001E',\n  '\\\\u001F',\n  '',\n  '',\n  '\\\\\"',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 2F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 3F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 4F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\\\\\',\n  '',\n  '',\n  '', // 5F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 6F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\u007F',\n  '\\\\u0080',\n  '\\\\u0081',\n  '\\\\u0082',\n  '\\\\u0083',\n  '\\\\u0084',\n  '\\\\u0085',\n  '\\\\u0086',\n  '\\\\u0087',\n  '\\\\u0088',\n  '\\\\u0089',\n  '\\\\u008A',\n  '\\\\u008B',\n  '\\\\u008C',\n  '\\\\u008D',\n  '\\\\u008E',\n  '\\\\u008F',\n  '\\\\u0090',\n  '\\\\u0091',\n  '\\\\u0092',\n  '\\\\u0093',\n  '\\\\u0094',\n  '\\\\u0095',\n  '\\\\u0096',\n  '\\\\u0097',\n  '\\\\u0098',\n  '\\\\u0099',\n  '\\\\u009A',\n  '\\\\u009B',\n  '\\\\u009C',\n  '\\\\u009D',\n  '\\\\u009E',\n  '\\\\u009F',\n];\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isNode, QueryDocumentKeys } from './ast.mjs';\nimport { Kind } from './kinds.mjs';\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nexport const BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n * ```ts\n * const editedAST = visit(ast, {\n *   enter(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: skip visiting this node\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   },\n *   leave(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: no action\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   }\n * });\n * ```\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to three permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind(node) {\n *     // enter the \"Kind\" node\n *   }\n * })\n * ```\n *\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind: {\n *     enter(node) {\n *       // enter the \"Kind\" node\n *     }\n *     leave(node) {\n *       // leave the \"Kind\" node\n *     }\n *   }\n * })\n * ```\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n * ```ts\n * visit(ast, {\n *   enter(node) {\n *     // enter any node\n *   },\n *   leave(node) {\n *     // leave any node\n *   }\n * })\n * ```\n */\n\nexport function visit(root, visitor, visitorKeys = QueryDocumentKeys) {\n  const enterLeaveMap = new Map();\n\n  for (const kind of Object.values(Kind)) {\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\n  }\n  /* eslint-disable no-undef-init */\n\n  let stack = undefined;\n  let inArray = Array.isArray(root);\n  let keys = [root];\n  let index = -1;\n  let edits = [];\n  let node = root;\n  let key = undefined;\n  let parent = undefined;\n  const path = [];\n  const ancestors = [];\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    const isLeaving = index === keys.length;\n    const isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n          let editOffset = 0;\n\n          for (const [editKey, editValue] of edits) {\n            const arrayKey = editKey - editOffset;\n\n            if (editValue === null) {\n              node.splice(arrayKey, 1);\n              editOffset++;\n            } else {\n              node[arrayKey] = editValue;\n            }\n          }\n        } else {\n          node = Object.defineProperties(\n            {},\n            Object.getOwnPropertyDescriptors(node),\n          );\n\n          for (const [editKey, editValue] of edits) {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else if (parent) {\n      key = inArray ? index : keys[index];\n      node = parent[key];\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      path.push(key);\n    }\n\n    let result;\n\n    if (!Array.isArray(node)) {\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\n\n      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);\n      const visitFn = isLeaving\n        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get === void 0\n          ? void 0\n          : _enterLeaveMap$get.leave\n        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get2 === void 0\n        ? void 0\n        : _enterLeaveMap$get2.enter;\n      result =\n        visitFn === null || visitFn === void 0\n          ? void 0\n          : visitFn.call(visitor, node, key, parent, path, ancestors);\n\n      if (result === BREAK) {\n        break;\n      }\n\n      if (result === false) {\n        if (!isLeaving) {\n          path.pop();\n          continue;\n        }\n      } else if (result !== undefined) {\n        edits.push([key, result]);\n\n        if (!isLeaving) {\n          if (isNode(result)) {\n            node = result;\n          } else {\n            path.pop();\n            continue;\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _node$kind;\n\n      stack = {\n        inArray,\n        index,\n        keys,\n        edits,\n        prev: stack,\n      };\n      inArray = Array.isArray(node);\n      keys = inArray\n        ? node\n        : (_node$kind = visitorKeys[node.kind]) !== null &&\n          _node$kind !== void 0\n        ? _node$kind\n        : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    // New root\n    return edits[edits.length - 1][1];\n  }\n\n  return root;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nexport function visitInParallel(visitors) {\n  const skipping = new Array(visitors.length).fill(null);\n  const mergedVisitor = Object.create(null);\n\n  for (const kind of Object.values(Kind)) {\n    let hasVisitor = false;\n    const enterList = new Array(visitors.length).fill(undefined);\n    const leaveList = new Array(visitors.length).fill(undefined);\n\n    for (let i = 0; i < visitors.length; ++i) {\n      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);\n      hasVisitor || (hasVisitor = enter != null || leave != null);\n      enterList[i] = enter;\n      leaveList[i] = leave;\n    }\n\n    if (!hasVisitor) {\n      continue;\n    }\n\n    const mergedEnterLeave = {\n      enter(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _enterList$i;\n\n            const result =\n              (_enterList$i = enterList[i]) === null || _enterList$i === void 0\n                ? void 0\n                : _enterList$i.apply(visitors[i], args);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      },\n\n      leave(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _leaveList$i;\n\n            const result =\n              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0\n                ? void 0\n                : _leaveList$i.apply(visitors[i], args);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          } else if (skipping[i] === node) {\n            skipping[i] = null;\n          }\n        }\n      },\n    };\n    mergedVisitor[kind] = mergedEnterLeave;\n  }\n\n  return mergedVisitor;\n}\n/**\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\n */\n\nexport function getEnterLeaveForKind(visitor, kind) {\n  const kindVisitor = visitor[kind];\n\n  if (typeof kindVisitor === 'object') {\n    // { Kind: { enter() {}, leave() {} } }\n    return kindVisitor;\n  } else if (typeof kindVisitor === 'function') {\n    // { Kind() {} }\n    return {\n      enter: kindVisitor,\n      leave: undefined,\n    };\n  } // { enter() {}, leave() {} }\n\n  return {\n    enter: visitor.enter,\n    leave: visitor.leave,\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n *\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\n */\n\n/* c8 ignore next 8 */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  const { enter, leave } = getEnterLeaveForKind(visitor, kind);\n  return isLeaving ? leave : enter;\n}\n", "import { printBlockString } from './blockString.mjs';\nimport { printString } from './printString.mjs';\nimport { visit } from './visitor.mjs';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, printDocASTReducer);\n}\nconst MAX_LINE_LENGTH = 80;\nconst printDocASTReducer = {\n  Name: {\n    leave: (node) => node.value,\n  },\n  Variable: {\n    leave: (node) => '$' + node.name,\n  },\n  // Document\n  Document: {\n    leave: (node) => join(node.definitions, '\\n\\n'),\n  },\n  OperationDefinition: {\n    leave(node) {\n      const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n      const prefix = join(\n        [\n          node.operation,\n          join([node.name, varDefs]),\n          join(node.directives, ' '),\n        ],\n        ' ',\n      ); // Anonymous queries with no directives or variable definitions can use\n      // the query short form.\n\n      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;\n    },\n  },\n  VariableDefinition: {\n    leave: ({ variable, type, defaultValue, directives }) =>\n      variable +\n      ': ' +\n      type +\n      wrap(' = ', defaultValue) +\n      wrap(' ', join(directives, ' ')),\n  },\n  SelectionSet: {\n    leave: ({ selections }) => block(selections),\n  },\n  Field: {\n    leave({ alias, name, arguments: args, directives, selectionSet }) {\n      const prefix = wrap('', alias, ': ') + name;\n      let argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n      if (argsLine.length > MAX_LINE_LENGTH) {\n        argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n      }\n\n      return join([argsLine, join(directives, ' '), selectionSet], ' ');\n    },\n  },\n  Argument: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Fragments\n  FragmentSpread: {\n    leave: ({ name, directives }) =>\n      '...' + name + wrap(' ', join(directives, ' ')),\n  },\n  InlineFragment: {\n    leave: ({ typeCondition, directives, selectionSet }) =>\n      join(\n        [\n          '...',\n          wrap('on ', typeCondition),\n          join(directives, ' '),\n          selectionSet,\n        ],\n        ' ',\n      ),\n  },\n  FragmentDefinition: {\n    leave: (\n      { name, typeCondition, variableDefinitions, directives, selectionSet }, // Note: fragment variable definitions are experimental and may be changed\n    ) =>\n      // or removed in the future.\n      `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +\n      `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +\n      selectionSet,\n  },\n  // Value\n  IntValue: {\n    leave: ({ value }) => value,\n  },\n  FloatValue: {\n    leave: ({ value }) => value,\n  },\n  StringValue: {\n    leave: ({ value, block: isBlockString }) =>\n      isBlockString ? printBlockString(value) : printString(value),\n  },\n  BooleanValue: {\n    leave: ({ value }) => (value ? 'true' : 'false'),\n  },\n  NullValue: {\n    leave: () => 'null',\n  },\n  EnumValue: {\n    leave: ({ value }) => value,\n  },\n  ListValue: {\n    leave: ({ values }) => '[' + join(values, ', ') + ']',\n  },\n  ObjectValue: {\n    leave: ({ fields }) => '{' + join(fields, ', ') + '}',\n  },\n  ObjectField: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Directive\n  Directive: {\n    leave: ({ name, arguments: args }) =>\n      '@' + name + wrap('(', join(args, ', '), ')'),\n  },\n  // Type\n  NamedType: {\n    leave: ({ name }) => name,\n  },\n  ListType: {\n    leave: ({ type }) => '[' + type + ']',\n  },\n  NonNullType: {\n    leave: ({ type }) => type + '!',\n  },\n  // Type System Definitions\n  SchemaDefinition: {\n    leave: ({ description, directives, operationTypes }) =>\n      wrap('', description, '\\n') +\n      join(['schema', join(directives, ' '), block(operationTypes)], ' '),\n  },\n  OperationTypeDefinition: {\n    leave: ({ operation, type }) => operation + ': ' + type,\n  },\n  ScalarTypeDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') +\n      join(['scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  FieldDefinition: {\n    leave: ({ description, name, arguments: args, type, directives }) =>\n      wrap('', description, '\\n') +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      ': ' +\n      type +\n      wrap(' ', join(directives, ' ')),\n  },\n  InputValueDefinition: {\n    leave: ({ description, name, type, defaultValue, directives }) =>\n      wrap('', description, '\\n') +\n      join(\n        [name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')],\n        ' ',\n      ),\n  },\n  InterfaceTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeDefinition: {\n    leave: ({ description, name, directives, types }) =>\n      wrap('', description, '\\n') +\n      join(\n        ['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))],\n        ' ',\n      ),\n  },\n  EnumTypeDefinition: {\n    leave: ({ description, name, directives, values }) =>\n      wrap('', description, '\\n') +\n      join(['enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  EnumValueDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') + join([name, join(directives, ' ')], ' '),\n  },\n  InputObjectTypeDefinition: {\n    leave: ({ description, name, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(['input', name, join(directives, ' '), block(fields)], ' '),\n  },\n  DirectiveDefinition: {\n    leave: ({ description, name, arguments: args, repeatable, locations }) =>\n      wrap('', description, '\\n') +\n      'directive @' +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      (repeatable ? ' repeatable' : '') +\n      ' on ' +\n      join(locations, ' | '),\n  },\n  SchemaExtension: {\n    leave: ({ directives, operationTypes }) =>\n      join(\n        ['extend schema', join(directives, ' '), block(operationTypes)],\n        ' ',\n      ),\n  },\n  ScalarTypeExtension: {\n    leave: ({ name, directives }) =>\n      join(['extend scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  InterfaceTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeExtension: {\n    leave: ({ name, directives, types }) =>\n      join(\n        [\n          'extend union',\n          name,\n          join(directives, ' '),\n          wrap('= ', join(types, ' | ')),\n        ],\n        ' ',\n      ),\n  },\n  EnumTypeExtension: {\n    leave: ({ name, directives, values }) =>\n      join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  InputObjectTypeExtension: {\n    leave: ({ name, directives, fields }) =>\n      join(['extend input', name, join(directives, ' '), block(fields)], ' '),\n  },\n};\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\nfunction join(maybeArray, separator = '') {\n  var _maybeArray$filter$jo;\n\n  return (_maybeArray$filter$jo =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.filter((x) => x).join(separator)) !== null &&\n    _maybeArray$filter$jo !== void 0\n    ? _maybeArray$filter$jo\n    : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an indented `{ }` block.\n */\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\nfunction wrap(start, maybeString, end = '') {\n  return maybeString != null && maybeString !== ''\n    ? start + maybeString + end\n    : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction hasMultilineItems(maybeArray) {\n  var _maybeArray$some;\n\n  // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n  return (_maybeArray$some =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.some((str) => str.includes('\\n'))) !== null &&\n    _maybeArray$some !== void 0\n    ? _maybeArray$some\n    : false;\n}\n", "import { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { Kind } from '../language/kinds.mjs';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\n\nexport function valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case Kind.NULL:\n      return null;\n\n    case Kind.INT:\n      return parseInt(valueNode.value, 10);\n\n    case Kind.FLOAT:\n      return parseFloat(valueNode.value);\n\n    case Kind.STRING:\n    case Kind.ENUM:\n    case Kind.BOOLEAN:\n      return valueNode.value;\n\n    case Kind.LIST:\n      return valueNode.values.map((node) =>\n        valueFromASTUntyped(node, variables),\n      );\n\n    case Kind.OBJECT:\n      return keyValMap(\n        valueNode.fields,\n        (field) => field.name.value,\n        (field) => valueFromASTUntyped(field.value, variables),\n      );\n\n    case Kind.VARIABLE:\n      return variables === null || variables === void 0\n        ? void 0\n        : variables[valueNode.name.value];\n  }\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { isNameContinue, isNameStart } from '../language/characterClasses.mjs';\n/**\n * Upholds the spec rules about naming.\n */\n\nexport function assertName(name) {\n  name != null || devAssert(false, 'Must provide name.');\n  typeof name === 'string' || devAssert(false, 'Expected name to be a string.');\n\n  if (name.length === 0) {\n    throw new GraphQLError('Expected name to be a non-empty string.');\n  }\n\n  for (let i = 1; i < name.length; ++i) {\n    if (!isNameContinue(name.charCodeAt(i))) {\n      throw new GraphQLError(\n        `Names must only contain [_a-zA-Z0-9] but \"${name}\" does not.`,\n      );\n    }\n  }\n\n  if (!isNameStart(name.charCodeAt(0))) {\n    throw new GraphQLError(\n      `Names must start with [_a-zA-Z] but \"${name}\" does not.`,\n    );\n  }\n\n  return name;\n}\n/**\n * Upholds the spec rules about naming enum values.\n *\n * @internal\n */\n\nexport function assertEnumValueName(name) {\n  if (name === 'true' || name === 'false' || name === 'null') {\n    throw new GraphQLError(`Enum values cannot be named: ${name}`);\n  }\n\n  return assertName(name);\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { identityFunc } from '../jsutils/identityFunc.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { valueFromASTUntyped } from '../utilities/valueFromASTUntyped.mjs';\nimport { assertEnumValueName, assertName } from './assertName.mjs';\nexport function isType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type) ||\n    isListType(type) ||\n    isNonNullType(type)\n  );\n}\nexport function assertType(type) {\n  if (!isType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL type.`);\n  }\n\n  return type;\n}\n/**\n * There are predicates for each kind of GraphQL type.\n */\n\nexport function isScalarType(type) {\n  return instanceOf(type, GraphQLScalarType);\n}\nexport function assertScalarType(type) {\n  if (!isScalarType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Scalar type.`);\n  }\n\n  return type;\n}\nexport function isObjectType(type) {\n  return instanceOf(type, GraphQLObjectType);\n}\nexport function assertObjectType(type) {\n  if (!isObjectType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Object type.`);\n  }\n\n  return type;\n}\nexport function isInterfaceType(type) {\n  return instanceOf(type, GraphQLInterfaceType);\n}\nexport function assertInterfaceType(type) {\n  if (!isInterfaceType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL Interface type.`,\n    );\n  }\n\n  return type;\n}\nexport function isUnionType(type) {\n  return instanceOf(type, GraphQLUnionType);\n}\nexport function assertUnionType(type) {\n  if (!isUnionType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Union type.`);\n  }\n\n  return type;\n}\nexport function isEnumType(type) {\n  return instanceOf(type, GraphQLEnumType);\n}\nexport function assertEnumType(type) {\n  if (!isEnumType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Enum type.`);\n  }\n\n  return type;\n}\nexport function isInputObjectType(type) {\n  return instanceOf(type, GraphQLInputObjectType);\n}\nexport function assertInputObjectType(type) {\n  if (!isInputObjectType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL Input Object type.`,\n    );\n  }\n\n  return type;\n}\nexport function isListType(type) {\n  return instanceOf(type, GraphQLList);\n}\nexport function assertListType(type) {\n  if (!isListType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL List type.`);\n  }\n\n  return type;\n}\nexport function isNonNullType(type) {\n  return instanceOf(type, GraphQLNonNull);\n}\nexport function assertNonNullType(type) {\n  if (!isNonNullType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Non-Null type.`);\n  }\n\n  return type;\n}\n/**\n * These types may be used as input types for arguments and directives.\n */\n\nexport function isInputType(type) {\n  return (\n    isScalarType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type) ||\n    (isWrappingType(type) && isInputType(type.ofType))\n  );\n}\nexport function assertInputType(type) {\n  if (!isInputType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL input type.`);\n  }\n\n  return type;\n}\n/**\n * These types may be used as output types as the result of fields.\n */\n\nexport function isOutputType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    (isWrappingType(type) && isOutputType(type.ofType))\n  );\n}\nexport function assertOutputType(type) {\n  if (!isOutputType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL output type.`);\n  }\n\n  return type;\n}\n/**\n * These types may describe types which may be leaf values.\n */\n\nexport function isLeafType(type) {\n  return isScalarType(type) || isEnumType(type);\n}\nexport function assertLeafType(type) {\n  if (!isLeafType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL leaf type.`);\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isCompositeType(type) {\n  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);\n}\nexport function assertCompositeType(type) {\n  if (!isCompositeType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL composite type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isAbstractType(type) {\n  return isInterfaceType(type) || isUnionType(type);\n}\nexport function assertAbstractType(type) {\n  if (!isAbstractType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL abstract type.`);\n  }\n\n  return type;\n}\n/**\n * List Type Wrapper\n *\n * A list is a wrapping type which points to another type.\n * Lists are often created within the context of defining the fields of\n * an object type.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     parents: { type: new GraphQLList(PersonType) },\n *     children: { type: new GraphQLList(PersonType) },\n *   })\n * })\n * ```\n */\n\nexport class GraphQLList {\n  constructor(ofType) {\n    isType(ofType) ||\n      devAssert(false, `Expected ${inspect(ofType)} to be a GraphQL type.`);\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLList';\n  }\n\n  toString() {\n    return '[' + String(this.ofType) + ']';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n/**\n * Non-Null Type Wrapper\n *\n * A non-null is a wrapping type which points to another type.\n * Non-null types enforce that their values are never null and can ensure\n * an error is raised if this ever occurs during a request. It is useful for\n * fields which you can make a strong guarantee on non-nullability, for example\n * usually the id field of a database row will never be null.\n *\n * Example:\n *\n * ```ts\n * const RowType = new GraphQLObjectType({\n *   name: 'Row',\n *   fields: () => ({\n *     id: { type: new GraphQLNonNull(GraphQLString) },\n *   })\n * })\n * ```\n * Note: the enforcement of non-nullability occurs within the executor.\n */\n\nexport class GraphQLNonNull {\n  constructor(ofType) {\n    isNullableType(ofType) ||\n      devAssert(\n        false,\n        `Expected ${inspect(ofType)} to be a GraphQL nullable type.`,\n      );\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLNonNull';\n  }\n\n  toString() {\n    return String(this.ofType) + '!';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n/**\n * These types wrap and modify other types\n */\n\nexport function isWrappingType(type) {\n  return isListType(type) || isNonNullType(type);\n}\nexport function assertWrappingType(type) {\n  if (!isWrappingType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL wrapping type.`);\n  }\n\n  return type;\n}\n/**\n * These types can all accept null as a value.\n */\n\nexport function isNullableType(type) {\n  return isType(type) && !isNonNullType(type);\n}\nexport function assertNullableType(type) {\n  if (!isNullableType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL nullable type.`);\n  }\n\n  return type;\n}\nexport function getNullableType(type) {\n  if (type) {\n    return isNonNullType(type) ? type.ofType : type;\n  }\n}\n/**\n * These named types do not include modifiers like List or NonNull.\n */\n\nexport function isNamedType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type)\n  );\n}\nexport function assertNamedType(type) {\n  if (!isNamedType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL named type.`);\n  }\n\n  return type;\n}\nexport function getNamedType(type) {\n  if (type) {\n    let unwrappedType = type;\n\n    while (isWrappingType(unwrappedType)) {\n      unwrappedType = unwrappedType.ofType;\n    }\n\n    return unwrappedType;\n  }\n}\n/**\n * Used while defining GraphQL types to allow for circular references in\n * otherwise immutable type definitions.\n */\n\nexport function resolveReadonlyArrayThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\nexport function resolveObjMapThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Scalar Type Definition\n *\n * The leaf values of any request and input values to arguments are\n * Scalars (or Enums) and are defined with a name and a series of functions\n * used to parse input from ast or variables and to ensure validity.\n *\n * If a type's serialize function returns `null` or does not return a value\n * (i.e. it returns `undefined`) then an error will be raised and a `null`\n * value will be returned in the response. It is always better to validate\n *\n * Example:\n *\n * ```ts\n * const OddType = new GraphQLScalarType({\n *   name: 'Odd',\n *   serialize(value) {\n *     if (!Number.isFinite(value)) {\n *       throw new Error(\n *         `Scalar \"Odd\" cannot represent \"${value}\" since it is not a finite number.`,\n *       );\n *     }\n *\n *     if (value % 2 === 0) {\n *       throw new Error(`Scalar \"Odd\" cannot represent \"${value}\" since it is even.`);\n *     }\n *     return value;\n *   }\n * });\n * ```\n */\nexport class GraphQLScalarType {\n  constructor(config) {\n    var _config$parseValue,\n      _config$serialize,\n      _config$parseLiteral,\n      _config$extensionASTN;\n\n    const parseValue =\n      (_config$parseValue = config.parseValue) !== null &&\n      _config$parseValue !== void 0\n        ? _config$parseValue\n        : identityFunc;\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.specifiedByURL = config.specifiedByURL;\n    this.serialize =\n      (_config$serialize = config.serialize) !== null &&\n      _config$serialize !== void 0\n        ? _config$serialize\n        : identityFunc;\n    this.parseValue = parseValue;\n    this.parseLiteral =\n      (_config$parseLiteral = config.parseLiteral) !== null &&\n      _config$parseLiteral !== void 0\n        ? _config$parseLiteral\n        : (node, variables) => parseValue(valueFromASTUntyped(node, variables));\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    config.specifiedByURL == null ||\n      typeof config.specifiedByURL === 'string' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"specifiedByURL\" as a string, ` +\n          `but got: ${inspect(config.specifiedByURL)}.`,\n      );\n    config.serialize == null ||\n      typeof config.serialize === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"serialize\" function. If this custom Scalar is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" functions are also provided.`,\n      );\n\n    if (config.parseLiteral) {\n      (typeof config.parseValue === 'function' &&\n        typeof config.parseLiteral === 'function') ||\n        devAssert(\n          false,\n          `${this.name} must provide both \"parseValue\" and \"parseLiteral\" functions.`,\n        );\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLScalarType';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      specifiedByURL: this.specifiedByURL,\n      serialize: this.serialize,\n      parseValue: this.parseValue,\n      parseLiteral: this.parseLiteral,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Object Type Definition\n *\n * Almost all of the GraphQL types you define will be object types. Object types\n * have a name, but most importantly describe their fields.\n *\n * Example:\n *\n * ```ts\n * const AddressType = new GraphQLObjectType({\n *   name: 'Address',\n *   fields: {\n *     street: { type: GraphQLString },\n *     number: { type: GraphQLInt },\n *     formatted: {\n *       type: GraphQLString,\n *       resolve(obj) {\n *         return obj.number + ' ' + obj.street\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * When two types need to refer to each other, or a type needs to refer to\n * itself in a field, you can use a function expression (aka a closure or a\n * thunk) to supply the fields lazily.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     name: { type: GraphQLString },\n *     bestFriend: { type: PersonType },\n *   })\n * });\n * ```\n */\nexport class GraphQLObjectType {\n  constructor(config) {\n    var _config$extensionASTN2;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.isTypeOf = config.isTypeOf;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN2 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN2 !== void 0\n        ? _config$extensionASTN2\n        : [];\n\n    this._fields = () => defineFieldMap(config);\n\n    this._interfaces = () => defineInterfaces(config);\n\n    config.isTypeOf == null ||\n      typeof config.isTypeOf === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"isTypeOf\" as a function, ` +\n          `but got: ${inspect(config.isTypeOf)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      isTypeOf: this.isTypeOf,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineInterfaces(config) {\n  var _config$interfaces;\n\n  const interfaces = resolveReadonlyArrayThunk(\n    (_config$interfaces = config.interfaces) !== null &&\n      _config$interfaces !== void 0\n      ? _config$interfaces\n      : [],\n  );\n  Array.isArray(interfaces) ||\n    devAssert(\n      false,\n      `${config.name} interfaces must be an Array or a function which returns an Array.`,\n    );\n  return interfaces;\n}\n\nfunction defineFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) ||\n    devAssert(\n      false,\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\n    );\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\n    var _fieldConfig$args;\n\n    isPlainObj(fieldConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field config must be an object.`,\n      );\n    fieldConfig.resolve == null ||\n      typeof fieldConfig.resolve === 'function' ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field resolver must be a function if ` +\n          `provided, but got: ${inspect(fieldConfig.resolve)}.`,\n      );\n    const argsConfig =\n      (_fieldConfig$args = fieldConfig.args) !== null &&\n      _fieldConfig$args !== void 0\n        ? _fieldConfig$args\n        : {};\n    isPlainObj(argsConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} args must be an object with argument names as keys.`,\n      );\n    return {\n      name: assertName(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      args: defineArguments(argsConfig),\n      resolve: fieldConfig.resolve,\n      subscribe: fieldConfig.subscribe,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode,\n    };\n  });\n}\n\nexport function defineArguments(config) {\n  return Object.entries(config).map(([argName, argConfig]) => ({\n    name: assertName(argName),\n    description: argConfig.description,\n    type: argConfig.type,\n    defaultValue: argConfig.defaultValue,\n    deprecationReason: argConfig.deprecationReason,\n    extensions: toObjMap(argConfig.extensions),\n    astNode: argConfig.astNode,\n  }));\n}\n\nfunction isPlainObj(obj) {\n  return isObjectLike(obj) && !Array.isArray(obj);\n}\n\nfunction fieldsToFieldsConfig(fields) {\n  return mapValue(fields, (field) => ({\n    description: field.description,\n    type: field.type,\n    args: argsToArgsConfig(field.args),\n    resolve: field.resolve,\n    subscribe: field.subscribe,\n    deprecationReason: field.deprecationReason,\n    extensions: field.extensions,\n    astNode: field.astNode,\n  }));\n}\n/**\n * @internal\n */\n\nexport function argsToArgsConfig(args) {\n  return keyValMap(\n    args,\n    (arg) => arg.name,\n    (arg) => ({\n      description: arg.description,\n      type: arg.type,\n      defaultValue: arg.defaultValue,\n      deprecationReason: arg.deprecationReason,\n      extensions: arg.extensions,\n      astNode: arg.astNode,\n    }),\n  );\n}\nexport function isRequiredArgument(arg) {\n  return isNonNullType(arg.type) && arg.defaultValue === undefined;\n}\n\n/**\n * Interface Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Interface type\n * is used to describe what types are possible, what fields are in common across\n * all types, as well as a function to determine which type is actually used\n * when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const EntityType = new GraphQLInterfaceType({\n *   name: 'Entity',\n *   fields: {\n *     name: { type: GraphQLString }\n *   }\n * });\n * ```\n */\nexport class GraphQLInterfaceType {\n  constructor(config) {\n    var _config$extensionASTN3;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN3 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN3 !== void 0\n        ? _config$extensionASTN3\n        : [];\n    this._fields = defineFieldMap.bind(undefined, config);\n    this._interfaces = defineInterfaces.bind(undefined, config);\n    config.resolveType == null ||\n      typeof config.resolveType === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"resolveType\" as a function, ` +\n          `but got: ${inspect(config.resolveType)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInterfaceType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Union Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Union type\n * is used to describe what types are possible as well as providing a function\n * to determine which type is actually used when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const PetType = new GraphQLUnionType({\n *   name: 'Pet',\n *   types: [ DogType, CatType ],\n *   resolveType(value) {\n *     if (value instanceof Dog) {\n *       return DogType;\n *     }\n *     if (value instanceof Cat) {\n *       return CatType;\n *     }\n *   }\n * });\n * ```\n */\nexport class GraphQLUnionType {\n  constructor(config) {\n    var _config$extensionASTN4;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN4 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN4 !== void 0\n        ? _config$extensionASTN4\n        : [];\n    this._types = defineTypes.bind(undefined, config);\n    config.resolveType == null ||\n      typeof config.resolveType === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"resolveType\" as a function, ` +\n          `but got: ${inspect(config.resolveType)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLUnionType';\n  }\n\n  getTypes() {\n    if (typeof this._types === 'function') {\n      this._types = this._types();\n    }\n\n    return this._types;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      types: this.getTypes(),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineTypes(config) {\n  const types = resolveReadonlyArrayThunk(config.types);\n  Array.isArray(types) ||\n    devAssert(\n      false,\n      `Must provide Array of types or a function which returns such an array for Union ${config.name}.`,\n    );\n  return types;\n}\n\n/**\n * Enum Type Definition\n *\n * Some leaf values of requests and input values are Enums. GraphQL serializes\n * Enum values as strings, however internally Enums can be represented by any\n * kind of type, often integers.\n *\n * Example:\n *\n * ```ts\n * const RGBType = new GraphQLEnumType({\n *   name: 'RGB',\n *   values: {\n *     RED: { value: 0 },\n *     GREEN: { value: 1 },\n *     BLUE: { value: 2 }\n *   }\n * });\n * ```\n *\n * Note: If a value is not provided in a definition, the name of the enum value\n * will be used as its internal value.\n */\nexport class GraphQLEnumType {\n  /* <T> */\n  constructor(config) {\n    var _config$extensionASTN5;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN5 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN5 !== void 0\n        ? _config$extensionASTN5\n        : [];\n    this._values =\n      typeof config.values === 'function'\n        ? config.values\n        : defineEnumValues(this.name, config.values);\n    this._valueLookup = null;\n    this._nameLookup = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLEnumType';\n  }\n\n  getValues() {\n    if (typeof this._values === 'function') {\n      this._values = defineEnumValues(this.name, this._values());\n    }\n\n    return this._values;\n  }\n\n  getValue(name) {\n    if (this._nameLookup === null) {\n      this._nameLookup = keyMap(this.getValues(), (value) => value.name);\n    }\n\n    return this._nameLookup[name];\n  }\n\n  serialize(outputValue) {\n    if (this._valueLookup === null) {\n      this._valueLookup = new Map(\n        this.getValues().map((enumValue) => [enumValue.value, enumValue]),\n      );\n    }\n\n    const enumValue = this._valueLookup.get(outputValue);\n\n    if (enumValue === undefined) {\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent value: ${inspect(outputValue)}`,\n      );\n    }\n\n    return enumValue.name;\n  }\n\n  parseValue(inputValue) /* T */\n  {\n    if (typeof inputValue !== 'string') {\n      const valueStr = inspect(inputValue);\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent non-string value: ${valueStr}.` +\n          didYouMeanEnumValue(this, valueStr),\n      );\n    }\n\n    const enumValue = this.getValue(inputValue);\n\n    if (enumValue == null) {\n      throw new GraphQLError(\n        `Value \"${inputValue}\" does not exist in \"${this.name}\" enum.` +\n          didYouMeanEnumValue(this, inputValue),\n      );\n    }\n\n    return enumValue.value;\n  }\n\n  parseLiteral(valueNode, _variables) /* T */\n  {\n    // Note: variables will be resolved to a value before calling this function.\n    if (valueNode.kind !== Kind.ENUM) {\n      const valueStr = print(valueNode);\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent non-enum value: ${valueStr}.` +\n          didYouMeanEnumValue(this, valueStr),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const enumValue = this.getValue(valueNode.value);\n\n    if (enumValue == null) {\n      const valueStr = print(valueNode);\n      throw new GraphQLError(\n        `Value \"${valueStr}\" does not exist in \"${this.name}\" enum.` +\n          didYouMeanEnumValue(this, valueStr),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return enumValue.value;\n  }\n\n  toConfig() {\n    const values = keyValMap(\n      this.getValues(),\n      (value) => value.name,\n      (value) => ({\n        description: value.description,\n        value: value.value,\n        deprecationReason: value.deprecationReason,\n        extensions: value.extensions,\n        astNode: value.astNode,\n      }),\n    );\n    return {\n      name: this.name,\n      description: this.description,\n      values,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction didYouMeanEnumValue(enumType, unknownValueStr) {\n  const allNames = enumType.getValues().map((value) => value.name);\n  const suggestedValues = suggestionList(unknownValueStr, allNames);\n  return didYouMean('the enum value', suggestedValues);\n}\n\nfunction defineEnumValues(typeName, valueMap) {\n  isPlainObj(valueMap) ||\n    devAssert(\n      false,\n      `${typeName} values must be an object with value names as keys.`,\n    );\n  return Object.entries(valueMap).map(([valueName, valueConfig]) => {\n    isPlainObj(valueConfig) ||\n      devAssert(\n        false,\n        `${typeName}.${valueName} must refer to an object with a \"value\" key ` +\n          `representing an internal value but got: ${inspect(valueConfig)}.`,\n      );\n    return {\n      name: assertEnumValueName(valueName),\n      description: valueConfig.description,\n      value: valueConfig.value !== undefined ? valueConfig.value : valueName,\n      deprecationReason: valueConfig.deprecationReason,\n      extensions: toObjMap(valueConfig.extensions),\n      astNode: valueConfig.astNode,\n    };\n  });\n}\n\n/**\n * Input Object Type Definition\n *\n * An input object defines a structured collection of fields which may be\n * supplied to a field argument.\n *\n * Using `NonNull` will ensure that a value must be provided by the query\n *\n * Example:\n *\n * ```ts\n * const GeoPoint = new GraphQLInputObjectType({\n *   name: 'GeoPoint',\n *   fields: {\n *     lat: { type: new GraphQLNonNull(GraphQLFloat) },\n *     lon: { type: new GraphQLNonNull(GraphQLFloat) },\n *     alt: { type: GraphQLFloat, defaultValue: 0 },\n *   }\n * });\n * ```\n */\nexport class GraphQLInputObjectType {\n  constructor(config) {\n    var _config$extensionASTN6, _config$isOneOf;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN6 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN6 !== void 0\n        ? _config$extensionASTN6\n        : [];\n    this.isOneOf =\n      (_config$isOneOf = config.isOneOf) !== null && _config$isOneOf !== void 0\n        ? _config$isOneOf\n        : false;\n    this._fields = defineInputFieldMap.bind(undefined, config);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInputObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  toConfig() {\n    const fields = mapValue(this.getFields(), (field) => ({\n      description: field.description,\n      type: field.type,\n      defaultValue: field.defaultValue,\n      deprecationReason: field.deprecationReason,\n      extensions: field.extensions,\n      astNode: field.astNode,\n    }));\n    return {\n      name: this.name,\n      description: this.description,\n      fields,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n      isOneOf: this.isOneOf,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineInputFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) ||\n    devAssert(\n      false,\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\n    );\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\n    !('resolve' in fieldConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`,\n      );\n    return {\n      name: assertName(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      defaultValue: fieldConfig.defaultValue,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode,\n    };\n  });\n}\n\nexport function isRequiredInputField(field) {\n  return isNonNullType(field.type) && field.defaultValue === undefined;\n}\n", "import {\n  isAbstractType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from '../type/definition.mjs';\n\n/**\n * Provided two types, return true if the types are equal (invariant).\n */\nexport function isEqualType(typeA, typeB) {\n  // Equivalent types are equal.\n  if (typeA === typeB) {\n    return true;\n  } // If either type is non-null, the other must also be non-null.\n\n  if (isNonNullType(typeA) && isNonNullType(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // If either type is a list, the other must also be a list.\n\n  if (isListType(typeA) && isListType(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // Otherwise the types are not equal.\n\n  return false;\n}\n/**\n * Provided a type and a super type, return true if the first type is either\n * equal or a subset of the second super type (covariant).\n */\n\nexport function isTypeSubTypeOf(schema, maybeSubType, superType) {\n  // Equivalent type is a valid subtype\n  if (maybeSubType === superType) {\n    return true;\n  } // If superType is non-null, maybeSubType must also be non-null.\n\n  if (isNonNullType(superType)) {\n    if (isNonNullType(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if (isNonNullType(maybeSubType)) {\n    // If superType is nullable, maybeSubType may be non-null or nullable.\n    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);\n  } // If superType type is a list, maybeSubType type must also be a list.\n\n  if (isListType(superType)) {\n    if (isListType(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if (isListType(maybeSubType)) {\n    // If superType is not a list, maybeSubType must also be not a list.\n    return false;\n  } // If superType type is an abstract type, check if it is super type of maybeSubType.\n  // Otherwise, the child type is not a valid subtype of the parent type.\n\n  return (\n    isAbstractType(superType) &&\n    (isInterfaceType(maybeSubType) || isObjectType(maybeSubType)) &&\n    schema.isSubType(superType, maybeSubType)\n  );\n}\n/**\n * Provided two composite types, determine if they \"overlap\". Two composite\n * types overlap when the Sets of possible concrete types for each intersect.\n *\n * This is often used to determine if a fragment of a given type could possibly\n * be visited in a context of another type.\n *\n * This function is commutative.\n */\n\nexport function doTypesOverlap(schema, typeA, typeB) {\n  // Equivalent types overlap\n  if (typeA === typeB) {\n    return true;\n  }\n\n  if (isAbstractType(typeA)) {\n    if (isAbstractType(typeB)) {\n      // If both types are abstract, then determine if there is any intersection\n      // between possible concrete types of each.\n      return schema\n        .getPossibleTypes(typeA)\n        .some((type) => schema.isSubType(typeB, type));\n    } // Determine if the latter type is a possible concrete type of the former.\n\n    return schema.isSubType(typeA, typeB);\n  }\n\n  if (isAbstractType(typeB)) {\n    // Determine if the former type is a possible concrete type of the latter.\n    return schema.isSubType(typeB, typeA);\n  } // Otherwise the types do not overlap.\n\n  return false;\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { GraphQLScalarType } from './definition.mjs';\n/**\n * Maximum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe up-to 2^53 - 1\n * */\n\nexport const GRAPHQL_MAX_INT = 2147483647;\n/**\n * Minimum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe starting at -(2^53 - 1)\n * */\n\nexport const GRAPHQL_MIN_INT = -2147483648;\nexport const GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description:\n    'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isInteger(num)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(coercedValue)}`,\n      );\n    }\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        'Int cannot represent non 32-bit signed integer value: ' +\n          inspect(coercedValue),\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(inputValue)}`,\n      );\n    }\n\n    if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${inputValue}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const num = parseInt(valueNode.value, 10);\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return num;\n  },\n});\nexport const GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description:\n    'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isFinite(num)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(coercedValue)}`,\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.FLOAT && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${print(valueNode)}`,\n        valueNode,\n      );\n    }\n\n    return parseFloat(valueNode.value);\n  },\n});\nexport const GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description:\n    'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n    // attempt to coerce object, function, symbol, or other types as strings.\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 'true' : 'false';\n    }\n\n    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {\n      return coercedValue.toString();\n    }\n\n    throw new GraphQLError(\n      `String cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'string') {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue;\n    }\n\n    if (Number.isFinite(coercedValue)) {\n      return coercedValue !== 0;\n    }\n\n    throw new GraphQLError(\n      `Boolean cannot represent a non boolean value: ${inspect(coercedValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'boolean') {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.BOOLEAN) {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description:\n    'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (Number.isInteger(coercedValue)) {\n      return String(coercedValue);\n    }\n\n    throw new GraphQLError(\n      `ID cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue === 'string') {\n      return inputValue;\n    }\n\n    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {\n      return inputValue.toString();\n    }\n\n    throw new GraphQLError(`ID cannot represent value: ${inspect(inputValue)}`);\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        'ID cannot represent a non-string and non-integer value: ' +\n          print(valueNode),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const specifiedScalarTypes = Object.freeze([\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n]);\nexport function isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(({ name }) => type.name === name);\n} // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(outputValue) {\n  if (isObjectLike(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      const valueOfResult = outputValue.valueOf();\n\n      if (!isObjectLike(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { assertName } from './assertName.mjs';\nimport {\n  argsToArgsConfig,\n  defineArguments,\n  GraphQLNonNull,\n} from './definition.mjs';\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\n/**\n * Test if the given value is a GraphQL directive.\n */\n\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\nexport function assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(\n      `Expected ${inspect(directive)} to be a GraphQL directive.`,\n    );\n  }\n\n  return directive;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\nexport class GraphQLDirective {\n  constructor(config) {\n    var _config$isRepeatable, _config$args;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable =\n      (_config$isRepeatable = config.isRepeatable) !== null &&\n      _config$isRepeatable !== void 0\n        ? _config$isRepeatable\n        : false;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    Array.isArray(config.locations) ||\n      devAssert(false, `@${config.name} locations must be an Array.`);\n    const args =\n      (_config$args = config.args) !== null && _config$args !== void 0\n        ? _config$args\n        : {};\n    (isObjectLike(args) && !Array.isArray(args)) ||\n      devAssert(\n        false,\n        `@${config.name} args must be an object with argument names as keys.`,\n      );\n    this.args = defineArguments(args);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLDirective';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: argsToArgsConfig(this.args),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode,\n    };\n  }\n\n  toString() {\n    return '@' + this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Used to conditionally include fields or fragments.\n */\nexport const GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description:\n    'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.',\n    },\n  },\n});\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\n\nexport const GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description:\n    'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.',\n    },\n  },\n});\n/**\n * Constant string used for default reason for a deprecation.\n */\n\nexport const DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\n\nexport const GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [\n    DirectiveLocation.FIELD_DEFINITION,\n    DirectiveLocation.ARGUMENT_DEFINITION,\n    DirectiveLocation.INPUT_FIELD_DEFINITION,\n    DirectiveLocation.ENUM_VALUE,\n  ],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description:\n        'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON,\n    },\n  },\n});\n/**\n * Used to provide a URL for specifying the behavior of custom scalar definitions.\n */\n\nexport const GraphQLSpecifiedByDirective = new GraphQLDirective({\n  name: 'specifiedBy',\n  description: 'Exposes a URL that specifies the behavior of this scalar.',\n  locations: [DirectiveLocation.SCALAR],\n  args: {\n    url: {\n      type: new GraphQLNonNull(GraphQLString),\n      description: 'The URL that specifies the behavior of this scalar.',\n    },\n  },\n});\n/**\n * Used to indicate an Input Object is a OneOf Input Object.\n */\n\nexport const GraphQLOneOfDirective = new GraphQLDirective({\n  name: 'oneOf',\n  description:\n    'Indicates exactly one field must be supplied and this field must not be `null`.',\n  locations: [DirectiveLocation.INPUT_OBJECT],\n  args: {},\n});\n/**\n * The full list of specified directives.\n */\n\nexport const specifiedDirectives = Object.freeze([\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective,\n  GraphQLOneOfDirective,\n]);\nexport function isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(({ name }) => name === directive.name);\n}\n", "/**\n * Returns true if the provided object is an Object (i.e. not a string literal)\n * and implements the Iterator protocol.\n *\n * This may be used in place of [Array.isArray()][isArray] to determine if\n * an object should be iterated-over e.g. Array, Map, Set, Int8Array,\n * TypedArray, etc. but excludes string literals.\n *\n * @example\n * ```ts\n * isIterableObject([ 1, 2, 3 ]) // true\n * isIterableObject(new Map()) // true\n * isIterableObject('ABC') // false\n * isIterableObject({ key: 'value' }) // false\n * isIterableObject({ length: 1, 0: 'Alpha' }) // false\n * ```\n */\nexport function isIterableObject(maybeIterable) {\n  return (\n    typeof maybeIterable === 'object' &&\n    typeof (maybeIterable === null || maybeIterable === void 0\n      ? void 0\n      : maybeIterable[Symbol.iterator]) === 'function'\n  );\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\nimport { GraphQLID } from '../type/scalars.mjs';\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using suggested GraphQLInputType. For example:\n *\n *     astFromValue(\"value\", GraphQLString)\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Unknown       | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    const astValue = astFromValue(value, type.ofType);\n\n    if (\n      (astValue === null || astValue === void 0 ? void 0 : astValue.kind) ===\n      Kind.NULL\n    ) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL,\n    };\n  } // undefined\n\n  if (value === undefined) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (isIterableObject(value)) {\n      const valuesNodes = [];\n\n      for (const item of value) {\n        const itemNode = astFromValue(item, itemType);\n\n        if (itemNode != null) {\n          valuesNodes.push(itemNode);\n        }\n      }\n\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes,\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(value)) {\n      return null;\n    }\n\n    const fieldNodes = [];\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldValue = astFromValue(value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: field.name,\n          },\n          value: fieldValue,\n        });\n      }\n    }\n\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes,\n    };\n  }\n\n  if (isLeafType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    const serialized = type.serialize(value);\n\n    if (serialized == null) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized,\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n    if (typeof serialized === 'number' && Number.isFinite(serialized)) {\n      const stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum)\n        ? {\n            kind: Kind.INT,\n            value: stringNum,\n          }\n        : {\n            kind: Kind.FLOAT,\n            value: stringNum,\n          };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized,\n        };\n      } // ID types can use Int literals.\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized,\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized,\n      };\n    }\n\n    throw new TypeError(`Cannot convert value to AST: ${inspect(serialized)}.`);\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nconst integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { print } from '../language/printer.mjs';\nimport { astFromValue } from '../utilities/astFromValue.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  isAbstractType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from './definition.mjs';\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\nexport const __Schema = new GraphQLObjectType({\n  name: '__Schema',\n  description:\n    'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',\n  fields: () => ({\n    description: {\n      type: GraphQLString,\n      resolve: (schema) => schema.description,\n    },\n    types: {\n      description: 'A list of all types supported by this server.',\n      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Type))),\n\n      resolve(schema) {\n        return Object.values(schema.getTypeMap());\n      },\n    },\n    queryType: {\n      description: 'The type that query operations will be rooted at.',\n      type: new GraphQLNonNull(__Type),\n      resolve: (schema) => schema.getQueryType(),\n    },\n    mutationType: {\n      description:\n        'If this server supports mutation, the type that mutation operations will be rooted at.',\n      type: __Type,\n      resolve: (schema) => schema.getMutationType(),\n    },\n    subscriptionType: {\n      description:\n        'If this server support subscription, the type that subscription operations will be rooted at.',\n      type: __Type,\n      resolve: (schema) => schema.getSubscriptionType(),\n    },\n    directives: {\n      description: 'A list of all directives supported by this server.',\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__Directive)),\n      ),\n      resolve: (schema) => schema.getDirectives(),\n    },\n  }),\n});\nexport const __Directive = new GraphQLObjectType({\n  name: '__Directive',\n  description:\n    \"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\\n\\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.\",\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (directive) => directive.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (directive) => directive.description,\n    },\n    isRepeatable: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (directive) => directive.isRepeatable,\n    },\n    locations: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__DirectiveLocation)),\n      ),\n      resolve: (directive) => directive.locations,\n    },\n    args: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__InputValue)),\n      ),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n  }),\n});\nexport const __DirectiveLocation = new GraphQLEnumType({\n  name: '__DirectiveLocation',\n  description:\n    'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.',\n    },\n    MUTATION: {\n      value: DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.',\n    },\n    SUBSCRIPTION: {\n      value: DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.',\n    },\n    FIELD: {\n      value: DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.',\n    },\n    FRAGMENT_DEFINITION: {\n      value: DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.',\n    },\n    FRAGMENT_SPREAD: {\n      value: DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.',\n    },\n    INLINE_FRAGMENT: {\n      value: DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.',\n    },\n    VARIABLE_DEFINITION: {\n      value: DirectiveLocation.VARIABLE_DEFINITION,\n      description: 'Location adjacent to a variable definition.',\n    },\n    SCHEMA: {\n      value: DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.',\n    },\n    SCALAR: {\n      value: DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.',\n    },\n    OBJECT: {\n      value: DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.',\n    },\n    FIELD_DEFINITION: {\n      value: DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.',\n    },\n    ARGUMENT_DEFINITION: {\n      value: DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.',\n    },\n    INTERFACE: {\n      value: DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.',\n    },\n    UNION: {\n      value: DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.',\n    },\n    ENUM: {\n      value: DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.',\n    },\n    ENUM_VALUE: {\n      value: DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.',\n    },\n    INPUT_OBJECT: {\n      value: DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.',\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.',\n    },\n  },\n});\nexport const __Type = new GraphQLObjectType({\n  name: '__Type',\n  description:\n    'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\\n\\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.',\n  fields: () => ({\n    kind: {\n      type: new GraphQLNonNull(__TypeKind),\n\n      resolve(type) {\n        if (isScalarType(type)) {\n          return TypeKind.SCALAR;\n        }\n\n        if (isObjectType(type)) {\n          return TypeKind.OBJECT;\n        }\n\n        if (isInterfaceType(type)) {\n          return TypeKind.INTERFACE;\n        }\n\n        if (isUnionType(type)) {\n          return TypeKind.UNION;\n        }\n\n        if (isEnumType(type)) {\n          return TypeKind.ENUM;\n        }\n\n        if (isInputObjectType(type)) {\n          return TypeKind.INPUT_OBJECT;\n        }\n\n        if (isListType(type)) {\n          return TypeKind.LIST;\n        }\n\n        if (isNonNullType(type)) {\n          return TypeKind.NON_NULL;\n        }\n        /* c8 ignore next 3 */\n        // Not reachable, all possible types have been considered)\n\n        false || invariant(false, `Unexpected type: \"${inspect(type)}\".`);\n      },\n    },\n    name: {\n      type: GraphQLString,\n      resolve: (type) => ('name' in type ? type.name : undefined),\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (\n        type, // FIXME: add test case\n      ) =>\n        /* c8 ignore next */\n        'description' in type ? type.description : undefined,\n    },\n    specifiedByURL: {\n      type: GraphQLString,\n      resolve: (obj) =>\n        'specifiedByURL' in obj ? obj.specifiedByURL : undefined,\n    },\n    fields: {\n      type: new GraphQLList(new GraphQLNonNull(__Field)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isObjectType(type) || isInterfaceType(type)) {\n          const fields = Object.values(type.getFields());\n          return includeDeprecated\n            ? fields\n            : fields.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    interfaces: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n\n      resolve(type) {\n        if (isObjectType(type) || isInterfaceType(type)) {\n          return type.getInterfaces();\n        }\n      },\n    },\n    possibleTypes: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n\n      resolve(type, _args, _context, { schema }) {\n        if (isAbstractType(type)) {\n          return schema.getPossibleTypes(type);\n        }\n      },\n    },\n    enumValues: {\n      type: new GraphQLList(new GraphQLNonNull(__EnumValue)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isEnumType(type)) {\n          const values = type.getValues();\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    inputFields: {\n      type: new GraphQLList(new GraphQLNonNull(__InputValue)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isInputObjectType(type)) {\n          const values = Object.values(type.getFields());\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    ofType: {\n      type: __Type,\n      resolve: (type) => ('ofType' in type ? type.ofType : undefined),\n    },\n    isOneOf: {\n      type: GraphQLBoolean,\n      resolve: (type) => {\n        if (isInputObjectType(type)) {\n          return type.isOneOf;\n        }\n      },\n    },\n  }),\n});\nexport const __Field = new GraphQLObjectType({\n  name: '__Field',\n  description:\n    'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (field) => field.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (field) => field.description,\n    },\n    args: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__InputValue)),\n      ),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n    type: {\n      type: new GraphQLNonNull(__Type),\n      resolve: (field) => field.type,\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (field) => field.deprecationReason,\n    },\n  }),\n});\nexport const __InputValue = new GraphQLObjectType({\n  name: '__InputValue',\n  description:\n    'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (inputValue) => inputValue.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (inputValue) => inputValue.description,\n    },\n    type: {\n      type: new GraphQLNonNull(__Type),\n      resolve: (inputValue) => inputValue.type,\n    },\n    defaultValue: {\n      type: GraphQLString,\n      description:\n        'A GraphQL-formatted string representing the default value for this input value.',\n\n      resolve(inputValue) {\n        const { type, defaultValue } = inputValue;\n        const valueAST = astFromValue(defaultValue, type);\n        return valueAST ? print(valueAST) : null;\n      },\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (obj) => obj.deprecationReason,\n    },\n  }),\n});\nexport const __EnumValue = new GraphQLObjectType({\n  name: '__EnumValue',\n  description:\n    'One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (enumValue) => enumValue.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (enumValue) => enumValue.description,\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (enumValue) => enumValue.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (enumValue) => enumValue.deprecationReason,\n    },\n  }),\n});\nvar TypeKind;\n\n(function (TypeKind) {\n  TypeKind['SCALAR'] = 'SCALAR';\n  TypeKind['OBJECT'] = 'OBJECT';\n  TypeKind['INTERFACE'] = 'INTERFACE';\n  TypeKind['UNION'] = 'UNION';\n  TypeKind['ENUM'] = 'ENUM';\n  TypeKind['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  TypeKind['LIST'] = 'LIST';\n  TypeKind['NON_NULL'] = 'NON_NULL';\n})(TypeKind || (TypeKind = {}));\n\nexport { TypeKind };\nexport const __TypeKind = new GraphQLEnumType({\n  name: '__TypeKind',\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.',\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description:\n        'Indicates this type is an object. `fields` and `interfaces` are valid fields.',\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description:\n        'Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.',\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description:\n        'Indicates this type is a union. `possibleTypes` is a valid field.',\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description:\n        'Indicates this type is an enum. `enumValues` is a valid field.',\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description:\n        'Indicates this type is an input object. `inputFields` is a valid field.',\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. `ofType` is a valid field.',\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description:\n        'Indicates this type is a non-null. `ofType` is a valid field.',\n    },\n  },\n});\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nexport const SchemaMetaFieldDef = {\n  name: '__schema',\n  type: new GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: (_source, _args, _context, { schema }) => schema,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [\n    {\n      name: 'name',\n      description: undefined,\n      type: new GraphQLNonNull(GraphQLString),\n      defaultValue: undefined,\n      deprecationReason: undefined,\n      extensions: Object.create(null),\n      astNode: undefined,\n    },\n  ],\n  resolve: (_source, { name }, _context, { schema }) => schema.getType(name),\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: new GraphQLNonNull(GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: (_source, _args, _context, { parentType }) => parentType.name,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const introspectionTypes = Object.freeze([\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind,\n]);\nexport function isIntrospectionType(type) {\n  return introspectionTypes.some(({ name }) => type.name === name);\n}\n", "import { Kind } from '../language/kinds.mjs';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition.mjs';\nexport function typeFromAST(schema, typeNode) {\n  switch (typeNode.kind) {\n    case Kind.LIST_TYPE: {\n      const innerType = typeFromAST(schema, typeNode.type);\n      return innerType && new GraphQLList(innerType);\n    }\n\n    case Kind.NON_NULL_TYPE: {\n      const innerType = typeFromAST(schema, typeNode.type);\n      return innerType && new GraphQLNonNull(innerType);\n    }\n\n    case Kind.NAMED_TYPE:\n      return schema.getType(typeNode.name.value);\n  }\n}\n", "import { Kind } from './kinds.mjs';\nexport function isDefinitionNode(node) {\n  return (\n    isExecutableDefinitionNode(node) ||\n    isTypeSystemDefinitionNode(node) ||\n    isTypeSystemExtensionNode(node)\n  );\n}\nexport function isExecutableDefinitionNode(node) {\n  return (\n    node.kind === Kind.OPERATION_DEFINITION ||\n    node.kind === Kind.FRAGMENT_DEFINITION\n  );\n}\nexport function isSelectionNode(node) {\n  return (\n    node.kind === Kind.FIELD ||\n    node.kind === Kind.FRAGMENT_SPREAD ||\n    node.kind === Kind.INLINE_FRAGMENT\n  );\n}\nexport function isValueNode(node) {\n  return (\n    node.kind === Kind.VARIABLE ||\n    node.kind === Kind.INT ||\n    node.kind === Kind.FLOAT ||\n    node.kind === Kind.STRING ||\n    node.kind === Kind.BOOLEAN ||\n    node.kind === Kind.NULL ||\n    node.kind === Kind.ENUM ||\n    node.kind === Kind.LIST ||\n    node.kind === Kind.OBJECT\n  );\n}\nexport function isConstValueNode(node) {\n  return (\n    isValueNode(node) &&\n    (node.kind === Kind.LIST\n      ? node.values.some(isConstValueNode)\n      : node.kind === Kind.OBJECT\n      ? node.fields.some((field) => isConstValueNode(field.value))\n      : node.kind !== Kind.VARIABLE)\n  );\n}\nexport function isTypeNode(node) {\n  return (\n    node.kind === Kind.NAMED_TYPE ||\n    node.kind === Kind.LIST_TYPE ||\n    node.kind === Kind.NON_NULL_TYPE\n  );\n}\nexport function isTypeSystemDefinitionNode(node) {\n  return (\n    node.kind === Kind.SCHEMA_DEFINITION ||\n    isTypeDefinitionNode(node) ||\n    node.kind === Kind.DIRECTIVE_DEFINITION\n  );\n}\nexport function isTypeDefinitionNode(node) {\n  return (\n    node.kind === Kind.SCALAR_TYPE_DEFINITION ||\n    node.kind === Kind.OBJECT_TYPE_DEFINITION ||\n    node.kind === Kind.INTERFACE_TYPE_DEFINITION ||\n    node.kind === Kind.UNION_TYPE_DEFINITION ||\n    node.kind === Kind.ENUM_TYPE_DEFINITION ||\n    node.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION\n  );\n}\nexport function isTypeSystemExtensionNode(node) {\n  return node.kind === Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);\n}\nexport function isTypeExtensionNode(node) {\n  return (\n    node.kind === Kind.SCALAR_TYPE_EXTENSION ||\n    node.kind === Kind.OBJECT_TYPE_EXTENSION ||\n    node.kind === Kind.INTERFACE_TYPE_EXTENSION ||\n    node.kind === Kind.UNION_TYPE_EXTENSION ||\n    node.kind === Kind.ENUM_TYPE_EXTENSION ||\n    node.kind === Kind.INPUT_OBJECT_TYPE_EXTENSION\n  );\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isExecutableDefinitionNode } from '../../language/predicates.mjs';\n\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n *\n * See https://spec.graphql.org/draft/#sec-Executable-Definitions\n */\nexport function ExecutableDefinitionsRule(context) {\n  return {\n    Document(node) {\n      for (const definition of node.definitions) {\n        if (!isExecutableDefinitionNode(definition)) {\n          const defName =\n            definition.kind === Kind.SCHEMA_DEFINITION ||\n            definition.kind === Kind.SCHEMA_EXTENSION\n              ? 'schema'\n              : '\"' + definition.name.value + '\"';\n          context.reportError(\n            new GraphQLError(`The ${defName} definition is not executable.`, {\n              nodes: definition,\n            }),\n          );\n        }\n      }\n\n      return false;\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { naturalCompare } from '../../jsutils/naturalCompare.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isAbstractType,\n  isInterfaceType,\n  isObjectType,\n} from '../../type/definition.mjs';\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selections\n */\nexport function FieldsOnCorrectTypeRule(context) {\n  return {\n    Field(node) {\n      const type = context.getParentType();\n\n      if (type) {\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          const schema = context.getSchema();\n          const fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          let suggestion = didYouMean(\n            'to use an inline fragment on',\n            getSuggestedTypeNames(schema, type, fieldName),\n          ); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = didYouMean(getSuggestedFieldNames(type, fieldName));\n          } // Report an error, including helpful suggestions.\n\n          context.reportError(\n            new GraphQLError(\n              `Cannot query field \"${fieldName}\" on type \"${type.name}\".` +\n                suggestion,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest them,\n * sorted by how often the type is referenced.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!isAbstractType(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n\n  const suggestedTypes = new Set();\n  const usageCount = Object.create(null);\n\n  for (const possibleType of schema.getPossibleTypes(type)) {\n    if (!possibleType.getFields()[fieldName]) {\n      continue;\n    } // This object type defines this field.\n\n    suggestedTypes.add(possibleType);\n    usageCount[possibleType.name] = 1;\n\n    for (const possibleInterface of possibleType.getInterfaces()) {\n      var _usageCount$possibleI;\n\n      if (!possibleInterface.getFields()[fieldName]) {\n        continue;\n      } // This interface type defines this field.\n\n      suggestedTypes.add(possibleInterface);\n      usageCount[possibleInterface.name] =\n        ((_usageCount$possibleI = usageCount[possibleInterface.name]) !==\n          null && _usageCount$possibleI !== void 0\n          ? _usageCount$possibleI\n          : 0) + 1;\n    }\n  }\n\n  return [...suggestedTypes]\n    .sort((typeA, typeB) => {\n      // Suggest both interface and object types based on how common they are.\n      const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n\n      if (usageCountDiff !== 0) {\n        return usageCountDiff;\n      } // Suggest super types first followed by subtypes\n\n      if (isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) {\n        return -1;\n      }\n\n      if (isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) {\n        return 1;\n      }\n\n      return naturalCompare(typeA.name, typeB.name);\n    })\n    .map((x) => x.name);\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    const possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n  return [];\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-On-Composite-Types\n */\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment(node) {\n      const typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        const type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          const typeStr = print(typeCondition);\n          context.reportError(\n            new GraphQLError(\n              `Fragment cannot condition on non composite type \"${typeStr}\".`,\n              {\n                nodes: typeCondition,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    FragmentDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        const typeStr = print(node.typeCondition);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${node.name.value}\" cannot condition on non composite type \"${typeStr}\".`,\n            {\n              nodes: node.typeCondition,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations\n */\nexport function KnownArgumentNamesRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...KnownArgumentNamesOnDirectivesRule(context),\n\n    Argument(argNode) {\n      const argDef = context.getArgument();\n      const fieldDef = context.getFieldDef();\n      const parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        const argName = argNode.name.value;\n        const knownArgsNames = fieldDef.args.map((arg) => arg.name);\n        const suggestions = suggestionList(argName, knownArgsNames);\n        context.reportError(\n          new GraphQLError(\n            `Unknown argument \"${argName}\" on field \"${parentType.name}.${fieldDef.name}\".` +\n              didYouMean(suggestions),\n            {\n              nodes: argNode,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function KnownArgumentNamesOnDirectivesRule(context) {\n  const directiveArgs = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    directiveArgs[directive.name] = directive.args.map((arg) => arg.name);\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argsNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      directiveArgs[def.name.value] = argsNodes.map((arg) => arg.name.value);\n    }\n  }\n\n  return {\n    Directive(directiveNode) {\n      const directiveName = directiveNode.name.value;\n      const knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (const argNode of directiveNode.arguments) {\n          const argName = argNode.name.value;\n\n          if (!knownArgs.includes(argName)) {\n            const suggestions = suggestionList(argName, knownArgs);\n            context.reportError(\n              new GraphQLError(\n                `Unknown argument \"${argName}\" on directive \"@${directiveName}\".` +\n                  didYouMean(suggestions),\n                {\n                  nodes: argNode,\n                },\n              ),\n            );\n          }\n        }\n      }\n\n      return false;\n    },\n  };\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../../language/ast.mjs';\nimport { DirectiveLocation } from '../../language/directiveLocation.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Defined\n */\nexport function KnownDirectivesRule(context) {\n  const locationsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    locationsMap[directive.name] = directive.locations;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      locationsMap[def.name.value] = def.locations.map((name) => name.value);\n    }\n  }\n\n  return {\n    Directive(node, _key, _parent, _path, ancestors) {\n      const name = node.name.value;\n      const locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(\n          new GraphQLError(`Unknown directive \"@${name}\".`, {\n            nodes: node,\n          }),\n        );\n        return;\n      }\n\n      const candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && !locations.includes(candidateLocation)) {\n        context.reportError(\n          new GraphQLError(\n            `Directive \"@${name}\" may not be used on ${candidateLocation}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  const appliedTo = ancestors[ancestors.length - 1];\n  'kind' in appliedTo || invariant(false);\n\n  switch (appliedTo.kind) {\n    case Kind.OPERATION_DEFINITION:\n      return getDirectiveLocationForOperation(appliedTo.operation);\n\n    case Kind.FIELD:\n      return DirectiveLocation.FIELD;\n\n    case Kind.FRAGMENT_SPREAD:\n      return DirectiveLocation.FRAGMENT_SPREAD;\n\n    case Kind.INLINE_FRAGMENT:\n      return DirectiveLocation.INLINE_FRAGMENT;\n\n    case Kind.FRAGMENT_DEFINITION:\n      return DirectiveLocation.FRAGMENT_DEFINITION;\n\n    case Kind.VARIABLE_DEFINITION:\n      return DirectiveLocation.VARIABLE_DEFINITION;\n\n    case Kind.SCHEMA_DEFINITION:\n    case Kind.SCHEMA_EXTENSION:\n      return DirectiveLocation.SCHEMA;\n\n    case Kind.SCALAR_TYPE_DEFINITION:\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return DirectiveLocation.SCALAR;\n\n    case Kind.OBJECT_TYPE_DEFINITION:\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.OBJECT;\n\n    case Kind.FIELD_DEFINITION:\n      return DirectiveLocation.FIELD_DEFINITION;\n\n    case Kind.INTERFACE_TYPE_DEFINITION:\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return DirectiveLocation.INTERFACE;\n\n    case Kind.UNION_TYPE_DEFINITION:\n    case Kind.UNION_TYPE_EXTENSION:\n      return DirectiveLocation.UNION;\n\n    case Kind.ENUM_TYPE_DEFINITION:\n    case Kind.ENUM_TYPE_EXTENSION:\n      return DirectiveLocation.ENUM;\n\n    case Kind.ENUM_VALUE_DEFINITION:\n      return DirectiveLocation.ENUM_VALUE;\n\n    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.INPUT_OBJECT;\n\n    case Kind.INPUT_VALUE_DEFINITION: {\n      const parentNode = ancestors[ancestors.length - 3];\n      'kind' in parentNode || invariant(false);\n      return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION\n        ? DirectiveLocation.INPUT_FIELD_DEFINITION\n        : DirectiveLocation.ARGUMENT_DEFINITION;\n    }\n    // Not reachable, all possible types have been considered.\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(appliedTo.kind));\n  }\n}\n\nfunction getDirectiveLocationForOperation(operation) {\n  switch (operation) {\n    case OperationTypeNode.QUERY:\n      return DirectiveLocation.QUERY;\n\n    case OperationTypeNode.MUTATION:\n      return DirectiveLocation.MUTATION;\n\n    case OperationTypeNode.SUBSCRIPTION:\n      return DirectiveLocation.SUBSCRIPTION;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Known fragment names\n *\n * A GraphQL document is only valid if all `...Fragment` fragment spreads refer\n * to fragments defined in the same document.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-spread-target-defined\n */\nexport function KnownFragmentNamesRule(context) {\n  return {\n    FragmentSpread(node) {\n      const fragmentName = node.name.value;\n      const fragment = context.getFragment(fragmentName);\n\n      if (!fragment) {\n        context.reportError(\n          new GraphQLError(`Unknown fragment \"${fragmentName}\".`, {\n            nodes: node.name,\n          }),\n        );\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeSystemDefinitionNode,\n  isTypeSystemExtensionNode,\n} from '../../language/predicates.mjs';\nimport { introspectionTypes } from '../../type/introspection.mjs';\nimport { specifiedScalarTypes } from '../../type/scalars.mjs';\n\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-Spread-Type-Existence\n */\nexport function KnownTypeNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = true;\n    }\n  }\n\n  const typeNames = [\n    ...Object.keys(existingTypesMap),\n    ...Object.keys(definedTypes),\n  ];\n  return {\n    NamedType(node, _1, parent, _2, ancestors) {\n      const typeName = node.name.value;\n\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\n        var _ancestors$;\n\n        const definitionNode =\n          (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0\n            ? _ancestors$\n            : parent;\n        const isSDL = definitionNode != null && isSDLNode(definitionNode);\n\n        if (isSDL && standardTypeNames.includes(typeName)) {\n          return;\n        }\n\n        const suggestedTypes = suggestionList(\n          typeName,\n          isSDL ? standardTypeNames.concat(typeNames) : typeNames,\n        );\n        context.reportError(\n          new GraphQLError(\n            `Unknown type \"${typeName}\".` + didYouMean(suggestedTypes),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\nconst standardTypeNames = [...specifiedScalarTypes, ...introspectionTypes].map(\n  (type) => type.name,\n);\n\nfunction isSDLNode(value) {\n  return (\n    'kind' in value &&\n    (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value))\n  );\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\n\n/**\n * Lone anonymous operation\n *\n * A GraphQL document is only valid if when it contains an anonymous operation\n * (the query short-hand) that it contains only that one operation definition.\n *\n * See https://spec.graphql.org/draft/#sec-Lone-Anonymous-Operation\n */\nexport function LoneAnonymousOperationRule(context) {\n  let operationCount = 0;\n  return {\n    Document(node) {\n      operationCount = node.definitions.filter(\n        (definition) => definition.kind === Kind.OPERATION_DEFINITION,\n      ).length;\n    },\n\n    OperationDefinition(node) {\n      if (!node.name && operationCount > 1) {\n        context.reportError(\n          new GraphQLError(\n            'This anonymous operation must be the only defined operation.',\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Lone Schema definition\n *\n * A GraphQL document is only valid if it contains only one schema definition.\n */\nexport function LoneSchemaDefinitionRule(context) {\n  var _ref, _ref2, _oldSchema$astNode;\n\n  const oldSchema = context.getSchema();\n  const alreadyDefined =\n    (_ref =\n      (_ref2 =\n        (_oldSchema$astNode =\n          oldSchema === null || oldSchema === void 0\n            ? void 0\n            : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0\n          ? _oldSchema$astNode\n          : oldSchema === null || oldSchema === void 0\n          ? void 0\n          : oldSchema.getQueryType()) !== null && _ref2 !== void 0\n        ? _ref2\n        : oldSchema === null || oldSchema === void 0\n        ? void 0\n        : oldSchema.getMutationType()) !== null && _ref !== void 0\n      ? _ref\n      : oldSchema === null || oldSchema === void 0\n      ? void 0\n      : oldSchema.getSubscriptionType();\n  let schemaDefinitionsCount = 0;\n  return {\n    SchemaDefinition(node) {\n      if (alreadyDefined) {\n        context.reportError(\n          new GraphQLError(\n            'Cannot define a new schema within a schema extension.',\n            {\n              nodes: node,\n            },\n          ),\n        );\n        return;\n      }\n\n      if (schemaDefinitionsCount > 0) {\n        context.reportError(\n          new GraphQLError('Must provide only one schema definition.', {\n            nodes: node,\n          }),\n        );\n      }\n\n      ++schemaDefinitionsCount;\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nconst MAX_LISTS_DEPTH = 3;\nexport function MaxIntrospectionDepthRule(context) {\n  /**\n   * Counts the depth of list fields in \"__Type\" recursively and\n   * returns `true` if the limit has been reached.\n   */\n  function checkDepth(node, visitedFragments = Object.create(null), depth = 0) {\n    if (node.kind === Kind.FRAGMENT_SPREAD) {\n      const fragmentName = node.name.value;\n\n      if (visitedFragments[fragmentName] === true) {\n        // Fragment cycles are handled by `NoFragmentCyclesRule`.\n        return false;\n      }\n\n      const fragment = context.getFragment(fragmentName);\n\n      if (!fragment) {\n        // Missing fragments checks are handled by `KnownFragmentNamesRule`.\n        return false;\n      } // Rather than following an immutable programming pattern which has\n      // significant memory and garbage collection overhead, we've opted to\n      // take a mutable approach for efficiency's sake. Importantly visiting a\n      // fragment twice is fine, so long as you don't do one visit inside the\n      // other.\n\n      try {\n        visitedFragments[fragmentName] = true;\n        return checkDepth(fragment, visitedFragments, depth);\n      } finally {\n        visitedFragments[fragmentName] = undefined;\n      }\n    }\n\n    if (\n      node.kind === Kind.FIELD && // check all introspection lists\n      (node.name.value === 'fields' ||\n        node.name.value === 'interfaces' ||\n        node.name.value === 'possibleTypes' ||\n        node.name.value === 'inputFields')\n    ) {\n      // eslint-disable-next-line no-param-reassign\n      depth++;\n\n      if (depth >= MAX_LISTS_DEPTH) {\n        return true;\n      }\n    } // handles fields and inline fragments\n\n    if ('selectionSet' in node && node.selectionSet) {\n      for (const child of node.selectionSet.selections) {\n        if (checkDepth(child, visitedFragments, depth)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  return {\n    Field(node) {\n      if (node.name.value === '__schema' || node.name.value === '__type') {\n        if (checkDepth(node)) {\n          context.reportError(\n            new GraphQLError('Maximum introspection depth exceeded', {\n              nodes: [node],\n            }),\n          );\n          return false;\n        }\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No fragment cycles\n *\n * The graph of fragment spreads must not form any cycles including spreading itself.\n * Otherwise an operation could infinitely spread or infinitely execute on cycles in the underlying data.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-spreads-must-not-form-cycles\n */\nexport function NoFragmentCyclesRule(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  const spreadPath = []; // Position in the spread path\n\n  const spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n\n    FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    },\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    const fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    const spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (const spreadNode of spreadNodes) {\n      const spreadName = spreadNode.name.value;\n      const cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        const spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        const cyclePath = spreadPath.slice(cycleIndex);\n        const viaPath = cyclePath\n          .slice(0, -1)\n          .map((s) => '\"' + s.name.value + '\"')\n          .join(', ');\n        context.reportError(\n          new GraphQLError(\n            `Cannot spread fragment \"${spreadName}\" within itself` +\n              (viaPath !== '' ? ` via ${viaPath}.` : '.'),\n            {\n              nodes: cyclePath,\n            },\n          ),\n        );\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined\n */\nexport function NoUndefinedVariablesRule(context) {\n  let variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        variableNameDefined = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          const varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${varName}\" is not defined by operation \"${operation.name.value}\".`\n                  : `Variable \"$${varName}\" is not defined.`,\n                {\n                  nodes: [node, operation],\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-Must-Be-Used\n */\nexport function NoUnusedFragmentsRule(context) {\n  const operationDefs = [];\n  const fragmentDefs = [];\n  return {\n    OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n\n    FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n\n    Document: {\n      leave() {\n        const fragmentNameUsed = Object.create(null);\n\n        for (const operation of operationDefs) {\n          for (const fragment of context.getRecursivelyReferencedFragments(\n            operation,\n          )) {\n            fragmentNameUsed[fragment.name.value] = true;\n          }\n        }\n\n        for (const fragmentDef of fragmentDefs) {\n          const fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(\n              new GraphQLError(`Fragment \"${fragName}\" is never used.`, {\n                nodes: fragmentDef,\n              }),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variables-Used\n */\nexport function NoUnusedVariablesRule(context) {\n  let variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefs = [];\n      },\n\n      leave(operation) {\n        const variableNameUsed = Object.create(null);\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (const variableDef of variableDefs) {\n          const variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${variableName}\" is never used in operation \"${operation.name.value}\".`\n                  : `Variable \"$${variableName}\" is never used.`,\n                {\n                  nodes: variableDef,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(def) {\n      variableDefs.push(def);\n    },\n  };\n}\n", "import { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport { Kind } from '../language/kinds.mjs';\n/**\n * Sort ValueNode.\n *\n * This function returns a sorted copy of the given ValueNode.\n *\n * @internal\n */\n\nexport function sortValueNode(valueNode) {\n  switch (valueNode.kind) {\n    case Kind.OBJECT:\n      return { ...valueNode, fields: sortFields(valueNode.fields) };\n\n    case Kind.LIST:\n      return { ...valueNode, values: valueNode.values.map(sortValueNode) };\n\n    case Kind.INT:\n    case Kind.FLOAT:\n    case Kind.STRING:\n    case Kind.BOOLEAN:\n    case Kind.NULL:\n    case Kind.ENUM:\n    case Kind.VARIABLE:\n      return valueNode;\n  }\n}\n\nfunction sortFields(fields) {\n  return fields\n    .map((fieldNode) => ({\n      ...fieldNode,\n      value: sortValueNode(fieldNode.value),\n    }))\n    .sort((fieldA, fieldB) =>\n      naturalCompare(fieldA.name.value, fieldB.name.value),\n    );\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport {\n  getNamedType,\n  isInterfaceType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from '../../type/definition.mjs';\nimport { sortValueNode } from '../../utilities/sortValueNode.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason\n      .map(\n        ([responseName, subReason]) =>\n          `subfields \"${responseName}\" conflict because ` +\n          reasonMessage(subReason),\n      )\n      .join(' and ');\n  }\n\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selection-Merging\n */\n\nexport function OverlappingFieldsCanBeMergedRule(context) {\n  // A memoization for when fields and a fragment or two fragments are compared\n  // \"between\" each other for conflicts. Comparisons made be made many times,\n  // so memoizing this can dramatically improve the performance of this validator.\n  const comparedFieldsAndFragmentPairs = new OrderedPairSet();\n  const comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  const cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet(selectionSet) {\n      const conflicts = findConflictsWithinSelectionSet(\n        context,\n        cachedFieldsAndFragmentNames,\n        comparedFieldsAndFragmentPairs,\n        comparedFragmentPairs,\n        context.getParentType(),\n        selectionSet,\n      );\n\n      for (const [[responseName, reason], fields1, fields2] of conflicts) {\n        const reasonMsg = reasonMessage(reason);\n        context.reportError(\n          new GraphQLError(\n            `Fields \"${responseName}\" conflict because ${reasonMsg}. Use different aliases on the fields to fetch both if this was intentional.`,\n            {\n              nodes: fields1.concat(fields2),\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  parentType,\n  selectionSet,\n) {\n  const conflicts = [];\n  const [fieldMap, fragmentNames] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType,\n    selectionSet,\n  ); // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n  collectConflictsWithin(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFieldsAndFragmentPairs,\n    comparedFragmentPairs,\n    fieldMap,\n  );\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    for (let i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(\n        context,\n        conflicts,\n        cachedFieldsAndFragmentNames,\n        comparedFieldsAndFragmentPairs,\n        comparedFragmentPairs,\n        false,\n        fieldMap,\n        fragmentNames[i],\n      ); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (let j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(\n          context,\n          conflicts,\n          cachedFieldsAndFragmentNames,\n          comparedFieldsAndFragmentPairs,\n          comparedFragmentPairs,\n          false,\n          fragmentNames[i],\n          fragmentNames[j],\n        );\n      }\n    }\n  }\n\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\nfunction collectConflictsBetweenFieldsAndFragment(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  fieldMap,\n  fragmentName,\n) {\n  // Memoize so the fields and fragments are not compared for conflicts more\n  // than once.\n  if (\n    comparedFieldsAndFragmentPairs.has(\n      fieldMap,\n      fragmentName,\n      areMutuallyExclusive,\n    )\n  ) {\n    return;\n  }\n\n  comparedFieldsAndFragmentPairs.add(\n    fieldMap,\n    fragmentName,\n    areMutuallyExclusive,\n  );\n  const fragment = context.getFragment(fragmentName);\n\n  if (!fragment) {\n    return;\n  }\n\n  const [fieldMap2, referencedFragmentNames] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment,\n    ); // Do not compare a fragment's fieldMap to itself.\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFieldsAndFragmentPairs,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap,\n    fieldMap2,\n  ); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (const referencedFragmentName of referencedFragmentNames) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap,\n      referencedFragmentName,\n    );\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\nfunction collectConflictsBetweenFragments(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  fragmentName1,\n  fragmentName2,\n) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n  if (\n    comparedFragmentPairs.has(\n      fragmentName1,\n      fragmentName2,\n      areMutuallyExclusive,\n    )\n  ) {\n    return;\n  }\n\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  const fragment1 = context.getFragment(fragmentName1);\n  const fragment2 = context.getFragment(fragmentName2);\n\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  const [fieldMap1, referencedFragmentNames1] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment1,\n    );\n  const [fieldMap2, referencedFragmentNames2] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment2,\n    ); // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFieldsAndFragmentPairs,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap1,\n    fieldMap2,\n  ); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (const referencedFragmentName2 of referencedFragmentNames2) {\n    collectConflictsBetweenFragments(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fragmentName1,\n      referencedFragmentName2,\n    );\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n  for (const referencedFragmentName1 of referencedFragmentNames1) {\n    collectConflictsBetweenFragments(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      referencedFragmentName1,\n      fragmentName2,\n    );\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\nfunction findConflictsBetweenSubSelectionSets(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  parentType1,\n  selectionSet1,\n  parentType2,\n  selectionSet2,\n) {\n  const conflicts = [];\n  const [fieldMap1, fragmentNames1] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType1,\n    selectionSet1,\n  );\n  const [fieldMap2, fragmentNames2] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType2,\n    selectionSet2,\n  ); // (H) First, collect all conflicts between these two collections of field.\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFieldsAndFragmentPairs,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap1,\n    fieldMap2,\n  ); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  for (const fragmentName2 of fragmentNames2) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap1,\n      fragmentName2,\n    );\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n  for (const fragmentName1 of fragmentNames1) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap2,\n      fragmentName1,\n    );\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n  for (const fragmentName1 of fragmentNames1) {\n    for (const fragmentName2 of fragmentNames2) {\n      collectConflictsBetweenFragments(\n        context,\n        conflicts,\n        cachedFieldsAndFragmentNames,\n        comparedFieldsAndFragmentPairs,\n        comparedFragmentPairs,\n        areMutuallyExclusive,\n        fragmentName1,\n        fragmentName2,\n      );\n    }\n  }\n\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\nfunction collectConflictsWithin(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  fieldMap,\n) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  for (const [responseName, fields] of Object.entries(fieldMap)) {\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (let i = 0; i < fields.length; i++) {\n        for (let j = i + 1; j < fields.length; j++) {\n          const conflict = findConflict(\n            context,\n            cachedFieldsAndFragmentNames,\n            comparedFieldsAndFragmentPairs,\n            comparedFragmentPairs,\n            false, // within one collection is never mutually exclusive\n            responseName,\n            fields[i],\n            fields[j],\n          );\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\nfunction collectConflictsBetween(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  parentFieldsAreMutuallyExclusive,\n  fieldMap1,\n  fieldMap2,\n) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  for (const [responseName, fields1] of Object.entries(fieldMap1)) {\n    const fields2 = fieldMap2[responseName];\n\n    if (fields2) {\n      for (const field1 of fields1) {\n        for (const field2 of fields2) {\n          const conflict = findConflict(\n            context,\n            cachedFieldsAndFragmentNames,\n            comparedFieldsAndFragmentPairs,\n            comparedFragmentPairs,\n            parentFieldsAreMutuallyExclusive,\n            responseName,\n            field1,\n            field2,\n          );\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\nfunction findConflict(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  parentFieldsAreMutuallyExclusive,\n  responseName,\n  field1,\n  field2,\n) {\n  const [parentType1, node1, def1] = field1;\n  const [parentType2, node2, def2] = field2; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  const areMutuallyExclusive =\n    parentFieldsAreMutuallyExclusive ||\n    (parentType1 !== parentType2 &&\n      isObjectType(parentType1) &&\n      isObjectType(parentType2));\n\n  if (!areMutuallyExclusive) {\n    // Two aliases must refer to the same field.\n    const name1 = node1.name.value;\n    const name2 = node2.name.value;\n\n    if (name1 !== name2) {\n      return [\n        [responseName, `\"${name1}\" and \"${name2}\" are different fields`],\n        [node1],\n        [node2],\n      ];\n    } // Two field calls must have the same arguments.\n\n    if (!sameArguments(node1, node2)) {\n      return [\n        [responseName, 'they have differing arguments'],\n        [node1],\n        [node2],\n      ];\n    }\n  } // The return type for each field.\n\n  const type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;\n  const type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [\n      [\n        responseName,\n        `they return conflicting types \"${inspect(type1)}\" and \"${inspect(\n          type2,\n        )}\"`,\n      ],\n      [node1],\n      [node2],\n    ];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n  const selectionSet1 = node1.selectionSet;\n  const selectionSet2 = node2.selectionSet;\n\n  if (selectionSet1 && selectionSet2) {\n    const conflicts = findConflictsBetweenSubSelectionSets(\n      context,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      getNamedType(type1),\n      selectionSet1,\n      getNamedType(type2),\n      selectionSet2,\n    );\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction sameArguments(node1, node2) {\n  const args1 = node1.arguments;\n  const args2 = node2.arguments;\n\n  if (args1 === undefined || args1.length === 0) {\n    return args2 === undefined || args2.length === 0;\n  }\n\n  if (args2 === undefined || args2.length === 0) {\n    return false;\n  }\n  /* c8 ignore next */\n\n  if (args1.length !== args2.length) {\n    /* c8 ignore next */\n    return false;\n    /* c8 ignore next */\n  }\n\n  const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));\n  return args1.every((arg1) => {\n    const value1 = arg1.value;\n    const value2 = values2.get(arg1.name.value);\n\n    if (value2 === undefined) {\n      return false;\n    }\n\n    return stringifyValue(value1) === stringifyValue(value2);\n  });\n}\n\nfunction stringifyValue(value) {\n  return print(sortValueNode(value));\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\nfunction doTypesConflict(type1, type2) {\n  if (isListType(type1)) {\n    return isListType(type2)\n      ? doTypesConflict(type1.ofType, type2.ofType)\n      : true;\n  }\n\n  if (isListType(type2)) {\n    return true;\n  }\n\n  if (isNonNullType(type1)) {\n    return isNonNullType(type2)\n      ? doTypesConflict(type1.ofType, type2.ofType)\n      : true;\n  }\n\n  if (isNonNullType(type2)) {\n    return true;\n  }\n\n  if (isLeafType(type1) || isLeafType(type2)) {\n    return type1 !== type2;\n  }\n\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\nfunction getFieldsAndFragmentNames(\n  context,\n  cachedFieldsAndFragmentNames,\n  parentType,\n  selectionSet,\n) {\n  const cached = cachedFieldsAndFragmentNames.get(selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const nodeAndDefs = Object.create(null);\n  const fragmentNames = Object.create(null);\n\n  _collectFieldsAndFragmentNames(\n    context,\n    parentType,\n    selectionSet,\n    nodeAndDefs,\n    fragmentNames,\n  );\n\n  const result = [nodeAndDefs, Object.keys(fragmentNames)];\n  cachedFieldsAndFragmentNames.set(selectionSet, result);\n  return result;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\nfunction getReferencedFieldsAndFragmentNames(\n  context,\n  cachedFieldsAndFragmentNames,\n  fragment,\n) {\n  // Short-circuit building a type from the node if possible.\n  const cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    fragmentType,\n    fragment.selectionSet,\n  );\n}\n\nfunction _collectFieldsAndFragmentNames(\n  context,\n  parentType,\n  selectionSet,\n  nodeAndDefs,\n  fragmentNames,\n) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case Kind.FIELD: {\n        const fieldName = selection.name.value;\n        let fieldDef;\n\n        if (isObjectType(parentType) || isInterfaceType(parentType)) {\n          fieldDef = parentType.getFields()[fieldName];\n        }\n\n        const responseName = selection.alias\n          ? selection.alias.value\n          : fieldName;\n\n        if (!nodeAndDefs[responseName]) {\n          nodeAndDefs[responseName] = [];\n        }\n\n        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n        break;\n      }\n\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n\n      case Kind.INLINE_FRAGMENT: {\n        const typeCondition = selection.typeCondition;\n        const inlineFragmentType = typeCondition\n          ? typeFromAST(context.getSchema(), typeCondition)\n          : parentType;\n\n        _collectFieldsAndFragmentNames(\n          context,\n          inlineFragmentType,\n          selection.selectionSet,\n          nodeAndDefs,\n          fragmentNames,\n        );\n\n        break;\n      }\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [\n      [responseName, conflicts.map(([reason]) => reason)],\n      [node1, ...conflicts.map(([, fields1]) => fields1).flat()],\n      [node2, ...conflicts.map(([, , fields2]) => fields2).flat()],\n    ];\n  }\n}\n/**\n * A way to keep track of pairs of things where the ordering of the pair\n * matters.\n *\n * Provides a third argument for has/set to allow flagging the pair as\n * weakly or strongly present within the collection.\n */\n\nclass OrderedPairSet {\n  constructor() {\n    this._data = new Map();\n  }\n\n  has(a, b, weaklyPresent) {\n    var _this$_data$get;\n\n    const result =\n      (_this$_data$get = this._data.get(a)) === null ||\n      _this$_data$get === void 0\n        ? void 0\n        : _this$_data$get.get(b);\n\n    if (result === undefined) {\n      return false;\n    }\n\n    return weaklyPresent ? true : weaklyPresent === result;\n  }\n\n  add(a, b, weaklyPresent) {\n    const map = this._data.get(a);\n\n    if (map === undefined) {\n      this._data.set(a, new Map([[b, weaklyPresent]]));\n    } else {\n      map.set(b, weaklyPresent);\n    }\n  }\n}\n/**\n * A way to keep track of pairs of similar things when the ordering of the pair\n * does not matter.\n */\n\nclass PairSet {\n  constructor() {\n    this._orderedPairSet = new OrderedPairSet();\n  }\n\n  has(a, b, weaklyPresent) {\n    return a < b\n      ? this._orderedPairSet.has(a, b, weaklyPresent)\n      : this._orderedPairSet.has(b, a, weaklyPresent);\n  }\n\n  add(a, b, weaklyPresent) {\n    if (a < b) {\n      this._orderedPairSet.add(a, b, weaklyPresent);\n    } else {\n      this._orderedPairSet.add(b, a, weaklyPresent);\n    }\n  }\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { doTypesOverlap } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment(node) {\n      const fragType = context.getType();\n      const parentType = context.getParentType();\n\n      if (\n        isCompositeType(fragType) &&\n        isCompositeType(parentType) &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    FragmentSpread(node) {\n      const fragName = node.name.value;\n      const fragType = getFragmentType(context, fragName);\n      const parentType = context.getParentType();\n\n      if (\n        fragType &&\n        parentType &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${fragName}\" cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getFragmentType(context, name) {\n  const frag = context.getFragment(name);\n\n  if (frag) {\n    const type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isTypeDefinitionNode } from '../../language/predicates.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../../type/definition.mjs';\n\n/**\n * Possible type extension\n *\n * A type extension is only valid if the type is defined and has the same kind.\n */\nexport function PossibleTypeExtensionsRule(context) {\n  const schema = context.getSchema();\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n\n  return {\n    ScalarTypeExtension: checkExtension,\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension,\n    UnionTypeExtension: checkExtension,\n    EnumTypeExtension: checkExtension,\n    InputObjectTypeExtension: checkExtension,\n  };\n\n  function checkExtension(node) {\n    const typeName = node.name.value;\n    const defNode = definedTypes[typeName];\n    const existingType =\n      schema === null || schema === void 0 ? void 0 : schema.getType(typeName);\n    let expectedKind;\n\n    if (defNode) {\n      expectedKind = defKindToExtKind[defNode.kind];\n    } else if (existingType) {\n      expectedKind = typeToExtKind(existingType);\n    }\n\n    if (expectedKind) {\n      if (expectedKind !== node.kind) {\n        const kindStr = extensionKindToTypeName(node.kind);\n        context.reportError(\n          new GraphQLError(`Cannot extend non-${kindStr} type \"${typeName}\".`, {\n            nodes: defNode ? [defNode, node] : node,\n          }),\n        );\n      }\n    } else {\n      const allTypeNames = Object.keys({\n        ...definedTypes,\n        ...(schema === null || schema === void 0\n          ? void 0\n          : schema.getTypeMap()),\n      });\n      const suggestedTypes = suggestionList(typeName, allTypeNames);\n      context.reportError(\n        new GraphQLError(\n          `Cannot extend type \"${typeName}\" because it is not defined.` +\n            didYouMean(suggestedTypes),\n          {\n            nodes: node.name,\n          },\n        ),\n      );\n    }\n  }\n}\nconst defKindToExtKind = {\n  [Kind.SCALAR_TYPE_DEFINITION]: Kind.SCALAR_TYPE_EXTENSION,\n  [Kind.OBJECT_TYPE_DEFINITION]: Kind.OBJECT_TYPE_EXTENSION,\n  [Kind.INTERFACE_TYPE_DEFINITION]: Kind.INTERFACE_TYPE_EXTENSION,\n  [Kind.UNION_TYPE_DEFINITION]: Kind.UNION_TYPE_EXTENSION,\n  [Kind.ENUM_TYPE_DEFINITION]: Kind.ENUM_TYPE_EXTENSION,\n  [Kind.INPUT_OBJECT_TYPE_DEFINITION]: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n};\n\nfunction typeToExtKind(type) {\n  if (isScalarType(type)) {\n    return Kind.SCALAR_TYPE_EXTENSION;\n  }\n\n  if (isObjectType(type)) {\n    return Kind.OBJECT_TYPE_EXTENSION;\n  }\n\n  if (isInterfaceType(type)) {\n    return Kind.INTERFACE_TYPE_EXTENSION;\n  }\n\n  if (isUnionType(type)) {\n    return Kind.UNION_TYPE_EXTENSION;\n  }\n\n  if (isEnumType(type)) {\n    return Kind.ENUM_TYPE_EXTENSION;\n  }\n\n  if (isInputObjectType(type)) {\n    return Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable. All possible types have been considered\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction extensionKindToTypeName(kind) {\n  switch (kind) {\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return 'scalar';\n\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return 'object';\n\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return 'interface';\n\n    case Kind.UNION_TYPE_EXTENSION:\n      return 'union';\n\n    case Kind.ENUM_TYPE_EXTENSION:\n      return 'enum';\n\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return 'input object';\n    // Not reachable. All possible types have been considered\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(kind));\n  }\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isRequiredArgument, isType } from '../../type/definition.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null without a\n * default value) field arguments have been provided.\n */\nexport function ProvidedRequiredArgumentsRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...ProvidedRequiredArgumentsOnDirectivesRule(context),\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(fieldNode) {\n        var _fieldNode$arguments;\n\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          return false;\n        }\n\n        const providedArgs = new Set( // FIXME: https://github.com/graphql/graphql-js/issues/2203\n          /* c8 ignore next */\n          (_fieldNode$arguments = fieldNode.arguments) === null ||\n          _fieldNode$arguments === void 0\n            ? void 0\n            : _fieldNode$arguments.map((arg) => arg.name.value),\n        );\n\n        for (const argDef of fieldDef.args) {\n          if (!providedArgs.has(argDef.name) && isRequiredArgument(argDef)) {\n            const argTypeStr = inspect(argDef.type);\n            context.reportError(\n              new GraphQLError(\n                `Field \"${fieldDef.name}\" argument \"${argDef.name}\" of type \"${argTypeStr}\" is required, but it was not provided.`,\n                {\n                  nodes: fieldNode,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function ProvidedRequiredArgumentsOnDirectivesRule(context) {\n  var _schema$getDirectives;\n\n  const requiredArgsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives =\n    (_schema$getDirectives =\n      schema === null || schema === void 0\n        ? void 0\n        : schema.getDirectives()) !== null && _schema$getDirectives !== void 0\n      ? _schema$getDirectives\n      : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    requiredArgsMap[directive.name] = keyMap(\n      directive.args.filter(isRequiredArgument),\n      (arg) => arg.name,\n    );\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      requiredArgsMap[def.name.value] = keyMap(\n        argNodes.filter(isRequiredArgumentNode),\n        (arg) => arg.name.value,\n      );\n    }\n  }\n\n  return {\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(directiveNode) {\n        const directiveName = directiveNode.name.value;\n        const requiredArgs = requiredArgsMap[directiveName];\n\n        if (requiredArgs) {\n          var _directiveNode$argume;\n\n          // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n          /* c8 ignore next */\n          const argNodes =\n            (_directiveNode$argume = directiveNode.arguments) !== null &&\n            _directiveNode$argume !== void 0\n              ? _directiveNode$argume\n              : [];\n          const argNodeMap = new Set(argNodes.map((arg) => arg.name.value));\n\n          for (const [argName, argDef] of Object.entries(requiredArgs)) {\n            if (!argNodeMap.has(argName)) {\n              const argType = isType(argDef.type)\n                ? inspect(argDef.type)\n                : print(argDef.type);\n              context.reportError(\n                new GraphQLError(\n                  `Directive \"@${directiveName}\" argument \"${argName}\" of type \"${argType}\" is required, but it was not provided.`,\n                  {\n                    nodes: directiveNode,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n  };\n}\n\nfunction isRequiredArgumentNode(arg) {\n  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { getNamedType, isLeafType } from '../../type/definition.mjs';\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nexport function ScalarLeafsRule(context) {\n  return {\n    Field(node) {\n      const type = context.getType();\n      const selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            const fieldName = node.name.value;\n            const typeStr = inspect(type);\n            context.reportError(\n              new GraphQLError(\n                `Field \"${fieldName}\" must not have a selection since type \"${typeStr}\" has no subfields.`,\n                {\n                  nodes: selectionSet,\n                },\n              ),\n            );\n          }\n        } else if (!selectionSet) {\n          const fieldName = node.name.value;\n          const typeStr = inspect(type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${fieldName}\" of type \"${typeStr}\" must have a selection of subfields. Did you mean \"${fieldName} { ... }\"?`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        } else if (selectionSet.selections.length === 0) {\n          const fieldName = node.name.value;\n          const typeStr = inspect(type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${fieldName}\" of type \"${typeStr}\" must have at least one field selected.`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Unknown       |\n * | NullValue            | null          |\n *\n */\n\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    const variableName = valueNode.name.value;\n\n    if (variables == null || variables[variableName] === undefined) {\n      // No valid return value.\n      return;\n    }\n\n    const variableValue = variables[variableName];\n\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n    return variableValue;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      const coercedValues = [];\n\n      for (const itemNode of valueNode.values) {\n        if (isMissingVariable(itemNode, variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          const itemValue = valueFromAST(itemNode, itemType, variables);\n\n          if (itemValue === undefined) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    const coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (coercedValue === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    const coercedObj = Object.create(null);\n    const fieldNodes = keyMap(valueNode.fields, (field) => field.name.value);\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      const fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (fieldValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    if (type.isOneOf) {\n      const keys = Object.keys(coercedObj);\n\n      if (keys.length !== 1) {\n        return; // Invalid: not exactly one key, intentionally return no value.\n      }\n\n      if (coercedObj[keys[0]] === null) {\n        return; // Invalid: value not non-null, intentionally return no value.\n      }\n    }\n\n    return coercedObj;\n  }\n\n  if (isLeafType(type)) {\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    let result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (result === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible input types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return (\n    valueNode.kind === Kind.VARIABLE &&\n    (variables == null || variables[valueNode.name.value] === undefined)\n  );\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { isInputType, isNonNullType } from '../type/definition.mjs';\nimport { coerceInputValue } from '../utilities/coerceInputValue.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { valueFromAST } from '../utilities/valueFromAST.mjs';\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nexport function getVariableValues(schema, varDefNodes, inputs, options) {\n  const errors = [];\n  const maxErrors =\n    options === null || options === void 0 ? void 0 : options.maxErrors;\n\n  try {\n    const coerced = coerceVariableValues(\n      schema,\n      varDefNodes,\n      inputs,\n      (error) => {\n        if (maxErrors != null && errors.length >= maxErrors) {\n          throw new GraphQLError(\n            'Too many errors processing variables, error limit reached. Execution aborted.',\n          );\n        }\n\n        errors.push(error);\n      },\n    );\n\n    if (errors.length === 0) {\n      return {\n        coerced,\n      };\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n\n  return {\n    errors,\n  };\n}\n\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n  const coercedValues = {};\n\n  for (const varDefNode of varDefNodes) {\n    const varName = varDefNode.variable.name.value;\n    const varType = typeFromAST(schema, varDefNode.type);\n\n    if (!isInputType(varType)) {\n      // Must use input types for variables. This should be caught during\n      // validation, however is checked again here for safety.\n      const varTypeStr = print(varDefNode.type);\n      onError(\n        new GraphQLError(\n          `Variable \"$${varName}\" expected value of type \"${varTypeStr}\" which cannot be used as an input type.`,\n          {\n            nodes: varDefNode.type,\n          },\n        ),\n      );\n      continue;\n    }\n\n    if (!hasOwnProperty(inputs, varName)) {\n      if (varDefNode.defaultValue) {\n        coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\n      } else if (isNonNullType(varType)) {\n        const varTypeStr = inspect(varType);\n        onError(\n          new GraphQLError(\n            `Variable \"$${varName}\" of required type \"${varTypeStr}\" was not provided.`,\n            {\n              nodes: varDefNode,\n            },\n          ),\n        );\n      }\n\n      continue;\n    }\n\n    const value = inputs[varName];\n\n    if (value === null && isNonNullType(varType)) {\n      const varTypeStr = inspect(varType);\n      onError(\n        new GraphQLError(\n          `Variable \"$${varName}\" of non-null type \"${varTypeStr}\" must not be null.`,\n          {\n            nodes: varDefNode,\n          },\n        ),\n      );\n      continue;\n    }\n\n    coercedValues[varName] = coerceInputValue(\n      value,\n      varType,\n      (path, invalidValue, error) => {\n        let prefix =\n          `Variable \"$${varName}\" got invalid value ` + inspect(invalidValue);\n\n        if (path.length > 0) {\n          prefix += ` at \"${varName}${printPathArray(path)}\"`;\n        }\n\n        onError(\n          new GraphQLError(prefix + '; ' + error.message, {\n            nodes: varDefNode,\n            originalError: error,\n          }),\n        );\n      },\n    );\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getArgumentValues(def, node, variableValues) {\n  var _node$arguments;\n\n  const coercedValues = {}; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  const argumentNodes =\n    (_node$arguments = node.arguments) !== null && _node$arguments !== void 0\n      ? _node$arguments\n      : [];\n  const argNodeMap = keyMap(argumentNodes, (arg) => arg.name.value);\n\n  for (const argDef of def.args) {\n    const name = argDef.name;\n    const argType = argDef.type;\n    const argumentNode = argNodeMap[name];\n\n    if (!argumentNode) {\n      if (argDef.defaultValue !== undefined) {\n        coercedValues[name] = argDef.defaultValue;\n      } else if (isNonNullType(argType)) {\n        throw new GraphQLError(\n          `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n            'was not provided.',\n          {\n            nodes: node,\n          },\n        );\n      }\n\n      continue;\n    }\n\n    const valueNode = argumentNode.value;\n    let isNull = valueNode.kind === Kind.NULL;\n\n    if (valueNode.kind === Kind.VARIABLE) {\n      const variableName = valueNode.name.value;\n\n      if (\n        variableValues == null ||\n        !hasOwnProperty(variableValues, variableName)\n      ) {\n        if (argDef.defaultValue !== undefined) {\n          coercedValues[name] = argDef.defaultValue;\n        } else if (isNonNullType(argType)) {\n          throw new GraphQLError(\n            `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n              `was provided the variable \"$${variableName}\" which was not provided a runtime value.`,\n            {\n              nodes: valueNode,\n            },\n          );\n        }\n\n        continue;\n      }\n\n      isNull = variableValues[variableName] == null;\n    }\n\n    if (isNull && isNonNullType(argType)) {\n      throw new GraphQLError(\n        `Argument \"${name}\" of non-null type \"${inspect(argType)}\" ` +\n          'must not be null.',\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const coercedValue = valueFromAST(valueNode, argType, variableValues);\n\n    if (coercedValue === undefined) {\n      // Note: ValuesOfCorrectTypeRule validation should catch this before\n      // execution. This is a runtime check to ensure execution does not\n      // continue with an invalid argument value.\n      throw new GraphQLError(\n        `Argument \"${name}\" has invalid value ${print(valueNode)}.`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    coercedValues[name] = coercedValue;\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getDirectiveValues(directiveDef, node, variableValues) {\n  var _node$directives;\n\n  const directiveNode =\n    (_node$directives = node.directives) === null || _node$directives === void 0\n      ? void 0\n      : _node$directives.find(\n          (directive) => directive.name.value === directiveDef.name,\n        );\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n", "import { Kind } from '../language/kinds.mjs';\nimport { isAbstractType } from '../type/definition.mjs';\nimport {\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n} from '../type/directives.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { getDirectiveValues } from './values.mjs';\n/**\n * Given a selectionSet, collects all of the fields and returns them.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field that\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * object type returned by that field.\n *\n * @internal\n */\n\nexport function collectFields(\n  schema,\n  fragments,\n  variableValues,\n  runtimeType,\n  selectionSet,\n) {\n  const fields = new Map();\n  collectFieldsImpl(\n    schema,\n    fragments,\n    variableValues,\n    runtimeType,\n    selectionSet,\n    fields,\n    new Set(),\n  );\n  return fields;\n}\n/**\n * Given an array of field nodes, collects all of the subfields of the passed\n * in fields, and returns them at the end.\n *\n * CollectSubFields requires the \"return type\" of an object. For a field that\n * returns an Interface or Union type, the \"return type\" will be the actual\n * object type returned by that field.\n *\n * @internal\n */\n\nexport function collectSubfields(\n  schema,\n  fragments,\n  variableValues,\n  returnType,\n  fieldNodes,\n) {\n  const subFieldNodes = new Map();\n  const visitedFragmentNames = new Set();\n\n  for (const node of fieldNodes) {\n    if (node.selectionSet) {\n      collectFieldsImpl(\n        schema,\n        fragments,\n        variableValues,\n        returnType,\n        node.selectionSet,\n        subFieldNodes,\n        visitedFragmentNames,\n      );\n    }\n  }\n\n  return subFieldNodes;\n}\n\nfunction collectFieldsImpl(\n  schema,\n  fragments,\n  variableValues,\n  runtimeType,\n  selectionSet,\n  fields,\n  visitedFragmentNames,\n) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case Kind.FIELD: {\n        if (!shouldIncludeNode(variableValues, selection)) {\n          continue;\n        }\n\n        const name = getFieldEntryKey(selection);\n        const fieldList = fields.get(name);\n\n        if (fieldList !== undefined) {\n          fieldList.push(selection);\n        } else {\n          fields.set(name, [selection]);\n        }\n\n        break;\n      }\n\n      case Kind.INLINE_FRAGMENT: {\n        if (\n          !shouldIncludeNode(variableValues, selection) ||\n          !doesFragmentConditionMatch(schema, selection, runtimeType)\n        ) {\n          continue;\n        }\n\n        collectFieldsImpl(\n          schema,\n          fragments,\n          variableValues,\n          runtimeType,\n          selection.selectionSet,\n          fields,\n          visitedFragmentNames,\n        );\n        break;\n      }\n\n      case Kind.FRAGMENT_SPREAD: {\n        const fragName = selection.name.value;\n\n        if (\n          visitedFragmentNames.has(fragName) ||\n          !shouldIncludeNode(variableValues, selection)\n        ) {\n          continue;\n        }\n\n        visitedFragmentNames.add(fragName);\n        const fragment = fragments[fragName];\n\n        if (\n          !fragment ||\n          !doesFragmentConditionMatch(schema, fragment, runtimeType)\n        ) {\n          continue;\n        }\n\n        collectFieldsImpl(\n          schema,\n          fragments,\n          variableValues,\n          runtimeType,\n          fragment.selectionSet,\n          fields,\n          visitedFragmentNames,\n        );\n        break;\n      }\n    }\n  }\n}\n/**\n * Determines if a field should be included based on the `@include` and `@skip`\n * directives, where `@skip` has higher precedence than `@include`.\n */\n\nfunction shouldIncludeNode(variableValues, node) {\n  const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);\n\n  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {\n    return false;\n  }\n\n  const include = getDirectiveValues(\n    GraphQLIncludeDirective,\n    node,\n    variableValues,\n  );\n\n  if (\n    (include === null || include === void 0 ? void 0 : include.if) === false\n  ) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\nfunction doesFragmentConditionMatch(schema, fragment, type) {\n  const typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  const conditionalType = typeFromAST(schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return schema.isSubType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { collectFields } from '../../execution/collectFields.mjs';\n\n/**\n * Subscriptions must only include a non-introspection field.\n *\n * A GraphQL subscription is valid only if it contains a single root field and\n * that root field is not an introspection field.\n *\n * See https://spec.graphql.org/draft/#sec-Single-root-field\n */\nexport function SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        const schema = context.getSchema();\n        const subscriptionType = schema.getSubscriptionType();\n\n        if (subscriptionType) {\n          const operationName = node.name ? node.name.value : null;\n          const variableValues = Object.create(null);\n          const document = context.getDocument();\n          const fragments = Object.create(null);\n\n          for (const definition of document.definitions) {\n            if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n              fragments[definition.name.value] = definition;\n            }\n          }\n\n          const fields = collectFields(\n            schema,\n            fragments,\n            variableValues,\n            subscriptionType,\n            node.selectionSet,\n          );\n\n          if (fields.size > 1) {\n            const fieldSelectionLists = [...fields.values()];\n            const extraFieldSelectionLists = fieldSelectionLists.slice(1);\n            const extraFieldSelections = extraFieldSelectionLists.flat();\n            context.reportError(\n              new GraphQLError(\n                operationName != null\n                  ? `Subscription \"${operationName}\" must select only one top level field.`\n                  : 'Anonymous Subscription must select only one top level field.',\n                {\n                  nodes: extraFieldSelections,\n                },\n              ),\n            );\n          }\n\n          for (const fieldNodes of fields.values()) {\n            const field = fieldNodes[0];\n            const fieldName = field.name.value;\n\n            if (fieldName.startsWith('__')) {\n              context.reportError(\n                new GraphQLError(\n                  operationName != null\n                    ? `Subscription \"${operationName}\" must not select an introspection top level field.`\n                    : 'Anonymous Subscription must not select an introspection top level field.',\n                  {\n                    nodes: fieldNodes,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      }\n    },\n  };\n}\n", "/**\n * Groups array items into a Map, given a function to produce grouping key.\n */\nexport function groupBy(list, keyFn) {\n  const result = new Map();\n\n  for (const item of list) {\n    const key = keyFn(item);\n    const group = result.get(key);\n\n    if (group === undefined) {\n      result.set(key, [item]);\n    } else {\n      group.push(item);\n    }\n  }\n\n  return result;\n}\n", "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique argument definition names\n *\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\n */\nexport function UniqueArgumentDefinitionNamesRule(context) {\n  return {\n    DirectiveDefinition(directiveNode) {\n      var _directiveNode$argume;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argumentNodes =\n        (_directiveNode$argume = directiveNode.arguments) !== null &&\n        _directiveNode$argume !== void 0\n          ? _directiveNode$argume\n          : [];\n      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);\n    },\n\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\n    InterfaceTypeExtension: checkArgUniquenessPerField,\n    ObjectTypeDefinition: checkArgUniquenessPerField,\n    ObjectTypeExtension: checkArgUniquenessPerField,\n  };\n\n  function checkArgUniquenessPerField(typeNode) {\n    var _typeNode$fields;\n\n    const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_typeNode$fields = typeNode.fields) !== null &&\n      _typeNode$fields !== void 0\n        ? _typeNode$fields\n        : [];\n\n    for (const fieldDef of fieldNodes) {\n      var _fieldDef$arguments;\n\n      const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n      const argumentNodes =\n        (_fieldDef$arguments = fieldDef.arguments) !== null &&\n        _fieldDef$arguments !== void 0\n          ? _fieldDef$arguments\n          : [];\n      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);\n    }\n\n    return false;\n  }\n\n  function checkArgUniqueness(parentName, argumentNodes) {\n    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new GraphQLError(\n            `Argument \"${parentName}(${argName}:)\" can only be defined once.`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n\n    return false;\n  }\n}\n", "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n */\nexport function UniqueArgumentNamesRule(context) {\n  return {\n    Field: checkArgUniqueness,\n    Directive: checkArgUniqueness,\n  };\n\n  function checkArgUniqueness(parentNode) {\n    var _parentNode$arguments;\n\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const argumentNodes =\n      (_parentNode$arguments = parentNode.arguments) !== null &&\n      _parentNode$arguments !== void 0\n        ? _parentNode$arguments\n        : [];\n    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one argument named \"${argName}\".`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique directive names\n *\n * A GraphQL document is only valid if all defined directives have unique names.\n */\nexport function UniqueDirectiveNamesRule(context) {\n  const knownDirectiveNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    DirectiveDefinition(node) {\n      const directiveName = node.name.value;\n\n      if (\n        schema !== null &&\n        schema !== void 0 &&\n        schema.getDirective(directiveName)\n      ) {\n        context.reportError(\n          new GraphQLError(\n            `Directive \"@${directiveName}\" already exists in the schema. It cannot be redefined.`,\n            {\n              nodes: node.name,\n            },\n          ),\n        );\n        return;\n      }\n\n      if (knownDirectiveNames[directiveName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one directive named \"@${directiveName}\".`,\n            {\n              nodes: [knownDirectiveNames[directiveName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownDirectiveNames[directiveName] = node.name;\n      }\n\n      return false;\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeExtensionNode,\n} from '../../language/predicates.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Unique-Per-Location\n */\nexport function UniqueDirectivesPerLocationRule(context) {\n  const uniqueDirectiveMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      uniqueDirectiveMap[def.name.value] = !def.repeatable;\n    }\n  }\n\n  const schemaDirectives = Object.create(null);\n  const typeDirectivesMap = Object.create(null);\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter(node) {\n      if (!('directives' in node) || !node.directives) {\n        return;\n      }\n\n      let seenDirectives;\n\n      if (\n        node.kind === Kind.SCHEMA_DEFINITION ||\n        node.kind === Kind.SCHEMA_EXTENSION\n      ) {\n        seenDirectives = schemaDirectives;\n      } else if (isTypeDefinitionNode(node) || isTypeExtensionNode(node)) {\n        const typeName = node.name.value;\n        seenDirectives = typeDirectivesMap[typeName];\n\n        if (seenDirectives === undefined) {\n          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);\n        }\n      } else {\n        seenDirectives = Object.create(null);\n      }\n\n      for (const directive of node.directives) {\n        const directiveName = directive.name.value;\n\n        if (uniqueDirectiveMap[directiveName]) {\n          if (seenDirectives[directiveName]) {\n            context.reportError(\n              new GraphQLError(\n                `The directive \"@${directiveName}\" can only be used once at this location.`,\n                {\n                  nodes: [seenDirectives[directiveName], directive],\n                },\n              ),\n            );\n          } else {\n            seenDirectives[directiveName] = directive;\n          }\n        }\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isEnumType } from '../../type/definition.mjs';\n\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\nexport function UniqueEnumValueNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness,\n  };\n\n  function checkValueUniqueness(node) {\n    var _node$values;\n\n    const typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const valueNodes =\n      (_node$values = node.values) !== null && _node$values !== void 0\n        ? _node$values\n        : [];\n    const valueNames = knownValueNames[typeName];\n\n    for (const valueDef of valueNodes) {\n      const valueName = valueDef.name.value;\n      const existingType = existingTypeMap[typeName];\n\n      if (isEnumType(existingType) && existingType.getValue(valueName)) {\n        context.reportError(\n          new GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: valueDef.name,\n            },\n          ),\n        );\n      } else if (valueNames[valueName]) {\n        context.reportError(\n          new GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" can only be defined once.`,\n            {\n              nodes: [valueNames[valueName], valueDef.name],\n            },\n          ),\n        );\n      } else {\n        valueNames[valueName] = valueDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n} from '../../type/definition.mjs';\n\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\nexport function UniqueFieldDefinitionNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness,\n  };\n\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n\n    const typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_node$fields = node.fields) !== null && _node$fields !== void 0\n        ? _node$fields\n        : [];\n    const fieldNames = knownFieldNames[typeName];\n\n    for (const fieldDef of fieldNodes) {\n      const fieldName = fieldDef.name.value;\n\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(\n          new GraphQLError(\n            `Field \"${typeName}.${fieldName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: fieldDef.name,\n            },\n          ),\n        );\n      } else if (fieldNames[fieldName]) {\n        context.reportError(\n          new GraphQLError(\n            `Field \"${typeName}.${fieldName}\" can only be defined once.`,\n            {\n              nodes: [fieldNames[fieldName], fieldDef.name],\n            },\n          ),\n        );\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique fragment names\n *\n * A GraphQL document is only valid if all defined fragments have unique names.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-Name-Uniqueness\n */\nexport function UniqueFragmentNamesRule(context) {\n  const knownFragmentNames = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n\n    FragmentDefinition(node) {\n      const fragmentName = node.name.value;\n\n      if (knownFragmentNames[fragmentName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one fragment named \"${fragmentName}\".`,\n            {\n              nodes: [knownFragmentNames[fragmentName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownFragmentNames[fragmentName] = node.name;\n      }\n\n      return false;\n    },\n  };\n}\n", "import { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Input-Object-Field-Uniqueness\n */\nexport function UniqueInputFieldNamesRule(context) {\n  const knownNameStack = [];\n  let knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n\n      leave() {\n        const prevKnownNames = knownNameStack.pop();\n        prevKnownNames || invariant(false);\n        knownNames = prevKnownNames;\n      },\n    },\n\n    ObjectField(node) {\n      const fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one input field named \"${fieldName}\".`,\n            {\n              nodes: [knownNames[fieldName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique operation names\n *\n * A GraphQL document is only valid if all defined operations have unique names.\n *\n * See https://spec.graphql.org/draft/#sec-Operation-Name-Uniqueness\n */\nexport function UniqueOperationNamesRule(context) {\n  const knownOperationNames = Object.create(null);\n  return {\n    OperationDefinition(node) {\n      const operationName = node.name;\n\n      if (operationName) {\n        if (knownOperationNames[operationName.value]) {\n          context.reportError(\n            new GraphQLError(\n              `There can be only one operation named \"${operationName.value}\".`,\n              {\n                nodes: [\n                  knownOperationNames[operationName.value],\n                  operationName,\n                ],\n              },\n            ),\n          );\n        } else {\n          knownOperationNames[operationName.value] = operationName;\n        }\n      }\n\n      return false;\n    },\n\n    FragmentDefinition: () => false,\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\nexport function UniqueOperationTypesRule(context) {\n  const schema = context.getSchema();\n  const definedOperationTypes = Object.create(null);\n  const existingOperationTypes = schema\n    ? {\n        query: schema.getQueryType(),\n        mutation: schema.getMutationType(),\n        subscription: schema.getSubscriptionType(),\n      }\n    : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes,\n  };\n\n  function checkOperationTypes(node) {\n    var _node$operationTypes;\n\n    // See: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const operationTypesNodes =\n      (_node$operationTypes = node.operationTypes) !== null &&\n      _node$operationTypes !== void 0\n        ? _node$operationTypes\n        : [];\n\n    for (const operationType of operationTypesNodes) {\n      const operation = operationType.operation;\n      const alreadyDefinedOperationType = definedOperationTypes[operation];\n\n      if (existingOperationTypes[operation]) {\n        context.reportError(\n          new GraphQLError(\n            `Type for ${operation} already defined in the schema. It cannot be redefined.`,\n            {\n              nodes: operationType,\n            },\n          ),\n        );\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one ${operation} type in schema.`,\n            {\n              nodes: [alreadyDefinedOperationType, operationType],\n            },\n          ),\n        );\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n\n    return false;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\nexport function UniqueTypeNamesRule(context) {\n  const knownTypeNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName,\n  };\n\n  function checkTypeName(node) {\n    const typeName = node.name.value;\n\n    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {\n      context.reportError(\n        new GraphQLError(\n          `Type \"${typeName}\" already exists in the schema. It cannot also be defined in this type definition.`,\n          {\n            nodes: node.name,\n          },\n        ),\n      );\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(\n        new GraphQLError(`There can be only one type named \"${typeName}\".`, {\n          nodes: [knownTypeNames[typeName], node.name],\n        }),\n      );\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}\n", "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\nexport function UniqueVariableNamesRule(context) {\n  return {\n    OperationDefinition(operationNode) {\n      var _operationNode$variab;\n\n      // See: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const variableDefinitions =\n        (_operationNode$variab = operationNode.variableDefinitions) !== null &&\n        _operationNode$variab !== void 0\n          ? _operationNode$variab\n          : [];\n      const seenVariableDefinitions = groupBy(\n        variableDefinitions,\n        (node) => node.variable.name.value,\n      );\n\n      for (const [variableName, variableNodes] of seenVariableDefinitions) {\n        if (variableNodes.length > 1) {\n          context.reportError(\n            new GraphQLError(\n              `There can be only one variable named \"$${variableName}\".`,\n              {\n                nodes: variableNodes.map((node) => node.variable.name),\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport {\n  getNamedType,\n  getNullableType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isRequiredInputField,\n} from '../../type/definition.mjs';\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n *\n * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type\n */\nexport function ValuesOfCorrectTypeRule(context) {\n  let variableDefinitions = {};\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefinitions = {};\n      },\n    },\n\n    VariableDefinition(definition) {\n      variableDefinitions[definition.variable.name.value] = definition;\n    },\n\n    ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      const type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n\n    ObjectValue(node) {\n      const type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n      const fieldNodeMap = keyMap(node.fields, (field) => field.name.value);\n\n      for (const fieldDef of Object.values(type.getFields())) {\n        const fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          const typeStr = inspect(fieldDef.type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${type.name}.${fieldDef.name}\" of required type \"${typeStr}\" was not provided.`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n\n      if (type.isOneOf) {\n        validateOneOfInputObject(\n          context,\n          node,\n          type,\n          fieldNodeMap,\n          variableDefinitions,\n        );\n      }\n    },\n\n    ObjectField(node) {\n      const parentType = getNamedType(context.getParentInputType());\n      const fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        const suggestions = suggestionList(\n          node.name.value,\n          Object.keys(parentType.getFields()),\n        );\n        context.reportError(\n          new GraphQLError(\n            `Field \"${node.name.value}\" is not defined by type \"${parentType.name}\".` +\n              didYouMean(suggestions),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    NullValue(node) {\n      const type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(\n          new GraphQLError(\n            `Expected value of type \"${inspect(type)}\", found ${print(node)}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    EnumValue: (node) => isValidValueNode(context, node),\n    IntValue: (node) => isValidValueNode(context, node),\n    FloatValue: (node) => isValidValueNode(context, node),\n    StringValue: (node) => isValidValueNode(context, node),\n    BooleanValue: (node) => isValidValueNode(context, node),\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  const locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  const type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    const typeStr = inspect(locationType);\n    context.reportError(\n      new GraphQLError(\n        `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n        {\n          nodes: node,\n        },\n      ),\n    );\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n  try {\n    const parseResult = type.parseLiteral(\n      node,\n      undefined,\n      /* variables */\n    );\n\n    if (parseResult === undefined) {\n      const typeStr = inspect(locationType);\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n          {\n            nodes: node,\n          },\n        ),\n      );\n    }\n  } catch (error) {\n    const typeStr = inspect(locationType);\n\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}; ` +\n            error.message,\n          {\n            nodes: node,\n            originalError: error,\n          },\n        ),\n      );\n    }\n  }\n}\n\nfunction validateOneOfInputObject(\n  context,\n  node,\n  type,\n  fieldNodeMap,\n  variableDefinitions,\n) {\n  var _fieldNodeMap$keys$;\n\n  const keys = Object.keys(fieldNodeMap);\n  const isNotExactlyOneField = keys.length !== 1;\n\n  if (isNotExactlyOneField) {\n    context.reportError(\n      new GraphQLError(\n        `OneOf Input Object \"${type.name}\" must specify exactly one key.`,\n        {\n          nodes: [node],\n        },\n      ),\n    );\n    return;\n  }\n\n  const value =\n    (_fieldNodeMap$keys$ = fieldNodeMap[keys[0]]) === null ||\n    _fieldNodeMap$keys$ === void 0\n      ? void 0\n      : _fieldNodeMap$keys$.value;\n  const isNullLiteral = !value || value.kind === Kind.NULL;\n  const isVariable =\n    (value === null || value === void 0 ? void 0 : value.kind) ===\n    Kind.VARIABLE;\n\n  if (isNullLiteral) {\n    context.reportError(\n      new GraphQLError(`Field \"${type.name}.${keys[0]}\" must be non-null.`, {\n        nodes: [node],\n      }),\n    );\n    return;\n  }\n\n  if (isVariable) {\n    const variableName = value.name.value;\n    const definition = variableDefinitions[variableName];\n    const isNullableVariable = definition.type.kind !== Kind.NON_NULL_TYPE;\n\n    if (isNullableVariable) {\n      context.reportError(\n        new GraphQLError(\n          `Variable \"${variableName}\" must be non-nullable to be used for OneOf Input Object \"${type.name}\".`,\n          {\n            nodes: [node],\n          },\n        ),\n      );\n    }\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isInputType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n *\n * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types\n */\nexport function VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.type);\n\n      if (type !== undefined && !isInputType(type)) {\n        const variableName = node.variable.name.value;\n        const typeName = print(node.type);\n        context.reportError(\n          new GraphQLError(\n            `Variable \"$${variableName}\" cannot be non-input type \"${typeName}\".`,\n            {\n              nodes: node.type,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isNonNullType } from '../../type/definition.mjs';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables in allowed position\n *\n * Variable usages must be compatible with the arguments they are passed to.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed\n */\nexport function VariablesInAllowedPositionRule(context) {\n  let varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        varDefMap = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node, type, defaultValue } of usages) {\n          const varName = node.name.value;\n          const varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            const schema = context.getSchema();\n            const varType = typeFromAST(schema, varDef.type);\n\n            if (\n              varType &&\n              !allowedVariableUsage(\n                schema,\n                varType,\n                varDef.defaultValue,\n                type,\n                defaultValue,\n              )\n            ) {\n              const varTypeStr = inspect(varType);\n              const typeStr = inspect(type);\n              context.reportError(\n                new GraphQLError(\n                  `Variable \"$${varName}\" of type \"${varTypeStr}\" used in position expecting type \"${typeStr}\".`,\n                  {\n                    nodes: [varDef, node],\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    },\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(\n  schema,\n  varType,\n  varDefaultValue,\n  locationType,\n  locationDefaultValue,\n) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    const hasNonNullVariableDefaultValue =\n      varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    const hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    const nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}\n", "// Spec Section: \"Executable Definitions\"\nimport { ExecutableDefinitionsRule } from './rules/ExecutableDefinitionsRule.mjs'; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nimport { FieldsOnCorrectTypeRule } from './rules/FieldsOnCorrectTypeRule.mjs'; // Spec Section: \"Fragments on Composite Types\"\n\nimport { FragmentsOnCompositeTypesRule } from './rules/FragmentsOnCompositeTypesRule.mjs'; // Spec Section: \"Argument Names\"\n\nimport {\n  KnownArgumentNamesOnDirectivesRule,\n  KnownArgumentNamesRule,\n} from './rules/KnownArgumentNamesRule.mjs'; // Spec Section: \"Directives Are Defined\"\n\nimport { KnownDirectivesRule } from './rules/KnownDirectivesRule.mjs'; // Spec Section: \"Fragment spread target defined\"\n\nimport { KnownFragmentNamesRule } from './rules/KnownFragmentNamesRule.mjs'; // Spec Section: \"Fragment Spread Type Existence\"\n\nimport { KnownTypeNamesRule } from './rules/KnownTypeNamesRule.mjs'; // Spec Section: \"Lone Anonymous Operation\"\n\nimport { LoneAnonymousOperationRule } from './rules/LoneAnonymousOperationRule.mjs'; // SDL-specific validation rules\n\nimport { LoneSchemaDefinitionRule } from './rules/LoneSchemaDefinitionRule.mjs'; // TODO: Spec Section\n\nimport { MaxIntrospectionDepthRule } from './rules/MaxIntrospectionDepthRule.mjs'; // Spec Section: \"Fragments must not form cycles\"\n\nimport { NoFragmentCyclesRule } from './rules/NoFragmentCyclesRule.mjs'; // Spec Section: \"All Variable Used Defined\"\n\nimport { NoUndefinedVariablesRule } from './rules/NoUndefinedVariablesRule.mjs'; // Spec Section: \"Fragments must be used\"\n\nimport { NoUnusedFragmentsRule } from './rules/NoUnusedFragmentsRule.mjs'; // Spec Section: \"All Variables Used\"\n\nimport { NoUnusedVariablesRule } from './rules/NoUnusedVariablesRule.mjs'; // Spec Section: \"Field Selection Merging\"\n\nimport { OverlappingFieldsCanBeMergedRule } from './rules/OverlappingFieldsCanBeMergedRule.mjs'; // Spec Section: \"Fragment spread is possible\"\n\nimport { PossibleFragmentSpreadsRule } from './rules/PossibleFragmentSpreadsRule.mjs';\nimport { PossibleTypeExtensionsRule } from './rules/PossibleTypeExtensionsRule.mjs'; // Spec Section: \"Argument Optionality\"\n\nimport {\n  ProvidedRequiredArgumentsOnDirectivesRule,\n  ProvidedRequiredArgumentsRule,\n} from './rules/ProvidedRequiredArgumentsRule.mjs'; // Spec Section: \"Leaf Field Selections\"\n\nimport { ScalarLeafsRule } from './rules/ScalarLeafsRule.mjs'; // Spec Section: \"Subscriptions with Single Root Field\"\n\nimport { SingleFieldSubscriptionsRule } from './rules/SingleFieldSubscriptionsRule.mjs';\nimport { UniqueArgumentDefinitionNamesRule } from './rules/UniqueArgumentDefinitionNamesRule.mjs'; // Spec Section: \"Argument Uniqueness\"\n\nimport { UniqueArgumentNamesRule } from './rules/UniqueArgumentNamesRule.mjs';\nimport { UniqueDirectiveNamesRule } from './rules/UniqueDirectiveNamesRule.mjs'; // Spec Section: \"Directives Are Unique Per Location\"\n\nimport { UniqueDirectivesPerLocationRule } from './rules/UniqueDirectivesPerLocationRule.mjs';\nimport { UniqueEnumValueNamesRule } from './rules/UniqueEnumValueNamesRule.mjs';\nimport { UniqueFieldDefinitionNamesRule } from './rules/UniqueFieldDefinitionNamesRule.mjs'; // Spec Section: \"Fragment Name Uniqueness\"\n\nimport { UniqueFragmentNamesRule } from './rules/UniqueFragmentNamesRule.mjs'; // Spec Section: \"Input Object Field Uniqueness\"\n\nimport { UniqueInputFieldNamesRule } from './rules/UniqueInputFieldNamesRule.mjs'; // Spec Section: \"Operation Name Uniqueness\"\n\nimport { UniqueOperationNamesRule } from './rules/UniqueOperationNamesRule.mjs';\nimport { UniqueOperationTypesRule } from './rules/UniqueOperationTypesRule.mjs';\nimport { UniqueTypeNamesRule } from './rules/UniqueTypeNamesRule.mjs'; // Spec Section: \"Variable Uniqueness\"\n\nimport { UniqueVariableNamesRule } from './rules/UniqueVariableNamesRule.mjs'; // Spec Section: \"Value Type Correctness\"\n\nimport { ValuesOfCorrectTypeRule } from './rules/ValuesOfCorrectTypeRule.mjs'; // Spec Section: \"Variables are Input Types\"\n\nimport { VariablesAreInputTypesRule } from './rules/VariablesAreInputTypesRule.mjs'; // Spec Section: \"All Variable Usages Are Allowed\"\n\nimport { VariablesInAllowedPositionRule } from './rules/VariablesInAllowedPositionRule.mjs';\n\n/**\n * Technically these aren't part of the spec but they are strongly encouraged\n * validation rules.\n */\nexport const recommendedRules = Object.freeze([MaxIntrospectionDepthRule]);\n/**\n * This set includes all validation rules defined by the GraphQL spec.\n *\n * The order of the rules in this list has been adjusted to lead to the\n * most clear output when encountering multiple validation errors.\n */\n\nexport const specifiedRules = Object.freeze([\n  ExecutableDefinitionsRule,\n  UniqueOperationNamesRule,\n  LoneAnonymousOperationRule,\n  SingleFieldSubscriptionsRule,\n  KnownTypeNamesRule,\n  FragmentsOnCompositeTypesRule,\n  VariablesAreInputTypesRule,\n  ScalarLeafsRule,\n  FieldsOnCorrectTypeRule,\n  UniqueFragmentNamesRule,\n  KnownFragmentNamesRule,\n  NoUnusedFragmentsRule,\n  PossibleFragmentSpreadsRule,\n  NoFragmentCyclesRule,\n  UniqueVariableNamesRule,\n  NoUndefinedVariablesRule,\n  NoUnusedVariablesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  KnownArgumentNamesRule,\n  UniqueArgumentNamesRule,\n  ValuesOfCorrectTypeRule,\n  ProvidedRequiredArgumentsRule,\n  VariablesInAllowedPositionRule,\n  OverlappingFieldsCanBeMergedRule,\n  UniqueInputFieldNamesRule,\n  ...recommendedRules,\n]);\n/**\n * @internal\n */\n\nexport const specifiedSDLRules = Object.freeze([\n  LoneSchemaDefinitionRule,\n  UniqueOperationTypesRule,\n  UniqueTypeNamesRule,\n  UniqueEnumValueNamesRule,\n  UniqueFieldDefinitionNamesRule,\n  UniqueArgumentDefinitionNamesRule,\n  UniqueDirectiveNamesRule,\n  KnownTypeNamesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  PossibleTypeExtensionsRule,\n  KnownArgumentNamesOnDirectivesRule,\n  UniqueArgumentNamesRule,\n  UniqueInputFieldNamesRule,\n  ProvidedRequiredArgumentsOnDirectivesRule,\n]);\n", "/**\n * Memoizes the provided three-argument function.\n */\nexport function memoize3(fn) {\n  let cache0;\n  return function memoized(a1, a2, a3) {\n    if (cache0 === undefined) {\n      cache0 = new WeakMap();\n    }\n\n    let cache1 = cache0.get(a1);\n\n    if (cache1 === undefined) {\n      cache1 = new WeakMap();\n      cache0.set(a1, cache1);\n    }\n\n    let cache2 = cache1.get(a2);\n\n    if (cache2 === undefined) {\n      cache2 = new WeakMap();\n      cache1.set(a2, cache2);\n    }\n\n    let fnResult = cache2.get(a3);\n\n    if (fnResult === undefined) {\n      fnResult = fn(a1, a2, a3);\n      cache2.set(a3, fnResult);\n    }\n\n    return fnResult;\n  };\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { isPromise } from '../jsutils/isPromise.mjs';\nimport { memoize3 } from '../jsutils/memoize3.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { promiseForObject } from '../jsutils/promiseForObject.mjs';\nimport { promiseReduce } from '../jsutils/promiseReduce.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isAbstractType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from '../type/definition.mjs';\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from '../type/introspection.mjs';\nimport { assertValidSchema } from '../type/validate.mjs';\nimport {\n  collectFields,\n  collectSubfields as _collectSubfields,\n} from './collectFields.mjs';\nimport { getArgumentValues, getVariableValues } from './values.mjs';\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\nconst collectSubfields = memoize3((exeContext, returnType, fieldNodes) =>\n  _collectSubfields(\n    exeContext.schema,\n    exeContext.fragments,\n    exeContext.variableValues,\n    returnType,\n    fieldNodes,\n  ),\n);\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g `a`\n * 2) fragment \"spreads\" e.g. `...c`\n * 3) inline fragment \"spreads\" e.g. `...on Type { a }`\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\n/**\n * Implements the \"Executing requests\" section of the GraphQL specification.\n *\n * Returns either a synchronous ExecutionResult (if all encountered resolvers\n * are synchronous), or a Promise of an ExecutionResult that will eventually be\n * resolved and never rejected.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n */\nexport function execute(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    devAssert(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const { schema, document, variableValues, rootValue } = args; // If arguments are missing or incorrect, throw an error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext(args); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext,\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n  //\n  // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n\n  try {\n    const { operation } = exeContext;\n    const result = executeOperation(exeContext, operation, rootValue);\n\n    if (isPromise(result)) {\n      return result.then(\n        (data) => buildResponse(data, exeContext.errors),\n        (error) => {\n          exeContext.errors.push(error);\n          return buildResponse(null, exeContext.errors);\n        },\n      );\n    }\n\n    return buildResponse(result, exeContext.errors);\n  } catch (error) {\n    exeContext.errors.push(error);\n    return buildResponse(null, exeContext.errors);\n  }\n}\n/**\n * Also implements the \"Executing requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function executeSync(args) {\n  const result = execute(args); // Assert that the execution was synchronous.\n\n  if (isPromise(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n/**\n * Given a completed execution context and data, build the `{ errors, data }`\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\nfunction buildResponse(data, errors) {\n  return errors.length === 0\n    ? {\n        data,\n      }\n    : {\n        errors,\n        data,\n      };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */\n\nexport function assertValidExecutionArguments(\n  schema,\n  document,\n  rawVariableValues,\n) {\n  document || devAssert(false, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  rawVariableValues == null ||\n    isObjectLike(rawVariableValues) ||\n    devAssert(\n      false,\n      'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.',\n    );\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * @internal\n */\n\nexport function buildExecutionContext(args) {\n  var _definition$name, _operation$variableDe;\n\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues: rawVariableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n    subscribeFieldResolver,\n  } = args;\n  let operation;\n  const fragments = Object.create(null);\n\n  for (const definition of document.definitions) {\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (operationName == null) {\n          if (operation !== undefined) {\n            return [\n              new GraphQLError(\n                'Must provide operation name if query contains multiple operations.',\n              ),\n            ];\n          }\n\n          operation = definition;\n        } else if (\n          ((_definition$name = definition.name) === null ||\n          _definition$name === void 0\n            ? void 0\n            : _definition$name.value) === operationName\n        ) {\n          operation = definition;\n        }\n\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n\n      default: // ignore non-executable definitions\n    }\n  }\n\n  if (!operation) {\n    if (operationName != null) {\n      return [new GraphQLError(`Unknown operation named \"${operationName}\".`)];\n    }\n\n    return [new GraphQLError('Must provide an operation.')];\n  } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  const variableDefinitions =\n    (_operation$variableDe = operation.variableDefinitions) !== null &&\n    _operation$variableDe !== void 0\n      ? _operation$variableDe\n      : [];\n  const coercedVariableValues = getVariableValues(\n    schema,\n    variableDefinitions,\n    rawVariableValues !== null && rawVariableValues !== void 0\n      ? rawVariableValues\n      : {},\n    {\n      maxErrors: 50,\n    },\n  );\n\n  if (coercedVariableValues.errors) {\n    return coercedVariableValues.errors;\n  }\n\n  return {\n    schema,\n    fragments,\n    rootValue,\n    contextValue,\n    operation,\n    variableValues: coercedVariableValues.coerced,\n    fieldResolver:\n      fieldResolver !== null && fieldResolver !== void 0\n        ? fieldResolver\n        : defaultFieldResolver,\n    typeResolver:\n      typeResolver !== null && typeResolver !== void 0\n        ? typeResolver\n        : defaultTypeResolver,\n    subscribeFieldResolver:\n      subscribeFieldResolver !== null && subscribeFieldResolver !== void 0\n        ? subscribeFieldResolver\n        : defaultFieldResolver,\n    errors: [],\n  };\n}\n/**\n * Implements the \"Executing operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  const rootType = exeContext.schema.getRootType(operation.operation);\n\n  if (rootType == null) {\n    throw new GraphQLError(\n      `Schema is not configured to execute ${operation.operation} operation.`,\n      {\n        nodes: operation,\n      },\n    );\n  }\n\n  const rootFields = collectFields(\n    exeContext.schema,\n    exeContext.fragments,\n    exeContext.variableValues,\n    rootType,\n    operation.selectionSet,\n  );\n  const path = undefined;\n\n  switch (operation.operation) {\n    case OperationTypeNode.QUERY:\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n\n    case OperationTypeNode.MUTATION:\n      return executeFieldsSerially(\n        exeContext,\n        rootType,\n        rootValue,\n        path,\n        rootFields,\n      );\n\n    case OperationTypeNode.SUBSCRIPTION:\n      // TODO: deprecate `subscribe` and move all logic here\n      // Temporary solution until we finish merging execute and subscribe together\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n  }\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that must be executed serially.\n */\n\nfunction executeFieldsSerially(\n  exeContext,\n  parentType,\n  sourceValue,\n  path,\n  fields,\n) {\n  return promiseReduce(\n    fields.entries(),\n    (results, [responseName, fieldNodes]) => {\n      const fieldPath = addPath(path, responseName, parentType.name);\n      const result = executeField(\n        exeContext,\n        parentType,\n        sourceValue,\n        fieldNodes,\n        fieldPath,\n      );\n\n      if (result === undefined) {\n        return results;\n      }\n\n      if (isPromise(result)) {\n        return result.then((resolvedResult) => {\n          results[responseName] = resolvedResult;\n          return results;\n        });\n      }\n\n      results[responseName] = result;\n      return results;\n    },\n    Object.create(null),\n  );\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that may be executed in parallel.\n */\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  const results = Object.create(null);\n  let containsPromise = false;\n\n  try {\n    for (const [responseName, fieldNodes] of fields.entries()) {\n      const fieldPath = addPath(path, responseName, parentType.name);\n      const result = executeField(\n        exeContext,\n        parentType,\n        sourceValue,\n        fieldNodes,\n        fieldPath,\n      );\n\n      if (result !== undefined) {\n        results[responseName] = result;\n\n        if (isPromise(result)) {\n          containsPromise = true;\n        }\n      }\n    }\n  } catch (error) {\n    if (containsPromise) {\n      // Ensure that any promises returned by other fields are handled, as they may also reject.\n      return promiseForObject(results).finally(() => {\n        throw error;\n      });\n    }\n\n    throw error;\n  } // If there are no promises, we can just return the object\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n  return promiseForObject(results);\n}\n/**\n * Implements the \"Executing fields\" section of the spec\n * In particular, this function figures out the value that the field returns by\n * calling its resolve function, then calls completeValue to complete promises,\n * serialize scalars, or execute the sub-selection-set for objects.\n */\n\nfunction executeField(exeContext, parentType, source, fieldNodes, path) {\n  var _fieldDef$resolve;\n\n  const fieldDef = getFieldDef(exeContext.schema, parentType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  const returnType = fieldDef.type;\n  const resolveFn =\n    (_fieldDef$resolve = fieldDef.resolve) !== null &&\n    _fieldDef$resolve !== void 0\n      ? _fieldDef$resolve\n      : exeContext.fieldResolver;\n  const info = buildResolveInfo(\n    exeContext,\n    fieldDef,\n    fieldNodes,\n    parentType,\n    path,\n  ); // Get the resolve function, regardless of if its result is normal or abrupt (error).\n\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    const args = getArgumentValues(\n      fieldDef,\n      fieldNodes[0],\n      exeContext.variableValues,\n    ); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue;\n    const result = resolveFn(source, args, contextValue, info);\n    let completed;\n\n    if (isPromise(result)) {\n      completed = result.then((resolved) =>\n        completeValue(exeContext, returnType, fieldNodes, info, path, resolved),\n      );\n    } else {\n      completed = completeValue(\n        exeContext,\n        returnType,\n        fieldNodes,\n        info,\n        path,\n        result,\n      );\n    }\n\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, (rawError) => {\n        const error = locatedError(rawError, fieldNodes, pathToArray(path));\n        return handleFieldError(error, returnType, exeContext);\n      });\n    }\n\n    return completed;\n  } catch (rawError) {\n    const error = locatedError(rawError, fieldNodes, pathToArray(path));\n    return handleFieldError(error, returnType, exeContext);\n  }\n}\n/**\n * @internal\n */\n\nexport function buildResolveInfo(\n  exeContext,\n  fieldDef,\n  fieldNodes,\n  parentType,\n  path,\n) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes,\n    returnType: fieldDef.type,\n    parentType,\n    path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues,\n  };\n}\n\nfunction handleFieldError(error, returnType, exeContext) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Value Completion\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by executing all sub-selections.\n */\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n  if (isNonNullType(returnType)) {\n    const completed = completeValue(\n      exeContext,\n      returnType.ofType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n\n    if (completed === null) {\n      throw new Error(\n        `Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`,\n      );\n    }\n\n    return completed;\n  } // If result value is null or undefined then return null.\n\n  if (result == null) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n  if (isListType(returnType)) {\n    return completeListValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  } // If field type is Object, execute and complete all sub-selections.\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  }\n  /* c8 ignore next 6 */\n  // Not reachable, all possible output types have been considered.\n\n  false ||\n    invariant(\n      false,\n      'Cannot complete value of unexpected output type: ' + inspect(returnType),\n    );\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\nfunction completeListValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  if (!isIterableObject(result)) {\n    throw new GraphQLError(\n      `Expected Iterable, but did not find one for field \"${info.parentType.name}.${info.fieldName}\".`,\n    );\n  } // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  const itemType = returnType.ofType;\n  let containsPromise = false;\n  const completedResults = Array.from(result, (item, index) => {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    const itemPath = addPath(path, index, undefined);\n\n    try {\n      let completedItem;\n\n      if (isPromise(item)) {\n        completedItem = item.then((resolved) =>\n          completeValue(\n            exeContext,\n            itemType,\n            fieldNodes,\n            info,\n            itemPath,\n            resolved,\n          ),\n        );\n      } else {\n        completedItem = completeValue(\n          exeContext,\n          itemType,\n          fieldNodes,\n          info,\n          itemPath,\n          item,\n        );\n      }\n\n      if (isPromise(completedItem)) {\n        containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n        // to take a second callback for the error case.\n\n        return completedItem.then(undefined, (rawError) => {\n          const error = locatedError(\n            rawError,\n            fieldNodes,\n            pathToArray(itemPath),\n          );\n          return handleFieldError(error, itemType, exeContext);\n        });\n      }\n\n      return completedItem;\n    } catch (rawError) {\n      const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n      return handleFieldError(error, itemType, exeContext);\n    }\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\nfunction completeLeafValue(returnType, result) {\n  const serializedResult = returnType.serialize(result);\n\n  if (serializedResult == null) {\n    throw new Error(\n      `Expected \\`${inspect(returnType)}.serialize(${inspect(result)})\\` to ` +\n        `return non-nullable value, returned: ${inspect(serializedResult)}`,\n    );\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\nfunction completeAbstractValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  var _returnType$resolveTy;\n\n  const resolveTypeFn =\n    (_returnType$resolveTy = returnType.resolveType) !== null &&\n    _returnType$resolveTy !== void 0\n      ? _returnType$resolveTy\n      : exeContext.typeResolver;\n  const contextValue = exeContext.contextValue;\n  const runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n\n  if (isPromise(runtimeType)) {\n    return runtimeType.then((resolvedRuntimeType) =>\n      completeObjectValue(\n        exeContext,\n        ensureValidRuntimeType(\n          resolvedRuntimeType,\n          exeContext,\n          returnType,\n          fieldNodes,\n          info,\n          result,\n        ),\n        fieldNodes,\n        info,\n        path,\n        result,\n      ),\n    );\n  }\n\n  return completeObjectValue(\n    exeContext,\n    ensureValidRuntimeType(\n      runtimeType,\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      result,\n    ),\n    fieldNodes,\n    info,\n    path,\n    result,\n  );\n}\n\nfunction ensureValidRuntimeType(\n  runtimeTypeName,\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  result,\n) {\n  if (runtimeTypeName == null) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\". Either the \"${returnType.name}\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function.`,\n      fieldNodes,\n    );\n  } // releases before 16.0.0 supported returning `GraphQLObjectType` from `resolveType`\n  // TODO: remove in 17.0.0 release\n\n  if (isObjectType(runtimeTypeName)) {\n    throw new GraphQLError(\n      'Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.',\n    );\n  }\n\n  if (typeof runtimeTypeName !== 'string') {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\" with ` +\n        `value ${inspect(result)}, received \"${inspect(runtimeTypeName)}\".`,\n    );\n  }\n\n  const runtimeType = exeContext.schema.getType(runtimeTypeName);\n\n  if (runtimeType == null) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" was resolved to a type \"${runtimeTypeName}\" that does not exist inside the schema.`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" was resolved to a non-object type \"${runtimeTypeName}\".`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  if (!exeContext.schema.isSubType(returnType, runtimeType)) {\n    throw new GraphQLError(\n      `Runtime Object type \"${runtimeType.name}\" is not a possible type for \"${returnType.name}\".`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\nfunction completeObjectValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  // Collect sub-fields to execute to complete this value.\n  const subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes); // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n\n  if (returnType.isTypeOf) {\n    const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then((resolvedIsTypeOf) => {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return executeFields(\n          exeContext,\n          returnType,\n          result,\n          path,\n          subFieldNodes,\n        );\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(\n    `Expected value of type \"${returnType.name}\" but got: ${inspect(result)}.`,\n    {\n      nodes: fieldNodes,\n    },\n  );\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\nexport const defaultTypeResolver = function (\n  value,\n  contextValue,\n  info,\n  abstractType,\n) {\n  // First, look for `__typename`.\n  if (isObjectLike(value) && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n  const possibleTypes = info.schema.getPossibleTypes(abstractType);\n  const promisedIsTypeOfResults = [];\n\n  for (let i = 0; i < possibleTypes.length; i++) {\n    const type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      const isTypeOfResult = type.isTypeOf(value, contextValue, info);\n\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type.name;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then((isTypeOfResults) => {\n      for (let i = 0; i < isTypeOfResults.length; i++) {\n        if (isTypeOfResults[i]) {\n          return possibleTypes[i].name;\n        }\n      }\n    });\n  }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexport const defaultFieldResolver = function (\n  source,\n  args,\n  contextValue,\n  info,\n) {\n  // ensure source is a value for which property access is acceptable.\n  if (isObjectLike(source) || typeof source === 'function') {\n    const property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */\n\nexport function getFieldDef(schema, parentType, fieldNode) {\n  const fieldName = fieldNode.name.value;\n\n  if (\n    fieldName === SchemaMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return SchemaMetaFieldDef;\n  } else if (\n    fieldName === TypeMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeExtensionNode,\n} from '../language/predicates.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLScalarType,\n  GraphQLUnionType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport {\n  GraphQLDeprecatedDirective,\n  GraphQLDirective,\n  GraphQLOneOfDirective,\n  GraphQLSpecifiedByDirective,\n} from '../type/directives.mjs';\nimport {\n  introspectionTypes,\n  isIntrospectionType,\n} from '../type/introspection.mjs';\nimport {\n  isSpecifiedScalarType,\n  specifiedScalarTypes,\n} from '../type/scalars.mjs';\nimport { assertSchema, GraphQLSchema } from '../type/schema.mjs';\nimport { assertValidSDLExtension } from '../validation/validate.mjs';\nimport { getDirectiveValues } from '../execution/values.mjs';\nimport { valueFromAST } from './valueFromAST.mjs';\n\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n */\nexport function extendSchema(schema, documentAST, options) {\n  assertSchema(schema);\n  (documentAST != null && documentAST.kind === Kind.DOCUMENT) ||\n    devAssert(false, 'Must provide valid Document AST.');\n\n  if (\n    (options === null || options === void 0 ? void 0 : options.assumeValid) !==\n      true &&\n    (options === null || options === void 0\n      ? void 0\n      : options.assumeValidSDL) !== true\n  ) {\n    assertValidSDLExtension(documentAST, schema);\n  }\n\n  const schemaConfig = schema.toConfig();\n  const extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);\n  return schemaConfig === extendedConfig\n    ? schema\n    : new GraphQLSchema(extendedConfig);\n}\n/**\n * @internal\n */\n\nexport function extendSchemaImpl(schemaConfig, documentAST, options) {\n  var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;\n\n  // Collect the type definitions and extensions found in the document.\n  const typeDefs = [];\n  const typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n\n  const directiveDefs = [];\n  let schemaDef; // Schema extensions are collected which may add additional operation types.\n\n  const schemaExtensions = [];\n\n  for (const def of documentAST.definitions) {\n    if (def.kind === Kind.SCHEMA_DEFINITION) {\n      schemaDef = def;\n    } else if (def.kind === Kind.SCHEMA_EXTENSION) {\n      schemaExtensions.push(def);\n    } else if (isTypeDefinitionNode(def)) {\n      typeDefs.push(def);\n    } else if (isTypeExtensionNode(def)) {\n      const extendedTypeName = def.name.value;\n      const existingTypeExtensions = typeExtensionsMap[extendedTypeName];\n      typeExtensionsMap[extendedTypeName] = existingTypeExtensions\n        ? existingTypeExtensions.concat([def])\n        : [def];\n    } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      directiveDefs.push(def);\n    }\n  } // If this document contains no new types, extensions, or directives then\n  // return the same unmodified GraphQLSchema instance.\n\n  if (\n    Object.keys(typeExtensionsMap).length === 0 &&\n    typeDefs.length === 0 &&\n    directiveDefs.length === 0 &&\n    schemaExtensions.length === 0 &&\n    schemaDef == null\n  ) {\n    return schemaConfig;\n  }\n\n  const typeMap = Object.create(null);\n\n  for (const existingType of schemaConfig.types) {\n    typeMap[existingType.name] = extendNamedType(existingType);\n  }\n\n  for (const typeNode of typeDefs) {\n    var _stdTypeMap$name;\n\n    const name = typeNode.name.value;\n    typeMap[name] =\n      (_stdTypeMap$name = stdTypeMap[name]) !== null &&\n      _stdTypeMap$name !== void 0\n        ? _stdTypeMap$name\n        : buildType(typeNode);\n  }\n\n  const operationTypes = {\n    // Get the extended root operation types.\n    query: schemaConfig.query && replaceNamedType(schemaConfig.query),\n    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),\n    subscription:\n      schemaConfig.subscription && replaceNamedType(schemaConfig.subscription),\n    // Then, incorporate schema definition and all schema extensions.\n    ...(schemaDef && getOperationTypes([schemaDef])),\n    ...getOperationTypes(schemaExtensions),\n  }; // Then produce and return a Schema config with these types.\n\n  return {\n    description:\n      (_schemaDef = schemaDef) === null || _schemaDef === void 0\n        ? void 0\n        : (_schemaDef$descriptio = _schemaDef.description) === null ||\n          _schemaDef$descriptio === void 0\n        ? void 0\n        : _schemaDef$descriptio.value,\n    ...operationTypes,\n    types: Object.values(typeMap),\n    directives: [\n      ...schemaConfig.directives.map(replaceDirective),\n      ...directiveDefs.map(buildDirective),\n    ],\n    extensions: Object.create(null),\n    astNode:\n      (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0\n        ? _schemaDef2\n        : schemaConfig.astNode,\n    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),\n    assumeValid:\n      (_options$assumeValid =\n        options === null || options === void 0\n          ? void 0\n          : options.assumeValid) !== null && _options$assumeValid !== void 0\n        ? _options$assumeValid\n        : false,\n  }; // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    }\n\n    if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    // Note: While this could make early assertions to get the correctly\n    // typed values, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    return typeMap[type.name];\n  }\n\n  function replaceDirective(directive) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({\n      ...config,\n      args: mapValue(config.args, extendArg),\n    });\n  }\n\n  function extendNamedType(type) {\n    if (isIntrospectionType(type) || isSpecifiedScalarType(type)) {\n      // Builtin types are not extended.\n      return type;\n    }\n\n    if (isScalarType(type)) {\n      return extendScalarType(type);\n    }\n\n    if (isObjectType(type)) {\n      return extendObjectType(type);\n    }\n\n    if (isInterfaceType(type)) {\n      return extendInterfaceType(type);\n    }\n\n    if (isUnionType(type)) {\n      return extendUnionType(type);\n    }\n\n    if (isEnumType(type)) {\n      return extendEnumType(type);\n    }\n\n    if (isInputObjectType(type)) {\n      return extendInputObjectType(type);\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible type definition nodes have been considered.\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n\n  function extendInputObjectType(type) {\n    var _typeExtensionsMap$co;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co !== void 0\n        ? _typeExtensionsMap$co\n        : [];\n    return new GraphQLInputObjectType({\n      ...config,\n      fields: () => ({\n        ...mapValue(config.fields, (field) => ({\n          ...field,\n          type: replaceType(field.type),\n        })),\n        ...buildInputFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendEnumType(type) {\n    var _typeExtensionsMap$ty;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null &&\n      _typeExtensionsMap$ty !== void 0\n        ? _typeExtensionsMap$ty\n        : [];\n    return new GraphQLEnumType({\n      ...config,\n      values: { ...config.values, ...buildEnumValueMap(extensions) },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendScalarType(type) {\n    var _typeExtensionsMap$co2;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co2 !== void 0\n        ? _typeExtensionsMap$co2\n        : [];\n    let specifiedByURL = config.specifiedByURL;\n\n    for (const extensionNode of extensions) {\n      var _getSpecifiedByURL;\n\n      specifiedByURL =\n        (_getSpecifiedByURL = getSpecifiedByURL(extensionNode)) !== null &&\n        _getSpecifiedByURL !== void 0\n          ? _getSpecifiedByURL\n          : specifiedByURL;\n    }\n\n    return new GraphQLScalarType({\n      ...config,\n      specifiedByURL,\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendObjectType(type) {\n    var _typeExtensionsMap$co3;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co3 !== void 0\n        ? _typeExtensionsMap$co3\n        : [];\n    return new GraphQLObjectType({\n      ...config,\n      interfaces: () => [\n        ...type.getInterfaces().map(replaceNamedType),\n        ...buildInterfaces(extensions),\n      ],\n      fields: () => ({\n        ...mapValue(config.fields, extendField),\n        ...buildFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendInterfaceType(type) {\n    var _typeExtensionsMap$co4;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co4 !== void 0\n        ? _typeExtensionsMap$co4\n        : [];\n    return new GraphQLInterfaceType({\n      ...config,\n      interfaces: () => [\n        ...type.getInterfaces().map(replaceNamedType),\n        ...buildInterfaces(extensions),\n      ],\n      fields: () => ({\n        ...mapValue(config.fields, extendField),\n        ...buildFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendUnionType(type) {\n    var _typeExtensionsMap$co5;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co5 !== void 0\n        ? _typeExtensionsMap$co5\n        : [];\n    return new GraphQLUnionType({\n      ...config,\n      types: () => [\n        ...type.getTypes().map(replaceNamedType),\n        ...buildUnionTypes(extensions),\n      ],\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendField(field) {\n    return {\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && mapValue(field.args, extendArg),\n    };\n  }\n\n  function extendArg(arg) {\n    return { ...arg, type: replaceType(arg.type) };\n  }\n\n  function getOperationTypes(nodes) {\n    const opTypes = {};\n\n    for (const node of nodes) {\n      var _node$operationTypes;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const operationTypesNodes =\n        /* c8 ignore next */\n        (_node$operationTypes = node.operationTypes) !== null &&\n        _node$operationTypes !== void 0\n          ? _node$operationTypes\n          : [];\n\n      for (const operationType of operationTypesNodes) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        // @ts-expect-error\n        opTypes[operationType.operation] = getNamedType(operationType.type);\n      }\n    }\n\n    return opTypes;\n  }\n\n  function getNamedType(node) {\n    var _stdTypeMap$name2;\n\n    const name = node.name.value;\n    const type =\n      (_stdTypeMap$name2 = stdTypeMap[name]) !== null &&\n      _stdTypeMap$name2 !== void 0\n        ? _stdTypeMap$name2\n        : typeMap[name];\n\n    if (type === undefined) {\n      throw new Error(`Unknown type: \"${name}\".`);\n    }\n\n    return type;\n  }\n\n  function getWrappedType(node) {\n    if (node.kind === Kind.LIST_TYPE) {\n      return new GraphQLList(getWrappedType(node.type));\n    }\n\n    if (node.kind === Kind.NON_NULL_TYPE) {\n      return new GraphQLNonNull(getWrappedType(node.type));\n    }\n\n    return getNamedType(node);\n  }\n\n  function buildDirective(node) {\n    var _node$description;\n\n    return new GraphQLDirective({\n      name: node.name.value,\n      description:\n        (_node$description = node.description) === null ||\n        _node$description === void 0\n          ? void 0\n          : _node$description.value,\n      // @ts-expect-error\n      locations: node.locations.map(({ value }) => value),\n      isRepeatable: node.repeatable,\n      args: buildArgumentMap(node.arguments),\n      astNode: node,\n    });\n  }\n\n  function buildFieldMap(nodes) {\n    const fieldConfigMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const nodeFields =\n        /* c8 ignore next */\n        (_node$fields = node.fields) !== null && _node$fields !== void 0\n          ? _node$fields\n          : [];\n\n      for (const field of nodeFields) {\n        var _field$description;\n\n        fieldConfigMap[field.name.value] = {\n          // Note: While this could make assertions to get the correctly typed\n          // value, that would throw immediately while type system validation\n          // with validateSchema() will produce more actionable results.\n          type: getWrappedType(field.type),\n          description:\n            (_field$description = field.description) === null ||\n            _field$description === void 0\n              ? void 0\n              : _field$description.value,\n          args: buildArgumentMap(field.arguments),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field,\n        };\n      }\n    }\n\n    return fieldConfigMap;\n  }\n\n  function buildArgumentMap(args) {\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    const argsNodes =\n      /* c8 ignore next */\n      args !== null && args !== void 0 ? args : [];\n    const argConfigMap = Object.create(null);\n\n    for (const arg of argsNodes) {\n      var _arg$description;\n\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n      const type = getWrappedType(arg.type);\n      argConfigMap[arg.name.value] = {\n        type,\n        description:\n          (_arg$description = arg.description) === null ||\n          _arg$description === void 0\n            ? void 0\n            : _arg$description.value,\n        defaultValue: valueFromAST(arg.defaultValue, type),\n        deprecationReason: getDeprecationReason(arg),\n        astNode: arg,\n      };\n    }\n\n    return argConfigMap;\n  }\n\n  function buildInputFieldMap(nodes) {\n    const inputFieldMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields2;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const fieldsNodes =\n        /* c8 ignore next */\n        (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0\n          ? _node$fields2\n          : [];\n\n      for (const field of fieldsNodes) {\n        var _field$description2;\n\n        // Note: While this could make assertions to get the correctly typed\n        // value, that would throw immediately while type system validation\n        // with validateSchema() will produce more actionable results.\n        const type = getWrappedType(field.type);\n        inputFieldMap[field.name.value] = {\n          type,\n          description:\n            (_field$description2 = field.description) === null ||\n            _field$description2 === void 0\n              ? void 0\n              : _field$description2.value,\n          defaultValue: valueFromAST(field.defaultValue, type),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field,\n        };\n      }\n    }\n\n    return inputFieldMap;\n  }\n\n  function buildEnumValueMap(nodes) {\n    const enumValueMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$values;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const valuesNodes =\n        /* c8 ignore next */\n        (_node$values = node.values) !== null && _node$values !== void 0\n          ? _node$values\n          : [];\n\n      for (const value of valuesNodes) {\n        var _value$description;\n\n        enumValueMap[value.name.value] = {\n          description:\n            (_value$description = value.description) === null ||\n            _value$description === void 0\n              ? void 0\n              : _value$description.value,\n          deprecationReason: getDeprecationReason(value),\n          astNode: value,\n        };\n      }\n    }\n\n    return enumValueMap;\n  }\n\n  function buildInterfaces(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (node) => {\n        var _node$interfaces$map, _node$interfaces;\n\n        return (\n          /* c8 ignore next */\n          (_node$interfaces$map =\n            (_node$interfaces = node.interfaces) === null ||\n            _node$interfaces === void 0\n              ? void 0\n              : _node$interfaces.map(getNamedType)) !== null &&\n            _node$interfaces$map !== void 0\n            ? _node$interfaces$map\n            : []\n        );\n      },\n    );\n  }\n\n  function buildUnionTypes(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (node) => {\n        var _node$types$map, _node$types;\n\n        return (\n          /* c8 ignore next */\n          (_node$types$map =\n            (_node$types = node.types) === null || _node$types === void 0\n              ? void 0\n              : _node$types.map(getNamedType)) !== null &&\n            _node$types$map !== void 0\n            ? _node$types$map\n            : []\n        );\n      },\n    );\n  }\n\n  function buildType(astNode) {\n    var _typeExtensionsMap$na;\n\n    const name = astNode.name.value;\n    const extensionASTNodes =\n      (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null &&\n      _typeExtensionsMap$na !== void 0\n        ? _typeExtensionsMap$na\n        : [];\n\n    switch (astNode.kind) {\n      case Kind.OBJECT_TYPE_DEFINITION: {\n        var _astNode$description;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLObjectType({\n          name,\n          description:\n            (_astNode$description = astNode.description) === null ||\n            _astNode$description === void 0\n              ? void 0\n              : _astNode$description.value,\n          interfaces: () => buildInterfaces(allNodes),\n          fields: () => buildFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.INTERFACE_TYPE_DEFINITION: {\n        var _astNode$description2;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLInterfaceType({\n          name,\n          description:\n            (_astNode$description2 = astNode.description) === null ||\n            _astNode$description2 === void 0\n              ? void 0\n              : _astNode$description2.value,\n          interfaces: () => buildInterfaces(allNodes),\n          fields: () => buildFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.ENUM_TYPE_DEFINITION: {\n        var _astNode$description3;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLEnumType({\n          name,\n          description:\n            (_astNode$description3 = astNode.description) === null ||\n            _astNode$description3 === void 0\n              ? void 0\n              : _astNode$description3.value,\n          values: buildEnumValueMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.UNION_TYPE_DEFINITION: {\n        var _astNode$description4;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLUnionType({\n          name,\n          description:\n            (_astNode$description4 = astNode.description) === null ||\n            _astNode$description4 === void 0\n              ? void 0\n              : _astNode$description4.value,\n          types: () => buildUnionTypes(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.SCALAR_TYPE_DEFINITION: {\n        var _astNode$description5;\n\n        return new GraphQLScalarType({\n          name,\n          description:\n            (_astNode$description5 = astNode.description) === null ||\n            _astNode$description5 === void 0\n              ? void 0\n              : _astNode$description5.value,\n          specifiedByURL: getSpecifiedByURL(astNode),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION: {\n        var _astNode$description6;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLInputObjectType({\n          name,\n          description:\n            (_astNode$description6 = astNode.description) === null ||\n            _astNode$description6 === void 0\n              ? void 0\n              : _astNode$description6.value,\n          fields: () => buildInputFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n          isOneOf: isOneOf(astNode),\n        });\n      }\n    }\n  }\n}\nconst stdTypeMap = keyMap(\n  [...specifiedScalarTypes, ...introspectionTypes],\n  (type) => type.name,\n);\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\nfunction getDeprecationReason(node) {\n  const deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return deprecated === null || deprecated === void 0\n    ? void 0\n    : deprecated.reason;\n}\n/**\n * Given a scalar node, returns the string value for the specifiedByURL.\n */\n\nfunction getSpecifiedByURL(node) {\n  const specifiedBy = getDirectiveValues(GraphQLSpecifiedByDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return specifiedBy === null || specifiedBy === void 0\n    ? void 0\n    : specifiedBy.url;\n}\n/**\n * Given an input object node, returns if the node should be OneOf.\n */\n\nfunction isOneOf(node) {\n  return Boolean(getDirectiveValues(GraphQLOneOfDirective, node));\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { print } from '../language/printer.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNamedType,\n  isNonNullType,\n  isObjectType,\n  isRequiredArgument,\n  isRequiredInputField,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport { isSpecifiedScalarType } from '../type/scalars.mjs';\nimport { astFromValue } from './astFromValue.mjs';\nimport { sortValueNode } from './sortValueNode.mjs';\nvar BreakingChangeType;\n\n(function (BreakingChangeType) {\n  BreakingChangeType['TYPE_REMOVED'] = 'TYPE_REMOVED';\n  BreakingChangeType['TYPE_CHANGED_KIND'] = 'TYPE_CHANGED_KIND';\n  BreakingChangeType['TYPE_REMOVED_FROM_UNION'] = 'TYPE_REMOVED_FROM_UNION';\n  BreakingChangeType['VALUE_REMOVED_FROM_ENUM'] = 'VALUE_REMOVED_FROM_ENUM';\n  BreakingChangeType['REQUIRED_INPUT_FIELD_ADDED'] =\n    'REQUIRED_INPUT_FIELD_ADDED';\n  BreakingChangeType['IMPLEMENTED_INTERFACE_REMOVED'] =\n    'IMPLEMENTED_INTERFACE_REMOVED';\n  BreakingChangeType['FIELD_REMOVED'] = 'FIELD_REMOVED';\n  BreakingChangeType['FIELD_CHANGED_KIND'] = 'FIELD_CHANGED_KIND';\n  BreakingChangeType['REQUIRED_ARG_ADDED'] = 'REQUIRED_ARG_ADDED';\n  BreakingChangeType['ARG_REMOVED'] = 'ARG_REMOVED';\n  BreakingChangeType['ARG_CHANGED_KIND'] = 'ARG_CHANGED_KIND';\n  BreakingChangeType['DIRECTIVE_REMOVED'] = 'DIRECTIVE_REMOVED';\n  BreakingChangeType['DIRECTIVE_ARG_REMOVED'] = 'DIRECTIVE_ARG_REMOVED';\n  BreakingChangeType['REQUIRED_DIRECTIVE_ARG_ADDED'] =\n    'REQUIRED_DIRECTIVE_ARG_ADDED';\n  BreakingChangeType['DIRECTIVE_REPEATABLE_REMOVED'] =\n    'DIRECTIVE_REPEATABLE_REMOVED';\n  BreakingChangeType['DIRECTIVE_LOCATION_REMOVED'] =\n    'DIRECTIVE_LOCATION_REMOVED';\n})(BreakingChangeType || (BreakingChangeType = {}));\n\nexport { BreakingChangeType };\nvar DangerousChangeType;\n\n(function (DangerousChangeType) {\n  DangerousChangeType['VALUE_ADDED_TO_ENUM'] = 'VALUE_ADDED_TO_ENUM';\n  DangerousChangeType['TYPE_ADDED_TO_UNION'] = 'TYPE_ADDED_TO_UNION';\n  DangerousChangeType['OPTIONAL_INPUT_FIELD_ADDED'] =\n    'OPTIONAL_INPUT_FIELD_ADDED';\n  DangerousChangeType['OPTIONAL_ARG_ADDED'] = 'OPTIONAL_ARG_ADDED';\n  DangerousChangeType['IMPLEMENTED_INTERFACE_ADDED'] =\n    'IMPLEMENTED_INTERFACE_ADDED';\n  DangerousChangeType['ARG_DEFAULT_VALUE_CHANGE'] = 'ARG_DEFAULT_VALUE_CHANGE';\n})(DangerousChangeType || (DangerousChangeType = {}));\n\nexport { DangerousChangeType };\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\nexport function findBreakingChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(\n    (change) => change.type in BreakingChangeType,\n  );\n}\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\n\nexport function findDangerousChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(\n    (change) => change.type in DangerousChangeType,\n  );\n}\n\nfunction findSchemaChanges(oldSchema, newSchema) {\n  return [\n    ...findTypeChanges(oldSchema, newSchema),\n    ...findDirectiveChanges(oldSchema, newSchema),\n  ];\n}\n\nfunction findDirectiveChanges(oldSchema, newSchema) {\n  const schemaChanges = [];\n  const directivesDiff = diff(\n    oldSchema.getDirectives(),\n    newSchema.getDirectives(),\n  );\n\n  for (const oldDirective of directivesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.DIRECTIVE_REMOVED,\n      description: `${oldDirective.name} was removed.`,\n    });\n  }\n\n  for (const [oldDirective, newDirective] of directivesDiff.persisted) {\n    const argsDiff = diff(oldDirective.args, newDirective.args);\n\n    for (const newArg of argsDiff.added) {\n      if (isRequiredArgument(newArg)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,\n          description: `A required arg ${newArg.name} on directive ${oldDirective.name} was added.`,\n        });\n      }\n    }\n\n    for (const oldArg of argsDiff.removed) {\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n        description: `${oldArg.name} was removed from ${oldDirective.name}.`,\n      });\n    }\n\n    if (oldDirective.isRepeatable && !newDirective.isRepeatable) {\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,\n        description: `Repeatable flag was removed from ${oldDirective.name}.`,\n      });\n    }\n\n    for (const location of oldDirective.locations) {\n      if (!newDirective.locations.includes(location)) {\n        schemaChanges.push({\n          type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n          description: `${location} was removed from ${oldDirective.name}.`,\n        });\n      }\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findTypeChanges(oldSchema, newSchema) {\n  const schemaChanges = [];\n  const typesDiff = diff(\n    Object.values(oldSchema.getTypeMap()),\n    Object.values(newSchema.getTypeMap()),\n  );\n\n  for (const oldType of typesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED,\n      description: isSpecifiedScalarType(oldType)\n        ? `Standard scalar ${oldType.name} was removed because it is not referenced anymore.`\n        : `${oldType.name} was removed.`,\n    });\n  }\n\n  for (const [oldType, newType] of typesDiff.persisted) {\n    if (isEnumType(oldType) && isEnumType(newType)) {\n      schemaChanges.push(...findEnumTypeChanges(oldType, newType));\n    } else if (isUnionType(oldType) && isUnionType(newType)) {\n      schemaChanges.push(...findUnionTypeChanges(oldType, newType));\n    } else if (isInputObjectType(oldType) && isInputObjectType(newType)) {\n      schemaChanges.push(...findInputObjectTypeChanges(oldType, newType));\n    } else if (isObjectType(oldType) && isObjectType(newType)) {\n      schemaChanges.push(\n        ...findFieldChanges(oldType, newType),\n        ...findImplementedInterfacesChanges(oldType, newType),\n      );\n    } else if (isInterfaceType(oldType) && isInterfaceType(newType)) {\n      schemaChanges.push(\n        ...findFieldChanges(oldType, newType),\n        ...findImplementedInterfacesChanges(oldType, newType),\n      );\n    } else if (oldType.constructor !== newType.constructor) {\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description:\n          `${oldType.name} changed from ` +\n          `${typeKindName(oldType)} to ${typeKindName(newType)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findInputObjectTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const fieldsDiff = diff(\n    Object.values(oldType.getFields()),\n    Object.values(newType.getFields()),\n  );\n\n  for (const newField of fieldsDiff.added) {\n    if (isRequiredInputField(newField)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,\n        description: `A required field ${newField.name} on input type ${oldType.name} was added.`,\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,\n        description: `An optional field ${newField.name} on input type ${oldType.name} was added.`,\n      });\n    }\n  }\n\n  for (const oldField of fieldsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: `${oldType.name}.${oldField.name} was removed.`,\n    });\n  }\n\n  for (const [oldField, newField] of fieldsDiff.persisted) {\n    const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(\n      oldField.type,\n      newField.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} changed type from ` +\n          `${String(oldField.type)} to ${String(newField.type)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findUnionTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());\n\n  for (const newPossibleType of possibleTypesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n      description: `${newPossibleType.name} was added to union type ${oldType.name}.`,\n    });\n  }\n\n  for (const oldPossibleType of possibleTypesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n      description: `${oldPossibleType.name} was removed from union type ${oldType.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findEnumTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const valuesDiff = diff(oldType.getValues(), newType.getValues());\n\n  for (const newValue of valuesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n      description: `${newValue.name} was added to enum type ${oldType.name}.`,\n    });\n  }\n\n  for (const oldValue of valuesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n      description: `${oldValue.name} was removed from enum type ${oldType.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findImplementedInterfacesChanges(oldType, newType) {\n  const schemaChanges = [];\n  const interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());\n\n  for (const newInterface of interfacesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,\n      description: `${newInterface.name} added to interfaces implemented by ${oldType.name}.`,\n    });\n  }\n\n  for (const oldInterface of interfacesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,\n      description: `${oldType.name} no longer implements interface ${oldInterface.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findFieldChanges(oldType, newType) {\n  const schemaChanges = [];\n  const fieldsDiff = diff(\n    Object.values(oldType.getFields()),\n    Object.values(newType.getFields()),\n  );\n\n  for (const oldField of fieldsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: `${oldType.name}.${oldField.name} was removed.`,\n    });\n  }\n\n  for (const [oldField, newField] of fieldsDiff.persisted) {\n    schemaChanges.push(...findArgChanges(oldType, oldField, newField));\n    const isSafe = isChangeSafeForObjectOrInterfaceField(\n      oldField.type,\n      newField.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} changed type from ` +\n          `${String(oldField.type)} to ${String(newField.type)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findArgChanges(oldType, oldField, newField) {\n  const schemaChanges = [];\n  const argsDiff = diff(oldField.args, newField.args);\n\n  for (const oldArg of argsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.ARG_REMOVED,\n      description: `${oldType.name}.${oldField.name} arg ${oldArg.name} was removed.`,\n    });\n  }\n\n  for (const [oldArg, newArg] of argsDiff.persisted) {\n    const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(\n      oldArg.type,\n      newArg.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.ARG_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed type from ` +\n          `${String(oldArg.type)} to ${String(newArg.type)}.`,\n      });\n    } else if (oldArg.defaultValue !== undefined) {\n      if (newArg.defaultValue === undefined) {\n        schemaChanges.push({\n          type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n          description: `${oldType.name}.${oldField.name} arg ${oldArg.name} defaultValue was removed.`,\n        });\n      } else {\n        // Since we looking only for client's observable changes we should\n        // compare default values in the same representation as they are\n        // represented inside introspection.\n        const oldValueStr = stringifyValue(oldArg.defaultValue, oldArg.type);\n        const newValueStr = stringifyValue(newArg.defaultValue, newArg.type);\n\n        if (oldValueStr !== newValueStr) {\n          schemaChanges.push({\n            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n            description: `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed defaultValue from ${oldValueStr} to ${newValueStr}.`,\n          });\n        }\n      }\n    }\n  }\n\n  for (const newArg of argsDiff.added) {\n    if (isRequiredArgument(newArg)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_ARG_ADDED,\n        description: `A required arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`,\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_ARG_ADDED,\n        description: `An optional arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if (isListType(oldType)) {\n    return (\n      // if they're both lists, make sure the underlying types are compatible\n      (isListType(newType) &&\n        isChangeSafeForObjectOrInterfaceField(\n          oldType.ofType,\n          newType.ofType,\n        )) || // moving from nullable to non-null of the same underlying type is safe\n      (isNonNullType(newType) &&\n        isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType))\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return (\n      isNonNullType(newType) &&\n      isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType)\n    );\n  }\n\n  return (\n    // if they're both named types, see if their names are equivalent\n    (isNamedType(newType) && oldType.name === newType.name) || // moving from nullable to non-null of the same underlying type is safe\n    (isNonNullType(newType) &&\n      isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType))\n  );\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if (isListType(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return (\n      isListType(newType) &&\n      isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType)\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    return (\n      // if they're both non-null, make sure the underlying types are\n      // compatible\n      (isNonNullType(newType) &&\n        isChangeSafeForInputObjectFieldOrFieldArg(\n          oldType.ofType,\n          newType.ofType,\n        )) || // moving from non-null to nullable of the same underlying type is safe\n      (!isNonNullType(newType) &&\n        isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType))\n    );\n  } // if they're both named types, see if their names are equivalent\n\n  return isNamedType(newType) && oldType.name === newType.name;\n}\n\nfunction typeKindName(type) {\n  if (isScalarType(type)) {\n    return 'a Scalar type';\n  }\n\n  if (isObjectType(type)) {\n    return 'an Object type';\n  }\n\n  if (isInterfaceType(type)) {\n    return 'an Interface type';\n  }\n\n  if (isUnionType(type)) {\n    return 'a Union type';\n  }\n\n  if (isEnumType(type)) {\n    return 'an Enum type';\n  }\n\n  if (isInputObjectType(type)) {\n    return 'an Input type';\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction stringifyValue(value, type) {\n  const ast = astFromValue(value, type);\n  ast != null || invariant(false);\n  return print(sortValueNode(ast));\n}\n\nfunction diff(oldArray, newArray) {\n  const added = [];\n  const removed = [];\n  const persisted = [];\n  const oldMap = keyMap(oldArray, ({ name }) => name);\n  const newMap = keyMap(newArray, ({ name }) => name);\n\n  for (const oldItem of oldArray) {\n    const newItem = newMap[oldItem.name];\n\n    if (newItem === undefined) {\n      removed.push(oldItem);\n    } else {\n      persisted.push([oldItem, newItem]);\n    }\n  }\n\n  for (const newItem of newArray) {\n    if (oldMap[newItem.name] === undefined) {\n      added.push(newItem);\n    }\n  }\n\n  return {\n    added,\n    persisted,\n    removed,\n  };\n}\n", "import type { RequestDocument } from './types.js'\nimport type { DocumentNode, OperationDefinitionNode } from 'graphql'\nimport { parse, print } from 'graphql'\n\n/**\n * helpers\n */\n\nconst extractOperationName = (document: DocumentNode): string | undefined => {\n  let operationName = undefined\n\n  const operationDefinitions = document.definitions.filter(\n    (definition) => definition.kind === `OperationDefinition`\n  ) as OperationDefinitionNode[]\n\n  if (operationDefinitions.length === 1) {\n    operationName = operationDefinitions[0]?.name?.value\n  }\n\n  return operationName\n}\n\nexport const resolveRequestDocument = (\n  document: RequestDocument\n): { query: string; operationName?: string } => {\n  if (typeof document === `string`) {\n    let operationName = undefined\n\n    try {\n      const parsedDocument = parse(document)\n      operationName = extractOperationName(parsedDocument)\n    } catch (err) {\n      // Failed parsing the document, the operationName will be undefined\n    }\n\n    return { query: document, operationName }\n  }\n\n  const operationName = extractOperationName(document)\n\n  return { query: print(document), operationName }\n}\n", "import type { RemoveIndex } from './helpers.js'\nimport type { TypedDocumentNode } from '@graphql-typed-document-node/core'\nimport type { fetch } from 'cross-fetch'\nimport type { GraphQLError } from 'graphql/error/GraphQLError.js'\nimport type { DocumentNode } from 'graphql/language/ast.js'\n\nexport type Fetch = typeof fetch\n\n/**\n * 'None' will throw whenever the response contains errors\n *\n * 'Ignore' will ignore incoming errors and resolve like no errors occurred\n *\n * 'All' will return both the errors and data\n */\nexport type ErrorPolicy = 'none' | 'ignore' | 'all'\n\nexport interface JsonSerializer {\n  stringify: (obj: any) => string\n  parse: (obj: string) => unknown\n}\n\nexport interface AdditionalRequestOptions {\n  jsonSerializer?: JsonSerializer\n  /**\n   * Decide how to handle GraphQLErrors in response\n   */\n  errorPolicy?: ErrorPolicy\n}\n\nexport interface FetchOptions extends RequestInit, AdditionalRequestOptions {}\n\nexport type { GraphQLError }\n\nexport type Variables = Record<string, unknown>\n\nexport type BatchVariables = (Record<string, unknown> | undefined)[]\n\nexport interface GraphQLResponse<T = unknown> {\n  data?: T\n  errors?: GraphQLError[]\n  extensions?: unknown\n  status: number\n  [key: string]: unknown\n}\n\nexport interface GraphQLRequestContext<V extends Variables = Variables> {\n  query: string | string[]\n  variables?: V\n}\n\nexport class ClientError extends Error {\n  response: GraphQLResponse\n  request: GraphQLRequestContext\n\n  constructor(response: GraphQLResponse, request: GraphQLRequestContext) {\n    const message = `${ClientError.extractMessage(response)}: ${JSON.stringify({\n      response,\n      request,\n    })}`\n\n    super(message)\n\n    Object.setPrototypeOf(this, ClientError.prototype)\n\n    this.response = response\n    this.request = request\n\n    // this is needed as Safari doesn't support .captureStackTrace\n    if (typeof Error.captureStackTrace === `function`) {\n      Error.captureStackTrace(this, ClientError)\n    }\n  }\n\n  private static extractMessage(response: GraphQLResponse): string {\n    return response.errors?.[0]?.message ?? `GraphQL Error (Code: ${response.status})`\n  }\n}\n\nexport type MaybeLazy<T> = T | (() => T)\n\nexport type RequestDocument = string | DocumentNode\n\nexport interface GraphQLClientResponse<Data> {\n  status: number\n  headers: Headers\n  data: Data\n  extensions?: unknown\n  errors?: GraphQLError[]\n}\n\nexport type HTTPMethodInput = 'GET' | 'POST' | 'get' | 'post'\n\nexport interface RequestConfig extends Omit<RequestInit, 'headers' | 'method'>, AdditionalRequestOptions {\n  fetch?: Fetch\n  method?: HTTPMethodInput\n  headers?: MaybeLazy<GraphQLClientRequestHeaders>\n  requestMiddleware?: RequestMiddleware\n  responseMiddleware?: ResponseMiddleware\n  jsonSerializer?: JsonSerializer\n}\n\nexport type BatchRequestDocument<V extends Variables = Variables> = {\n  document: RequestDocument\n  variables?: V\n}\n\nexport type RawRequestOptions<V extends Variables = Variables> = {\n  query: string\n  requestHeaders?: GraphQLClientRequestHeaders\n  signal?: RequestInit['signal']\n} & (V extends Record<any, never>\n  ? { variables?: V }\n  : keyof RemoveIndex<V> extends never\n  ? { variables?: V }\n  : { variables: V })\n\nexport type RequestOptions<V extends Variables = Variables, T = unknown> = {\n  document: RequestDocument | TypedDocumentNode<T, V>\n  requestHeaders?: GraphQLClientRequestHeaders\n  signal?: RequestInit['signal']\n} & (V extends Record<any, never>\n  ? { variables?: V }\n  : keyof RemoveIndex<V> extends never\n  ? { variables?: V }\n  : { variables: V })\n\nexport interface BatchRequestsOptions<V extends Variables = Variables> {\n  documents: BatchRequestDocument<V>[]\n  requestHeaders?: GraphQLClientRequestHeaders\n  signal?: RequestInit['signal']\n}\n\nexport type RequestExtendedOptions<V extends Variables = Variables, T = unknown> = {\n  url: string\n} & RequestOptions<V, T>\n\nexport type RawRequestExtendedOptions<V extends Variables = Variables> = {\n  url: string\n} & RawRequestOptions<V>\n\nexport interface BatchRequestsExtendedOptions<V extends Variables = Variables>\n  extends BatchRequestsOptions<V> {\n  url: string\n}\n\nexport type ResponseMiddleware = (response: GraphQLClientResponse<unknown> | Error) => void\n\n// prettier-ignore\nexport type RequestMiddleware<V extends Variables = Variables> = (request: RequestExtendedInit<V>) => RequestExtendedInit | Promise<RequestExtendedInit>\n\ntype RequestExtendedInit<V extends Variables = Variables> = RequestInit & {\n  url: string\n  operationName?: string\n  variables?: V\n}\n\nexport type GraphQLClientRequestHeaders = Headers | string[][] | Record<string, string>\n\n// prettier-ignore\nexport type VariablesAndRequestHeadersArgs<V extends Variables> =\n  V extends Record<any, never> // do we have explicitly no variables allowed?\n    ? [variables?: V, requestHeaders?: GraphQLClientRequestHeaders]\n  : keyof RemoveIndex<V> extends never // do we get an empty variables object?\n    ? [variables?: V, requestHeaders?: GraphQLClientRequestHeaders]\n    : [variables: V, requestHeaders?: GraphQLClientRequestHeaders]\n", "import { defaultJsonSerializer } from './defaultJsonSerializer.js'\nimport { HeadersInstanceToPlainObject, uppercase } from './helpers.js'\nimport {\n  parseBatchRequestArgs,\n  parseRawRequestArgs,\n  parseRawRequestExtendedArgs,\n  parseRequestArgs,\n  parseRequestExtendedArgs,\n} from './parseArgs.js'\nimport { resolveRequestDocument } from './resolveRequestDocument.js'\nimport type {\n  BatchRequestDocument,\n  FetchOptions,\n  GraphQLClientRequestHeaders,\n  GraphQLClientResponse,\n  HTTPMethodInput,\n  JsonSerializer,\n  MaybeLazy,\n  RequestConfig,\n  RequestMiddleware,\n  ResponseMiddleware,\n  VariablesAndRequestHeadersArgs,\n} from './types.js'\nimport {\n  BatchRequestsExtendedOptions,\n  BatchRequestsOptions,\n  ClientError,\n  RawRequestExtendedOptions,\n  RawRequestOptions,\n  RequestDocument,\n  RequestExtendedOptions,\n  RequestOptions,\n  Variables,\n} from './types.js'\nimport type { TypedDocumentNode } from '@graphql-typed-document-node/core'\nimport crossFetch, * as CrossFetch from 'cross-fetch'\n\n/**\n * Convert the given headers configuration into a plain object.\n */\nconst resolveHeaders = (headers?: GraphQLClientRequestHeaders): Record<string, string> => {\n  let oHeaders: Record<string, string> = {}\n  if (headers) {\n    if (\n      (typeof Headers !== `undefined` && headers instanceof Headers) ||\n      (CrossFetch && CrossFetch.Headers && headers instanceof CrossFetch.Headers)\n    ) {\n      oHeaders = HeadersInstanceToPlainObject(headers)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(([name, value]) => {\n        if (name && value !== undefined) {\n          oHeaders[name] = value\n        }\n      })\n    } else {\n      oHeaders = headers as Record<string, string>\n    }\n  }\n\n  return oHeaders\n}\n\n/**\n * Clean a GraphQL document to send it via a GET query\n */\nconst cleanQuery = (str: string): string => str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ` `).trim()\n\ntype BuildRequestConfigParamsBatch<V> = {\n  query: string[]\n  variables: V[] | undefined\n  operationName: undefined\n  jsonSerializer: JsonSerializer\n}\n\ntype BuildRequestConfigParamsSingle<V> = {\n  query: string\n  variables: V | undefined\n  operationName: string | undefined\n  jsonSerializer: JsonSerializer\n}\n\ntype BuildRequestConfigParams<V> = BuildRequestConfigParamsSingle<V> | BuildRequestConfigParamsBatch<V>\n\n/**\n * Create query string for GraphQL request\n */\nconst buildRequestConfig = <V extends Variables>(params: BuildRequestConfigParams<V>): string => {\n  if (!Array.isArray(params.query)) {\n    const params_ = params as BuildRequestConfigParamsSingle<V>\n    const search: string[] = [`query=${encodeURIComponent(cleanQuery(params_.query))}`]\n\n    if (params.variables) {\n      search.push(`variables=${encodeURIComponent(params_.jsonSerializer.stringify(params_.variables))}`)\n    }\n\n    if (params_.operationName) {\n      search.push(`operationName=${encodeURIComponent(params_.operationName)}`)\n    }\n\n    return search.join(`&`)\n  }\n\n  if (typeof params.variables !== `undefined` && !Array.isArray(params.variables)) {\n    throw new Error(`Cannot create query with given variable type, array expected`)\n  }\n\n  // Batch support\n  const params_ = params as BuildRequestConfigParamsBatch<V>\n  const payload = params.query.reduce<{ query: string; variables: string | undefined }[]>(\n    (acc, currentQuery, index) => {\n      acc.push({\n        query: cleanQuery(currentQuery),\n        variables: params_.variables ? params_.jsonSerializer.stringify(params_.variables[index]) : undefined,\n      })\n      return acc\n    },\n    []\n  )\n\n  return `query=${encodeURIComponent(params_.jsonSerializer.stringify(payload))}`\n}\n\ntype Fetch = (url: string, config: RequestInit) => Promise<Response>\n\ninterface RequestVerbParams<V extends Variables = Variables> {\n  url: string\n  query: string | string[]\n  fetch: Fetch\n  fetchOptions: FetchOptions\n  variables?: V\n  headers?: GraphQLClientRequestHeaders\n  operationName?: string\n  middleware?: RequestMiddleware<V>\n}\n\nconst createHttpMethodFetcher =\n  (method: 'GET' | 'POST') =>\n  async <V extends Variables>(params: RequestVerbParams<V>) => {\n    const { url, query, variables, operationName, fetch, fetchOptions, middleware } = params\n\n    const headers = { ...params.headers }\n    let queryParams = ``\n    let body = undefined\n\n    if (method === `POST`) {\n      body = createRequestBody(query, variables, operationName, fetchOptions.jsonSerializer)\n      if (typeof body === `string`) {\n        // @ts-expect-error todo\n        headers[`Content-Type`] = `application/json`\n      }\n    } else {\n      // @ts-expect-error todo needs ADT for TS to understand the different states\n      queryParams = buildRequestConfig<V>({\n        query,\n        variables,\n        operationName,\n        jsonSerializer: fetchOptions.jsonSerializer ?? defaultJsonSerializer,\n      })\n    }\n\n    const init: RequestInit = {\n      method,\n      headers,\n      body,\n      ...fetchOptions,\n    }\n\n    let urlResolved = url\n    let initResolved = init\n    if (middleware) {\n      const result = await Promise.resolve(middleware({ ...init, url, operationName, variables }))\n      const { url: urlNew, ...initNew } = result\n      urlResolved = urlNew\n      initResolved = initNew\n    }\n    if (queryParams) {\n      urlResolved = `${urlResolved}?${queryParams}`\n    }\n    return await fetch(urlResolved, initResolved)\n  }\n\n/**\n * GraphQL Client.\n */\nclass GraphQLClient {\n  constructor(private url: string, public readonly requestConfig: RequestConfig = {}) {}\n\n  /**\n   * Send a GraphQL query to the server.\n   */\n  rawRequest: RawRequestMethod = async <T, V extends Variables = Variables>(\n    ...args: RawRequestMethodArgs<V>\n  ): Promise<GraphQLClientResponse<T>> => {\n    const [queryOrOptions, variables, requestHeaders] = args\n    const rawRequestOptions = parseRawRequestArgs<V>(queryOrOptions, variables, requestHeaders)\n\n    const {\n      headers,\n      fetch = crossFetch,\n      method = `POST`,\n      requestMiddleware,\n      responseMiddleware,\n      ...fetchOptions\n    } = this.requestConfig\n    const { url } = this\n    if (rawRequestOptions.signal !== undefined) {\n      fetchOptions.signal = rawRequestOptions.signal\n    }\n\n    const { operationName } = resolveRequestDocument(rawRequestOptions.query)\n\n    return makeRequest<T, V>({\n      url,\n      query: rawRequestOptions.query,\n      variables: rawRequestOptions.variables as V,\n      headers: {\n        ...resolveHeaders(callOrIdentity(headers)),\n        ...resolveHeaders(rawRequestOptions.requestHeaders),\n      },\n      operationName,\n      fetch,\n      method,\n      fetchOptions,\n      middleware: requestMiddleware,\n    })\n      .then((response) => {\n        if (responseMiddleware) {\n          responseMiddleware(response)\n        }\n        return response\n      })\n      .catch((error) => {\n        if (responseMiddleware) {\n          responseMiddleware(error)\n        }\n        throw error\n      })\n  }\n\n  /**\n   * Send a GraphQL document to the server.\n   */\n  async request<T, V extends Variables = Variables>(\n    document: RequestDocument | TypedDocumentNode<T, V>,\n    ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>\n  ): Promise<T>\n  async request<T, V extends Variables = Variables>(options: RequestOptions<V, T>): Promise<T>\n  async request<T, V extends Variables = Variables>(\n    documentOrOptions: RequestDocument | TypedDocumentNode<T, V> | RequestOptions<V>,\n    ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>\n  ): Promise<T> {\n    const [variables, requestHeaders] = variablesAndRequestHeaders\n    const requestOptions = parseRequestArgs(documentOrOptions, variables, requestHeaders)\n\n    const {\n      headers,\n      fetch = crossFetch,\n      method = `POST`,\n      requestMiddleware,\n      responseMiddleware,\n      ...fetchOptions\n    } = this.requestConfig\n    const { url } = this\n    if (requestOptions.signal !== undefined) {\n      fetchOptions.signal = requestOptions.signal\n    }\n\n    const { query, operationName } = resolveRequestDocument(requestOptions.document)\n\n    return makeRequest<T>({\n      url,\n      query,\n      variables: requestOptions.variables,\n      headers: {\n        ...resolveHeaders(callOrIdentity(headers)),\n        ...resolveHeaders(requestOptions.requestHeaders),\n      },\n      operationName,\n      fetch,\n      method,\n      fetchOptions,\n      middleware: requestMiddleware,\n    })\n      .then((response) => {\n        if (responseMiddleware) {\n          responseMiddleware(response)\n        }\n        return response.data\n      })\n      .catch((error) => {\n        if (responseMiddleware) {\n          responseMiddleware(error)\n        }\n        throw error\n      })\n  }\n\n  /**\n   * Send GraphQL documents in batch to the server.\n   */\n  // prettier-ignore\n  batchRequests<T extends BatchResult, V extends Variables = Variables>(documents: BatchRequestDocument<V>[], requestHeaders?: GraphQLClientRequestHeaders): Promise<T>\n  // prettier-ignore\n  batchRequests<T extends BatchResult, V extends Variables = Variables>(options: BatchRequestsOptions<V>): Promise<T>\n  // prettier-ignore\n  batchRequests<T extends BatchResult, V extends Variables = Variables>(documentsOrOptions: BatchRequestDocument<V>[] | BatchRequestsOptions<V>, requestHeaders?: GraphQLClientRequestHeaders): Promise<T> {\n    const batchRequestOptions = parseBatchRequestArgs<V>(documentsOrOptions, requestHeaders)\n    const { headers, ...fetchOptions } = this.requestConfig\n\n    if (batchRequestOptions.signal !== undefined) {\n      fetchOptions.signal = batchRequestOptions.signal\n    }\n\n    const queries = batchRequestOptions.documents.map(\n      ({ document }) => resolveRequestDocument(document).query\n    )\n    const variables = batchRequestOptions.documents.map(({ variables }) => variables)\n\n    return makeRequest<T>({\n      url: this.url,\n      query: queries,\n      // @ts-expect-error TODO reconcile batch variables into system.\n      variables,\n      headers: {\n        ...resolveHeaders(callOrIdentity(headers)),\n        ...resolveHeaders(batchRequestOptions.requestHeaders),\n      },\n      operationName: undefined,\n      fetch: this.requestConfig.fetch ?? crossFetch,\n      method: this.requestConfig.method || `POST`,\n      fetchOptions,\n      middleware: this.requestConfig.requestMiddleware,\n    })\n      .then((response) => {\n        if (this.requestConfig.responseMiddleware) {\n          this.requestConfig.responseMiddleware(response)\n        }\n        return response.data\n      })\n      .catch((error) => {\n        if (this.requestConfig.responseMiddleware) {\n          this.requestConfig.responseMiddleware(error)\n        }\n        throw error\n      })\n  }\n\n  setHeaders(headers: GraphQLClientRequestHeaders): GraphQLClient {\n    this.requestConfig.headers = headers\n    return this\n  }\n\n  /**\n   * Attach a header to the client. All subsequent requests will have this header.\n   */\n  setHeader(key: string, value: string): GraphQLClient {\n    const { headers } = this.requestConfig\n\n    if (headers) {\n      // todo what if headers is in nested array form... ?\n      //@ts-expect-error todo\n      headers[key] = value\n    } else {\n      this.requestConfig.headers = { [key]: value }\n    }\n\n    return this\n  }\n\n  /**\n   * Change the client endpoint. All subsequent requests will send to this endpoint.\n   */\n  setEndpoint(value: string): GraphQLClient {\n    this.url = value\n    return this\n  }\n}\n\nconst makeRequest = async <T = unknown, V extends Variables = Variables>(params: {\n  url: string\n  query: string | string[]\n  variables?: V\n  headers?: GraphQLClientRequestHeaders\n  operationName?: string\n  fetch: Fetch\n  method?: HTTPMethodInput\n  fetchOptions: FetchOptions\n  middleware?: RequestMiddleware<V>\n}): Promise<GraphQLClientResponse<T>> => {\n  const { query, variables, fetchOptions } = params\n  const fetcher = createHttpMethodFetcher(uppercase(params.method ?? `post`))\n  const isBatchingQuery = Array.isArray(params.query)\n  const response = await fetcher(params)\n  const result = await getResult(response, fetchOptions.jsonSerializer ?? defaultJsonSerializer)\n\n  const successfullyReceivedData = Array.isArray(result)\n    ? !result.some(({ data }) => !data)\n    : Boolean(result.data)\n\n  const successfullyPassedErrorPolicy =\n    Array.isArray(result) ||\n    !result.errors ||\n    (Array.isArray(result.errors) && !result.errors.length) ||\n    fetchOptions.errorPolicy === `all` ||\n    fetchOptions.errorPolicy === `ignore`\n\n  if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {\n    // @ts-expect-error TODO fixme\n    const { errors: _, ...rest } = Array.isArray(result) ? result : result\n    const data = fetchOptions.errorPolicy === `ignore` ? rest : result\n    const dataEnvelope = isBatchingQuery ? { data } : data\n\n    // @ts-expect-error TODO\n    return {\n      ...dataEnvelope,\n      headers: response.headers,\n      status: response.status,\n    }\n  } else {\n    const errorResult =\n      typeof result === `string`\n        ? {\n            error: result,\n          }\n        : result\n    throw new ClientError(\n      // @ts-expect-error TODO\n      { ...errorResult, status: response.status, headers: response.headers },\n      { query, variables }\n    )\n  }\n}\n\n// prettier-ignore\ninterface RawRequestMethod {\n  <T, V extends Variables = Variables>(query: string, variables?: V, requestHeaders?: GraphQLClientRequestHeaders): Promise<GraphQLClientResponse<T>>\n  <T, V extends Variables = Variables>(options: RawRequestOptions<V>): Promise<GraphQLClientResponse<T>>\n}\n\n// prettier-ignore\ntype RawRequestMethodArgs<V extends Variables> =\n  | [query: string, variables?: V, requestHeaders?: GraphQLClientRequestHeaders]\n  | [RawRequestOptions<V>]\n\n// prettier-ignore\ninterface RawRequest {\n  <T, V extends Variables = Variables>(url: string, query: string, ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>): Promise<GraphQLClientResponse<T>>\n  <T, V extends Variables = Variables>(options: RawRequestExtendedOptions<V>): Promise<GraphQLClientResponse<T>>\n}\n\n// prettier-ignore\ntype RawRequestArgs<V extends Variables> = \n  | [options: RawRequestExtendedOptions<V>, query?: string, ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>]\n  | [url: string,                           query?: string, ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>]\n\n/**\n * Send a GraphQL Query to the GraphQL server for execution.\n */\nconst rawRequest: RawRequest = async <T, V extends Variables>(\n  ...args: RawRequestArgs<V>\n): Promise<GraphQLClientResponse<T>> => {\n  const [urlOrOptions, query, ...variablesAndRequestHeaders] = args\n  const requestOptions = parseRawRequestExtendedArgs<V>(urlOrOptions, query, ...variablesAndRequestHeaders)\n  const client = new GraphQLClient(requestOptions.url)\n  return client.rawRequest<T, V>({\n    ...requestOptions,\n  })\n}\n\n/**\n * Send a GraphQL Document to the GraphQL server for execution.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await request('https://foo.bar/graphql', `\n *   {\n *     query {\n *       users\n *     }\n *   }\n * `)\n *\n * // You can also pass a GraphQL DocumentNode. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n *\n * // If you don't actually care about using DocumentNode but just\n * // want the tooling support for gql template tag like IDE syntax\n * // coloring and prettier autoformat then note you can use the\n * // passthrough gql tag shipped with graphql-request to save a bit\n * // of performance and not have to install another dep into your project.\n *\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n * ```\n */\n// REMARKS: In order to have autocomplete for options work make it the first overload. If not\n// then autocomplete will instead show the various methods for a string, which is not what we want.\n// prettier-ignore\nasync function request<T, V extends Variables = Variables>(options: RequestExtendedOptions<V, T>): Promise<T>\n// prettier-ignore\nasync function request<T, V extends Variables = Variables>(url: string, document: RequestDocument | TypedDocumentNode<T, V>, ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>): Promise<T>\n// prettier-ignore\n// eslint-disable-next-line\nasync function request<T, V extends Variables = Variables>(urlOrOptions: string | RequestExtendedOptions<V, T>, document?: RequestDocument | TypedDocumentNode<T, V>, ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>): Promise<T> {\n  const requestOptions = parseRequestExtendedArgs<V>(urlOrOptions, document, ...variablesAndRequestHeaders)\n  const client = new GraphQLClient(requestOptions.url)\n  return client.request<T, V>({\n    ...requestOptions,\n  })\n}\n\n/**\n * Send a batch of GraphQL Document to the GraphQL server for execution.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await batchRequests('https://foo.bar/graphql', [\n * {\n *  query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * },\n * {\n *   query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * }])\n *\n * // You can also pass a GraphQL DocumentNode as query. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await batchRequests('https://foo.bar/graphql', [{ query: gql`...` }])\n * ```\n */\nconst batchRequests: BatchRequests = async (...args: BatchRequestsArgs) => {\n  const params = parseBatchRequestsArgsExtended(args)\n  const client = new GraphQLClient(params.url)\n  return client.batchRequests(params)\n}\n\ninterface Result<Data extends object = object> {\n  data: Data\n}\n\ntype BatchResult = [Result, ...Result[]]\n\n// prettier-ignore\ninterface BatchRequests {\n  <T extends BatchResult, V extends Variables = Variables>(url: string, documents: BatchRequestDocument<V>[], requestHeaders?: GraphQLClientRequestHeaders): Promise<T>\n  <T extends BatchResult, V extends Variables = Variables>(options: BatchRequestsExtendedOptions<V>): Promise<T>\n}\n\ntype BatchRequestsArgs =\n  | [url: string, documents: BatchRequestDocument[], requestHeaders?: GraphQLClientRequestHeaders]\n  | [options: BatchRequestsExtendedOptions]\n\nconst parseBatchRequestsArgsExtended = (args: BatchRequestsArgs): BatchRequestsExtendedOptions => {\n  if (args.length === 1) {\n    return args[0]\n  } else {\n    return {\n      url: args[0],\n      documents: args[1],\n      requestHeaders: args[2],\n      signal: undefined,\n    }\n  }\n}\n\nconst createRequestBody = (\n  query: string | string[],\n  variables?: Variables | Variables[],\n  operationName?: string,\n  jsonSerializer?: JsonSerializer\n): string => {\n  const jsonSerializer_ = jsonSerializer ?? defaultJsonSerializer\n  if (!Array.isArray(query)) {\n    return jsonSerializer_.stringify({ query, variables, operationName })\n  }\n\n  if (typeof variables !== `undefined` && !Array.isArray(variables)) {\n    throw new Error(`Cannot create request body with given variable type, array expected`)\n  }\n\n  // Batch support\n  const payload = query.reduce<{ query: string; variables: Variables | undefined }[]>(\n    (acc, currentQuery, index) => {\n      acc.push({ query: currentQuery, variables: variables ? variables[index] : undefined })\n      return acc\n    },\n    []\n  )\n\n  return jsonSerializer_.stringify(payload)\n}\n\nconst getResult = async (\n  response: Response,\n  jsonSerializer: JsonSerializer\n): Promise<\n  | { data: object; errors: undefined }[]\n  | { data: object; errors: undefined }\n  | { data: undefined; errors: object }\n  | { data: undefined; errors: object[] }\n> => {\n  let contentType: string | undefined\n\n  response.headers.forEach((value, key) => {\n    if (key.toLowerCase() === `content-type`) {\n      contentType = value\n    }\n  })\n\n  if (\n    contentType &&\n    (contentType.toLowerCase().startsWith(`application/json`) ||\n      contentType.toLowerCase().startsWith(`application/graphql+json`) ||\n      contentType.toLowerCase().startsWith(`application/graphql-response+json`))\n  ) {\n    return jsonSerializer.parse(await response.text()) as any\n  } else {\n    return response.text() as any\n  }\n}\n\nconst callOrIdentity = <T>(value: MaybeLazy<T>) => {\n  return typeof value === `function` ? (value as () => T)() : value\n}\n\n/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n * ```\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n * ```\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */\nexport const gql = (chunks: TemplateStringsArray, ...variables: unknown[]): string => {\n  return chunks.reduce(\n    (acc, chunk, index) => `${acc}${chunk}${index in variables ? String(variables[index]) : ``}`,\n    ``\n  )\n}\n\nexport { GraphQLWebSocketClient } from './graphql-ws.js'\nexport { resolveRequestDocument } from './resolveRequestDocument.js'\nexport {\n  BatchRequestDocument,\n  batchRequests,\n  BatchRequestsExtendedOptions,\n  BatchRequestsOptions,\n  ClientError,\n  GraphQLClient,\n  rawRequest,\n  RawRequestExtendedOptions,\n  RawRequestOptions,\n  request,\n  RequestDocument,\n  RequestExtendedOptions,\n  RequestMiddleware,\n  RequestOptions,\n  ResponseMiddleware,\n  Variables,\n}\nexport default request\n", "/* eslint-disable */\nimport { resolveRequestDocument } from './resolveRequestDocument.js'\nimport type { RequestDocument, Variables } from './types.js'\nimport { ClientError } from './types.js'\n// import type WebSocket from 'ws'\n\nconst CONNECTION_INIT = `connection_init`\nconst CONNECTION_ACK = `connection_ack`\nconst PING = `ping`\nconst PONG = `pong`\nconst SUBSCRIBE = `subscribe`\nconst NEXT = `next`\nconst ERROR = `error`\nconst COMPLETE = `complete`\n\ntype MessagePayload = { [key: string]: any }\n\ntype SubscribePayload<V extends Variables = Variables, E = any> = {\n  operationName?: string | null\n  query: string\n  variables?: V\n  extensions?: E\n}\n\nclass GraphQLWebSocketMessage<A = MessagePayload> {\n  private _type: string\n  private _id?: string\n  private _payload?: A\n\n  public get type(): string {\n    return this._type\n  }\n  public get id(): string | undefined {\n    return this._id\n  }\n  public get payload(): A | undefined {\n    return this._payload\n  }\n\n  constructor(type: string, payload?: A, id?: string) {\n    this._type = type\n    this._payload = payload\n    this._id = id\n  }\n\n  public get text(): string {\n    const result: any = { type: this.type }\n    if (this.id != null && this.id != undefined) result.id = this.id\n    if (this.payload != null && this.payload != undefined) result.payload = this.payload\n    return JSON.stringify(result)\n  }\n\n  static parse<A>(data: string, f: (payload: any) => A): GraphQLWebSocketMessage<A> {\n    const { type, payload, id }: { type: string; payload: any; id: string } = JSON.parse(data)\n    return new GraphQLWebSocketMessage(type, f(payload), id)\n  }\n}\n\nexport type SocketHandler = {\n  onInit?: <T>() => Promise<T>\n  onAcknowledged?: <A>(payload?: A) => Promise<void>\n  onPing?: <In, Out>(payload: In) => Promise<Out>\n  onPong?: <T>(payload: T) => any\n  onClose?: () => any\n}\n\nexport type UnsubscribeCallback = () => void\n\nexport interface GraphQLSubscriber<T, E = unknown> {\n  next?(data: T, extensions?: E): void\n  error?(errorValue: ClientError): void\n  complete?(): void\n}\n\ntype SubscriptionRecord = {\n  subscriber: GraphQLSubscriber<unknown, unknown>\n  query: string\n  variables?: Variables\n}\n\ntype SocketState = {\n  acknowledged: boolean\n  lastRequestId: number\n  subscriptions: { [key: string]: SubscriptionRecord }\n}\n\nexport class GraphQLWebSocketClient {\n  static PROTOCOL = `graphql-transport-ws`\n\n  private socket: WebSocket\n  private socketState: SocketState = { acknowledged: false, lastRequestId: 0, subscriptions: {} }\n\n  constructor(socket: WebSocket, { onInit, onAcknowledged, onPing, onPong }: SocketHandler) {\n    this.socket = socket\n\n    socket.addEventListener(`open`, async (e) => {\n      this.socketState.acknowledged = false\n      this.socketState.subscriptions = {}\n      socket.send(ConnectionInit(onInit ? await onInit() : null).text)\n    })\n\n    socket.addEventListener(`close`, (e) => {\n      this.socketState.acknowledged = false\n      this.socketState.subscriptions = {}\n    })\n\n    socket.addEventListener(`error`, (e) => {\n      console.error(e)\n    })\n\n    socket.addEventListener(`message`, (e) => {\n      try {\n        const message = parseMessage(e.data)\n        switch (message.type) {\n          case CONNECTION_ACK: {\n            if (this.socketState.acknowledged) {\n              console.warn(`Duplicate CONNECTION_ACK message ignored`)\n            } else {\n              this.socketState.acknowledged = true\n              if (onAcknowledged) onAcknowledged(message.payload)\n            }\n            return\n          }\n          case PING: {\n            if (onPing) onPing(message.payload).then((r) => socket.send(Pong(r).text))\n            else socket.send(Pong(null).text)\n            return\n          }\n          case PONG: {\n            if (onPong) onPong(message.payload)\n            return\n          }\n        }\n\n        if (!this.socketState.acknowledged) {\n          // Web-socket connection not acknowledged\n          return\n        }\n\n        if (message.id === undefined || message.id === null || !this.socketState.subscriptions[message.id]) {\n          // No subscription identifer or subscription indentifier is not found\n          return\n        }\n        const { query, variables, subscriber } = this.socketState.subscriptions[message.id]!\n\n        switch (message.type) {\n          case NEXT: {\n            if (!message.payload.errors && message.payload.data) {\n              subscriber.next && subscriber.next(message.payload.data)\n            }\n            if (message.payload.errors) {\n              subscriber.error &&\n                subscriber.error(new ClientError({ ...message.payload, status: 200 }, { query, variables }))\n            } else {\n            }\n            return\n          }\n\n          case ERROR: {\n            subscriber.error &&\n              subscriber.error(\n                new ClientError({ errors: message.payload, status: 200 }, { query, variables })\n              )\n            return\n          }\n\n          case COMPLETE: {\n            subscriber.complete && subscriber.complete()\n            delete this.socketState.subscriptions[message.id]\n            return\n          }\n        }\n      } catch (e) {\n        // Unexpected errors while handling graphql-ws message\n        console.error(e)\n        socket.close(1006)\n      }\n      socket.close(4400, `Unknown graphql-ws message.`)\n    })\n  }\n\n  private makeSubscribe<T, V extends Variables, E>(\n    query: string,\n    operationName: string | undefined,\n    subscriber: GraphQLSubscriber<T, E>,\n    variables?: V\n  ): UnsubscribeCallback {\n    const subscriptionId = (this.socketState.lastRequestId++).toString()\n    this.socketState.subscriptions[subscriptionId] = { query, variables, subscriber }\n    this.socket.send(Subscribe(subscriptionId, { query, operationName, variables }).text)\n    return () => {\n      this.socket.send(Complete(subscriptionId).text)\n      delete this.socketState.subscriptions[subscriptionId]\n    }\n  }\n\n  rawRequest<T = any, V extends Variables = Variables, E = any>(\n    query: string,\n    variables?: V\n  ): Promise<{ data: T; extensions?: E }> {\n    return new Promise<{ data: T; extensions?: E; headers?: Headers; status?: number }>((resolve, reject) => {\n      let result: { data: T; extensions?: E }\n      this.rawSubscribe(\n        query,\n        {\n          next: (data: T, extensions: E) => (result = { data, extensions }),\n          error: reject,\n          complete: () => resolve(result),\n        },\n        variables\n      )\n    })\n  }\n\n  request<T = any, V extends Variables = Variables>(document: RequestDocument, variables?: V): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n      let result: T\n      this.subscribe(\n        document,\n        {\n          next: (data: T) => (result = data),\n          error: reject,\n          complete: () => resolve(result),\n        },\n        variables\n      )\n    })\n  }\n\n  subscribe<T = any, V extends Variables = Variables, E = any>(\n    document: RequestDocument,\n    subscriber: GraphQLSubscriber<T, E>,\n    variables?: V\n  ): UnsubscribeCallback {\n    const { query, operationName } = resolveRequestDocument(document)\n    return this.makeSubscribe(query, operationName, subscriber, variables)\n  }\n\n  rawSubscribe<T = any, V extends Variables = Variables, E = any>(\n    query: string,\n    subscriber: GraphQLSubscriber<T, E>,\n    variables?: V\n  ): UnsubscribeCallback {\n    return this.makeSubscribe(query, undefined, subscriber, variables)\n  }\n\n  ping(payload: Variables) {\n    this.socket.send(Ping(payload).text)\n  }\n\n  close() {\n    this.socket.close(1000)\n  }\n}\n\n// Helper functions\n\nfunction parseMessage<A = any>(data: string, f: (payload: any) => A = (a) => a): GraphQLWebSocketMessage<A> {\n  const m = GraphQLWebSocketMessage.parse<A>(data, f)\n  return m\n}\n\nfunction ConnectionInit<A>(payload?: A) {\n  return new GraphQLWebSocketMessage(CONNECTION_INIT, payload)\n}\n\nfunction Ping(payload: any) {\n  return new GraphQLWebSocketMessage(PING, payload, undefined)\n}\nfunction Pong(payload: any) {\n  return new GraphQLWebSocketMessage(PONG, payload, undefined)\n}\n\nfunction Subscribe(id: string, payload: SubscribePayload) {\n  return new GraphQLWebSocketMessage(SUBSCRIBE, payload, id)\n}\n\nfunction Complete(id: string) {\n  return new GraphQLWebSocketMessage(COMPLETE, undefined, id)\n}\n", "/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n", "import { parse } from 'graphql';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  Location,\n} from 'graphql/language/ast';\n\n// A map docString -> graphql document\nconst docCache = new Map<string, DocumentNode>();\n\n// A map fragmentName -> [normalized source]\nconst fragmentSourceMap = new Map<string, Set<string>>();\n\nlet printFragmentWarnings = true;\nlet experimentalFragmentVariables = false;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string: string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\nfunction cacheKeyFromLoc(loc: Location) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nfunction processFragments(ast: DocumentNode) {\n  const seenKeys = new Set<string>();\n  const definitions: DefinitionNode[] = [];\n\n  ast.definitions.forEach(fragmentDefinition => {\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc!);\n\n      // We know something about this fragment\n      let sourceKeySet = fragmentSourceMap.get(fragmentName)!;\n      if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n      } else if (!sourceKeySet) {\n        fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n      }\n\n      sourceKeySet.add(sourceKey);\n\n      if (!seenKeys.has(sourceKey)) {\n        seenKeys.add(sourceKey);\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  });\n\n  return {\n    ...ast,\n    definitions,\n  };\n}\n\nfunction stripLoc(doc: DocumentNode) {\n  const workSet = new Set<Record<string, any>>(doc.definitions);\n\n  workSet.forEach(node => {\n    if (node.loc) delete node.loc;\n    Object.keys(node).forEach(key => {\n      const value = node[key];\n      if (value && typeof value === 'object') {\n        workSet.add(value);\n      }\n    });\n  });\n\n  const loc = doc.loc as Record<string, any>;\n  if (loc) {\n    delete loc.startToken;\n    delete loc.endToken;\n  }\n\n  return doc;\n}\n\nfunction parseDocument(source: string) {\n  var cacheKey = normalize(source);\n  if (!docCache.has(cacheKey)) {\n    const parsed = parse(source, {\n      experimentalFragmentVariables,\n      allowLegacyFragmentVariables: experimentalFragmentVariables,\n    } as any);\n    if (!parsed || parsed.kind !== 'Document') {\n      throw new Error('Not a valid GraphQL document.');\n    }\n    docCache.set(\n      cacheKey,\n      // check that all \"new\" fragments inside the documents are consistent with\n      // existing fragments of the same name\n      stripLoc(processFragments(parsed)),\n    );\n  }\n  return docCache.get(cacheKey)!;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nexport function gql(\n  literals: string | readonly string[],\n  ...args: any[]\n) {\n\n  if (typeof literals === 'string') {\n    literals = [literals];\n  }\n\n  let result = literals[0];\n\n  args.forEach((arg, i) => {\n    if (arg && arg.kind === 'Document') {\n      result += arg.loc.source.body;\n    } else {\n      result += arg;\n    }\n    result += literals[i + 1];\n  });\n\n  return parseDocument(result);\n}\n\nexport function resetCaches() {\n  docCache.clear();\n  fragmentSourceMap.clear();\n}\n\nexport function disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nexport function enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nexport function disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\nconst extras = {\n  gql,\n  resetCaches,\n  disableFragmentWarnings,\n  enableExperimentalFragmentVariables,\n  disableExperimentalFragmentVariables,\n};\n\nexport namespace gql {\n  export const {\n    gql,\n    resetCaches,\n    disableFragmentWarnings,\n    enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables,\n  } = extras;\n}\n\ngql.default = gql;\n\nexport default gql;\n", "export const ZeroBytes32 = '0x0000000000000000000000000000000000000000000000000000000000000000';\nexport const EmptyRoot = '0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';\n", "/** Maximum contract size, in bytes. */\nexport const CONTRACT_MAX_SIZE = 16 * 1024;\n\n/** Maximum number of witnesses. */\nexport const MAX_WITNESSES = 16;\n\n/**\n * Gas Price factor this is used to calculate\n * This is used to calculate the gas fee in Native Coins.\n * Ex.: transactionFee = Math.ceil(<gasUsed> / MAX_GAS_PER_TX);\n */\n\n/** Maximum length of script, in instructions. */\nexport const MAX_SCRIPT_LENGTH = 1024 * 1024 * 1024;\n\n/** Maximum length of script data, in bytes. */\nexport const MAX_SCRIPT_DATA_LENGTH = 1024 * 1024 * 1024;\n\n/** Maximum number of static contracts. */\nexport const MAX_STATIC_CONTRACTS = 255;\n\n/** Maximum length of predicate, in instructions. */\nexport const MAX_PREDICATE_LENGTH = 1024 * 1024;\n\n/** Maximum length of predicate data, in bytes. */\nexport const MAX_PREDICATE_DATA_LENGTH = 1024 * 1024;\n\n// Revert with this value for a failing call to `std::revert::require`.\nexport const FAILED_REQUIRE_SIGNAL = '0xffffffffffff0000';\n\n// Revert with this value for a failing call to `std::asset::transfer_to_address`.\nexport const FAILED_TRANSFER_TO_ADDRESS_SIGNAL = '0xffffffffffff0001';\n\n// Revert with this value for a failing call to `std::assert::assert_eq`.\nexport const FAILED_ASSERT_EQ_SIGNAL = '0xffffffffffff0003';\n\n// Revert with this value for a failing call to `std::assert::assert`.\nexport const FAILED_ASSERT_SIGNAL = '0xffffffffffff0004';\n\n// Revert with this value for a failing call to `std::assert::assert_ne`.\nexport const FAILED_ASSERT_NE_SIGNAL = '0xffffffffffff0005';\n\nexport const FAILED_UNKNOWN_SIGNAL = '0x0';\n\nexport const PANIC_REASONS = [\n  'ArithmeticError',\n  'ArithmeticOverflow',\n  'AssetIdNotFound',\n  'BalanceOverflow',\n  'BlobIdAlreadyUploaded',\n  'BlobNotFound',\n  'BytecodeAlreadyUploaded',\n  'ContractIdAlreadyDeployed',\n  'ContractInstructionNotAllowed',\n  'ContractMaxSize',\n  'ContractMismatch',\n  'ContractNotFound',\n  'ContractNotInInputs',\n  'EcalError',\n  'ExpectedCoinInput',\n  'ExpectedInternalContext',\n  'ExpectedNestedCaller',\n  'ExpectedOutputVariable',\n  'ExpectedParentInternalContext',\n  'ExpectedUnallocatedStack',\n  'GasCostNotDefined',\n  'InputContractDoesNotExist',\n  'InputNotFound',\n  'InternalBalanceOverflow',\n  'InvalidBlockHeight',\n  'InvalidEllipticCurvePoint',\n  'InvalidFlags',\n  'InvalidImmediateValue',\n  'InvalidInstruction',\n  'InvalidMetadataIdentifier',\n  'MalformedCallStructure',\n  'MaxStaticContractsReached',\n  'MemoryGrowthOverlap',\n  'MemoryNotExecutable',\n  'MemoryOverflow',\n  'MemoryOwnership',\n  'MemoryWriteOverlap',\n  'MessageDataTooLong',\n  'NotEnoughBalance',\n  'OutOfGas',\n  'OutputNotFound',\n  'OverridingConsensusParameters',\n  'OverridingStateTransactionBytecode',\n  'PolicyIsNotSet',\n  'PolicyNotFound',\n  'PredicateReturnedNonOne',\n  'ReservedRegisterNotWritable',\n  'Revert',\n  'ThePartIsNotSequentiallyConnected',\n  'TooManyReceipts',\n  'TooManySlots',\n  'TransactionMaturity',\n  'TransactionValidity',\n  'TransferAmountCannotBeZero',\n  'TransferZeroCoins',\n  'UninitalizedMemoryAccess',\n  'UnknownPanicReason',\n  'UnknownStateTransactionBytecodeRoot',\n  'UnsupportedCurveId',\n  'UnsupportedOperationType',\n  'WitnessNotFound',\n];\n\nexport const PANIC_DOC_URL = 'https://docs.rs/fuel-asm/latest/fuel_asm/enum.PanicReason.html';\n", "let wasm$1;\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); }\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm$1.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n}\n/**\n * Construct a `GM` instruction from its arguments.\n * @param {number} ra\n * @param {GMArgs} args\n * @returns {Instruction}\n */\nfunction gm_args(ra, args) {\n    const ret = wasm$1.gm_args(ra, args);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Construct a `GM` instruction from its arguments.\n * @param {number} ra\n * @param {number} rb\n * @param {GTFArgs} args\n * @returns {Instruction}\n */\nfunction gtf_args(ra, rb, args) {\n    const ret = wasm$1.gtf_args(ra, rb, args);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Construct a `WDCM` instruction from its arguments.\n * @param {number} ra\n * @param {number} rb\n * @param {number} rc\n * @param {CompareArgs} args\n * @returns {Instruction}\n */\nfunction wdcm_args(ra, rb, rc, args) {\n    _assertClass(args, CompareArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wdcm_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Construct a `WQCM` instruction from its arguments.\n * @param {number} ra\n * @param {number} rb\n * @param {number} rc\n * @param {CompareArgs} args\n * @returns {Instruction}\n */\nfunction wqcm_args(ra, rb, rc, args) {\n    _assertClass(args, CompareArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqcm_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Construct a `WDOP` instruction from its arguments.\n * @param {number} ra\n * @param {number} rb\n * @param {number} rc\n * @param {MathArgs} args\n * @returns {Instruction}\n */\nfunction wdop_args(ra, rb, rc, args) {\n    _assertClass(args, MathArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wdop_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Construct a `WQOP` instruction from its arguments.\n * @param {number} ra\n * @param {number} rb\n * @param {number} rc\n * @param {MathArgs} args\n * @returns {Instruction}\n */\nfunction wqop_args(ra, rb, rc, args) {\n    _assertClass(args, MathArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqop_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Construct a `WDML` instruction from its arguments.\n * @param {number} ra\n * @param {number} rb\n * @param {number} rc\n * @param {MulArgs} args\n * @returns {Instruction}\n */\nfunction wdml_args(ra, rb, rc, args) {\n    _assertClass(args, MulArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wdml_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Construct a `WQML` instruction from its arguments.\n * @param {number} ra\n * @param {number} rb\n * @param {number} rc\n * @param {MulArgs} args\n * @returns {Instruction}\n */\nfunction wqml_args(ra, rb, rc, args) {\n    _assertClass(args, MulArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqml_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Construct a `WDDV` instruction from its arguments.\n * @param {number} ra\n * @param {number} rb\n * @param {number} rc\n * @param {DivArgs} args\n * @returns {Instruction}\n */\nfunction wddv_args(ra, rb, rc, args) {\n    _assertClass(args, DivArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wddv_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Construct a `WQDV` instruction from its arguments.\n * @param {number} ra\n * @param {number} rb\n * @param {number} rc\n * @param {DivArgs} args\n * @returns {Instruction}\n */\nfunction wqdv_args(ra, rb, rc, args) {\n    _assertClass(args, DivArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqdv_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Adds two registers.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction add(dst, lhs, rhs) {\n    const ret = wasm$1.add(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Bitwise ANDs two registers.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction and(dst, lhs, rhs) {\n    const ret = wasm$1.and(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Divides two registers.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction div(dst, lhs, rhs) {\n    const ret = wasm$1.div(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Compares two registers for equality.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction eq(dst, lhs, rhs) {\n    const ret = wasm$1.eq(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Raises one register to the power of another.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction exp(dst, lhs, rhs) {\n    const ret = wasm$1.exp(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Compares two registers for greater-than.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction gt(dst, lhs, rhs) {\n    const ret = wasm$1.gt(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Compares two registers for less-than.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction lt(dst, lhs, rhs) {\n    const ret = wasm$1.lt(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * The integer logarithm of a register.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction mlog(dst, lhs, rhs) {\n    const ret = wasm$1.mlog(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * The integer root of a register.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction mroo(dst, lhs, rhs) {\n    const ret = wasm$1.mroo(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Modulo remainder of two registers.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction mod_(dst, lhs, rhs) {\n    const ret = wasm$1.mod_(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Copy from one register to another.\n * @param {number} dst\n * @param {number} src\n * @returns {Instruction}\n */\nfunction move_(dst, src) {\n    const ret = wasm$1.move_(dst, src);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Multiplies two registers.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction mul(dst, lhs, rhs) {\n    const ret = wasm$1.mul(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Bitwise NOT a register.\n * @param {number} dst\n * @param {number} arg\n * @returns {Instruction}\n */\nfunction not(dst, arg) {\n    const ret = wasm$1.not(dst, arg);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Bitwise ORs two registers.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction or(dst, lhs, rhs) {\n    const ret = wasm$1.or(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Left shifts a register by a register.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction sll(dst, lhs, rhs) {\n    const ret = wasm$1.sll(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Right shifts a register by a register.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction srl(dst, lhs, rhs) {\n    const ret = wasm$1.srl(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Subtracts two registers.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction sub(dst, lhs, rhs) {\n    const ret = wasm$1.sub(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Bitwise XORs two registers.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction xor(dst, lhs, rhs) {\n    const ret = wasm$1.xor(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Fused multiply-divide with arbitrary precision intermediate step.\n * @param {number} dst\n * @param {number} mul_lhs\n * @param {number} mul_rhs\n * @param {number} divisor\n * @returns {Instruction}\n */\nfunction mldv(dst, mul_lhs, mul_rhs, divisor) {\n    const ret = wasm$1.mldv(dst, mul_lhs, mul_rhs, divisor);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Return from context.\n * @param {number} value\n * @returns {Instruction}\n */\nfunction ret(value) {\n    const ret = wasm$1.ret(value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Return from context with data.\n * @param {number} addr\n * @param {number} len\n * @returns {Instruction}\n */\nfunction retd(addr, len) {\n    const ret = wasm$1.retd(addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Allocate a number of bytes from the heap.\n * @param {number} bytes\n * @returns {Instruction}\n */\nfunction aloc(bytes) {\n    const ret = wasm$1.aloc(bytes);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Clear a variable number of bytes in memory.\n * @param {number} dst_addr\n * @param {number} len\n * @returns {Instruction}\n */\nfunction mcl(dst_addr, len) {\n    const ret = wasm$1.mcl(dst_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Copy a variable number of bytes in memory.\n * @param {number} dst_addr\n * @param {number} src_addr\n * @param {number} len\n * @returns {Instruction}\n */\nfunction mcp(dst_addr, src_addr, len) {\n    const ret = wasm$1.mcp(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Compare bytes in memory.\n * @param {number} result\n * @param {number} lhs_addr\n * @param {number} rhs_addr\n * @param {number} len\n * @returns {Instruction}\n */\nfunction meq(result, lhs_addr, rhs_addr, len) {\n    const ret = wasm$1.meq(result, lhs_addr, rhs_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Get block header hash for height.\n * @param {number} dst\n * @param {number} heigth\n * @returns {Instruction}\n */\nfunction bhsh(dst, heigth) {\n    const ret = wasm$1.bhsh(dst, heigth);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Get current block height.\n * @param {number} dst\n * @returns {Instruction}\n */\nfunction bhei(dst) {\n    const ret = wasm$1.bhei(dst);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Burns `amount` coins of the asset ID created from `sub_id` for the current contract.\n * @param {number} amount\n * @param {number} sub_id_addr\n * @returns {Instruction}\n */\nfunction burn(amount, sub_id_addr) {\n    const ret = wasm$1.burn(amount, sub_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Call a contract.\n * @param {number} target_struct\n * @param {number} fwd_coins\n * @param {number} asset_id_addr\n * @param {number} fwd_gas\n * @returns {Instruction}\n */\nfunction call(target_struct, fwd_coins, asset_id_addr, fwd_gas) {\n    const ret = wasm$1.call(target_struct, fwd_coins, asset_id_addr, fwd_gas);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Copy contract code for a contract.\n * @param {number} dst_addr\n * @param {number} contract_id_addr\n * @param {number} offset\n * @param {number} len\n * @returns {Instruction}\n */\nfunction ccp(dst_addr, contract_id_addr, offset, len) {\n    const ret = wasm$1.ccp(dst_addr, contract_id_addr, offset, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Get code root of a contract.\n * @param {number} dst_addr\n * @param {number} contract_id_addr\n * @returns {Instruction}\n */\nfunction croo(dst_addr, contract_id_addr) {\n    const ret = wasm$1.croo(dst_addr, contract_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Get code size of a contract.\n * @param {number} dst\n * @param {number} contract_id_addr\n * @returns {Instruction}\n */\nfunction csiz(dst, contract_id_addr) {\n    const ret = wasm$1.csiz(dst, contract_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Get current block proposer's address.\n * @param {number} dst\n * @returns {Instruction}\n */\nfunction cb(dst) {\n    const ret = wasm$1.cb(dst);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Load code as executable either from contract, blob, or memory.\n * @param {number} src_addr\n * @param {number} offset\n * @param {number} len\n * @param {number} mode\n * @returns {Instruction}\n */\nfunction ldc(src_addr, offset, len, mode) {\n    const ret = wasm$1.ldc(src_addr, offset, len, mode);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Log an event.\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @param {number} d\n * @returns {Instruction}\n */\nfunction log(a, b, c, d) {\n    const ret = wasm$1.log(a, b, c, d);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Log data.\n * @param {number} a\n * @param {number} b\n * @param {number} addr\n * @param {number} len\n * @returns {Instruction}\n */\nfunction logd(a, b, addr, len) {\n    const ret = wasm$1.logd(a, b, addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Mints `amount` coins of the asset ID created from `sub_id` for the current contract.\n * @param {number} amount\n * @param {number} sub_id_addr\n * @returns {Instruction}\n */\nfunction mint(amount, sub_id_addr) {\n    const ret = wasm$1.mint(amount, sub_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Halt execution, reverting state changes and returning a value.\n * @param {number} value\n * @returns {Instruction}\n */\nfunction rvrt(value) {\n    const ret = wasm$1.rvrt(value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Clear a series of slots from contract storage.\n * @param {number} key_addr\n * @param {number} status\n * @param {number} lenq\n * @returns {Instruction}\n */\nfunction scwq(key_addr, status, lenq) {\n    const ret = wasm$1.scwq(key_addr, status, lenq);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Load a word from contract storage.\n * @param {number} dst\n * @param {number} status\n * @param {number} key_addr\n * @returns {Instruction}\n */\nfunction srw(dst, status, key_addr) {\n    const ret = wasm$1.srw(dst, status, key_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Load a series of 32 byte slots from contract storage.\n * @param {number} dst_addr\n * @param {number} status\n * @param {number} key_addr\n * @param {number} lenq\n * @returns {Instruction}\n */\nfunction srwq(dst_addr, status, key_addr, lenq) {\n    const ret = wasm$1.srwq(dst_addr, status, key_addr, lenq);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Store a word in contract storage.\n * @param {number} key_addr\n * @param {number} status\n * @param {number} value\n * @returns {Instruction}\n */\nfunction sww(key_addr, status, value) {\n    const ret = wasm$1.sww(key_addr, status, value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Store a series of 32 byte slots in contract storage.\n * @param {number} key_addr\n * @param {number} status\n * @param {number} src_addr\n * @param {number} lenq\n * @returns {Instruction}\n */\nfunction swwq(key_addr, status, src_addr, lenq) {\n    const ret = wasm$1.swwq(key_addr, status, src_addr, lenq);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Transfer coins to a contract unconditionally.\n * @param {number} contract_id_addr\n * @param {number} amount\n * @param {number} asset_id_addr\n * @returns {Instruction}\n */\nfunction tr(contract_id_addr, amount, asset_id_addr) {\n    const ret = wasm$1.tr(contract_id_addr, amount, asset_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Transfer coins to a variable output.\n * @param {number} contract_id_addr\n * @param {number} output_index\n * @param {number} amount\n * @param {number} asset_id_addr\n * @returns {Instruction}\n */\nfunction tro(contract_id_addr, output_index, amount, asset_id_addr) {\n    const ret = wasm$1.tro(contract_id_addr, output_index, amount, asset_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * The 64-byte public key (x, y) recovered from 64-byte signature on 32-byte message hash.\n * @param {number} dst_addr\n * @param {number} sig_addr\n * @param {number} msg_hash_addr\n * @returns {Instruction}\n */\nfunction eck1(dst_addr, sig_addr, msg_hash_addr) {\n    const ret = wasm$1.eck1(dst_addr, sig_addr, msg_hash_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * The 64-byte Secp256r1 public key (x, y) recovered from 64-byte signature on 32-byte message hash.\n * @param {number} dst_addr\n * @param {number} sig_addr\n * @param {number} msg_hash_addr\n * @returns {Instruction}\n */\nfunction ecr1(dst_addr, sig_addr, msg_hash_addr) {\n    const ret = wasm$1.ecr1(dst_addr, sig_addr, msg_hash_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Verify ED25519 public key and signature match a message.\n * @param {number} pub_key_addr\n * @param {number} sig_addr\n * @param {number} msg_addr\n * @param {number} msg_len\n * @returns {Instruction}\n */\nfunction ed19(pub_key_addr, sig_addr, msg_addr, msg_len) {\n    const ret = wasm$1.ed19(pub_key_addr, sig_addr, msg_addr, msg_len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * The keccak-256 hash of a slice.\n * @param {number} dst_addr\n * @param {number} src_addr\n * @param {number} len\n * @returns {Instruction}\n */\nfunction k256(dst_addr, src_addr, len) {\n    const ret = wasm$1.k256(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * The SHA-2-256 hash of a slice.\n * @param {number} dst_addr\n * @param {number} src_addr\n * @param {number} len\n * @returns {Instruction}\n */\nfunction s256(dst_addr, src_addr, len) {\n    const ret = wasm$1.s256(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Get timestamp of block at given height.\n * @param {number} dst\n * @param {number} heigth\n * @returns {Instruction}\n */\nfunction time(dst, heigth) {\n    const ret = wasm$1.time(dst, heigth);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Performs no operation.\n * @returns {Instruction}\n */\nfunction noop() {\n    const ret = wasm$1.noop();\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Set flag register to a register.\n * @param {number} value\n * @returns {Instruction}\n */\nfunction flag(value) {\n    const ret = wasm$1.flag(value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Get the balance of contract of an asset ID.\n * @param {number} dst\n * @param {number} asset_id_addr\n * @param {number} contract_id_addr\n * @returns {Instruction}\n */\nfunction bal(dst, asset_id_addr, contract_id_addr) {\n    const ret = wasm$1.bal(dst, asset_id_addr, contract_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Dynamic jump.\n * @param {number} abs_target\n * @returns {Instruction}\n */\nfunction jmp(abs_target) {\n    const ret = wasm$1.jmp(abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Conditional dynamic jump.\n * @param {number} abs_target\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction jne(abs_target, lhs, rhs) {\n    const ret = wasm$1.jne(abs_target, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Send a message to recipient address with call abi, coins, and output.\n * @param {number} recipient_addr\n * @param {number} data_addr\n * @param {number} data_len\n * @param {number} coins\n * @returns {Instruction}\n */\nfunction smo(recipient_addr, data_addr, data_len, coins) {\n    const ret = wasm$1.smo(recipient_addr, data_addr, data_len, coins);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Adds a register and an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction addi(dst, lhs, rhs) {\n    const ret = wasm$1.addi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Bitwise ANDs a register and an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction andi(dst, lhs, rhs) {\n    const ret = wasm$1.andi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Divides a register and an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction divi(dst, lhs, rhs) {\n    const ret = wasm$1.divi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Raises one register to the power of an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction expi(dst, lhs, rhs) {\n    const ret = wasm$1.expi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Modulo remainder of a register and an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction modi(dst, lhs, rhs) {\n    const ret = wasm$1.modi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Multiplies a register and an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction muli(dst, lhs, rhs) {\n    const ret = wasm$1.muli(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Bitwise ORs a register and an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction ori(dst, lhs, rhs) {\n    const ret = wasm$1.ori(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Left shifts a register by an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction slli(dst, lhs, rhs) {\n    const ret = wasm$1.slli(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Right shifts a register by an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction srli(dst, lhs, rhs) {\n    const ret = wasm$1.srli(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Subtracts a register and an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction subi(dst, lhs, rhs) {\n    const ret = wasm$1.subi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Bitwise XORs a register and an immediate value.\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @returns {Instruction}\n */\nfunction xori(dst, lhs, rhs) {\n    const ret = wasm$1.xori(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Conditional jump.\n * @param {number} cond_lhs\n * @param {number} cond_rhs\n * @param {number} abs_target\n * @returns {Instruction}\n */\nfunction jnei(cond_lhs, cond_rhs, abs_target) {\n    const ret = wasm$1.jnei(cond_lhs, cond_rhs, abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * A byte is loaded from the specified address offset by an immediate value.\n * @param {number} dst\n * @param {number} addr\n * @param {number} offset\n * @returns {Instruction}\n */\nfunction lb(dst, addr, offset) {\n    const ret = wasm$1.lb(dst, addr, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * A word is loaded from the specified address offset by an immediate value.\n * @param {number} dst\n * @param {number} addr\n * @param {number} offset\n * @returns {Instruction}\n */\nfunction lw(dst, addr, offset) {\n    const ret = wasm$1.lw(dst, addr, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Write the least significant byte of a register to memory.\n * @param {number} addr\n * @param {number} value\n * @param {number} offset\n * @returns {Instruction}\n */\nfunction sb(addr, value, offset) {\n    const ret = wasm$1.sb(addr, value, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Write a register to memory.\n * @param {number} addr\n * @param {number} value\n * @param {number} offset\n * @returns {Instruction}\n */\nfunction sw(addr, value, offset) {\n    const ret = wasm$1.sw(addr, value, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Copy an immediate number of bytes in memory.\n * @param {number} dst_addr\n * @param {number} src_addr\n * @param {number} len\n * @returns {Instruction}\n */\nfunction mcpi(dst_addr, src_addr, len) {\n    const ret = wasm$1.mcpi(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Get transaction fields.\n * @param {number} dst\n * @param {number} arg\n * @param {number} selector\n * @returns {Instruction}\n */\nfunction gtf(dst, arg, selector) {\n    const ret = wasm$1.gtf(dst, arg, selector);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Clear an immediate number of bytes in memory.\n * @param {number} addr\n * @param {number} count\n * @returns {Instruction}\n */\nfunction mcli(addr, count) {\n    const ret = wasm$1.mcli(addr, count);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Get metadata from memory.\n * @param {number} dst\n * @param {number} selector\n * @returns {Instruction}\n */\nfunction gm(dst, selector) {\n    const ret = wasm$1.gm(dst, selector);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Copy immediate value into a register\n * @param {number} dst\n * @param {number} val\n * @returns {Instruction}\n */\nfunction movi(dst, val) {\n    const ret = wasm$1.movi(dst, val);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Conditional jump against zero.\n * @param {number} cond_nz\n * @param {number} abs_target\n * @returns {Instruction}\n */\nfunction jnzi(cond_nz, abs_target) {\n    const ret = wasm$1.jnzi(cond_nz, abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Unconditional dynamic relative jump forwards, with a constant offset.\n * @param {number} dynamic\n * @param {number} fixed\n * @returns {Instruction}\n */\nfunction jmpf(dynamic, fixed) {\n    const ret = wasm$1.jmpf(dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Unconditional dynamic relative jump backwards, with a constant offset.\n * @param {number} dynamic\n * @param {number} fixed\n * @returns {Instruction}\n */\nfunction jmpb(dynamic, fixed) {\n    const ret = wasm$1.jmpb(dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Dynamic relative jump forwards, conditional against zero, with a constant offset.\n * @param {number} cond_nz\n * @param {number} dynamic\n * @param {number} fixed\n * @returns {Instruction}\n */\nfunction jnzf(cond_nz, dynamic, fixed) {\n    const ret = wasm$1.jnzf(cond_nz, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Dynamic relative jump backwards, conditional against zero, with a constant offset.\n * @param {number} cond_nz\n * @param {number} dynamic\n * @param {number} fixed\n * @returns {Instruction}\n */\nfunction jnzb(cond_nz, dynamic, fixed) {\n    const ret = wasm$1.jnzb(cond_nz, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Dynamic relative jump forwards, conditional on comparsion, with a constant offset.\n * @param {number} cond_lhs\n * @param {number} cond_rhs\n * @param {number} dynamic\n * @param {number} fixed\n * @returns {Instruction}\n */\nfunction jnef(cond_lhs, cond_rhs, dynamic, fixed) {\n    const ret = wasm$1.jnef(cond_lhs, cond_rhs, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Dynamic relative jump backwards, conditional on comparsion, with a constant offset.\n * @param {number} cond_lhs\n * @param {number} cond_rhs\n * @param {number} dynamic\n * @param {number} fixed\n * @returns {Instruction}\n */\nfunction jneb(cond_lhs, cond_rhs, dynamic, fixed) {\n    const ret = wasm$1.jneb(cond_lhs, cond_rhs, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Jump.\n * @param {number} abs_target\n * @returns {Instruction}\n */\nfunction ji(abs_target) {\n    const ret = wasm$1.ji(abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Extend the current call frame's stack by an immediate value.\n * @param {number} amount\n * @returns {Instruction}\n */\nfunction cfei(amount) {\n    const ret = wasm$1.cfei(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Shrink the current call frame's stack by an immediate value.\n * @param {number} amount\n * @returns {Instruction}\n */\nfunction cfsi(amount) {\n    const ret = wasm$1.cfsi(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Extend the current call frame's stack\n * @param {number} amount\n * @returns {Instruction}\n */\nfunction cfe(amount) {\n    const ret = wasm$1.cfe(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Shrink the current call frame's stack\n * @param {number} amount\n * @returns {Instruction}\n */\nfunction cfs(amount) {\n    const ret = wasm$1.cfs(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Push a bitmask-selected set of registers in range 16..40 to the stack.\n * @param {number} bitmask\n * @returns {Instruction}\n */\nfunction pshl(bitmask) {\n    const ret = wasm$1.pshl(bitmask);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Push a bitmask-selected set of registers in range 40..64 to the stack.\n * @param {number} bitmask\n * @returns {Instruction}\n */\nfunction pshh(bitmask) {\n    const ret = wasm$1.pshh(bitmask);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Pop a bitmask-selected set of registers in range 16..40 to the stack.\n * @param {number} bitmask\n * @returns {Instruction}\n */\nfunction popl(bitmask) {\n    const ret = wasm$1.popl(bitmask);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Pop a bitmask-selected set of registers in range 40..64 to the stack.\n * @param {number} bitmask\n * @returns {Instruction}\n */\nfunction poph(bitmask) {\n    const ret = wasm$1.poph(bitmask);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Compare 128bit integers\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @param {number} flags\n * @returns {Instruction}\n */\nfunction wdcm(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wdcm(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Compare 256bit integers\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @param {number} flags\n * @returns {Instruction}\n */\nfunction wqcm(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqcm(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Simple 128bit operations\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @param {number} flags\n * @returns {Instruction}\n */\nfunction wdop(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wdop(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Simple 256bit operations\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @param {number} flags\n * @returns {Instruction}\n */\nfunction wqop(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqop(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Multiply 128bit\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @param {number} flags\n * @returns {Instruction}\n */\nfunction wdml(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wdml(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Multiply 256bit\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @param {number} flags\n * @returns {Instruction}\n */\nfunction wqml(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqml(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Divide 128bit\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @param {number} flags\n * @returns {Instruction}\n */\nfunction wddv(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wddv(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Divide 256bit\n * @param {number} dst\n * @param {number} lhs\n * @param {number} rhs\n * @param {number} flags\n * @returns {Instruction}\n */\nfunction wqdv(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqdv(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Fused multiply-divide 128bit\n * @param {number} dst\n * @param {number} mul_lhs\n * @param {number} mul_rhs\n * @param {number} divisor\n * @returns {Instruction}\n */\nfunction wdmd(dst, mul_lhs, mul_rhs, divisor) {\n    const ret = wasm$1.wdmd(dst, mul_lhs, mul_rhs, divisor);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Fused multiply-divide 256bit\n * @param {number} dst\n * @param {number} mul_lhs\n * @param {number} mul_rhs\n * @param {number} divisor\n * @returns {Instruction}\n */\nfunction wqmd(dst, mul_lhs, mul_rhs, divisor) {\n    const ret = wasm$1.wqmd(dst, mul_lhs, mul_rhs, divisor);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * AddMod 128bit\n * @param {number} dst\n * @param {number} add_lhs\n * @param {number} add_rhs\n * @param {number} modulo\n * @returns {Instruction}\n */\nfunction wdam(dst, add_lhs, add_rhs, modulo) {\n    const ret = wasm$1.wdam(dst, add_lhs, add_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * AddMod 256bit\n * @param {number} dst\n * @param {number} add_lhs\n * @param {number} add_rhs\n * @param {number} modulo\n * @returns {Instruction}\n */\nfunction wqam(dst, add_lhs, add_rhs, modulo) {\n    const ret = wasm$1.wqam(dst, add_lhs, add_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * MulMod 128bit\n * @param {number} dst\n * @param {number} mul_lhs\n * @param {number} mul_rhs\n * @param {number} modulo\n * @returns {Instruction}\n */\nfunction wdmm(dst, mul_lhs, mul_rhs, modulo) {\n    const ret = wasm$1.wdmm(dst, mul_lhs, mul_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * MulMod 256bit\n * @param {number} dst\n * @param {number} mul_lhs\n * @param {number} mul_rhs\n * @param {number} modulo\n * @returns {Instruction}\n */\nfunction wqmm(dst, mul_lhs, mul_rhs, modulo) {\n    const ret = wasm$1.wqmm(dst, mul_lhs, mul_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Call external function\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @param {number} d\n * @returns {Instruction}\n */\nfunction ecal(a, b, c, d) {\n    const ret = wasm$1.ecal(a, b, c, d);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Get blob size\n * @param {number} dst\n * @param {number} blob_id_ptr\n * @returns {Instruction}\n */\nfunction bsiz(dst, blob_id_ptr) {\n    const ret = wasm$1.bsiz(dst, blob_id_ptr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Load blob as data\n * @param {number} dst_ptr\n * @param {number} blob_id_ptr\n * @param {number} offset\n * @param {number} len\n * @returns {Instruction}\n */\nfunction bldd(dst_ptr, blob_id_ptr, offset, len) {\n    const ret = wasm$1.bldd(dst_ptr, blob_id_ptr, offset, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Given some curve, performs an operation on points\n * @param {number} dst\n * @param {number} curve_id\n * @param {number} operation_type\n * @param {number} points_ptr\n * @returns {Instruction}\n */\nfunction ecop(dst, curve_id, operation_type, points_ptr) {\n    const ret = wasm$1.ecop(dst, curve_id, operation_type, points_ptr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n * Given some curve, performs a pairing on groups of points\n * @param {number} success\n * @param {number} curve_id\n * @param {number} number_elements\n * @param {number} points_ptr\n * @returns {Instruction}\n */\nfunction epar(success, curve_id, number_elements, points_ptr) {\n    const ret = wasm$1.epar(success, curve_id, number_elements, points_ptr);\n    return Instruction.__wrap(ret);\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm$1.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm$1.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n * Comparison mode used by WDCM and WQCM instructions.\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nconst CompareMode = Object.freeze({\n    /**\n     * Equality (`==`)\n     */\n    EQ: 0, \"0\": \"EQ\",\n    /**\n     * Inequality (`!=`)\n     */\n    NE: 1, \"1\": \"NE\",\n    /**\n     * Less than (`<`)\n     */\n    LT: 2, \"2\": \"LT\",\n    /**\n     * Greater than (`>`)\n     */\n    GT: 3, \"3\": \"GT\",\n    /**\n     * Less than or equals (`>=`)\n     */\n    LTE: 4, \"4\": \"LTE\",\n    /**\n     * Greater than or equals (`>=`)\n     */\n    GTE: 5, \"5\": \"GTE\",\n    /**\n     * Number of leading zeroes in lhs (`lzcnt`) (discards rhs)\n     */\n    LZC: 6, \"6\": \"LZC\",\n});\n/**\n * r\" Argument list for GM (get metadata) instruction\n * r\" The VM is the only who should match this struct, and it *MUST* always perform\n * r\" exhaustive match so all offered variants are covered.\n * @enum {1 | 2 | 3 | 4 | 5 | 6}\n */\nconst GMArgs = Object.freeze({\n    /**\n     * r\" Get if caller is external.\n     */\n    IsCallerExternal: 1, \"1\": \"IsCallerExternal\",\n    /**\n     * r\" Get caller's contract ID.\n     */\n    GetCaller: 2, \"2\": \"GetCaller\",\n    /**\n     * r\" Get index of current predicate.\n     */\n    GetVerifyingPredicate: 3, \"3\": \"GetVerifyingPredicate\",\n    /**\n     * r\" Get the Chain ID this VM is operating within\n     */\n    GetChainId: 4, \"4\": \"GetChainId\",\n    /**\n     * r\" Get memory address where the transaction is located\n     */\n    TxStart: 5, \"5\": \"TxStart\",\n    /**\n     * r\" Get memory address of base asset ID\n     */\n    BaseAssetId: 6, \"6\": \"BaseAssetId\",\n});\n/**\n * r\" Argument list for GTF (get tx fields) instruction\n * r\" The VM is the only who should match this struct, and it *MUST* always perform\n * r\" exhaustive match so all offered variants are covered.\n * @enum {1 | 2 | 3 | 4 | 5 | 6 | 7 | 9 | 10 | 11 | 12 | 13 | 14 | 257 | 258 | 259 | 260 | 261 | 262 | 263 | 264 | 265 | 266 | 512 | 513 | 514 | 515 | 516 | 517 | 518 | 519 | 521 | 522 | 523 | 524 | 525 | 544 | 545 | 549 | 576 | 577 | 578 | 579 | 580 | 581 | 582 | 583 | 584 | 585 | 586 | 587 | 768 | 769 | 770 | 771 | 772 | 775 | 776 | 1024 | 1025 | 1280 | 1281 | 1282 | 1283 | 1284 | 1285}\n */\nconst GTFArgs = Object.freeze({\n    /**\n     * r\" Set `$rA` to `tx.type`\n     */\n    Type: 1, \"1\": \"Type\",\n    /**\n     * r\" Set `$rA` to `tx.scriptGasLimit`\n     */\n    ScriptGasLimit: 2, \"2\": \"ScriptGasLimit\",\n    /**\n     * r\" Set `$rA` to `tx.scriptLength`\n     */\n    ScriptLength: 3, \"3\": \"ScriptLength\",\n    /**\n     * r\" Set `$rA` to `tx.scriptDataLength`\n     */\n    ScriptDataLength: 4, \"4\": \"ScriptDataLength\",\n    /**\n     * r\" Set `$rA` to `tx.inputsCount`\n     */\n    ScriptInputsCount: 5, \"5\": \"ScriptInputsCount\",\n    /**\n     * r\" Set `$rA` to `tx.outputsCount`\n     */\n    ScriptOutputsCount: 6, \"6\": \"ScriptOutputsCount\",\n    /**\n     * r\" Set `$rA` to `tx.witnessesCount`\n     */\n    ScriptWitnessesCount: 7, \"7\": \"ScriptWitnessesCount\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.script`\n     */\n    Script: 9, \"9\": \"Script\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.scriptData`\n     */\n    ScriptData: 10, \"10\": \"ScriptData\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB]`\n     */\n    ScriptInputAtIndex: 11, \"11\": \"ScriptInputAtIndex\",\n    /**\n     * r\" Set `$rA` to `Memory address of t.outputs[$rB]`\n     */\n    ScriptOutputAtIndex: 12, \"12\": \"ScriptOutputAtIndex\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.witnesses[$rB]`\n     */\n    ScriptWitnessAtIndex: 13, \"13\": \"ScriptWitnessAtIndex\",\n    /**\n     * r\" Set `$rA` to size of the transaction in memory, in bytes\n     */\n    TxLength: 14, \"14\": \"TxLength\",\n    /**\n     * r\" Set `$rA` to `tx.bytecodeWitnessIndex`\n     */\n    CreateBytecodeWitnessIndex: 257, \"257\": \"CreateBytecodeWitnessIndex\",\n    /**\n     * r\" Set `$rA` to `tx.storageSlotsCount`\n     */\n    CreateStorageSlotsCount: 258, \"258\": \"CreateStorageSlotsCount\",\n    /**\n     * r\" Set `$rA` to `tx.inputsCount`\n     */\n    CreateInputsCount: 259, \"259\": \"CreateInputsCount\",\n    /**\n     * r\" Set `$rA` to `tx.outputsCount`\n     */\n    CreateOutputsCount: 260, \"260\": \"CreateOutputsCount\",\n    /**\n     * r\" Set `$rA` to `tx.witnessesCount`\n     */\n    CreateWitnessesCount: 261, \"261\": \"CreateWitnessesCount\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.salt`\n     */\n    CreateSalt: 262, \"262\": \"CreateSalt\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.storageSlots[$rB]`\n     */\n    CreateStorageSlotAtIndex: 263, \"263\": \"CreateStorageSlotAtIndex\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB]`\n     */\n    CreateInputAtIndex: 264, \"264\": \"CreateInputAtIndex\",\n    /**\n     * r\" Set `$rA` to `Memory address of t.outputs[$rB]`\n     */\n    CreateOutputAtIndex: 265, \"265\": \"CreateOutputAtIndex\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.witnesses[$rB]`\n     */\n    CreateWitnessAtIndex: 266, \"266\": \"CreateWitnessAtIndex\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].type`\n     */\n    InputType: 512, \"512\": \"InputType\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].txID`\n     */\n    InputCoinTxId: 513, \"513\": \"InputCoinTxId\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].outputIndex`\n     */\n    InputCoinOutputIndex: 514, \"514\": \"InputCoinOutputIndex\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].owner`\n     */\n    InputCoinOwner: 515, \"515\": \"InputCoinOwner\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].amount`\n     */\n    InputCoinAmount: 516, \"516\": \"InputCoinAmount\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].asset_id`\n     */\n    InputCoinAssetId: 517, \"517\": \"InputCoinAssetId\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].txPointer`\n     */\n    InputCoinTxPointer: 518, \"518\": \"InputCoinTxPointer\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].witnessIndex`\n     */\n    InputCoinWitnessIndex: 519, \"519\": \"InputCoinWitnessIndex\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].predicateLength`\n     */\n    InputCoinPredicateLength: 521, \"521\": \"InputCoinPredicateLength\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].predicateDataLength`\n     */\n    InputCoinPredicateDataLength: 522, \"522\": \"InputCoinPredicateDataLength\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicate`\n     */\n    InputCoinPredicate: 523, \"523\": \"InputCoinPredicate\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateData`\n     */\n    InputCoinPredicateData: 524, \"524\": \"InputCoinPredicateData\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateGasUsed`\n     */\n    InputCoinPredicateGasUsed: 525, \"525\": \"InputCoinPredicateGasUsed\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].txID`\n     */\n    InputContractTxId: 544, \"544\": \"InputContractTxId\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].outputIndex`\n     */\n    InputContractOutputIndex: 545, \"545\": \"InputContractOutputIndex\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].contractID`\n     */\n    InputContractId: 549, \"549\": \"InputContractId\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].sender`\n     */\n    InputMessageSender: 576, \"576\": \"InputMessageSender\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].recipient`\n     */\n    InputMessageRecipient: 577, \"577\": \"InputMessageRecipient\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].amount`\n     */\n    InputMessageAmount: 578, \"578\": \"InputMessageAmount\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].nonce`\n     */\n    InputMessageNonce: 579, \"579\": \"InputMessageNonce\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].witnessIndex`\n     */\n    InputMessageWitnessIndex: 580, \"580\": \"InputMessageWitnessIndex\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].dataLength`\n     */\n    InputMessageDataLength: 581, \"581\": \"InputMessageDataLength\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].predicateLength`\n     */\n    InputMessagePredicateLength: 582, \"582\": \"InputMessagePredicateLength\",\n    /**\n     * r\" Set `$rA` to `tx.inputs[$rB].predicateDataLength`\n     */\n    InputMessagePredicateDataLength: 583, \"583\": \"InputMessagePredicateDataLength\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].data`\n     */\n    InputMessageData: 584, \"584\": \"InputMessageData\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicate`\n     */\n    InputMessagePredicate: 585, \"585\": \"InputMessagePredicate\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateData`\n     */\n    InputMessagePredicateData: 586, \"586\": \"InputMessagePredicateData\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateGasUsed`\n     */\n    InputMessagePredicateGasUsed: 587, \"587\": \"InputMessagePredicateGasUsed\",\n    /**\n     * r\" Set `$rA` to `tx.outputs[$rB].type`\n     */\n    OutputType: 768, \"768\": \"OutputType\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.outputs[$rB].to`\n     */\n    OutputCoinTo: 769, \"769\": \"OutputCoinTo\",\n    /**\n     * r\" Set `$rA` to `tx.outputs[$rB].amount`\n     */\n    OutputCoinAmount: 770, \"770\": \"OutputCoinAmount\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.outputs[$rB].asset_id`\n     */\n    OutputCoinAssetId: 771, \"771\": \"OutputCoinAssetId\",\n    /**\n     * r\" Set `$rA` to `tx.outputs[$rB].inputIndex`\n     */\n    OutputContractInputIndex: 772, \"772\": \"OutputContractInputIndex\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.outputs[$rB].contractID`\n     */\n    OutputContractCreatedContractId: 775, \"775\": \"OutputContractCreatedContractId\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.outputs[$rB].stateRoot`\n     */\n    OutputContractCreatedStateRoot: 776, \"776\": \"OutputContractCreatedStateRoot\",\n    /**\n     * r\" Set `$rA` to `tx.witnesses[$rB].dataLength`\n     */\n    WitnessDataLength: 1024, \"1024\": \"WitnessDataLength\",\n    /**\n     * r\" Set `$rA` to `Memory address of tx.witnesses[$rB].data`\n     */\n    WitnessData: 1025, \"1025\": \"WitnessData\",\n    /**\n     * r\" Set `$rA` to `tx.policyTypes`\n     */\n    PolicyTypes: 1280, \"1280\": \"PolicyTypes\",\n    /**\n     * r\" Set `$rA` to `tx.policies[0x00].gasPrice`\n     */\n    PolicyTip: 1281, \"1281\": \"PolicyTip\",\n    /**\n     * r\" Set `$rA` to `tx.policies[count_ones(0b11 & tx.policyTypes) - 1].witnessLimit`\n     */\n    PolicyWitnessLimit: 1282, \"1282\": \"PolicyWitnessLimit\",\n    /**\n     * r\" Set `$rA` to `tx.policies[count_ones(0b111 & tx.policyTypes) - 1].maturity`\n     */\n    PolicyMaturity: 1283, \"1283\": \"PolicyMaturity\",\n    /**\n     * r\" Set `$rA` to `tx.policies[count_ones(0b1111 & tx.policyTypes) - 1].maxFee`\n     */\n    PolicyMaxFee: 1284, \"1284\": \"PolicyMaxFee\",\n    /**\n     * r\" Set `$rA` to `tx.policies[count_ones(0b11111 & tx.policyTypes) - 1].expiration`\n     */\n    PolicyExpiration: 1285, \"1285\": \"PolicyExpiration\",\n});\n/**\n * The operation performed by WDOP and WQOP instructions, determined as\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7}\n */\nconst MathOp = Object.freeze({\n    /**\n     * Add\n     */\n    ADD: 0, \"0\": \"ADD\",\n    /**\n     * Subtract\n     */\n    SUB: 1, \"1\": \"SUB\",\n    /**\n     * Invert bits (discards rhs)\n     */\n    NOT: 2, \"2\": \"NOT\",\n    /**\n     * Bitwise or\n     */\n    OR: 3, \"3\": \"OR\",\n    /**\n     * Bitwise exclusive or\n     */\n    XOR: 4, \"4\": \"XOR\",\n    /**\n     * Bitwise and\n     */\n    AND: 5, \"5\": \"AND\",\n    /**\n     * Shift left\n     */\n    SHL: 6, \"6\": \"SHL\",\n    /**\n     * Shift right\n     */\n    SHR: 7, \"7\": \"SHR\",\n});\n/**\n * r\" Panic reason representation for the interpreter.\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60}\n */\nconst PanicReason = Object.freeze({\n    /**\n     * r\" The byte can't be mapped to any known `PanicReason`.\n     */\n    UnknownPanicReason: 0, \"0\": \"UnknownPanicReason\",\n    /**\n     * r\" Found `RVRT` instruction.\n     */\n    Revert: 1, \"1\": \"Revert\",\n    /**\n     * r\" Execution ran out of gas.\n     */\n    OutOfGas: 2, \"2\": \"OutOfGas\",\n    /**\n     * r\" The transaction validity is violated.\n     */\n    TransactionValidity: 3, \"3\": \"TransactionValidity\",\n    /**\n     * r\" Attempt to write outside interpreter memory boundaries.\n     */\n    MemoryOverflow: 4, \"4\": \"MemoryOverflow\",\n    /**\n     * r\" Overflow while executing arithmetic operation.\n     * r\" These errors are ignored using the WRAPPING flag.\n     */\n    ArithmeticOverflow: 5, \"5\": \"ArithmeticOverflow\",\n    /**\n     * r\" Designed contract was not found in the storage.\n     */\n    ContractNotFound: 6, \"6\": \"ContractNotFound\",\n    /**\n     * r\" Memory ownership rules are violated.\n     */\n    MemoryOwnership: 7, \"7\": \"MemoryOwnership\",\n    /**\n     * r\" The asset ID balance isn't enough for the instruction.\n     */\n    NotEnoughBalance: 8, \"8\": \"NotEnoughBalance\",\n    /**\n     * r\" The interpreter is expected to be in internal context.\n     */\n    ExpectedInternalContext: 9, \"9\": \"ExpectedInternalContext\",\n    /**\n     * r\" The queried asset ID was not found in the state.\n     */\n    AssetIdNotFound: 10, \"10\": \"AssetIdNotFound\",\n    /**\n     * r\" The provided input is not found in the transaction.\n     */\n    InputNotFound: 11, \"11\": \"InputNotFound\",\n    /**\n     * r\" The provided output is not found in the transaction.\n     */\n    OutputNotFound: 12, \"12\": \"OutputNotFound\",\n    /**\n     * r\" The provided witness is not found in the transaction.\n     */\n    WitnessNotFound: 13, \"13\": \"WitnessNotFound\",\n    /**\n     * r\" The transaction maturity is not valid for this request.\n     */\n    TransactionMaturity: 14, \"14\": \"TransactionMaturity\",\n    /**\n     * r\" The metadata identifier is invalid.\n     */\n    InvalidMetadataIdentifier: 15, \"15\": \"InvalidMetadataIdentifier\",\n    /**\n     * r\" The call structure is not valid.\n     */\n    MalformedCallStructure: 16, \"16\": \"MalformedCallStructure\",\n    /**\n     * r\" The provided register does not allow write operations.\n     */\n    ReservedRegisterNotWritable: 17, \"17\": \"ReservedRegisterNotWritable\",\n    /**\n     * r\" The execution resulted in an erroneous state of the interpreter.\n     */\n    InvalidFlags: 18, \"18\": \"InvalidFlags\",\n    /**\n     * r\" The provided immediate value is not valid for this instruction.\n     */\n    InvalidImmediateValue: 19, \"19\": \"InvalidImmediateValue\",\n    /**\n     * r\" The provided transaction input is not of type `Coin`.\n     */\n    ExpectedCoinInput: 20, \"20\": \"ExpectedCoinInput\",\n    /**\n     * r\" `ECAL` instruction failed.\n     */\n    EcalError: 21, \"21\": \"EcalError\",\n    /**\n     * r\" Two segments of the interpreter memory should not intersect for write operations.\n     */\n    MemoryWriteOverlap: 22, \"22\": \"MemoryWriteOverlap\",\n    /**\n     * r\" The requested contract is not listed in the transaction inputs.\n     */\n    ContractNotInInputs: 23, \"23\": \"ContractNotInInputs\",\n    /**\n     * r\" The internal asset ID balance overflowed with the provided instruction.\n     */\n    InternalBalanceOverflow: 24, \"24\": \"InternalBalanceOverflow\",\n    /**\n     * r\" The maximum allowed contract size is violated.\n     */\n    ContractMaxSize: 25, \"25\": \"ContractMaxSize\",\n    /**\n     * r\" This instruction expects the stack area to be unallocated for this call.\n     */\n    ExpectedUnallocatedStack: 26, \"26\": \"ExpectedUnallocatedStack\",\n    /**\n     * r\" The maximum allowed number of static contracts was reached for this transaction.\n     */\n    MaxStaticContractsReached: 27, \"27\": \"MaxStaticContractsReached\",\n    /**\n     * r\" The requested transfer amount cannot be zero.\n     */\n    TransferAmountCannotBeZero: 28, \"28\": \"TransferAmountCannotBeZero\",\n    /**\n     * r\" The provided transaction output should be of type `Variable`.\n     */\n    ExpectedOutputVariable: 29, \"29\": \"ExpectedOutputVariable\",\n    /**\n     * r\" The expected context of the stack parent is internal.\n     */\n    ExpectedParentInternalContext: 30, \"30\": \"ExpectedParentInternalContext\",\n    /**\n     * r\" The predicate returned non `1`. The `1` means successful verification\n     * r\" of the predicate, all other values means unsuccessful.\n     */\n    PredicateReturnedNonOne: 31, \"31\": \"PredicateReturnedNonOne\",\n    /**\n     * r\" The contract ID is already deployed and can't be overwritten.\n     */\n    ContractIdAlreadyDeployed: 32, \"32\": \"ContractIdAlreadyDeployed\",\n    /**\n     * r\" The loaded contract mismatch expectations.\n     */\n    ContractMismatch: 33, \"33\": \"ContractMismatch\",\n    /**\n     * r\" Attempting to send message data longer than `MAX_MESSAGE_DATA_LENGTH`\n     */\n    MessageDataTooLong: 34, \"34\": \"MessageDataTooLong\",\n    /**\n     * r\" Mathematically invalid arguments where given to an arithmetic instruction.\n     * r\" For instance, division by zero produces this.\n     * r\" These errors are ignored using the UNSAFEMATH flag.\n     */\n    ArithmeticError: 35, \"35\": \"ArithmeticError\",\n    /**\n     * r\" The contract instruction is not allowed in predicates.\n     */\n    ContractInstructionNotAllowed: 36, \"36\": \"ContractInstructionNotAllowed\",\n    /**\n     * r\" Transfer of zero coins is not allowed.\n     */\n    TransferZeroCoins: 37, \"37\": \"TransferZeroCoins\",\n    /**\n     * r\" Attempted to execute an invalid instruction\n     */\n    InvalidInstruction: 38, \"38\": \"InvalidInstruction\",\n    /**\n     * r\" Memory outside $is..$ssp range is not executable\n     */\n    MemoryNotExecutable: 39, \"39\": \"MemoryNotExecutable\",\n    /**\n     * r\" The policy is not set.\n     */\n    PolicyIsNotSet: 40, \"40\": \"PolicyIsNotSet\",\n    /**\n     * r\" The policy is not found across policies.\n     */\n    PolicyNotFound: 41, \"41\": \"PolicyNotFound\",\n    /**\n     * r\" Receipt context is full\n     */\n    TooManyReceipts: 42, \"42\": \"TooManyReceipts\",\n    /**\n     * r\" Balance of a contract overflowed\n     */\n    BalanceOverflow: 43, \"43\": \"BalanceOverflow\",\n    /**\n     * r\" Block height value is invalid, typically because it is too large\n     */\n    InvalidBlockHeight: 44, \"44\": \"InvalidBlockHeight\",\n    /**\n     * r\" Attempt to use sequential memory instructions with too large slot count,\n     * r\" typically because it cannot fit into usize\n     */\n    TooManySlots: 45, \"45\": \"TooManySlots\",\n    /**\n     * r\" Caller of this internal context is also expected to be internal,\n     * r\" i.e. $fp->$fp must be non-zero.\n     */\n    ExpectedNestedCaller: 46, \"46\": \"ExpectedNestedCaller\",\n    /**\n     * r\" During memory growth, the stack overlapped with the heap\n     */\n    MemoryGrowthOverlap: 47, \"47\": \"MemoryGrowthOverlap\",\n    /**\n     * r\" Attempting to read or write uninitialized memory.\n     * r\" Also occurs when boundary crosses from stack to heap.\n     */\n    UninitalizedMemoryAccess: 48, \"48\": \"UninitalizedMemoryAccess\",\n    /**\n     * r\" Overriding consensus parameters is not allowed.\n     */\n    OverridingConsensusParameters: 49, \"49\": \"OverridingConsensusParameters\",\n    /**\n     * r\" The storage doesn't know about the hash of the state transition bytecode.\n     */\n    UnknownStateTransactionBytecodeRoot: 50, \"50\": \"UnknownStateTransactionBytecodeRoot\",\n    /**\n     * r\" Overriding the state transition bytecode is not allowed.\n     */\n    OverridingStateTransactionBytecode: 51, \"51\": \"OverridingStateTransactionBytecode\",\n    /**\n     * r\" The bytecode is already uploaded and cannot be uploaded again.\n     */\n    BytecodeAlreadyUploaded: 52, \"52\": \"BytecodeAlreadyUploaded\",\n    /**\n     * r\" The part of the bytecode is not sequentially connected to the previous parts.\n     */\n    ThePartIsNotSequentiallyConnected: 53, \"53\": \"ThePartIsNotSequentiallyConnected\",\n    /**\n     * r\" The requested blob is not found.\n     */\n    BlobNotFound: 54, \"54\": \"BlobNotFound\",\n    /**\n     * r\" The blob was already\n     */\n    BlobIdAlreadyUploaded: 55, \"55\": \"BlobIdAlreadyUploaded\",\n    /**\n     * r\" Active gas costs do not define the cost for this instruction.\n     */\n    GasCostNotDefined: 56, \"56\": \"GasCostNotDefined\",\n    /**\n     * r\" The curve id is not supported.\n     */\n    UnsupportedCurveId: 57, \"57\": \"UnsupportedCurveId\",\n    /**\n     * r\" The operation type is not supported.\n     */\n    UnsupportedOperationType: 58, \"58\": \"UnsupportedOperationType\",\n    /**\n     * r\" Read alt_bn_128 curve point is invalid.\n     */\n    InvalidEllipticCurvePoint: 59, \"59\": \"InvalidEllipticCurvePoint\",\n    /**\n     * r\" Given input contract does not exist.\n     */\n    InputContractDoesNotExist: 60, \"60\": \"InputContractDoesNotExist\",\n});\n\nconst ADDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_add_free(ptr >>> 0, 1));\n/**\n * Adds two registers.\n */\nclass ADD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ADDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_add_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ADDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ADDIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_addi_free(ptr >>> 0, 1));\n/**\n * Adds a register and an immediate value.\n */\nclass ADDI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ADDIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_addi_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ADDIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst ALOCFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_aloc_free(ptr >>> 0, 1));\n/**\n * Allocate a number of bytes from the heap.\n */\nclass ALOC {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ALOCFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_aloc_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} bytes\n     */\n    constructor(bytes) {\n        _assertClass(bytes, RegId);\n        var ptr0 = bytes.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        ALOCFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ANDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_and_free(ptr >>> 0, 1));\n/**\n * Bitwise ANDs two registers.\n */\nclass AND {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ANDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_and_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ANDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ANDIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_andi_free(ptr >>> 0, 1));\n/**\n * Bitwise ANDs a register and an immediate value.\n */\nclass ANDI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ANDIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_andi_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ANDIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst BALFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_bal_free(ptr >>> 0, 1));\n/**\n * Get the balance of contract of an asset ID.\n */\nclass BAL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BALFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bal_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} asset_id_addr\n     * @param {RegId} contract_id_addr\n     */\n    constructor(dst, asset_id_addr, contract_id_addr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr1 = asset_id_addr.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr2 = contract_id_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        BALFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst BHEIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_bhei_free(ptr >>> 0, 1));\n/**\n * Get current block height.\n */\nclass BHEI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BHEIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bhei_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     */\n    constructor(dst) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        BHEIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst BHSHFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_bhsh_free(ptr >>> 0, 1));\n/**\n * Get block header hash for height.\n */\nclass BHSH {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BHSHFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bhsh_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} heigth\n     */\n    constructor(dst, heigth) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(heigth, RegId);\n        var ptr1 = heigth.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        BHSHFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst BLDDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_bldd_free(ptr >>> 0, 1));\n/**\n * Load blob as data\n */\nclass BLDD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BLDDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bldd_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_ptr\n     * @param {RegId} blob_id_ptr\n     * @param {RegId} offset\n     * @param {RegId} len\n     */\n    constructor(dst_ptr, blob_id_ptr, offset, len) {\n        _assertClass(dst_ptr, RegId);\n        var ptr0 = dst_ptr.__destroy_into_raw();\n        _assertClass(blob_id_ptr, RegId);\n        var ptr1 = blob_id_ptr.__destroy_into_raw();\n        _assertClass(offset, RegId);\n        var ptr2 = offset.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        BLDDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst BSIZFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_bsiz_free(ptr >>> 0, 1));\n/**\n * Get blob size\n */\nclass BSIZ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BSIZFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bsiz_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} blob_id_ptr\n     */\n    constructor(dst, blob_id_ptr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(blob_id_ptr, RegId);\n        var ptr1 = blob_id_ptr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        BSIZFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst BURNFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_burn_free(ptr >>> 0, 1));\n/**\n * Burns `amount` coins of the asset ID created from `sub_id` for the current contract.\n */\nclass BURN {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BURNFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_burn_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} amount\n     * @param {RegId} sub_id_addr\n     */\n    constructor(amount, sub_id_addr) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        _assertClass(sub_id_addr, RegId);\n        var ptr1 = sub_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        BURNFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CALLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_call_free(ptr >>> 0, 1));\n/**\n * Call a contract.\n */\nclass CALL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CALLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_call_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} target_struct\n     * @param {RegId} fwd_coins\n     * @param {RegId} asset_id_addr\n     * @param {RegId} fwd_gas\n     */\n    constructor(target_struct, fwd_coins, asset_id_addr, fwd_gas) {\n        _assertClass(target_struct, RegId);\n        var ptr0 = target_struct.__destroy_into_raw();\n        _assertClass(fwd_coins, RegId);\n        var ptr1 = fwd_coins.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr2 = asset_id_addr.__destroy_into_raw();\n        _assertClass(fwd_gas, RegId);\n        var ptr3 = fwd_gas.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        CALLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_cb_free(ptr >>> 0, 1));\n/**\n * Get current block proposer's address.\n */\nclass CB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cb_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     */\n    constructor(dst) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        CBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CCPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ccp_free(ptr >>> 0, 1));\n/**\n * Copy contract code for a contract.\n */\nclass CCP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CCPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ccp_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_addr\n     * @param {RegId} contract_id_addr\n     * @param {RegId} offset\n     * @param {RegId} len\n     */\n    constructor(dst_addr, contract_id_addr, offset, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr1 = contract_id_addr.__destroy_into_raw();\n        _assertClass(offset, RegId);\n        var ptr2 = offset.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        CCPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CFEFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_cfe_free(ptr >>> 0, 1));\n/**\n * Extend the current call frame's stack\n */\nclass CFE {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CFEFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfe_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} amount\n     */\n    constructor(amount) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        CFEFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CFEIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_cfei_free(ptr >>> 0, 1));\n/**\n * Extend the current call frame's stack by an immediate value.\n */\nclass CFEI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CFEIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfei_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {Imm24} amount\n     */\n    constructor(amount) {\n        _assertClass(amount, Imm24);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        CFEIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the 24-bit immediate value.\n     * @returns {Imm24}\n     */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst CFSFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_cfs_free(ptr >>> 0, 1));\n/**\n * Shrink the current call frame's stack\n */\nclass CFS {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CFSFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfs_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} amount\n     */\n    constructor(amount) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        CFSFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CFSIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_cfsi_free(ptr >>> 0, 1));\n/**\n * Shrink the current call frame's stack by an immediate value.\n */\nclass CFSI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CFSIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfsi_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {Imm24} amount\n     */\n    constructor(amount) {\n        _assertClass(amount, Imm24);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        CFSIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the 24-bit immediate value.\n     * @returns {Imm24}\n     */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst CROOFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_croo_free(ptr >>> 0, 1));\n/**\n * Get code root of a contract.\n */\nclass CROO {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CROOFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_croo_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_addr\n     * @param {RegId} contract_id_addr\n     */\n    constructor(dst_addr, contract_id_addr) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr1 = contract_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        CROOFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CSIZFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_csiz_free(ptr >>> 0, 1));\n/**\n * Get code size of a contract.\n */\nclass CSIZ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CSIZFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_csiz_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} contract_id_addr\n     */\n    constructor(dst, contract_id_addr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr1 = contract_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        CSIZFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CompareArgsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_compareargs_free(ptr >>> 0, 1));\n/**\n * Arguments for WDCM and WQCM instructions.\n */\nclass CompareArgs {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CompareArgs.prototype);\n        obj.__wbg_ptr = ptr;\n        CompareArgsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CompareArgsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_compareargs_free(ptr, 0);\n    }\n    /**\n     * Comparison mode\n     * @returns {CompareMode}\n     */\n    get mode() {\n        const ret = wasm$1.__wbg_get_compareargs_mode(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Comparison mode\n     * @param {CompareMode} arg0\n     */\n    set mode(arg0) {\n        wasm$1.__wbg_set_compareargs_mode(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Load RHS from register if true, otherwise zero-extend register value\n     * @returns {boolean}\n     */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Load RHS from register if true, otherwise zero-extend register value\n     * @param {boolean} arg0\n     */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Convert to immediate value.\n     * @returns {Imm06}\n     */\n    to_imm() {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm$1.compareargs_to_imm(ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n     * Construct from `Imm06`. Returns `None` if the value has reserved flags set.\n     * @param {Imm06} bits\n     * @returns {CompareArgs | undefined}\n     */\n    static from_imm(bits) {\n        _assertClass(bits, Imm06);\n        var ptr0 = bits.__destroy_into_raw();\n        const ret = wasm$1.compareargs_from_imm(ptr0);\n        return ret === 0 ? undefined : CompareArgs.__wrap(ret);\n    }\n}\n\nconst DIVFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_div_free(ptr >>> 0, 1));\n/**\n * Divides two registers.\n */\nclass DIV {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DIVFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_div_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        DIVFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst DIVIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_divi_free(ptr >>> 0, 1));\n/**\n * Divides a register and an immediate value.\n */\nclass DIVI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DIVIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_divi_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        DIVIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst DivArgsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_divargs_free(ptr >>> 0, 1));\n/**\n * Additional arguments for WMDV and WDDV instructions.\n */\nclass DivArgs {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DivArgsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_divargs_free(ptr, 0);\n    }\n    /**\n     * Load RHS from register if true, otherwise zero-extend register value\n     * @returns {boolean}\n     */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_divargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Load RHS from register if true, otherwise zero-extend register value\n     * @param {boolean} arg0\n     */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_divargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n}\n\nconst ECALFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ecal_free(ptr >>> 0, 1));\n/**\n * Call external function\n */\nclass ECAL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ECALFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ecal_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} a\n     * @param {RegId} b\n     * @param {RegId} c\n     * @param {RegId} d\n     */\n    constructor(a, b, c, d) {\n        _assertClass(a, RegId);\n        var ptr0 = a.__destroy_into_raw();\n        _assertClass(b, RegId);\n        var ptr1 = b.__destroy_into_raw();\n        _assertClass(c, RegId);\n        var ptr2 = c.__destroy_into_raw();\n        _assertClass(d, RegId);\n        var ptr3 = d.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        ECALFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ECK1Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_eck1_free(ptr >>> 0, 1));\n/**\n * The 64-byte public key (x, y) recovered from 64-byte signature on 32-byte message hash.\n */\nclass ECK1 {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ECK1Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_eck1_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_addr\n     * @param {RegId} sig_addr\n     * @param {RegId} msg_hash_addr\n     */\n    constructor(dst_addr, sig_addr, msg_hash_addr) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(sig_addr, RegId);\n        var ptr1 = sig_addr.__destroy_into_raw();\n        _assertClass(msg_hash_addr, RegId);\n        var ptr2 = msg_hash_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ECK1Finalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ECOPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ecop_free(ptr >>> 0, 1));\n/**\n * Given some curve, performs an operation on points\n */\nclass ECOP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ECOPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ecop_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} curve_id\n     * @param {RegId} operation_type\n     * @param {RegId} points_ptr\n     */\n    constructor(dst, curve_id, operation_type, points_ptr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(curve_id, RegId);\n        var ptr1 = curve_id.__destroy_into_raw();\n        _assertClass(operation_type, RegId);\n        var ptr2 = operation_type.__destroy_into_raw();\n        _assertClass(points_ptr, RegId);\n        var ptr3 = points_ptr.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        ECOPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ECR1Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ecr1_free(ptr >>> 0, 1));\n/**\n * The 64-byte Secp256r1 public key (x, y) recovered from 64-byte signature on 32-byte message hash.\n */\nclass ECR1 {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ECR1Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ecr1_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_addr\n     * @param {RegId} sig_addr\n     * @param {RegId} msg_hash_addr\n     */\n    constructor(dst_addr, sig_addr, msg_hash_addr) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(sig_addr, RegId);\n        var ptr1 = sig_addr.__destroy_into_raw();\n        _assertClass(msg_hash_addr, RegId);\n        var ptr2 = msg_hash_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ECR1Finalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ED19Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ed19_free(ptr >>> 0, 1));\n/**\n * Verify ED25519 public key and signature match a message.\n */\nclass ED19 {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ED19Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ed19_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} pub_key_addr\n     * @param {RegId} sig_addr\n     * @param {RegId} msg_addr\n     * @param {RegId} msg_len\n     */\n    constructor(pub_key_addr, sig_addr, msg_addr, msg_len) {\n        _assertClass(pub_key_addr, RegId);\n        var ptr0 = pub_key_addr.__destroy_into_raw();\n        _assertClass(sig_addr, RegId);\n        var ptr1 = sig_addr.__destroy_into_raw();\n        _assertClass(msg_addr, RegId);\n        var ptr2 = msg_addr.__destroy_into_raw();\n        _assertClass(msg_len, RegId);\n        var ptr3 = msg_len.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        ED19Finalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst EPARFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_epar_free(ptr >>> 0, 1));\n/**\n * Given some curve, performs a pairing on groups of points\n */\nclass EPAR {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EPARFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_epar_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} success\n     * @param {RegId} curve_id\n     * @param {RegId} number_elements\n     * @param {RegId} points_ptr\n     */\n    constructor(success, curve_id, number_elements, points_ptr) {\n        _assertClass(success, RegId);\n        var ptr0 = success.__destroy_into_raw();\n        _assertClass(curve_id, RegId);\n        var ptr1 = curve_id.__destroy_into_raw();\n        _assertClass(number_elements, RegId);\n        var ptr2 = number_elements.__destroy_into_raw();\n        _assertClass(points_ptr, RegId);\n        var ptr3 = points_ptr.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        EPARFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst EQFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_eq_free(ptr >>> 0, 1));\n/**\n * Compares two registers for equality.\n */\nclass EQ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EQFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_eq_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        EQFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst EXPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_exp_free(ptr >>> 0, 1));\n/**\n * Raises one register to the power of another.\n */\nclass EXP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EXPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_exp_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        EXPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst EXPIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_expi_free(ptr >>> 0, 1));\n/**\n * Raises one register to the power of an immediate value.\n */\nclass EXPI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EXPIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_expi_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        EXPIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst FLAGFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_flag_free(ptr >>> 0, 1));\n/**\n * Set flag register to a register.\n */\nclass FLAG {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FLAGFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_flag_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} value\n     */\n    constructor(value) {\n        _assertClass(value, RegId);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        FLAGFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst GMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_gm_free(ptr >>> 0, 1));\n/**\n * Get metadata from memory.\n */\nclass GM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GM.prototype);\n        obj.__wbg_ptr = ptr;\n        GMFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_gm_free(ptr, 0);\n    }\n    /**\n     * Construct a `GM` instruction from its arguments.\n     * @param {RegId} ra\n     * @param {GMArgs} args\n     * @returns {GM}\n     */\n    static from_args(ra, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        const ret = wasm$1.gm_from_args(ptr0, args);\n        return GM.__wrap(ret);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {Imm18} selector\n     */\n    constructor(dst, selector) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(selector, Imm18);\n        var ptr1 = selector.__destroy_into_raw();\n        const ret = wasm$1.gm_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        GMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 18-bit immediate value.\n     * @returns {Imm18}\n     */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst GTFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_gt_free(ptr >>> 0, 1));\n/**\n * Compares two registers for greater-than.\n */\nclass GT {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GTFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_gt_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        GTFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst GTFFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_gtf_free(ptr >>> 0, 1));\n/**\n * Get transaction fields.\n */\nclass GTF {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GTF.prototype);\n        obj.__wbg_ptr = ptr;\n        GTFFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GTFFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_gtf_free(ptr, 0);\n    }\n    /**\n     * Construct a `GTF` instruction from its arguments.\n     * @param {RegId} ra\n     * @param {RegId} rb\n     * @param {GTFArgs} args\n     * @returns {GTF}\n     */\n    static from_args(ra, rb, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        const ret = wasm$1.gtf_from_args(ptr0, ptr1, args);\n        return GTF.__wrap(ret);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} arg\n     * @param {Imm12} selector\n     */\n    constructor(dst, arg, selector) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(arg, RegId);\n        var ptr1 = arg.__destroy_into_raw();\n        _assertClass(selector, Imm12);\n        var ptr2 = selector.__destroy_into_raw();\n        const ret = wasm$1.gtf_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        GTFFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst Imm06Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_imm06_free(ptr >>> 0, 1));\n/**\n * Represents a 6-bit immediate value, guaranteed to be masked by construction.\n */\nclass Imm06 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm06.prototype);\n        obj.__wbg_ptr = ptr;\n        Imm06Finalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Imm06Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm06_free(ptr, 0);\n    }\n}\n\nconst Imm12Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_imm12_free(ptr >>> 0, 1));\n/**\n * Represents a 12-bit immediate value, guaranteed to be masked by construction.\n */\nclass Imm12 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm12.prototype);\n        obj.__wbg_ptr = ptr;\n        Imm12Finalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Imm12Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm12_free(ptr, 0);\n    }\n}\n\nconst Imm18Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_imm18_free(ptr >>> 0, 1));\n/**\n * Represents a 18-bit immediate value, guaranteed to be masked by construction.\n */\nclass Imm18 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm18.prototype);\n        obj.__wbg_ptr = ptr;\n        Imm18Finalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Imm18Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm18_free(ptr, 0);\n    }\n}\n\nconst Imm24Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_imm24_free(ptr >>> 0, 1));\n/**\n * Represents a 24-bit immediate value, guaranteed to be masked by construction.\n */\nclass Imm24 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm24.prototype);\n        obj.__wbg_ptr = ptr;\n        Imm24Finalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Imm24Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm24_free(ptr, 0);\n    }\n}\n\nconst InstructionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_instruction_free(ptr >>> 0, 1));\n/**\n * Representation of a single instruction for the interpreter.\n *\n * The opcode is represented in the tag (variant), or may be retrieved in the\n * form of an `Opcode` byte using the `opcode` method.\n *\n * The register and immediate data associated with the instruction is represented\n * within an inner unit type wrapper around the 3 remaining bytes.\n */\nclass Instruction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Instruction.prototype);\n        obj.__wbg_ptr = ptr;\n        InstructionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InstructionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_instruction_free(ptr, 0);\n    }\n    /**\n     * Convenience method for converting to bytes\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm$1.__wbindgen_add_to_stack_pointer(-16);\n            wasm$1.instruction_to_bytes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm$1.__wbindgen_export_0(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm$1.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Size of an instruction in bytes\n     * @returns {number}\n     */\n    static size() {\n        const ret = wasm$1.instruction_size();\n        return ret >>> 0;\n    }\n}\n\nconst JIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ji_free(ptr >>> 0, 1));\n/**\n * Jump.\n */\nclass JI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ji_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {Imm24} abs_target\n     */\n    constructor(abs_target) {\n        _assertClass(abs_target, Imm24);\n        var ptr0 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        JIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the 24-bit immediate value.\n     * @returns {Imm24}\n     */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst JMPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jmp_free(ptr >>> 0, 1));\n/**\n * Dynamic jump.\n */\nclass JMP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JMPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jmp_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} abs_target\n     */\n    constructor(abs_target) {\n        _assertClass(abs_target, RegId);\n        var ptr0 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        JMPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst JMPBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jmpb_free(ptr >>> 0, 1));\n/**\n * Unconditional dynamic relative jump backwards, with a constant offset.\n */\nclass JMPB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JMPBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jmpb_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dynamic\n     * @param {Imm18} fixed\n     */\n    constructor(dynamic, fixed) {\n        _assertClass(dynamic, RegId);\n        var ptr0 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm18);\n        var ptr1 = fixed.__destroy_into_raw();\n        const ret = wasm$1.jmpb_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        JMPBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 18-bit immediate value.\n     * @returns {Imm18}\n     */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst JMPFFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jmpf_free(ptr >>> 0, 1));\n/**\n * Unconditional dynamic relative jump forwards, with a constant offset.\n */\nclass JMPF {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JMPFFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jmpf_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dynamic\n     * @param {Imm18} fixed\n     */\n    constructor(dynamic, fixed) {\n        _assertClass(dynamic, RegId);\n        var ptr0 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm18);\n        var ptr1 = fixed.__destroy_into_raw();\n        const ret = wasm$1.jmpb_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        JMPFFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 18-bit immediate value.\n     * @returns {Imm18}\n     */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst JNEFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jne_free(ptr >>> 0, 1));\n/**\n * Conditional dynamic jump.\n */\nclass JNE {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNEFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jne_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} abs_target\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(abs_target, lhs, rhs) {\n        _assertClass(abs_target, RegId);\n        var ptr0 = abs_target.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        JNEFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst JNEBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jneb_free(ptr >>> 0, 1));\n/**\n * Dynamic relative jump backwards, conditional on comparsion, with a constant offset.\n */\nclass JNEB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNEBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jneb_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} cond_lhs\n     * @param {RegId} cond_rhs\n     * @param {RegId} dynamic\n     * @param {Imm06} fixed\n     */\n    constructor(cond_lhs, cond_rhs, dynamic, fixed) {\n        _assertClass(cond_lhs, RegId);\n        var ptr0 = cond_lhs.__destroy_into_raw();\n        _assertClass(cond_rhs, RegId);\n        var ptr1 = cond_rhs.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr2 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm06);\n        var ptr3 = fixed.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        JNEBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst JNEFFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jnef_free(ptr >>> 0, 1));\n/**\n * Dynamic relative jump forwards, conditional on comparsion, with a constant offset.\n */\nclass JNEF {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNEFFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnef_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} cond_lhs\n     * @param {RegId} cond_rhs\n     * @param {RegId} dynamic\n     * @param {Imm06} fixed\n     */\n    constructor(cond_lhs, cond_rhs, dynamic, fixed) {\n        _assertClass(cond_lhs, RegId);\n        var ptr0 = cond_lhs.__destroy_into_raw();\n        _assertClass(cond_rhs, RegId);\n        var ptr1 = cond_rhs.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr2 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm06);\n        var ptr3 = fixed.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        JNEFFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst JNEIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jnei_free(ptr >>> 0, 1));\n/**\n * Conditional jump.\n */\nclass JNEI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNEIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnei_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} cond_lhs\n     * @param {RegId} cond_rhs\n     * @param {Imm12} abs_target\n     */\n    constructor(cond_lhs, cond_rhs, abs_target) {\n        _assertClass(cond_lhs, RegId);\n        var ptr0 = cond_lhs.__destroy_into_raw();\n        _assertClass(cond_rhs, RegId);\n        var ptr1 = cond_rhs.__destroy_into_raw();\n        _assertClass(abs_target, Imm12);\n        var ptr2 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        JNEIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst JNZBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jnzb_free(ptr >>> 0, 1));\n/**\n * Dynamic relative jump backwards, conditional against zero, with a constant offset.\n */\nclass JNZB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNZBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnzb_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} cond_nz\n     * @param {RegId} dynamic\n     * @param {Imm12} fixed\n     */\n    constructor(cond_nz, dynamic, fixed) {\n        _assertClass(cond_nz, RegId);\n        var ptr0 = cond_nz.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr1 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm12);\n        var ptr2 = fixed.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        JNZBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst JNZFFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jnzf_free(ptr >>> 0, 1));\n/**\n * Dynamic relative jump forwards, conditional against zero, with a constant offset.\n */\nclass JNZF {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNZFFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnzf_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} cond_nz\n     * @param {RegId} dynamic\n     * @param {Imm12} fixed\n     */\n    constructor(cond_nz, dynamic, fixed) {\n        _assertClass(cond_nz, RegId);\n        var ptr0 = cond_nz.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr1 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm12);\n        var ptr2 = fixed.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        JNZFFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst JNZIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jnzi_free(ptr >>> 0, 1));\n/**\n * Conditional jump against zero.\n */\nclass JNZI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNZIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnzi_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} cond_nz\n     * @param {Imm18} abs_target\n     */\n    constructor(cond_nz, abs_target) {\n        _assertClass(cond_nz, RegId);\n        var ptr0 = cond_nz.__destroy_into_raw();\n        _assertClass(abs_target, Imm18);\n        var ptr1 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.jmpb_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        JNZIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 18-bit immediate value.\n     * @returns {Imm18}\n     */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst K256Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_k256_free(ptr >>> 0, 1));\n/**\n * The keccak-256 hash of a slice.\n */\nclass K256 {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        K256Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_k256_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_addr\n     * @param {RegId} src_addr\n     * @param {RegId} len\n     */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        K256Finalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst LBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_lb_free(ptr >>> 0, 1));\n/**\n * A byte is loaded from the specified address offset by an immediate value.\n */\nclass LB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_lb_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} addr\n     * @param {Imm12} offset\n     */\n    constructor(dst, addr, offset) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(addr, RegId);\n        var ptr1 = addr.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        LBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst LDCFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ldc_free(ptr >>> 0, 1));\n/**\n * Load code as executable either from contract, blob, or memory.\n */\nclass LDC {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LDCFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ldc_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} src_addr\n     * @param {RegId} offset\n     * @param {RegId} len\n     * @param {Imm06} mode\n     */\n    constructor(src_addr, offset, len, mode) {\n        _assertClass(src_addr, RegId);\n        var ptr0 = src_addr.__destroy_into_raw();\n        _assertClass(offset, RegId);\n        var ptr1 = offset.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        _assertClass(mode, Imm06);\n        var ptr3 = mode.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        LDCFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst LOGFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_log_free(ptr >>> 0, 1));\n/**\n * Log an event.\n */\nclass LOG {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LOGFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_log_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} a\n     * @param {RegId} b\n     * @param {RegId} c\n     * @param {RegId} d\n     */\n    constructor(a, b, c, d) {\n        _assertClass(a, RegId);\n        var ptr0 = a.__destroy_into_raw();\n        _assertClass(b, RegId);\n        var ptr1 = b.__destroy_into_raw();\n        _assertClass(c, RegId);\n        var ptr2 = c.__destroy_into_raw();\n        _assertClass(d, RegId);\n        var ptr3 = d.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        LOGFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst LOGDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_logd_free(ptr >>> 0, 1));\n/**\n * Log data.\n */\nclass LOGD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LOGDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_logd_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} a\n     * @param {RegId} b\n     * @param {RegId} addr\n     * @param {RegId} len\n     */\n    constructor(a, b, addr, len) {\n        _assertClass(a, RegId);\n        var ptr0 = a.__destroy_into_raw();\n        _assertClass(b, RegId);\n        var ptr1 = b.__destroy_into_raw();\n        _assertClass(addr, RegId);\n        var ptr2 = addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        LOGDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst LTFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_lt_free(ptr >>> 0, 1));\n/**\n * Compares two registers for less-than.\n */\nclass LT {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LTFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_lt_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        LTFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst LWFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_lw_free(ptr >>> 0, 1));\n/**\n * A word is loaded from the specified address offset by an immediate value.\n */\nclass LW {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LWFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_lw_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} addr\n     * @param {Imm12} offset\n     */\n    constructor(dst, addr, offset) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(addr, RegId);\n        var ptr1 = addr.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        LWFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst MCLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mcl_free(ptr >>> 0, 1));\n/**\n * Clear a variable number of bytes in memory.\n */\nclass MCL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MCLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcl_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_addr\n     * @param {RegId} len\n     */\n    constructor(dst_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr1 = len.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        MCLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MCLIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mcli_free(ptr >>> 0, 1));\n/**\n * Clear an immediate number of bytes in memory.\n */\nclass MCLI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MCLIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcli_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} addr\n     * @param {Imm18} count\n     */\n    constructor(addr, count) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(count, Imm18);\n        var ptr1 = count.__destroy_into_raw();\n        const ret = wasm$1.jmpb_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        MCLIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 18-bit immediate value.\n     * @returns {Imm18}\n     */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst MCPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mcp_free(ptr >>> 0, 1));\n/**\n * Copy a variable number of bytes in memory.\n */\nclass MCP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MCPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcp_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_addr\n     * @param {RegId} src_addr\n     * @param {RegId} len\n     */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MCPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MCPIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mcpi_free(ptr >>> 0, 1));\n/**\n * Copy an immediate number of bytes in memory.\n */\nclass MCPI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MCPIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcpi_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_addr\n     * @param {RegId} src_addr\n     * @param {Imm12} len\n     */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, Imm12);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MCPIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst MEQFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_meq_free(ptr >>> 0, 1));\n/**\n * Compare bytes in memory.\n */\nclass MEQ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MEQFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_meq_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} result\n     * @param {RegId} lhs_addr\n     * @param {RegId} rhs_addr\n     * @param {RegId} len\n     */\n    constructor(result, lhs_addr, rhs_addr, len) {\n        _assertClass(result, RegId);\n        var ptr0 = result.__destroy_into_raw();\n        _assertClass(lhs_addr, RegId);\n        var ptr1 = lhs_addr.__destroy_into_raw();\n        _assertClass(rhs_addr, RegId);\n        var ptr2 = rhs_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        MEQFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MINTFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mint_free(ptr >>> 0, 1));\n/**\n * Mints `amount` coins of the asset ID created from `sub_id` for the current contract.\n */\nclass MINT {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MINTFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mint_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} amount\n     * @param {RegId} sub_id_addr\n     */\n    constructor(amount, sub_id_addr) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        _assertClass(sub_id_addr, RegId);\n        var ptr1 = sub_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        MINTFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MLDVFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mldv_free(ptr >>> 0, 1));\n/**\n * Fused multiply-divide with arbitrary precision intermediate step.\n */\nclass MLDV {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MLDVFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mldv_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} mul_lhs\n     * @param {RegId} mul_rhs\n     * @param {RegId} divisor\n     */\n    constructor(dst, mul_lhs, mul_rhs, divisor) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(divisor, RegId);\n        var ptr3 = divisor.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        MLDVFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MLOGFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mlog_free(ptr >>> 0, 1));\n/**\n * The integer logarithm of a register.\n */\nclass MLOG {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MLOGFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mlog_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MLOGFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MODFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mod_free(ptr >>> 0, 1));\n/**\n * Modulo remainder of two registers.\n */\nclass MOD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MODFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mod_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MODFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MODIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_modi_free(ptr >>> 0, 1));\n/**\n * Modulo remainder of a register and an immediate value.\n */\nclass MODI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MODIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_modi_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MODIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst MOVEFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_move_free(ptr >>> 0, 1));\n/**\n * Copy from one register to another.\n */\nclass MOVE {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MOVEFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_move_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} src\n     */\n    constructor(dst, src) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(src, RegId);\n        var ptr1 = src.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        MOVEFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MOVIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_movi_free(ptr >>> 0, 1));\n/**\n * Copy immediate value into a register\n */\nclass MOVI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MOVIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_movi_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {Imm18} val\n     */\n    constructor(dst, val) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(val, Imm18);\n        var ptr1 = val.__destroy_into_raw();\n        const ret = wasm$1.jmpb_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        MOVIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 18-bit immediate value.\n     * @returns {Imm18}\n     */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst MROOFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mroo_free(ptr >>> 0, 1));\n/**\n * The integer root of a register.\n */\nclass MROO {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MROOFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mroo_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MROOFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MULFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mul_free(ptr >>> 0, 1));\n/**\n * Multiplies two registers.\n */\nclass MUL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MULFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mul_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MULFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MULIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_muli_free(ptr >>> 0, 1));\n/**\n * Multiplies a register and an immediate value.\n */\nclass MULI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MULIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_muli_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MULIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst MathArgsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mathargs_free(ptr >>> 0, 1));\n/**\n * Additional arguments for WDOP and WQOP instructions.\n */\nclass MathArgs {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MathArgsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mathargs_free(ptr, 0);\n    }\n    /**\n     * The operation to perform\n     * @returns {MathOp}\n     */\n    get op() {\n        const ret = wasm$1.__wbg_get_mathargs_op(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The operation to perform\n     * @param {MathOp} arg0\n     */\n    set op(arg0) {\n        wasm$1.__wbg_set_mathargs_op(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Load RHS from register if true, otherwise zero-extend register value\n     * @returns {boolean}\n     */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Load RHS from register if true, otherwise zero-extend register value\n     * @param {boolean} arg0\n     */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n}\n\nconst MulArgsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mulargs_free(ptr >>> 0, 1));\n/**\n * Additional arguments for WDML and WQML instructions.\n */\nclass MulArgs {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MulArgsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mulargs_free(ptr, 0);\n    }\n    /**\n     * Load LHSS from register if true, otherwise zero-extend register value\n     * @returns {boolean}\n     */\n    get indirect_lhs() {\n        const ret = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Load LHSS from register if true, otherwise zero-extend register value\n     * @param {boolean} arg0\n     */\n    set indirect_lhs(arg0) {\n        wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Load RHS from register if true, otherwise zero-extend register value\n     * @returns {boolean}\n     */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_mulargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Load RHS from register if true, otherwise zero-extend register value\n     * @param {boolean} arg0\n     */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_mulargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n}\n\nconst NOOPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_noop_free(ptr >>> 0, 1));\n/**\n * Performs no operation.\n */\nclass NOOP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        NOOPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_noop_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction.\n     */\n    constructor() {\n        const ret = wasm$1.noop_new_typescript();\n        this.__wbg_ptr = ret >>> 0;\n        NOOPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst NOTFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_not_free(ptr >>> 0, 1));\n/**\n * Bitwise NOT a register.\n */\nclass NOT {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        NOTFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_not_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} arg\n     */\n    constructor(dst, arg) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(arg, RegId);\n        var ptr1 = arg.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        NOTFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ORFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_or_free(ptr >>> 0, 1));\n/**\n * Bitwise ORs two registers.\n */\nclass OR {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ORFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_or_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ORFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ORIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ori_free(ptr >>> 0, 1));\n/**\n * Bitwise ORs a register and an immediate value.\n */\nclass ORI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ORIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ori_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ORIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst POPHFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_poph_free(ptr >>> 0, 1));\n/**\n * Pop a bitmask-selected set of registers in range 40..64 to the stack.\n */\nclass POPH {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        POPHFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_poph_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {Imm24} bitmask\n     */\n    constructor(bitmask) {\n        _assertClass(bitmask, Imm24);\n        var ptr0 = bitmask.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        POPHFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the 24-bit immediate value.\n     * @returns {Imm24}\n     */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst POPLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_popl_free(ptr >>> 0, 1));\n/**\n * Pop a bitmask-selected set of registers in range 16..40 to the stack.\n */\nclass POPL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        POPLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_popl_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {Imm24} bitmask\n     */\n    constructor(bitmask) {\n        _assertClass(bitmask, Imm24);\n        var ptr0 = bitmask.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        POPLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the 24-bit immediate value.\n     * @returns {Imm24}\n     */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst PSHHFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_pshh_free(ptr >>> 0, 1));\n/**\n * Push a bitmask-selected set of registers in range 40..64 to the stack.\n */\nclass PSHH {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PSHHFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_pshh_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {Imm24} bitmask\n     */\n    constructor(bitmask) {\n        _assertClass(bitmask, Imm24);\n        var ptr0 = bitmask.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        PSHHFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the 24-bit immediate value.\n     * @returns {Imm24}\n     */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst PSHLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_pshl_free(ptr >>> 0, 1));\n/**\n * Push a bitmask-selected set of registers in range 16..40 to the stack.\n */\nclass PSHL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PSHLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_pshl_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {Imm24} bitmask\n     */\n    constructor(bitmask) {\n        _assertClass(bitmask, Imm24);\n        var ptr0 = bitmask.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        PSHLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the 24-bit immediate value.\n     * @returns {Imm24}\n     */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst PanicInstructionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_panicinstruction_free(ptr >>> 0, 1));\n/**\n * Describe a panic reason with the instruction that generated it\n */\nclass PanicInstruction {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PanicInstructionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_panicinstruction_free(ptr, 0);\n    }\n    /**\n     * Represents an error described by a reason and an instruction.\n     * @param {PanicReason} reason\n     * @param {number} instruction\n     */\n    constructor(reason, instruction) {\n        const ret = wasm$1.panicinstruction_error_typescript(reason, instruction);\n        this.__wbg_ptr = ret >>> 0;\n        PanicInstructionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Underlying panic reason\n     * @returns {PanicReason}\n     */\n    reason() {\n        const ret = wasm$1.panicinstruction_reason(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Underlying instruction\n     * @returns {number}\n     */\n    instruction() {\n        const ret = wasm$1.panicinstruction_instruction(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n}\n\nconst RETFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ret_free(ptr >>> 0, 1));\n/**\n * Return from context.\n */\nclass RET {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RETFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ret_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} value\n     */\n    constructor(value) {\n        _assertClass(value, RegId);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        RETFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst RETDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_retd_free(ptr >>> 0, 1));\n/**\n * Return from context with data.\n */\nclass RETD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RETDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_retd_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} addr\n     * @param {RegId} len\n     */\n    constructor(addr, len) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr1 = len.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        RETDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst RVRTFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_rvrt_free(ptr >>> 0, 1));\n/**\n * Halt execution, reverting state changes and returning a value.\n */\nclass RVRT {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RVRTFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_rvrt_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} value\n     */\n    constructor(value) {\n        _assertClass(value, RegId);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        RVRTFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst RegIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_regid_free(ptr >>> 0, 1));\n/**\n * Represents a 6-bit register ID, guaranteed to be masked by construction.\n */\nclass RegId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RegId.prototype);\n        obj.__wbg_ptr = ptr;\n        RegIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RegIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_regid_free(ptr, 0);\n    }\n    /**\n     * Construct a register ID from the given value.\n     *\n     * Returns `None` if the value is outside the 6-bit value range.\n     * @param {number} u\n     * @returns {RegId | undefined}\n     */\n    static new_checked(u) {\n        const ret = wasm$1.regid_new_checked(u);\n        return ret === 0 ? undefined : RegId.__wrap(ret);\n    }\n    /**\n     * Received balance for this context.\n     * @returns {RegId}\n     */\n    static bal() {\n        const ret = wasm$1.regid_bal();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Remaining gas in the context.\n     * @returns {RegId}\n     */\n    static cgas() {\n        const ret = wasm$1.regid_cgas();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Error codes for particular operations.\n     * @returns {RegId}\n     */\n    static err() {\n        const ret = wasm$1.regid_err();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Flags register.\n     * @returns {RegId}\n     */\n    static flag() {\n        const ret = wasm$1.regid_flag();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Frame pointer. Memory address of beginning of current call frame.\n     * @returns {RegId}\n     */\n    static fp() {\n        const ret = wasm$1.regid_fp();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Remaining gas globally.\n     * @returns {RegId}\n     */\n    static ggas() {\n        const ret = wasm$1.regid_ggas();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Heap pointer. Memory address below the current bottom of the heap (points to free\n     * memory).\n     * @returns {RegId}\n     */\n    static hp() {\n        const ret = wasm$1.regid_hp();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Instructions start. Pointer to the start of the currently-executing code.\n     * @returns {RegId}\n     */\n    static is() {\n        const ret = wasm$1.regid_is();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Contains overflow/underflow of addition, subtraction, and multiplication.\n     * @returns {RegId}\n     */\n    static of() {\n        const ret = wasm$1.regid_of();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Contains one (1), for convenience.\n     * @returns {RegId}\n     */\n    static one() {\n        const ret = wasm$1.regid_one();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * The program counter. Memory address of the current instruction.\n     * @returns {RegId}\n     */\n    static pc() {\n        const ret = wasm$1.regid_pc();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Return value or pointer.\n     * @returns {RegId}\n     */\n    static ret() {\n        const ret = wasm$1.regid_ret();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Return value length in bytes.\n     * @returns {RegId}\n     */\n    static retl() {\n        const ret = wasm$1.regid_retl();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Stack pointer. Memory address on top of current writable stack area (points to\n     * free memory).\n     * @returns {RegId}\n     */\n    static sp() {\n        const ret = wasm$1.regid_sp();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Stack start pointer. Memory address of bottom of current writable stack area.\n     * @returns {RegId}\n     */\n    static spp() {\n        const ret = wasm$1.regid_spp();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Smallest writable register.\n     * @returns {RegId}\n     */\n    static writable() {\n        const ret = wasm$1.regid_writable();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Contains zero (0), for convenience.\n     * @returns {RegId}\n     */\n    static zero() {\n        const ret = wasm$1.regid_zero();\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Construct a register ID from the given value.\n     *\n     * The given value will be masked to 6 bits.\n     * @param {number} u\n     */\n    constructor(u) {\n        const ret = wasm$1.regid_new_typescript(u);\n        this.__wbg_ptr = ret >>> 0;\n        RegIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * A const alternative to the `Into<u8>` implementation.\n     * @returns {number}\n     */\n    to_u8() {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm$1.regid_to_u8(ptr);\n        return ret;\n    }\n}\n\nconst S256Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_s256_free(ptr >>> 0, 1));\n/**\n * The SHA-2-256 hash of a slice.\n */\nclass S256 {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        S256Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_s256_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_addr\n     * @param {RegId} src_addr\n     * @param {RegId} len\n     */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        S256Finalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_sb_free(ptr >>> 0, 1));\n/**\n * Write the least significant byte of a register to memory.\n */\nclass SB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sb_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} addr\n     * @param {RegId} value\n     * @param {Imm12} offset\n     */\n    constructor(addr, value, offset) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(value, RegId);\n        var ptr1 = value.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst SCWQFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_scwq_free(ptr >>> 0, 1));\n/**\n * Clear a series of slots from contract storage.\n */\nclass SCWQ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SCWQFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_scwq_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} key_addr\n     * @param {RegId} status\n     * @param {RegId} lenq\n     */\n    constructor(key_addr, status, lenq) {\n        _assertClass(key_addr, RegId);\n        var ptr0 = key_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(lenq, RegId);\n        var ptr2 = lenq.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SCWQFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SLLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_sll_free(ptr >>> 0, 1));\n/**\n * Left shifts a register by a register.\n */\nclass SLL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SLLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sll_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SLLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SLLIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_slli_free(ptr >>> 0, 1));\n/**\n * Left shifts a register by an immediate value.\n */\nclass SLLI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SLLIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_slli_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SLLIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst SMOFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_smo_free(ptr >>> 0, 1));\n/**\n * Send a message to recipient address with call abi, coins, and output.\n */\nclass SMO {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SMOFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_smo_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} recipient_addr\n     * @param {RegId} data_addr\n     * @param {RegId} data_len\n     * @param {RegId} coins\n     */\n    constructor(recipient_addr, data_addr, data_len, coins) {\n        _assertClass(recipient_addr, RegId);\n        var ptr0 = recipient_addr.__destroy_into_raw();\n        _assertClass(data_addr, RegId);\n        var ptr1 = data_addr.__destroy_into_raw();\n        _assertClass(data_len, RegId);\n        var ptr2 = data_len.__destroy_into_raw();\n        _assertClass(coins, RegId);\n        var ptr3 = coins.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        SMOFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SRLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_srl_free(ptr >>> 0, 1));\n/**\n * Right shifts a register by a register.\n */\nclass SRL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SRLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srl_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SRLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SRLIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_srli_free(ptr >>> 0, 1));\n/**\n * Right shifts a register by an immediate value.\n */\nclass SRLI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SRLIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srli_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SRLIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst SRWFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_srw_free(ptr >>> 0, 1));\n/**\n * Load a word from contract storage.\n */\nclass SRW {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SRWFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srw_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} status\n     * @param {RegId} key_addr\n     */\n    constructor(dst, status, key_addr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(key_addr, RegId);\n        var ptr2 = key_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SRWFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SRWQFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_srwq_free(ptr >>> 0, 1));\n/**\n * Load a series of 32 byte slots from contract storage.\n */\nclass SRWQ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SRWQFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srwq_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst_addr\n     * @param {RegId} status\n     * @param {RegId} key_addr\n     * @param {RegId} lenq\n     */\n    constructor(dst_addr, status, key_addr, lenq) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(key_addr, RegId);\n        var ptr2 = key_addr.__destroy_into_raw();\n        _assertClass(lenq, RegId);\n        var ptr3 = lenq.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        SRWQFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SUBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_sub_free(ptr >>> 0, 1));\n/**\n * Subtracts two registers.\n */\nclass SUB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SUBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sub_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SUBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SUBIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_subi_free(ptr >>> 0, 1));\n/**\n * Subtracts a register and an immediate value.\n */\nclass SUBI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SUBIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_subi_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SUBIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst SWFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_sw_free(ptr >>> 0, 1));\n/**\n * Write a register to memory.\n */\nclass SW {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SWFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sw_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} addr\n     * @param {RegId} value\n     * @param {Imm12} offset\n     */\n    constructor(addr, value, offset) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(value, RegId);\n        var ptr1 = value.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SWFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst SWWFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_sww_free(ptr >>> 0, 1));\n/**\n * Store a word in contract storage.\n */\nclass SWW {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SWWFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sww_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} key_addr\n     * @param {RegId} status\n     * @param {RegId} value\n     */\n    constructor(key_addr, status, value) {\n        _assertClass(key_addr, RegId);\n        var ptr0 = key_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(value, RegId);\n        var ptr2 = value.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SWWFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SWWQFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_swwq_free(ptr >>> 0, 1));\n/**\n * Store a series of 32 byte slots in contract storage.\n */\nclass SWWQ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SWWQFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_swwq_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} key_addr\n     * @param {RegId} status\n     * @param {RegId} src_addr\n     * @param {RegId} lenq\n     */\n    constructor(key_addr, status, src_addr, lenq) {\n        _assertClass(key_addr, RegId);\n        var ptr0 = key_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr2 = src_addr.__destroy_into_raw();\n        _assertClass(lenq, RegId);\n        var ptr3 = lenq.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        SWWQFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst TIMEFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_time_free(ptr >>> 0, 1));\n/**\n * Get timestamp of block at given height.\n */\nclass TIME {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TIMEFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_time_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} heigth\n     */\n    constructor(dst, heigth) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(heigth, RegId);\n        var ptr1 = heigth.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        TIMEFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst TRFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_tr_free(ptr >>> 0, 1));\n/**\n * Transfer coins to a contract unconditionally.\n */\nclass TR {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TRFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_tr_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} contract_id_addr\n     * @param {RegId} amount\n     * @param {RegId} asset_id_addr\n     */\n    constructor(contract_id_addr, amount, asset_id_addr) {\n        _assertClass(contract_id_addr, RegId);\n        var ptr0 = contract_id_addr.__destroy_into_raw();\n        _assertClass(amount, RegId);\n        var ptr1 = amount.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr2 = asset_id_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        TRFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst TROFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_tro_free(ptr >>> 0, 1));\n/**\n * Transfer coins to a variable output.\n */\nclass TRO {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TROFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_tro_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} contract_id_addr\n     * @param {RegId} output_index\n     * @param {RegId} amount\n     * @param {RegId} asset_id_addr\n     */\n    constructor(contract_id_addr, output_index, amount, asset_id_addr) {\n        _assertClass(contract_id_addr, RegId);\n        var ptr0 = contract_id_addr.__destroy_into_raw();\n        _assertClass(output_index, RegId);\n        var ptr1 = output_index.__destroy_into_raw();\n        _assertClass(amount, RegId);\n        var ptr2 = amount.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr3 = asset_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        TROFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WDAMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdam_free(ptr >>> 0, 1));\n/**\n * AddMod 128bit\n */\nclass WDAM {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDAMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdam_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} add_lhs\n     * @param {RegId} add_rhs\n     * @param {RegId} modulo\n     */\n    constructor(dst, add_lhs, add_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(add_lhs, RegId);\n        var ptr1 = add_lhs.__destroy_into_raw();\n        _assertClass(add_rhs, RegId);\n        var ptr2 = add_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDAMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WDCMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdcm_free(ptr >>> 0, 1));\n/**\n * Compare 128bit integers\n */\nclass WDCM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDCM.prototype);\n        obj.__wbg_ptr = ptr;\n        WDCMFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDCMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdcm_free(ptr, 0);\n    }\n    /**\n     * Construct a `WDCM` instruction from its arguments.\n     * @param {RegId} ra\n     * @param {RegId} rb\n     * @param {RegId} rc\n     * @param {CompareArgs} args\n     * @returns {WDCM}\n     */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, CompareArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdcm_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDCM.__wrap(ret);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     * @param {Imm06} flags\n     */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDCMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WDDVFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wddv_free(ptr >>> 0, 1));\n/**\n * Divide 128bit\n */\nclass WDDV {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDDV.prototype);\n        obj.__wbg_ptr = ptr;\n        WDDVFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDDVFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wddv_free(ptr, 0);\n    }\n    /**\n     * Construct a `WDDV` instruction from its arguments.\n     * @param {RegId} ra\n     * @param {RegId} rb\n     * @param {RegId} rc\n     * @param {DivArgs} args\n     * @returns {WDDV}\n     */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, DivArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wddv_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDDV.__wrap(ret);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     * @param {Imm06} flags\n     */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDDVFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WDMDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdmd_free(ptr >>> 0, 1));\n/**\n * Fused multiply-divide 128bit\n */\nclass WDMD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDMDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdmd_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} mul_lhs\n     * @param {RegId} mul_rhs\n     * @param {RegId} divisor\n     */\n    constructor(dst, mul_lhs, mul_rhs, divisor) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(divisor, RegId);\n        var ptr3 = divisor.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDMDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WDMLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdml_free(ptr >>> 0, 1));\n/**\n * Multiply 128bit\n */\nclass WDML {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDML.prototype);\n        obj.__wbg_ptr = ptr;\n        WDMLFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDMLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdml_free(ptr, 0);\n    }\n    /**\n     * Construct a `WDML` instruction from its arguments.\n     * @param {RegId} ra\n     * @param {RegId} rb\n     * @param {RegId} rc\n     * @param {MulArgs} args\n     * @returns {WDML}\n     */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MulArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdml_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDML.__wrap(ret);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     * @param {Imm06} flags\n     */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDMLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WDMMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdmm_free(ptr >>> 0, 1));\n/**\n * MulMod 128bit\n */\nclass WDMM {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDMMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdmm_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} mul_lhs\n     * @param {RegId} mul_rhs\n     * @param {RegId} modulo\n     */\n    constructor(dst, mul_lhs, mul_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDMMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WDOPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdop_free(ptr >>> 0, 1));\n/**\n * Simple 128bit operations\n */\nclass WDOP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDOP.prototype);\n        obj.__wbg_ptr = ptr;\n        WDOPFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDOPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdop_free(ptr, 0);\n    }\n    /**\n     * Construct a `WDOP` instruction from its arguments.\n     * @param {RegId} ra\n     * @param {RegId} rb\n     * @param {RegId} rc\n     * @param {MathArgs} args\n     * @returns {WDOP}\n     */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MathArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdop_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDOP.__wrap(ret);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     * @param {Imm06} flags\n     */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDOPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WQAMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqam_free(ptr >>> 0, 1));\n/**\n * AddMod 256bit\n */\nclass WQAM {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQAMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqam_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} add_lhs\n     * @param {RegId} add_rhs\n     * @param {RegId} modulo\n     */\n    constructor(dst, add_lhs, add_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(add_lhs, RegId);\n        var ptr1 = add_lhs.__destroy_into_raw();\n        _assertClass(add_rhs, RegId);\n        var ptr2 = add_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQAMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WQCMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqcm_free(ptr >>> 0, 1));\n/**\n * Compare 256bit integers\n */\nclass WQCM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQCM.prototype);\n        obj.__wbg_ptr = ptr;\n        WQCMFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQCMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqcm_free(ptr, 0);\n    }\n    /**\n     * Construct a `WQCM` instruction from its arguments.\n     * @param {RegId} ra\n     * @param {RegId} rb\n     * @param {RegId} rc\n     * @param {CompareArgs} args\n     * @returns {WQCM}\n     */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, CompareArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdcm_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQCM.__wrap(ret);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     * @param {Imm06} flags\n     */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQCMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WQDVFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqdv_free(ptr >>> 0, 1));\n/**\n * Divide 256bit\n */\nclass WQDV {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQDV.prototype);\n        obj.__wbg_ptr = ptr;\n        WQDVFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQDVFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqdv_free(ptr, 0);\n    }\n    /**\n     * Construct a `WQDV` instruction from its arguments.\n     * @param {RegId} ra\n     * @param {RegId} rb\n     * @param {RegId} rc\n     * @param {DivArgs} args\n     * @returns {WQDV}\n     */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, DivArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wddv_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQDV.__wrap(ret);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     * @param {Imm06} flags\n     */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQDVFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WQMDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqmd_free(ptr >>> 0, 1));\n/**\n * Fused multiply-divide 256bit\n */\nclass WQMD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQMDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqmd_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} mul_lhs\n     * @param {RegId} mul_rhs\n     * @param {RegId} divisor\n     */\n    constructor(dst, mul_lhs, mul_rhs, divisor) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(divisor, RegId);\n        var ptr3 = divisor.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQMDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WQMLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqml_free(ptr >>> 0, 1));\n/**\n * Multiply 256bit\n */\nclass WQML {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQML.prototype);\n        obj.__wbg_ptr = ptr;\n        WQMLFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQMLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqml_free(ptr, 0);\n    }\n    /**\n     * Construct a `WQML` instruction from its arguments.\n     * @param {RegId} ra\n     * @param {RegId} rb\n     * @param {RegId} rc\n     * @param {MulArgs} args\n     * @returns {WQML}\n     */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MulArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdml_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQML.__wrap(ret);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     * @param {Imm06} flags\n     */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQMLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WQMMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqmm_free(ptr >>> 0, 1));\n/**\n * MulMod 256bit\n */\nclass WQMM {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQMMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqmm_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} mul_lhs\n     * @param {RegId} mul_rhs\n     * @param {RegId} modulo\n     */\n    constructor(dst, mul_lhs, mul_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQMMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register D.\n     * @returns {RegId}\n     */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WQOPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqop_free(ptr >>> 0, 1));\n/**\n * Simple 256bit operations\n */\nclass WQOP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQOP.prototype);\n        obj.__wbg_ptr = ptr;\n        WQOPFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQOPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqop_free(ptr, 0);\n    }\n    /**\n     * Construct a `WQOP` instruction from its arguments.\n     * @param {RegId} ra\n     * @param {RegId} rb\n     * @param {RegId} rc\n     * @param {MathArgs} args\n     * @returns {WQOP}\n     */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MathArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdop_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQOP.__wrap(ret);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     * @param {Imm06} flags\n     */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQOPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 6-bit immediate value.\n     * @returns {Imm06}\n     */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst XORFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_xor_free(ptr >>> 0, 1));\n/**\n * Bitwise XORs two registers.\n */\nclass XOR {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        XORFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_xor_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {RegId} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        XORFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register C.\n     * @returns {RegId}\n     */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst XORIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_xori_free(ptr >>> 0, 1));\n/**\n * Bitwise XORs a register and an immediate value.\n */\nclass XORI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        XORIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_xori_free(ptr, 0);\n    }\n    /**\n     * Construct the instruction from its parts.\n     * @param {RegId} dst\n     * @param {RegId} lhs\n     * @param {Imm12} rhs\n     */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        XORIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Access the ID for register A.\n     * @returns {RegId}\n     */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the ID for register B.\n     * @returns {RegId}\n     */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n     * Access the 12-bit immediate value.\n     * @returns {Imm12}\n     */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm$1 = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedDataViewMemory0 = null;\n    cachedUint8ArrayMemory0 = null;\n\n\n\n    return wasm$1;\n}\n\nfunction initSync(module) {\n    if (wasm$1 !== undefined) return wasm$1;\n\n\n    if (typeof module !== 'undefined') {\n        if (Object.getPrototypeOf(module) === Object.prototype) {\n            ({module} = module);\n        } else {\n            console.warn('using deprecated parameters for `initSync()`; pass a single object instead');\n        }\n    }\n\n    const imports = __wbg_get_imports();\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(module_or_path) {\n    if (wasm$1 !== undefined) return wasm$1;\n\n\n    if (typeof module_or_path !== 'undefined') {\n        if (Object.getPrototypeOf(module_or_path) === Object.prototype) {\n            ({module_or_path} = module_or_path);\n        } else {\n            console.warn('using deprecated parameters for the initialization function; pass a single object instead');\n        }\n    }\n    const imports = __wbg_get_imports();\n\n    const { instance, module } = await __wbg_load(await module_or_path, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nfunction _loadWasmModule (sync, filepath, src, imports) {\n  function _instantiateOrCompile(source, imports, stream) {\n    var instantiateFunc = stream ? WebAssembly.instantiateStreaming : WebAssembly.instantiate;\n    var compileFunc = stream ? WebAssembly.compileStreaming : WebAssembly.compile;\n\n    if (imports) {\n      return instantiateFunc(source, imports)\n    } else {\n      return compileFunc(source)\n    }\n  }\n\n  \nvar buf = null;\nvar isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;\nif (isNode) {\n  \nbuf = Buffer.from(src, 'base64');\n\n} else {\n  \nvar raw = globalThis.atob(src);\nvar rawLength = raw.length;\nbuf = new Uint8Array(new ArrayBuffer(rawLength));\nfor(var i = 0; i < rawLength; i++) {\n   buf[i] = raw.charCodeAt(i);\n}\n\n}\n\n\n  if(sync) {\n    var mod = new WebAssembly.Module(buf);\n    return imports ? new WebAssembly.Instance(mod, imports) : mod\n  } else {\n    return _instantiateOrCompile(buf, imports, false)\n  }\n}\n\nfunction wasm(imports){return _loadWasmModule(1, null, '', imports)}\n\nasync function initWasm () {\n  return await __wbg_init(wasm());\n}\n\n/**\n * calling it right away for pre-caching\n * the wasm async initialization at startup\n */\ninitWasm();\n\nexport { ADD, ADDI, ALOC, AND, ANDI, BAL, BHEI, BHSH, BLDD, BSIZ, BURN, CALL, CB, CCP, CFE, CFEI, CFS, CFSI, CROO, CSIZ, CompareArgs, CompareMode, DIV, DIVI, DivArgs, ECAL, ECK1, ECOP, ECR1, ED19, EPAR, EQ, EXP, EXPI, FLAG, GM, GMArgs, GT, GTF, GTFArgs, Imm06, Imm12, Imm18, Imm24, Instruction, JI, JMP, JMPB, JMPF, JNE, JNEB, JNEF, JNEI, JNZB, JNZF, JNZI, K256, LB, LDC, LOG, LOGD, LT, LW, MCL, MCLI, MCP, MCPI, MEQ, MINT, MLDV, MLOG, MOD, MODI, MOVE, MOVI, MROO, MUL, MULI, MathArgs, MathOp, MulArgs, NOOP, NOT, OR, ORI, POPH, POPL, PSHH, PSHL, PanicInstruction, PanicReason, RET, RETD, RVRT, RegId, S256, SB, SCWQ, SLL, SLLI, SMO, SRL, SRLI, SRW, SRWQ, SUB, SUBI, SW, SWW, SWWQ, TIME, TR, TRO, WDAM, WDCM, WDDV, WDMD, WDML, WDMM, WDOP, WQAM, WQCM, WQDV, WQMD, WQML, WQMM, WQOP, XOR, XORI, add, addi, aloc, and, andi, bal, bhei, bhsh, bldd, bsiz, burn, call, cb, ccp, cfe, cfei, cfs, cfsi, croo, csiz, div, divi, ecal, eck1, ecop, ecr1, ed19, epar, eq, exp, expi, flag, gm, gm_args, gt, gtf, gtf_args, initSync, initWasm, ji, jmp, jmpb, jmpf, jne, jneb, jnef, jnei, jnzb, jnzf, jnzi, k256, lb, ldc, log, logd, lt, lw, mcl, mcli, mcp, mcpi, meq, mint, mldv, mlog, mod_, modi, move_, movi, mroo, mul, muli, noop, not, or, ori, poph, popl, pshh, pshl, ret, retd, rvrt, s256, sb, scwq, sll, slli, smo, srl, srli, srw, srwq, sub, subi, sw, sww, swwq, time, tr, tro, wdam, wdcm, wdcm_args, wddv, wddv_args, wdmd, wdml, wdml_args, wdmm, wdop, wdop_args, wqam, wqcm, wqcm_args, wqdv, wqdv_args, wqmd, wqml, wqml_args, wqmm, wqop, wqop_args, xor, xori };\n", "/**\n * Internal assertion helpers.\n * @module\n */\n\n/** Asserts something is positive integer. */\nfunction anumber(n: number): void {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n}\n\n/** Is number an Uint8Array? Copied from utils for perf. */\nfunction isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n/** Asserts something is Uint8Array. */\nfunction abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n\n/** Hash interface. */\nexport type Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\n\n/** Asserts something is hash */\nfunction ahash(h: Hash): void {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  anumber(h.outputLen);\n  anumber(h.blockLen);\n}\n\n/** Asserts a hash instance has not been destroyed / finished */\nfunction aexists(instance: any, checkFinished = true): void {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\n\n/** Asserts output is properly-sized byte array */\nfunction aoutput(out: any, instance: any): void {\n  abytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error('digestInto() expects output buffer of length at least ' + min);\n  }\n}\n\nexport { anumber, abytes, ahash, aexists, aoutput };\n", "/**\n * Internal webcrypto alias.\n * We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n * See utils.ts for details.\n * @module\n */\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto: any =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n", "/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport function u8(arr: TypedArray): Uint8Array {\n  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\nexport function u32(arr: TypedArray): Uint32Array {\n  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n\n// Cast array to view\nexport function createView(arr: TypedArray): DataView {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word: number, shift: number): number {\n  return (word << (32 - shift)) | (word >>> shift);\n}\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word: number, shift: number): number {\n  return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE: boolean = /* @__PURE__ */ (() =>\n  new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n// The byte swap operation for uint32\nexport function byteSwap(word: number): number {\n  return (\n    ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff)\n  );\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const byteSwapIfBE: (n: number) => number = isLE\n  ? (n: number) => n\n  : (n: number) => byteSwap(n);\n\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr: Uint32Array): void {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * Convert byte array to hex string.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * Convert hex string to byte array.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async (): Promise<void> => {};\n\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(\n  iters: number,\n  tick: number,\n  cb: (i: number) => void\n): Promise<void> {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * Convert JS string to byte array.\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('utf8ToBytes expected string, got ' + typeof str);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n/** Accepted input of hash functions. Strings are converted to byte arrays. */\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n/** For runtime check if class implements interface */\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\n/** Hash function */\nexport type CHash = ReturnType<typeof wrapConstructor>;\n/** Hash function with output */\nexport type CHashO = ReturnType<typeof wrapConstructorWithOpts>;\n/** XOF with output */\nexport type CHashXO = ReturnType<typeof wrapXOFConstructorWithOpts>;\n\n/** Wraps hash function, creating an interface on top of it */\nexport function wrapConstructor<T extends Hash<T>>(\n  hashCons: () => Hash<T>\n): {\n  (msg: Input): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(): Hash<T>;\n} {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts: T): Hash<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts: T): HashXOF<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return crypto.randomBytes(bytesLength);\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { aexists, aoutput } from './_assert.js';\nimport { type Input, Hash, createView, toBytes } from './utils.js';\n\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(\n  view: DataView,\n  byteOffset: number,\n  value: bigint,\n  isLE: boolean\n): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n/** Choice: a ? b : c */\nexport function Chi(a: number, b: number, c: number): number {\n  return (a & b) ^ (~a & c);\n}\n\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a: number, b: number, c: number): number {\n  return (a & b) ^ (a & c) ^ (b & c);\n}\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    aexists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    aoutput(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest(): Uint8Array {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n", "/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj } from './_md.js';\nimport { type CHash, rotr, wrapConstructor } from './utils.js';\n\n/** Round constants: first 32 bits of fractional parts of the cube roots of the first 64 primes 2..311). */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n/** Initial state: first 32 bits of fractional parts of the square roots of the first 8 primes 2..19. */\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n/**\n * Temporary buffer, not used to store anything between runs.\n * Named this way because it matches specification.\n */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  protected A: number = SHA256_IV[0] | 0;\n  protected B: number = SHA256_IV[1] | 0;\n  protected C: number = SHA256_IV[2] | 0;\n  protected D: number = SHA256_IV[3] | 0;\n  protected E: number = SHA256_IV[4] | 0;\n  protected F: number = SHA256_IV[5] | 0;\n  protected G: number = SHA256_IV[6] | 0;\n  protected H: number = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean(): void {\n    SHA256_W.fill(0);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n\n/**\n * Constants taken from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf.\n */\nclass SHA224 extends SHA256 {\n  protected A = 0xc1059ed8 | 0;\n  protected B = 0x367cd507 | 0;\n  protected C = 0x3070dd17 | 0;\n  protected D = 0xf70e5939 | 0;\n  protected E = 0xffc00b31 | 0;\n  protected F = 0x68581511 | 0;\n  protected G = 0x64f98fa7 | 0;\n  protected H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/** SHA2-256 hash function */\nexport const sha256: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/** SHA2-224 hash function */\nexport const sha224: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n", "/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash } from './_assert.js';\nimport { Hash, toBytes, type CHash, type Input } from './utils.js';\n\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    ahash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input): this {\n    aexists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    abytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest(): Uint8Array {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy(): void {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac: {\n  (hash: CHash, key: Input, message: Input): Uint8Array;\n  create(hash: CHash, key: Input): HMAC<any>;\n} = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n", "/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\nexport function abytes(item: unknown): void {\n  if (!isBytes(item)) throw new Error('Uint8Array expected');\n}\n\nexport function abool(title: string, value: boolean): void {\n  if (typeof value !== 'boolean') throw new Error(title + ' boolean expected, got ' + value);\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? '0' + hex : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes(bytes);\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n    }\n  } else if (isBytes(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(title + ' must be hex string or Uint8Array');\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('string expected');\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Is positive bigint\nconst isPosBig = (n: bigint) => typeof n === 'bigint' && _0n <= n;\n\nexport function inRange(n: bigint, min: bigint, max: bigint): boolean {\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title: string, n: bigint, min: bigint, max: bigint): void {\n  // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n  // consider P=256n, min=0n, max=P\n  // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n  // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n  // - our way is the cleanest:               `inRange('x', x, 0n, P)\n  if (!inRange(n, min, max))\n    throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint): number {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number): bigint {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean): bigint {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number): bigint => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any): boolean => typeof val === 'bigint',\n  function: (val: any): boolean => typeof val === 'function',\n  boolean: (val: any): boolean => typeof val === 'boolean',\n  string: (val: any): boolean => typeof val === 'string',\n  stringOrUint8Array: (val: any): boolean => typeof val === 'string' || isBytes(val),\n  isSafeInteger: (val: any): boolean => Number.isSafeInteger(val),\n  array: (val: any): boolean => Array.isArray(val),\n  field: (val: any, object: any): any => (object as any).Fp.isValid(val),\n  hash: (val: any): boolean => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n): T {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function') throw new Error('invalid validator function');\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        'param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n\n/**\n * throws not implemented error\n */\nexport const notImplemented = (): never => {\n  throw new Error('not implemented');\n};\n\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized<T extends object, R, O extends any[]>(\n  fn: (arg: T, ...args: O) => R\n): (arg: T, ...args: O) => R {\n  const map = new WeakMap<T, R>();\n  return (arg: T, ...args: O): R => {\n    const val = map.get(arg);\n    if (val !== undefined) return val;\n    const computed = fn(arg, ...args);\n    map.set(arg, computed);\n    return computed;\n  };\n}\n", "/**\n * Utils for modular division and finite fields.\n * A finite field over 11 is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  bitMask,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesBE,\n  numberToBytesLE,\n  validateObject,\n} from './utils.js';\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _8n = /* @__PURE__ */ BigInt(8);\n// prettier-ignore\nconst _9n =/* @__PURE__ */ BigInt(9), _16n = /* @__PURE__ */ BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @todo use field version && remove\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (modulo <= _0n) throw new Error('invalid modulus');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n) throw new Error('invert: expected non-zero number');\n  if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++) {\n    // Crash instead of infinity loop, we cannot reasonable count until P.\n    if (Z > 1000) throw new Error('Cannot find square root: likely non-prime P');\n  }\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\n/**\n * Square root for a finite field. It will try to check if optimizations are applicable and fall back to 4:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. P ≡ 9 (mod 16)\n * 4. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint): boolean =>\n  (mod(num, modulo) & _1n) === _1n;\n\n/** Field is not always over prime: for example, Fp2 has ORDER(q)=p^m. */\nexport interface IField<T> {\n  ORDER: bigint;\n  isLE: boolean;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>): IField<T> {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n/**\n * Legendre symbol.\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre(order: bigint): <T>(f: IField<T>, x: T) => T {\n  const legendreConst = (order - _1n) / _2n; // Integer arithmetic\n  return <T>(f: IField<T>, x: T): T => f.pow(x, legendreConst);\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>): (x: T) => boolean {\n  const legendre = FpLegendre(f.ORDER);\n  return (x: T): boolean => {\n    const p = legendre(f, x);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(\n  n: bigint,\n  nBitLength?: number\n): {\n  nBitLength: number;\n  nByteLength: number;\n} {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n  let sqrtP: ReturnType<typeof FpSqrt>; // cached sqrtP\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    isLE,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error('invalid field element: expected bigint, got ' + typeof num);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt:\n      redef.sqrt ||\n      ((n) => {\n        if (!sqrtP) sqrtP = FpSqrt(ORDER);\n        return sqrtP(f, n);\n      }),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(\n      'hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen\n    );\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n  const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n", "/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { type IField, nLength, validateField } from './modular.js';\nimport { bitLen, validateObject } from './utils.js';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\nfunction constTimeNegate<T extends Group<T>>(condition: boolean, item: T): T {\n  const neg = item.negate();\n  return condition ? neg : item;\n}\n\nfunction validateW(W: number, bits: number) {\n  if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n    throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\n\nfunction calcWOpts(W: number, bits: number) {\n  validateW(W, bits);\n  const windows = Math.ceil(bits / W) + 1; // +1, because\n  const windowSize = 2 ** (W - 1); // -1 because we skip zero\n  return { windows, windowSize };\n}\n\nfunction validateMSMPoints(points: any[], c: any) {\n  if (!Array.isArray(points)) throw new Error('array expected');\n  points.forEach((p, i) => {\n    if (!(p instanceof c)) throw new Error('invalid point at index ' + i);\n  });\n}\nfunction validateMSMScalars(scalars: any[], field: any) {\n  if (!Array.isArray(scalars)) throw new Error('array of scalars expected');\n  scalars.forEach((s, i) => {\n    if (!field.isValid(s)) throw new Error('invalid scalar at index ' + i);\n  });\n}\n\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes\nconst pointPrecomputes = new WeakMap<any, any[]>();\nconst pointWindowSizes = new WeakMap<any, number>(); // This allows use make points immutable (nothing changes inside)\n\nfunction getW(P: any): number {\n  return pointWindowSizes.get(P) || 1;\n}\n\nexport type IWNAF<T extends Group<T>> = {\n  constTimeNegate: <T extends Group<T>>(condition: boolean, item: T) => T;\n  hasPrecomputes(elm: T): boolean;\n  unsafeLadder(elm: T, n: bigint, p?: T): T;\n  precomputeWindow(elm: T, W: number): Group<T>[];\n  wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T };\n  wNAFUnsafe(W: number, precomputes: T[], n: bigint, acc?: T): T;\n  getPrecomputes(W: number, P: T, transform: Mapper<T>): T[];\n  wNAFCached(P: T, n: bigint, transform: Mapper<T>): { p: T; f: T };\n  wNAFCachedUnsafe(P: T, n: bigint, transform: Mapper<T>, prev?: T): T;\n  setWindowSize(P: T, W: number): void;\n};\n\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number): IWNAF<T> {\n  return {\n    constTimeNegate,\n\n    hasPrecomputes(elm: T) {\n      return getW(elm) !== 1;\n    },\n\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint, p = c.ZERO) {\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @param elm Point instance\n     * @param W window size\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = calcWOpts(W, bits);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = calcWOpts(W, bits);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    /**\n     * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @param acc accumulator point to add result of multiplication\n     * @returns point\n     */\n    wNAFUnsafe(W: number, precomputes: T[], n: bigint, acc: T = c.ZERO): T {\n      const { windows, windowSize } = calcWOpts(W, bits);\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        if (n === _0n) break; // No need to go over empty scalar\n        // Extract W bits.\n        let wbits = Number(n & mask);\n        // Shift number by W bits.\n        n >>= shiftBy;\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n        if (wbits === 0) continue;\n        let curr = precomputes[offset + Math.abs(wbits) - 1]; // -1 because we skip zero\n        if (wbits < 0) curr = curr.negate();\n        // NOTE: by re-using acc, we can save a lot of additions in case of MSM\n        acc = acc.add(curr);\n      }\n      return acc;\n    },\n\n    getPrecomputes(W: number, P: T, transform: Mapper<T>): T[] {\n      // Calculate precomputes on a first run, reuse them after\n      let comp = pointPrecomputes.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) pointPrecomputes.set(P, transform(comp));\n      }\n      return comp;\n    },\n\n    wNAFCached(P: T, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      const W = getW(P);\n      return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n    },\n\n    wNAFCachedUnsafe(P: T, n: bigint, transform: Mapper<T>, prev?: T): T {\n      const W = getW(P);\n      if (W === 1) return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n      return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n    },\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n\n    setWindowSize(P: T, W: number) {\n      validateW(W, bits);\n      pointWindowSizes.set(P, W);\n      pointPrecomputes.delete(P);\n    },\n  };\n}\n\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster with precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  fieldN: IField<bigint>,\n  points: T[],\n  scalars: bigint[]\n): T {\n  // If we split scalars by some window (let's say 8 bits), every chunk will only\n  // take 256 buckets even if there are 4096 scalars, also re-uses double.\n  // TODO:\n  // - https://eprint.iacr.org/2024/750.pdf\n  // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n  // 0 is accepted in scalars\n  validateMSMPoints(points, c);\n  validateMSMScalars(scalars, fieldN);\n  if (points.length !== scalars.length)\n    throw new Error('arrays of points and scalars must have equal length');\n  const zero = c.ZERO;\n  const wbits = bitLen(BigInt(points.length));\n  const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits\n  const MASK = (1 << windowSize) - 1;\n  const buckets = new Array(MASK + 1).fill(zero); // +1 for zero array\n  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n  let sum = zero;\n  for (let i = lastBits; i >= 0; i -= windowSize) {\n    buckets.fill(zero);\n    for (let j = 0; j < scalars.length; j++) {\n      const scalar = scalars[j];\n      const wbits = Number((scalar >> BigInt(i)) & BigInt(MASK));\n      buckets[wbits] = buckets[wbits].add(points[j]);\n    }\n    let resI = zero; // not using this will do small speed-up, but will lose ct\n    // Skip first bucket, because it is zero\n    for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n      sumI = sumI.add(buckets[j]);\n      resI = resI.add(sumI);\n    }\n    sum = sum.add(resI);\n    if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\n  }\n  return sum as T;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  fieldN: IField<bigint>,\n  points: T[],\n  windowSize: number\n): (scalars: bigint[]) => T {\n  /**\n   * Performance Analysis of Window-based Precomputation\n   *\n   * Base Case (256-bit scalar, 8-bit window):\n   * - Standard precomputation requires:\n   *   - 31 additions per scalar × 256 scalars = 7,936 ops\n   *   - Plus 255 summary additions = 8,191 total ops\n   *   Note: Summary additions can be optimized via accumulator\n   *\n   * Chunked Precomputation Analysis:\n   * - Using 32 chunks requires:\n   *   - 255 additions per chunk\n   *   - 256 doublings\n   *   - Total: (255 × 32) + 256 = 8,416 ops\n   *\n   * Memory Usage Comparison:\n   * Window Size | Standard Points | Chunked Points\n   * ------------|-----------------|---------------\n   *     4-bit   |     520         |      15\n   *     8-bit   |    4,224        |     255\n   *    10-bit   |   13,824        |   1,023\n   *    16-bit   |  557,056        |  65,535\n   *\n   * Key Advantages:\n   * 1. Enables larger window sizes due to reduced memory overhead\n   * 2. More efficient for smaller scalar counts:\n   *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n   *    - ~2x faster than standard 8,191 ops\n   *\n   * Limitations:\n   * - Not suitable for plain precomputes (requires 256 constant doublings)\n   * - Performance degrades with larger scalar counts:\n   *   - Optimal for ~256 scalars\n   *   - Less efficient for 4096+ scalars (Pippenger preferred)\n   */\n  validateW(windowSize, fieldN.BITS);\n  validateMSMPoints(points, c);\n  const zero = c.ZERO;\n  const tableSize = 2 ** windowSize - 1; // table size (without zero)\n  const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n  const MASK = BigInt((1 << windowSize) - 1);\n  const tables = points.map((p: T) => {\n    const res = [];\n    for (let i = 0, acc = p; i < tableSize; i++) {\n      res.push(acc);\n      acc = acc.add(p);\n    }\n    return res;\n  });\n  return (scalars: bigint[]): T => {\n    validateMSMScalars(scalars, fieldN);\n    if (scalars.length > points.length)\n      throw new Error('array of scalars must be smaller than array of points');\n    let res = zero;\n    for (let i = 0; i < chunks; i++) {\n      // No need to double if accumulator is still zero.\n      if (res !== zero) for (let j = 0; j < windowSize; j++) res = res.double();\n      const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n      for (let j = 0; j < scalars.length; j++) {\n        const n = scalars[j];\n        const curr = Number((n >> shiftBy) & MASK);\n        if (!curr) continue; // skip zero scalars chunks\n        res = res.add(tables[j][curr - 1]);\n      }\n    }\n    return res;\n  };\n}\n\n/**\n * Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n * Though generator can be different (Fp2 / Fp6 for BLS).\n */\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(\n  curve: BasicCurve<FP> & T\n): Readonly<\n  {\n    readonly nBitLength: number;\n    readonly nByteLength: number;\n  } & BasicCurve<FP> &\n    T & {\n      p: bigint;\n    }\n> {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n", "/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  type AffinePoint,\n  type BasicCurve,\n  type Group,\n  type GroupConstructor,\n  pippenger,\n  validateBasic,\n  wNAF,\n} from './curve.js';\nimport {\n  Field,\n  type IField,\n  getMinHashLength,\n  invert,\n  mapHashToField,\n  mod,\n  validateField,\n} from './modular.js';\nimport * as ut from './utils.js';\nimport { type CHash, type Hex, type PrivKey, abool, ensureBytes, memoized } from './utils.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | boolean;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean; format?: 'compact' | 'der' | undefined };\n\nfunction validateSigVerOpts(opts: SignOpts | VerOpts) {\n  if (opts.lowS !== undefined) abool('lowS', opts.lowS);\n  if (opts.prehash !== undefined) abool('prehash', opts.prehash);\n}\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n  msm(points: ProjPointType<T>[], scalars: bigint[]): ProjPointType<T>;\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nexport type CurvePointsTypeWithLength<T> = Readonly<\n  CurvePointsType<T> & { nByteLength: number; nBitLength: number }\n>;\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>): CurvePointsTypeWithLength<T> {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('invalid endomorphism, can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('invalid endomorphism, expected beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  CURVE: ReturnType<typeof validatePointOpts<T>>;\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\n\nexport class DERErr extends Error {\n  constructor(m = '') {\n    super(m);\n  }\n}\nexport type IDER = {\n  // asn.1 DER encoding utils\n  Err: typeof DERErr;\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string) => string;\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array };\n  };\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string;\n    decode(data: Uint8Array): bigint;\n  };\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint };\n  hexFromSig(sig: { r: bigint; s: bigint }): string;\n};\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER: IDER = {\n  // asn.1 DER encoding utils\n  Err: DERErr,\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string): string => {\n      const { Err: E } = DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = ut.numberToHexUnpadded(dataLen);\n      if ((len.length / 2) & 0b1000_0000) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? ut.numberToHexUnpadded((len.length / 2) | 0b1000_0000) : '';\n      const t = ut.numberToHexUnpadded(tag);\n      return t + lenLen + len + data;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array } {\n      const { Err: E } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 0b1000_0000); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;\n      else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 0b0111_1111;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = (length << 8) | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return { v, l: data.subarray(pos + length) };\n    },\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string {\n      const { Err: E } = DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = ut.numberToHexUnpadded(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n      return hex;\n    },\n    decode(data: Uint8Array): bigint {\n      const { Err: E } = DER;\n      if (data[0] & 0b1000_0000) throw new E('invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 0b1000_0000))\n        throw new E('invalid signature integer: unnecessary leading zero');\n      return b2n(data);\n    },\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E, _int: int, _tlv: tlv } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    ut.abytes(data);\n    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n    const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    return { r: int.decode(rBytes), s: int.decode(sBytes) };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    const { _tlv: tlv, _int: int } = DER;\n    const rs = tlv.encode(0x02, int.encode(sig.r));\n    const ss = tlv.encode(0x02, int.encode(sig.s));\n    const seq = rs + ss;\n    return tlv.encode(0x30, seq);\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>): CurvePointsRes<T> {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n  const Fn = Field(CURVE.n, CURVE.nBitLength);\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return ut.inRange(num, _1n, CURVE.n);\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (ut.isBytes(key)) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length))\n        throw new Error('invalid private key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(\n        'invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key\n      );\n    }\n    if (wrapPrivateKey) num = mod(num, N); // disabled by default, enabled for BLS\n    ut.aInRange('private key', num, _1n, N); // num in range [1..N-1]\n    return num;\n  }\n\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (x, y, z) ∋ (x=x/z, y=y/z)\n  const toAffineMemo = memoized((p: Point, iz?: T): AffinePoint<T> => {\n    const { px: x, py: y, pz: z } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(z, Fp.ONE)) return { x, y };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n    const ax = Fp.mul(x, iz);\n    const ay = Fp.mul(y, iz);\n    const zz = Fp.mul(z, iz);\n    if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return { x: ax, y: ay };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = memoized((p: Point) => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is invalid representation of ZERO.\n      if (CURVE.allowInfinityPoint && !Fp.is0(p.py)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const { x, y } = p.toAffine();\n    // Check if x, y are valid field elements\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n    const left = Fp.sqr(y); // y²\n    const right = weierstrassEquation(x); // x³ + ax + b\n    if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(\n      readonly px: T,\n      readonly py: T,\n      readonly pz: T\n    ) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n      Object.freeze(this);\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // Multiscalar Multiplication\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      wnaf.setWindowSize(this, windowSize);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, n, Point.normalizeZ);\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc: bigint): Point {\n      const { endo, n: N } = CURVE;\n      ut.aInRange('scalar', sc, _0n, N);\n      const I = Point.ZERO;\n      if (sc === _0n) return I;\n      if (this.is0() || sc === _1n) return this;\n\n      // Case a: no endomorphism. Case b: has precomputes.\n      if (!endo || wnaf.hasPrecomputes(this))\n        return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n\n      // Case c: endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      const { endo, n: N } = CURVE;\n      ut.aInRange('scalar', scalar, _1n, N);\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      return toAffineMemo(this, iz);\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      abool('isCompressed', isCompressed);\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      abool('isCompressed', isCompressed);\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(\n  curve: CurveType\n): Readonly<CurveType & { nByteLength: number; nBitLength: number }> {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      abool('isCompressed', isCompressed);\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!ut.inRange(x, _1n, Fp.ORDER)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y: bigint;\n        try {\n          y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        } catch (sqrtError) {\n          const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n          throw new Error('Point is not on curve' + suffix);\n        }\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        const cl = compressedLen;\n        const ul = uncompressedLen;\n        throw new Error(\n          'invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(\n      readonly r: bigint,\n      readonly s: bigint,\n      readonly recovery?: number\n    ) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      ut.aInRange('r', this.r, _1n, CURVE_ORDER); // r in [1..N]\n      ut.aInRange('s', this.s, _1n, CURVE_ORDER); // s in [1..N]\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = getMinHashLength(CURVE.n);\n      return mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = ut.isBytes(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // Our custom check \"just in case\"\n      if (bytes.length > 8192) throw new Error('input is too large');\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    ut.aInRange('num < 2^' + CURVE.nBitLength, num, _0n, ORDER_MASK);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n  // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    validateSigVerOpts(opts);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    const { lowS, prehash, format } = opts;\n\n    // Verify opts, deduce signature format\n    validateSigVerOpts(opts);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    if (format !== undefined && format !== 'compact' && format !== 'der')\n      throw new Error('format must be compact or der');\n    const isHex = typeof sg === 'string' || ut.isBytes(sg);\n    const isObj =\n      !isHex &&\n      !format &&\n      typeof sg === 'object' &&\n      sg !== null &&\n      typeof sg.r === 'bigint' &&\n      typeof sg.s === 'bigint';\n    if (!isHex && !isObj)\n      throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (isObj) _sig = new Signature(sg.r, sg.s);\n      if (isHex) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          if (format !== 'compact') _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n        }\n        if (!_sig && format !== 'der') _sig = Signature.fromCompact(sg);\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      return false;\n    }\n    if (!_sig) return false;\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(\n  Fp: IField<T>,\n  Z: T\n): (u: T, v: T) => { isValid: boolean; value: T } {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n): (u: T) => { x: T; y: T } {\n  validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n", "/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport type { CHash } from './abstract/utils.js';\nimport { type CurveFn, type CurveType, weierstrass } from './abstract/weierstrass.js';\n\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash: CHash): {\n  hash: CHash;\n  hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => Uint8Array;\n  randomBytes: typeof randomBytes;\n} {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n/** Same API as @noble/hashes, with ability to create curve with custom hash */\nexport type CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport type CurveFnWithCreate = CurveFn & { create: (hash: CHash) => CurveFn };\n\nexport function createCurve(curveDef: CurveDef, defHash: CHash): CurveFnWithCreate {\n  const create = (hash: CHash): CurveFn => weierstrass({ ...curveDef, ...getHash(hash) });\n  return { ...create(defHash), create };\n}\n", "/**\n * hash-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380).\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { AffinePoint, Group, GroupConstructor } from './curve.js';\nimport { type IField, mod } from './modular.js';\nimport type { CHash } from './utils.js';\nimport { abytes, bytesToNumberBE, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n\nexport type UnicodeOrBytes = string | Uint8Array;\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\nexport type Opts = {\n  DST: UnicodeOrBytes;\n  p: bigint;\n  m: number;\n  k: number;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  anum(value);\n  anum(length);\n  if (value < 0 || value >= 1 << (8 * length)) throw new Error('invalid I2OSP input: ' + value);\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction anum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n/**\n * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.\n * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).\n */\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (lenInBytes > 65535 || ell > 255) throw new Error('expand_message_xmd: invalid lenInBytes');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\n/**\n * Produces a uniformly random byte string using an extendable-output function (XOF) H.\n * 1. The collision resistance of H MUST be at least k bits.\n * 2. H MUST be an XOF that has been proved indifferentiable from\n *    a random oracle under a reasonable cryptographic assumption.\n * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).\n */\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\n  validateObject(options, {\n    DST: 'stringOrUint8Array',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  abytes(msg);\n  anum(count);\n  const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport type XY<T> = (\n  x: T,\n  y: T\n) => {\n  x: T;\n  y: T;\n};\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]): XY<T> {\n  // Make same order as in spec\n  const COEFF = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return { x: x, y: y };\n  };\n}\n\n/** Point interface, which curves must implement to work correctly with the module. */\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\nexport type HTFMethod<T> = (msg: Uint8Array, options?: htfBasicOpts) => H2CPoint<T>;\nexport type MapMethod<T> = (scalars: bigint[]) => H2CPoint<T>;\n\n/** Creates hash-to-curve methods from EC Point and mapToCurve function. */\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  def: Opts & { encodeDST?: UnicodeOrBytes }\n): {\n  hashToCurve: HTFMethod<T>;\n  encodeToCurve: HTFMethod<T>;\n  mapToCurve: MapMethod<T>;\n} {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve.\n    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts): H2CPoint<T> {\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n\n    // Encodes byte string to elliptic curve.\n    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts): H2CPoint<T> {\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n    // Same as encodeToCurve, but without hash\n    mapToCurve(scalars: bigint[]): H2CPoint<T> {\n      if (!Array.isArray(scalars)) throw new Error('mapToCurve: expected array of bigints');\n      for (const i of scalars)\n        if (typeof i !== 'bigint') throw new Error('mapToCurve: expected array of bigints');\n      const P = Point.fromAffine(mapToCurve(scalars)).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n  };\n}\n", "/**\n * NIST secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Seems to be rigid (not backdoored)\n * [as per discussion](https://bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975).\n *\n * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n * [See explanation](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.js';\nimport { createHasher, type HTFMethod, isogenyMap } from './abstract/hash-to-curve.js';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport {\n  aInRange,\n  bytesToNumberBE,\n  concatBytes,\n  ensureBytes,\n  inRange,\n  numberToBytesBE,\n} from './abstract/utils.js';\nimport { mapToCurveSimpleSWU, type ProjPointType as PointType } from './abstract/weierstrass.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fpk1 = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\n/**\n * secp256k1 short weierstrass curve and ECDSA signatures over it.\n *\n * @example\n * import { secp256k1 } from '@noble/curves/secp256k1';\n *\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n */\nexport const secp256k1: CurveFnWithCreate = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7),\n    Fp: Fpk1, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n      // Endomorphism, see above\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!inRange(r, _1n, secp256k1P)) return false;\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!inRange(s, _1n, secp256k1N)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport type SecpSchnorr = {\n  getPublicKey: typeof schnorrGetPublicKey;\n  sign: typeof schnorrSign;\n  verify: typeof schnorrVerify;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    lift_x: typeof lift_x;\n    pointToBytes: (point: PointType<bigint>) => Uint8Array;\n    numberToBytesBE: typeof numberToBytesBE;\n    bytesToNumberBE: typeof bytesToNumberBE;\n    taggedHash: typeof taggedHash;\n    mod: typeof mod;\n  };\n};\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n */\nexport const schnorr: SecpSchnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fpk1,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fpk1.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\n\n/** secp256k1 hash-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const hashToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() => htf.hashToCurve)();\n\n/** secp256k1 encode-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const encodeToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() => htf.encodeToCurve)();\n", "export const CHAIN_IDS = {\n  eth: {\n    mainnet: 1,\n    sepolia: 11155111,\n    foundry: 31337,\n  },\n  fuel: {\n    devnet: 0,\n    testnet: 0,\n    mainnet: 9889,\n  },\n};\n", "import { CHAIN_IDS } from '../../providers/chains';\nimport type { Asset, AssetEth, AssetFuel, NetworkEthereum, NetworkFuel } from '../types';\n\ntype Network = NetworkEthereum | NetworkFuel;\nexport type NetworkTypes = NetworkEthereum['type'] | NetworkFuel['type'];\ntype NetworkTypeToNetwork<T> = T extends 'ethereum'\n  ? NetworkEthereum\n  : T extends 'fuel'\n    ? NetworkFuel\n    : Network;\n\n/**\n * Returns the default chainId for the given network\n */\nexport const getDefaultChainId = (networkType: NetworkTypes): number | undefined => {\n  if (networkType === 'ethereum') {\n    return CHAIN_IDS.eth.sepolia;\n  }\n  if (networkType === 'fuel') {\n    return CHAIN_IDS.fuel.testnet;\n  }\n\n  return undefined;\n};\n\nexport type GetAssetNetworkParams<T extends NetworkTypes | undefined> = {\n  asset: Asset;\n  chainId?: number;\n  networkType: T;\n};\n\n/**\n * Returns the asset's network on the given network\n * eg. getAssetNetwork({ asset, chainId: 1, networkType: 'ethereum' }) will return the asset's details on Ethereum mainnet\n */\nexport const getAssetNetwork = <T extends NetworkTypes | undefined>({\n  asset,\n  chainId,\n  networkType,\n}: GetAssetNetworkParams<T>): NetworkTypeToNetwork<T> => {\n  const network = asset.networks.find(\n    (item) => item.chainId === chainId && item.type === networkType\n  ) as NetworkTypeToNetwork<T>;\n\n  return network;\n};\n\n/**\n * Returns the asset's details on the given network along with the asset itself\n * eg. getAssetWithNetwork({ asset, chainId: 1, networkType: 'ethereum' }) will return the asset's details on Ethereum mainnet and the asset itself\n */\nexport const getAssetWithNetwork = <T extends NetworkTypes>({\n  asset,\n  chainId,\n  networkType,\n}: GetAssetNetworkParams<T>): AssetEth | AssetFuel | undefined => {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  const { networks: _, ...assetRest } = asset;\n\n  const chainIdToUse = chainId ?? getDefaultChainId(networkType);\n  // use two equals(==) cuz we wan't to keep 0 as a valid chainId\n  if (chainIdToUse === undefined) {\n    return undefined;\n  }\n\n  const assetNetwork = getAssetNetwork({\n    asset,\n    chainId: chainIdToUse,\n    networkType,\n  });\n\n  if (!assetNetwork) {\n    return undefined;\n  }\n\n  return {\n    ...assetRest,\n    ...assetNetwork,\n  };\n};\n\n/**\n * Returns the asset's details on Ethereum\n */\nexport const getAssetEth = (asset: Asset, chainId?: number): AssetEth | undefined =>\n  getAssetWithNetwork({\n    asset,\n    networkType: 'ethereum',\n    chainId,\n  }) as AssetEth;\n\n/**\n * Returns the asset's details on Fuel\n */\nexport const getAssetFuel = (asset: Asset, chainId?: number): AssetFuel | undefined =>\n  getAssetWithNetwork({\n    asset,\n    networkType: 'fuel',\n    chainId,\n  }) as AssetFuel;\n", "const DELIMITER_PATH = '/';\nconst trimRegex = /^\\/|\\/$/g;\nconst trimPath = (path = '') => path.replace(trimRegex, '');\n\nexport function urlJoin(baseUrl: string | undefined, ...paths: Array<string>): string {\n  const hasBaseUrl = baseUrl !== null && baseUrl !== undefined;\n  const rootPath = baseUrl?.[0] === '/' && baseUrl.length > 1;\n  const allPaths = [baseUrl, ...paths].filter(Boolean).map(trimPath);\n  if (rootPath && hasBaseUrl) {\n    allPaths.unshift('');\n  }\n  return allPaths.join(DELIMITER_PATH);\n}\n", "import type { Assets } from '../types';\n\nimport { urlJoin } from './url';\n\n/**\n * Returns the list of assets with the icon paths 'resolved'. eg. `./eth.svg` -> `https://some-url.com/eth.svg`\n * @param assets - List of assets\n * @param basePath - Base path for the icon URLs (default: './')\n * @returns The assets with the icon paths resolved\n */\nexport function resolveIconPaths(assets: Assets, basePath: string = './') {\n  return assets.map((asset) => ({\n    ...asset,\n    icon: urlJoin(basePath, asset.icon),\n  }));\n}\n", "export const fuelAssetsBaseUrl = 'https://assets.fuel.network/providers/'\n", "import { CHAIN_IDS } from '../providers/chains';\n\nimport type { Assets } from './types';\nimport { resolveIconPaths, fuelAssetsBaseUrl } from './utils';\n\nexport const rawAssets: Assets = [\n  {\n    name: 'Ethereum',\n    symbol: 'ETH',\n    icon: 'eth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.sepolia,\n        decimals: 18,\n      },\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.foundry,\n        decimals: 18,\n      },\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.devnet,\n        decimals: 9,\n        assetId: '0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07',\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.testnet,\n        decimals: 9,\n        assetId: '0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07',\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        decimals: 9,\n        assetId: '0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07',\n      },\n    ],\n  },\n  {\n    name: 'WETH',\n    symbol: 'WETH',\n    icon: 'weth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0xa38a5a8beeb08d95744bc7f58528073f4052b254def59eba20c99c202b5acaa3',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'weETH',\n    symbol: 'weETH',\n    icon: 'weETH.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x239ed6e12b7ce4089ee245244e3bf906999a6429c2a9a445a1e1faf56914a4ab',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'rsETH',\n    symbol: 'rsETH',\n    icon: 'rsETH.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0xbae80f7fb8aa6b90d9b01ef726ec847cc4f59419c4d5f2ea88fec785d1b0e849',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'rETH',\n    symbol: 'rETH',\n    icon: 'reth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xae78736cd615f374d3085123a210448e74fc6393',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0xf3f9a0ed0ce8eac5f89d6b83e41b3848212d5b5f56108c54a205bb228ca30c16',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'wbETH',\n    symbol: 'wbETH',\n    icon: 'wbeth.png',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xa2E3356610840701BDf5611a53974510Ae27E2e1',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x7843c74bef935e837f2bcf67b5d64ecb46dd53ff86375530b0caf3699e8ffafe',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'rstETH',\n    symbol: 'rstETH',\n    icon: 'rstETH.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x7a4EffD87C2f3C55CA251080b1343b605f327E3a',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x962792286fbc9b1d5860b4551362a12249362c21594c77abf4b3fe2bbe8d977a',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'amphrETH',\n    symbol: 'amphrETH',\n    icon: 'amphrETH.png',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x5fD13359Ba15A84B76f7F87568309040176167cd',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x05fc623e57bd7bc1258efa8e4f62b05af5471d73df6f2c2dc11ecc81134c4f36',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'Manta mBTC',\n    symbol: 'Manta mBTC',\n    icon: 'manta-mbtc.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x4041381e947CFD3D483d67a25C6aa9Dc924250c5',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0xaf3111a248ff7a3238cdeea845bb2d43cf3835f1f6b8c9d28360728b55b9ce5b',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'Manta mETH',\n    symbol: 'Manta mETH',\n    icon: 'manta-meth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x8CdF550C04Bc9B9F10938368349C9c8051A772b6',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0xafd219f513317b1750783c6581f55530d6cf189a5863fd18bd1b3ffcec1714b4',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'Manta mUSD',\n    symbol: 'Manta mUSD',\n    icon: 'manta-musd.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x3f24E1d7a973867fC2A03fE199E5502514E0e11E',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x89cb9401e55d49c3269654dd1cdfb0e80e57823a4a7db98ba8fc5953b120fef4',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'pumpBTC',\n    symbol: 'pumpBTC',\n    icon: 'pumpbtc.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xf469fbd2abcd6b9de8e169d128226c0fc90a012e',\n        decimals: 8,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x0aa5eb2bb97ca915288b653a2529355d4dc66de2b37533213f0e4aeee3d3421f',\n        decimals: 8,\n      },\n    ],\n  },\n  {\n    name: 'FBTC',\n    symbol: 'FBTC',\n    icon: 'fbtc.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xc96de26018a54d51c097160568752c4e3bd6c364',\n        decimals: 8,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0xb5ecb0a1e08e2abbabf624ffea089df933376855f468ade35c6375b00c33996a',\n        decimals: 8,\n      },\n    ],\n  },\n  {\n    name: 'SolvBTC',\n    symbol: 'SolvBTC',\n    icon: 'solvBTC.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x7a56e1c57c7475ccf742a1832b028f0456652f97',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x1186afea9affb88809c210e13e2330b5258c2cef04bb8fff5eff372b7bd3f40f',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'SolvBTC.BBN',\n    symbol: 'SolvBTC.BBN',\n    icon: 'SolvBTC.BBN.png',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xd9d920aa40f578ab794426f5c90f6c731d159def',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x7a4f087c957d30218223c2baaaa365355c9ca81b6ea49004cfb1590a5399216f',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'Mantle mETH',\n    symbol: 'Mantle mETH',\n    icon: 'mantle-meth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xd5F7838F5C461fefF7FE49ea5ebaF7728bB0ADfa',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x642a5db59ec323c2f846d4d4cf3e58d78aff64accf4f8f6455ba0aa3ef000a3b',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'sDAI',\n    symbol: 'sDAI',\n    icon: 'sdai.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x83f20f44975d03b1b09e64809b757c47f942beea',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x9e46f919fbf978f3cad7cd34cca982d5613af63ff8aab6c379e4faa179552958',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'USDT',\n    symbol: 'USDT',\n    icon: 'usdt.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n        decimals: 6,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0xa0265fb5c32f6e8db3197af3c7eb05c48ae373605b8165b6f4a51c5b0ba4812e',\n        decimals: 6,\n      },\n    ],\n  },\n  {\n    name: 'USDC',\n    symbol: 'USDC',\n    icon: 'usdc.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n        decimals: 6,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x286c479da40dc953bddc3bb4c453b608bba2e0ac483b077bd475174115395e6b',\n        decimals: 6,\n      },\n    ],\n  },\n  {\n    name: 'USDe',\n    symbol: 'USDe',\n    icon: 'USDe.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x4c9edd5852cd905f086c759e8383e09bff1e68b3',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0xb6133b2ef9f6153eb869125d23dcf20d1e735331b5e41b15a6a7a6cec70e8651',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'sUSDe',\n    symbol: 'sUSDe',\n    icon: 'sUSDe.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x9d39a5de30e57443bff2a8307a4256c8797a3497',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0xd05563025104fc36496c15c7021ad6b31034b0e89a356f4f818045d1f48808bc',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'rsUSDe',\n    symbol: 'rsUSDe',\n    icon: 'rsUSDe.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x82f5104b23FF2FA54C2345F821dAc9369e9E0B26',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x78d4522ec607f6e8efb66ea49439d1ee48623cf763f9688a8eada025def033d9',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'wstETH',\n    symbol: 'wstETH',\n    icon: 'wsteth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x1a7815cc9f75db5c24a5b0814bfb706bb9fe485333e98254015de8f48f84c67b',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'ezETH',\n    symbol: 'ezETH',\n    icon: 'ezeth.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xbf5495Efe5DB9ce00f80364C8B423567e58d2110',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x91b3559edb2619cde8ffb2aa7b3c3be97efd794ea46700db7092abeee62281b0',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'pzETH',\n    symbol: 'pzETH',\n    icon: 'pzETH.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x8c9532a60e0e7c6bbd2b2c1303f63ace1c3e9811',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x1493d4ec82124de8f9b625682de69dcccda79e882b89a55a8c737b12de67bd68',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'Re7LRT',\n    symbol: 'Re7LRT',\n    icon: 'Re7LRT.png',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x84631c0d0081FDe56DeB72F6DE77abBbF6A9f93a',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0xf2fc648c23a5db24610a1cf696acc4f0f6d9a7d6028dd9944964ab23f6e35995',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'steakLRT',\n    symbol: 'steakLRT',\n    icon: 'steakLRT.png',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xBEEF69Ac7870777598A04B2bd4771c71212E6aBc',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x4fc8ac9f101df07e2c2dec4a53c8c42c439bdbe5e36ea2d863a61ff60afafc30',\n        decimals: 9,\n      },\n    ],\n  },\n];\n\nexport const assets = resolveIconPaths(rawAssets, fuelAssetsBaseUrl);\n", "import { B256Address } from \"@fuel-ts/address\";\nimport { NetworkEthereum, NetworkFuel } from \"./types\";\n\nconst networks = {\n  mainnet: 'https://mainnet-explorer.fuel.network',\n  testnet: 'https://explorer-indexer-testnet.fuel.network',\n} as const;\n\nexport interface AssetPaginationOptions {\n  last: number;\n}\n\nexport interface AssetPageInfo {\n  count: number;\n}\n\nconst request = async <TResponse>(url: string, slug: string): Promise<TResponse | null> => {\n  const response = await fetch(`${url}${slug}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n    }\n  });\n\n  try {\n    return await response.json() satisfies TResponse;\n  } catch (error) {\n    // The API returns a 200 status code but the response is not valid JSON\n    return null;\n  }\n};\n\nconst buildQueryString = (parameters: Record<string, string | { toString: () => string }>) => {\n  const query = new URLSearchParams();\n  Object.entries(parameters).forEach(([key, value]) => {\n    query.set(key, value.toString());\n  });\n  return query.size > 0 ? `?${query.toString()}` : '';\n};\n\nexport interface AssetInfo {\n  assetId: string;\n  contractId?: string;\n  subId?: string;\n  name: string;\n  symbol: string;\n  decimals: number;\n  suspicious: boolean;\n  verified: boolean;\n  totalSupply?: string;\n  networks?: (NetworkEthereum | NetworkFuel)[];\n  rate?: number;\n  icon?: string;\n  owner?: string;\n  amount?: string;\n  amountInUsd?: string;\n  uri?: string;\n  metadata: Record<string, string>;\n  collection?: string;\n  isNFT?: boolean;\n}\n\n/**\n * Get information about any asset (including NFTs)\n *\n * @param opts - The options for the request\n * @param opts.network {'mainnet' | 'testnet'} - The network to use (default: `mainnet`)\n * @param opts.assetId {string} - The ID of the asset to get information about\n * @returns {Promise<AssetInfo>} - The information about the asset\n *\n * @see {@link https://github.com/FuelLabs/fuel-explorer/wiki/Assets-API#instructions-for-consuming-assets-data-from-indexer-api}\n */\nexport const getAssetById = (opts: {\n  assetId: B256Address;\n  network?: keyof typeof networks;\n}): Promise<AssetInfo | null> => {\n  const { network = 'mainnet', assetId } = opts;\n  const url = networks[network];\n  return request<AssetInfo>(url, `/assets/${assetId}`);\n};\n\nexport interface AssetsByOwner {\n  data: AssetInfo[];\n  pageInfo: AssetPageInfo;\n}\n\n/**\n * Get assets by owner\n *\n * @param opts - The options for the request\n * @param opts.owner {B256Address} - The owner of the assets\n * @param opts.network {'mainnet' | 'testnet'} - The network to use (default: `mainnet`)\n * @param opts.pagination {AssetPaginationOptions} - The pagination options (default: 10)\n * @returns {Promise<AssetsByOwnerResponse>} - The assets by owner\n *\n * @see {@link https://github.com/FuelLabs/fuel-explorer/wiki/Assets-API#instructions-for-consuming-assets-data-owned-by-an-account-from-indexer-api}\n */\nexport const getAssetsByOwner = async (opts: {\n  owner: B256Address;\n  network?: keyof typeof networks;\n  pagination?: AssetPaginationOptions;\n}): Promise<AssetsByOwner> => {\n  const { network = 'mainnet', owner, pagination = { last: 10 } } = opts;\n  const url = networks[network];\n  const { last } = pagination;\n  const queryString = buildQueryString({ last });\n  const response = await request<AssetsByOwner>(url, `/accounts/${owner}/assets${queryString}`);\n\n  // If the response is not valid JSON, return an empty array\n  if (!response) {\n    return { data: [], pageInfo: { count: 0 } };\n  }\n\n  return response;\n};", "import { UTXO_ID_LEN } from '@fuel-ts/abi-coder';\nimport type { AddressInput, WithAddress } from '@fuel-ts/address';\nimport { Address } from '@fuel-ts/address';\nimport { randomBytes } from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { HashableMessage } from '@fuel-ts/hasher';\nimport type { BigNumberish, BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport { InputType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify, isDefined } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { FuelConnector, FuelConnectorSendTxParams } from './connectors';\nimport type {\n  TransactionRequest,\n  CoinQuantityLike,\n  CoinQuantity,\n  Resource,\n  ExcludeResourcesOption,\n  Provider,\n  ScriptTransactionRequestLike,\n  TransactionCost,\n  EstimateTransactionParams,\n  CursorPaginationArgs,\n  TransactionRequestLike,\n  CallResult,\n  GetCoinsResponse,\n  GetMessagesResponse,\n  GetBalancesResponse,\n  Coin,\n  TransactionCostParams,\n  TransactionResponse,\n  ProviderSendTxParams,\n  TransactionSummaryJson,\n} from './providers';\nimport {\n  withdrawScript,\n  ScriptTransactionRequest,\n  transactionRequestify,\n  addAmountToCoinQuantities,\n} from './providers';\nimport {\n  cacheRequestInputsResourcesFromOwner,\n  getAssetAmountInRequestInputs,\n  isRequestInputCoin,\n  isRequestInputMessageWithoutData,\n  isRequestInputResource,\n} from './providers/transaction-request/helpers';\nimport { mergeQuantities } from './providers/utils/merge-quantities';\nimport { serializeProviderCache } from './providers/utils/serialization';\nimport { AbstractAccount } from './types';\nimport { assembleTransferToContractScript } from './utils/formatTransferToContractScriptData';\n\nexport type TxParamsType = Pick<\n  ScriptTransactionRequestLike,\n  'gasLimit' | 'tip' | 'maturity' | 'maxFee' | 'witnessLimit' | 'expiration'\n>;\n\nexport type TransferParams = {\n  destination: string | Address;\n  amount: BigNumberish;\n  assetId: BytesLike;\n};\n\nexport type ContractTransferParams = {\n  contractId: string | Address;\n  amount: BigNumberish;\n  assetId: BytesLike;\n};\n\nexport type AccountSendTxParams = ProviderSendTxParams & FuelConnectorSendTxParams;\n\nexport type EstimatedTxParams = Pick<\n  TransactionCost,\n  | 'estimatedPredicates'\n  | 'addedSignatures'\n  | 'requiredQuantities'\n  | 'updateMaxFee'\n  | 'gasPrice'\n  | 'transactionSummary'\n>;\nconst MAX_FUNDING_ATTEMPTS = 5;\n\nexport type FakeResources = Partial<Coin> & Required<Pick<Coin, 'amount' | 'assetId'>>;\n\n/**\n * `Account` provides an abstraction for interacting with accounts or wallets on the network.\n */\nexport class Account extends AbstractAccount implements WithAddress {\n  /**\n   * The address associated with the account.\n   */\n  readonly address: Address;\n\n  /**\n   * The provider used to interact with the network.\n   */\n  protected _provider?: Provider;\n\n  /**\n   * The connector for use with external wallets\n   */\n  protected _connector?: FuelConnector;\n\n  /**\n   * Creates a new Account instance.\n   *\n   * @param address - The address of the account.\n   * @param provider - A Provider instance  (optional).\n   * @param connector - A FuelConnector instance (optional).\n   */\n  constructor(address: AddressInput, provider?: Provider, connector?: FuelConnector) {\n    super();\n    this._provider = provider;\n    this._connector = connector;\n    this.address = new Address(address);\n  }\n\n  /**\n   * The provider used to interact with the network.\n   *\n   * @returns A Provider instance.\n   *\n   * @throws `FuelError` if the provider is not set.\n   */\n  get provider(): Provider {\n    if (!this._provider) {\n      throw new FuelError(ErrorCode.MISSING_PROVIDER, 'Provider not set');\n    }\n\n    return this._provider;\n  }\n\n  /**\n   * Sets the provider for the account.\n   *\n   * @param provider - A Provider instance.\n   */\n  set provider(provider: Provider) {\n    this._provider = provider;\n  }\n\n  /**\n   * Changes the provider connection for the account.\n   *\n   * @param provider - A Provider instance.\n   * @returns The updated Provider instance.\n   */\n  connect(provider: Provider): Provider {\n    this._provider = provider;\n    return this.provider;\n  }\n\n  /**\n   * Retrieves resources satisfying the spend query for the account.\n   *\n   * @param quantities - Quantities of resources to be obtained.\n   * @param excludedIds - IDs of resources to be excluded from the query (optional).\n   * @returns A promise that resolves to an array of Resources.\n   */\n  async getResourcesToSpend(\n    quantities: CoinQuantityLike[],\n    excludedIds?: ExcludeResourcesOption\n  ): Promise<Resource[]> {\n    return this.provider.getResourcesToSpend(this.address, quantities, excludedIds);\n  }\n\n  /**\n   * Retrieves coins owned by the account.\n   *\n   * @param assetId - The asset ID of the coins to retrieve (optional).\n   * @returns A promise that resolves to an array of Coins.\n   */\n  async getCoins(\n    assetId?: BytesLike,\n    paginationArgs?: CursorPaginationArgs\n  ): Promise<GetCoinsResponse> {\n    return this.provider.getCoins(this.address, assetId, paginationArgs);\n  }\n\n  /**\n   * Retrieves messages owned by the account.\n   *\n   * @returns A promise that resolves to an array of Messages.\n   */\n  async getMessages(paginationArgs?: CursorPaginationArgs): Promise<GetMessagesResponse> {\n    return this.provider.getMessages(this.address, paginationArgs);\n  }\n\n  /**\n   * Retrieves the balance of the account for the given asset.\n   *\n   * @param assetId - The asset ID to check the balance for (optional).\n   * @returns A promise that resolves to the balance amount.\n   */\n  async getBalance(assetId?: BytesLike): Promise<BN> {\n    const assetIdToFetch = assetId ?? (await this.provider.getBaseAssetId());\n    const amount = await this.provider.getBalance(this.address, assetIdToFetch);\n    return amount;\n  }\n\n  /**\n   * Retrieves all the balances for the account.\n   *\n   * @returns A promise that resolves to an array of Coins and their quantities.\n   */\n  async getBalances(): Promise<GetBalancesResponse> {\n    return this.provider.getBalances(this.address);\n  }\n\n  /**\n   * Funds a transaction request by adding the necessary resources.\n   *\n   * @typeParam T - The type of the TransactionRequest.\n   * @param request - The transaction request to fund.\n   * @param params - The estimated transaction parameters.\n   * @returns A promise that resolves to the funded transaction request.\n   */\n  async fund<T extends TransactionRequest>(request: T, params: EstimatedTxParams): Promise<T> {\n    const {\n      addedSignatures,\n      estimatedPredicates,\n      requiredQuantities,\n      updateMaxFee,\n      gasPrice,\n      transactionSummary,\n    } = params;\n\n    const chainId = await this.provider.getChainId();\n\n    const fee = request.maxFee;\n    const baseAssetId = await this.provider.getBaseAssetId();\n    const requiredInBaseAsset =\n      requiredQuantities.find((quantity) => quantity.assetId === baseAssetId)?.amount || bn(0);\n\n    const requiredQuantitiesWithFee = addAmountToCoinQuantities({\n      amount: bn(fee),\n      assetId: baseAssetId,\n      coinQuantities: requiredQuantities,\n    });\n\n    const quantitiesDict: Record<string, { required: BN; owned: BN }> = {};\n\n    requiredQuantitiesWithFee.forEach(({ amount, assetId }) => {\n      quantitiesDict[assetId] = {\n        required: amount,\n        owned: bn(0),\n      };\n    });\n\n    request.inputs.filter(isRequestInputResource).forEach((input) => {\n      const isCoin = isRequestInputCoin(input);\n      const assetId = isCoin ? String(input.assetId) : baseAssetId;\n      if (quantitiesDict[assetId]) {\n        quantitiesDict[assetId].owned = quantitiesDict[assetId].owned.add(input.amount);\n      }\n    });\n\n    let missingQuantities: CoinQuantity[] = [];\n    Object.entries(quantitiesDict).forEach(([assetId, { owned, required }]) => {\n      if (owned.lt(required)) {\n        missingQuantities.push({\n          assetId,\n          amount: required.sub(owned),\n        });\n      }\n    });\n\n    let needsToBeFunded = missingQuantities.length > 0;\n    let fundingAttempts = 0;\n    while (needsToBeFunded && fundingAttempts < MAX_FUNDING_ATTEMPTS) {\n      const resources = await this.getResourcesToSpend(\n        missingQuantities,\n        cacheRequestInputsResourcesFromOwner(request.inputs, this.address)\n      );\n\n      request.addResources(resources);\n      request.updatePredicateGasUsed(estimatedPredicates);\n\n      const requestToReestimate = clone(request);\n      if (addedSignatures) {\n        Array.from({ length: addedSignatures }).forEach(() =>\n          requestToReestimate.addEmptyWitness()\n        );\n      }\n\n      if (!updateMaxFee) {\n        needsToBeFunded = false;\n        break;\n      }\n\n      // Recalculate the fee after adding the resources\n      const { maxFee: newFee } = await this.provider.estimateTxGasAndFee({\n        transactionRequest: requestToReestimate,\n        gasPrice,\n      });\n\n      const totalBaseAssetOnInputs = getAssetAmountInRequestInputs(\n        request.inputs.filter(isRequestInputResource),\n        baseAssetId,\n        baseAssetId\n      );\n\n      // Update the new total as the fee will change after adding new resources\n      const totalBaseAssetRequiredWithFee = requiredInBaseAsset.add(newFee);\n\n      if (totalBaseAssetOnInputs.gt(totalBaseAssetRequiredWithFee)) {\n        needsToBeFunded = false;\n      } else {\n        missingQuantities = [\n          {\n            amount: totalBaseAssetRequiredWithFee.sub(totalBaseAssetOnInputs),\n            assetId: baseAssetId,\n          },\n        ];\n      }\n\n      fundingAttempts += 1;\n    }\n\n    // If the transaction still needs to be funded after the maximum number of attempts\n    if (needsToBeFunded) {\n      throw new FuelError(\n        ErrorCode.INSUFFICIENT_FUNDS_OR_MAX_COINS,\n        `The account ${this.address} does not have enough base asset funds to cover the transaction execution.`\n      );\n    }\n\n    request.updateState(chainId, 'funded', transactionSummary);\n\n    await this.provider.validateTransaction(request);\n\n    request.updatePredicateGasUsed(estimatedPredicates);\n\n    const requestToReestimate = clone(request);\n    if (addedSignatures) {\n      Array.from({ length: addedSignatures }).forEach(() => requestToReestimate.addEmptyWitness());\n    }\n\n    if (!updateMaxFee) {\n      return request;\n    }\n\n    const { maxFee } = await this.provider.estimateTxGasAndFee({\n      transactionRequest: requestToReestimate,\n      gasPrice,\n    });\n\n    request.maxFee = maxFee;\n\n    return request;\n  }\n\n  /**\n   * A helper that creates a transfer transaction request and returns it.\n   *\n   * @param destination - The address of the destination.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the prepared transaction request.\n   */\n  async createTransfer(\n    destination: string | Address,\n    amount: BigNumberish,\n    assetId?: BytesLike,\n    txParams: TxParamsType = {}\n  ): Promise<ScriptTransactionRequest> {\n    let request = new ScriptTransactionRequest(txParams);\n\n    request = this.addTransfer(request, {\n      destination,\n      amount,\n      assetId: assetId || (await this.provider.getBaseAssetId()),\n    });\n\n    request = await this.estimateAndFundTransaction(request, txParams);\n\n    return request;\n  }\n\n  /**\n   * Transfers coins to a destination address.\n   *\n   * @param destination - The address of the destination.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async transfer(\n    destination: string | Address,\n    amount: BigNumberish,\n    assetId?: BytesLike,\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    const request = await this.createTransfer(destination, amount, assetId, txParams);\n    return this.sendTransaction(request, { estimateTxDependencies: false });\n  }\n\n  /**\n   * Transfers multiple amounts of a token to multiple recipients.\n   *\n   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.\n   * @param txParams - Optional transaction parameters.\n   * @returns A promise that resolves to a `TransactionResponse` object representing the transaction result.\n   */\n  async batchTransfer(\n    transferParams: TransferParams[],\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    let request = new ScriptTransactionRequest(txParams);\n    request = this.addBatchTransfer(request, transferParams);\n    request = await this.estimateAndFundTransaction(request, txParams);\n    return this.sendTransaction(request, { estimateTxDependencies: false });\n  }\n\n  /**\n   * Adds a transfer to the given transaction request.\n   *\n   * @param request - The script transaction request to add transfers to.\n   * @param transferParams - The object representing the transfer to be made.\n   * @returns The updated transaction request with the added transfer.\n   */\n  addTransfer(request: ScriptTransactionRequest, transferParams: TransferParams) {\n    const { destination, amount, assetId } = transferParams;\n    this.validateTransferAmount(amount);\n    request.addCoinOutput(new Address(destination), amount, assetId);\n    return request;\n  }\n\n  /**\n   * Adds multiple transfers to a script transaction request.\n   *\n   * @param request - The script transaction request to add transfers to.\n   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.\n   * @returns The updated script transaction request.\n   */\n  addBatchTransfer(request: ScriptTransactionRequest, transferParams: TransferParams[]) {\n    transferParams.forEach(({ destination, amount, assetId }) => {\n      this.addTransfer(request, {\n        destination,\n        amount,\n        assetId,\n      });\n    });\n    return request;\n  }\n\n  /**\n   * Transfers coins to a contract address.\n   *\n   * @param contractId - The address of the contract.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async transferToContract(\n    contractId: string | Address,\n    amount: BigNumberish,\n    assetId: BytesLike,\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    return this.batchTransferToContracts([{ amount, assetId, contractId }], txParams);\n  }\n\n  async batchTransferToContracts(\n    contractTransferParams: ContractTransferParams[],\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    let request = new ScriptTransactionRequest({\n      ...txParams,\n    });\n\n    const quantities: CoinQuantity[] = [];\n\n    const defaultAssetId = await this.provider.getBaseAssetId();\n\n    const transferParams = contractTransferParams.map((transferParam) => {\n      const amount = bn(transferParam.amount);\n      const contractAddress = new Address(transferParam.contractId);\n\n      const assetId = transferParam.assetId ? hexlify(transferParam.assetId) : defaultAssetId;\n\n      if (amount.lte(0)) {\n        throw new FuelError(\n          ErrorCode.INVALID_TRANSFER_AMOUNT,\n          'Transfer amount must be a positive number.'\n        );\n      }\n\n      request.addContractInputAndOutput(contractAddress);\n      quantities.push({ amount, assetId });\n\n      return {\n        amount,\n        contractId: contractAddress.toB256(),\n        assetId,\n      };\n    });\n\n    const { script, scriptData } = await assembleTransferToContractScript(transferParams);\n\n    request.script = script;\n    request.scriptData = scriptData;\n\n    request = await this.estimateAndFundTransaction(request, txParams, { quantities });\n\n    return this.sendTransaction(request);\n  }\n\n  /**\n   * Withdraws an amount of the base asset to the base chain.\n   *\n   * @param recipient - Address of the recipient on the base chain.\n   * @param amount - Amount of base asset.\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async withdrawToBaseLayer(\n    recipient: AddressInput,\n    amount: BigNumberish,\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    const recipientAddress = new Address(recipient);\n    // add recipient and amount to the transaction script code\n    const recipientDataArray = arrayify(\n      '0x'.concat(recipientAddress.toHexString().substring(2).padStart(64, '0'))\n    );\n    const amountDataArray = arrayify(\n      '0x'.concat(bn(amount).toHex().substring(2).padStart(16, '0'))\n    );\n    const script = new Uint8Array([\n      ...arrayify(withdrawScript.bytes),\n      ...recipientDataArray,\n      ...amountDataArray,\n    ]);\n\n    const params: ScriptTransactionRequestLike = { script, ...txParams };\n\n    const baseAssetId = await this.provider.getBaseAssetId();\n    let request = new ScriptTransactionRequest(params);\n    const quantities = [{ amount: bn(amount), assetId: baseAssetId }];\n\n    const txCost = await this.getTransactionCost(request, { quantities });\n\n    request = this.validateGasLimitAndMaxFee({\n      transactionRequest: request,\n      gasUsed: txCost.gasUsed,\n      maxFee: txCost.maxFee,\n      txParams,\n    });\n\n    await this.fund(request, txCost);\n\n    return this.sendTransaction(request);\n  }\n\n  /**\n   * Returns a transaction cost to enable user\n   * to set gasLimit and also reserve balance amounts\n   * on the transaction.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param transactionCostParams - The transaction cost parameters (optional).\n   *\n   * @returns A promise that resolves to the transaction cost object.\n   */\n  async getTransactionCost(\n    transactionRequestLike: TransactionRequestLike,\n    { signatureCallback, quantities = [], gasPrice }: TransactionCostParams = {}\n  ): Promise<TransactionCost> {\n    const txRequestClone = clone(transactionRequestify(transactionRequestLike));\n    const baseAssetId = await this.provider.getBaseAssetId();\n\n    // Fund with fake UTXOs to avoid not enough funds error\n    // Getting coin quantities from amounts being transferred\n    const coinOutputsQuantities = txRequestClone.getCoinOutputsQuantities();\n    // Combining coin quantities from amounts being transferred and forwarding to contracts\n    const requiredQuantities = mergeQuantities(coinOutputsQuantities, quantities);\n    // An arbitrary amount of the base asset is added to cover the transaction fee during dry runs\n    const transactionFeeForDryRun = [{ assetId: baseAssetId, amount: bn('100000000000000000') }];\n\n    const findAssetInput = (assetId: string) =>\n      txRequestClone.inputs.find((input) => {\n        if (input.type === InputType.Coin) {\n          return input.assetId === assetId;\n        }\n\n        // We only consider the message input if it has no data.\n        // Messages with `data` cannot fund the gas of a transaction.\n        if (isRequestInputMessageWithoutData(input)) {\n          return baseAssetId === assetId;\n        }\n        return false;\n      });\n\n    const updateAssetInput = (assetId: string, quantity: BN) => {\n      const assetInput = findAssetInput(assetId);\n      const usedQuantity = quantity;\n\n      if (assetInput && 'amount' in assetInput) {\n        assetInput.amount = usedQuantity;\n      } else {\n        txRequestClone.addResources(\n          this.generateFakeResources([\n            {\n              amount: quantity,\n              assetId,\n            },\n          ])\n        );\n      }\n    };\n\n    mergeQuantities(requiredQuantities, transactionFeeForDryRun).forEach(({ amount, assetId }) =>\n      updateAssetInput(assetId, amount)\n    );\n\n    const txCost = await this.provider.getTransactionCost(txRequestClone, {\n      signatureCallback,\n      gasPrice,\n    });\n\n    return {\n      ...txCost,\n      requiredQuantities,\n    };\n  }\n\n  /**\n   * Sign a message from the account via the connector.\n   *\n   * @param message - the message to sign.\n   * @returns a promise that resolves to the signature.\n   *\n   * @hidden\n   */\n  async signMessage(message: HashableMessage): Promise<string> {\n    if (!this._connector) {\n      throw new FuelError(ErrorCode.MISSING_CONNECTOR, 'A connector is required to sign messages.');\n    }\n    return this._connector.signMessage(this.address.toString(), message);\n  }\n\n  /**\n   * Signs a transaction from the account via the connector..\n   *\n   * @param transactionRequestLike - The transaction request to sign.\n   * @returns A promise that resolves to the signature of the transaction.\n   */\n  async signTransaction(transactionRequestLike: TransactionRequestLike): Promise<string> {\n    if (!this._connector) {\n      throw new FuelError(\n        ErrorCode.MISSING_CONNECTOR,\n        'A connector is required to sign transactions.'\n      );\n    }\n    return this._connector.signTransaction(this.address.toString(), transactionRequestLike);\n  }\n\n  /**\n   * Sends a transaction to the network.\n   *\n   * @param transactionRequestLike - The transaction request to be sent.\n   * @param sendTransactionParams - The provider send transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async sendTransaction(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = true, ...connectorOptions }: AccountSendTxParams = {}\n  ): Promise<TransactionResponse> {\n    let transactionRequest = transactionRequestify(transactionRequestLike);\n\n    // Check if the account is using a connector, and therefore we do not have direct access to the\n    // private key.\n    if (this._connector) {\n      const { onBeforeSend, skipCustomFee = false } = connectorOptions;\n\n      transactionRequest = await this.prepareTransactionForSend(transactionRequest);\n\n      const params: FuelConnectorSendTxParams = {\n        onBeforeSend,\n        skipCustomFee,\n        provider: {\n          url: this.provider.url,\n          cache: await serializeProviderCache(this.provider),\n        },\n        transactionState: transactionRequest.flag.state,\n        transactionSummary: await this.prepareTransactionSummary(transactionRequest),\n      };\n\n      const transaction: string | TransactionResponse = await this._connector.sendTransaction(\n        this.address.toString(),\n        transactionRequest,\n        params\n      );\n\n      return typeof transaction === 'string'\n        ? this.provider.getTransactionResponse(transaction)\n        : transaction;\n    }\n\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.sendTransaction(transactionRequest, {\n      estimateTxDependencies: false,\n    });\n  }\n\n  /**\n   * Simulates a transaction.\n   *\n   * @param transactionRequestLike - The transaction request to be simulated.\n   * @param estimateTxParams - The estimate transaction params (optional).\n   * @returns A promise that resolves to the call result.\n   */\n  async simulateTransaction(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = true }: EstimateTransactionParams = {}\n  ): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.simulate(transactionRequest, { estimateTxDependencies: false });\n  }\n\n  /**\n   * Generates an array of fake resources based on the provided coins.\n   *\n   * @param coins - An array of `FakeResources` objects representing the coins.\n   * @returns An array of `Resource` objects with generated properties.\n   */\n  generateFakeResources(coins: FakeResources[]): Array<Resource> {\n    return coins.map((coin) => ({\n      id: hexlify(randomBytes(UTXO_ID_LEN)),\n      owner: this.address,\n      blockCreated: bn(1),\n      txCreatedIdx: bn(1),\n      ...coin,\n    }));\n  }\n\n  /** @hidden */\n  private async prepareTransactionForSend(\n    request: TransactionRequest\n  ): Promise<TransactionRequest> {\n    const { transactionId } = request.flag;\n\n    // If there is no transaction id, then no status is set.\n    if (!isDefined(transactionId)) {\n      return request;\n    }\n\n    const chainId = await this.provider.getChainId();\n    const currentTransactionId = request.getTransactionId(chainId);\n\n    // If the transaction id does not match the transaction id on the request.\n    // Then we need to invalidate the transaction status\n    if (transactionId !== currentTransactionId) {\n      request.updateState(chainId);\n    }\n    return request;\n  }\n\n  /** @hidden */\n  private async prepareTransactionSummary(\n    request: TransactionRequest\n  ): Promise<TransactionSummaryJson | undefined> {\n    const chainId = await this.provider.getChainId();\n\n    return isDefined(request.flag.summary)\n      ? {\n          ...request.flag.summary,\n          id: request.getTransactionId(chainId),\n          transactionBytes: hexlify(request.toTransactionBytes()),\n        }\n      : undefined;\n  }\n\n  /** @hidden * */\n  private validateTransferAmount(amount: BigNumberish) {\n    if (bn(amount).lte(0)) {\n      throw new FuelError(\n        ErrorCode.INVALID_TRANSFER_AMOUNT,\n        'Transfer amount must be a positive number.'\n      );\n    }\n  }\n\n  /** @hidden * */\n  private async estimateAndFundTransaction(\n    transactionRequest: ScriptTransactionRequest,\n    txParams: TxParamsType,\n    costParams?: TransactionCostParams\n  ) {\n    let request = transactionRequest;\n    const txCost = await this.getTransactionCost(request, costParams);\n    request = this.validateGasLimitAndMaxFee({\n      transactionRequest: request,\n      gasUsed: txCost.gasUsed,\n      maxFee: txCost.maxFee,\n      txParams,\n    });\n    request = await this.fund(request, txCost);\n    return request;\n  }\n\n  /** @hidden * */\n  private validateGasLimitAndMaxFee({\n    gasUsed,\n    maxFee,\n    transactionRequest,\n    txParams: { gasLimit: setGasLimit, maxFee: setMaxFee },\n  }: {\n    gasUsed: BN;\n    maxFee: BN;\n    transactionRequest: ScriptTransactionRequest;\n    txParams: Pick<TxParamsType, 'gasLimit' | 'maxFee'>;\n  }) {\n    const request = transactionRequestify(transactionRequest) as ScriptTransactionRequest;\n\n    if (!isDefined(setGasLimit)) {\n      request.gasLimit = gasUsed;\n    } else if (gasUsed.gt(setGasLimit)) {\n      throw new FuelError(\n        ErrorCode.GAS_LIMIT_TOO_LOW,\n        `Gas limit '${setGasLimit}' is lower than the required: '${gasUsed}'.`\n      );\n    }\n\n    if (!isDefined(setMaxFee)) {\n      request.maxFee = maxFee;\n    } else if (maxFee.gt(setMaxFee)) {\n      throw new FuelError(\n        ErrorCode.MAX_FEE_TOO_LOW,\n        `Max fee '${setMaxFee}' is lower than the required: '${maxFee}'.`\n      );\n    }\n\n    return request;\n  }\n}\n", "import type { BigNumberish, BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify } from '@fuel-ts/utils';\n\nexport type CoinQuantityLike =\n  | [amount: BigNumberish, assetId: BytesLike, max?: BigNumberish]\n  | { amount: BigNumberish; assetId: BytesLike; max?: BigNumberish };\nexport type CoinQuantity = { amount: BN; assetId: string; max?: BN };\n\n/** @hidden */\nexport const coinQuantityfy = (coinQuantityLike: CoinQuantityLike): CoinQuantity => {\n  let assetId;\n  let amount;\n  let max;\n  if (Array.isArray(coinQuantityLike)) {\n    amount = coinQuantityLike[0];\n    assetId = coinQuantityLike[1];\n    max = coinQuantityLike[2] ?? undefined;\n  } else {\n    amount = coinQuantityLike.amount;\n    assetId = coinQuantityLike.assetId;\n    max = coinQuantityLike.max ?? undefined;\n  }\n\n  return {\n    assetId: hexlify(assetId),\n    amount: bn(amount),\n    max: max ? bn(max) : undefined,\n  };\n};\n\nexport interface IAddAmountToAssetParams {\n  assetId: string;\n  amount: BN;\n  coinQuantities: CoinQuantity[];\n}\n\nexport const addAmountToCoinQuantities = (params: IAddAmountToAssetParams): CoinQuantity[] => {\n  const { amount, assetId } = params;\n\n  const coinQuantities = [...params.coinQuantities];\n\n  const assetIdx = coinQuantities.findIndex((coinQuantity) => coinQuantity.assetId === assetId);\n\n  if (assetIdx !== -1) {\n    coinQuantities[assetIdx].amount = coinQuantities[assetIdx].amount.add(amount);\n  } else {\n    coinQuantities.push({ assetId, amount });\n  }\n\n  return coinQuantities;\n};\n", "import type { AddressInput } from '@fuel-ts/address';\nimport { Address, isB256 } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BigNumberish, BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type { Transaction } from '@fuel-ts/transactions';\nimport { InputMessageCoder, TransactionCoder } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify, DateTime, isDefined } from '@fuel-ts/utils';\nimport { checkFuelCoreVersionCompatibility, versions } from '@fuel-ts/versions';\nimport type { DocumentNode } from 'graphql';\nimport { GraphQLClient } from 'graphql-request';\nimport type { GraphQLClientResponse, GraphQLResponse } from 'graphql-request/src/types';\nimport gql from 'graphql-tag';\nimport { clone } from 'ramda';\n\nimport { getSdk as getOperationsSdk } from './__generated__/operations';\nimport type {\n  GqlReceiptFragment as TransactionReceiptJson,\n  GqlNodeInfoFragment as NodeInfoJson,\n  GqlChainInfoFragment as ChainInfoJson,\n  GqlConsensusParametersVersion,\n  GqlContractParameters as ContractParameters,\n  GqlDryRunFailureStatusFragment,\n  GqlDryRunSuccessStatusFragment,\n  GqlFeeParameters as FeeParameters,\n  GqlGasCostsFragment as GasCosts,\n  GqlPredicateParameters as PredicateParameters,\n  GqlScriptParameters as ScriptParameters,\n  GqlTxParameters as TxParameters,\n  GqlPageInfo,\n  GqlRelayedTransactionFailed,\n  Requester,\n  GqlBlockFragment,\n  GqlEstimatePredicatesQuery,\n} from './__generated__/operations';\nimport type { Coin } from './coin';\nimport type { CoinQuantity, CoinQuantityLike } from './coin-quantity';\nimport { coinQuantityfy } from './coin-quantity';\nimport { FuelGraphqlSubscriber } from './fuel-graphql-subscriber';\nimport type { Message, MessageCoin, MessageProof, MessageStatus } from './message';\nimport type { ExcludeResourcesOption, Resource } from './resource';\nimport { ResourceCache } from './resource-cache';\nimport type {\n  TransactionRequestLike,\n  TransactionRequest,\n  TransactionRequestInput,\n  CoinTransactionRequestInput,\n  JsonAbisFromAllCalls,\n  ScriptTransactionRequest,\n} from './transaction-request';\nimport {\n  isPredicate,\n  isTransactionTypeCreate,\n  isTransactionTypeScript,\n  transactionRequestify,\n  validateTransactionForAssetBurn,\n} from './transaction-request';\nimport type { DecodedLogs, TransactionResultReceipt } from './transaction-response';\nimport { TransactionResponse, getAllDecodedLogs } from './transaction-response';\nimport {\n  calculateGasFee,\n  extractTxError,\n  getGasUsedFromReceipts,\n  getReceiptsWithMissingData,\n} from './utils';\nimport type { RetryOptions } from './utils/auto-retry-fetch';\nimport { autoRetryFetch } from './utils/auto-retry-fetch';\nimport { assertGqlResponseHasNoErrors } from './utils/handle-gql-error-message';\nimport { adjustResourcesToExclude } from './utils/helpers';\nimport type { ProviderCacheJson, TransactionSummaryJsonPartial } from './utils/serialization';\nimport {\n  deserializeChain,\n  deserializeNodeInfo,\n  deserializeProviderCache,\n  deserializeReceipt,\n} from './utils/serialization';\nimport { validatePaginationArgs } from './utils/validate-pagination-args';\n\nconst MAX_RETRIES = 10;\n\nexport const RESOURCES_PAGE_SIZE_LIMIT = 512;\nexport const TRANSACTIONS_PAGE_SIZE_LIMIT = 60;\nexport const BALANCES_PAGE_SIZE_LIMIT = 100;\nexport const NON_PAGINATED_BALANCES_SIZE = 10000;\nexport const BLOCKS_PAGE_SIZE_LIMIT = 5;\nexport const DEFAULT_RESOURCE_CACHE_TTL = 20_000; // 20 seconds\nexport const GAS_USED_MODIFIER = 1.2;\n\nexport type Features = {\n  balancePagination: boolean;\n  amount128: boolean;\n};\n\nexport type DryRunFailureStatusFragment = GqlDryRunFailureStatusFragment;\nexport type DryRunSuccessStatusFragment = GqlDryRunSuccessStatusFragment;\n\nexport type DryRunStatus = DryRunFailureStatusFragment | DryRunSuccessStatusFragment;\n\nexport type CallResult = {\n  receipts: TransactionResultReceipt[];\n  dryRunStatus?: DryRunStatus;\n};\n\nexport type EstimateTxDependenciesReturns = CallResult & {\n  outputVariables: number;\n  missingContractIds: string[];\n  rawReceipts: TransactionReceiptJson[];\n};\n\n/**\n * A Fuel block\n */\nexport type Block = {\n  id: string;\n  height: BN;\n  time: string;\n  transactionIds: string[];\n  header: {\n    daHeight: BN;\n    stateTransitionBytecodeVersion: string;\n    transactionsCount: string;\n    transactionsRoot: string;\n    messageOutboxRoot: string;\n    eventInboxRoot: string;\n    prevRoot: string;\n    applicationHash: string;\n  };\n};\n\nexport type PageInfo = GqlPageInfo;\n\nexport type GetCoinsResponse = {\n  coins: Coin[];\n  pageInfo: PageInfo;\n};\n\nexport type GetMessagesResponse = {\n  messages: Message[];\n  pageInfo: PageInfo;\n};\n\nexport type GetBalancesResponse = {\n  balances: CoinQuantity[];\n  pageInfo?: PageInfo;\n};\n\nexport type GetTransactionsResponse = {\n  transactions: Transaction[];\n  pageInfo: PageInfo;\n};\n\nexport type GetAssetDetailsResponse = {\n  subId: string;\n  contractId: string;\n  totalSupply: BN;\n};\n\nexport type GetBlocksResponse = {\n  blocks: Block[];\n  pageInfo: PageInfo;\n};\n\nexport type GetAddressTypeResponse = 'Account' | 'Contract' | 'Transaction' | 'Blob' | 'Asset';\n\n/**\n * Deployed Contract bytecode and contract id\n */\nexport type ContractResult = {\n  id: string;\n  bytecode: string;\n};\n\ntype ModifyStringToBN<T> = {\n  [P in keyof T]: P extends 'version' ? T[P] : T[P] extends string ? BN : T[P];\n};\n\nexport {\n  TransactionReceiptJson,\n  NodeInfoJson,\n  ChainInfoJson,\n  GasCosts,\n  FeeParameters,\n  ContractParameters,\n  PredicateParameters,\n  ScriptParameters,\n  TxParameters,\n};\n\nexport type ConsensusParameters = {\n  version: GqlConsensusParametersVersion;\n  chainId: BN;\n  baseAssetId: string;\n  feeParameters: ModifyStringToBN<FeeParameters>;\n  contractParameters: ModifyStringToBN<ContractParameters>;\n  predicateParameters: ModifyStringToBN<PredicateParameters>;\n  scriptParameters: ModifyStringToBN<ScriptParameters>;\n  txParameters: ModifyStringToBN<TxParameters>;\n  gasCosts: GasCosts;\n};\n\n/**\n * Chain information\n */\nexport type ChainInfo = {\n  name: string;\n  baseChainHeight: BN;\n  consensusParameters: ConsensusParameters;\n};\n\n/**\n * Node information\n */\nexport type NodeInfo = {\n  utxoValidation: boolean;\n  vmBacktrace: boolean;\n  maxTx: BN;\n  maxDepth: BN;\n  nodeVersion: string;\n  indexation: {\n    balances: boolean;\n    coinsToSpend: boolean;\n    assetMetadata: boolean;\n  };\n};\n\n/** @deprecated This type is no longer used. */\nexport type NodeInfoAndConsensusParameters = {\n  nodeVersion: string;\n  gasPerByte: BN;\n  gasPriceFactor: BN;\n  maxGasPerTx: BN;\n};\n\n// #region cost-estimation-1\nexport type TransactionCost = {\n  gasPrice: BN;\n  gasUsed: BN;\n  minGas: BN;\n  minFee: BN;\n  maxFee: BN;\n  maxGas: BN;\n  rawReceipts: TransactionReceiptJson[];\n  receipts: TransactionResultReceipt[];\n  outputVariables: number;\n  missingContractIds: string[];\n  estimatedPredicates: TransactionRequestInput[];\n  requiredQuantities: CoinQuantity[];\n  addedSignatures: number;\n  dryRunStatus?: DryRunStatus;\n  updateMaxFee?: boolean;\n  transactionSummary?: TransactionSummaryJsonPartial;\n};\n// #endregion cost-estimation-1\n\n/**\n * @hidden\n *\n * Cursor pagination arguments\n *\n * https://relay.dev/graphql/connections.htm#sec-Arguments\n */\nexport type CursorPaginationArgs = {\n  /** Forward pagination limit */\n  first?: number | null;\n  /** Forward pagination cursor */\n  after?: string | null;\n  /** Backward pagination limit  */\n  last?: number | null;\n  /** Backward pagination cursor */\n  before?: string | null;\n};\n\n/*\n * Provider initialization options\n */\nexport type ProviderOptions = {\n  /**\n   * Custom fetch function to use for making requests.\n   */\n  fetch?: (\n    url: string,\n    requestInit?: RequestInit,\n    providerOptions?: Omit<ProviderOptions, 'fetch'>\n  ) => Promise<Response>;\n  /**\n   * Timeout [ms] after which every request will be aborted.\n   */\n  timeout?: number;\n  /**\n   * Resources cache for the given time [ms]. If set to -1, the cache will be disabled.\n   */\n  resourceCacheTTL?: number;\n  /**\n   * Retry options to use when fetching data from the node.\n   */\n  retryOptions?: RetryOptions;\n  /**\n   * Custom headers to include in the request.\n   */\n  headers?: RequestInit['headers'];\n  /**\n   * Middleware to modify the request before it is sent.\n   * This can be used to add headers, modify the body, etc.\n   */\n  requestMiddleware?: (request: RequestInit) => RequestInit | Promise<RequestInit>;\n  /**\n   * The cache can be passed in to avoid re-fetching the chain + node info.\n   */\n  cache?: ProviderCacheJson;\n};\n\n/**\n * UTXO validation params\n */\nexport type UTXOValidationParams = {\n  utxoValidation?: boolean;\n};\n\n/**\n * Transaction estimation params\n */\nexport type EstimateTransactionParams = {\n  /**\n   * Estimate the transaction dependencies.\n   */\n  estimateTxDependencies?: boolean;\n};\n\nexport type TransactionCostParams = EstimateTransactionParams & {\n  /**\n   * The quantities to forward to the contract.\n   */\n  quantities?: CoinQuantity[];\n\n  /**\n   * A callback to sign the transaction.\n   *\n   * @param request - The transaction request to sign.\n   * @returns A promise that resolves to the signed transaction request.\n   */\n  signatureCallback?: (request: ScriptTransactionRequest) => Promise<ScriptTransactionRequest>;\n\n  /**\n   * The gas price to use for the transaction.\n   */\n  gasPrice?: BN;\n};\n\nexport type EstimateTxDependenciesParams = {\n  /**\n   * The gas price to use for the transaction.\n   */\n  gasPrice?: BN;\n};\n\nexport type EstimateTxGasAndFeeParams = {\n  /**\n   * The transaction request to estimate the gas and fee for.\n   */\n  transactionRequest: TransactionRequest;\n\n  /**\n   * The gas price to use for the transaction.\n   */\n  gasPrice?: BN;\n};\n\n/**\n * Provider Call transaction params\n */\nexport type ProviderCallParams = UTXOValidationParams & EstimateTransactionParams;\n\n/**\n * Provider Send transaction params\n */\nexport type ProviderSendTxParams = EstimateTransactionParams & {\n  /**\n   * Whether to enable asset burn for the transaction.\n   */\n  enableAssetBurn?: boolean;\n};\n\n/**\n * URL - Consensus Params mapping.\n */\ntype ChainInfoCache = Record<string, ChainInfo>;\n\n/**\n * URL - Node Info mapping.\n */\ntype NodeInfoCache = Record<string, NodeInfo>;\n\ntype Operations = ReturnType<typeof getOperationsSdk>;\n\ntype SdkOperations = Omit<Operations, 'statusChange' | 'submitAndAwaitStatus'> & {\n  statusChange: (\n    ...args: Parameters<Operations['statusChange']>\n  ) => Promise<ReturnType<Operations['statusChange']>>;\n  submitAndAwaitStatus: (\n    ...args: Parameters<Operations['submitAndAwaitStatus']>\n  ) => Promise<ReturnType<Operations['submitAndAwaitStatus']>>;\n  getBlobs: (variables: { blobIds: string[] }) => Promise<{ blob: { id: string } | null }[]>;\n};\n\n/**\n * A provider for connecting to a node\n */\nexport default class Provider {\n  operations: SdkOperations;\n  cache?: ResourceCache;\n\n  /** @hidden */\n  static clearChainAndNodeCaches() {\n    Provider.inflightFetchChainAndNodeInfoRequests = {};\n    Provider.nodeInfoCache = {};\n    Provider.chainInfoCache = {};\n  }\n\n  /** @hidden */\n  public url: string;\n  /** @hidden */\n  private urlWithoutAuth: string;\n\n  /** @hidden */\n  private static inflightFetchChainAndNodeInfoRequests: Record<\n    string,\n    Promise<{ consensusParametersTimestamp: number }>\n  > = {};\n\n  /** @hidden */\n  private static chainInfoCache: ChainInfoCache = {};\n  /** @hidden */\n  private static nodeInfoCache: NodeInfoCache = {};\n  /** @hidden */\n  private static incompatibleNodeVersionMessage: string = '';\n\n  /** @hidden */\n  public consensusParametersTimestamp?: number;\n\n  options: ProviderOptions = {\n    timeout: undefined,\n    resourceCacheTTL: undefined,\n    fetch: undefined,\n    retryOptions: undefined,\n    headers: undefined,\n    cache: undefined,\n  };\n\n  /**\n   * @hidden\n   */\n  private static getFetchFn(options: ProviderOptions): NonNullable<ProviderOptions['fetch']> {\n    const { retryOptions, timeout, headers } = options;\n\n    return autoRetryFetch(async (...args) => {\n      const url = args[0];\n      const request = args[1];\n      const signal = timeout ? AbortSignal.timeout(timeout) : undefined;\n\n      let fullRequest: RequestInit = {\n        ...request,\n        signal,\n        headers: { ...request?.headers, ...headers },\n      };\n\n      if (options.requestMiddleware) {\n        fullRequest = await options.requestMiddleware(fullRequest);\n      }\n\n      return options.fetch ? options.fetch(url, fullRequest, options) : fetch(url, fullRequest);\n    }, retryOptions);\n  }\n\n  /**\n   * Constructor to initialize a Provider.\n   *\n   * @param url - GraphQL endpoint of the Fuel node\n   * @param options - Additional options for the provider\n   * @hidden\n   */\n  constructor(url: string, options: ProviderOptions = {}) {\n    const { url: rawUrl, urlWithoutAuth, headers: authHeaders } = Provider.extractBasicAuth(url);\n\n    this.url = rawUrl;\n    this.urlWithoutAuth = urlWithoutAuth;\n    this.url = url;\n\n    const { FUELS } = versions;\n    const headers = { ...authHeaders, ...options.headers, Source: `ts-sdk-${FUELS}` };\n\n    this.options = {\n      ...this.options,\n      ...options,\n      headers,\n    };\n\n    this.operations = this.createOperations();\n    const { resourceCacheTTL, cache } = this.options;\n\n    /**\n     * Re-instantiate chain + node info from the passed in cache\n     */\n    if (cache) {\n      const { consensusParametersTimestamp, chain, nodeInfo } = deserializeProviderCache(cache);\n      this.consensusParametersTimestamp = consensusParametersTimestamp;\n      Provider.chainInfoCache[this.urlWithoutAuth] = chain;\n      Provider.nodeInfoCache[this.urlWithoutAuth] = nodeInfo;\n    }\n\n    /**\n     * Instantiate the resource cache (for UTXO's + messages)\n     */\n    if (isDefined(resourceCacheTTL)) {\n      if (resourceCacheTTL !== -1) {\n        this.cache = new ResourceCache(resourceCacheTTL);\n      } else {\n        this.cache = undefined;\n      }\n    } else {\n      this.cache = new ResourceCache(DEFAULT_RESOURCE_CACHE_TTL);\n    }\n  }\n\n  private static extractBasicAuth(url: string): {\n    url: string;\n    urlWithoutAuth: string;\n    headers: ProviderOptions['headers'];\n  } {\n    let parsedUrl: URL;\n    try {\n      parsedUrl = new URL(url);\n    } catch (error) {\n      throw new FuelError(FuelError.CODES.INVALID_URL, 'Invalid URL provided.', { url }, error);\n    }\n\n    const username = parsedUrl.username;\n    const password = parsedUrl.password;\n    const urlWithoutAuth = `${parsedUrl.origin}${parsedUrl.pathname}`;\n    if (!(username && password)) {\n      return { url, urlWithoutAuth: url, headers: undefined };\n    }\n\n    return {\n      url,\n      urlWithoutAuth,\n      headers: { Authorization: `Basic ${btoa(`${username}:${password}`)}` },\n    };\n  }\n\n  /**\n   * Initialize Provider async stuff\n   */\n  async init(): Promise<Provider> {\n    await this.fetchChainAndNodeInfo();\n    return this;\n  }\n\n  /**\n   * Returns the `chainInfo` for the current network.\n   *\n   * @returns the chain information configuration.\n   */\n  async getChain(): Promise<ChainInfo> {\n    await this.init();\n    return Provider.chainInfoCache[this.urlWithoutAuth];\n  }\n\n  /**\n   * Returns the `nodeInfo` for the current network.\n   *\n   * @returns the node information configuration.\n   */\n  async getNode(): Promise<NodeInfo> {\n    await this.init();\n    return Provider.nodeInfoCache[this.urlWithoutAuth];\n  }\n\n  /**\n   * Returns some helpful parameters related to gas fees.\n   */\n  async getGasConfig() {\n    const {\n      txParameters: { maxGasPerTx },\n      predicateParameters: { maxGasPerPredicate },\n      feeParameters: { gasPriceFactor, gasPerByte },\n      gasCosts,\n    } = (await this.getChain()).consensusParameters;\n\n    return {\n      maxGasPerTx,\n      maxGasPerPredicate,\n      gasPriceFactor,\n      gasPerByte,\n      gasCosts,\n    };\n  }\n\n  /**\n   * Updates the URL for the provider and fetches the consensus parameters for the new URL, if needed.\n   *\n   * @param url - The URL to connect to.\n   * @param options - Additional options for the provider.\n   */\n  async connect(url: string, options?: ProviderOptions): Promise<void> {\n    const { url: rawUrl, urlWithoutAuth, headers } = Provider.extractBasicAuth(url);\n\n    this.url = rawUrl;\n    this.urlWithoutAuth = urlWithoutAuth;\n    this.options = options ?? this.options;\n    this.options = { ...this.options, headers: { ...this.options.headers, ...headers } };\n\n    this.operations = this.createOperations();\n\n    await this.init();\n  }\n\n  /**\n   * Return the chain and node information.\n   * @param ignoreCache - If true, ignores the cache and re-fetch configs.\n   * @returns A promise that resolves to the Chain and NodeInfo.\n   */\n  async fetchChainAndNodeInfo(\n    ignoreCache: boolean = false\n  ): Promise<{ chain: ChainInfo; nodeInfo: NodeInfo }> {\n    const nodeInfo: NodeInfo | undefined = Provider.nodeInfoCache[this.urlWithoutAuth];\n    const chain: ChainInfo | undefined = Provider.chainInfoCache[this.urlWithoutAuth];\n\n    // If we have a cache and we're not ignoring it, return the cache\n    const hasCache = nodeInfo && chain;\n    if (hasCache && !ignoreCache) {\n      return { nodeInfo, chain };\n    }\n\n    // Obtain any inflight requests from other instances of Provider\n    const inflightRequest: Promise<{ consensusParametersTimestamp: number }> =\n      Provider.inflightFetchChainAndNodeInfoRequests[this.urlWithoutAuth];\n\n    // If there is an inflight request, then wait for it to resolve and return the cached values\n    if (inflightRequest) {\n      return inflightRequest.then((data) => {\n        this.consensusParametersTimestamp = data.consensusParametersTimestamp;\n        return {\n          nodeInfo: Provider.nodeInfoCache[this.urlWithoutAuth],\n          chain: Provider.chainInfoCache[this.urlWithoutAuth],\n        };\n      });\n    }\n\n    // If there is no inflight request, then fetch the chain and node info from the network\n    const getChainAndNodeInfoFromNetwork = this.operations\n      .getChainAndNodeInfo()\n      .then((data) => ({\n        chain: deserializeChain(data.chain),\n        nodeInfo: deserializeNodeInfo(data.nodeInfo),\n        consensusParametersTimestamp: Date.now(),\n      }))\n      .then((data) => {\n        Provider.setIncompatibleNodeVersionMessage(data.nodeInfo);\n        Provider.chainInfoCache[this.urlWithoutAuth] = data.chain;\n        Provider.nodeInfoCache[this.urlWithoutAuth] = data.nodeInfo;\n        this.consensusParametersTimestamp = data.consensusParametersTimestamp;\n        return data;\n      })\n      .catch((err) => {\n        const error = new FuelError(\n          FuelError.CODES.CONNECTION_REFUSED,\n          'Unable to fetch chain and node info from the network',\n          { url: this.urlWithoutAuth },\n          err\n        );\n        error.cause = { code: 'ECONNREFUSED' };\n\n        throw error;\n      })\n      .finally(() => {\n        delete Provider.inflightFetchChainAndNodeInfoRequests[this.urlWithoutAuth];\n      });\n\n    // Set the inflight request to the network request\n    Provider.inflightFetchChainAndNodeInfoRequests[this.urlWithoutAuth] =\n      getChainAndNodeInfoFromNetwork;\n\n    // Return the cached values once the network request resolves\n    return Provider.inflightFetchChainAndNodeInfoRequests[this.urlWithoutAuth].then((data) => {\n      this.consensusParametersTimestamp = data.consensusParametersTimestamp;\n      return {\n        nodeInfo: Provider.nodeInfoCache[this.urlWithoutAuth],\n        chain: Provider.chainInfoCache[this.urlWithoutAuth],\n      };\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  private static setIncompatibleNodeVersionMessage(nodeInfo: NodeInfo) {\n    const { isMajorSupported, isMinorSupported, supportedVersion } =\n      checkFuelCoreVersionCompatibility(nodeInfo.nodeVersion);\n\n    if (!isMajorSupported || !isMinorSupported) {\n      Provider.incompatibleNodeVersionMessage = [\n        `The Fuel Node that you are trying to connect to is using fuel-core version ${nodeInfo.nodeVersion}.`,\n        `The TS SDK currently supports fuel-core version ${supportedVersion}.`,\n        `Things may not work as expected.`,\n      ].join('\\n');\n      FuelGraphqlSubscriber.incompatibleNodeVersionMessage =\n        Provider.incompatibleNodeVersionMessage;\n    }\n  }\n\n  /**\n   * Create GraphQL client and set operations.\n   *\n   * @returns The operation SDK object\n   * @hidden\n   */\n  private createOperations(): SdkOperations {\n    const fetchFn = Provider.getFetchFn(this.options);\n    const gqlClient = new GraphQLClient(this.urlWithoutAuth, {\n      fetch: (input: RequestInfo | URL, requestInit?: RequestInit) =>\n        fetchFn(input.toString(), requestInit || {}, this.options),\n      responseMiddleware: (response: GraphQLClientResponse<unknown> | Error) => {\n        if ('response' in response) {\n          const graphQlResponse = response.response as GraphQLResponse;\n          assertGqlResponseHasNoErrors(\n            graphQlResponse.errors,\n            Provider.incompatibleNodeVersionMessage\n          );\n        }\n      },\n    });\n\n    const executeQuery = (query: DocumentNode, vars: Record<string, unknown>) => {\n      const opDefinition = query.definitions.find((x) => x.kind === 'OperationDefinition') as {\n        operation: string;\n      };\n      const isSubscription = opDefinition?.operation === 'subscription';\n\n      if (isSubscription) {\n        return FuelGraphqlSubscriber.create({\n          url: this.urlWithoutAuth,\n          query,\n          fetchFn: (url, requestInit) => fetchFn(url as string, requestInit, this.options),\n          variables: vars,\n        });\n      }\n      return gqlClient.request(query, vars);\n    };\n\n    const customOperations = (requester: Requester) => ({\n      getBlobs(variables: { blobIds: string[] }) {\n        const queryParams = variables.blobIds.map((_, i) => `$blobId${i}: BlobId!`).join(', ');\n        const blobParams = variables.blobIds\n          .map((_, i) => `blob${i}: blob(id: $blobId${i}) { id }`)\n          .join('\\n');\n\n        const updatedVariables = variables.blobIds.reduce(\n          (acc, blobId, i) => {\n            acc[`blobId${i}`] = blobId;\n            return acc;\n          },\n          {} as Record<string, string>\n        );\n\n        const document = gql`\n          query getBlobs(${queryParams}) {\n            ${blobParams}\n          }\n        `;\n\n        return requester(document, updatedVariables);\n      },\n    });\n\n    // @ts-expect-error This is due to this function being generic. Its type is specified when calling a specific operation via provider.operations.xyz.\n    return { ...getOperationsSdk(executeQuery), ...customOperations(executeQuery) };\n  }\n\n  /**\n   * Returns the version of the connected node.\n   *\n   * @returns A promise that resolves to the version string.\n   */\n  async getVersion(): Promise<string> {\n    const {\n      nodeInfo: { nodeVersion },\n    } = await this.operations.getVersion();\n    return nodeVersion;\n  }\n\n  /**\n   * Returns the latest block number.\n   *\n   * @returns A promise that resolves to the latest block number.\n   */\n  async getBlockNumber(): Promise<BN> {\n    const {\n      chain: {\n        latestBlock: { height },\n      },\n    } = await this.operations.getLatestBlockHeight();\n    return bn(height);\n  }\n\n  /**\n   * Returns the node information for the current provider network.\n   *\n   * @returns a promise that resolves to the node information.\n   */\n  async fetchNode(): Promise<NodeInfo> {\n    const { nodeInfo } = await this.operations.getNodeInfo();\n\n    const processedNodeInfo: NodeInfo = deserializeNodeInfo(nodeInfo);\n\n    Provider.nodeInfoCache[this.urlWithoutAuth] = processedNodeInfo;\n\n    return processedNodeInfo;\n  }\n\n  /**\n   * Returns the chain information for the current provider network.\n   *\n   * @returns a promise that resolves to the chain information.\n   */\n  async fetchChain(): Promise<ChainInfo> {\n    const { chain } = await this.operations.getChain();\n\n    const processedChain = deserializeChain(chain);\n\n    Provider.chainInfoCache[this.urlWithoutAuth] = processedChain;\n\n    return processedChain;\n  }\n\n  /**\n   * Returns the chain ID for the current provider network.\n   *\n   * @returns A promise that resolves to the chain ID number.\n   */\n  async getChainId() {\n    const {\n      consensusParameters: { chainId },\n    } = await this.getChain();\n    return chainId.toNumber();\n  }\n\n  /**\n   * Returns the base asset ID for the current provider network.\n   *\n   * @returns the base asset ID.\n   */\n  async getBaseAssetId() {\n    const all = await this.getChain();\n    const {\n      consensusParameters: { baseAssetId },\n    } = all;\n    return baseAssetId;\n  }\n\n  /**\n   * Retrieves the details of an asset given its ID.\n   *\n   * @param assetId - The unique identifier of the asset.\n   * @returns A promise that resolves to an object containing the asset details.\n   */\n  async getAssetDetails(assetId: string): Promise<GetAssetDetailsResponse> {\n    const { assetMetadata } = await this.getNodeFeatures();\n\n    if (!assetMetadata) {\n      throw new FuelError(\n        ErrorCode.UNSUPPORTED_FEATURE,\n        'The current node does not supports fetching asset details'\n      );\n    }\n\n    const { assetDetails } = await this.operations.getAssetDetails({ assetId });\n\n    const { contractId, subId, totalSupply } = assetDetails;\n\n    return {\n      subId,\n      contractId,\n      totalSupply: bn(totalSupply),\n    };\n  }\n\n  /**\n   * @hidden\n   */\n  #cacheInputs(inputs: TransactionRequestInput[], transactionId: string): void {\n    if (!this.cache) {\n      return;\n    }\n\n    this.cache.set(transactionId, inputs);\n  }\n\n  /**\n   * @hidden\n   */\n  async validateTransaction(tx: TransactionRequest) {\n    const {\n      consensusParameters: {\n        txParameters: { maxInputs, maxOutputs },\n      },\n    } = await this.getChain();\n    if (bn(tx.inputs.length).gt(maxInputs)) {\n      throw new FuelError(\n        ErrorCode.MAX_INPUTS_EXCEEDED,\n        `The transaction exceeds the maximum allowed number of inputs. Tx inputs: ${tx.inputs.length}, max inputs: ${maxInputs}`\n      );\n    }\n\n    if (bn(tx.outputs.length).gt(maxOutputs)) {\n      throw new FuelError(\n        ErrorCode.MAX_OUTPUTS_EXCEEDED,\n        `The transaction exceeds the maximum allowed number of outputs. Tx outputs: ${tx.outputs.length}, max outputs: ${maxOutputs}`\n      );\n    }\n  }\n\n  /**\n   * Submits a transaction to the chain to be executed.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param sendTransactionParams - The provider send transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response object.\n   */\n  async sendTransaction(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = true, enableAssetBurn }: ProviderSendTxParams = {}\n  ): Promise<TransactionResponse> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    validateTransactionForAssetBurn(\n      await this.getBaseAssetId(),\n      transactionRequest,\n      enableAssetBurn\n    );\n\n    if (estimateTxDependencies) {\n      await this.estimateTxDependencies(transactionRequest);\n    }\n\n    await this.validateTransaction(transactionRequest);\n\n    const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());\n\n    let abis: JsonAbisFromAllCalls | undefined;\n\n    if (isTransactionTypeScript(transactionRequest)) {\n      abis = transactionRequest.abis;\n    }\n    const subscription = await this.operations.submitAndAwaitStatus({ encodedTransaction });\n\n    this.#cacheInputs(\n      transactionRequest.inputs,\n      transactionRequest.getTransactionId(await this.getChainId())\n    );\n\n    const chainId = await this.getChainId();\n    return new TransactionResponse(transactionRequest, this, chainId, abis, subscription);\n  }\n\n  /**\n   * Executes a transaction without actually submitting it to the chain.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param sendTransactionParams - The provider call parameters (optional).\n   * @returns A promise that resolves to the call result object.\n   */\n  async dryRun(\n    transactionRequestLike: TransactionRequestLike,\n    { utxoValidation, estimateTxDependencies = true }: ProviderCallParams = {}\n  ): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      return this.estimateTxDependencies(transactionRequest);\n    }\n    const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions: encodedTransaction,\n      utxoValidation: utxoValidation || false,\n    });\n    const [{ receipts: rawReceipts, status: dryRunStatus }] = dryRunStatuses;\n    const receipts = rawReceipts.map(deserializeReceipt);\n\n    return { receipts, dryRunStatus };\n  }\n\n  /**\n   * Estimates the gas usage for predicates in a transaction request.\n   *\n   * @template T - The type of the transaction request object.\n   *\n   * @param transactionRequest - The transaction request to estimate predicates for.\n   * @returns A promise that resolves to the updated transaction request with estimated gas usage for predicates.\n   */\n  async estimatePredicates<T extends TransactionRequest>(transactionRequest: T): Promise<T> {\n    const shouldEstimatePredicates = transactionRequest.inputs.some(\n      (input) => isPredicate(input) && bn(input.predicateGasUsed).isZero()\n    );\n\n    if (!shouldEstimatePredicates) {\n      return transactionRequest;\n    }\n\n    const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());\n\n    const response = await this.operations.estimatePredicates({\n      encodedTransaction,\n    });\n\n    const { estimatePredicates } = response;\n\n    // eslint-disable-next-line no-param-reassign\n    transactionRequest = this.parseEstimatePredicatesResponse(\n      transactionRequest,\n      estimatePredicates\n    );\n\n    return transactionRequest;\n  }\n\n  /**\n   * Estimates the gas price and predicates for a given transaction request and block horizon.\n   *\n   * @param transactionRequest - The transaction request to estimate predicates and gas price for.\n   * @param blockHorizon - The block horizon to use for gas price estimation.\n   * @returns A promise that resolves to an object containing the updated transaction\n   * request and the estimated gas price.\n   */\n  async estimatePredicatesAndGasPrice<T extends TransactionRequest>(\n    transactionRequest: T,\n    blockHorizon: number\n  ) {\n    const shouldEstimatePredicates = transactionRequest.inputs.some(\n      (input) => isPredicate(input) && bn(input.predicateGasUsed).isZero()\n    );\n\n    if (!shouldEstimatePredicates) {\n      const gasPrice = await this.estimateGasPrice(blockHorizon);\n\n      return { transactionRequest, gasPrice };\n    }\n\n    const {\n      estimateGasPrice: { gasPrice },\n      estimatePredicates,\n    } = await this.operations.estimatePredicatesAndGasPrice({\n      blockHorizon: String(blockHorizon),\n      encodedTransaction: hexlify(transactionRequest.toTransactionBytes()),\n    });\n\n    // eslint-disable-next-line no-param-reassign\n    transactionRequest = this.parseEstimatePredicatesResponse(\n      transactionRequest,\n      estimatePredicates\n    );\n\n    return { transactionRequest, gasPrice: bn(gasPrice) };\n  }\n\n  /**\n   * Will dryRun a transaction and check for missing dependencies.\n   *\n   * If there are missing variable outputs,\n   * `addVariableOutputs` is called on the transaction.\n   *\n   * @param transactionRequest - The transaction request object.\n   * @param gasPrice - The gas price to use for the transaction, if not provided it will be fetched.\n   * @returns A promise that resolves to the estimate transaction dependencies.\n   */\n  async estimateTxDependencies(\n    transactionRequest: TransactionRequest,\n    { gasPrice: gasPriceParam }: EstimateTxDependenciesParams = {}\n  ): Promise<EstimateTxDependenciesReturns> {\n    if (isTransactionTypeCreate(transactionRequest)) {\n      return {\n        rawReceipts: [],\n        receipts: [],\n        outputVariables: 0,\n        missingContractIds: [],\n      };\n    }\n\n    let rawReceipts: TransactionReceiptJson[] = [];\n    let receipts: TransactionResultReceipt[] = [];\n    const missingContractIds: string[] = [];\n    let outputVariables = 0;\n    let dryRunStatus: DryRunStatus | undefined;\n\n    await this.validateTransaction(transactionRequest);\n\n    const gasPrice = gasPriceParam ?? (await this.estimateGasPrice(10));\n\n    for (let attempt = 0; attempt < MAX_RETRIES; attempt++) {\n      const {\n        dryRun: [{ receipts: serializedReceipts, status }],\n      } = await this.operations.dryRun({\n        encodedTransactions: [hexlify(transactionRequest.toTransactionBytes())],\n        utxoValidation: false,\n        gasPrice: gasPrice.toString(),\n      });\n\n      rawReceipts = serializedReceipts;\n      receipts = serializedReceipts.map(deserializeReceipt);\n      dryRunStatus = status;\n\n      const { missingOutputVariables, missingOutputContractIds } =\n        getReceiptsWithMissingData(receipts);\n\n      const hasMissingOutputs =\n        missingOutputVariables.length !== 0 || missingOutputContractIds.length !== 0;\n\n      if (hasMissingOutputs && isTransactionTypeScript(transactionRequest)) {\n        outputVariables += missingOutputVariables.length;\n        transactionRequest.addVariableOutputs(missingOutputVariables.length);\n        missingOutputContractIds.forEach(({ contractId }) => {\n          transactionRequest.addContractInputAndOutput(new Address(contractId));\n          missingContractIds.push(contractId);\n        });\n\n        const { maxFee } = await this.estimateTxGasAndFee({\n          transactionRequest,\n          gasPrice,\n        });\n\n        // eslint-disable-next-line no-param-reassign\n        transactionRequest.maxFee = maxFee;\n      } else {\n        break;\n      }\n    }\n\n    return {\n      rawReceipts,\n      receipts,\n      outputVariables,\n      missingContractIds,\n      dryRunStatus,\n    };\n  }\n\n  /**\n   * Dry runs multiple transactions and checks for missing dependencies in batches.\n   *\n   * Transactions are dry run in batches. After each dry run, transactions requiring\n   * further modifications are identified. The method iteratively updates these transactions\n   * and performs subsequent dry runs until all dependencies for each transaction are satisfied.\n   *\n   * @param transactionRequests - Array of transaction request objects.\n   * @returns A promise that resolves to an array of results for each transaction.\n   */\n  async estimateMultipleTxDependencies(\n    transactionRequests: TransactionRequest[]\n  ): Promise<EstimateTxDependenciesReturns[]> {\n    const results: EstimateTxDependenciesReturns[] = transactionRequests.map(() => ({\n      rawReceipts: [],\n      receipts: [],\n      outputVariables: 0,\n      missingContractIds: [],\n      dryRunStatus: undefined,\n    }));\n\n    const allRequests = clone(transactionRequests);\n\n    // Map of original request index to its serialized transaction (for ScriptTransactionRequest only)\n    const serializedTransactionsMap = new Map();\n\n    // Prepare ScriptTransactionRequests and their indices\n    allRequests.forEach((req, index) => {\n      if (isTransactionTypeScript(req)) {\n        serializedTransactionsMap.set(index, hexlify(req.toTransactionBytes()));\n      }\n    });\n\n    // Indices of ScriptTransactionRequests\n    let transactionsToProcess = Array.from(serializedTransactionsMap.keys());\n    let attempt = 0;\n\n    while (transactionsToProcess.length > 0 && attempt < MAX_RETRIES) {\n      const encodedTransactions = transactionsToProcess.map((index) =>\n        serializedTransactionsMap.get(index)\n      );\n      const dryRunResults = await this.operations.dryRun({\n        encodedTransactions,\n        utxoValidation: false,\n      });\n\n      const nextRoundTransactions = [];\n\n      for (let i = 0; i < dryRunResults.dryRun.length; i++) {\n        const requestIdx = transactionsToProcess[i];\n        const { receipts: rawReceipts, status } = dryRunResults.dryRun[i];\n        const result = results[requestIdx];\n        result.receipts = rawReceipts.map(deserializeReceipt);\n        result.dryRunStatus = status;\n        const { missingOutputVariables, missingOutputContractIds } = getReceiptsWithMissingData(\n          result.receipts\n        );\n        const hasMissingOutputs =\n          missingOutputVariables.length > 0 || missingOutputContractIds.length > 0;\n        const request = allRequests[requestIdx];\n        if (hasMissingOutputs && isTransactionTypeScript(request)) {\n          result.outputVariables += missingOutputVariables.length;\n          request.addVariableOutputs(missingOutputVariables.length);\n          missingOutputContractIds.forEach(({ contractId }) => {\n            request.addContractInputAndOutput(new Address(contractId));\n            result.missingContractIds.push(contractId);\n          });\n          const { maxFee } = await this.estimateTxGasAndFee({\n            transactionRequest: request,\n          });\n          request.maxFee = maxFee;\n          // Prepare for the next round of dry run\n          serializedTransactionsMap.set(requestIdx, hexlify(request.toTransactionBytes()));\n          nextRoundTransactions.push(requestIdx);\n        }\n      }\n\n      transactionsToProcess = nextRoundTransactions;\n      attempt += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Dry runs multiple transactions.\n   *\n   * @param transactionRequests - Array of transaction request objects.\n   * @param sendTransactionParams - The provider call parameters (optional).\n   *\n   * @returns A promise that resolves to an array of results for each transaction call.\n   */\n  async dryRunMultipleTransactions(\n    transactionRequests: TransactionRequest[],\n    { utxoValidation, estimateTxDependencies = true }: ProviderCallParams = {}\n  ): Promise<CallResult[]> {\n    if (estimateTxDependencies) {\n      return this.estimateMultipleTxDependencies(transactionRequests);\n    }\n    const encodedTransactions = transactionRequests.map((tx) => hexlify(tx.toTransactionBytes()));\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions,\n      utxoValidation: utxoValidation || false,\n    });\n\n    const results = dryRunStatuses.map(({ receipts: rawReceipts, status }) => {\n      const receipts = rawReceipts.map(deserializeReceipt);\n      return { receipts, dryRunStatus: status };\n    });\n\n    return results;\n  }\n\n  public async autoRefetchConfigs() {\n    const now = Date.now();\n    const diff = now - (this.consensusParametersTimestamp ?? 0);\n\n    if (diff < 60000) {\n      return;\n    }\n\n    // no cache? refetch.\n    if (!Provider.chainInfoCache?.[this.urlWithoutAuth]) {\n      await this.fetchChainAndNodeInfo(true);\n      return;\n    }\n\n    const chainInfo = Provider.chainInfoCache[this.urlWithoutAuth];\n\n    const {\n      consensusParameters: { version: previous },\n    } = chainInfo;\n\n    const {\n      chain: {\n        latestBlock: {\n          header: { consensusParametersVersion: current },\n        },\n      },\n    } = await this.operations.getConsensusParametersVersion();\n\n    // old cache? refetch.\n    if (previous !== current) {\n      // calling with true to skip cache\n      await this.fetchChainAndNodeInfo(true);\n    }\n  }\n\n  /**\n   * Estimates the transaction gas and fee based on the provided transaction request.\n   * @param params - The parameters for estimating the transaction gas and fee.\n   * @returns An object containing the estimated minimum gas, minimum fee, maximum gas, and maximum fee.\n   */\n  async estimateTxGasAndFee(params: EstimateTxGasAndFeeParams) {\n    const { transactionRequest, gasPrice: gasPriceParam } = params;\n    let gasPrice = gasPriceParam;\n\n    await this.autoRefetchConfigs();\n\n    const chainInfo = await this.getChain();\n    const { gasPriceFactor, maxGasPerTx } = await this.getGasConfig();\n\n    const minGas = transactionRequest.calculateMinGas(chainInfo);\n    if (!isDefined(gasPrice)) {\n      gasPrice = await this.estimateGasPrice(10);\n    }\n\n    const minFee = calculateGasFee({\n      gasPrice: bn(gasPrice),\n      gas: minGas,\n      priceFactor: gasPriceFactor,\n      tip: transactionRequest.tip,\n    }).add(1);\n\n    let gasLimit = bn(0);\n\n    // Only Script transactions consume gas\n    if (isTransactionTypeScript(transactionRequest)) {\n      // If the gasLimit is set to 0, it means we need to estimate it.\n      gasLimit = transactionRequest.gasLimit;\n      if (transactionRequest.gasLimit.eq(0)) {\n        transactionRequest.gasLimit = minGas;\n\n        /*\n         * Adjusting the gasLimit of a transaction (TX) impacts its maxGas.\n         * Consequently, this affects the maxFee, as it is derived from the maxGas. To accurately estimate the\n         * gasLimit for a transaction, especially when the exact gas consumption is uncertain (as in an estimation dry-run),\n         * the following steps are required:\n         * 1 - Initially, set the gasLimit using the calculated minGas.\n         * 2 - Based on this initial gasLimit, calculate the maxGas.\n         * 3 - Get the maximum gas per transaction allowed by the chain, and subtract the previously calculated maxGas from this limit.\n         * 4 - The result of this subtraction should then be adopted as the new, definitive gasLimit.\n         * 5 - Recalculate the maxGas with the updated gasLimit. This new maxGas is then used to compute the maxFee.\n         * 6 - The calculated maxFee represents the safe, estimated cost required to fund the transaction.\n         */\n        transactionRequest.gasLimit = maxGasPerTx.sub(\n          transactionRequest.calculateMaxGas(chainInfo, minGas)\n        );\n\n        gasLimit = transactionRequest.gasLimit;\n      }\n    }\n    const maxGas = transactionRequest.calculateMaxGas(chainInfo, minGas);\n    const maxFee = calculateGasFee({\n      gasPrice: bn(gasPrice),\n      gas: maxGas,\n      priceFactor: gasPriceFactor,\n      tip: transactionRequest.tip,\n    }).add(1);\n\n    return {\n      minGas,\n      minFee,\n      maxGas,\n      maxFee,\n      gasPrice,\n      gasLimit,\n    };\n  }\n\n  /**\n   * Executes a signed transaction without applying the states changes\n   * on the chain.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param estimateTxParams - The estimate transaction params (optional).\n   * @returns A promise that resolves to the call result object.\n   */\n  async simulate(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = true }: EstimateTransactionParams = {}\n  ): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      return this.estimateTxDependencies(transactionRequest);\n    }\n    const encodedTransactions = [hexlify(transactionRequest.toTransactionBytes())];\n\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions,\n      utxoValidation: true,\n    });\n\n    const callResult = dryRunStatuses.map((dryRunStatus) => {\n      const { id, receipts, status } = dryRunStatus;\n\n      const processedReceipts = receipts.map(deserializeReceipt);\n\n      return { id, receipts: processedReceipts, status };\n    });\n\n    return { receipts: callResult[0].receipts };\n  }\n\n  /**\n   * @hidden\n   *\n   * Returns a transaction cost to enable user\n   * to set gasLimit and also reserve balance amounts\n   * on the transaction.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param transactionCostParams - The transaction cost parameters (optional).\n   *\n   * @returns A promise that resolves to the transaction cost object.\n   */\n  async getTransactionCost(\n    transactionRequestLike: TransactionRequestLike,\n    { signatureCallback, gasPrice: gasPriceParam }: TransactionCostParams = {}\n  ): Promise<Omit<TransactionCost, 'requiredQuantities'>> {\n    const txRequestClone = clone(transactionRequestify(transactionRequestLike));\n    const updateMaxFee = txRequestClone.maxFee.eq(0);\n    const isScriptTransaction = isTransactionTypeScript(txRequestClone);\n\n    // Remove gasLimit to avoid gasLimit when estimating predicates\n    if (isScriptTransaction) {\n      txRequestClone.gasLimit = bn(0);\n    }\n\n    const signedRequest = clone(txRequestClone);\n    let addedSignatures = 0;\n    if (signatureCallback && isTransactionTypeScript(signedRequest)) {\n      const lengthBefore = signedRequest.witnesses.length;\n      await signatureCallback(signedRequest);\n      addedSignatures = signedRequest.witnesses.length - lengthBefore;\n    }\n\n    let gasPrice: BN;\n\n    if (gasPriceParam) {\n      gasPrice = gasPriceParam;\n      await this.estimatePredicates(signedRequest);\n    } else {\n      ({ gasPrice } = await this.estimatePredicatesAndGasPrice(signedRequest, 10));\n    }\n\n    txRequestClone.updatePredicateGasUsed(signedRequest.inputs);\n\n    /**\n     * Calculate minGas and maxGas based on the real transaction\n     */\n    // eslint-disable-next-line prefer-const\n    let { maxFee, maxGas, minFee, minGas, gasLimit } = await this.estimateTxGasAndFee({\n      // Fetches and returns a gas price\n      transactionRequest: signedRequest,\n      gasPrice,\n    });\n\n    let rawReceipts: TransactionReceiptJson[] = [];\n    let receipts: TransactionResultReceipt[] = [];\n    let dryRunStatus: DryRunStatus | undefined;\n    let missingContractIds: string[] = [];\n    let outputVariables = 0;\n    let gasUsed = bn(0);\n\n    txRequestClone.maxFee = maxFee;\n    if (isScriptTransaction) {\n      txRequestClone.gasLimit = gasLimit;\n      if (signatureCallback) {\n        await signatureCallback(txRequestClone);\n      }\n\n      ({ rawReceipts, receipts, missingContractIds, outputVariables, dryRunStatus } =\n        await this.estimateTxDependencies(txRequestClone, { gasPrice }));\n\n      if (dryRunStatus && 'reason' in dryRunStatus) {\n        throw this.extractDryRunError(txRequestClone, receipts, dryRunStatus);\n      }\n\n      const { maxGasPerTx } = await this.getGasConfig();\n\n      const pristineGasUsed = getGasUsedFromReceipts(receipts);\n      gasUsed = bn(pristineGasUsed.muln(GAS_USED_MODIFIER)).max(maxGasPerTx.sub(minGas));\n      txRequestClone.gasLimit = gasUsed;\n\n      ({ maxFee, maxGas, minFee, minGas } = await this.estimateTxGasAndFee({\n        transactionRequest: txRequestClone,\n        gasPrice,\n      }));\n    }\n\n    const transactionSummary: TransactionSummaryJsonPartial = {\n      gasPrice: gasPrice.toString(),\n      receipts: rawReceipts,\n    };\n\n    return {\n      rawReceipts,\n      receipts,\n      gasUsed,\n      gasPrice,\n      minGas,\n      maxGas,\n      minFee,\n      maxFee,\n      outputVariables,\n      missingContractIds,\n      addedSignatures,\n      estimatedPredicates: txRequestClone.inputs,\n      dryRunStatus,\n      updateMaxFee,\n      transactionSummary,\n    };\n  }\n\n  /**\n   * Returns coins for the given owner.\n   *\n   * @param owner - The address to get coins for.\n   * @param assetId - The asset ID of coins to get (optional).\n   * @param paginationArgs - Pagination arguments (optional).\n   *\n   * @returns A promise that resolves to the coins.\n   */\n  async getCoins(\n    owner: AddressInput,\n    assetId?: BytesLike,\n    paginationArgs?: CursorPaginationArgs\n  ): Promise<GetCoinsResponse> {\n    const ownerAddress = new Address(owner);\n    const {\n      coins: { edges, pageInfo },\n    } = await this.operations.getCoins({\n      ...validatePaginationArgs({\n        paginationLimit: RESOURCES_PAGE_SIZE_LIMIT,\n        inputArgs: paginationArgs,\n      }),\n      filter: { owner: ownerAddress.toB256(), assetId: assetId && hexlify(assetId) },\n    });\n\n    const coins = edges.map(({ node }) => ({\n      id: node.utxoId,\n      assetId: node.assetId,\n      amount: bn(node.amount),\n      owner: ownerAddress,\n      blockCreated: bn(node.blockCreated),\n      txCreatedIdx: bn(node.txCreatedIdx),\n    }));\n\n    return {\n      coins,\n      pageInfo,\n    };\n  }\n\n  /**\n   * Returns resources for the given owner satisfying the spend query.\n   *\n   * @param owner - The address to get resources for.\n   * @param quantities - The coin quantities to get.\n   * @param excludedIds - IDs of excluded resources from the selection (optional).\n   * @returns A promise that resolves to the resources.\n   */\n  async getResourcesToSpend(\n    owner: AddressInput,\n    quantities: CoinQuantityLike[],\n    excludedIds?: ExcludeResourcesOption\n  ): Promise<Resource[]> {\n    const ownerAddress = new Address(owner);\n    let idsToExclude = {\n      messages: excludedIds?.messages?.map((nonce) => hexlify(nonce)) || [],\n      utxos: excludedIds?.utxos?.map((id) => hexlify(id)) || [],\n    };\n\n    if (this.cache) {\n      const cached = this.cache.getActiveData(ownerAddress.toB256());\n      if (cached.utxos.length || cached.messages.length) {\n        const {\n          consensusParameters: {\n            txParameters: { maxInputs },\n          },\n        } = await this.getChain();\n        idsToExclude = adjustResourcesToExclude({\n          userInput: idsToExclude,\n          cached,\n          maxInputs: maxInputs.toNumber(),\n        });\n      }\n    }\n\n    const coinsQuery = {\n      owner: ownerAddress.toB256(),\n      queryPerAsset: quantities\n        .map(coinQuantityfy)\n        .map(({ assetId, amount, max: maxPerAsset }) => ({\n          assetId: hexlify(assetId),\n          amount: (amount.eqn(0) ? bn(1) : amount).toString(10),\n          max: maxPerAsset ? maxPerAsset.toString(10) : undefined,\n        })),\n      excludedIds: idsToExclude,\n    };\n\n    const result = await this.operations.getCoinsToSpend(coinsQuery);\n\n    const coins = result.coinsToSpend\n      .flat()\n      .map((coin) => {\n        switch (coin.type) {\n          case 'MessageCoin':\n            return {\n              amount: bn(coin.amount),\n              assetId: coin.assetId,\n              daHeight: bn(coin.daHeight),\n              sender: new Address(coin.sender),\n              recipient: new Address(coin.recipient),\n              nonce: coin.nonce,\n            } as MessageCoin;\n          case 'Coin':\n            return {\n              id: coin.utxoId,\n              amount: bn(coin.amount),\n              assetId: coin.assetId,\n              owner: ownerAddress,\n              blockCreated: bn(coin.blockCreated),\n              txCreatedIdx: bn(coin.txCreatedIdx),\n            } as Coin;\n          default:\n            return null;\n        }\n      })\n      .filter((v) => !!v) as Array<Resource>;\n\n    return coins;\n  }\n\n  /**\n   * Returns an array of blobIds that exist on chain, for a given array of blobIds.\n   *\n   * @param blobIds - blobIds to check.\n   * @returns - A promise that resolves to an array of blobIds that exist on chain.\n   */\n  async getBlobs(blobIds: string[]): Promise<string[]> {\n    const res = await this.operations.getBlobs({ blobIds });\n    const blobs: (string | null)[] = [];\n\n    Object.keys(res).forEach((key) => {\n      // @ts-expect-error keys are strings\n      const val = res[key];\n      blobs.push(val?.id ?? null);\n    });\n\n    return blobs.filter((v) => v) as string[];\n  }\n\n  /**\n   * Returns block matching the given ID or height.\n   *\n   * @param idOrHeight - ID or height of the block.\n   * @returns A promise that resolves to the block or null.\n   */\n  async getBlock(idOrHeight: BigNumberish | 'latest'): Promise<Block | null> {\n    let block: GqlBlockFragment | undefined | null;\n\n    if (idOrHeight === 'latest') {\n      const {\n        chain: { latestBlock },\n      } = await this.operations.getLatestBlock();\n      block = latestBlock;\n    } else {\n      const isblockId = typeof idOrHeight === 'string' && isB256(idOrHeight);\n      const variables = isblockId\n        ? { blockId: idOrHeight }\n        : { height: bn(idOrHeight).toString(10) };\n      const response = await this.operations.getBlock(variables);\n      block = response.block;\n    }\n\n    if (!block) {\n      return null;\n    }\n\n    const { header, height, id, transactions } = block;\n\n    return {\n      id,\n      height: bn(height),\n      time: header.time,\n      header: {\n        applicationHash: header.applicationHash,\n        daHeight: bn(header.daHeight),\n        eventInboxRoot: header.eventInboxRoot,\n        messageOutboxRoot: header.messageOutboxRoot,\n        prevRoot: header.prevRoot,\n        stateTransitionBytecodeVersion: header.stateTransitionBytecodeVersion,\n        transactionsCount: header.transactionsCount,\n        transactionsRoot: header.transactionsRoot,\n      },\n      transactionIds: transactions.map((tx) => tx.id),\n    };\n  }\n\n  /**\n   * Returns all the blocks matching the given parameters.\n   *\n   * @param params - The parameters to query blocks.\n   * @returns A promise that resolves to the blocks.\n   */\n  async getBlocks(params?: CursorPaginationArgs): Promise<GetBlocksResponse> {\n    const {\n      blocks: { edges, pageInfo },\n    } = await this.operations.getBlocks({\n      ...validatePaginationArgs({\n        paginationLimit: BLOCKS_PAGE_SIZE_LIMIT,\n        inputArgs: params,\n      }),\n    });\n\n    const blocks: Block[] = edges.map(({ node: block }) => ({\n      id: block.id,\n      height: bn(block.height),\n      time: block.header.time,\n      header: {\n        applicationHash: block.header.applicationHash,\n        daHeight: bn(block.header.daHeight),\n        eventInboxRoot: block.header.eventInboxRoot,\n        messageOutboxRoot: block.header.messageOutboxRoot,\n        prevRoot: block.header.prevRoot,\n        stateTransitionBytecodeVersion: block.header.stateTransitionBytecodeVersion,\n        transactionsCount: block.header.transactionsCount,\n        transactionsRoot: block.header.transactionsRoot,\n      },\n      transactionIds: block.transactions.map((tx) => tx.id),\n    }));\n\n    return { blocks, pageInfo };\n  }\n\n  /**\n   * Returns block matching the given ID or type, including transaction data.\n   *\n   * @param idOrHeight - ID or height of the block.\n   * @returns A promise that resolves to the block.\n   */\n  async getBlockWithTransactions(\n    /** ID or height of the block */\n    idOrHeight: BigNumberish | 'latest'\n  ): Promise<(Block & { transactions: Transaction[] }) | null> {\n    let variables;\n    if (typeof idOrHeight === 'number') {\n      variables = { blockHeight: bn(idOrHeight).toString(10) };\n    } else if (idOrHeight === 'latest') {\n      variables = { blockHeight: (await this.getBlockNumber()).toString() };\n    } else if (typeof idOrHeight === 'string' && isB256(idOrHeight)) {\n      variables = { blockId: idOrHeight };\n    } else {\n      variables = { blockHeight: bn(idOrHeight).toString() };\n    }\n\n    const { block } = await this.operations.getBlockWithTransactions(variables);\n\n    if (!block) {\n      return null;\n    }\n\n    return {\n      id: block.id,\n      height: bn(block.height, 10),\n      time: block.header.time,\n      header: {\n        applicationHash: block.header.applicationHash,\n        daHeight: bn(block.header.daHeight),\n        eventInboxRoot: block.header.eventInboxRoot,\n        messageOutboxRoot: block.header.messageOutboxRoot,\n        prevRoot: block.header.prevRoot,\n        stateTransitionBytecodeVersion: block.header.stateTransitionBytecodeVersion,\n        transactionsCount: block.header.transactionsCount,\n        transactionsRoot: block.header.transactionsRoot,\n      },\n      transactionIds: block.transactions.map((tx) => tx.id),\n      transactions: block.transactions.map(\n        (tx) => new TransactionCoder().decode(arrayify(tx.rawPayload), 0)?.[0]\n      ),\n    };\n  }\n\n  /**\n   * Get transaction with the given ID.\n   *\n   * @param transactionId - ID of the transaction.\n   * @returns A promise that resolves to the transaction.\n   */\n  async getTransaction<TTransactionType = void>(\n    transactionId: string\n  ): Promise<Transaction<TTransactionType> | null> {\n    const { transaction } = await this.operations.getTransaction({ transactionId });\n\n    if (!transaction) {\n      return null;\n    }\n\n    try {\n      return new TransactionCoder().decode(\n        arrayify(transaction.rawPayload),\n        0\n      )?.[0] as Transaction<TTransactionType>;\n    } catch (error) {\n      if (error instanceof FuelError && error.code === ErrorCode.UNSUPPORTED_TRANSACTION_TYPE) {\n        // eslint-disable-next-line no-console\n        console.warn('Unsupported transaction type encountered');\n        return null;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves transactions based on the provided pagination arguments.\n   * @param paginationArgs - The pagination arguments for retrieving transactions.\n   * @returns A promise that resolves to an object containing the retrieved transactions and pagination information.\n   */\n  async getTransactions(paginationArgs?: CursorPaginationArgs): Promise<GetTransactionsResponse> {\n    const {\n      transactions: { edges, pageInfo },\n    } = await this.operations.getTransactions({\n      ...validatePaginationArgs({\n        inputArgs: paginationArgs,\n        paginationLimit: TRANSACTIONS_PAGE_SIZE_LIMIT,\n      }),\n    });\n\n    const coder = new TransactionCoder();\n    const transactions = edges\n      .map(({ node: { rawPayload } }) => {\n        try {\n          return coder.decode(arrayify(rawPayload), 0)[0];\n        } catch (error) {\n          if (error instanceof FuelError && error.code === ErrorCode.UNSUPPORTED_TRANSACTION_TYPE) {\n            // eslint-disable-next-line no-console\n            console.warn('Unsupported transaction type encountered');\n            return null;\n          }\n          throw error;\n        }\n      })\n      .filter((tx): tx is Transaction => tx !== null);\n\n    return { transactions, pageInfo };\n  }\n\n  /**\n   * Fetches a compressed block at the specified height.\n   *\n   * @param height - The height of the block to fetch.\n   * @returns The compressed block if available, otherwise `null`.\n   */\n  async daCompressedBlock(height: string) {\n    const { daCompressedBlock } = await this.operations.daCompressedBlock({\n      height,\n    });\n\n    if (!daCompressedBlock) {\n      return null;\n    }\n\n    return daCompressedBlock;\n  }\n\n  /**\n   * Get deployed contract with the given ID.\n   *\n   * @param contractId - ID of the contract.\n   * @returns A promise that resolves to the contract.\n   */\n  async getContract(contractId: string): Promise<ContractResult | null> {\n    const { contract } = await this.operations.getContract({ contractId });\n    if (!contract) {\n      return null;\n    }\n    return contract;\n  }\n\n  /**\n   * Returns the balance for the given contract for the given asset ID.\n   *\n   * @param contractId - The contract ID to get the balance for.\n   * @param assetId - The asset ID of coins to get.\n   * @returns A promise that resolves to the balance.\n   */\n  async getContractBalance(\n    /** The contract ID to get the balance for */\n    contractId: string | Address,\n    /** The asset ID of coins to get */\n    assetId: BytesLike\n  ): Promise<BN> {\n    const { contractBalance } = await this.operations.getContractBalance({\n      contract: new Address(contractId).toB256(),\n      asset: hexlify(assetId),\n    });\n    return bn(contractBalance.amount, 10);\n  }\n\n  /**\n   * Returns the balance for the given owner for the given asset ID.\n   *\n   * @param owner - The address to get coins for.\n   * @param assetId - The asset ID of coins to get.\n   * @returns A promise that resolves to the balance.\n   */\n  async getBalance(\n    /** The address to get coins for */\n    owner: AddressInput,\n    /** The asset ID of coins to get */\n    assetId: BytesLike\n  ): Promise<BN> {\n    const { balance } = await this.operations.getBalanceV2({\n      owner: new Address(owner).toB256(),\n      assetId: hexlify(assetId),\n    });\n    return bn(balance.amountU128, 10);\n  }\n\n  /**\n   * Returns balances for the given owner.\n   *\n   * @param owner - The address to get coins for.\n   * @param paginationArgs - Pagination arguments (optional).\n   * @returns A promise that resolves to the balances.\n   */\n  async getBalances(\n    owner: string | Address,\n    paginationArgs?: CursorPaginationArgs\n  ): Promise<GetBalancesResponse> {\n    // The largest possible size allowed by the node.\n    let args: CursorPaginationArgs = { first: NON_PAGINATED_BALANCES_SIZE };\n\n    const { balancesPagination: supportsPagination } = await this.getNodeFeatures();\n\n    if (supportsPagination) {\n      // If the node supports pagination, we use the provided pagination arguments.\n      args = validatePaginationArgs({\n        inputArgs: paginationArgs,\n        paginationLimit: BALANCES_PAGE_SIZE_LIMIT,\n      });\n    }\n\n    const {\n      balances: { edges, pageInfo },\n    } = await this.operations.getBalancesV2({\n      ...args,\n      filter: { owner: new Address(owner).toB256() },\n      supportsPagination,\n    });\n\n    const balances = edges.map(({ node }) => ({\n      assetId: node.assetId,\n      amount: bn(node.amountU128),\n    }));\n\n    return {\n      balances,\n      ...(supportsPagination ? { pageInfo } : {}),\n    };\n  }\n\n  /**\n   * Returns message for the given address.\n   *\n   * @param address - The address to get message from.\n   * @param paginationArgs - Pagination arguments (optional).\n   * @returns A promise that resolves to the messages.\n   */\n  async getMessages(\n    address: AddressInput,\n    paginationArgs?: CursorPaginationArgs\n  ): Promise<GetMessagesResponse> {\n    const {\n      messages: { edges, pageInfo },\n    } = await this.operations.getMessages({\n      ...validatePaginationArgs({\n        inputArgs: paginationArgs,\n        paginationLimit: RESOURCES_PAGE_SIZE_LIMIT,\n      }),\n      owner: new Address(address).toB256(),\n    });\n\n    const messages = edges.map(({ node }) => ({\n      messageId: InputMessageCoder.getMessageId({\n        sender: node.sender,\n        recipient: node.recipient,\n        nonce: node.nonce,\n        amount: bn(node.amount),\n        data: node.data,\n      }),\n      sender: new Address(node.sender),\n      recipient: new Address(node.recipient),\n      nonce: node.nonce,\n      amount: bn(node.amount),\n      data: InputMessageCoder.decodeData(node.data),\n      daHeight: bn(node.daHeight),\n    }));\n\n    return {\n      messages,\n      pageInfo,\n    };\n  }\n\n  /**\n   * Returns Message Proof for given transaction id and the message id from MessageOut receipt.\n   *\n   * @param transactionId - The transaction to get message from.\n   * @param messageId - The message id from MessageOut receipt.\n   * @param commitBlockId - The commit block id (optional).\n   * @param commitBlockHeight - The commit block height (optional).\n   * @returns A promise that resolves to the message proof.\n   */\n  async getMessageProof(\n    transactionId: string,\n    nonce: string,\n    commitBlockId?: string,\n    commitBlockHeight?: BN\n  ): Promise<MessageProof> {\n    let inputObject: {\n      /** The transaction to get message from */\n      transactionId: string;\n      /** The message id from MessageOut receipt */\n      nonce: string;\n      commitBlockId?: string;\n      commitBlockHeight?: string;\n    } = {\n      transactionId,\n      nonce,\n    };\n\n    if (commitBlockId && commitBlockHeight) {\n      throw new FuelError(\n        ErrorCode.INVALID_INPUT_PARAMETERS,\n        'commitBlockId and commitBlockHeight cannot be used together'\n      );\n    }\n\n    if (commitBlockId) {\n      inputObject = {\n        ...inputObject,\n        commitBlockId,\n      };\n    }\n\n    if (commitBlockHeight) {\n      inputObject = {\n        ...inputObject,\n        // Convert BN into a number string required on the query\n        // This should probably be fixed on the fuel client side\n        commitBlockHeight: commitBlockHeight.toNumber().toString(),\n      };\n    }\n\n    const result = await this.operations.getMessageProof(inputObject);\n\n    const {\n      messageProof,\n      messageBlockHeader,\n      commitBlockHeader,\n      blockProof,\n      sender,\n      recipient,\n      amount,\n      data,\n    } = result.messageProof;\n\n    return {\n      messageProof: {\n        proofIndex: bn(messageProof.proofIndex),\n        proofSet: messageProof.proofSet,\n      },\n      blockProof: {\n        proofIndex: bn(blockProof.proofIndex),\n        proofSet: blockProof.proofSet,\n      },\n      messageBlockHeader: {\n        id: messageBlockHeader.id,\n        daHeight: bn(messageBlockHeader.daHeight),\n        transactionsCount: Number(messageBlockHeader.transactionsCount),\n        transactionsRoot: messageBlockHeader.transactionsRoot,\n        height: bn(messageBlockHeader.height),\n        prevRoot: messageBlockHeader.prevRoot,\n        time: messageBlockHeader.time,\n        applicationHash: messageBlockHeader.applicationHash,\n        messageReceiptCount: Number(messageBlockHeader.messageReceiptCount),\n        messageOutboxRoot: messageBlockHeader.messageOutboxRoot,\n        consensusParametersVersion: Number(messageBlockHeader.consensusParametersVersion),\n        eventInboxRoot: messageBlockHeader.eventInboxRoot,\n        stateTransitionBytecodeVersion: Number(messageBlockHeader.stateTransitionBytecodeVersion),\n      },\n      commitBlockHeader: {\n        id: commitBlockHeader.id,\n        daHeight: bn(commitBlockHeader.daHeight),\n        transactionsCount: Number(commitBlockHeader.transactionsCount),\n        transactionsRoot: commitBlockHeader.transactionsRoot,\n        height: bn(commitBlockHeader.height),\n        prevRoot: commitBlockHeader.prevRoot,\n        time: commitBlockHeader.time,\n        applicationHash: commitBlockHeader.applicationHash,\n        messageReceiptCount: Number(commitBlockHeader.messageReceiptCount),\n        messageOutboxRoot: commitBlockHeader.messageOutboxRoot,\n        consensusParametersVersion: Number(commitBlockHeader.consensusParametersVersion),\n        eventInboxRoot: commitBlockHeader.eventInboxRoot,\n        stateTransitionBytecodeVersion: Number(commitBlockHeader.stateTransitionBytecodeVersion),\n      },\n      sender: new Address(sender),\n      recipient: new Address(recipient),\n      nonce,\n      amount: bn(amount),\n      data,\n    };\n  }\n\n  /**\n   * Get the latest gas price from the node.\n   *\n   * @returns A promise that resolves to the latest gas price.\n   */\n  async getLatestGasPrice(): Promise<BN> {\n    const { latestGasPrice } = await this.operations.getLatestGasPrice();\n    return bn(latestGasPrice.gasPrice);\n  }\n\n  /**\n   * Returns the estimate gas price for the given block horizon.\n   *\n   * @param blockHorizon - The block horizon to estimate gas price for.\n   * @returns A promise that resolves to the estimated gas price.\n   */\n  async estimateGasPrice(blockHorizon: number): Promise<BN> {\n    const { estimateGasPrice } = await this.operations.estimateGasPrice({\n      blockHorizon: String(blockHorizon),\n    });\n    return bn(estimateGasPrice.gasPrice);\n  }\n\n  /**\n   * Returns Message Proof for given transaction id and the message id from MessageOut receipt.\n   *\n   * @param nonce - The nonce of the message to get status from.\n   * @returns A promise that resolves to the message status\n   */\n  async getMessageStatus(\n    /** The nonce of the message to get status from */\n    nonce: string\n  ): Promise<MessageStatus> {\n    const result = await this.operations.getMessageStatus({ nonce });\n    return result.messageStatus;\n  }\n\n  /**\n   * Lets you produce blocks with custom timestamps and the block number of the last block produced.\n   *\n   * @param amount - The amount of blocks to produce.\n   * @param startTime - The UNIX timestamp (milliseconds) to set for the first produced block (optional).\n   * @returns A promise that resolves to the block number of the last produced block.\n   */\n  async produceBlocks(amount: number, startTime?: number) {\n    const { produceBlocks: latestBlockHeight } = await this.operations.produceBlocks({\n      blocksToProduce: bn(amount).toString(10),\n      startTimestamp: startTime ? DateTime.fromUnixMilliseconds(startTime).toTai64() : undefined,\n    });\n    return bn(latestBlockHeight);\n  }\n\n  /**\n   * Check if the given ID is an account.\n   *\n   * @param id - The ID to check.\n   * @returns A promise that resolves to the result of the check.\n   */\n  async isUserAccount(id: string): Promise<boolean> {\n    const type = await this.getAddressType(id);\n    return type === 'Account';\n  }\n\n  /**\n   * Determines the type of address based on the provided ID.\n   *\n   * @param id - The ID to be checked.\n   * @returns A promise that resolves to a string indicating the type of address.\n   */\n  async getAddressType(id: string): Promise<GetAddressTypeResponse> {\n    const { contract, blob, transaction } = await this.operations.isUserAccount({\n      blobId: id,\n      contractId: id,\n      transactionId: id,\n    });\n\n    if (contract) {\n      return 'Contract';\n    }\n    if (blob) {\n      return 'Blob';\n    }\n    if (transaction) {\n      return 'Transaction';\n    }\n\n    try {\n      // Unlike the previous queries this one will throw if the ID is not an assetId\n      const asset = await this.getAssetDetails(id);\n      if (asset) {\n        return 'Asset';\n      }\n    } catch (e) {}\n\n    return 'Account';\n  }\n\n  /**\n   * Get the transaction response for the given transaction ID.\n   *\n   * @param transactionId - The transaction ID to get the response for.\n   * @returns A promise that resolves to the transaction response.\n   */\n\n  async getTransactionResponse(transactionId: string): Promise<TransactionResponse> {\n    const chainId = await this.getChainId();\n    return new TransactionResponse(transactionId, this, chainId);\n  }\n\n  /**\n   * Returns Message for given nonce.\n   *\n   * @param nonce - The nonce of the message to retrieve.\n   * @returns A promise that resolves to the Message object or null.\n   */\n  async getMessageByNonce(nonce: string): Promise<Message | null> {\n    const { message: rawMessage } = await this.operations.getMessageByNonce({ nonce });\n\n    if (!rawMessage) {\n      return null;\n    }\n\n    const message: Message = {\n      messageId: InputMessageCoder.getMessageId({\n        sender: rawMessage.sender,\n        recipient: rawMessage.recipient,\n        nonce,\n        amount: bn(rawMessage.amount),\n        data: rawMessage.data,\n      }),\n      sender: new Address(rawMessage.sender),\n      recipient: new Address(rawMessage.recipient),\n      nonce,\n      amount: bn(rawMessage.amount),\n      data: InputMessageCoder.decodeData(rawMessage.data),\n      daHeight: bn(rawMessage.daHeight),\n    };\n\n    return message;\n  }\n\n  /**\n   * Get the relayed transaction for the given transaction ID.\n   *\n   * @param relayedTransactionId - The relayed transaction ID to get the response for.\n   * @returns A promise that resolves to the relayed transaction.\n   */\n  async getRelayedTransactionStatus(\n    relayedTransactionId: string\n  ): Promise<GqlRelayedTransactionFailed | null> {\n    const { relayedTransactionStatus } = await this.operations.getRelayedTransactionStatus({\n      relayedTransactionId,\n    });\n\n    if (!relayedTransactionStatus) {\n      return null;\n    }\n\n    return relayedTransactionStatus;\n  }\n\n  /**\n   * @hidden\n   */\n  private extractDryRunError(\n    transactionRequest: ScriptTransactionRequest,\n    receipts: TransactionResultReceipt[],\n    dryRunStatus: DryRunStatus\n  ): FuelError {\n    const status = dryRunStatus as DryRunFailureStatusFragment;\n    let logs: DecodedLogs['logs'] = [];\n    let groupedLogs: DecodedLogs['groupedLogs'] = {};\n\n    if (transactionRequest.abis) {\n      ({ logs, groupedLogs } = getAllDecodedLogs({\n        receipts,\n        mainAbi: transactionRequest.abis.main,\n        externalAbis: transactionRequest.abis.otherContractsAbis,\n      }));\n    }\n\n    return extractTxError({\n      logs,\n      groupedLogs,\n      receipts,\n      statusReason: status.reason,\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  async getNodeFeatures() {\n    const { indexation } = await this.getNode();\n\n    return {\n      assetMetadata: Boolean(indexation?.assetMetadata),\n      balancesPagination: Boolean(indexation?.balances),\n      coinsToSpend: Boolean(indexation?.coinsToSpend),\n    };\n  }\n\n  /**\n   * @hidden\n   */\n  private parseEstimatePredicatesResponse<T extends TransactionRequest>(\n    transactionRequest: T,\n    { inputs }: GqlEstimatePredicatesQuery['estimatePredicates']\n  ): T {\n    if (inputs) {\n      inputs.forEach((input, i) => {\n        if (input && 'predicateGasUsed' in input && bn(input.predicateGasUsed).gt(0)) {\n          // eslint-disable-next-line no-param-reassign\n          (<CoinTransactionRequestInput>transactionRequest.inputs[i]).predicateGasUsed =\n            input.predicateGasUsed;\n        }\n      });\n    }\n\n    return transactionRequest;\n  }\n}\n", "import type { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };\nexport type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string; }\n  String: { input: string; output: string; }\n  Boolean: { input: boolean; output: boolean; }\n  Int: { input: number; output: number; }\n  Float: { input: number; output: number; }\n  Address: { input: string; output: string; }\n  AssetId: { input: string; output: string; }\n  BlobId: { input: any; output: any; }\n  BlockId: { input: string; output: string; }\n  Bytes32: { input: string; output: string; }\n  ContractId: { input: string; output: string; }\n  HexString: { input: string; output: string; }\n  Nonce: { input: string; output: string; }\n  RelayedTransactionId: { input: string; output: string; }\n  Salt: { input: string; output: string; }\n  Signature: { input: string; output: string; }\n  SubId: { input: string; output: string; }\n  Tai64Timestamp: { input: string; output: string; }\n  TransactionId: { input: string; output: string; }\n  TxPointer: { input: string; output: string; }\n  U16: { input: string; output: string; }\n  U32: { input: string; output: string; }\n  U64: { input: string; output: string; }\n  U128: { input: string; output: string; }\n  UtxoId: { input: string; output: string; }\n};\n\nexport type GqlAssetInfoDetails = {\n  contractId: Scalars['ContractId']['output'];\n  subId: Scalars['SubId']['output'];\n  totalSupply: Scalars['U128']['output'];\n};\n\nexport type GqlBalance = {\n  amount: Scalars['U64']['output'];\n  amountU128: Scalars['U128']['output'];\n  assetId: Scalars['AssetId']['output'];\n  owner: Scalars['Address']['output'];\n};\n\nexport type GqlBalanceConnection = {\n  /** A list of edges. */\n  edges: Array<GqlBalanceEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlBalance>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlBalanceEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlBalance;\n};\n\nexport type GqlBalanceFilterInput = {\n  /** Filter coins based on the `owner` field */\n  owner: Scalars['Address']['input'];\n};\n\nexport type GqlBlob = {\n  bytecode: Scalars['HexString']['output'];\n  id: Scalars['BlobId']['output'];\n};\n\nexport type GqlBlock = {\n  consensus: GqlConsensus;\n  header: GqlHeader;\n  height: Scalars['U32']['output'];\n  id: Scalars['BlockId']['output'];\n  transactionIds: Array<Scalars['TransactionId']['output']>;\n  transactions: Array<GqlTransaction>;\n  version: GqlBlockVersion;\n};\n\nexport type GqlBlockConnection = {\n  /** A list of edges. */\n  edges: Array<GqlBlockEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlBlock>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlBlockEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlBlock;\n};\n\nexport enum GqlBlockVersion {\n  V1 = 'V1'\n}\n\n/** Breakpoint, defined as a tuple of contract ID and relative PC offset inside it */\nexport type GqlBreakpoint = {\n  contract: Scalars['ContractId']['input'];\n  pc: Scalars['U64']['input'];\n};\n\nexport type GqlChainInfo = {\n  consensusParameters: GqlConsensusParameters;\n  daHeight: Scalars['U64']['output'];\n  gasCosts: GqlGasCosts;\n  latestBlock: GqlBlock;\n  name: Scalars['String']['output'];\n};\n\nexport type GqlChangeOutput = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  to: Scalars['Address']['output'];\n};\n\nexport type GqlCoin = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  /** TxPointer - the height of the block this coin was created in */\n  blockCreated: Scalars['U32']['output'];\n  owner: Scalars['Address']['output'];\n  /** TxPointer - the index of the transaction that created this coin */\n  txCreatedIdx: Scalars['U16']['output'];\n  utxoId: Scalars['UtxoId']['output'];\n};\n\nexport type GqlCoinConnection = {\n  /** A list of edges. */\n  edges: Array<GqlCoinEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlCoin>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlCoinEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlCoin;\n};\n\nexport type GqlCoinFilterInput = {\n  /** Returns coins only with `asset_id`. */\n  assetId?: InputMaybe<Scalars['AssetId']['input']>;\n  /** Returns coins owned by the `owner`. */\n  owner: Scalars['Address']['input'];\n};\n\nexport type GqlCoinOutput = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  to: Scalars['Address']['output'];\n};\n\n/** The schema analog of the [`coins::CoinType`]. */\nexport type GqlCoinType = GqlCoin | GqlMessageCoin;\n\nexport type GqlConsensus = GqlGenesis | GqlPoAConsensus;\n\nexport type GqlConsensusParameters = {\n  baseAssetId: Scalars['AssetId']['output'];\n  blockGasLimit: Scalars['U64']['output'];\n  blockTransactionSizeLimit: Scalars['U64']['output'];\n  chainId: Scalars['U64']['output'];\n  contractParams: GqlContractParameters;\n  feeParams: GqlFeeParameters;\n  gasCosts: GqlGasCosts;\n  predicateParams: GqlPredicateParameters;\n  privilegedAddress: Scalars['Address']['output'];\n  scriptParams: GqlScriptParameters;\n  txParams: GqlTxParameters;\n  version: GqlConsensusParametersVersion;\n};\n\nexport type GqlConsensusParametersPurpose = {\n  checksum: Scalars['Bytes32']['output'];\n  witnessIndex: Scalars['U16']['output'];\n};\n\nexport enum GqlConsensusParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlContract = {\n  bytecode: Scalars['HexString']['output'];\n  id: Scalars['ContractId']['output'];\n  salt: Scalars['Salt']['output'];\n};\n\nexport type GqlContractBalance = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  contract: Scalars['ContractId']['output'];\n};\n\nexport type GqlContractBalanceConnection = {\n  /** A list of edges. */\n  edges: Array<GqlContractBalanceEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlContractBalance>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlContractBalanceEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlContractBalance;\n};\n\nexport type GqlContractBalanceFilterInput = {\n  /** Filter assets based on the `contractId` field */\n  contract: Scalars['ContractId']['input'];\n};\n\nexport type GqlContractCreated = {\n  contract: Scalars['ContractId']['output'];\n  stateRoot: Scalars['Bytes32']['output'];\n};\n\nexport type GqlContractOutput = {\n  balanceRoot: Scalars['Bytes32']['output'];\n  inputIndex: Scalars['U16']['output'];\n  stateRoot: Scalars['Bytes32']['output'];\n};\n\nexport type GqlContractParameters = {\n  contractMaxSize: Scalars['U64']['output'];\n  maxStorageSlots: Scalars['U64']['output'];\n  version: GqlContractParametersVersion;\n};\n\nexport enum GqlContractParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlDaCompressedBlock = {\n  bytes: Scalars['HexString']['output'];\n};\n\nexport type GqlDependentCost = GqlHeavyOperation | GqlLightOperation;\n\nexport type GqlDryRunFailureStatus = {\n  programState?: Maybe<GqlProgramState>;\n  reason: Scalars['String']['output'];\n  receipts: Array<GqlReceipt>;\n  totalFee: Scalars['U64']['output'];\n  totalGas: Scalars['U64']['output'];\n};\n\nexport type GqlDryRunSuccessStatus = {\n  programState?: Maybe<GqlProgramState>;\n  receipts: Array<GqlReceipt>;\n  totalFee: Scalars['U64']['output'];\n  totalGas: Scalars['U64']['output'];\n};\n\nexport type GqlDryRunTransactionExecutionStatus = {\n  id: Scalars['TransactionId']['output'];\n  receipts: Array<GqlReceipt>;\n  status: GqlDryRunTransactionStatus;\n};\n\nexport type GqlDryRunTransactionStatus = GqlDryRunFailureStatus | GqlDryRunSuccessStatus;\n\nexport type GqlEstimateGasPrice = {\n  gasPrice: Scalars['U64']['output'];\n};\n\nexport type GqlExcludeInput = {\n  /** Messages to exclude from the selection. */\n  messages: Array<Scalars['Nonce']['input']>;\n  /** Utxos to exclude from the selection. */\n  utxos: Array<Scalars['UtxoId']['input']>;\n};\n\nexport type GqlFailureStatus = {\n  block: GqlBlock;\n  blockHeight: Scalars['U32']['output'];\n  programState?: Maybe<GqlProgramState>;\n  reason: Scalars['String']['output'];\n  receipts: Array<GqlReceipt>;\n  time: Scalars['Tai64Timestamp']['output'];\n  totalFee: Scalars['U64']['output'];\n  totalGas: Scalars['U64']['output'];\n  transaction: GqlTransaction;\n  transactionId: Scalars['TransactionId']['output'];\n};\n\nexport type GqlFeeParameters = {\n  gasPerByte: Scalars['U64']['output'];\n  gasPriceFactor: Scalars['U64']['output'];\n  version: GqlFeeParametersVersion;\n};\n\nexport enum GqlFeeParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlGasCosts = {\n  add: Scalars['U64']['output'];\n  addi: Scalars['U64']['output'];\n  aloc: Scalars['U64']['output'];\n  alocDependentCost: GqlDependentCost;\n  and: Scalars['U64']['output'];\n  andi: Scalars['U64']['output'];\n  bal: Scalars['U64']['output'];\n  bhei: Scalars['U64']['output'];\n  bhsh: Scalars['U64']['output'];\n  bldd?: Maybe<GqlDependentCost>;\n  bsiz?: Maybe<GqlDependentCost>;\n  burn: Scalars['U64']['output'];\n  call: GqlDependentCost;\n  cb: Scalars['U64']['output'];\n  ccp: GqlDependentCost;\n  cfe: GqlDependentCost;\n  cfei: Scalars['U64']['output'];\n  cfeiDependentCost: GqlDependentCost;\n  cfsi: Scalars['U64']['output'];\n  contractRoot: GqlDependentCost;\n  croo: GqlDependentCost;\n  csiz: GqlDependentCost;\n  div: Scalars['U64']['output'];\n  divi: Scalars['U64']['output'];\n  eck1: Scalars['U64']['output'];\n  ecop?: Maybe<Scalars['U64']['output']>;\n  ecr1: Scalars['U64']['output'];\n  ed19: Scalars['U64']['output'];\n  ed19DependentCost: GqlDependentCost;\n  epar?: Maybe<GqlDependentCost>;\n  eq: Scalars['U64']['output'];\n  exp: Scalars['U64']['output'];\n  expi: Scalars['U64']['output'];\n  flag: Scalars['U64']['output'];\n  gm: Scalars['U64']['output'];\n  gt: Scalars['U64']['output'];\n  gtf: Scalars['U64']['output'];\n  ji: Scalars['U64']['output'];\n  jmp: Scalars['U64']['output'];\n  jmpb: Scalars['U64']['output'];\n  jmpf: Scalars['U64']['output'];\n  jne: Scalars['U64']['output'];\n  jneb: Scalars['U64']['output'];\n  jnef: Scalars['U64']['output'];\n  jnei: Scalars['U64']['output'];\n  jnzb: Scalars['U64']['output'];\n  jnzf: Scalars['U64']['output'];\n  jnzi: Scalars['U64']['output'];\n  k256: GqlDependentCost;\n  lb: Scalars['U64']['output'];\n  ldc: GqlDependentCost;\n  log: Scalars['U64']['output'];\n  logd: GqlDependentCost;\n  lt: Scalars['U64']['output'];\n  lw: Scalars['U64']['output'];\n  mcl: GqlDependentCost;\n  mcli: GqlDependentCost;\n  mcp: GqlDependentCost;\n  mcpi: GqlDependentCost;\n  meq: GqlDependentCost;\n  mint: Scalars['U64']['output'];\n  mldv: Scalars['U64']['output'];\n  mlog: Scalars['U64']['output'];\n  modOp: Scalars['U64']['output'];\n  modi: Scalars['U64']['output'];\n  moveOp: Scalars['U64']['output'];\n  movi: Scalars['U64']['output'];\n  mroo: Scalars['U64']['output'];\n  mul: Scalars['U64']['output'];\n  muli: Scalars['U64']['output'];\n  newStoragePerByte: Scalars['U64']['output'];\n  noop: Scalars['U64']['output'];\n  not: Scalars['U64']['output'];\n  or: Scalars['U64']['output'];\n  ori: Scalars['U64']['output'];\n  poph: Scalars['U64']['output'];\n  popl: Scalars['U64']['output'];\n  pshh: Scalars['U64']['output'];\n  pshl: Scalars['U64']['output'];\n  ret: Scalars['U64']['output'];\n  retd: GqlDependentCost;\n  rvrt: Scalars['U64']['output'];\n  s256: GqlDependentCost;\n  sb: Scalars['U64']['output'];\n  scwq: GqlDependentCost;\n  sll: Scalars['U64']['output'];\n  slli: Scalars['U64']['output'];\n  smo: GqlDependentCost;\n  srl: Scalars['U64']['output'];\n  srli: Scalars['U64']['output'];\n  srw: Scalars['U64']['output'];\n  srwq: GqlDependentCost;\n  stateRoot: GqlDependentCost;\n  sub: Scalars['U64']['output'];\n  subi: Scalars['U64']['output'];\n  sw: Scalars['U64']['output'];\n  sww: Scalars['U64']['output'];\n  swwq: GqlDependentCost;\n  time: Scalars['U64']['output'];\n  tr: Scalars['U64']['output'];\n  tro: Scalars['U64']['output'];\n  version: GqlGasCostsVersion;\n  vmInitialization: GqlDependentCost;\n  wdam: Scalars['U64']['output'];\n  wdcm: Scalars['U64']['output'];\n  wddv: Scalars['U64']['output'];\n  wdmd: Scalars['U64']['output'];\n  wdml: Scalars['U64']['output'];\n  wdmm: Scalars['U64']['output'];\n  wdop: Scalars['U64']['output'];\n  wqam: Scalars['U64']['output'];\n  wqcm: Scalars['U64']['output'];\n  wqdv: Scalars['U64']['output'];\n  wqmd: Scalars['U64']['output'];\n  wqml: Scalars['U64']['output'];\n  wqmm: Scalars['U64']['output'];\n  wqop: Scalars['U64']['output'];\n  xor: Scalars['U64']['output'];\n  xori: Scalars['U64']['output'];\n};\n\nexport enum GqlGasCostsVersion {\n  V1 = 'V1'\n}\n\nexport type GqlGenesis = {\n  /**\n   * The chain configs define what consensus type to use, what settlement layer to use,\n   * rules of block validity, etc.\n   */\n  chainConfigHash: Scalars['Bytes32']['output'];\n  /** The Binary Merkle Tree root of all genesis coins. */\n  coinsRoot: Scalars['Bytes32']['output'];\n  /** The Binary Merkle Tree root of state, balances, contracts code hash of each contract. */\n  contractsRoot: Scalars['Bytes32']['output'];\n  /** The Binary Merkle Tree root of all genesis messages. */\n  messagesRoot: Scalars['Bytes32']['output'];\n  /** The Binary Merkle Tree root of all processed transaction ids. */\n  transactionsRoot: Scalars['Bytes32']['output'];\n};\n\nexport type GqlHeader = {\n  /** Hash of the application header. */\n  applicationHash: Scalars['Bytes32']['output'];\n  /** The version of the consensus parameters used to create this block. */\n  consensusParametersVersion: Scalars['U32']['output'];\n  /** The layer 1 height of messages and events to include since the last layer 1 block number. */\n  daHeight: Scalars['U64']['output'];\n  /** Merkle root of inbox events in this block. */\n  eventInboxRoot: Scalars['Bytes32']['output'];\n  /** Fuel block height. */\n  height: Scalars['U32']['output'];\n  /** Hash of the header */\n  id: Scalars['BlockId']['output'];\n  /** Merkle root of message receipts in this block. */\n  messageOutboxRoot: Scalars['Bytes32']['output'];\n  /** Number of message receipts in this block. */\n  messageReceiptCount: Scalars['U32']['output'];\n  /** Merkle root of all previous block header hashes. */\n  prevRoot: Scalars['Bytes32']['output'];\n  /** The version of the state transition bytecode used to create this block. */\n  stateTransitionBytecodeVersion: Scalars['U32']['output'];\n  /** The block producer time. */\n  time: Scalars['Tai64Timestamp']['output'];\n  /** Number of transactions in this block. */\n  transactionsCount: Scalars['U16']['output'];\n  /** Merkle root of transactions. */\n  transactionsRoot: Scalars['Bytes32']['output'];\n  /** Version of the header */\n  version: GqlHeaderVersion;\n};\n\nexport enum GqlHeaderVersion {\n  V1 = 'V1'\n}\n\nexport type GqlHeavyOperation = {\n  base: Scalars['U64']['output'];\n  gasPerUnit: Scalars['U64']['output'];\n};\n\nexport type GqlIndexationFlags = {\n  /** Is asset metadata indexation enabled */\n  assetMetadata: Scalars['Boolean']['output'];\n  /** Is balances indexation enabled */\n  balances: Scalars['Boolean']['output'];\n  /** Is coins to spend indexation enabled */\n  coinsToSpend: Scalars['Boolean']['output'];\n};\n\nexport type GqlInput = GqlInputCoin | GqlInputContract | GqlInputMessage;\n\nexport type GqlInputCoin = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  owner: Scalars['Address']['output'];\n  predicate: Scalars['HexString']['output'];\n  predicateData: Scalars['HexString']['output'];\n  predicateGasUsed: Scalars['U64']['output'];\n  txPointer: Scalars['TxPointer']['output'];\n  utxoId: Scalars['UtxoId']['output'];\n  witnessIndex: Scalars['Int']['output'];\n};\n\nexport type GqlInputContract = {\n  balanceRoot: Scalars['Bytes32']['output'];\n  contractId: Scalars['ContractId']['output'];\n  stateRoot: Scalars['Bytes32']['output'];\n  txPointer: Scalars['TxPointer']['output'];\n  utxoId: Scalars['UtxoId']['output'];\n};\n\nexport type GqlInputMessage = {\n  amount: Scalars['U64']['output'];\n  data: Scalars['HexString']['output'];\n  nonce: Scalars['Nonce']['output'];\n  predicate: Scalars['HexString']['output'];\n  predicateData: Scalars['HexString']['output'];\n  predicateGasUsed: Scalars['U64']['output'];\n  recipient: Scalars['Address']['output'];\n  sender: Scalars['Address']['output'];\n  witnessIndex: Scalars['U16']['output'];\n};\n\nexport type GqlLatestGasPrice = {\n  blockHeight: Scalars['U32']['output'];\n  gasPrice: Scalars['U64']['output'];\n};\n\nexport type GqlLightOperation = {\n  base: Scalars['U64']['output'];\n  unitsPerGas: Scalars['U64']['output'];\n};\n\nexport type GqlMerkleProof = {\n  proofIndex: Scalars['U64']['output'];\n  proofSet: Array<Scalars['Bytes32']['output']>;\n};\n\nexport type GqlMessage = {\n  amount: Scalars['U64']['output'];\n  daHeight: Scalars['U64']['output'];\n  data: Scalars['HexString']['output'];\n  nonce: Scalars['Nonce']['output'];\n  recipient: Scalars['Address']['output'];\n  sender: Scalars['Address']['output'];\n};\n\nexport type GqlMessageCoin = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  daHeight: Scalars['U64']['output'];\n  nonce: Scalars['Nonce']['output'];\n  recipient: Scalars['Address']['output'];\n  sender: Scalars['Address']['output'];\n};\n\nexport type GqlMessageConnection = {\n  /** A list of edges. */\n  edges: Array<GqlMessageEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlMessage>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlMessageEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlMessage;\n};\n\nexport type GqlMessageProof = {\n  amount: Scalars['U64']['output'];\n  blockProof: GqlMerkleProof;\n  commitBlockHeader: GqlHeader;\n  data: Scalars['HexString']['output'];\n  messageBlockHeader: GqlHeader;\n  messageProof: GqlMerkleProof;\n  nonce: Scalars['Nonce']['output'];\n  recipient: Scalars['Address']['output'];\n  sender: Scalars['Address']['output'];\n};\n\nexport enum GqlMessageState {\n  NotFound = 'NOT_FOUND',\n  Spent = 'SPENT',\n  Unspent = 'UNSPENT'\n}\n\nexport type GqlMessageStatus = {\n  state: GqlMessageState;\n};\n\nexport type GqlMutation = {\n  /**\n   * Resume execution of the VM instance after a breakpoint.\n   * Runs until the next breakpoint or until the transaction completes.\n   */\n  continueTx: GqlRunResult;\n  /** Execute a dry-run of multiple transactions using a fork of current state, no changes are committed. */\n  dryRun: Array<GqlDryRunTransactionExecutionStatus>;\n  /** End debugger session. */\n  endSession: Scalars['Boolean']['output'];\n  /** Execute a single fuel-asm instruction. */\n  execute: Scalars['Boolean']['output'];\n  /**\n   * Sequentially produces `blocks_to_produce` blocks. The first block starts with\n   * `start_timestamp`. If the block production in the [`crate::service::Config`] is\n   * `Trigger::Interval { block_time }`, produces blocks with `block_time ` intervals between\n   * them. The `start_timestamp` is the timestamp in seconds.\n   */\n  produceBlocks: Scalars['U32']['output'];\n  /** Reset the VM instance to the initial state. */\n  reset: Scalars['Boolean']['output'];\n  /** Set a breakpoint for a VM instance. */\n  setBreakpoint: Scalars['Boolean']['output'];\n  /** Set single-stepping mode for the VM instance. */\n  setSingleStepping: Scalars['Boolean']['output'];\n  /**\n   * Initialize a new debugger session, returning its ID.\n   * A new VM instance is spawned for each session.\n   * The session is run in a separate database transaction,\n   * on top of the most recent node state.\n   */\n  startSession: Scalars['ID']['output'];\n  /**\n   * Run a single transaction in given session until it\n   * hits a breakpoint or completes.\n   */\n  startTx: GqlRunResult;\n  /**\n   * Submits transaction to the `TxPool`.\n   *\n   * Returns submitted transaction if the transaction is included in the `TxPool` without problems.\n   */\n  submit: GqlTransaction;\n};\n\n\nexport type GqlMutationContinueTxArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type GqlMutationDryRunArgs = {\n  gasPrice?: InputMaybe<Scalars['U64']['input']>;\n  txs: Array<Scalars['HexString']['input']>;\n  utxoValidation?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\nexport type GqlMutationEndSessionArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type GqlMutationExecuteArgs = {\n  id: Scalars['ID']['input'];\n  op: Scalars['String']['input'];\n};\n\n\nexport type GqlMutationProduceBlocksArgs = {\n  blocksToProduce: Scalars['U32']['input'];\n  startTimestamp?: InputMaybe<Scalars['Tai64Timestamp']['input']>;\n};\n\n\nexport type GqlMutationResetArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type GqlMutationSetBreakpointArgs = {\n  breakpoint: GqlBreakpoint;\n  id: Scalars['ID']['input'];\n};\n\n\nexport type GqlMutationSetSingleSteppingArgs = {\n  enable: Scalars['Boolean']['input'];\n  id: Scalars['ID']['input'];\n};\n\n\nexport type GqlMutationStartTxArgs = {\n  id: Scalars['ID']['input'];\n  txJson: Scalars['String']['input'];\n};\n\n\nexport type GqlMutationSubmitArgs = {\n  tx: Scalars['HexString']['input'];\n};\n\nexport type GqlNodeInfo = {\n  indexation: GqlIndexationFlags;\n  maxDepth: Scalars['U64']['output'];\n  maxGas: Scalars['U64']['output'];\n  maxSize: Scalars['U64']['output'];\n  maxTx: Scalars['U64']['output'];\n  nodeVersion: Scalars['String']['output'];\n  peers: Array<GqlPeerInfo>;\n  txPoolStats: GqlTxPoolStats;\n  utxoValidation: Scalars['Boolean']['output'];\n  vmBacktrace: Scalars['Boolean']['output'];\n};\n\nexport type GqlOutput = GqlChangeOutput | GqlCoinOutput | GqlContractCreated | GqlContractOutput | GqlVariableOutput;\n\n/**\n * A separate `Breakpoint` type to be used as an output, as a single\n * type cannot act as both input and output type in async-graphql\n */\nexport type GqlOutputBreakpoint = {\n  contract: Scalars['ContractId']['output'];\n  pc: Scalars['U64']['output'];\n};\n\n/** Information about pagination in a connection */\nexport type GqlPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\nexport type GqlPeerInfo = {\n  /** The advertised multi-addrs that can be used to connect to this peer */\n  addresses: Array<Scalars['String']['output']>;\n  /** The internal fuel p2p reputation of this peer */\n  appScore: Scalars['Float']['output'];\n  /** The last reported height of the peer */\n  blockHeight?: Maybe<Scalars['U32']['output']>;\n  /** The self-reported version of the client the peer is using */\n  clientVersion?: Maybe<Scalars['String']['output']>;\n  /** The libp2p peer id */\n  id: Scalars['String']['output'];\n  /** The last heartbeat from this peer in unix epoch time ms */\n  lastHeartbeatMs: Scalars['U64']['output'];\n};\n\nexport type GqlPoAConsensus = {\n  /** Gets the signature of the block produced by `PoA` consensus. */\n  signature: Scalars['Signature']['output'];\n};\n\nexport type GqlPolicies = {\n  maturity?: Maybe<Scalars['U32']['output']>;\n  maxFee?: Maybe<Scalars['U64']['output']>;\n  tip?: Maybe<Scalars['U64']['output']>;\n  witnessLimit?: Maybe<Scalars['U64']['output']>;\n};\n\nexport type GqlPredicateParameters = {\n  maxGasPerPredicate: Scalars['U64']['output'];\n  maxMessageDataLength: Scalars['U64']['output'];\n  maxPredicateDataLength: Scalars['U64']['output'];\n  maxPredicateLength: Scalars['U64']['output'];\n  version: GqlPredicateParametersVersion;\n};\n\nexport enum GqlPredicateParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlProgramState = {\n  data: Scalars['HexString']['output'];\n  returnType: GqlReturnType;\n};\n\nexport type GqlQuery = {\n  assetDetails: GqlAssetInfoDetails;\n  balance: GqlBalance;\n  balances: GqlBalanceConnection;\n  blob?: Maybe<GqlBlob>;\n  block?: Maybe<GqlBlock>;\n  blocks: GqlBlockConnection;\n  chain: GqlChainInfo;\n  /** Gets the coin by `utxo_id`. */\n  coin?: Maybe<GqlCoin>;\n  /** Gets all unspent coins of some `owner` maybe filtered with by `asset_id` per page. */\n  coins: GqlCoinConnection;\n  /**\n   * For each `query_per_asset`, get some spendable coins(of asset specified by the query) owned by\n   * `owner` that add up at least the query amount. The returned coins can be spent.\n   * The number of coins is optimized to prevent dust accumulation.\n   *\n   * The query supports excluding and maximum the number of coins.\n   *\n   * Returns:\n   * The list of spendable coins per asset from the query. The length of the result is\n   * the same as the length of `query_per_asset`. The ordering of assets and `query_per_asset`\n   * is the same.\n   */\n  coinsToSpend: Array<Array<GqlCoinType>>;\n  consensusParameters: GqlConsensusParameters;\n  contract?: Maybe<GqlContract>;\n  contractBalance: GqlContractBalance;\n  contractBalances: GqlContractBalanceConnection;\n  daCompressedBlock?: Maybe<GqlDaCompressedBlock>;\n  estimateGasPrice: GqlEstimateGasPrice;\n  /** Estimate the predicate gas for the provided transaction */\n  estimatePredicates: GqlTransaction;\n  /** Returns true when the GraphQL API is serving requests. */\n  health: Scalars['Boolean']['output'];\n  latestGasPrice: GqlLatestGasPrice;\n  /** Read read a range of memory bytes. */\n  memory: Scalars['String']['output'];\n  message?: Maybe<GqlMessage>;\n  messageProof: GqlMessageProof;\n  messageStatus: GqlMessageStatus;\n  messages: GqlMessageConnection;\n  nodeInfo: GqlNodeInfo;\n  /** Read register value by index. */\n  register: Scalars['U64']['output'];\n  relayedTransactionStatus?: Maybe<GqlRelayedTransactionStatus>;\n  stateTransitionBytecodeByRoot: GqlStateTransitionBytecode;\n  stateTransitionBytecodeByVersion?: Maybe<GqlStateTransitionBytecode>;\n  transaction?: Maybe<GqlTransaction>;\n  transactions: GqlTransactionConnection;\n  transactionsByOwner: GqlTransactionConnection;\n};\n\n\nexport type GqlQueryAssetDetailsArgs = {\n  id: Scalars['AssetId']['input'];\n};\n\n\nexport type GqlQueryBalanceArgs = {\n  assetId: Scalars['AssetId']['input'];\n  owner: Scalars['Address']['input'];\n};\n\n\nexport type GqlQueryBalancesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  filter: GqlBalanceFilterInput;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\nexport type GqlQueryBlobArgs = {\n  id: Scalars['BlobId']['input'];\n};\n\n\nexport type GqlQueryBlockArgs = {\n  height?: InputMaybe<Scalars['U32']['input']>;\n  id?: InputMaybe<Scalars['BlockId']['input']>;\n};\n\n\nexport type GqlQueryBlocksArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\nexport type GqlQueryCoinArgs = {\n  utxoId: Scalars['UtxoId']['input'];\n};\n\n\nexport type GqlQueryCoinsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  filter: GqlCoinFilterInput;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\nexport type GqlQueryCoinsToSpendArgs = {\n  excludedIds?: InputMaybe<GqlExcludeInput>;\n  owner: Scalars['Address']['input'];\n  queryPerAsset: Array<GqlSpendQueryElementInput>;\n};\n\n\nexport type GqlQueryConsensusParametersArgs = {\n  version: Scalars['Int']['input'];\n};\n\n\nexport type GqlQueryContractArgs = {\n  id: Scalars['ContractId']['input'];\n};\n\n\nexport type GqlQueryContractBalanceArgs = {\n  asset: Scalars['AssetId']['input'];\n  contract: Scalars['ContractId']['input'];\n};\n\n\nexport type GqlQueryContractBalancesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  filter: GqlContractBalanceFilterInput;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\nexport type GqlQueryDaCompressedBlockArgs = {\n  height: Scalars['U32']['input'];\n};\n\n\nexport type GqlQueryEstimateGasPriceArgs = {\n  blockHorizon?: InputMaybe<Scalars['U32']['input']>;\n};\n\n\nexport type GqlQueryEstimatePredicatesArgs = {\n  tx: Scalars['HexString']['input'];\n};\n\n\nexport type GqlQueryMemoryArgs = {\n  id: Scalars['ID']['input'];\n  size: Scalars['U32']['input'];\n  start: Scalars['U32']['input'];\n};\n\n\nexport type GqlQueryMessageArgs = {\n  nonce: Scalars['Nonce']['input'];\n};\n\n\nexport type GqlQueryMessageProofArgs = {\n  commitBlockHeight?: InputMaybe<Scalars['U32']['input']>;\n  commitBlockId?: InputMaybe<Scalars['BlockId']['input']>;\n  nonce: Scalars['Nonce']['input'];\n  transactionId: Scalars['TransactionId']['input'];\n};\n\n\nexport type GqlQueryMessageStatusArgs = {\n  nonce: Scalars['Nonce']['input'];\n};\n\n\nexport type GqlQueryMessagesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  owner?: InputMaybe<Scalars['Address']['input']>;\n};\n\n\nexport type GqlQueryRegisterArgs = {\n  id: Scalars['ID']['input'];\n  register: Scalars['U32']['input'];\n};\n\n\nexport type GqlQueryRelayedTransactionStatusArgs = {\n  id: Scalars['RelayedTransactionId']['input'];\n};\n\n\nexport type GqlQueryStateTransitionBytecodeByRootArgs = {\n  root: Scalars['HexString']['input'];\n};\n\n\nexport type GqlQueryStateTransitionBytecodeByVersionArgs = {\n  version: Scalars['Int']['input'];\n};\n\n\nexport type GqlQueryTransactionArgs = {\n  id: Scalars['TransactionId']['input'];\n};\n\n\nexport type GqlQueryTransactionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\nexport type GqlQueryTransactionsByOwnerArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  owner: Scalars['Address']['input'];\n};\n\nexport type GqlReceipt = {\n  amount?: Maybe<Scalars['U64']['output']>;\n  assetId?: Maybe<Scalars['AssetId']['output']>;\n  /** Set in the case of a Panic receipt to indicate a missing contract input id */\n  contractId?: Maybe<Scalars['ContractId']['output']>;\n  data?: Maybe<Scalars['HexString']['output']>;\n  digest?: Maybe<Scalars['Bytes32']['output']>;\n  gas?: Maybe<Scalars['U64']['output']>;\n  gasUsed?: Maybe<Scalars['U64']['output']>;\n  id?: Maybe<Scalars['ContractId']['output']>;\n  is?: Maybe<Scalars['U64']['output']>;\n  len?: Maybe<Scalars['U64']['output']>;\n  nonce?: Maybe<Scalars['Nonce']['output']>;\n  param1?: Maybe<Scalars['U64']['output']>;\n  param2?: Maybe<Scalars['U64']['output']>;\n  pc?: Maybe<Scalars['U64']['output']>;\n  ptr?: Maybe<Scalars['U64']['output']>;\n  ra?: Maybe<Scalars['U64']['output']>;\n  rb?: Maybe<Scalars['U64']['output']>;\n  rc?: Maybe<Scalars['U64']['output']>;\n  rd?: Maybe<Scalars['U64']['output']>;\n  reason?: Maybe<Scalars['U64']['output']>;\n  receiptType: GqlReceiptType;\n  recipient?: Maybe<Scalars['Address']['output']>;\n  result?: Maybe<Scalars['U64']['output']>;\n  sender?: Maybe<Scalars['Address']['output']>;\n  subId?: Maybe<Scalars['Bytes32']['output']>;\n  to?: Maybe<Scalars['ContractId']['output']>;\n  toAddress?: Maybe<Scalars['Address']['output']>;\n  val?: Maybe<Scalars['U64']['output']>;\n};\n\nexport enum GqlReceiptType {\n  Burn = 'BURN',\n  Call = 'CALL',\n  Log = 'LOG',\n  LogData = 'LOG_DATA',\n  MessageOut = 'MESSAGE_OUT',\n  Mint = 'MINT',\n  Panic = 'PANIC',\n  Return = 'RETURN',\n  ReturnData = 'RETURN_DATA',\n  Revert = 'REVERT',\n  ScriptResult = 'SCRIPT_RESULT',\n  Transfer = 'TRANSFER',\n  TransferOut = 'TRANSFER_OUT'\n}\n\nexport type GqlRelayedTransactionFailed = {\n  blockHeight: Scalars['U32']['output'];\n  failure: Scalars['String']['output'];\n};\n\nexport type GqlRelayedTransactionStatus = GqlRelayedTransactionFailed;\n\nexport enum GqlReturnType {\n  Return = 'RETURN',\n  ReturnData = 'RETURN_DATA',\n  Revert = 'REVERT'\n}\n\nexport type GqlRunResult = {\n  breakpoint?: Maybe<GqlOutputBreakpoint>;\n  jsonReceipts: Array<Scalars['String']['output']>;\n  state: GqlRunState;\n};\n\nexport enum GqlRunState {\n  /** Stopped on a breakpoint */\n  Breakpoint = 'BREAKPOINT',\n  /** All breakpoints have been processed, and the program has terminated */\n  Completed = 'COMPLETED'\n}\n\nexport type GqlScriptParameters = {\n  maxScriptDataLength: Scalars['U64']['output'];\n  maxScriptLength: Scalars['U64']['output'];\n  version: GqlScriptParametersVersion;\n};\n\nexport enum GqlScriptParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlSpendQueryElementInput = {\n  /** Target amount for the query. */\n  amount: Scalars['U64']['input'];\n  /** Identifier of the asset to spend. */\n  assetId: Scalars['AssetId']['input'];\n  /** The maximum number of currencies for selection. */\n  max?: InputMaybe<Scalars['U32']['input']>;\n};\n\nexport type GqlSqueezedOutStatus = {\n  reason: Scalars['String']['output'];\n};\n\nexport type GqlStateTransitionBytecode = {\n  bytecode: GqlUploadedBytecode;\n  root: Scalars['HexString']['output'];\n};\n\nexport type GqlStateTransitionPurpose = {\n  root: Scalars['Bytes32']['output'];\n};\n\nexport type GqlSubmittedStatus = {\n  time: Scalars['Tai64Timestamp']['output'];\n};\n\nexport type GqlSubscription = {\n  /**\n   * Returns a stream of status updates for the given transaction id.\n   * If the current status is [`TransactionStatus::Success`], [`TransactionStatus::SqueezedOut`]\n   * or [`TransactionStatus::Failed`] the stream will return that and end immediately.\n   * If the current status is [`TransactionStatus::Submitted`] this will be returned\n   * and the stream will wait for a future update.\n   *\n   * This stream will wait forever so it's advised to use within a timeout.\n   *\n   * It is possible for the stream to miss an update if it is polled slower\n   * then the updates arrive. In such a case the stream will close without\n   * a status. If this occurs the stream can simply be restarted to return\n   * the latest status.\n   */\n  statusChange: GqlTransactionStatus;\n  /** Submits transaction to the `TxPool` and await either confirmation or failure. */\n  submitAndAwait: GqlTransactionStatus;\n  /**\n   * Submits the transaction to the `TxPool` and returns a stream of events.\n   * Compared to the `submitAndAwait`, the stream also contains `\n   * SubmittedStatus` as an intermediate state.\n   */\n  submitAndAwaitStatus: GqlTransactionStatus;\n};\n\n\nexport type GqlSubscriptionStatusChangeArgs = {\n  id: Scalars['TransactionId']['input'];\n};\n\n\nexport type GqlSubscriptionSubmitAndAwaitArgs = {\n  tx: Scalars['HexString']['input'];\n};\n\n\nexport type GqlSubscriptionSubmitAndAwaitStatusArgs = {\n  tx: Scalars['HexString']['input'];\n};\n\nexport type GqlSuccessStatus = {\n  block: GqlBlock;\n  blockHeight: Scalars['U32']['output'];\n  programState?: Maybe<GqlProgramState>;\n  receipts: Array<GqlReceipt>;\n  time: Scalars['Tai64Timestamp']['output'];\n  totalFee: Scalars['U64']['output'];\n  totalGas: Scalars['U64']['output'];\n  transaction: GqlTransaction;\n  transactionId: Scalars['TransactionId']['output'];\n};\n\nexport type GqlTransaction = {\n  blobId?: Maybe<Scalars['BlobId']['output']>;\n  bytecodeRoot?: Maybe<Scalars['Bytes32']['output']>;\n  bytecodeWitnessIndex?: Maybe<Scalars['U16']['output']>;\n  id: Scalars['TransactionId']['output'];\n  inputAssetIds?: Maybe<Array<Scalars['AssetId']['output']>>;\n  inputContract?: Maybe<GqlInputContract>;\n  inputContracts?: Maybe<Array<Scalars['ContractId']['output']>>;\n  inputs?: Maybe<Array<GqlInput>>;\n  isBlob: Scalars['Boolean']['output'];\n  isCreate: Scalars['Boolean']['output'];\n  isMint: Scalars['Boolean']['output'];\n  isScript: Scalars['Boolean']['output'];\n  isUpgrade: Scalars['Boolean']['output'];\n  isUpload: Scalars['Boolean']['output'];\n  maturity?: Maybe<Scalars['U32']['output']>;\n  mintAmount?: Maybe<Scalars['U64']['output']>;\n  mintAssetId?: Maybe<Scalars['AssetId']['output']>;\n  mintGasPrice?: Maybe<Scalars['U64']['output']>;\n  outputContract?: Maybe<GqlContractOutput>;\n  outputs: Array<GqlOutput>;\n  policies?: Maybe<GqlPolicies>;\n  proofSet?: Maybe<Array<Scalars['Bytes32']['output']>>;\n  /** Return the transaction bytes using canonical encoding */\n  rawPayload: Scalars['HexString']['output'];\n  receiptsRoot?: Maybe<Scalars['Bytes32']['output']>;\n  salt?: Maybe<Scalars['Salt']['output']>;\n  script?: Maybe<Scalars['HexString']['output']>;\n  scriptData?: Maybe<Scalars['HexString']['output']>;\n  scriptGasLimit?: Maybe<Scalars['U64']['output']>;\n  status?: Maybe<GqlTransactionStatus>;\n  storageSlots?: Maybe<Array<Scalars['HexString']['output']>>;\n  subsectionIndex?: Maybe<Scalars['U16']['output']>;\n  subsectionsNumber?: Maybe<Scalars['U16']['output']>;\n  txPointer?: Maybe<Scalars['TxPointer']['output']>;\n  upgradePurpose?: Maybe<GqlUpgradePurpose>;\n  witnesses?: Maybe<Array<Scalars['HexString']['output']>>;\n};\n\nexport type GqlTransactionConnection = {\n  /** A list of edges. */\n  edges: Array<GqlTransactionEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlTransaction>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlTransactionEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlTransaction;\n};\n\nexport type GqlTransactionStatus = GqlFailureStatus | GqlSqueezedOutStatus | GqlSubmittedStatus | GqlSuccessStatus;\n\nexport type GqlTxParameters = {\n  maxBytecodeSubsections: Scalars['U16']['output'];\n  maxGasPerTx: Scalars['U64']['output'];\n  maxInputs: Scalars['U16']['output'];\n  maxOutputs: Scalars['U16']['output'];\n  maxSize: Scalars['U64']['output'];\n  maxWitnesses: Scalars['U32']['output'];\n  version: GqlTxParametersVersion;\n};\n\nexport enum GqlTxParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlTxPoolStats = {\n  /** The total gas of the transactions in the pool */\n  totalGas: Scalars['U64']['output'];\n  /** The total size of the transactions in the pool */\n  totalSize: Scalars['U64']['output'];\n  /** The number of transactions in the pool */\n  txCount: Scalars['U64']['output'];\n};\n\nexport type GqlUpgradePurpose = GqlConsensusParametersPurpose | GqlStateTransitionPurpose;\n\nexport type GqlUploadedBytecode = {\n  /** Combined bytecode of all uploaded subsections. */\n  bytecode: Scalars['HexString']['output'];\n  /** Indicates if the bytecode upload is complete. */\n  completed: Scalars['Boolean']['output'];\n  /** Number of uploaded subsections (if incomplete). */\n  uploadedSubsectionsNumber?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type GqlVariableOutput = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  to: Scalars['Address']['output'];\n};\n\nexport type GqlSubmittedStatusFragment = { time: string, type: 'SubmittedStatus' };\n\nexport type GqlSuccessStatusFragment = { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlSuccessStatusWithBlockIdFragment = { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', block: { id: string }, programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlFailureStatusFragment = { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlFailureStatusWithBlockIdFragment = { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', block: { id: string }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlSqueezedOutStatusFragment = { reason: string, type: 'SqueezedOutStatus' };\n\ntype GqlTransactionStatusFragment_FailureStatus = { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\ntype GqlTransactionStatusFragment_SqueezedOutStatus = { reason: string, type: 'SqueezedOutStatus' };\n\ntype GqlTransactionStatusFragment_SubmittedStatus = { time: string, type: 'SubmittedStatus' };\n\ntype GqlTransactionStatusFragment_SuccessStatus = { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlTransactionStatusFragment = GqlTransactionStatusFragment_FailureStatus | GqlTransactionStatusFragment_SqueezedOutStatus | GqlTransactionStatusFragment_SubmittedStatus | GqlTransactionStatusFragment_SuccessStatus;\n\nexport type GqlMalleableTransactionFieldsFragment = { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> };\n\ntype GqlTransactionStatusSubscriptionFragment_FailureStatus = { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\ntype GqlTransactionStatusSubscriptionFragment_SqueezedOutStatus = { reason: string, type: 'SqueezedOutStatus' };\n\ntype GqlTransactionStatusSubscriptionFragment_SubmittedStatus = { time: string, type: 'SubmittedStatus' };\n\ntype GqlTransactionStatusSubscriptionFragment_SuccessStatus = { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlTransactionStatusSubscriptionFragment = GqlTransactionStatusSubscriptionFragment_FailureStatus | GqlTransactionStatusSubscriptionFragment_SqueezedOutStatus | GqlTransactionStatusSubscriptionFragment_SubmittedStatus | GqlTransactionStatusSubscriptionFragment_SuccessStatus;\n\nexport type GqlTransactionFragment = { id: string, rawPayload: string, status?: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | null };\n\nexport type GqlTransactionRawPayloadFragment = { id: string, rawPayload: string };\n\ntype GqlInputEstimatePredicatesFragment_InputCoin = { predicateGasUsed: string };\n\ntype GqlInputEstimatePredicatesFragment_InputContract = {};\n\ntype GqlInputEstimatePredicatesFragment_InputMessage = { predicateGasUsed: string };\n\nexport type GqlInputEstimatePredicatesFragment = GqlInputEstimatePredicatesFragment_InputCoin | GqlInputEstimatePredicatesFragment_InputContract | GqlInputEstimatePredicatesFragment_InputMessage;\n\nexport type GqlTransactionEstimatePredicatesFragment = { inputs?: Array<{ predicateGasUsed: string } | { predicateGasUsed: string } | {}> | null };\n\nexport type GqlDryRunFailureStatusFragment = { totalGas: string, totalFee: string, reason: string, type: 'DryRunFailureStatus', programState?: { returnType: GqlReturnType, data: string } | null };\n\nexport type GqlDryRunSuccessStatusFragment = { totalGas: string, totalFee: string, type: 'DryRunSuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null };\n\nexport type GqlReceiptFragment = { id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null };\n\ntype GqlDryRunTransactionStatusFragment_DryRunFailureStatus = { totalGas: string, totalFee: string, reason: string, type: 'DryRunFailureStatus', programState?: { returnType: GqlReturnType, data: string } | null };\n\ntype GqlDryRunTransactionStatusFragment_DryRunSuccessStatus = { totalGas: string, totalFee: string, type: 'DryRunSuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null };\n\nexport type GqlDryRunTransactionStatusFragment = GqlDryRunTransactionStatusFragment_DryRunFailureStatus | GqlDryRunTransactionStatusFragment_DryRunSuccessStatus;\n\nexport type GqlDryRunTransactionExecutionStatusFragment = { id: string, status: { totalGas: string, totalFee: string, reason: string, type: 'DryRunFailureStatus', programState?: { returnType: GqlReturnType, data: string } | null } | { totalGas: string, totalFee: string, type: 'DryRunSuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlBlockFragment = { id: string, height: string, header: { time: string, daHeight: string, stateTransitionBytecodeVersion: string, transactionsCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, prevRoot: string, applicationHash: string }, transactions: Array<{ id: string }> };\n\nexport type GqlCoinFragment = { utxoId: string, amount: string, assetId: string, blockCreated: string, txCreatedIdx: string, type: 'Coin' };\n\nexport type GqlMessageCoinFragment = { sender: string, recipient: string, nonce: string, amount: string, assetId: string, daHeight: string, type: 'MessageCoin' };\n\nexport type GqlMessageFragment = { amount: string, sender: string, recipient: string, data: string, daHeight: string };\n\nexport type GqlGetMessageFragment = { nonce: string, amount: string, sender: string, recipient: string, data: string, daHeight: string };\n\nexport type GqlMessageProofFragment = { sender: string, recipient: string, amount: string, data: string, messageProof: { proofSet: Array<string>, proofIndex: string }, blockProof: { proofSet: Array<string>, proofIndex: string }, messageBlockHeader: { version: GqlHeaderVersion, id: string, daHeight: string, consensusParametersVersion: string, stateTransitionBytecodeVersion: string, transactionsCount: string, messageReceiptCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, height: string, prevRoot: string, time: string, applicationHash: string }, commitBlockHeader: { version: GqlHeaderVersion, id: string, daHeight: string, consensusParametersVersion: string, stateTransitionBytecodeVersion: string, transactionsCount: string, messageReceiptCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, height: string, prevRoot: string, time: string, applicationHash: string } };\n\nexport type GqlTxParametersFragment = { version: GqlTxParametersVersion, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxSize: string, maxBytecodeSubsections: string };\n\nexport type GqlPredicateParametersFragment = { version: GqlPredicateParametersVersion, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, maxMessageDataLength: string };\n\nexport type GqlScriptParametersFragment = { version: GqlScriptParametersVersion, maxScriptLength: string, maxScriptDataLength: string };\n\nexport type GqlContractParametersFragment = { version: GqlContractParametersVersion, contractMaxSize: string, maxStorageSlots: string };\n\nexport type GqlFeeParametersFragment = { version: GqlFeeParametersVersion, gasPriceFactor: string, gasPerByte: string };\n\ntype GqlDependentCostFragment_HeavyOperation = { base: string, gasPerUnit: string, type: 'HeavyOperation' };\n\ntype GqlDependentCostFragment_LightOperation = { base: string, unitsPerGas: string, type: 'LightOperation' };\n\nexport type GqlDependentCostFragment = GqlDependentCostFragment_HeavyOperation | GqlDependentCostFragment_LightOperation;\n\nexport type GqlGasCostsFragment = { ecr1: string, newStoragePerByte: string, contractRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, stateRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, vmInitialization: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, s256: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' } };\n\nexport type GqlConsensusParametersFragment = { version: GqlConsensusParametersVersion, baseAssetId: string, chainId: string, txParams: { version: GqlTxParametersVersion, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxSize: string, maxBytecodeSubsections: string }, predicateParams: { version: GqlPredicateParametersVersion, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, maxMessageDataLength: string }, scriptParams: { version: GqlScriptParametersVersion, maxScriptLength: string, maxScriptDataLength: string }, contractParams: { version: GqlContractParametersVersion, contractMaxSize: string, maxStorageSlots: string }, feeParams: { version: GqlFeeParametersVersion, gasPriceFactor: string, gasPerByte: string }, gasCosts: { ecr1: string, newStoragePerByte: string, contractRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, stateRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, vmInitialization: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, s256: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' } } };\n\nexport type GqlChainInfoFragment = { name: string, daHeight: string, consensusParameters: { version: GqlConsensusParametersVersion, baseAssetId: string, chainId: string, txParams: { version: GqlTxParametersVersion, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxSize: string, maxBytecodeSubsections: string }, predicateParams: { version: GqlPredicateParametersVersion, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, maxMessageDataLength: string }, scriptParams: { version: GqlScriptParametersVersion, maxScriptLength: string, maxScriptDataLength: string }, contractParams: { version: GqlContractParametersVersion, contractMaxSize: string, maxStorageSlots: string }, feeParams: { version: GqlFeeParametersVersion, gasPriceFactor: string, gasPerByte: string }, gasCosts: { ecr1: string, newStoragePerByte: string, contractRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, stateRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, vmInitialization: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, s256: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' } } } };\n\nexport type GqlContractBalanceFragment = { contract: string, amount: string, assetId: string };\n\nexport type GqlPageInfoFragment = { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null };\n\nexport type GqlGetVersionQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetVersionQuery = { nodeInfo: { nodeVersion: string } };\n\nexport type GqlNodeInfoFragment = { utxoValidation: boolean, vmBacktrace: boolean, maxTx: string, maxDepth: string, nodeVersion: string, indexation: { balances: boolean, coinsToSpend: boolean, assetMetadata: boolean } };\n\nexport type GqlRelayedTransactionStatusFragment = { blockHeight: string, failure: string };\n\nexport type GqlGetNodeInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetNodeInfoQuery = { nodeInfo: { utxoValidation: boolean, vmBacktrace: boolean, maxTx: string, maxDepth: string, nodeVersion: string, indexation: { balances: boolean, coinsToSpend: boolean, assetMetadata: boolean } } };\n\nexport type GqlGetChainQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetChainQuery = { chain: { name: string, daHeight: string, consensusParameters: { version: GqlConsensusParametersVersion, baseAssetId: string, chainId: string, txParams: { version: GqlTxParametersVersion, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxSize: string, maxBytecodeSubsections: string }, predicateParams: { version: GqlPredicateParametersVersion, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, maxMessageDataLength: string }, scriptParams: { version: GqlScriptParametersVersion, maxScriptLength: string, maxScriptDataLength: string }, contractParams: { version: GqlContractParametersVersion, contractMaxSize: string, maxStorageSlots: string }, feeParams: { version: GqlFeeParametersVersion, gasPriceFactor: string, gasPerByte: string }, gasCosts: { ecr1: string, newStoragePerByte: string, contractRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, stateRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, vmInitialization: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, s256: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' } } } } };\n\nexport type GqlGetChainAndNodeInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetChainAndNodeInfoQuery = { chain: { name: string, daHeight: string, consensusParameters: { version: GqlConsensusParametersVersion, baseAssetId: string, chainId: string, txParams: { version: GqlTxParametersVersion, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxSize: string, maxBytecodeSubsections: string }, predicateParams: { version: GqlPredicateParametersVersion, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, maxMessageDataLength: string }, scriptParams: { version: GqlScriptParametersVersion, maxScriptLength: string, maxScriptDataLength: string }, contractParams: { version: GqlContractParametersVersion, contractMaxSize: string, maxStorageSlots: string }, feeParams: { version: GqlFeeParametersVersion, gasPriceFactor: string, gasPerByte: string }, gasCosts: { ecr1: string, newStoragePerByte: string, contractRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, stateRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, vmInitialization: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, s256: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' } } } }, nodeInfo: { utxoValidation: boolean, vmBacktrace: boolean, maxTx: string, maxDepth: string, nodeVersion: string, indexation: { balances: boolean, coinsToSpend: boolean, assetMetadata: boolean } } };\n\nexport type GqlGetTransactionQueryVariables = Exact<{\n  transactionId: Scalars['TransactionId']['input'];\n}>;\n\n\nexport type GqlGetTransactionQuery = { transaction?: { id: string, rawPayload: string, status?: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | null } | null };\n\nexport type GqlGetTransactionWithReceiptsQueryVariables = Exact<{\n  transactionId: Scalars['TransactionId']['input'];\n}>;\n\n\nexport type GqlGetTransactionWithReceiptsQuery = { transaction?: { id: string, rawPayload: string, status?: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', block: { id: string }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', block: { id: string }, programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | null } | null };\n\nexport type GqlGetTransactionsQueryVariables = Exact<{\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetTransactionsQuery = { transactions: { edges: Array<{ node: { rawPayload: string } }>, pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null } } };\n\nexport type GqlGetTransactionsByOwnerQueryVariables = Exact<{\n  owner: Scalars['Address']['input'];\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetTransactionsByOwnerQuery = { transactionsByOwner: { pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ node: { id: string, rawPayload: string, status?: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | null } }> } };\n\nexport type GqlEstimatePredicatesQueryVariables = Exact<{\n  encodedTransaction: Scalars['HexString']['input'];\n}>;\n\n\nexport type GqlEstimatePredicatesQuery = { estimatePredicates: { inputs?: Array<{ predicateGasUsed: string } | { predicateGasUsed: string } | {}> | null } };\n\nexport type GqlEstimatePredicatesAndGasPriceQueryVariables = Exact<{\n  encodedTransaction: Scalars['HexString']['input'];\n  blockHorizon: Scalars['U32']['input'];\n}>;\n\n\nexport type GqlEstimatePredicatesAndGasPriceQuery = { estimatePredicates: { inputs?: Array<{ predicateGasUsed: string } | { predicateGasUsed: string } | {}> | null }, estimateGasPrice: { gasPrice: string } };\n\nexport type GqlGetLatestBlockQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetLatestBlockQuery = { chain: { latestBlock: { id: string, height: string, header: { time: string, daHeight: string, stateTransitionBytecodeVersion: string, transactionsCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, prevRoot: string, applicationHash: string }, transactions: Array<{ id: string }> } } };\n\nexport type GqlGetLatestBlockHeightQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetLatestBlockHeightQuery = { chain: { latestBlock: { height: string } } };\n\nexport type GqlGetBlockQueryVariables = Exact<{\n  blockId?: InputMaybe<Scalars['BlockId']['input']>;\n  height?: InputMaybe<Scalars['U32']['input']>;\n}>;\n\n\nexport type GqlGetBlockQuery = { block?: { id: string, height: string, header: { time: string, daHeight: string, stateTransitionBytecodeVersion: string, transactionsCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, prevRoot: string, applicationHash: string }, transactions: Array<{ id: string }> } | null };\n\nexport type GqlGetBlockWithTransactionsQueryVariables = Exact<{\n  blockId?: InputMaybe<Scalars['BlockId']['input']>;\n  blockHeight?: InputMaybe<Scalars['U32']['input']>;\n}>;\n\n\nexport type GqlGetBlockWithTransactionsQuery = { block?: { id: string, height: string, transactions: Array<{ id: string, rawPayload: string }>, header: { time: string, daHeight: string, stateTransitionBytecodeVersion: string, transactionsCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, prevRoot: string, applicationHash: string } } | null };\n\nexport type GqlGetBlocksQueryVariables = Exact<{\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetBlocksQuery = { blocks: { pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ node: { id: string, height: string, header: { time: string, daHeight: string, stateTransitionBytecodeVersion: string, transactionsCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, prevRoot: string, applicationHash: string }, transactions: Array<{ id: string }> } }> } };\n\nexport type GqlGetCoinQueryVariables = Exact<{\n  coinId: Scalars['UtxoId']['input'];\n}>;\n\n\nexport type GqlGetCoinQuery = { coin?: { owner: string, utxoId: string, amount: string, assetId: string, blockCreated: string, txCreatedIdx: string, type: 'Coin' } | null };\n\nexport type GqlGetCoinsQueryVariables = Exact<{\n  filter: GqlCoinFilterInput;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetCoinsQuery = { coins: { pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ node: { utxoId: string, amount: string, assetId: string, blockCreated: string, txCreatedIdx: string, type: 'Coin' } }> } };\n\nexport type GqlGetCoinsToSpendQueryVariables = Exact<{\n  owner: Scalars['Address']['input'];\n  queryPerAsset: Array<GqlSpendQueryElementInput> | GqlSpendQueryElementInput;\n  excludedIds?: InputMaybe<GqlExcludeInput>;\n}>;\n\n\nexport type GqlGetCoinsToSpendQuery = { coinsToSpend: Array<Array<{ utxoId: string, amount: string, assetId: string, blockCreated: string, txCreatedIdx: string, type: 'Coin' } | { sender: string, recipient: string, nonce: string, amount: string, assetId: string, daHeight: string, type: 'MessageCoin' }>> };\n\nexport type GqlGetContractQueryVariables = Exact<{\n  contractId: Scalars['ContractId']['input'];\n}>;\n\n\nexport type GqlGetContractQuery = { contract?: { bytecode: string, id: string } | null };\n\nexport type GqlGetContractBalanceQueryVariables = Exact<{\n  contract: Scalars['ContractId']['input'];\n  asset: Scalars['AssetId']['input'];\n}>;\n\n\nexport type GqlGetContractBalanceQuery = { contractBalance: { contract: string, amount: string, assetId: string } };\n\nexport type GqlGetBalanceQueryVariables = Exact<{\n  owner: Scalars['Address']['input'];\n  assetId: Scalars['AssetId']['input'];\n}>;\n\n\nexport type GqlGetBalanceQuery = { balance: { amount: string } };\n\nexport type GqlGetBalanceV2QueryVariables = Exact<{\n  owner: Scalars['Address']['input'];\n  assetId: Scalars['AssetId']['input'];\n}>;\n\n\nexport type GqlGetBalanceV2Query = { balance: { amountU128: string } };\n\nexport type GqlGetLatestGasPriceQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetLatestGasPriceQuery = { latestGasPrice: { gasPrice: string } };\n\nexport type GqlEstimateGasPriceQueryVariables = Exact<{\n  blockHorizon: Scalars['U32']['input'];\n}>;\n\n\nexport type GqlEstimateGasPriceQuery = { estimateGasPrice: { gasPrice: string } };\n\nexport type GqlGetBalancesQueryVariables = Exact<{\n  filter: GqlBalanceFilterInput;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetBalancesQuery = { balances: { edges: Array<{ node: { assetId: string, amount: string } }> } };\n\nexport type GqlGetBalancesV2QueryVariables = Exact<{\n  filter: GqlBalanceFilterInput;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  supportsPagination: Scalars['Boolean']['input'];\n}>;\n\n\nexport type GqlGetBalancesV2Query = { balances: { pageInfo?: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ node: { assetId: string, amountU128: string } }> } };\n\nexport type GqlGetMessagesQueryVariables = Exact<{\n  owner: Scalars['Address']['input'];\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetMessagesQuery = { messages: { pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ node: { nonce: string, amount: string, sender: string, recipient: string, data: string, daHeight: string } }> } };\n\nexport type GqlDaCompressedBlockQueryVariables = Exact<{\n  height: Scalars['U32']['input'];\n}>;\n\n\nexport type GqlDaCompressedBlockQuery = { daCompressedBlock?: { bytes: string } | null };\n\nexport type GqlGetMessageProofQueryVariables = Exact<{\n  transactionId: Scalars['TransactionId']['input'];\n  nonce: Scalars['Nonce']['input'];\n  commitBlockId?: InputMaybe<Scalars['BlockId']['input']>;\n  commitBlockHeight?: InputMaybe<Scalars['U32']['input']>;\n}>;\n\n\nexport type GqlGetMessageProofQuery = { messageProof: { sender: string, recipient: string, amount: string, data: string, messageProof: { proofSet: Array<string>, proofIndex: string }, blockProof: { proofSet: Array<string>, proofIndex: string }, messageBlockHeader: { version: GqlHeaderVersion, id: string, daHeight: string, consensusParametersVersion: string, stateTransitionBytecodeVersion: string, transactionsCount: string, messageReceiptCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, height: string, prevRoot: string, time: string, applicationHash: string }, commitBlockHeader: { version: GqlHeaderVersion, id: string, daHeight: string, consensusParametersVersion: string, stateTransitionBytecodeVersion: string, transactionsCount: string, messageReceiptCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, height: string, prevRoot: string, time: string, applicationHash: string } } };\n\nexport type GqlGetMessageStatusQueryVariables = Exact<{\n  nonce: Scalars['Nonce']['input'];\n}>;\n\n\nexport type GqlGetMessageStatusQuery = { messageStatus: { state: GqlMessageState } };\n\nexport type GqlGetRelayedTransactionStatusQueryVariables = Exact<{\n  relayedTransactionId: Scalars['RelayedTransactionId']['input'];\n}>;\n\n\nexport type GqlGetRelayedTransactionStatusQuery = { relayedTransactionStatus?: { blockHeight: string, failure: string } | null };\n\nexport type GqlGetAssetDetailsQueryVariables = Exact<{\n  assetId: Scalars['AssetId']['input'];\n}>;\n\n\nexport type GqlGetAssetDetailsQuery = { assetDetails: { subId: string, contractId: string, totalSupply: string } };\n\nexport type GqlDryRunMutationVariables = Exact<{\n  encodedTransactions: Array<Scalars['HexString']['input']> | Scalars['HexString']['input'];\n  utxoValidation?: InputMaybe<Scalars['Boolean']['input']>;\n  gasPrice?: InputMaybe<Scalars['U64']['input']>;\n}>;\n\n\nexport type GqlDryRunMutation = { dryRun: Array<{ id: string, status: { totalGas: string, totalFee: string, reason: string, type: 'DryRunFailureStatus', programState?: { returnType: GqlReturnType, data: string } | null } | { totalGas: string, totalFee: string, type: 'DryRunSuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> }> };\n\nexport type GqlSubmitMutationVariables = Exact<{\n  encodedTransaction: Scalars['HexString']['input'];\n}>;\n\n\nexport type GqlSubmitMutation = { submit: { id: string } };\n\nexport type GqlProduceBlocksMutationVariables = Exact<{\n  startTimestamp?: InputMaybe<Scalars['Tai64Timestamp']['input']>;\n  blocksToProduce: Scalars['U32']['input'];\n}>;\n\n\nexport type GqlProduceBlocksMutation = { produceBlocks: string };\n\nexport type GqlGetMessageByNonceQueryVariables = Exact<{\n  nonce: Scalars['Nonce']['input'];\n}>;\n\n\nexport type GqlGetMessageByNonceQuery = { message?: { amount: string, sender: string, recipient: string, data: string, daHeight: string } | null };\n\nexport type GqlIsUserAccountQueryVariables = Exact<{\n  blobId: Scalars['BlobId']['input'];\n  contractId: Scalars['ContractId']['input'];\n  transactionId: Scalars['TransactionId']['input'];\n}>;\n\n\nexport type GqlIsUserAccountQuery = { blob?: { id: any } | null, contract?: { id: string } | null, transaction?: { id: string } | null };\n\nexport type GqlGetConsensusParametersVersionQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetConsensusParametersVersionQuery = { chain: { latestBlock: { header: { consensusParametersVersion: string } } } };\n\nexport type GqlSubmitAndAwaitStatusSubscriptionVariables = Exact<{\n  encodedTransaction: Scalars['HexString']['input'];\n}>;\n\n\nexport type GqlSubmitAndAwaitStatusSubscription = { submitAndAwaitStatus: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } };\n\nexport type GqlStatusChangeSubscriptionVariables = Exact<{\n  transactionId: Scalars['TransactionId']['input'];\n}>;\n\n\nexport type GqlStatusChangeSubscription = { statusChange: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } };\n\nexport const SubmittedStatusFragmentDoc = gql`\n    fragment SubmittedStatusFragment on SubmittedStatus {\n  type: __typename\n  time\n}\n    `;\nexport const ReceiptFragmentDoc = gql`\n    fragment receiptFragment on Receipt {\n  id\n  pc\n  is\n  to\n  toAddress\n  amount\n  assetId\n  gas\n  param1\n  param2\n  val\n  ptr\n  digest\n  reason\n  ra\n  rb\n  rc\n  rd\n  len\n  receiptType\n  result\n  gasUsed\n  data\n  sender\n  recipient\n  nonce\n  contractId\n  subId\n}\n    `;\nexport const SuccessStatusFragmentDoc = gql`\n    fragment SuccessStatusFragment on SuccessStatus {\n  type: __typename\n  time\n  programState {\n    returnType\n    data\n  }\n  receipts {\n    ...receiptFragment\n  }\n  totalGas\n  totalFee\n}\n    ${ReceiptFragmentDoc}`;\nexport const SuccessStatusWithBlockIdFragmentDoc = gql`\n    fragment SuccessStatusWithBlockIdFragment on SuccessStatus {\n  ...SuccessStatusFragment\n  block {\n    id\n  }\n}\n    ${SuccessStatusFragmentDoc}`;\nexport const MalleableTransactionFieldsFragmentDoc = gql`\n    fragment malleableTransactionFieldsFragment on Transaction {\n  receiptsRoot\n  inputs {\n    type: __typename\n    ... on InputCoin {\n      txPointer\n    }\n    ... on InputContract {\n      txPointer\n    }\n  }\n  outputs {\n    type: __typename\n    ... on CoinOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractOutput {\n      inputIndex\n      balanceRoot\n      stateRoot\n    }\n    ... on ChangeOutput {\n      to\n      amount\n      assetId\n    }\n    ... on VariableOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractCreated {\n      contract\n      stateRoot\n    }\n  }\n}\n    `;\nexport const FailureStatusFragmentDoc = gql`\n    fragment FailureStatusFragment on FailureStatus {\n  type: __typename\n  totalGas\n  totalFee\n  time\n  reason\n  receipts {\n    ...receiptFragment\n  }\n}\n    ${ReceiptFragmentDoc}`;\nexport const FailureStatusWithBlockIdFragmentDoc = gql`\n    fragment FailureStatusWithBlockIdFragment on FailureStatus {\n  ...FailureStatusFragment\n  block {\n    id\n  }\n}\n    ${FailureStatusFragmentDoc}`;\nexport const SqueezedOutStatusFragmentDoc = gql`\n    fragment SqueezedOutStatusFragment on SqueezedOutStatus {\n  type: __typename\n  reason\n}\n    `;\nexport const TransactionStatusSubscriptionFragmentDoc = gql`\n    fragment transactionStatusSubscriptionFragment on TransactionStatus {\n  ... on SubmittedStatus {\n    ...SubmittedStatusFragment\n  }\n  ... on SuccessStatus {\n    ...SuccessStatusWithBlockIdFragment\n    transaction {\n      ...malleableTransactionFieldsFragment\n    }\n  }\n  ... on FailureStatus {\n    ...FailureStatusWithBlockIdFragment\n    transaction {\n      ...malleableTransactionFieldsFragment\n    }\n  }\n  ... on SqueezedOutStatus {\n    ...SqueezedOutStatusFragment\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusWithBlockIdFragmentDoc}\n${MalleableTransactionFieldsFragmentDoc}\n${FailureStatusWithBlockIdFragmentDoc}\n${SqueezedOutStatusFragmentDoc}`;\nexport const TransactionStatusFragmentDoc = gql`\n    fragment transactionStatusFragment on TransactionStatus {\n  ... on SubmittedStatus {\n    ...SubmittedStatusFragment\n  }\n  ... on SuccessStatus {\n    ...SuccessStatusFragment\n  }\n  ... on FailureStatus {\n    ...FailureStatusFragment\n  }\n  ... on SqueezedOutStatus {\n    ...SqueezedOutStatusFragment\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusFragmentDoc}\n${FailureStatusFragmentDoc}\n${SqueezedOutStatusFragmentDoc}`;\nexport const TransactionFragmentDoc = gql`\n    fragment transactionFragment on Transaction {\n  id\n  rawPayload\n  status {\n    ...transactionStatusFragment\n  }\n}\n    ${TransactionStatusFragmentDoc}`;\nexport const TransactionRawPayloadFragmentDoc = gql`\n    fragment transactionRawPayloadFragment on Transaction {\n  id\n  rawPayload\n}\n    `;\nexport const InputEstimatePredicatesFragmentDoc = gql`\n    fragment inputEstimatePredicatesFragment on Input {\n  ... on InputCoin {\n    predicateGasUsed\n  }\n  ... on InputMessage {\n    predicateGasUsed\n  }\n}\n    `;\nexport const TransactionEstimatePredicatesFragmentDoc = gql`\n    fragment transactionEstimatePredicatesFragment on Transaction {\n  inputs {\n    ...inputEstimatePredicatesFragment\n  }\n}\n    ${InputEstimatePredicatesFragmentDoc}`;\nexport const DryRunFailureStatusFragmentDoc = gql`\n    fragment dryRunFailureStatusFragment on DryRunFailureStatus {\n  type: __typename\n  totalGas\n  totalFee\n  reason\n  programState {\n    returnType\n    data\n  }\n}\n    `;\nexport const DryRunSuccessStatusFragmentDoc = gql`\n    fragment dryRunSuccessStatusFragment on DryRunSuccessStatus {\n  type: __typename\n  totalGas\n  totalFee\n  programState {\n    returnType\n    data\n  }\n}\n    `;\nexport const DryRunTransactionStatusFragmentDoc = gql`\n    fragment dryRunTransactionStatusFragment on DryRunTransactionStatus {\n  ... on DryRunFailureStatus {\n    ...dryRunFailureStatusFragment\n  }\n  ... on DryRunSuccessStatus {\n    ...dryRunSuccessStatusFragment\n  }\n}\n    ${DryRunFailureStatusFragmentDoc}\n${DryRunSuccessStatusFragmentDoc}`;\nexport const DryRunTransactionExecutionStatusFragmentDoc = gql`\n    fragment dryRunTransactionExecutionStatusFragment on DryRunTransactionExecutionStatus {\n  id\n  status {\n    ...dryRunTransactionStatusFragment\n  }\n  receipts {\n    ...receiptFragment\n  }\n}\n    ${DryRunTransactionStatusFragmentDoc}\n${ReceiptFragmentDoc}`;\nexport const BlockFragmentDoc = gql`\n    fragment blockFragment on Block {\n  id\n  height\n  header {\n    time\n    daHeight\n    stateTransitionBytecodeVersion\n    transactionsCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    prevRoot\n    applicationHash\n  }\n  transactions {\n    id\n  }\n}\n    `;\nexport const CoinFragmentDoc = gql`\n    fragment coinFragment on Coin {\n  type: __typename\n  utxoId\n  amount\n  assetId\n  blockCreated\n  txCreatedIdx\n}\n    `;\nexport const MessageCoinFragmentDoc = gql`\n    fragment messageCoinFragment on MessageCoin {\n  type: __typename\n  sender\n  recipient\n  nonce\n  amount\n  assetId\n  daHeight\n}\n    `;\nexport const MessageFragmentDoc = gql`\n    fragment messageFragment on Message {\n  amount\n  sender\n  recipient\n  data\n  daHeight\n}\n    `;\nexport const GetMessageFragmentDoc = gql`\n    fragment getMessageFragment on Message {\n  ...messageFragment\n  nonce\n}\n    ${MessageFragmentDoc}`;\nexport const MessageProofFragmentDoc = gql`\n    fragment messageProofFragment on MessageProof {\n  messageProof {\n    proofSet\n    proofIndex\n  }\n  blockProof {\n    proofSet\n    proofIndex\n  }\n  messageBlockHeader {\n    version\n    id\n    daHeight\n    consensusParametersVersion\n    stateTransitionBytecodeVersion\n    transactionsCount\n    messageReceiptCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    height\n    prevRoot\n    time\n    applicationHash\n  }\n  commitBlockHeader {\n    version\n    id\n    daHeight\n    consensusParametersVersion\n    stateTransitionBytecodeVersion\n    transactionsCount\n    messageReceiptCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    height\n    prevRoot\n    time\n    applicationHash\n  }\n  sender\n  recipient\n  amount\n  data\n}\n    `;\nexport const TxParametersFragmentDoc = gql`\n    fragment TxParametersFragment on TxParameters {\n  version\n  maxInputs\n  maxOutputs\n  maxWitnesses\n  maxGasPerTx\n  maxSize\n  maxBytecodeSubsections\n}\n    `;\nexport const PredicateParametersFragmentDoc = gql`\n    fragment PredicateParametersFragment on PredicateParameters {\n  version\n  maxPredicateLength\n  maxPredicateDataLength\n  maxGasPerPredicate\n  maxMessageDataLength\n}\n    `;\nexport const ScriptParametersFragmentDoc = gql`\n    fragment ScriptParametersFragment on ScriptParameters {\n  version\n  maxScriptLength\n  maxScriptDataLength\n}\n    `;\nexport const ContractParametersFragmentDoc = gql`\n    fragment ContractParametersFragment on ContractParameters {\n  version\n  contractMaxSize\n  maxStorageSlots\n}\n    `;\nexport const FeeParametersFragmentDoc = gql`\n    fragment FeeParametersFragment on FeeParameters {\n  version\n  gasPriceFactor\n  gasPerByte\n}\n    `;\nexport const DependentCostFragmentDoc = gql`\n    fragment DependentCostFragment on DependentCost {\n  ... on LightOperation {\n    type: __typename\n    base\n    unitsPerGas\n  }\n  ... on HeavyOperation {\n    type: __typename\n    base\n    gasPerUnit\n  }\n}\n    `;\nexport const GasCostsFragmentDoc = gql`\n    fragment GasCostsFragment on GasCosts {\n  contractRoot {\n    ...DependentCostFragment\n  }\n  stateRoot {\n    ...DependentCostFragment\n  }\n  vmInitialization {\n    ...DependentCostFragment\n  }\n  s256 {\n    ...DependentCostFragment\n  }\n  ecr1\n  newStoragePerByte\n}\n    ${DependentCostFragmentDoc}`;\nexport const ConsensusParametersFragmentDoc = gql`\n    fragment consensusParametersFragment on ConsensusParameters {\n  version\n  txParams {\n    ...TxParametersFragment\n  }\n  predicateParams {\n    ...PredicateParametersFragment\n  }\n  scriptParams {\n    ...ScriptParametersFragment\n  }\n  contractParams {\n    ...ContractParametersFragment\n  }\n  feeParams {\n    ...FeeParametersFragment\n  }\n  gasCosts {\n    ...GasCostsFragment\n  }\n  baseAssetId\n  chainId\n}\n    ${TxParametersFragmentDoc}\n${PredicateParametersFragmentDoc}\n${ScriptParametersFragmentDoc}\n${ContractParametersFragmentDoc}\n${FeeParametersFragmentDoc}\n${GasCostsFragmentDoc}`;\nexport const ChainInfoFragmentDoc = gql`\n    fragment chainInfoFragment on ChainInfo {\n  name\n  daHeight\n  consensusParameters {\n    ...consensusParametersFragment\n  }\n}\n    ${ConsensusParametersFragmentDoc}`;\nexport const ContractBalanceFragmentDoc = gql`\n    fragment contractBalanceFragment on ContractBalance {\n  contract\n  amount\n  assetId\n}\n    `;\nexport const PageInfoFragmentDoc = gql`\n    fragment pageInfoFragment on PageInfo {\n  hasPreviousPage\n  hasNextPage\n  startCursor\n  endCursor\n}\n    `;\nexport const NodeInfoFragmentDoc = gql`\n    fragment nodeInfoFragment on NodeInfo {\n  utxoValidation\n  vmBacktrace\n  maxTx\n  maxDepth\n  nodeVersion\n  indexation {\n    balances\n    coinsToSpend\n    assetMetadata\n  }\n}\n    `;\nexport const RelayedTransactionStatusFragmentDoc = gql`\n    fragment relayedTransactionStatusFragment on RelayedTransactionStatus {\n  ... on RelayedTransactionFailed {\n    blockHeight\n    failure\n  }\n}\n    `;\nexport const GetVersionDocument = gql`\n    query getVersion {\n  nodeInfo {\n    nodeVersion\n  }\n}\n    `;\nexport const GetNodeInfoDocument = gql`\n    query getNodeInfo {\n  nodeInfo {\n    ...nodeInfoFragment\n  }\n}\n    ${NodeInfoFragmentDoc}`;\nexport const GetChainDocument = gql`\n    query getChain {\n  chain {\n    ...chainInfoFragment\n  }\n}\n    ${ChainInfoFragmentDoc}`;\nexport const GetChainAndNodeInfoDocument = gql`\n    query getChainAndNodeInfo {\n  chain {\n    ...chainInfoFragment\n  }\n  nodeInfo {\n    ...nodeInfoFragment\n  }\n}\n    ${ChainInfoFragmentDoc}\n${NodeInfoFragmentDoc}`;\nexport const GetTransactionDocument = gql`\n    query getTransaction($transactionId: TransactionId!) {\n  transaction(id: $transactionId) {\n    ...transactionFragment\n  }\n}\n    ${TransactionFragmentDoc}`;\nexport const GetTransactionWithReceiptsDocument = gql`\n    query getTransactionWithReceipts($transactionId: TransactionId!) {\n  transaction(id: $transactionId) {\n    id\n    rawPayload\n    status {\n      ... on SubmittedStatus {\n        ...SubmittedStatusFragment\n      }\n      ... on SuccessStatus {\n        ...SuccessStatusWithBlockIdFragment\n      }\n      ... on FailureStatus {\n        ...FailureStatusWithBlockIdFragment\n      }\n      ... on SqueezedOutStatus {\n        ...SqueezedOutStatusFragment\n      }\n    }\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusWithBlockIdFragmentDoc}\n${FailureStatusWithBlockIdFragmentDoc}\n${SqueezedOutStatusFragmentDoc}`;\nexport const GetTransactionsDocument = gql`\n    query getTransactions($after: String, $before: String, $first: Int, $last: Int) {\n  transactions(after: $after, before: $before, first: $first, last: $last) {\n    edges {\n      node {\n        rawPayload\n      }\n    }\n    pageInfo {\n      ...pageInfoFragment\n    }\n  }\n}\n    ${PageInfoFragmentDoc}`;\nexport const GetTransactionsByOwnerDocument = gql`\n    query getTransactionsByOwner($owner: Address!, $after: String, $before: String, $first: Int, $last: Int) {\n  transactionsByOwner(\n    owner: $owner\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...transactionFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${TransactionFragmentDoc}`;\nexport const EstimatePredicatesDocument = gql`\n    query estimatePredicates($encodedTransaction: HexString!) {\n  estimatePredicates(tx: $encodedTransaction) {\n    ...transactionEstimatePredicatesFragment\n  }\n}\n    ${TransactionEstimatePredicatesFragmentDoc}`;\nexport const EstimatePredicatesAndGasPriceDocument = gql`\n    query estimatePredicatesAndGasPrice($encodedTransaction: HexString!, $blockHorizon: U32!) {\n  estimatePredicates(tx: $encodedTransaction) {\n    ...transactionEstimatePredicatesFragment\n  }\n  estimateGasPrice(blockHorizon: $blockHorizon) {\n    gasPrice\n  }\n}\n    ${TransactionEstimatePredicatesFragmentDoc}`;\nexport const GetLatestBlockDocument = gql`\n    query getLatestBlock {\n  chain {\n    latestBlock {\n      ...blockFragment\n    }\n  }\n}\n    ${BlockFragmentDoc}`;\nexport const GetLatestBlockHeightDocument = gql`\n    query getLatestBlockHeight {\n  chain {\n    latestBlock {\n      height\n    }\n  }\n}\n    `;\nexport const GetBlockDocument = gql`\n    query getBlock($blockId: BlockId, $height: U32) {\n  block(id: $blockId, height: $height) {\n    ...blockFragment\n  }\n}\n    ${BlockFragmentDoc}`;\nexport const GetBlockWithTransactionsDocument = gql`\n    query getBlockWithTransactions($blockId: BlockId, $blockHeight: U32) {\n  block(id: $blockId, height: $blockHeight) {\n    ...blockFragment\n    transactions {\n      ...transactionRawPayloadFragment\n    }\n  }\n}\n    ${BlockFragmentDoc}\n${TransactionRawPayloadFragmentDoc}`;\nexport const GetBlocksDocument = gql`\n    query getBlocks($after: String, $before: String, $first: Int, $last: Int) {\n  blocks(after: $after, before: $before, first: $first, last: $last) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...blockFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${BlockFragmentDoc}`;\nexport const GetCoinDocument = gql`\n    query getCoin($coinId: UtxoId!) {\n  coin(utxoId: $coinId) {\n    ...coinFragment\n    owner\n  }\n}\n    ${CoinFragmentDoc}`;\nexport const GetCoinsDocument = gql`\n    query getCoins($filter: CoinFilterInput!, $after: String, $before: String, $first: Int, $last: Int) {\n  coins(\n    filter: $filter\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...coinFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${CoinFragmentDoc}`;\nexport const GetCoinsToSpendDocument = gql`\n    query getCoinsToSpend($owner: Address!, $queryPerAsset: [SpendQueryElementInput!]!, $excludedIds: ExcludeInput) {\n  coinsToSpend(\n    owner: $owner\n    queryPerAsset: $queryPerAsset\n    excludedIds: $excludedIds\n  ) {\n    ...coinFragment\n    ...messageCoinFragment\n  }\n}\n    ${CoinFragmentDoc}\n${MessageCoinFragmentDoc}`;\nexport const GetContractDocument = gql`\n    query getContract($contractId: ContractId!) {\n  contract(id: $contractId) {\n    bytecode\n    id\n  }\n}\n    `;\nexport const GetContractBalanceDocument = gql`\n    query getContractBalance($contract: ContractId!, $asset: AssetId!) {\n  contractBalance(contract: $contract, asset: $asset) {\n    ...contractBalanceFragment\n  }\n}\n    ${ContractBalanceFragmentDoc}`;\nexport const GetBalanceDocument = gql`\n    query getBalance($owner: Address!, $assetId: AssetId!) {\n  balance(owner: $owner, assetId: $assetId) {\n    amount\n  }\n}\n    `;\nexport const GetBalanceV2Document = gql`\n    query getBalanceV2($owner: Address!, $assetId: AssetId!) {\n  balance(owner: $owner, assetId: $assetId) {\n    amountU128\n  }\n}\n    `;\nexport const GetLatestGasPriceDocument = gql`\n    query getLatestGasPrice {\n  latestGasPrice {\n    gasPrice\n  }\n}\n    `;\nexport const EstimateGasPriceDocument = gql`\n    query estimateGasPrice($blockHorizon: U32!) {\n  estimateGasPrice(blockHorizon: $blockHorizon) {\n    gasPrice\n  }\n}\n    `;\nexport const GetBalancesDocument = gql`\n    query getBalances($filter: BalanceFilterInput!, $after: String, $before: String, $first: Int, $last: Int) {\n  balances(\n    filter: $filter\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    edges {\n      node {\n        assetId\n        amount\n      }\n    }\n  }\n}\n    `;\nexport const GetBalancesV2Document = gql`\n    query getBalancesV2($filter: BalanceFilterInput!, $after: String, $before: String, $first: Int, $last: Int, $supportsPagination: Boolean!) {\n  balances(\n    filter: $filter\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo @include(if: $supportsPagination) {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        assetId\n        amountU128\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}`;\nexport const GetMessagesDocument = gql`\n    query getMessages($owner: Address!, $after: String, $before: String, $first: Int, $last: Int) {\n  messages(\n    owner: $owner\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...getMessageFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${GetMessageFragmentDoc}`;\nexport const DaCompressedBlockDocument = gql`\n    query daCompressedBlock($height: U32!) {\n  daCompressedBlock(height: $height) {\n    bytes\n  }\n}\n    `;\nexport const GetMessageProofDocument = gql`\n    query getMessageProof($transactionId: TransactionId!, $nonce: Nonce!, $commitBlockId: BlockId, $commitBlockHeight: U32) {\n  messageProof(\n    transactionId: $transactionId\n    nonce: $nonce\n    commitBlockId: $commitBlockId\n    commitBlockHeight: $commitBlockHeight\n  ) {\n    ...messageProofFragment\n  }\n}\n    ${MessageProofFragmentDoc}`;\nexport const GetMessageStatusDocument = gql`\n    query getMessageStatus($nonce: Nonce!) {\n  messageStatus(nonce: $nonce) {\n    state\n  }\n}\n    `;\nexport const GetRelayedTransactionStatusDocument = gql`\n    query getRelayedTransactionStatus($relayedTransactionId: RelayedTransactionId!) {\n  relayedTransactionStatus(id: $relayedTransactionId) {\n    ...relayedTransactionStatusFragment\n  }\n}\n    ${RelayedTransactionStatusFragmentDoc}`;\nexport const GetAssetDetailsDocument = gql`\n    query getAssetDetails($assetId: AssetId!) {\n  assetDetails(id: $assetId) {\n    subId\n    contractId\n    totalSupply\n  }\n}\n    `;\nexport const DryRunDocument = gql`\n    mutation dryRun($encodedTransactions: [HexString!]!, $utxoValidation: Boolean, $gasPrice: U64) {\n  dryRun(\n    txs: $encodedTransactions\n    utxoValidation: $utxoValidation\n    gasPrice: $gasPrice\n  ) {\n    ...dryRunTransactionExecutionStatusFragment\n  }\n}\n    ${DryRunTransactionExecutionStatusFragmentDoc}`;\nexport const SubmitDocument = gql`\n    mutation submit($encodedTransaction: HexString!) {\n  submit(tx: $encodedTransaction) {\n    id\n  }\n}\n    `;\nexport const ProduceBlocksDocument = gql`\n    mutation produceBlocks($startTimestamp: Tai64Timestamp, $blocksToProduce: U32!) {\n  produceBlocks(\n    blocksToProduce: $blocksToProduce\n    startTimestamp: $startTimestamp\n  )\n}\n    `;\nexport const GetMessageByNonceDocument = gql`\n    query getMessageByNonce($nonce: Nonce!) {\n  message(nonce: $nonce) {\n    ...messageFragment\n  }\n}\n    ${MessageFragmentDoc}`;\nexport const IsUserAccountDocument = gql`\n    query isUserAccount($blobId: BlobId!, $contractId: ContractId!, $transactionId: TransactionId!) {\n  blob(id: $blobId) {\n    id\n  }\n  contract(id: $contractId) {\n    id\n  }\n  transaction(id: $transactionId) {\n    id\n  }\n}\n    `;\nexport const GetConsensusParametersVersionDocument = gql`\n    query getConsensusParametersVersion {\n  chain {\n    latestBlock {\n      header {\n        consensusParametersVersion\n      }\n    }\n  }\n}\n    `;\nexport const SubmitAndAwaitStatusDocument = gql`\n    subscription submitAndAwaitStatus($encodedTransaction: HexString!) {\n  submitAndAwaitStatus(tx: $encodedTransaction) {\n    ...transactionStatusSubscriptionFragment\n  }\n}\n    ${TransactionStatusSubscriptionFragmentDoc}`;\nexport const StatusChangeDocument = gql`\n    subscription statusChange($transactionId: TransactionId!) {\n  statusChange(id: $transactionId) {\n    ...transactionStatusSubscriptionFragment\n  }\n}\n    ${TransactionStatusSubscriptionFragmentDoc}`;\nexport type Requester<C = {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R> | AsyncIterable<R>\nexport function getSdk<C>(requester: Requester<C>) {\n  return {\n    getVersion(variables?: GqlGetVersionQueryVariables, options?: C): Promise<GqlGetVersionQuery> {\n      return requester<GqlGetVersionQuery, GqlGetVersionQueryVariables>(GetVersionDocument, variables, options) as Promise<GqlGetVersionQuery>;\n    },\n    getNodeInfo(variables?: GqlGetNodeInfoQueryVariables, options?: C): Promise<GqlGetNodeInfoQuery> {\n      return requester<GqlGetNodeInfoQuery, GqlGetNodeInfoQueryVariables>(GetNodeInfoDocument, variables, options) as Promise<GqlGetNodeInfoQuery>;\n    },\n    getChain(variables?: GqlGetChainQueryVariables, options?: C): Promise<GqlGetChainQuery> {\n      return requester<GqlGetChainQuery, GqlGetChainQueryVariables>(GetChainDocument, variables, options) as Promise<GqlGetChainQuery>;\n    },\n    getChainAndNodeInfo(variables?: GqlGetChainAndNodeInfoQueryVariables, options?: C): Promise<GqlGetChainAndNodeInfoQuery> {\n      return requester<GqlGetChainAndNodeInfoQuery, GqlGetChainAndNodeInfoQueryVariables>(GetChainAndNodeInfoDocument, variables, options) as Promise<GqlGetChainAndNodeInfoQuery>;\n    },\n    getTransaction(variables: GqlGetTransactionQueryVariables, options?: C): Promise<GqlGetTransactionQuery> {\n      return requester<GqlGetTransactionQuery, GqlGetTransactionQueryVariables>(GetTransactionDocument, variables, options) as Promise<GqlGetTransactionQuery>;\n    },\n    getTransactionWithReceipts(variables: GqlGetTransactionWithReceiptsQueryVariables, options?: C): Promise<GqlGetTransactionWithReceiptsQuery> {\n      return requester<GqlGetTransactionWithReceiptsQuery, GqlGetTransactionWithReceiptsQueryVariables>(GetTransactionWithReceiptsDocument, variables, options) as Promise<GqlGetTransactionWithReceiptsQuery>;\n    },\n    getTransactions(variables?: GqlGetTransactionsQueryVariables, options?: C): Promise<GqlGetTransactionsQuery> {\n      return requester<GqlGetTransactionsQuery, GqlGetTransactionsQueryVariables>(GetTransactionsDocument, variables, options) as Promise<GqlGetTransactionsQuery>;\n    },\n    getTransactionsByOwner(variables: GqlGetTransactionsByOwnerQueryVariables, options?: C): Promise<GqlGetTransactionsByOwnerQuery> {\n      return requester<GqlGetTransactionsByOwnerQuery, GqlGetTransactionsByOwnerQueryVariables>(GetTransactionsByOwnerDocument, variables, options) as Promise<GqlGetTransactionsByOwnerQuery>;\n    },\n    estimatePredicates(variables: GqlEstimatePredicatesQueryVariables, options?: C): Promise<GqlEstimatePredicatesQuery> {\n      return requester<GqlEstimatePredicatesQuery, GqlEstimatePredicatesQueryVariables>(EstimatePredicatesDocument, variables, options) as Promise<GqlEstimatePredicatesQuery>;\n    },\n    estimatePredicatesAndGasPrice(variables: GqlEstimatePredicatesAndGasPriceQueryVariables, options?: C): Promise<GqlEstimatePredicatesAndGasPriceQuery> {\n      return requester<GqlEstimatePredicatesAndGasPriceQuery, GqlEstimatePredicatesAndGasPriceQueryVariables>(EstimatePredicatesAndGasPriceDocument, variables, options) as Promise<GqlEstimatePredicatesAndGasPriceQuery>;\n    },\n    getLatestBlock(variables?: GqlGetLatestBlockQueryVariables, options?: C): Promise<GqlGetLatestBlockQuery> {\n      return requester<GqlGetLatestBlockQuery, GqlGetLatestBlockQueryVariables>(GetLatestBlockDocument, variables, options) as Promise<GqlGetLatestBlockQuery>;\n    },\n    getLatestBlockHeight(variables?: GqlGetLatestBlockHeightQueryVariables, options?: C): Promise<GqlGetLatestBlockHeightQuery> {\n      return requester<GqlGetLatestBlockHeightQuery, GqlGetLatestBlockHeightQueryVariables>(GetLatestBlockHeightDocument, variables, options) as Promise<GqlGetLatestBlockHeightQuery>;\n    },\n    getBlock(variables?: GqlGetBlockQueryVariables, options?: C): Promise<GqlGetBlockQuery> {\n      return requester<GqlGetBlockQuery, GqlGetBlockQueryVariables>(GetBlockDocument, variables, options) as Promise<GqlGetBlockQuery>;\n    },\n    getBlockWithTransactions(variables?: GqlGetBlockWithTransactionsQueryVariables, options?: C): Promise<GqlGetBlockWithTransactionsQuery> {\n      return requester<GqlGetBlockWithTransactionsQuery, GqlGetBlockWithTransactionsQueryVariables>(GetBlockWithTransactionsDocument, variables, options) as Promise<GqlGetBlockWithTransactionsQuery>;\n    },\n    getBlocks(variables?: GqlGetBlocksQueryVariables, options?: C): Promise<GqlGetBlocksQuery> {\n      return requester<GqlGetBlocksQuery, GqlGetBlocksQueryVariables>(GetBlocksDocument, variables, options) as Promise<GqlGetBlocksQuery>;\n    },\n    getCoin(variables: GqlGetCoinQueryVariables, options?: C): Promise<GqlGetCoinQuery> {\n      return requester<GqlGetCoinQuery, GqlGetCoinQueryVariables>(GetCoinDocument, variables, options) as Promise<GqlGetCoinQuery>;\n    },\n    getCoins(variables: GqlGetCoinsQueryVariables, options?: C): Promise<GqlGetCoinsQuery> {\n      return requester<GqlGetCoinsQuery, GqlGetCoinsQueryVariables>(GetCoinsDocument, variables, options) as Promise<GqlGetCoinsQuery>;\n    },\n    getCoinsToSpend(variables: GqlGetCoinsToSpendQueryVariables, options?: C): Promise<GqlGetCoinsToSpendQuery> {\n      return requester<GqlGetCoinsToSpendQuery, GqlGetCoinsToSpendQueryVariables>(GetCoinsToSpendDocument, variables, options) as Promise<GqlGetCoinsToSpendQuery>;\n    },\n    getContract(variables: GqlGetContractQueryVariables, options?: C): Promise<GqlGetContractQuery> {\n      return requester<GqlGetContractQuery, GqlGetContractQueryVariables>(GetContractDocument, variables, options) as Promise<GqlGetContractQuery>;\n    },\n    getContractBalance(variables: GqlGetContractBalanceQueryVariables, options?: C): Promise<GqlGetContractBalanceQuery> {\n      return requester<GqlGetContractBalanceQuery, GqlGetContractBalanceQueryVariables>(GetContractBalanceDocument, variables, options) as Promise<GqlGetContractBalanceQuery>;\n    },\n    getBalance(variables: GqlGetBalanceQueryVariables, options?: C): Promise<GqlGetBalanceQuery> {\n      return requester<GqlGetBalanceQuery, GqlGetBalanceQueryVariables>(GetBalanceDocument, variables, options) as Promise<GqlGetBalanceQuery>;\n    },\n    getBalanceV2(variables: GqlGetBalanceV2QueryVariables, options?: C): Promise<GqlGetBalanceV2Query> {\n      return requester<GqlGetBalanceV2Query, GqlGetBalanceV2QueryVariables>(GetBalanceV2Document, variables, options) as Promise<GqlGetBalanceV2Query>;\n    },\n    getLatestGasPrice(variables?: GqlGetLatestGasPriceQueryVariables, options?: C): Promise<GqlGetLatestGasPriceQuery> {\n      return requester<GqlGetLatestGasPriceQuery, GqlGetLatestGasPriceQueryVariables>(GetLatestGasPriceDocument, variables, options) as Promise<GqlGetLatestGasPriceQuery>;\n    },\n    estimateGasPrice(variables: GqlEstimateGasPriceQueryVariables, options?: C): Promise<GqlEstimateGasPriceQuery> {\n      return requester<GqlEstimateGasPriceQuery, GqlEstimateGasPriceQueryVariables>(EstimateGasPriceDocument, variables, options) as Promise<GqlEstimateGasPriceQuery>;\n    },\n    getBalances(variables: GqlGetBalancesQueryVariables, options?: C): Promise<GqlGetBalancesQuery> {\n      return requester<GqlGetBalancesQuery, GqlGetBalancesQueryVariables>(GetBalancesDocument, variables, options) as Promise<GqlGetBalancesQuery>;\n    },\n    getBalancesV2(variables: GqlGetBalancesV2QueryVariables, options?: C): Promise<GqlGetBalancesV2Query> {\n      return requester<GqlGetBalancesV2Query, GqlGetBalancesV2QueryVariables>(GetBalancesV2Document, variables, options) as Promise<GqlGetBalancesV2Query>;\n    },\n    getMessages(variables: GqlGetMessagesQueryVariables, options?: C): Promise<GqlGetMessagesQuery> {\n      return requester<GqlGetMessagesQuery, GqlGetMessagesQueryVariables>(GetMessagesDocument, variables, options) as Promise<GqlGetMessagesQuery>;\n    },\n    daCompressedBlock(variables: GqlDaCompressedBlockQueryVariables, options?: C): Promise<GqlDaCompressedBlockQuery> {\n      return requester<GqlDaCompressedBlockQuery, GqlDaCompressedBlockQueryVariables>(DaCompressedBlockDocument, variables, options) as Promise<GqlDaCompressedBlockQuery>;\n    },\n    getMessageProof(variables: GqlGetMessageProofQueryVariables, options?: C): Promise<GqlGetMessageProofQuery> {\n      return requester<GqlGetMessageProofQuery, GqlGetMessageProofQueryVariables>(GetMessageProofDocument, variables, options) as Promise<GqlGetMessageProofQuery>;\n    },\n    getMessageStatus(variables: GqlGetMessageStatusQueryVariables, options?: C): Promise<GqlGetMessageStatusQuery> {\n      return requester<GqlGetMessageStatusQuery, GqlGetMessageStatusQueryVariables>(GetMessageStatusDocument, variables, options) as Promise<GqlGetMessageStatusQuery>;\n    },\n    getRelayedTransactionStatus(variables: GqlGetRelayedTransactionStatusQueryVariables, options?: C): Promise<GqlGetRelayedTransactionStatusQuery> {\n      return requester<GqlGetRelayedTransactionStatusQuery, GqlGetRelayedTransactionStatusQueryVariables>(GetRelayedTransactionStatusDocument, variables, options) as Promise<GqlGetRelayedTransactionStatusQuery>;\n    },\n    getAssetDetails(variables: GqlGetAssetDetailsQueryVariables, options?: C): Promise<GqlGetAssetDetailsQuery> {\n      return requester<GqlGetAssetDetailsQuery, GqlGetAssetDetailsQueryVariables>(GetAssetDetailsDocument, variables, options) as Promise<GqlGetAssetDetailsQuery>;\n    },\n    dryRun(variables: GqlDryRunMutationVariables, options?: C): Promise<GqlDryRunMutation> {\n      return requester<GqlDryRunMutation, GqlDryRunMutationVariables>(DryRunDocument, variables, options) as Promise<GqlDryRunMutation>;\n    },\n    submit(variables: GqlSubmitMutationVariables, options?: C): Promise<GqlSubmitMutation> {\n      return requester<GqlSubmitMutation, GqlSubmitMutationVariables>(SubmitDocument, variables, options) as Promise<GqlSubmitMutation>;\n    },\n    produceBlocks(variables: GqlProduceBlocksMutationVariables, options?: C): Promise<GqlProduceBlocksMutation> {\n      return requester<GqlProduceBlocksMutation, GqlProduceBlocksMutationVariables>(ProduceBlocksDocument, variables, options) as Promise<GqlProduceBlocksMutation>;\n    },\n    getMessageByNonce(variables: GqlGetMessageByNonceQueryVariables, options?: C): Promise<GqlGetMessageByNonceQuery> {\n      return requester<GqlGetMessageByNonceQuery, GqlGetMessageByNonceQueryVariables>(GetMessageByNonceDocument, variables, options) as Promise<GqlGetMessageByNonceQuery>;\n    },\n    isUserAccount(variables: GqlIsUserAccountQueryVariables, options?: C): Promise<GqlIsUserAccountQuery> {\n      return requester<GqlIsUserAccountQuery, GqlIsUserAccountQueryVariables>(IsUserAccountDocument, variables, options) as Promise<GqlIsUserAccountQuery>;\n    },\n    getConsensusParametersVersion(variables?: GqlGetConsensusParametersVersionQueryVariables, options?: C): Promise<GqlGetConsensusParametersVersionQuery> {\n      return requester<GqlGetConsensusParametersVersionQuery, GqlGetConsensusParametersVersionQueryVariables>(GetConsensusParametersVersionDocument, variables, options) as Promise<GqlGetConsensusParametersVersionQuery>;\n    },\n    submitAndAwaitStatus(variables: GqlSubmitAndAwaitStatusSubscriptionVariables, options?: C): AsyncIterable<GqlSubmitAndAwaitStatusSubscription> {\n      return requester<GqlSubmitAndAwaitStatusSubscription, GqlSubmitAndAwaitStatusSubscriptionVariables>(SubmitAndAwaitStatusDocument, variables, options) as AsyncIterable<GqlSubmitAndAwaitStatusSubscription>;\n    },\n    statusChange(variables: GqlStatusChangeSubscriptionVariables, options?: C): AsyncIterable<GqlStatusChangeSubscription> {\n      return requester<GqlStatusChangeSubscription, GqlStatusChangeSubscriptionVariables>(StatusChangeDocument, variables, options) as AsyncIterable<GqlStatusChangeSubscription>;\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { DocumentNode } from 'graphql';\nimport { print } from 'graphql';\n\nimport { assertGqlResponseHasNoErrors } from './utils/handle-gql-error-message';\n\ntype FuelGraphQLSubscriberOptions = {\n  url: string;\n  query: DocumentNode;\n  variables?: Record<string, unknown>;\n  fetchFn: typeof fetch;\n};\n\nexport class FuelGraphqlSubscriber implements AsyncIterator<unknown> {\n  public static incompatibleNodeVersionMessage: string | false = false;\n  private static textDecoder = new TextDecoder();\n\n  private constructor(private stream: ReadableStreamDefaultReader<Uint8Array>) {}\n\n  public static async create(options: FuelGraphQLSubscriberOptions) {\n    const { url, query, variables, fetchFn } = options;\n    const response = await fetchFn(`${url}-sub`, {\n      method: 'POST',\n      body: JSON.stringify({\n        query: print(query),\n        variables,\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'text/event-stream',\n      },\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const [errorReader, resultReader] = response.body!.tee().map((stream) => stream.getReader());\n\n    /**\n     * If the node threw an error, read it and throw it to the user\n     * Else just discard the response and return the subscriber below,\n     * which will have that same response via `resultReader`\n     */\n    await new FuelGraphqlSubscriber(errorReader).next();\n\n    return new FuelGraphqlSubscriber(resultReader);\n  }\n\n  private events: Array<{ data: unknown; errors?: { message: string }[] }> = [];\n  private parsingLeftover = '';\n\n  async next(): Promise<IteratorResult<unknown, unknown>> {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      if (this.events.length > 0) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const { data, errors } = this.events.shift()!;\n        assertGqlResponseHasNoErrors(errors, FuelGraphqlSubscriber.incompatibleNodeVersionMessage);\n        return { value: data, done: false };\n      }\n      const { value, done } = await this.stream.read();\n      if (done) {\n        return { value, done };\n      }\n\n      /**\n       * We don't care about keep-alive messages.\n       * The only responses that I came across from the node are either 200 responses with \"data:.*\" or keep-alive messages.\n       * You can find the keep-alive message in the fuel-core codebase (latest permalink as of writing):\n       * https://github.com/FuelLabs/fuel-core/blob/e1e631902f762081d2124d9c457ddfe13ac366dc/crates/fuel-core/src/graphql_api/service.rs#L247\n       * To get the actual latest info you need to check out the master branch (might change):\n       * https://github.com/FuelLabs/fuel-core/blob/master/crates/fuel-core/src/graphql_api/service.rs#L247\n       * */\n      const decoded = FuelGraphqlSubscriber.textDecoder\n        .decode(value)\n        .replace(':keep-alive-text\\n\\n', '');\n\n      if (decoded === '') {\n        continue;\n      }\n\n      const text = `${this.parsingLeftover}${decoded}`;\n      const regex = /data:.*\\n\\n/g;\n\n      const matches = [...text.matchAll(regex)].flatMap((match) => match);\n\n      matches.forEach((match) => {\n        try {\n          this.events.push(JSON.parse(match.replace(/^data:/, '')));\n        } catch (e) {\n          throw new FuelError(\n            ErrorCode.STREAM_PARSING_ERROR,\n            `Error while parsing stream data response: ${text}`\n          );\n        }\n      });\n\n      this.parsingLeftover = text.replace(matches.join(), '');\n    }\n  }\n\n  /**\n   * Gets called when `break` is called in a `for-await-of` loop.\n   */\n  return(): Promise<IteratorResult<unknown, undefined>> {\n    return Promise.resolve({ done: true, value: undefined });\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<unknown, unknown, undefined> {\n    return this;\n  }\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { GraphQLError } from 'graphql';\n\nenum GqlErrorMessage {\n  NOT_ENOUGH_COINS_MAX_COINS = 'the target cannot be met due to no coins available or exceeding the \\\\d+ coin limit.',\n  ASSET_NOT_FOUND = 'resource was not found in table',\n}\n\ntype GqlError = { message: string } | GraphQLError;\n\nconst mapGqlErrorMessage = (error: GqlError): FuelError => {\n  if (new RegExp(GqlErrorMessage.NOT_ENOUGH_COINS_MAX_COINS).test(error.message)) {\n    return new FuelError(\n      ErrorCode.INSUFFICIENT_FUNDS_OR_MAX_COINS,\n      `Insufficient funds or too many small value coins. Consider combining UTXOs.`,\n      {},\n      error\n    );\n  }\n\n  if (new RegExp(GqlErrorMessage.ASSET_NOT_FOUND).test(error.message)) {\n    return new FuelError(\n      ErrorCode.ASSET_NOT_FOUND,\n      `Asset not found for given asset id.`,\n      {},\n      error\n    );\n  }\n\n  return new FuelError(ErrorCode.INVALID_REQUEST, error.message, {}, error);\n};\n\nconst mapGqlErrorWithIncompatibleNodeVersion = (\n  error: FuelError,\n  incompatibleNodeVersionMessage: string | false\n) => {\n  if (!incompatibleNodeVersionMessage) {\n    return error;\n  }\n\n  return new FuelError(\n    error.code,\n    `${error.message}\\n\\n${incompatibleNodeVersionMessage}`,\n    error.metadata,\n    error.rawError\n  );\n};\n\nexport const assertGqlResponseHasNoErrors = (\n  errors: GqlError[] | undefined,\n  incompatibleNodeVersionMessage: string | false = false\n) => {\n  if (!Array.isArray(errors)) {\n    return;\n  }\n\n  const mappedErrors = errors.map(mapGqlErrorMessage);\n  if (mappedErrors.length === 1) {\n    throw mapGqlErrorWithIncompatibleNodeVersion(mappedErrors[0], incompatibleNodeVersionMessage);\n  }\n\n  const errorMessage = mappedErrors.map((err) => err.message).join('\\n');\n  throw mapGqlErrorWithIncompatibleNodeVersion(\n    new FuelError(ErrorCode.INVALID_REQUEST, errorMessage, {}, mappedErrors),\n    incompatibleNodeVersionMessage\n  );\n};\n", "import { FuelError, ErrorCode } from '@fuel-ts/errors';\nimport { hexlify } from '@fuel-ts/utils';\n\nimport { isRequestInputCoin, isRequestInputCoinOrMessage } from './transaction-request';\nimport type {\n  CoinTransactionRequestInput,\n  MessageTransactionRequestInput,\n  TransactionRequestInput,\n} from './transaction-request';\n\ntype ResourcesOwnersMap = Map<string, { utxos: Set<string>; messages: Set<string> }>;\n\ninterface TransactionResourcesCache {\n  owners: ResourcesOwnersMap;\n  timestamp: number;\n}\n\nconst cache = new Map<string, TransactionResourcesCache>();\n\nexport class ResourceCache {\n  readonly ttl: number;\n\n  constructor(ttl: number) {\n    this.ttl = ttl; // TTL in milliseconds\n\n    if (typeof ttl !== 'number' || this.ttl <= 0) {\n      throw new FuelError(\n        ErrorCode.INVALID_TTL,\n        `Invalid TTL: ${this.ttl}. Use a value greater than zero.`\n      );\n    }\n  }\n\n  // Add resources to the cache\n  set(transactionId: string, inputs: TransactionRequestInput[]): void {\n    const transactionResourceCache = this.setupResourcesCache(inputs);\n    cache.set(transactionId, transactionResourceCache);\n  }\n\n  unset(transactionId: string): void {\n    cache.delete(transactionId);\n  }\n\n  getActiveData(owner: string) {\n    const activeData: { utxos: string[]; messages: string[] } = { utxos: [], messages: [] };\n    const currentTime = Date.now();\n    const expired: string[] = [];\n\n    cache.forEach((resource, transactionId) => {\n      const isActive = currentTime - resource.timestamp < this.ttl;\n\n      if (isActive) {\n        const resourcesFromOwner = resource.owners.get(owner);\n        if (resourcesFromOwner) {\n          activeData.utxos.push(...resourcesFromOwner.utxos);\n          activeData.messages.push(...resourcesFromOwner.messages);\n        }\n      } else {\n        expired.push(transactionId);\n      }\n    });\n\n    expired.forEach(this.unset);\n\n    activeData.utxos.reverse();\n    activeData.messages.reverse();\n\n    return activeData;\n  }\n\n  isCached(owner: string, key: string): boolean {\n    const currentTime = Date.now();\n    let cached = false;\n    const expired: string[] = [];\n\n    for (const [transactionId, resourceData] of cache.entries()) {\n      const isActive = currentTime - resourceData.timestamp < this.ttl;\n      if (isActive) {\n        const resourcesFromOwner = resourceData.owners.get(owner);\n\n        if (resourcesFromOwner?.utxos.has(key) || resourcesFromOwner?.messages.has(key)) {\n          cached = true;\n          break;\n        }\n      } else {\n        expired.push(transactionId);\n      }\n    }\n\n    expired.forEach(this.unset);\n\n    return cached;\n  }\n\n  clear() {\n    cache.clear();\n  }\n\n  private setupResourcesCache(inputs: TransactionRequestInput[]) {\n    const currentTime = Date.now();\n\n    const transactionResourcesCache: TransactionResourcesCache = {\n      owners: new Map() as ResourcesOwnersMap,\n      timestamp: currentTime,\n    };\n\n    inputs.filter(isRequestInputCoinOrMessage).forEach((input) => {\n      const { owner, key, type } = this.extractResourceData(input);\n\n      if (!transactionResourcesCache.owners.has(owner)) {\n        transactionResourcesCache.owners.set(owner, { utxos: new Set(), messages: new Set() });\n      }\n\n      if (type === 'utxo') {\n        transactionResourcesCache.owners.get(owner)?.utxos.add(key);\n      } else {\n        transactionResourcesCache.owners.get(owner)?.messages.add(key);\n      }\n    });\n\n    return transactionResourcesCache;\n  }\n\n  private extractResourceData(input: CoinTransactionRequestInput | MessageTransactionRequestInput) {\n    if (isRequestInputCoin(input)) {\n      return { owner: hexlify(input.owner), key: hexlify(input.id), type: 'utxo' as const };\n    }\n    return { owner: hexlify(input.recipient), key: hexlify(input.nonce), type: 'message' as const };\n  }\n}\n", "import { BYTES_32, UTXO_ID_LEN } from '@fuel-ts/abi-coder';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BigNumberish } from '@fuel-ts/math';\nimport { bn, toNumber } from '@fuel-ts/math';\nimport type { Input } from '@fuel-ts/transactions';\nimport { InputType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\n\nexport type CoinTransactionRequestInput = {\n  type: InputType.Coin;\n\n  /** UTXO ID */\n  id: BytesLike;\n\n  /** Owning address or script hash */\n  owner: BytesLike;\n\n  /** Amount of coins */\n  amount: BigNumberish;\n\n  /** Asset ID of the coins */\n  assetId: BytesLike;\n\n  /** Points to the TX whose output is being spent. (TxPointer) */\n  txPointer: BytesLike;\n\n  /** Index of witness that authorizes spending the coin */\n  witnessIndex: number;\n\n  /** Gas used by predicate */\n  predicateGasUsed?: BigNumberish;\n\n  /** Predicate bytecode */\n  predicate?: BytesLike;\n\n  /** Predicate input data (parameters) */\n  predicateData?: BytesLike;\n};\n\nexport type MessageTransactionRequestInput = {\n  type: InputType.Message;\n\n  /** Address of sender */\n  sender: BytesLike;\n\n  /** Address of recipient */\n  recipient: BytesLike;\n\n  /** Amount of coins */\n  amount: BigNumberish;\n\n  /** Index of witness that authorizes the message */\n  witnessIndex: number;\n\n  /** Unique nonce of message */\n  nonce: BytesLike;\n\n  /** Gas used by predicate */\n  predicateGasUsed?: BigNumberish;\n\n  /** Predicate bytecode */\n  predicate?: BytesLike;\n\n  /** Predicate input data (parameters) */\n  predicateData?: BytesLike;\n\n  /** data of message */\n  data?: BytesLike;\n};\n\nexport type ContractTransactionRequestInput = {\n  type: InputType.Contract;\n\n  /** Points to the TX whose output is being spent. (TxPointer) */\n  txPointer: BytesLike;\n\n  /** Contract ID */\n  contractId: BytesLike;\n};\nexport type TransactionRequestInput =\n  | CoinTransactionRequestInput\n  | ContractTransactionRequestInput\n  | MessageTransactionRequestInput;\n\n/** @hidden */\nexport const inputify = (value: TransactionRequestInput): Input => {\n  const { type } = value;\n\n  switch (value.type) {\n    case InputType.Coin: {\n      const predicate = arrayify(value.predicate ?? '0x');\n      const predicateData = arrayify(value.predicateData ?? '0x');\n      return {\n        type: InputType.Coin,\n        txID: hexlify(arrayify(value.id).slice(0, BYTES_32)),\n        outputIndex: toNumber(arrayify(value.id).slice(BYTES_32, UTXO_ID_LEN)),\n        owner: hexlify(value.owner),\n        amount: bn(value.amount),\n        assetId: hexlify(value.assetId),\n        txPointer: {\n          blockHeight: toNumber(arrayify(value.txPointer).slice(0, 8)),\n          txIndex: toNumber(arrayify(value.txPointer).slice(8, 16)),\n        },\n        witnessIndex: value.witnessIndex,\n        predicateGasUsed: bn(value.predicateGasUsed),\n        predicateLength: bn(predicate.length),\n        predicateDataLength: bn(predicateData.length),\n        predicate: hexlify(predicate),\n        predicateData: hexlify(predicateData),\n      };\n    }\n    case InputType.Contract: {\n      return {\n        type: InputType.Contract,\n        txID: ZeroBytes32,\n        outputIndex: 0,\n        balanceRoot: ZeroBytes32,\n        stateRoot: ZeroBytes32,\n        txPointer: {\n          blockHeight: toNumber(arrayify(value.txPointer).slice(0, 8)),\n          txIndex: toNumber(arrayify(value.txPointer).slice(8, 16)),\n        },\n        contractID: hexlify(value.contractId),\n      };\n    }\n    case InputType.Message: {\n      const predicate = arrayify(value.predicate ?? '0x');\n      const predicateData = arrayify(value.predicateData ?? '0x');\n      const data = arrayify(value.data ?? '0x');\n      return {\n        type: InputType.Message,\n        sender: hexlify(value.sender),\n        recipient: hexlify(value.recipient),\n        amount: bn(value.amount),\n        nonce: hexlify(value.nonce),\n        witnessIndex: value.witnessIndex,\n        predicateGasUsed: bn(value.predicateGasUsed),\n        predicateLength: bn(predicate.length),\n        predicateDataLength: bn(predicateData.length),\n        predicate: hexlify(predicate),\n        predicateData: hexlify(predicateData),\n        data: hexlify(data),\n        dataLength: data.length,\n      };\n    }\n    default: {\n      throw new FuelError(\n        ErrorCode.INVALID_TRANSACTION_INPUT,\n        `Invalid transaction input type: ${type}.`\n      );\n    }\n  }\n};\n", "import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BigNumberish } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type { Output } from '@fuel-ts/transactions';\nimport { OutputType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify } from '@fuel-ts/utils';\n\nexport type CoinTransactionRequestOutput = {\n  type: OutputType.Coin;\n  /** Receiving address or script hash */\n  to: BytesLike;\n  /** Amount of coins to send */\n  amount: BigNumberish;\n  /** Asset ID of coins */\n  assetId: BytesLike;\n};\nexport type ContractTransactionRequestOutput = {\n  type: OutputType.Contract;\n  /** Index of input contract */\n  inputIndex: number;\n};\nexport type ChangeTransactionRequestOutput = {\n  type: OutputType.Change;\n  /** Receiving address or script hash */\n  to: BytesLike;\n  /** Asset ID of coins */\n  assetId: BytesLike;\n};\nexport type VariableTransactionRequestOutput = {\n  type: OutputType.Variable;\n};\nexport type ContractCreatedTransactionRequestOutput = {\n  type: OutputType.ContractCreated;\n  /** Contract ID */\n  contractId: BytesLike;\n  /** State Root */\n  stateRoot: BytesLike;\n};\nexport type TransactionRequestOutput =\n  | CoinTransactionRequestOutput\n  | ContractTransactionRequestOutput\n  | ChangeTransactionRequestOutput\n  | VariableTransactionRequestOutput\n  | ContractCreatedTransactionRequestOutput;\n\n/** @hidden */\nexport const outputify = (value: TransactionRequestOutput): Output => {\n  const { type } = value;\n\n  switch (type) {\n    case OutputType.Coin: {\n      return {\n        type: OutputType.Coin,\n        to: hexlify(value.to),\n        amount: bn(value.amount),\n        assetId: hexlify(value.assetId),\n      };\n    }\n    case OutputType.Contract: {\n      return {\n        type: OutputType.Contract,\n        inputIndex: value.inputIndex,\n        balanceRoot: ZeroBytes32,\n        stateRoot: ZeroBytes32,\n      };\n    }\n    case OutputType.Change: {\n      return {\n        type: OutputType.Change,\n        to: hexlify(value.to),\n        amount: bn(0),\n        assetId: hexlify(value.assetId),\n      };\n    }\n    case OutputType.Variable: {\n      return {\n        type: OutputType.Variable,\n        to: ZeroBytes32,\n        amount: bn(0),\n        assetId: ZeroBytes32,\n      };\n    }\n    case OutputType.ContractCreated: {\n      return {\n        type: OutputType.ContractCreated,\n        contractId: hexlify(value.contractId),\n        stateRoot: hexlify(value.stateRoot),\n      };\n    }\n    default: {\n      throw new FuelError(\n        ErrorCode.INVALID_TRANSACTION_INPUT,\n        `Invalid transaction output type: ${type}.`\n      );\n    }\n  }\n};\n", "import { UTXO_ID_LEN } from '@fuel-ts/abi-coder';\nimport { Address, addressify } from '@fuel-ts/address';\nimport type { AddressInput, AddressLike } from '@fuel-ts/address';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { randomBytes } from '@fuel-ts/crypto';\nimport { FuelError } from '@fuel-ts/errors';\nimport type { BN, BigNumberish } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type {\n  TransactionScript,\n  Policy,\n  TransactionCreate,\n  TransactionBlob,\n  TransactionUpload,\n  TransactionUpgrade,\n} from '@fuel-ts/transactions';\nimport {\n  PolicyType,\n  TransactionCoder,\n  InputType,\n  OutputType,\n  TransactionType,\n} from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { concat, hexlify, isDefined } from '@fuel-ts/utils';\n\nimport type { Account } from '../../account';\nimport type { Coin } from '../coin';\nimport type { CoinQuantity, CoinQuantityLike } from '../coin-quantity';\nimport { coinQuantityfy } from '../coin-quantity';\nimport { isMessageCoin, type Message, type MessageCoin } from '../message';\nimport type { ChainInfo, GasCosts } from '../provider';\nimport type { Resource } from '../resource';\nimport { isCoin } from '../resource';\nimport type { TransactionSummaryJsonPartial } from '../utils';\nimport { normalizeJSON } from '../utils';\nimport { getMaxGas, getMinGas } from '../utils/gas';\n\nimport { NoWitnessAtIndexError } from './errors';\nimport {\n  getRequestInputResourceOwner,\n  isRequestInputCoinOrMessage,\n  isRequestInputResource,\n  isRequestInputResourceFromOwner,\n} from './helpers';\nimport type {\n  TransactionRequestInput,\n  CoinTransactionRequestInput,\n  MessageTransactionRequestInput,\n} from './input';\nimport { inputify } from './input';\nimport type {\n  TransactionRequestOutput,\n  ChangeTransactionRequestOutput,\n  CoinTransactionRequestOutput,\n} from './output';\nimport { outputify } from './output';\nimport type { TransactionRequestLike } from './types';\nimport type { TransactionRequestWitness } from './witness';\nimport { witnessify } from './witness';\n\nexport {\n  /**\n   * @hidden\n   */\n  TransactionType,\n};\n\n/**\n * @hidden\n *\n * Interface defining a like structure for a base transaction request.\n */\nexport interface BaseTransactionRequestLike {\n  /** Gas price for transaction */\n  tip?: BigNumberish;\n  /** Block until which tx cannot be included */\n  maturity?: number;\n  /** The block number after which the transaction is no longer valid. */\n  expiration?: number;\n  /** The maximum fee payable by this transaction using BASE_ASSET. */\n  maxFee?: BigNumberish;\n  /** The maximum amount of witness data allowed for the transaction */\n  witnessLimit?: BigNumberish;\n  /** List of inputs */\n  inputs?: TransactionRequestInput[];\n  /** List of outputs */\n  outputs?: TransactionRequestOutput[];\n  /** List of witnesses */\n  witnesses?: TransactionRequestWitness[];\n}\n\ntype ToBaseTransactionResponse = Pick<\n  TransactionScript,\n  | 'inputs'\n  | 'inputsCount'\n  | 'outputs'\n  | 'outputsCount'\n  | 'witnesses'\n  | 'witnessesCount'\n  | 'policies'\n  | 'policyTypes'\n>;\n\nexport type TransactionStateFlag =\n  | { state: undefined; transactionId: undefined; summary: undefined }\n  | {\n      state: 'funded';\n      transactionId: string;\n      summary: TransactionSummaryJsonPartial | undefined;\n    };\n\n/**\n * Abstract class to define the functionalities of a transaction request transaction request.\n */\nexport abstract class BaseTransactionRequest implements BaseTransactionRequestLike {\n  /** Type of the transaction */\n  abstract type: TransactionType;\n  /** Gas price for transaction */\n  tip?: BN;\n  /** Block until which tx cannot be included */\n  maturity?: number;\n  /** The block number after which the transaction is no longer valid. */\n  expiration?: number;\n  /** The maximum fee payable by this transaction using BASE_ASSET. */\n  maxFee: BN;\n  /** The maximum amount of witness data allowed for the transaction */\n  witnessLimit?: BN | undefined;\n  /** List of inputs */\n  inputs: TransactionRequestInput[] = [];\n  /** List of outputs */\n  outputs: TransactionRequestOutput[] = [];\n  /** List of witnesses */\n  witnesses: TransactionRequestWitness[] = [];\n\n  /**\n   * @hidden\n   *\n   * The current status of the transaction\n   */\n  flag: TransactionStateFlag = { state: undefined, transactionId: undefined, summary: undefined };\n\n  /**\n   * Constructor for initializing a base transaction request.\n   *\n   * @param baseTransactionRequest - Optional object containing properties to initialize the transaction request.\n   */\n  constructor({\n    tip,\n    maturity,\n    expiration,\n    maxFee,\n    witnessLimit,\n    inputs,\n    outputs,\n    witnesses,\n  }: BaseTransactionRequestLike = {}) {\n    this.tip = tip ? bn(tip) : undefined;\n    this.maturity = maturity && maturity > 0 ? maturity : undefined;\n    this.expiration = expiration && expiration > 0 ? expiration : undefined;\n    this.witnessLimit = isDefined(witnessLimit) ? bn(witnessLimit) : undefined;\n    this.maxFee = bn(maxFee);\n    this.inputs = inputs ?? [];\n    this.outputs = outputs ?? [];\n    this.witnesses = witnesses ?? [];\n  }\n\n  static getPolicyMeta(req: BaseTransactionRequest) {\n    let policyTypes = 0;\n    const policies: Policy[] = [];\n\n    const { tip, witnessLimit, maturity, expiration } = req;\n\n    if (bn(tip).gt(0)) {\n      policyTypes += PolicyType.Tip;\n      policies.push({ data: bn(tip), type: PolicyType.Tip });\n    }\n    if (isDefined(witnessLimit) && bn(witnessLimit).gte(0)) {\n      policyTypes += PolicyType.WitnessLimit;\n      policies.push({ data: bn(witnessLimit), type: PolicyType.WitnessLimit });\n    }\n    if (maturity && maturity > 0) {\n      policyTypes += PolicyType.Maturity;\n      policies.push({ data: maturity, type: PolicyType.Maturity });\n    }\n\n    policyTypes += PolicyType.MaxFee;\n    policies.push({ data: req.maxFee, type: PolicyType.MaxFee });\n\n    if (expiration && expiration > 0) {\n      policyTypes += PolicyType.Expiration;\n      policies.push({ data: expiration, type: PolicyType.Expiration });\n    }\n\n    return {\n      policyTypes,\n      policies,\n    };\n  }\n\n  /**\n   * Method to obtain the base transaction details.\n   *\n   * @returns The base transaction details.\n   */\n\n  protected getBaseTransaction(): ToBaseTransactionResponse {\n    const inputs = this.inputs?.map(inputify) ?? [];\n    const outputs = this.outputs?.map(outputify) ?? [];\n    const witnesses = this.witnesses?.map(witnessify) ?? [];\n\n    const { policyTypes, policies } = BaseTransactionRequest.getPolicyMeta(this);\n\n    return {\n      policyTypes,\n      inputs,\n      outputs,\n      policies,\n      witnesses,\n      inputsCount: inputs.length,\n      outputsCount: outputs.length,\n      witnessesCount: witnesses.length,\n    };\n  }\n\n  abstract toTransaction():\n    | TransactionCreate\n    | TransactionScript\n    | TransactionBlob\n    | TransactionUpgrade\n    | TransactionUpload;\n\n  /**\n   * Converts the transaction request to a byte array.\n   *\n   * @returns The transaction bytes.\n   */\n  toTransactionBytes(): Uint8Array {\n    return new TransactionCoder().encode(this.toTransaction());\n  }\n\n  /**\n   * @hidden\n   *\n   * Pushes an input to the list without any side effects and returns the index\n   */\n  protected pushInput(input: TransactionRequestInput): number {\n    this.inputs.push(input);\n    return this.inputs.length - 1;\n  }\n\n  /**\n   * @hidden\n   *\n   * Pushes an output to the list without any side effects and returns the index\n   */\n  protected pushOutput(output: TransactionRequestOutput): number {\n    this.outputs.push(output);\n    return this.outputs.length - 1;\n  }\n\n  /**\n   * @hidden\n   *\n   * Pushes a witness to the list and returns the index\n   *\n   * @param signature - The signature to add to the witness.\n   * @returns The index of the created witness.\n   */\n  addWitness(signature: BytesLike) {\n    this.witnesses.push(signature);\n    return this.witnesses.length - 1;\n  }\n\n  /**\n   * @hidden\n   *\n   * Creates an empty witness without any side effects and returns the index\n   *\n   * @returns The index of the created witness.\n   */\n  addEmptyWitness(): number {\n    // Push a dummy witness with same byte size as a real witness signature\n    return this.addWitness(concat([ZeroBytes32, ZeroBytes32]));\n  }\n\n  /**\n   * Updates the witness for a given owner and signature.\n   *\n   * @param address - The address to get the coin input witness index for.\n   * @param signature - The signature to update the witness with.\n   */\n  updateWitnessByOwner(address: AddressInput, signature: BytesLike) {\n    const ownerAddress = new Address(address);\n    const witnessIndex = this.getCoinInputWitnessIndexByOwner(ownerAddress);\n    if (typeof witnessIndex === 'number') {\n      this.updateWitness(witnessIndex, signature);\n    }\n  }\n\n  /**\n   * Updates an existing witness without any side effects.\n   *\n   * @param index - The index of the witness to update.\n   * @param witness - The new witness.\n   * @throws If the witness does not exist.\n   */\n  updateWitness(index: number, witness: TransactionRequestWitness) {\n    if (!this.witnesses[index]) {\n      throw new NoWitnessAtIndexError(index);\n    }\n    this.witnesses[index] = witness;\n  }\n\n  /**\n   * Helper function to add an external signature to the transaction.\n   *\n   * @param account - The account/s to sign to the transaction.\n   * @returns The transaction with the signature witness added.\n   */\n  async addAccountWitnesses(account: Account | Account[]) {\n    const accounts = Array.isArray(account) ? account : [account];\n    await Promise.all(\n      accounts.map(async (acc) => {\n        this.addWitness(await acc.signTransaction(<TransactionRequestLike>this));\n      })\n    );\n\n    return this;\n  }\n\n  /**\n   * Gets the coin inputs for a transaction.\n   *\n   * @returns The coin inputs.\n   */\n  getCoinInputs(): CoinTransactionRequestInput[] {\n    return this.inputs.filter(\n      (input): input is CoinTransactionRequestInput => input.type === InputType.Coin\n    );\n  }\n\n  /**\n   * Gets the coin outputs for a transaction.\n   *\n   * @returns The coin outputs.\n   */\n  getCoinOutputs(): CoinTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is CoinTransactionRequestOutput => output.type === OutputType.Coin\n    );\n  }\n\n  /**\n   * Gets the change outputs for a transaction.\n   *\n   * @returns The change outputs.\n   */\n  getChangeOutputs(): ChangeTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is ChangeTransactionRequestOutput => output.type === OutputType.Change\n    );\n  }\n\n  /**\n   * @hidden\n   *\n   * Returns the witnessIndex of the found CoinInput.\n   */\n  getCoinInputWitnessIndexByOwner(owner: AddressLike): number | undefined {\n    const ownerAddress = addressify(owner);\n\n    const found = this.inputs.find((input) => {\n      switch (input.type) {\n        case InputType.Coin:\n          return hexlify((<CoinTransactionRequestInput>input).owner) === ownerAddress.toB256();\n        case InputType.Message:\n          return (\n            hexlify((<MessageTransactionRequestInput>input).recipient) === ownerAddress.toB256()\n          );\n        default:\n          return false;\n      }\n    });\n\n    return (<CoinTransactionRequestInput>found)?.witnessIndex;\n  }\n\n  /**\n   * Adds a single coin input to the transaction and a change output for the related\n   * assetId, if one it was not added yet.\n   *\n   * @param coin - Coin resource.\n   */\n  addCoinInput(coin: Coin) {\n    const { assetId, owner, amount, id, predicate, predicateData } = coin;\n\n    let witnessIndex;\n\n    if (coin.predicate) {\n      witnessIndex = 0;\n    } else {\n      witnessIndex = this.getCoinInputWitnessIndexByOwner(owner);\n\n      // Insert a dummy witness if no witness exists\n      if (typeof witnessIndex !== 'number') {\n        witnessIndex = this.addEmptyWitness();\n      }\n    }\n\n    const input: CoinTransactionRequestInput = {\n      id,\n      type: InputType.Coin,\n      owner: owner.toB256(),\n      amount,\n      assetId,\n      txPointer: '0x00000000000000000000000000000000',\n      witnessIndex,\n      predicate,\n      predicateData,\n    };\n\n    // Insert the Input\n    this.pushInput(input);\n\n    // Insert a ChangeOutput if it does not exist\n    this.addChangeOutput(owner, assetId);\n  }\n\n  /**\n   * Adds a single message input to the transaction and a change output for the\n   * asset against the message\n   *\n   * @param message - Message resource.\n   */\n  addMessageInput(message: Message | MessageCoin) {\n    const { recipient, sender, amount, predicate, nonce, predicateData } = message;\n\n    let witnessIndex;\n\n    if (message.predicate) {\n      witnessIndex = 0;\n    } else {\n      witnessIndex = this.getCoinInputWitnessIndexByOwner(recipient);\n\n      // Insert a dummy witness if no witness exists\n      if (typeof witnessIndex !== 'number') {\n        witnessIndex = this.addEmptyWitness();\n      }\n    }\n\n    const input: MessageTransactionRequestInput = {\n      nonce,\n      type: InputType.Message,\n      sender: sender.toB256(),\n      recipient: recipient.toB256(),\n      data: isMessageCoin(message) ? '0x' : message.data,\n      amount,\n      witnessIndex,\n      predicate,\n      predicateData,\n    };\n\n    // Insert the Input\n    this.pushInput(input);\n\n    // Insert a ChangeOutput if it does not exist\n    if (isMessageCoin(message)) {\n      this.addChangeOutput(recipient, message.assetId);\n    }\n  }\n\n  /**\n   * Adds a single resource to the transaction by adding a coin/message input and a\n   * change output for the related assetId, if one it was not added yet.\n   *\n   * @param resource - The resource to add.\n   * @returns This transaction.\n   */\n  addResource(resource: Resource) {\n    if (isCoin(resource)) {\n      this.addCoinInput(resource);\n    } else {\n      this.addMessageInput(resource);\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds multiple resources to the transaction by adding coin/message inputs and change\n   * outputs from the related assetIds.\n   *\n   * @param resources - The resources to add.\n   * @returns This transaction.\n   */\n  addResources(resources: ReadonlyArray<Resource>) {\n    resources.forEach((resource) => this.addResource(resource));\n\n    return this;\n  }\n\n  /**\n   * Adds a coin output to the transaction.\n   *\n   * @param to - Address of the owner.\n   * @param amount - Amount of coin.\n   * @param assetId - Asset ID of coin.\n   */\n  addCoinOutput(to: AddressLike, amount: BigNumberish, assetId: BytesLike) {\n    this.pushOutput({\n      type: OutputType.Coin,\n      to: addressify(to).toB256(),\n      amount,\n      assetId,\n    });\n\n    return this;\n  }\n\n  /**\n   * Adds multiple coin outputs to the transaction.\n   *\n   * @param to - Address of the destination.\n   * @param quantities - Quantities of coins.\n   */\n  addCoinOutputs(to: AddressLike, quantities: CoinQuantityLike[]) {\n    quantities.map(coinQuantityfy).forEach((quantity) => {\n      this.pushOutput({\n        type: OutputType.Coin,\n        to: addressify(to).toB256(),\n        amount: quantity.amount,\n        assetId: quantity.assetId,\n      });\n    });\n\n    return this;\n  }\n\n  /**\n   * Adds a change output to the transaction.\n   *\n   * @param to - Address of the owner.\n   * @param assetId - Asset ID of coin.\n   */\n  addChangeOutput(to: AddressLike, assetId: BytesLike) {\n    // Find the ChangeOutput for the AssetId of the Resource\n    const changeOutput = this.getChangeOutputs().find(\n      (output) => hexlify(output.assetId) === assetId\n    );\n\n    // Insert a ChangeOutput if it does not exist\n    if (!changeOutput) {\n      this.pushOutput({\n        type: OutputType.Change,\n        to: addressify(to).toB256(),\n        assetId,\n      });\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  byteSize() {\n    return this.toTransactionBytes().length;\n  }\n\n  /**\n   * @hidden\n   */\n  metadataGas(_gasCosts: GasCosts): BN {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Not implemented');\n  }\n\n  /**\n   * @hidden\n   */\n  calculateMinGas(chainInfo: ChainInfo): BN {\n    const { consensusParameters } = chainInfo;\n    const {\n      gasCosts,\n      feeParameters: { gasPerByte },\n    } = consensusParameters;\n    return getMinGas({\n      gasPerByte,\n      gasCosts,\n      inputs: this.inputs,\n      txBytesSize: this.byteSize(),\n      metadataGas: this.metadataGas(gasCosts),\n    });\n  }\n\n  calculateMaxGas(chainInfo: ChainInfo, minGas: BN): BN {\n    const { consensusParameters } = chainInfo;\n    const {\n      feeParameters: { gasPerByte },\n      txParameters: { maxGasPerTx },\n    } = consensusParameters;\n\n    const witnessesLength = this.toTransaction().witnesses.reduce(\n      (acc, wit) => acc + wit.dataLength,\n      0\n    );\n    return getMaxGas({\n      gasPerByte,\n      minGas,\n      witnessesLength,\n      witnessLimit: this.witnessLimit,\n      maxGasPerTx,\n    });\n  }\n\n  /**\n   * Funds the transaction with fake UTXOs for each assetId and amount in the\n   * quantities array.\n   *\n   * @param quantities - CoinQuantity Array.\n   * @param baseAssetId - The base asset to fund the transaction.\n   * @deprecated - This method is deprecated and will be removed in future versions.\n   * Please use `Account.generateFakeResources` along with `this.addResources` instead.\n   */\n  fundWithFakeUtxos(quantities: CoinQuantity[], baseAssetId: string, resourcesOwner?: Address) {\n    const findAssetInput = (assetId: string) =>\n      this.inputs.find((input) => {\n        if ('assetId' in input) {\n          return input.assetId === assetId;\n        }\n        return false;\n      });\n\n    const updateAssetInput = (assetId: string, quantity: BN) => {\n      const assetInput = findAssetInput(assetId);\n\n      let usedQuantity = quantity;\n\n      if (assetId === baseAssetId) {\n        usedQuantity = bn('1000000000000000000');\n      }\n\n      if (assetInput && 'assetId' in assetInput) {\n        assetInput.id = hexlify(randomBytes(UTXO_ID_LEN));\n        assetInput.amount = usedQuantity;\n      } else {\n        this.addResources([\n          {\n            id: hexlify(randomBytes(UTXO_ID_LEN)),\n            amount: usedQuantity,\n            assetId,\n            owner: resourcesOwner || Address.fromRandom(),\n            blockCreated: bn(1),\n            txCreatedIdx: bn(1),\n          },\n        ]);\n      }\n    };\n\n    updateAssetInput(baseAssetId, bn(100_000_000_000));\n    quantities.forEach((q) => updateAssetInput(q.assetId, q.amount));\n\n    return this;\n  }\n\n  /**\n   * Retrieves an array of CoinQuantity for each coin output present in the transaction.\n   * a transaction.\n   *\n   * @returns  CoinQuantity array.\n   */\n  getCoinOutputsQuantities(): CoinQuantity[] {\n    const coinsQuantities = this.getCoinOutputs().map(({ amount, assetId }) => ({\n      amount: bn(amount),\n      assetId: assetId.toString(),\n    }));\n\n    return coinsQuantities;\n  }\n\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  abstract getTransactionId(chainId: number): string;\n\n  /**\n   * Return the minimum amount in native coins required to create\n   * a transaction.\n   *\n   * @returns The transaction as a JSON object.\n   */\n  toJSON() {\n    return normalizeJSON(this);\n  }\n\n  removeWitness(index: number) {\n    this.witnesses.splice(index, 1);\n    this.adjustWitnessIndexes(index);\n  }\n\n  private adjustWitnessIndexes(removedIndex: number) {\n    this.inputs.filter(isRequestInputResource).forEach((input) => {\n      if (input.witnessIndex > removedIndex) {\n        // eslint-disable-next-line no-param-reassign\n        input.witnessIndex -= 1;\n      }\n    });\n  }\n\n  updatePredicateGasUsed(inputs: TransactionRequestInput[]) {\n    const inputsToExtractGasUsed = inputs.filter(isRequestInputCoinOrMessage);\n\n    this.inputs.filter(isRequestInputResource).forEach((i) => {\n      const owner = getRequestInputResourceOwner(i);\n      const correspondingInput = inputsToExtractGasUsed.find((x) =>\n        isRequestInputResourceFromOwner(x, new Address(String(owner)))\n      );\n\n      if (\n        correspondingInput &&\n        'predicateGasUsed' in correspondingInput &&\n        bn(correspondingInput.predicateGasUsed).gt(0)\n      ) {\n        // eslint-disable-next-line no-param-reassign\n        i.predicateGasUsed = correspondingInput.predicateGasUsed;\n      }\n    });\n  }\n\n  byteLength(): number {\n    return this.toTransactionBytes().byteLength;\n  }\n\n  /**\n   * @hidden\n   *\n   * Used internally to update the state of a transaction request.\n   *\n   * @param state - The state to update.\n   */\n  public updateState(\n    chainId: number,\n    state?: TransactionStateFlag['state'],\n    summary?: TransactionSummaryJsonPartial\n  ) {\n    if (!state) {\n      this.flag = { state: undefined, transactionId: undefined, summary: undefined };\n      return;\n    }\n\n    const transactionId = this.getTransactionId(chainId);\n    this.flag = { state, transactionId, summary };\n  }\n}\n", "import type { Address } from '@fuel-ts/address';\nimport type { BN } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\n\nimport type { GqlMessageState } from './__generated__/operations';\n\n/**\n * A Fuel message\n */\nexport type Message = {\n  messageId: BytesLike;\n  sender: Address;\n  recipient: Address;\n  nonce: BytesLike;\n  amount: BN;\n  data: BytesLike;\n  daHeight: BN;\n  predicate?: BytesLike;\n  predicateData?: BytesLike;\n};\n\nexport type MessageCoin = {\n  assetId: string;\n  sender: Address;\n  recipient: Address;\n  nonce: BytesLike;\n  amount: BN;\n  daHeight: BN;\n  predicate?: BytesLike;\n  predicateData?: BytesLike;\n};\n\nexport type MerkleProof = {\n  proofSet: Array<string>;\n  proofIndex: BN;\n};\n\nexport type BlockHeader = {\n  id: string;\n  daHeight: BN;\n  transactionsCount: number;\n  transactionsRoot: string;\n  height: BN;\n  prevRoot: string;\n  time: string;\n  applicationHash: string;\n  messageOutboxRoot: string;\n  eventInboxRoot: string;\n  consensusParametersVersion: number;\n  stateTransitionBytecodeVersion: number;\n  messageReceiptCount: number;\n};\n\n/**\n * Message Proof\n */\nexport type MessageProof = {\n  messageProof: MerkleProof;\n  blockProof: MerkleProof;\n  messageBlockHeader: BlockHeader;\n  commitBlockHeader: BlockHeader;\n  sender: Address;\n  recipient: Address;\n  nonce: string;\n  amount: BN;\n  data: string;\n};\n\n/**\n * Message Status\n */\nexport type MessageStatus = {\n  state: GqlMessageState;\n};\n\nexport const isMessageCoin = (message: Message | MessageCoin): message is MessageCoin =>\n  !('data' in message);\n", "import type { BytesLike } from '@fuel-ts/utils';\n\nimport type { Coin } from './coin';\nimport type { MessageCoin } from './message';\n\nexport type RawCoin = {\n  utxoId: string;\n  owner: string;\n  amount: string;\n  assetId: string;\n  blockCreated: string;\n  txCreatedIdx: string;\n};\n\nexport type RawMessage = {\n  amount: string;\n  sender: string;\n  assetId: string;\n  recipient: string;\n  data: string;\n  nonce: string;\n  daHeight: string;\n};\n\nexport type RawResource = RawCoin | RawMessage;\nexport type Resource = Coin | MessageCoin;\n\n/** @hidden */\nexport type ExcludeResourcesOption = {\n  utxos?: BytesLike[];\n  messages?: BytesLike[];\n};\n\n/** @hidden */\nexport const isRawCoin = (resource: RawResource): resource is RawCoin => 'utxoId' in resource;\n/** @hidden */\nexport const isRawMessage = (resource: RawResource): resource is RawMessage =>\n  'recipient' in resource;\n/** @hidden */\nexport const isCoin = (resource: Resource): resource is Coin => 'id' in resource;\n/** @hidden */\nexport const isMessage = (resource: Resource): resource is MessageCoin => 'recipient' in resource;\n", "import type { ReceiptPanic, ReceiptRevert } from '@fuel-ts/transactions';\nimport { ReceiptType } from '@fuel-ts/transactions';\nimport { FAILED_TRANSFER_TO_ADDRESS_SIGNAL } from '@fuel-ts/transactions/configs';\n\nimport type { TransactionReceiptJson } from '../provider';\nimport type { TransactionResultReceipt } from '../transaction-response';\n\nimport { deserializeReceipt } from './serialization';\n\n/** @hidden */\nconst doesReceiptHaveMissingOutputVariables = (\n  receipt: TransactionResultReceipt\n): receipt is ReceiptRevert =>\n  receipt.type === ReceiptType.Revert &&\n  receipt.val.toString('hex') === FAILED_TRANSFER_TO_ADDRESS_SIGNAL;\n\n/** @hidden */\nconst doesReceiptHaveMissingContractId = (\n  receipt: TransactionResultReceipt\n): receipt is ReceiptPanic =>\n  receipt.type === ReceiptType.Panic &&\n  receipt.contractId !== '0x0000000000000000000000000000000000000000000000000000000000000000';\n\n/** @hidden */\nexport const getReceiptsWithMissingData = (receipts: Array<TransactionResultReceipt>) =>\n  receipts.reduce<{\n    missingOutputVariables: Array<ReceiptRevert>;\n    missingOutputContractIds: Array<ReceiptPanic>;\n  }>(\n    (memo, receipt) => {\n      if (doesReceiptHaveMissingOutputVariables(receipt)) {\n        memo.missingOutputVariables.push(receipt);\n      }\n      if (doesReceiptHaveMissingContractId(receipt)) {\n        memo.missingOutputContractIds.push(receipt);\n      }\n      return memo;\n    },\n    {\n      missingOutputVariables: [],\n      missingOutputContractIds: [],\n    }\n  );\n\n/** @deprecated Use `deserializeReceipt` instead. */\nexport const assembleReceiptByType = (\n  gqlReceipt: TransactionReceiptJson\n): TransactionResultReceipt => deserializeReceipt(gqlReceipt);\n", "import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport type {\n  ReceiptBurn,\n  ReceiptCall,\n  ReceiptLog,\n  ReceiptLogData,\n  ReceiptMessageOut,\n  ReceiptMint,\n  ReceiptPanic,\n  ReceiptReturn,\n  ReceiptReturnData,\n  ReceiptRevert,\n  ReceiptScriptResult,\n  ReceiptTransfer,\n  ReceiptTransferOut,\n} from '@fuel-ts/transactions';\nimport { getMintedAssetId, InputMessageCoder, ReceiptType } from '@fuel-ts/transactions';\nimport { hexlify, arrayify } from '@fuel-ts/utils';\n\nimport { GqlReceiptType } from '../__generated__/operations';\nimport type {\n  ChainInfo,\n  NodeInfo,\n  ChainInfoJson,\n  NodeInfoJson,\n  TransactionReceiptJson,\n} from '../provider';\nimport type Provider from '../provider';\nimport type { TransactionResultReceipt } from '../transaction-response';\n\nexport interface ProviderCache {\n  consensusParametersTimestamp?: number;\n  chain: ChainInfo;\n  nodeInfo: NodeInfo;\n}\n\nexport interface ProviderCacheJson {\n  consensusParametersTimestamp?: number;\n  chain: ChainInfoJson;\n  nodeInfo: NodeInfoJson;\n}\n\nexport interface TransactionSummaryJson {\n  id: string;\n  transactionBytes: string;\n  receipts: TransactionReceiptJson[];\n  gasPrice: string;\n}\n\nexport type TransactionSummaryJsonPartial = Omit<TransactionSummaryJson, 'id' | 'transactionBytes'>;\n\n/** @hidden */\nexport const deserializeChain = (chain: ChainInfoJson): ChainInfo => {\n  const { name, daHeight, consensusParameters } = chain;\n\n  const {\n    contractParams,\n    feeParams,\n    predicateParams,\n    scriptParams,\n    txParams,\n    gasCosts,\n    baseAssetId,\n    chainId,\n    version,\n  } = consensusParameters;\n\n  return {\n    name,\n    baseChainHeight: bn(daHeight),\n    consensusParameters: {\n      version,\n      chainId: bn(chainId),\n      baseAssetId,\n      feeParameters: {\n        version: feeParams.version,\n        gasPerByte: bn(feeParams.gasPerByte),\n        gasPriceFactor: bn(feeParams.gasPriceFactor),\n      },\n      contractParameters: {\n        version: contractParams.version,\n        contractMaxSize: bn(contractParams.contractMaxSize),\n        maxStorageSlots: bn(contractParams.maxStorageSlots),\n      },\n      txParameters: {\n        version: txParams.version,\n        maxInputs: bn(txParams.maxInputs),\n        maxOutputs: bn(txParams.maxOutputs),\n        maxWitnesses: bn(txParams.maxWitnesses),\n        maxGasPerTx: bn(txParams.maxGasPerTx),\n        maxSize: bn(txParams.maxSize),\n        maxBytecodeSubsections: bn(txParams.maxBytecodeSubsections),\n      },\n      predicateParameters: {\n        version: predicateParams.version,\n        maxPredicateLength: bn(predicateParams.maxPredicateLength),\n        maxPredicateDataLength: bn(predicateParams.maxPredicateDataLength),\n        maxGasPerPredicate: bn(predicateParams.maxGasPerPredicate),\n        maxMessageDataLength: bn(predicateParams.maxMessageDataLength),\n      },\n      scriptParameters: {\n        version: scriptParams.version,\n        maxScriptLength: bn(scriptParams.maxScriptLength),\n        maxScriptDataLength: bn(scriptParams.maxScriptDataLength),\n      },\n      gasCosts,\n    },\n  };\n};\n\n/** @hidden */\nexport const serializeChain = (chain: ChainInfo): ChainInfoJson => {\n  const { name, baseChainHeight, consensusParameters } = chain;\n\n  const {\n    contractParameters,\n    feeParameters,\n    predicateParameters,\n    scriptParameters,\n    txParameters,\n    gasCosts,\n    baseAssetId,\n    chainId,\n    version,\n  } = consensusParameters;\n\n  return {\n    name,\n    daHeight: baseChainHeight.toString(),\n    consensusParameters: {\n      version,\n      chainId: chainId.toString(),\n      baseAssetId,\n      feeParams: {\n        version: feeParameters.version,\n        gasPerByte: feeParameters.gasPerByte.toString(),\n        gasPriceFactor: feeParameters.gasPriceFactor.toString(),\n      },\n      contractParams: {\n        version: contractParameters.version,\n        contractMaxSize: contractParameters.contractMaxSize.toString(),\n        maxStorageSlots: contractParameters.maxStorageSlots.toString(),\n      },\n      txParams: {\n        version: txParameters.version,\n        maxInputs: txParameters.maxInputs.toString(),\n        maxOutputs: txParameters.maxOutputs.toString(),\n        maxWitnesses: txParameters.maxWitnesses.toString(),\n        maxGasPerTx: txParameters.maxGasPerTx.toString(),\n        maxSize: txParameters.maxSize.toString(),\n        maxBytecodeSubsections: txParameters.maxBytecodeSubsections.toString(),\n      },\n      predicateParams: {\n        version: predicateParameters.version,\n        maxPredicateLength: predicateParameters.maxPredicateLength.toString(),\n        maxPredicateDataLength: predicateParameters.maxPredicateDataLength.toString(),\n        maxGasPerPredicate: predicateParameters.maxGasPerPredicate.toString(),\n        maxMessageDataLength: predicateParameters.maxMessageDataLength.toString(),\n      },\n      scriptParams: {\n        version: scriptParameters.version,\n        maxScriptLength: scriptParameters.maxScriptLength.toString(),\n        maxScriptDataLength: scriptParameters.maxScriptDataLength.toString(),\n      },\n      gasCosts,\n    },\n  };\n};\n\n/** @hidden */\nexport const deserializeNodeInfo = (nodeInfo: NodeInfoJson): NodeInfo => {\n  const { maxDepth, maxTx, nodeVersion, utxoValidation, vmBacktrace, indexation } = nodeInfo;\n\n  return {\n    maxDepth: bn(maxDepth),\n    maxTx: bn(maxTx),\n    nodeVersion,\n    utxoValidation,\n    vmBacktrace,\n    indexation,\n  };\n};\n\n/** @hidden */\nexport const serializeNodeInfo = (nodeInfo: NodeInfo): NodeInfoJson => {\n  const { maxDepth, maxTx, nodeVersion, utxoValidation, vmBacktrace, indexation } = nodeInfo;\n\n  return {\n    maxDepth: maxDepth.toString(),\n    maxTx: maxTx.toString(),\n    nodeVersion,\n    utxoValidation,\n    vmBacktrace,\n    indexation,\n  };\n};\n\n/** @hidden */\nexport const deserializeProviderCache = (cache: ProviderCacheJson): ProviderCache => ({\n  consensusParametersTimestamp: cache.consensusParametersTimestamp,\n  chain: deserializeChain(cache.chain),\n  nodeInfo: deserializeNodeInfo(cache.nodeInfo),\n});\n\n/** @hidden */\nexport const serializeProviderCache = async (provider: Provider): Promise<ProviderCacheJson> => ({\n  consensusParametersTimestamp: provider.consensusParametersTimestamp,\n  chain: serializeChain(await provider.getChain()),\n  nodeInfo: serializeNodeInfo(await provider.getNode()),\n});\n\nconst hexOrZero = (hex?: string | null) => hex || ZeroBytes32;\n\n/** @hidden */\nexport const deserializeReceipt = (receipt: TransactionReceiptJson): TransactionResultReceipt => {\n  const { receiptType } = receipt;\n\n  switch (receiptType) {\n    case GqlReceiptType.Call: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const callReceipt: ReceiptCall = {\n        type: ReceiptType.Call,\n        id,\n        to: hexOrZero(receipt?.to),\n        amount: bn(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        gas: bn(receipt.gas),\n        param1: bn(receipt.param1),\n        param2: bn(receipt.param2),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return callReceipt;\n    }\n\n    case GqlReceiptType.Return: {\n      const returnReceipt: ReceiptReturn = {\n        type: ReceiptType.Return,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        val: bn(receipt.val),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return returnReceipt;\n    }\n\n    case GqlReceiptType.ReturnData: {\n      const returnDataReceipt: ReceiptReturnData = {\n        type: ReceiptType.ReturnData,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ptr: bn(receipt.ptr),\n        len: bn(receipt.len),\n        digest: hexOrZero(receipt.digest),\n        pc: bn(receipt.pc),\n        data: hexOrZero(receipt.data),\n        is: bn(receipt.is),\n      };\n\n      return returnDataReceipt;\n    }\n\n    case GqlReceiptType.Panic: {\n      const panicReceipt: ReceiptPanic = {\n        type: ReceiptType.Panic,\n        id: hexOrZero(receipt.id),\n        reason: bn(receipt.reason),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n        contractId: hexOrZero(receipt.contractId),\n      };\n\n      return panicReceipt;\n    }\n\n    case GqlReceiptType.Revert: {\n      const revertReceipt: ReceiptRevert = {\n        type: ReceiptType.Revert,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        val: bn(receipt.ra),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n      return revertReceipt;\n    }\n\n    case GqlReceiptType.Log: {\n      const ra = bn(receipt.ra);\n      const rb = bn(receipt.rb);\n      const rc = bn(receipt.rc);\n      const rd = bn(receipt.rd);\n\n      const logReceipt: ReceiptLog = {\n        type: ReceiptType.Log,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ra,\n        rb,\n        rc,\n        rd,\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return logReceipt;\n    }\n\n    case GqlReceiptType.LogData: {\n      const ra = bn(receipt.ra);\n      const rb = bn(receipt.rb);\n      const logDataReceipt: ReceiptLogData = {\n        type: ReceiptType.LogData,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ra,\n        rb,\n        ptr: bn(receipt.ptr),\n        len: bn(receipt.len),\n        digest: hexOrZero(receipt.digest),\n        pc: bn(receipt.pc),\n        data: hexOrZero(receipt.data),\n        is: bn(receipt.is),\n      };\n      return logDataReceipt;\n    }\n\n    case GqlReceiptType.Transfer: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const transferReceipt: ReceiptTransfer = {\n        type: ReceiptType.Transfer,\n        id,\n        to: hexOrZero(receipt.toAddress || receipt?.to),\n        amount: bn(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return transferReceipt;\n    }\n\n    case GqlReceiptType.TransferOut: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const transferOutReceipt: ReceiptTransferOut = {\n        type: ReceiptType.TransferOut,\n        id,\n        to: hexOrZero(receipt.toAddress || receipt.to),\n        amount: bn(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n      return transferOutReceipt;\n    }\n\n    case GqlReceiptType.ScriptResult: {\n      const scriptResultReceipt: ReceiptScriptResult = {\n        type: ReceiptType.ScriptResult,\n        result: bn(receipt.result),\n        gasUsed: bn(receipt.gasUsed),\n      };\n\n      return scriptResultReceipt;\n    }\n\n    case GqlReceiptType.MessageOut: {\n      const sender = hexOrZero(receipt.sender);\n      const recipient = hexOrZero(receipt.recipient);\n      const nonce = hexOrZero(receipt.nonce);\n      const amount = bn(receipt.amount);\n      const data = receipt.data ? arrayify(receipt.data) : Uint8Array.from([]);\n      const digest = hexOrZero(receipt.digest);\n      const len = bn(receipt.len).toNumber();\n\n      const messageId = InputMessageCoder.getMessageId({\n        sender,\n        recipient,\n        nonce,\n        amount,\n        data: hexlify(data),\n      });\n\n      const receiptMessageOut: ReceiptMessageOut = {\n        type: ReceiptType.MessageOut,\n        sender,\n        recipient,\n        amount,\n        nonce,\n        len,\n        data,\n        digest,\n        messageId,\n      };\n\n      return receiptMessageOut;\n    }\n\n    case GqlReceiptType.Mint: {\n      const contractId = hexOrZero(receipt.id || receipt.contractId);\n      const subId = hexOrZero(receipt.subId);\n      const assetId = getMintedAssetId(contractId, subId);\n\n      const mintReceipt: ReceiptMint = {\n        type: ReceiptType.Mint,\n        subId,\n        contractId,\n        assetId,\n        val: bn(receipt.val),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return mintReceipt;\n    }\n\n    case GqlReceiptType.Burn: {\n      const contractId = hexOrZero(receipt.id || receipt.contractId);\n      const subId = hexOrZero(receipt.subId);\n      const assetId = getMintedAssetId(contractId, subId);\n\n      const burnReceipt: ReceiptBurn = {\n        type: ReceiptType.Burn,\n        subId,\n        contractId,\n        assetId,\n        val: bn(receipt.val),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return burnReceipt;\n    }\n\n    default:\n      throw new FuelError(ErrorCode.INVALID_RECEIPT_TYPE, `Invalid receipt type: ${receiptType}.`);\n  }\n};\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nconst DEFAULT_BLOCK_EXPLORER_URL = 'https://app.fuel.network';\n\n/** @hidden */\nconst getPathFromInput = (\n  key: BuildBlockExplorerUrlHelperParam,\n  value: string | number | undefined\n) => {\n  const pathMap = {\n    address: `address`,\n    txId: `transaction`,\n    blockNumber: `block`,\n  };\n  const path = pathMap[key] || key;\n  return `${path}/${value}`;\n};\n\ntype BuildBlockExplorerUrlHelperParam = 'address' | 'txId' | 'blockNumber';\n\n/**\n * @hidden\n *\n * Builds a block explorer url based on and the given path, block explorer URL and provider URL\n */\nexport const buildBlockExplorerUrl = (\n  options: {\n    blockExplorerUrl?: string;\n    path?: string;\n    providerUrl?: string;\n    address?: string;\n    txId?: string;\n    blockNumber?: number;\n  } = {}\n) => {\n  const { blockExplorerUrl, path, providerUrl, address, txId, blockNumber } = options;\n  const explorerUrl = blockExplorerUrl || DEFAULT_BLOCK_EXPLORER_URL;\n\n  // make sure that only ONE or none of the following is defined: address, txId, blockNumber\n  const customInputParams = [\n    {\n      key: 'address',\n      value: address,\n    },\n    {\n      key: 'txId',\n      value: txId,\n    },\n    {\n      key: 'blockNumber',\n      value: blockNumber,\n    },\n  ];\n\n  const definedValues = customInputParams\n    .filter((param) => !!param.value)\n    .map(({ key, value }) => ({\n      key,\n      value,\n    }));\n\n  const hasAnyDefinedValues = definedValues.length > 0;\n\n  if (definedValues.length > 1) {\n    throw new FuelError(\n      ErrorCode.ERROR_BUILDING_BLOCK_EXPLORER_URL,\n      `Only one of the following can be passed in to buildBlockExplorerUrl: ${customInputParams\n        .map((param) => param.key)\n        .join(', ')}.`\n    );\n  }\n\n  if (path && definedValues.length > 0) {\n    const inputKeys = customInputParams.map(({ key }) => key).join(', ');\n    throw new FuelError(\n      ErrorCode.ERROR_BUILDING_BLOCK_EXPLORER_URL,\n      `You cannot pass in a path to 'buildBlockExplorerUrl' along with any of the following: ${inputKeys}.`\n    );\n  }\n\n  const pathGeneratedFromInputParams = hasAnyDefinedValues\n    ? getPathFromInput(\n        definedValues[0].key as BuildBlockExplorerUrlHelperParam,\n        definedValues[0].value\n      )\n    : '';\n\n  // Remove leading and trailing slashes from the path and block explorer url respectively, if present\n  const trimSlashes = /^\\/|\\/$/gm;\n  const cleanPath = path ? path.replace(trimSlashes, '') : pathGeneratedFromInputParams;\n  const cleanBlockExplorerUrl = explorerUrl.replace(trimSlashes, '');\n  const cleanProviderUrl = providerUrl?.replace(trimSlashes, '');\n  const encodedProviderUrl = cleanProviderUrl ? encodeURIComponent(cleanProviderUrl) : undefined;\n\n  // if the block explorer url doesn't have a protocol i.e. http:// or https://, add https://\n  const protocol = cleanBlockExplorerUrl.match(/^https?:\\/\\//) ? '' : 'https://';\n  const providerUrlProtocol = cleanProviderUrl?.match(/^https?:\\/\\//) ? '' : 'https://';\n\n  const url = `${protocol}${cleanBlockExplorerUrl}/${cleanPath}${\n    encodedProviderUrl ? `?providerUrl=${providerUrlProtocol}${encodedProviderUrl}` : ''\n  }`;\n\n  return url;\n};\n", "import { bn } from '@fuel-ts/math';\nimport type { BN, BNInput } from '@fuel-ts/math';\nimport { ReceiptType, type Input } from '@fuel-ts/transactions';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport type {\n  GqlDependentCost,\n  GqlHeavyOperation,\n  GqlLightOperation,\n} from '../__generated__/operations';\nimport type { GasCosts } from '../provider';\nimport type { TransactionRequestInput } from '../transaction-request';\nimport type {\n  TransactionResultReceipt,\n  TransactionResultScriptResultReceipt,\n} from '../transaction-response';\n\n/** @hidden */\nexport const getGasUsedFromReceipts = (receipts: Array<TransactionResultReceipt>): BN => {\n  const scriptResult = receipts.filter(\n    (receipt) => receipt.type === ReceiptType.ScriptResult\n  ) as TransactionResultScriptResultReceipt[];\n\n  const gasUsed = scriptResult.reduce((prev, receipt) => prev.add(receipt.gasUsed), bn(0));\n\n  return gasUsed;\n};\n\nexport function resolveGasDependentCosts(byteSize: BNInput, gasDependentCost: GqlDependentCost) {\n  const base = bn(gasDependentCost.base);\n  let dependentValue = bn(0);\n  if ('unitsPerGas' in gasDependentCost) {\n    dependentValue = bn(byteSize).div(bn((<GqlLightOperation>gasDependentCost).unitsPerGas));\n  } else {\n    dependentValue = bn(byteSize).mul(bn((<GqlHeavyOperation>gasDependentCost).gasPerUnit));\n  }\n  return base.add(dependentValue);\n}\n\nexport function gasUsedByInputs(\n  inputs: Array<TransactionRequestInput | Input>,\n  txBytesSize: number,\n  gasCosts: GasCosts\n) {\n  const witnessCache: Array<number> = [];\n\n  const chargeableInputs = inputs.filter((input) => {\n    const isCoinOrMessage = 'owner' in input || 'sender' in input;\n    if (isCoinOrMessage) {\n      if ('predicate' in input && input.predicate && input.predicate !== '0x') {\n        return true;\n      }\n\n      if (!witnessCache.includes(input.witnessIndex)) {\n        // should charge only once for each witness\n        witnessCache.push(input.witnessIndex);\n        return true;\n      }\n    }\n    return false;\n  });\n\n  const vmInitializationCost = resolveGasDependentCosts(txBytesSize, gasCosts.vmInitialization);\n\n  const totalGas = chargeableInputs.reduce((total, input) => {\n    if ('predicate' in input && input.predicate && input.predicate !== '0x') {\n      return total.add(\n        vmInitializationCost\n          .add(resolveGasDependentCosts(arrayify(input.predicate).length, gasCosts.contractRoot))\n          .add(bn(input.predicateGasUsed))\n      );\n    }\n\n    return total.add(gasCosts.ecr1);\n  }, bn(0));\n  // Never allow gas to exceed MAX_U64\n  return totalGas;\n}\n\nexport interface IGetMinGasParams {\n  inputs: Array<TransactionRequestInput | Input>;\n  gasCosts: GasCosts;\n  txBytesSize: number;\n  metadataGas: BN;\n  gasPerByte: BN;\n}\n\nexport function getMinGas(params: IGetMinGasParams) {\n  const { gasCosts, gasPerByte, inputs, metadataGas, txBytesSize } = params;\n\n  const vmInitGas = resolveGasDependentCosts(txBytesSize, gasCosts.vmInitialization);\n  const bytesGas = bn(txBytesSize).mul(gasPerByte);\n  const inputsGas = gasUsedByInputs(inputs, txBytesSize, gasCosts);\n\n  const minGas = vmInitGas.add(bytesGas).add(inputsGas).add(metadataGas).maxU64();\n\n  return minGas;\n}\n\nexport interface IGetMaxGasParams {\n  witnessesLength: number;\n  witnessLimit?: BN;\n  gasPerByte: BN;\n  minGas: BN;\n  gasLimit?: BN;\n  blobSize?: BN;\n  maxGasPerTx: BN;\n}\n\nexport function getMaxGas(params: IGetMaxGasParams) {\n  const {\n    gasPerByte,\n    witnessesLength,\n    witnessLimit,\n    minGas,\n    gasLimit = bn(0),\n    maxGasPerTx,\n  } = params;\n\n  let remainingAllowedWitnessGas = bn(0);\n\n  if (witnessLimit?.gt(0) && witnessLimit.gte(witnessesLength)) {\n    remainingAllowedWitnessGas = bn(witnessLimit).sub(witnessesLength).mul(gasPerByte);\n  }\n\n  const maxGas = remainingAllowedWitnessGas.add(minGas).add(gasLimit);\n\n  return maxGas.gte(maxGasPerTx) ? maxGasPerTx : maxGas;\n}\n\nexport function calculateMetadataGasForTxCreate({\n  gasCosts,\n  stateRootSize,\n  txBytesSize,\n  contractBytesSize,\n}: {\n  gasCosts: GasCosts;\n  contractBytesSize: BN;\n  stateRootSize: number;\n  txBytesSize: number;\n}) {\n  const contractRootGas = resolveGasDependentCosts(contractBytesSize, gasCosts.contractRoot);\n  const stateRootGas = resolveGasDependentCosts(stateRootSize, gasCosts.stateRoot);\n  const txIdGas = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n  // See https://github.com/FuelLabs/fuel-specs/blob/master/src/identifiers/contract-id.md\n  const contractIdInputSize = bn(4 + 32 + 32 + 32);\n  const contractIdGas = resolveGasDependentCosts(contractIdInputSize, gasCosts.s256);\n  const metadataGas = contractRootGas.add(stateRootGas).add(txIdGas).add(contractIdGas);\n  return metadataGas.maxU64();\n}\n\nexport function calculateMetadataGasForTxScript({\n  gasCosts,\n  txBytesSize,\n}: {\n  gasCosts: GasCosts;\n  txBytesSize: number;\n}) {\n  return resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n}\n\nexport function calculateMetadataGasForTxBlob({\n  gasCosts,\n  txBytesSize,\n  witnessBytesSize,\n}: {\n  gasCosts: GasCosts;\n  txBytesSize: number;\n  witnessBytesSize: number;\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n  const blobLen = resolveGasDependentCosts(witnessBytesSize, gasCosts.s256);\n  return txId.add(blobLen);\n}\n\nexport function calculateMetadataGasForTxUpgrade({\n  gasCosts,\n  txBytesSize,\n  consensusSize,\n}: {\n  gasCosts: GasCosts;\n  txBytesSize: number;\n  consensusSize?: number;\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n\n  if (consensusSize) {\n    const consensusLen = resolveGasDependentCosts(consensusSize, gasCosts.s256);\n    txId.add(consensusLen);\n  }\n\n  return txId;\n}\n\nexport function calculateMetadataGasForTxUpload({\n  gasCosts,\n  txBytesSize,\n  subsectionSize,\n  subsectionsSize,\n}: {\n  gasCosts: GasCosts;\n  txBytesSize: number;\n  subsectionSize: number;\n  subsectionsSize: number;\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n\n  const subsectionLen = resolveGasDependentCosts(subsectionSize, gasCosts.s256);\n  txId.add(subsectionLen);\n\n  const subsectionsLen = resolveGasDependentCosts(subsectionsSize, gasCosts.stateRoot);\n  txId.add(subsectionsLen);\n\n  return txId;\n}\n\nexport function calculateMinGasForTxUpload({\n  gasCosts,\n  baseMinGas,\n  subsectionSize,\n}: {\n  gasCosts: GasCosts;\n  baseMinGas: number;\n  subsectionSize: number;\n}) {\n  // Since the `Upload` transaction occupies much of the storage, we want to\n  // discourage people from using it too much. For that, we charge additional gas\n  // for the storage.\n  // https://github.com/FuelLabs/fuel-vm/blob/6e137db6387bd291b9505d17e15e0f2edda7957e/fuel-tx/src/transaction/types/upload.rs#L135-L150\n  const additionalStoragePerByte = bn(gasCosts.newStoragePerByte).mul(subsectionSize);\n  return bn(baseMinGas).add(additionalStoragePerByte);\n}\n\nexport interface CalculateGasFeeParams {\n  tip?: BN;\n  gas: BN;\n  gasPrice: BN;\n  priceFactor: BN;\n}\n\nexport const calculateGasFee = (params: CalculateGasFeeParams) => {\n  const { gas, gasPrice, priceFactor, tip } = params;\n  return gas.mul(gasPrice).div(priceFactor).add(bn(tip));\n};\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-param-reassign */\nimport { hexlify } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\n// When parsing a Transaction to JSON we need\n// to convert special types into each respective\n// JSON friendly value. This enables a tx to be\n// stringified and parsed back into a Transaction\n/** @hidden */\nfunction normalize(object: any) {\n  Object.keys(object).forEach((key) => {\n    switch (object[key]?.constructor.name) {\n      case 'Uint8Array':\n        object[key] = hexlify(object[key]);\n        break;\n      case 'Array':\n        object[key] = normalize(object[key]);\n        break;\n      case 'BN':\n        object[key] = object[key].toHex();\n        break;\n      case 'Address':\n        object[key] = object[key].toB256();\n        break;\n      case 'Object':\n        object[key] = normalize(object[key]);\n        break;\n      default:\n        break;\n    }\n  });\n  return object;\n}\n\n/**\n * Stringify Transaction to a JSON object\n * compatible with the Transaction class constructor.\n */\n/** @hidden */\nexport function normalizeJSON(root: any) {\n  // Do a single deep clone before normalizing\n  // to avoid mutating the original object\n  // and doing extra clones on each iteration\n  return normalize(clone(root));\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport type { ReceiptRevert } from '@fuel-ts/transactions';\nimport { ReceiptType } from '@fuel-ts/transactions';\nimport {\n  FAILED_REQUIRE_SIGNAL,\n  FAILED_ASSERT_EQ_SIGNAL,\n  FAILED_ASSERT_NE_SIGNAL,\n  FAILED_ASSERT_SIGNAL,\n  FAILED_TRANSFER_TO_ADDRESS_SIGNAL,\n  PANIC_REASONS,\n  PANIC_DOC_URL,\n} from '@fuel-ts/transactions/configs';\n\nimport type { DecodedLogs, TransactionResultReceipt } from '../transaction-response';\n\n/**\n * Assembles an error message for a panic status.\n * @param status - The transaction failure status.\n * @returns The error message.\n */\nexport const assemblePanicError = (\n  statusReason: string,\n  metadata: Record<string, unknown>\n): FuelError => {\n  let errorMessage = `The transaction reverted with reason: \"${statusReason}\".`;\n\n  if (PANIC_REASONS.includes(statusReason)) {\n    errorMessage = `${errorMessage}\\n\\nYou can read more about this error at:\\n\\n${PANIC_DOC_URL}#variant.${statusReason}`;\n  }\n\n  return new FuelError(ErrorCode.SCRIPT_REVERTED, errorMessage, {\n    ...metadata,\n    reason: statusReason,\n  });\n};\n\n/** @hidden */\nconst stringify = (obj: unknown) => JSON.stringify(obj, null, 2);\n\n/**\n * Assembles an error message for a revert status.\n * @param receipts - The transaction result processed receipts.\n * @param logs - The transaction decoded logs.\n * @returns The error message.\n */\nexport const assembleRevertError = (\n  receipts: Array<TransactionResultReceipt>,\n  logs: Array<unknown>,\n  metadata: Record<string, unknown>\n): FuelError => {\n  let errorMessage = 'The transaction reverted with an unknown reason.';\n\n  const revertReceipt = receipts.find(({ type }) => type === ReceiptType.Revert) as ReceiptRevert;\n  let reason = '';\n\n  if (revertReceipt) {\n    const reasonHex = bn(revertReceipt.val).toHex();\n    const lastLog = logs[logs.length - 1];\n    const lastButOneLog = logs[logs.length - 2];\n\n    switch (reasonHex) {\n      case FAILED_REQUIRE_SIGNAL: {\n        reason = 'require';\n        errorMessage = `The transaction reverted because a \"require\" statement has thrown ${\n          logs.length ? stringify(lastLog) : 'an error.'\n        }.`;\n        break;\n      }\n\n      case FAILED_ASSERT_EQ_SIGNAL: {\n        const suffix =\n          logs.length >= 2\n            ? ` comparing ${stringify(lastLog)} and ${stringify(lastButOneLog)}.`\n            : '.';\n\n        reason = 'assert_eq';\n        errorMessage = `The transaction reverted because of an \"assert_eq\" statement${suffix}`;\n        break;\n      }\n\n      case FAILED_ASSERT_NE_SIGNAL: {\n        const suffix =\n          logs.length >= 2\n            ? ` comparing ${stringify(lastButOneLog)} and ${stringify(lastLog)}.`\n            : '.';\n\n        reason = 'assert_ne';\n        errorMessage = `The transaction reverted because of an \"assert_ne\" statement${suffix}`;\n        break;\n      }\n\n      case FAILED_ASSERT_SIGNAL:\n        reason = 'assert';\n        errorMessage = `The transaction reverted because an \"assert\" statement failed to evaluate to true.`;\n        break;\n\n      case FAILED_TRANSFER_TO_ADDRESS_SIGNAL:\n        reason = 'MissingOutputVariable';\n        errorMessage = `The transaction reverted because it's missing an \"OutputVariable\".`;\n        break;\n\n      default:\n        throw new FuelError(\n          ErrorCode.UNKNOWN,\n          `The transaction reverted with an unknown reason: ${revertReceipt.val}`,\n          {\n            ...metadata,\n            reason: 'unknown',\n          }\n        );\n    }\n  }\n\n  return new FuelError(ErrorCode.SCRIPT_REVERTED, errorMessage, {\n    ...metadata,\n    reason,\n  });\n};\n\ninterface IExtractTxError<T = unknown> extends DecodedLogs<T> {\n  receipts: Array<TransactionResultReceipt>;\n  statusReason: string;\n  logs: T[];\n  groupedLogs: Record<string, T[]>;\n}\n\n/**\n * Extracts the transaction error and returns a FuelError object.\n * @param IExtractTxError - The parameters for extracting the error.\n * @returns The FuelError object.\n */\nexport const extractTxError = (params: IExtractTxError): FuelError => {\n  const { receipts, statusReason, logs, groupedLogs } = params;\n\n  const isPanic = receipts.some(({ type }) => type === ReceiptType.Panic);\n  const isRevert = receipts.some(({ type }) => type === ReceiptType.Revert);\n  const metadata = {\n    logs,\n    groupedLogs,\n    receipts,\n    panic: isPanic,\n    revert: isRevert,\n    reason: '',\n  };\n\n  if (isPanic) {\n    return assemblePanicError(statusReason, metadata);\n  }\n  return assembleRevertError(receipts, logs, metadata);\n};\n", "/* eslint-disable max-classes-per-file */\nimport type { Address } from '@fuel-ts/address';\n\n/**\n * @hidden\n */\nexport class ChangeOutputCollisionError extends Error {\n  override name = 'ChangeOutputCollisionError';\n  override message =\n    'A ChangeOutput with the same \"assetId\" already exists for a different \"to\" address';\n}\n\n/**\n * @hidden\n */\nexport class NoWitnessAtIndexError extends Error {\n  override name = 'NoWitnessAtIndexError';\n  constructor(public readonly index: number) {\n    super();\n    this.message = `Witness at index \"${index}\" was not found`;\n  }\n}\n\n/**\n * @hidden\n */\nexport class NoWitnessByOwnerError extends Error {\n  override name = 'NoWitnessByOwnerError';\n  constructor(public readonly owner: Address) {\n    super();\n    this.message = `A witness for the given owner \"${owner}\" was not found`;\n  }\n}\n", "import type { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport { InputType, OutputType } from '@fuel-ts/transactions';\nimport { hexlify } from '@fuel-ts/utils';\n\nimport { type ExcludeResourcesOption } from '../resource';\n\nimport type {\n  TransactionRequestInput,\n  CoinTransactionRequestInput,\n  MessageTransactionRequestInput,\n} from './input';\nimport type { TransactionRequest } from './types';\n\nexport const isRequestInputCoin = (\n  input: TransactionRequestInput\n): input is CoinTransactionRequestInput => input.type === InputType.Coin;\n\nexport const isRequestInputMessage = (\n  input: TransactionRequestInput\n): input is MessageTransactionRequestInput => input.type === InputType.Message;\n\nexport const isRequestInputMessageWithoutData = (\n  input: TransactionRequestInput\n): input is MessageTransactionRequestInput =>\n  input.type === InputType.Message && bn(input.data).isZero();\n\nexport const isRequestInputCoinOrMessage = (\n  input: TransactionRequestInput\n): input is CoinTransactionRequestInput | MessageTransactionRequestInput =>\n  isRequestInputCoin(input) || isRequestInputMessage(input);\n\nexport const isRequestInputResource = (\n  input: TransactionRequestInput\n): input is CoinTransactionRequestInput | MessageTransactionRequestInput =>\n  isRequestInputCoin(input) || isRequestInputMessageWithoutData(input);\n\nexport const getRequestInputResourceOwner = (\n  input: CoinTransactionRequestInput | MessageTransactionRequestInput\n) => (isRequestInputCoin(input) ? input.owner : input.recipient);\n\nexport const isRequestInputResourceFromOwner = (\n  input: CoinTransactionRequestInput | MessageTransactionRequestInput,\n  owner: Address\n) => getRequestInputResourceOwner(input) === owner.toB256();\n\n/**\n * @hidden\n *\n * Checks if the given `TransactionRequestInput` is a predicate.\n *\n * @param input - The `TransactionRequestInput` to check.\n * @returns `true` if the input is a predicate, otherwise `false`.\n */\nexport const isPredicate = (\n  input: TransactionRequestInput\n): input is Required<CoinTransactionRequestInput | MessageTransactionRequestInput> =>\n  isRequestInputCoinOrMessage(input) && !!input.predicate && hexlify(input.predicate) !== '0x';\n\nexport const getAssetAmountInRequestInputs = (\n  inputs: TransactionRequestInput[],\n  assetId: string,\n  baseAsset: string\n) =>\n  inputs.filter(isRequestInputResource).reduce((acc, input) => {\n    if (isRequestInputCoin(input) && input.assetId === assetId) {\n      return acc.add(input.amount);\n    }\n\n    if (isRequestInputMessage(input) && assetId === baseAsset) {\n      return acc.add(input.amount);\n    }\n\n    return acc;\n  }, bn(0));\n\nexport const cacheRequestInputsResources = (inputs: TransactionRequestInput[]) =>\n  inputs.filter(isRequestInputResource).reduce(\n    (cache, input) => {\n      if (isRequestInputCoin(input)) {\n        cache.utxos.push(input.id);\n      } else {\n        cache.messages.push(input.nonce);\n      }\n      return cache;\n    },\n    {\n      utxos: [],\n      messages: [],\n    } as Required<ExcludeResourcesOption>\n  );\n\nexport const cacheRequestInputsResourcesFromOwner = (\n  inputs: TransactionRequestInput[],\n  owner: Address\n): ExcludeResourcesOption =>\n  inputs.reduce(\n    (acc, input) => {\n      if (isRequestInputCoin(input) && input.owner === owner.toB256()) {\n        acc.utxos.push(input.id);\n      } else if (isRequestInputMessage(input) && input.recipient === owner.toB256()) {\n        acc.messages.push(input.nonce);\n      }\n      return acc;\n    },\n    {\n      utxos: [],\n      messages: [],\n    } as Required<ExcludeResourcesOption>\n  );\n\n/**\n * @hidden\n *\n * Get the number of burnable assets in the transaction request.\n *\n * @param baseAssetId - The base asset ID.\n * @param transactionRequest - The transaction request to get the burnable asset count from.\n * @returns The number of burnable assets in the transaction request.\n */\nexport const getBurnableAssetCount = (\n  baseAssetId: string,\n  transactionRequest: TransactionRequest\n) => {\n  const { inputs, outputs } = transactionRequest;\n  const coinInputs = new Set(inputs.filter(isRequestInputCoin).map((input) => input.assetId));\n  // If there is a message input without data, we need to add the base asset to the set\n  if (inputs.some((i) => isRequestInputMessage(i) && bn(i.amount).gt(0))) {\n    coinInputs.add(baseAssetId);\n  }\n  const changeOutputs = new Set(\n    outputs.filter((output) => output.type === OutputType.Change).map((output) => output.assetId)\n  );\n  const difference = new Set([...coinInputs].filter((x) => !changeOutputs.has(x)));\n  return difference.size;\n};\n\n/**\n * @hidden\n *\n * Validates the transaction request for asset burn.\n *\n * @param transactionRequest - The transaction request to validate.\n * @param enableAssetBurn - Whether asset burn is enabled (default: false).\n *\n * @throws `FuelError` when an asset burn is detected and not enabled.\n */\nexport const validateTransactionForAssetBurn = (\n  baseAssetId: string,\n  transactionRequest: TransactionRequest,\n  enableAssetBurn: boolean = false\n) => {\n  // Asset burn is enabled\n  if (enableAssetBurn === true) {\n    return;\n  }\n\n  // No burnable assets detected\n  if (getBurnableAssetCount(baseAssetId, transactionRequest) <= 0) {\n    return;\n  }\n\n  const message = [\n    'Asset burn detected.',\n    'Add the relevant change outputs to the transaction to avoid burning assets.',\n    'Or enable asset burn, upon sending the transaction.',\n  ].join('\\n');\n  throw new FuelError(ErrorCode.ASSET_BURN_DETECTED, message);\n};\n", "import type { Witness } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\n\nexport type TransactionRequestWitness = BytesLike;\n\nexport const witnessify = (value: TransactionRequestWitness): Witness => {\n  const data = arrayify(value);\n\n  return {\n    data: hexlify(data),\n    dataLength: data.length,\n  };\n};\n", "import type { BN } from '@fuel-ts/math';\nimport type { TransactionBlob } from '@fuel-ts/transactions';\nimport { clone } from 'ramda';\n\nimport type { GasCosts } from '../provider';\nimport { calculateMetadataGasForTxBlob } from '../utils';\n\nimport { hashTransaction } from './hash-transaction';\nimport type { BaseTransactionRequestLike } from './transaction-request';\nimport { BaseTransactionRequest, TransactionType } from './transaction-request';\n\nexport interface BlobTransactionRequestLike extends BaseTransactionRequestLike {\n  /** Blob ID */\n  blobId: string;\n  /** Witness index of the bytecode to create */\n  witnessIndex?: number;\n}\n\nexport class BlobTransactionRequest extends BaseTransactionRequest {\n  static from(obj: BlobTransactionRequestLike) {\n    return new this(clone(obj));\n  }\n\n  /** Type of the transaction */\n  type = TransactionType.Blob as const;\n  /** Blob ID */\n  blobId: string;\n  /** Witness index of the bytecode to create */\n  witnessIndex: number;\n\n  /**\n   * Creates an instance `BlobTransactionRequest`.\n   *\n   * @param blobTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ witnessIndex, blobId, ...rest }: BlobTransactionRequestLike) {\n    super(rest);\n    this.blobId = blobId;\n    this.witnessIndex = witnessIndex ?? 0;\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionBlob`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction(): TransactionBlob {\n    const baseTransaction = this.getBaseTransaction();\n    const { witnessIndex, blobId } = this;\n    return {\n      type: TransactionType.Blob,\n      ...baseTransaction,\n      blobId,\n      witnessIndex,\n    };\n  }\n\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId: number): string {\n    return hashTransaction(this, chainId);\n  }\n\n  /**\n   * Calculates the metadata gas cost for a blob transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   * @returns metadata gas cost for the blob transaction.\n   */\n  override metadataGas(gasCosts: GasCosts): BN {\n    return calculateMetadataGasForTxBlob({\n      gasCosts,\n      txBytesSize: this.byteSize(),\n      witnessBytesSize: this.witnesses[this.witnessIndex].length,\n    });\n  }\n}\n", "import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { uint64ToBytesBE, sha256 } from '@fuel-ts/hasher';\nimport { bn } from '@fuel-ts/math';\nimport { TransactionType, InputType, OutputType, TransactionCoder } from '@fuel-ts/transactions';\nimport { concat } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { TransactionRequest } from './types';\n\n/**\n * Hash transaction request with sha256. [Read more](https://github.com/FuelLabs/fuel-specs/blob/master/specs/protocol/identifiers.md#transaction-id)\n *\n * @param transactionRequest - Transaction request to be hashed\n * @returns sha256 hash of the transaction\n */\nexport function hashTransaction(transactionRequest: TransactionRequest, chainId: number) {\n  const transaction = transactionRequest.toTransaction();\n\n  if (transaction.type === TransactionType.Script) {\n    transaction.receiptsRoot = ZeroBytes32;\n  }\n\n  // Zero out input fields\n  transaction.inputs = transaction.inputs.map((input) => {\n    const inputClone = clone(input);\n\n    switch (inputClone.type) {\n      // Zero out on signing: txPointer, predicateGasUsed\n      case InputType.Coin: {\n        inputClone.txPointer = {\n          blockHeight: 0,\n          txIndex: 0,\n        };\n        inputClone.predicateGasUsed = bn(0);\n        return inputClone;\n      }\n      // Zero out on signing: predicateGasUsed\n      case InputType.Message: {\n        inputClone.predicateGasUsed = bn(0);\n        return inputClone;\n      }\n      // Zero out on signing: txID, outputIndex, balanceRoot, stateRoot, and txPointer\n      case InputType.Contract: {\n        inputClone.txPointer = {\n          blockHeight: 0,\n          txIndex: 0,\n        };\n        inputClone.txID = ZeroBytes32;\n        inputClone.outputIndex = 0;\n        inputClone.balanceRoot = ZeroBytes32;\n        inputClone.stateRoot = ZeroBytes32;\n        return inputClone;\n      }\n      default:\n        return inputClone;\n    }\n  });\n  // Zero out output fields\n  transaction.outputs = transaction.outputs.map((output) => {\n    const outputClone = clone(output);\n\n    switch (outputClone.type) {\n      // Zero out on signing: balanceRoot, stateRoot\n      case OutputType.Contract: {\n        outputClone.balanceRoot = ZeroBytes32;\n        outputClone.stateRoot = ZeroBytes32;\n        return outputClone;\n      }\n      // Zero out on signing: amount\n      case OutputType.Change: {\n        outputClone.amount = bn(0);\n        return outputClone;\n      }\n      // Zero out on signing: amount, to and assetId\n      case OutputType.Variable: {\n        outputClone.to = ZeroBytes32;\n        outputClone.amount = bn(0);\n        outputClone.assetId = ZeroBytes32;\n        return outputClone;\n      }\n      default:\n        return outputClone;\n    }\n  });\n  transaction.witnessesCount = 0;\n  transaction.witnesses = [];\n\n  const chainIdBytes = uint64ToBytesBE(chainId);\n  const concatenatedData = concat([chainIdBytes, new TransactionCoder().encode(transaction)]);\n  return sha256(concatenatedData);\n}\n", "import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { bn, type BN } from '@fuel-ts/math';\nimport type { TransactionCreate } from '@fuel-ts/transactions';\nimport { TransactionType, OutputType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { GasCosts } from '../provider';\nimport { calculateMetadataGasForTxCreate } from '../utils/gas';\n\nimport { hashTransaction } from './hash-transaction';\nimport type { ContractCreatedTransactionRequestOutput } from './output';\nimport type { TransactionRequestStorageSlot } from './storage-slot';\nimport { storageSlotify } from './storage-slot';\nimport { BaseTransactionRequest } from './transaction-request';\nimport type { BaseTransactionRequestLike } from './transaction-request';\n\n/**\n * @hidden\n */\nexport interface CreateTransactionRequestLike extends BaseTransactionRequestLike {\n  /** Witness index of contract bytecode to create */\n  bytecodeWitnessIndex?: number;\n  /** Salt */\n  salt?: BytesLike;\n  /** List of storage slots to initialize */\n  storageSlots?: TransactionRequestStorageSlot[];\n}\n\n/**\n * `CreateTransactionRequest` provides functionalities for creating a transaction request that creates a contract.\n */\nexport class CreateTransactionRequest extends BaseTransactionRequest {\n  static from(obj: CreateTransactionRequestLike) {\n    return new this(clone(obj));\n  }\n\n  /** Type of the transaction */\n  type = TransactionType.Create as const;\n  /** Witness index of contract bytecode to create */\n  bytecodeWitnessIndex: number;\n  /** Salt */\n  salt: string;\n  /** List of storage slots to initialize */\n  storageSlots: TransactionRequestStorageSlot[];\n\n  /**\n   * Creates an instance `CreateTransactionRequest`.\n   *\n   * @param createTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ bytecodeWitnessIndex, salt, storageSlots, ...rest }: CreateTransactionRequestLike) {\n    super(rest);\n    this.bytecodeWitnessIndex = bytecodeWitnessIndex ?? 0;\n    this.salt = hexlify(salt ?? ZeroBytes32);\n    this.storageSlots = [...(storageSlots ?? [])];\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionCreate`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction(): TransactionCreate {\n    const baseTransaction = this.getBaseTransaction();\n    const bytecodeWitnessIndex = this.bytecodeWitnessIndex;\n    const storageSlots = this.storageSlots?.map(storageSlotify) ?? [];\n    return {\n      type: TransactionType.Create,\n      ...baseTransaction,\n      bytecodeWitnessIndex,\n      storageSlotsCount: bn(storageSlots.length),\n      salt: this.salt ? hexlify(this.salt) : ZeroBytes32,\n      storageSlots,\n    };\n  }\n\n  /**\n   * Get contract created outputs for the transaction.\n   *\n   * @returns An array of contract created transaction request outputs.\n   */\n  getContractCreatedOutputs(): ContractCreatedTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is ContractCreatedTransactionRequestOutput =>\n        output.type === OutputType.ContractCreated\n    );\n  }\n\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId: number): string {\n    return hashTransaction(this, chainId);\n  }\n\n  /**\n   * Adds a contract created output to the transaction request.\n   *\n   * @param contractId - The contract ID.\n   * @param stateRoot - The state root.\n   */\n  addContractCreatedOutput(\n    /** Contract ID */\n    contractId: BytesLike,\n    /** State Root */\n    stateRoot: BytesLike\n  ) {\n    this.pushOutput({\n      type: OutputType.ContractCreated,\n      contractId,\n      stateRoot,\n    });\n  }\n\n  override metadataGas(gasCosts: GasCosts): BN {\n    return calculateMetadataGasForTxCreate({\n      contractBytesSize: bn(arrayify(this.witnesses[this.bytecodeWitnessIndex] || '0x').length),\n      gasCosts,\n      stateRootSize: this.storageSlots.length,\n      txBytesSize: this.byteSize(),\n    });\n  }\n}\n", "import type { StorageSlot } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\n\nexport type TransactionRequestStorageSlot =\n  | {\n      /** Key */\n      key: BytesLike;\n      /** Value */\n      value: BytesLike;\n    }\n  | [key: BytesLike, value: BytesLike];\n\n// Make sure all values have 32 bytes\nconst getStorageValue = (value: BytesLike): Uint8Array => {\n  const v = new Uint8Array(32);\n  v.set(arrayify(value));\n  return v;\n};\n\nexport const storageSlotify = (storageSlot: TransactionRequestStorageSlot): StorageSlot => {\n  let key;\n  let value;\n\n  if (Array.isArray(storageSlot)) {\n    key = storageSlot[0];\n    value = storageSlot[1];\n  } else {\n    key = storageSlot.key;\n    value = storageSlot.value;\n  }\n\n  return {\n    key: hexlify(key),\n    value: hexlify(getStorageValue(value)),\n  };\n};\n", "import type { InputValue, JsonAbi } from '@fuel-ts/abi-coder';\nimport { Interface } from '@fuel-ts/abi-coder';\nimport { addressify } from '@fuel-ts/address';\nimport type { ContractIdLike } from '@fuel-ts/address';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { bn } from '@fuel-ts/math';\nimport type { BN, BigNumberish } from '@fuel-ts/math';\nimport type { TransactionScript } from '@fuel-ts/transactions';\nimport { InputType, OutputType, TransactionType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { Account } from '../../account';\nimport type { ChainInfo, GasCosts, TransactionCostParams } from '../provider';\nimport { calculateMetadataGasForTxScript, getMaxGas } from '../utils/gas';\n\nimport { hashTransaction } from './hash-transaction';\nimport type { ContractTransactionRequestInput } from './input';\nimport type { ContractTransactionRequestOutput, VariableTransactionRequestOutput } from './output';\nimport { returnZeroScript } from './scripts';\nimport type { BaseTransactionRequestLike } from './transaction-request';\nimport { BaseTransactionRequest } from './transaction-request';\nimport type { AbstractScriptRequest, JsonAbisFromAllCalls } from './types';\n\n/**\n * @hidden\n */\nexport interface ScriptTransactionRequestLike extends BaseTransactionRequestLike {\n  /** Gas limit for transaction */\n  gasLimit?: BigNumberish;\n  /** Script to execute */\n  script?: BytesLike;\n  /** Script input data (parameters) */\n  scriptData?: BytesLike;\n\n  abis?: JsonAbisFromAllCalls;\n}\n\n/**\n * `ScriptTransactionRequest` provides functionalities for creating a transaction request that uses a script.\n */\nexport class ScriptTransactionRequest extends BaseTransactionRequest {\n  static from(obj: ScriptTransactionRequestLike) {\n    return new this(clone(obj));\n  }\n\n  /** Type of the transaction */\n  type = TransactionType.Script as const;\n  /** Gas limit for transaction */\n  gasLimit: BN;\n  /** Script to execute */\n  script: Uint8Array;\n  /** Script input data (parameters) */\n  scriptData: Uint8Array;\n\n  abis?: JsonAbisFromAllCalls;\n\n  /**\n   * Constructor for `ScriptTransactionRequest`.\n   *\n   * @param scriptTransactionRequestLike - The initial values for the instance.\n   */\n  constructor({ script, scriptData, gasLimit, ...rest }: ScriptTransactionRequestLike = {}) {\n    super(rest);\n    this.gasLimit = bn(gasLimit);\n    this.script = arrayify(script ?? returnZeroScript.bytes);\n    this.scriptData = arrayify(scriptData ?? returnZeroScript.encodeScriptData());\n    this.abis = rest.abis;\n  }\n\n  /**\n   * Helper function to estimate and fund the transaction request with a specified account.\n   *\n   * @param account - The account to fund the transaction.\n   * @param params - The parameters for the transaction cost.\n   * @returns The current instance of the `ScriptTransactionRequest` funded.\n   */\n  async estimateAndFund(\n    account: Account,\n    { signatureCallback, quantities = [] }: TransactionCostParams = {}\n  ): Promise<ScriptTransactionRequest> {\n    const txCost = await account.getTransactionCost(this, { signatureCallback, quantities });\n\n    this.maxFee = txCost.maxFee;\n    this.gasLimit = txCost.gasUsed;\n\n    await account.fund(this, txCost);\n\n    return this;\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionScript`.\n   *\n   * @returns The transaction script object.\n   */\n  toTransaction(): TransactionScript {\n    const script = arrayify(this.script ?? '0x');\n    const scriptData = arrayify(this.scriptData ?? '0x');\n    return {\n      type: TransactionType.Script,\n      scriptGasLimit: this.gasLimit,\n      ...super.getBaseTransaction(),\n      scriptLength: bn(script.length),\n      scriptDataLength: bn(scriptData.length),\n      receiptsRoot: ZeroBytes32,\n      script: hexlify(script),\n      scriptData: hexlify(scriptData),\n    };\n  }\n\n  /**\n   * Get contract inputs for the transaction.\n   *\n   * @returns An array of contract transaction request inputs.\n   */\n  getContractInputs(): ContractTransactionRequestInput[] {\n    return this.inputs.filter(\n      (input): input is ContractTransactionRequestInput => input.type === InputType.Contract\n    );\n  }\n\n  /**\n   * Get contract outputs for the transaction.\n   *\n   * @returns An array of contract transaction request outputs.\n   */\n  getContractOutputs(): ContractTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is ContractTransactionRequestOutput => output.type === OutputType.Contract\n    );\n  }\n\n  /**\n   * Get variable outputs for the transaction.\n   *\n   * @returns An array of variable transaction request outputs.\n   */\n  getVariableOutputs(): VariableTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is VariableTransactionRequestOutput => output.type === OutputType.Variable\n    );\n  }\n\n  /**\n   * Set the script and its data.\n   *\n   * @param script - The abstract script request.\n   * @param data - The script data.\n   */\n  setScript<T>(script: AbstractScriptRequest<T>, data: T) {\n    this.scriptData = script.encodeScriptData(data);\n    this.script = script.bytes;\n  }\n\n  /**\n   * Adds variable outputs to the transaction request.\n   *\n   * @param numberOfVariables - The number of variables to add.\n   * @returns The new length of the outputs array.\n   */\n  addVariableOutputs(numberOfVariables: number = 1) {\n    let outputsNumber = numberOfVariables;\n\n    while (outputsNumber) {\n      this.pushOutput({\n        type: OutputType.Variable,\n      });\n      outputsNumber -= 1;\n    }\n\n    return this.outputs.length - 1;\n  }\n\n  /**\n   * Calculates the maximum gas for the transaction.\n   *\n   * @param chainInfo - The chain information.\n   * @param minGas - The minimum gas.\n   * @returns the maximum gas.\n   */\n  override calculateMaxGas(chainInfo: ChainInfo, minGas: BN): BN {\n    const { consensusParameters } = chainInfo;\n    const {\n      feeParameters: { gasPerByte },\n      txParameters: { maxGasPerTx },\n    } = consensusParameters;\n\n    const witnessesLength = this.toTransaction().witnesses.reduce(\n      (acc, wit) => acc + wit.dataLength,\n      0\n    );\n\n    return getMaxGas({\n      gasPerByte,\n      minGas,\n      witnessesLength,\n      witnessLimit: this.witnessLimit,\n      gasLimit: this.gasLimit,\n      maxGasPerTx,\n    });\n  }\n\n  /**\n   * Adds a contract input and output to the transaction request.\n   *\n   * @param contract - The contract ID.\n   * @returns The current instance of the `ScriptTransactionRequest`.\n   */\n  addContractInputAndOutput(contract: ContractIdLike): ScriptTransactionRequest {\n    const contractAddress = addressify(contract);\n\n    // Add only one input contract per contractId\n    if (this.getContractInputs().find((i) => i.contractId === contractAddress.toB256())) {\n      return this;\n    }\n\n    const inputIndex = super.pushInput({\n      type: InputType.Contract,\n      contractId: contractAddress.toB256(),\n      txPointer: '0x00000000000000000000000000000000',\n    });\n\n    this.pushOutput({\n      type: OutputType.Contract,\n      inputIndex,\n    });\n\n    return this;\n  }\n\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId: number): string {\n    return hashTransaction(this, chainId);\n  }\n\n  /**\n   * Sets the data for the transaction request.\n   *\n   * @param abi - Script JSON ABI.\n   * @param args - The input arguments.\n   * @returns The current instance of the `ScriptTransactionRequest`.\n   */\n  setData(abi: JsonAbi, args: InputValue[]): ScriptTransactionRequest {\n    const abiInterface = new Interface(abi);\n    this.scriptData = abiInterface.functions.main.encodeArguments(args);\n    return this;\n  }\n\n  override metadataGas(gasCosts: GasCosts): BN {\n    return calculateMetadataGasForTxScript({\n      gasCosts,\n      txBytesSize: this.byteSize(),\n    });\n  }\n}\n", "import { arrayify } from '@fuel-ts/utils';\n\nimport type { AbstractScriptRequest } from './types';\n\n// We can't import this from `@fuel-ts/script` because it causes\n// cyclic dependency errors so we duplicate it here.\n/** @hidden */\nexport const returnZeroScript: AbstractScriptRequest<void> = {\n  /*\n      Opcode::RET(REG_ZERO)\n      Opcode::NOOP\n    */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  bytes: arrayify('0x24000000'),\n  encodeScriptData: () => new Uint8Array(0),\n};\n\n/** @hidden */\nexport const withdrawScript: AbstractScriptRequest<void> = {\n  /*\n          The following code loads some basic values into registers and calls SMO to create an output message\n          5040C010 \t- ADDI r16 $is i16   [r16 now points to memory 16 bytes from the start of this program (start of receiver data)]\n          5D44C006\t- LW r17 $is i6      [r17 set to the 6th word in this program (6*8=48 bytes from the start of this program)]\n          4C400011\t- SMO r16 r0 r0 r17  [send message out to address starting at memory position r16 with amount in r17]\n          24000000\t- RET                [return 0]\n          00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 [recipient address]\n          00000000 00000000 [amount value]\n      */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  bytes: arrayify('0x5040C0105D44C0064C40001124000000'),\n  encodeScriptData: () => new Uint8Array(0),\n};\n", "import { FuelError } from '@fuel-ts/errors';\nimport { hash } from '@fuel-ts/hasher';\nimport type { BN } from '@fuel-ts/math';\nimport {\n  TransactionType,\n  type TransactionUpgrade,\n  type UpgradePurpose,\n  UpgradePurposeTypeEnum,\n} from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { GasCosts } from '../provider';\nimport { calculateMetadataGasForTxUpgrade } from '../utils';\n\nimport { hashTransaction } from './hash-transaction';\nimport { BaseTransactionRequest, type BaseTransactionRequestLike } from './transaction-request';\n\n/**\n * @hidden\n */\nexport type UpgradePurposeRequest =\n  | {\n      type: UpgradePurposeTypeEnum.ConsensusParameters;\n      checksum: string;\n    }\n  | {\n      type: UpgradePurposeTypeEnum.StateTransition;\n      data: BytesLike;\n    };\n\n/**\n * @hidden\n */\nexport interface UpgradeTransactionRequestLike extends BaseTransactionRequestLike {\n  /** The upgrade purpose */\n  upgradePurpose?: UpgradePurposeRequest;\n\n  /** Witness index */\n  bytecodeWitnessIndex?: number;\n}\n\nexport class UpgradeTransactionRequest extends BaseTransactionRequest {\n  static from(obj: UpgradeTransactionRequestLike) {\n    if (obj instanceof UpgradeTransactionRequest) {\n      return obj;\n    }\n    return new this(clone(obj));\n  }\n\n  /** The type of transaction */\n  type = TransactionType.Upgrade as const;\n  /** The upgrade purpose */\n  upgradePurpose: UpgradePurposeRequest;\n  /** Witness index of consensus */\n  bytecodeWitnessIndex: number;\n\n  /**\n   * Creates an instance `UpgradeTransactionRequest`.\n   *\n   * @param upgradeTransactionRequestLike - The initial values for the instance\n   */\n  constructor({\n    upgradePurpose,\n    bytecodeWitnessIndex,\n    ...rest\n  }: UpgradeTransactionRequestLike = {}) {\n    super(rest);\n    this.bytecodeWitnessIndex = bytecodeWitnessIndex ?? 0;\n    this.upgradePurpose = upgradePurpose ?? {\n      type: UpgradePurposeTypeEnum.ConsensusParameters,\n      checksum: '0x',\n    };\n  }\n\n  /**\n   * Adds a consensus parameters upgrade purpose.\n   *\n   * @param consensus - The consensus bytecode.\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addConsensusParametersUpgradePurpose(consensus: BytesLike) {\n    this.bytecodeWitnessIndex = this.addWitness(consensus);\n    this.upgradePurpose = {\n      type: UpgradePurposeTypeEnum.ConsensusParameters,\n      checksum: hash(consensus),\n    };\n    return this;\n  }\n\n  /**\n   * Adds a state transition upgrade purpose.\n   *\n   * @param bytecodeRoot - The Merkle root of the state transition.\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addStateTransitionUpgradePurpose(bytecodeRoot: BytesLike) {\n    this.upgradePurpose = {\n      type: UpgradePurposeTypeEnum.StateTransition,\n      data: hexlify(bytecodeRoot),\n    };\n    return this;\n  }\n\n  /**\n   * Adds an upgrade purpose.\n   *\n   * @param type - The upgrade purpose type.\n   * @param data - The bytecode or merkle root of upgrade purpose\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addUpgradePurpose(type: UpgradePurposeTypeEnum, data: BytesLike) {\n    if (type === UpgradePurposeTypeEnum.ConsensusParameters) {\n      this.addConsensusParametersUpgradePurpose(data);\n    }\n\n    if (type === UpgradePurposeTypeEnum.StateTransition) {\n      this.addStateTransitionUpgradePurpose(data);\n    }\n\n    return this;\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionUpgrade`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction(): TransactionUpgrade {\n    let upgradePurpose: UpgradePurpose;\n\n    if (this.upgradePurpose.type === UpgradePurposeTypeEnum.ConsensusParameters) {\n      upgradePurpose = {\n        type: UpgradePurposeTypeEnum.ConsensusParameters,\n        data: {\n          witnessIndex: this.bytecodeWitnessIndex,\n          checksum: this.upgradePurpose.checksum,\n        },\n      };\n    } else if (this.upgradePurpose.type === UpgradePurposeTypeEnum.StateTransition) {\n      upgradePurpose = {\n        type: UpgradePurposeTypeEnum.StateTransition,\n        data: {\n          bytecodeRoot: hexlify(this.upgradePurpose.data),\n        },\n      };\n    } else {\n      throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Invalid upgrade purpose');\n    }\n\n    return {\n      type: TransactionType.Upgrade,\n      ...super.getBaseTransaction(),\n      upgradePurpose,\n    };\n  }\n\n  /**\n   * Gets the Transaction ID by hashing the transaction\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId: number): string {\n    return hashTransaction(this, chainId);\n  }\n\n  /**\n   * Calculates the metadata gas cost for an upgrade transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   *\n   * @returns metadata gas cost for the upgrade transaction.\n   */\n  override metadataGas(gasCosts: GasCosts): BN {\n    const txBytesSize = this.byteSize();\n\n    if (this.upgradePurpose.type === UpgradePurposeTypeEnum.ConsensusParameters) {\n      const witnessIndex = this.bytecodeWitnessIndex;\n      const consensusSize = this.witnesses[witnessIndex].length;\n      return calculateMetadataGasForTxUpgrade({\n        gasCosts,\n        txBytesSize,\n        consensusSize,\n      });\n    }\n\n    if (this.upgradePurpose.type === UpgradePurposeTypeEnum.StateTransition) {\n      return calculateMetadataGasForTxUpgrade({\n        gasCosts,\n        txBytesSize,\n      });\n    }\n\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Invalid upgrade purpose');\n  }\n}\n", "import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport type { BN } from '@fuel-ts/math';\nimport { type TransactionUpload, TransactionType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { ChainInfo, GasCosts } from '../provider';\nimport { calculateMetadataGasForTxUpload, calculateMinGasForTxUpload } from '../utils';\n\nimport { hashTransaction } from './hash-transaction';\nimport { type BaseTransactionRequestLike, BaseTransactionRequest } from './transaction-request';\n\n/**\n * @hidden\n */\nexport interface UploadSubsectionRequest {\n  /** The root of the Merkle tree is created over the bytecode. */\n  root: BytesLike;\n\n  /** The index of the subsection of the bytecode. */\n  subsectionIndex: number;\n\n  /** The total number of subsections on which bytecode was divided. */\n  subsectionsNumber: number;\n\n  /** The proof set helps to verify the connection of the subsection to the `root`. */\n  proofSet: BytesLike[];\n\n  /** The subsection bytecode. */\n  subsection: BytesLike;\n}\n\n/**\n * @hidden\n */\nexport interface UploadTransactionRequestLike extends BaseTransactionRequestLike {\n  /** The witness index of the subsection of the bytecode. */\n  witnessIndex?: number;\n\n  /** The subsection data. */\n  subsection?: Omit<UploadSubsectionRequest, 'subsection'>;\n}\n\nexport class UploadTransactionRequest extends BaseTransactionRequest {\n  static from(obj: UploadTransactionRequestLike): UploadTransactionRequest {\n    if (obj instanceof UploadTransactionRequest) {\n      return obj;\n    }\n    return new this(clone(obj));\n  }\n\n  /** Type of the transaction */\n  type = TransactionType.Upload as const;\n  /** The witness index of the subsection of the bytecode. */\n  witnessIndex: number;\n  /** The subsection data. */\n  subsection: Omit<UploadSubsectionRequest, 'subsection'>;\n\n  /**\n   * Creates an instance `UploadTransactionRequest`.\n   *\n   * @param uploadTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ witnessIndex, subsection, ...rest }: UploadTransactionRequestLike = {}) {\n    super(rest);\n    this.witnessIndex = witnessIndex ?? 0;\n    this.subsection = subsection ?? {\n      proofSet: [],\n      root: ZeroBytes32,\n      subsectionIndex: 0,\n      subsectionsNumber: 0,\n    };\n  }\n\n  /**\n   * Adds the subsection.\n   *\n   * @param subsection - The subsection data.\n   */\n  addSubsection(subsection: UploadSubsectionRequest) {\n    const { subsection: subsectionBytecode, ...rest } = subsection;\n    this.subsection = rest;\n    this.witnessIndex = this.addWitness(subsectionBytecode);\n  }\n\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId: number): string {\n    return hashTransaction(this, chainId);\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionUpload`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction(): TransactionUpload {\n    const baseTransaction = this.getBaseTransaction();\n    const { subsectionIndex, subsectionsNumber, root, proofSet } = this.subsection;\n    return {\n      type: TransactionType.Upload,\n      ...baseTransaction,\n      subsectionIndex,\n      subsectionsNumber,\n      root: hexlify(root),\n      proofSet: proofSet.map(hexlify),\n      witnessIndex: this.witnessIndex,\n      proofSetCount: proofSet.length,\n    };\n  }\n\n  /**\n   * Calculates the metadata gas cost for an upload transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   *\n   * @returns metadata gas cost for the upload transaction.\n   */\n  override metadataGas(gasCosts: GasCosts): BN {\n    return calculateMetadataGasForTxUpload({\n      gasCosts,\n      txBytesSize: this.byteSize(),\n      subsectionSize: arrayify(this.witnesses[this.witnessIndex]).length,\n      subsectionsSize: this.subsection.subsectionsNumber,\n    });\n  }\n\n  /**\n   * Calculates the minimum gas for an upload transaction.\n   *\n   * @param chainInfo - The chain information.\n   *\n   * @returns the minimum gas for the upload transaction\n   */\n  override calculateMinGas(chainInfo: ChainInfo): BN {\n    const minGas = super.calculateMinGas(chainInfo);\n    const { gasCosts } = chainInfo.consensusParameters;\n    const bytecode = this.witnesses[this.witnessIndex] ?? ZeroBytes32;\n    return calculateMinGasForTxUpload({\n      gasCosts,\n      baseMinGas: minGas.toNumber(),\n      subsectionSize: arrayify(bytecode).length,\n    });\n  }\n}\n", "import type { JsonAbi } from '@fuel-ts/abi-coder';\nimport type { TransactionType } from '@fuel-ts/transactions';\n\nimport type {\n  BlobTransactionRequest,\n  BlobTransactionRequestLike,\n} from './blob-transaction-request';\nimport type {\n  CreateTransactionRequest,\n  CreateTransactionRequestLike,\n} from './create-transaction-request';\nimport type {\n  ScriptTransactionRequest,\n  ScriptTransactionRequestLike,\n} from './script-transaction-request';\nimport type {\n  UpgradeTransactionRequest,\n  UpgradeTransactionRequestLike,\n} from './upgrade-transaction-request';\nimport type {\n  UploadTransactionRequest,\n  UploadTransactionRequestLike,\n} from './upload-transaction-request';\n\nexport type TransactionRequest =\n  | ScriptTransactionRequest\n  | CreateTransactionRequest\n  | BlobTransactionRequest\n  | UpgradeTransactionRequest\n  | UploadTransactionRequest;\nexport type TransactionRequestLike =\n  | ({ type: TransactionType.Script } & ScriptTransactionRequestLike)\n  | ({ type: TransactionType.Create } & CreateTransactionRequestLike)\n  | ({ type: TransactionType.Blob } & BlobTransactionRequestLike)\n  | ({ type: TransactionType.Upgrade } & UpgradeTransactionRequestLike)\n  | ({ type: TransactionType.Upload } & UploadTransactionRequestLike);\n\nexport type JsonAbisFromAllCalls = {\n  main: JsonAbi;\n  otherContractsAbis: Record<string, JsonAbi>;\n};\n\n/**\n * @hidden\n */\nexport abstract class AbstractScriptRequest<T> {\n  abstract bytes: Uint8Array;\n  abstract encodeScriptData: (data: T) => Uint8Array;\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { TransactionType } from '@fuel-ts/transactions';\n\nimport { BlobTransactionRequest } from './blob-transaction-request';\nimport { CreateTransactionRequest } from './create-transaction-request';\nimport { ScriptTransactionRequest } from './script-transaction-request';\nimport type { TransactionRequestLike, TransactionRequest } from './types';\nimport { UpgradeTransactionRequest } from './upgrade-transaction-request';\nimport { UploadTransactionRequest } from './upload-transaction-request';\n\n/** @hidden */\nexport const transactionRequestify = (obj: TransactionRequestLike): TransactionRequest => {\n  if (\n    obj instanceof ScriptTransactionRequest ||\n    obj instanceof CreateTransactionRequest ||\n    obj instanceof BlobTransactionRequest ||\n    obj instanceof UpgradeTransactionRequest ||\n    obj instanceof UploadTransactionRequest\n  ) {\n    return obj;\n  }\n\n  const { type } = obj;\n\n  switch (obj.type) {\n    case TransactionType.Script: {\n      return ScriptTransactionRequest.from(obj);\n    }\n    case TransactionType.Create: {\n      return CreateTransactionRequest.from(obj);\n    }\n    case TransactionType.Blob: {\n      return BlobTransactionRequest.from(obj);\n    }\n    case TransactionType.Upgrade: {\n      return UpgradeTransactionRequest.from(obj);\n    }\n    case TransactionType.Upload: {\n      return UploadTransactionRequest.from(obj);\n    }\n    default: {\n      throw new FuelError(\n        ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n        `Unsupported transaction type: ${type}.`\n      );\n    }\n  }\n};\n\n/** @hidden */\nexport const isTransactionTypeScript = (\n  request: TransactionRequestLike\n): request is ScriptTransactionRequest => request.type === TransactionType.Script;\n\n/** @hidden */\nexport const isTransactionTypeCreate = (\n  request: TransactionRequestLike\n): request is CreateTransactionRequest => request.type === TransactionType.Create;\n\n/** @hidden */\nexport const isTransactionTypeBlob = (\n  request: TransactionRequestLike\n): request is BlobTransactionRequest => request.type === TransactionType.Blob;\n\n/** @hidden */\nexport const isTransactionTypeUpgrade = (\n  request: TransactionRequestLike\n): request is UpgradeTransactionRequest => request.type === TransactionType.Upgrade;\n\n/** @hidden */\nexport const isTransactionTypeUpload = (\n  request: TransactionRequestLike\n): request is UploadTransactionRequest => request.type === TransactionType.Upload;\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type {\n  ReceiptCall,\n  ReceiptLog,\n  ReceiptLogData,\n  ReceiptPanic,\n  ReceiptReturn,\n  ReceiptReturnData,\n  ReceiptRevert,\n  ReceiptTransfer,\n  ReceiptTransferOut,\n  ReceiptScriptResult,\n  ReceiptMessageOut,\n  Transaction,\n  ReceiptMint,\n  ReceiptBurn,\n  OutputCoin,\n  OutputContract,\n  OutputChange,\n  OutputVariable,\n  OutputContractCreated,\n  Output,\n  TransactionType,\n} from '@fuel-ts/transactions';\nimport { OutputType, TransactionCoder, TxPointerCoder } from '@fuel-ts/transactions';\nimport { arrayify, assertUnreachable } from '@fuel-ts/utils';\n\nimport type {\n  GqlMalleableTransactionFieldsFragment,\n  GqlStatusChangeSubscription,\n  GqlSubmitAndAwaitStatusSubscription,\n} from '../__generated__/operations';\nimport type Provider from '../provider';\nimport type { JsonAbisFromAllCalls, TransactionRequest } from '../transaction-request';\nimport { assembleTransactionSummary } from '../transaction-summary/assemble-transaction-summary';\nimport { getTotalFeeFromStatus } from '../transaction-summary/status';\nimport type { TransactionSummary, GqlTransaction, AbiMap } from '../transaction-summary/types';\nimport { extractTxError } from '../utils';\nimport { deserializeReceipt } from '../utils/serialization';\n\nimport { type DecodedLogs, getAllDecodedLogs } from './getAllDecodedLogs';\n\n/** @hidden */\nexport type TransactionResultCallReceipt = ReceiptCall;\n/** @hidden */\nexport type TransactionResultReturnReceipt = ReceiptReturn;\n/** @hidden */\nexport type TransactionResultReturnDataReceipt = ReceiptReturnData & { data: string };\n/** @hidden */\nexport type TransactionResultPanicReceipt = ReceiptPanic;\n/** @hidden */\nexport type TransactionResultRevertReceipt = ReceiptRevert;\n/** @hidden */\nexport type TransactionResultLogReceipt = ReceiptLog;\n/** @hidden */\nexport type TransactionResultLogDataReceipt = ReceiptLogData & { data: string };\n/** @hidden */\nexport type TransactionResultTransferReceipt = ReceiptTransfer;\n/** @hidden */\nexport type TransactionResultTransferOutReceipt = ReceiptTransferOut;\n/** @hidden */\nexport type TransactionResultScriptResultReceipt = ReceiptScriptResult;\n/** @hidden */\nexport type TransactionResultMessageOutReceipt = ReceiptMessageOut;\nexport type TransactionResultMintReceipt = ReceiptMint;\nexport type TransactionResultBurnReceipt = ReceiptBurn;\n\n/** @hidden */\nexport type TransactionResultReceipt =\n  | ReceiptCall\n  | ReceiptReturn\n  | (ReceiptReturnData & { data: string })\n  | ReceiptPanic\n  | ReceiptRevert\n  | ReceiptLog\n  | (ReceiptLogData & { data: string })\n  | ReceiptTransfer\n  | ReceiptTransferOut\n  | ReceiptScriptResult\n  | ReceiptMessageOut\n  | TransactionResultMintReceipt\n  | TransactionResultBurnReceipt;\n\n/** @hidden */\nexport type TransactionResult<TTransactionType = void> = TransactionSummary<TTransactionType> & {\n  logs?: DecodedLogs['logs'];\n  groupedLogs?: DecodedLogs['groupedLogs'];\n};\n\nfunction mapGqlOutputsToTxOutputs(\n  outputs: GqlMalleableTransactionFieldsFragment['outputs']\n): Output[] {\n  return outputs.map((o) => {\n    const obj = 'amount' in o ? { ...o, amount: bn(o.amount) } : o;\n    switch (obj.type) {\n      case 'CoinOutput':\n        return { ...obj, type: OutputType.Coin } satisfies OutputCoin;\n      case 'ContractOutput':\n        return {\n          ...obj,\n          type: OutputType.Contract,\n          inputIndex: parseInt(obj.inputIndex, 10),\n        } satisfies OutputContract;\n      case 'ChangeOutput':\n        return {\n          ...obj,\n          type: OutputType.Change,\n        } satisfies OutputChange;\n      case 'VariableOutput':\n        return { ...obj, type: OutputType.Variable } satisfies OutputVariable;\n      case 'ContractCreated':\n        return {\n          ...obj,\n          type: OutputType.ContractCreated,\n          contractId: obj.contract,\n        } satisfies OutputContractCreated;\n      default:\n        return assertUnreachable(obj);\n    }\n  });\n}\n\n/**\n * Represents a response for a transaction.\n */\nexport class TransactionResponse {\n  /** Transaction ID */\n  id: string;\n  /** Current provider */\n  provider: Provider;\n  /** Gas used on the transaction */\n  gasUsed: BN = bn(0);\n  /** The graphql Transaction with receipts object. */\n  private gqlTransaction?: GqlTransaction;\n  private request?: TransactionRequest;\n  private status?: GqlStatusChangeSubscription['statusChange'];\n  abis?: JsonAbisFromAllCalls;\n\n  /**\n   * Constructor for `TransactionResponse`.\n   *\n   * @param tx - The transaction ID or TransactionRequest.\n   * @param provider - The provider.\n   */\n  constructor(\n    tx: string | TransactionRequest,\n    provider: Provider,\n    chainId: number,\n    abis?: JsonAbisFromAllCalls,\n    private submitTxSubscription?: AsyncIterable<GqlSubmitAndAwaitStatusSubscription>\n  ) {\n    this.id = typeof tx === 'string' ? tx : tx.getTransactionId(chainId);\n\n    this.provider = provider;\n    this.abis = abis;\n    this.request = typeof tx === 'string' ? undefined : tx;\n\n    this.waitForResult = this.waitForResult.bind(this);\n  }\n\n  /**\n   * Async constructor for `TransactionResponse`. This method can be used to create\n   * an instance of `TransactionResponse` and wait for the transaction to be fetched\n   * from the chain, ensuring that the `gqlTransaction` property is set.\n   *\n   * @param id - The transaction ID.\n   * @param provider - The provider.\n   */\n  static async create(\n    id: string,\n    provider: Provider,\n    abis?: JsonAbisFromAllCalls\n  ): Promise<TransactionResponse> {\n    const chainId = await provider.getChainId();\n    const response = new TransactionResponse(id, provider, chainId, abis);\n    await response.fetch();\n    return response;\n  }\n\n  private applyMalleableSubscriptionFields<TTransactionType = void>(\n    transaction: Transaction<TTransactionType>\n  ) {\n    const status = this.status;\n    if (!status) {\n      return;\n    }\n\n    // The SDK currently submits only these\n    const tx = transaction as Transaction<\n      TransactionType.Script | TransactionType.Create | TransactionType.Blob\n    >;\n\n    if (status.type === 'SuccessStatus' || status.type === 'FailureStatus') {\n      tx.inputs = tx.inputs.map((input, idx) => {\n        if ('txPointer' in input) {\n          const correspondingInput = status.transaction.inputs?.[idx] as { txPointer: string };\n          return {\n            ...input,\n            txPointer: TxPointerCoder.decodeFromGqlScalar(correspondingInput.txPointer),\n          };\n        }\n        return input;\n      });\n\n      tx.outputs = mapGqlOutputsToTxOutputs(status.transaction.outputs);\n\n      if ('receiptsRoot' in status.transaction) {\n        (tx as Transaction<TransactionType.Script>).receiptsRoot = status.transaction\n          .receiptsRoot as string;\n      }\n    }\n  }\n\n  private async getTransaction<TTransactionType = void>(): Promise<{\n    tx: Transaction<TTransactionType>;\n    bytes: Uint8Array;\n  }> {\n    if (this.request) {\n      const tx = this.request.toTransaction() as Transaction<TTransactionType>;\n      this.applyMalleableSubscriptionFields(tx);\n      return {\n        tx,\n        bytes: this.request.toTransactionBytes(),\n      };\n    }\n\n    const gqlTransaction = this.gqlTransaction ?? (await this.fetch());\n    return {\n      tx: this.decodeTransaction(gqlTransaction) as Transaction<TTransactionType>,\n      bytes: arrayify(gqlTransaction.rawPayload),\n    };\n  }\n\n  private getReceipts(): TransactionResultReceipt[] {\n    const status = this.status ?? this.gqlTransaction?.status;\n\n    switch (status?.type) {\n      case 'SuccessStatus':\n      case 'FailureStatus':\n        return status.receipts.map(deserializeReceipt);\n      default:\n        return [];\n    }\n  }\n\n  /**\n   * Fetch the transaction with receipts from the provider.\n   *\n   * @returns Transaction with receipts query result.\n   */\n  async fetch(): Promise<GqlTransaction> {\n    const response = await this.provider.operations.getTransactionWithReceipts({\n      transactionId: this.id,\n    });\n\n    if (!response.transaction) {\n      const subscription = await this.provider.operations.statusChange({\n        transactionId: this.id,\n      });\n\n      for await (const { statusChange } of subscription) {\n        if (statusChange) {\n          this.status = statusChange;\n          break;\n        }\n      }\n\n      return this.fetch();\n    }\n\n    this.gqlTransaction = response.transaction;\n\n    return response.transaction;\n  }\n\n  /**\n   * Decode the raw payload of the transaction.\n   *\n   * @param transactionWithReceipts - The transaction with receipts object.\n   * @returns The decoded transaction.\n   */\n  decodeTransaction<TTransactionType = void>(transactionWithReceipts: GqlTransaction) {\n    return new TransactionCoder().decode(\n      arrayify(transactionWithReceipts.rawPayload),\n      0\n    )?.[0] as Transaction<TTransactionType>;\n  }\n\n  /**\n   * Retrieves the TransactionSummary. If the `gqlTransaction` is not set, it will\n   * fetch it from the provider\n   *\n   * @param contractsAbiMap - The contracts ABI map.\n   * @returns\n   */\n  async getTransactionSummary<TTransactionType = void>(\n    contractsAbiMap?: AbiMap\n  ): Promise<TransactionSummary<TTransactionType>> {\n    const { tx: transaction, bytes: transactionBytes } =\n      await this.getTransaction<TTransactionType>();\n\n    const { gasPerByte, gasPriceFactor, gasCosts, maxGasPerTx } =\n      await this.provider.getGasConfig();\n\n    // If we have the total fee, we do not need to refetch the gas price\n    const totalFee = getTotalFeeFromStatus(this.status ?? this.gqlTransaction?.status);\n    const gasPrice = totalFee ? bn(0) : await this.provider.getLatestGasPrice();\n\n    const maxInputs = (await this.provider.getChain()).consensusParameters.txParameters.maxInputs;\n    const baseAssetId = await this.provider.getBaseAssetId();\n\n    const transactionSummary = assembleTransactionSummary<TTransactionType>({\n      id: this.id,\n      receipts: this.getReceipts(),\n      transaction,\n      transactionBytes,\n      gqlTransactionStatus: this.status ?? this.gqlTransaction?.status,\n      gasPerByte,\n      gasPriceFactor,\n      abiMap: contractsAbiMap,\n      maxInputs,\n      gasCosts,\n      maxGasPerTx,\n      gasPrice,\n      baseAssetId,\n    });\n\n    return transactionSummary;\n  }\n\n  private async waitForStatusChange() {\n    const status = this.gqlTransaction?.status?.type;\n    if (status && status !== 'SubmittedStatus') {\n      return;\n    }\n\n    const subscription =\n      this.submitTxSubscription ??\n      (await this.provider.operations.statusChange({\n        transactionId: this.id,\n      }));\n\n    for await (const sub of subscription) {\n      const statusChange = 'statusChange' in sub ? sub.statusChange : sub.submitAndAwaitStatus;\n      this.status = statusChange;\n      if (statusChange.type === 'SqueezedOutStatus') {\n        this.unsetResourceCache();\n        throw new FuelError(\n          ErrorCode.TRANSACTION_SQUEEZED_OUT,\n          `Transaction Squeezed Out with reason: ${statusChange.reason}`\n        );\n      }\n      if (statusChange.type !== 'SubmittedStatus') {\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assembles the result of a transaction by retrieving the transaction summary,\n   * decoding logs (if available), and handling transaction failure.\n   *\n   * This method can be used to obtain the result of a transaction that has just\n   * been submitted or one that has already been processed.\n   *\n   * @template TTransactionType - The type of the transaction.\n   * @param contractsAbiMap - The map of contract ABIs.\n   * @returns - The assembled transaction result.\n   * @throws If the transaction status is a failure.\n   */\n  async assembleResult<TTransactionType = void>(\n    contractsAbiMap?: AbiMap\n  ): Promise<TransactionResult<TTransactionType>> {\n    const transactionSummary = await this.getTransactionSummary<TTransactionType>(contractsAbiMap);\n\n    const transactionResult: TransactionResult<TTransactionType> = {\n      ...transactionSummary,\n    };\n\n    let { logs, groupedLogs }: DecodedLogs = { logs: [], groupedLogs: {} };\n\n    if (this.abis) {\n      ({ logs, groupedLogs } = getAllDecodedLogs({\n        receipts: transactionSummary.receipts,\n        mainAbi: this.abis.main,\n        externalAbis: this.abis.otherContractsAbis,\n      }));\n\n      transactionResult.logs = logs;\n      transactionResult.groupedLogs = groupedLogs;\n    }\n\n    const { receipts } = transactionResult;\n\n    const status = this.status ?? this.gqlTransaction?.status;\n    if (status?.type === 'FailureStatus') {\n      const { reason } = status;\n      throw extractTxError({\n        receipts,\n        statusReason: reason,\n        logs,\n        groupedLogs,\n      });\n    }\n\n    return transactionResult;\n  }\n\n  /**\n   * Waits for transaction to complete and returns the result.\n   *\n   * @returns The completed transaction result\n   */\n  async waitForResult<TTransactionType = void>(\n    contractsAbiMap?: AbiMap\n  ): Promise<TransactionResult<TTransactionType>> {\n    await this.waitForStatusChange();\n    this.unsetResourceCache();\n    return this.assembleResult<TTransactionType>(contractsAbiMap);\n  }\n\n  /**\n   * Waits for transaction to complete and returns the result.\n   *\n   * @param contractsAbiMap - The contracts ABI map.\n   */\n  async wait<TTransactionType = void>(\n    contractsAbiMap?: AbiMap\n  ): Promise<TransactionResult<TTransactionType>> {\n    return this.waitForResult<TTransactionType>(contractsAbiMap);\n  }\n\n  private unsetResourceCache() {\n    this.provider.cache?.unset(this.id);\n  }\n}\n", "import { bn, type BN } from '@fuel-ts/math';\nimport { PolicyType, type Transaction } from '@fuel-ts/transactions';\nimport { DateTime, hexlify } from '@fuel-ts/utils';\n\nimport type { GasCosts } from '../provider';\nimport type { TransactionResultReceipt } from '../transaction-response';\nimport { getGasUsedFromReceipts } from '../utils';\n\nimport { calculateTXFeeForSummary } from './calculate-tx-fee-for-summary';\nimport {\n  getOperations,\n  getTransactionTypeName,\n  isTypeMint,\n  isTypeCreate,\n  isTypeScript,\n  isTypeUpgrade,\n  isTypeUpload,\n  isTypeBlob,\n} from './operations';\nimport { extractBurnedAssetsFromReceipts, extractMintedAssetsFromReceipts } from './receipt';\nimport { processGraphqlStatus } from './status';\nimport type { AbiMap, GraphqlTransactionStatus, TransactionSummary } from './types';\n\nexport interface AssembleTransactionSummaryParams {\n  gasPerByte: BN;\n  gasPriceFactor: BN;\n  transaction: Transaction;\n  id: string;\n  transactionBytes: Uint8Array;\n  gqlTransactionStatus?: GraphqlTransactionStatus;\n  receipts: TransactionResultReceipt[];\n  abiMap?: AbiMap;\n  maxInputs: BN;\n  gasCosts: GasCosts;\n  maxGasPerTx: BN;\n  gasPrice: BN;\n  baseAssetId: string;\n}\n\n/** @hidden */\nexport function assembleTransactionSummary<TTransactionType = void>(\n  params: AssembleTransactionSummaryParams\n) {\n  const {\n    id,\n    receipts,\n    gasPerByte,\n    gasPriceFactor,\n    transaction,\n    transactionBytes,\n    gqlTransactionStatus,\n    abiMap = {},\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId,\n  } = params;\n\n  const gasUsed = getGasUsedFromReceipts(receipts);\n\n  const rawPayload = hexlify(transactionBytes);\n\n  const operations = getOperations({\n    transactionType: transaction.type,\n    inputs: transaction.inputs || [],\n    outputs: transaction.outputs || [],\n    receipts,\n    rawPayload,\n    abiMap,\n    maxInputs,\n    baseAssetId,\n  });\n\n  const typeName = getTransactionTypeName(transaction.type);\n\n  const tip = bn(transaction.policies?.find((policy) => policy.type === PolicyType.Tip)?.data);\n\n  const { isStatusFailure, isStatusPending, isStatusSuccess, blockId, status, time, totalFee } =\n    processGraphqlStatus(gqlTransactionStatus);\n\n  const fee =\n    totalFee ??\n    calculateTXFeeForSummary({\n      gasPrice,\n      rawPayload,\n      tip,\n      consensusParameters: {\n        gasCosts,\n        maxGasPerTx,\n        feeParams: {\n          gasPerByte,\n          gasPriceFactor,\n        },\n      },\n    });\n\n  const mintedAssets = extractMintedAssetsFromReceipts(receipts);\n  const burnedAssets = extractBurnedAssetsFromReceipts(receipts);\n\n  let date: DateTime | undefined;\n\n  if (time) {\n    date = DateTime.fromTai64(time);\n  }\n\n  const transactionSummary: TransactionSummary<TTransactionType> = {\n    id,\n    tip,\n    fee,\n    gasUsed,\n    operations,\n    type: typeName,\n    blockId,\n    time,\n    status,\n    receipts,\n    mintedAssets,\n    burnedAssets,\n    isTypeMint: isTypeMint(transaction.type),\n    isTypeCreate: isTypeCreate(transaction.type),\n    isTypeScript: isTypeScript(transaction.type),\n    isTypeUpgrade: isTypeUpgrade(transaction.type),\n    isTypeUpload: isTypeUpload(transaction.type),\n    isTypeBlob: isTypeBlob(transaction.type),\n    isStatusFailure,\n    isStatusSuccess,\n    isStatusPending,\n    date,\n    transaction: transaction as Transaction<TTransactionType>,\n  };\n\n  return transactionSummary;\n}\n", "import type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type { TransactionCreate, TransactionScript } from '@fuel-ts/transactions';\nimport { PolicyType, TransactionCoder, TransactionType } from '@fuel-ts/transactions';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport type { GqlFeeParameters } from '../__generated__/operations';\nimport type { ConsensusParameters } from '../provider';\nimport {\n  calculateGasFee,\n  calculateMetadataGasForTxCreate,\n  calculateMetadataGasForTxScript,\n  getMaxGas,\n  getMinGas,\n} from '../utils/gas';\n\ntype FeeParams =\n  | Pick<GqlFeeParameters, 'gasPerByte' | 'gasPriceFactor'>\n  | {\n      gasPerByte: BN | number;\n      gasPriceFactor: BN | number;\n    };\n\nexport type CalculateTXFeeForSummaryParams = {\n  gasPrice: BN;\n  rawPayload: string;\n  tip: BN;\n  consensusParameters: Pick<ConsensusParameters, 'gasCosts'> & {\n    feeParams: FeeParams;\n    maxGasPerTx: BN;\n  };\n};\n\nexport const calculateTXFeeForSummary = (params: CalculateTXFeeForSummaryParams): BN => {\n  const {\n    gasPrice,\n    rawPayload,\n    tip,\n    consensusParameters: { gasCosts, feeParams, maxGasPerTx },\n  } = params;\n\n  const gasPerByte = bn(feeParams.gasPerByte);\n  const gasPriceFactor = bn(feeParams.gasPriceFactor);\n\n  const transactionBytes = arrayify(rawPayload);\n\n  const [transaction] = new TransactionCoder().decode(transactionBytes, 0);\n\n  const { type, witnesses, inputs, policies } = transaction as\n    | TransactionCreate\n    | TransactionScript;\n\n  let metadataGas = bn(0);\n  let gasLimit = bn(0);\n\n  if (type !== TransactionType.Create && type !== TransactionType.Script) {\n    return bn(0);\n  }\n\n  if (type === TransactionType.Create) {\n    const { bytecodeWitnessIndex, storageSlots } = transaction as TransactionCreate;\n\n    const contractBytesSize = bn(arrayify(witnesses[bytecodeWitnessIndex].data).length);\n\n    metadataGas = calculateMetadataGasForTxCreate({\n      contractBytesSize,\n      gasCosts,\n      stateRootSize: storageSlots.length || 0,\n      txBytesSize: transactionBytes.length,\n    });\n  } else {\n    const { scriptGasLimit } = transaction;\n\n    if (scriptGasLimit) {\n      gasLimit = scriptGasLimit;\n    }\n\n    metadataGas = calculateMetadataGasForTxScript({\n      gasCosts,\n      txBytesSize: transactionBytes.length,\n    });\n  }\n\n  const minGas = getMinGas({\n    gasCosts,\n    gasPerByte: bn(gasPerByte),\n    inputs,\n    metadataGas,\n    txBytesSize: transactionBytes.length,\n  });\n\n  const witnessLimit = policies.find((policy) => policy.type === PolicyType.WitnessLimit)?.data as\n    | BN\n    | undefined;\n\n  const witnessesLength = witnesses.reduce((acc, wit) => acc + wit.dataLength, 0);\n\n  const maxGas = getMaxGas({\n    gasPerByte,\n    minGas,\n    witnessesLength,\n    gasLimit,\n    witnessLimit,\n    maxGasPerTx,\n  });\n\n  const maxFee = calculateGasFee({\n    gasPrice,\n    gas: maxGas,\n    priceFactor: gasPriceFactor,\n    tip,\n  });\n\n  return maxFee;\n};\n", "import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport { ReceiptType, TransactionType } from '@fuel-ts/transactions';\nimport type { InputContract, Output, OutputChange, Input } from '@fuel-ts/transactions';\n\nimport type {\n  TransactionResultReceipt,\n  TransactionResultCallReceipt,\n  TransactionResultMessageOutReceipt,\n  TransactionResultTransferOutReceipt,\n  TransactionResultTransferReceipt,\n} from '../transaction-response';\n\nimport type { FunctionCall } from './call';\nimport {\n  getInputFromAssetId,\n  getInputAccountAddress,\n  getInputContractFromIndex,\n  getInputsContract,\n  getInputsCoinAndMessage,\n  aggregateInputsAmountsByAssetAndOwner,\n} from './input';\nimport {\n  getOutputsChange,\n  getOutputsCoin,\n  getOutputsContract,\n  getOutputsContractCreated,\n} from './output';\nimport { AddressType, ChainName, OperationName, TransactionTypeName } from './types';\nimport type {\n  InputOutputParam,\n  InputParam,\n  OperationCoin,\n  RawPayloadParam,\n  ReceiptParam,\n  Operation,\n  GetOperationParams,\n  GetTransferOperationsParams,\n  AbiMap,\n} from './types';\n\n/**\n * Extracts a specific type of receipt from a list of receipts.\n *\n * @param receipts - The list of receipts to filter.\n * @param type - The type of receipt to filter for.\n * @returns The filtered list of receipts.\n */\nexport function getReceiptsByType<T = TransactionResultReceipt>(\n  receipts: TransactionResultReceipt[],\n  type: ReceiptType\n) {\n  return (receipts ?? []).filter((r) => r.type === type) as T[];\n}\n\n/**\n * Returns the transaction type's name based on the transaction type enum value.\n *\n * @param transactionType - The transaction type enum value.\n * @returns The transaction type's name.\n */\nexport function getTransactionTypeName(transactionType: TransactionType): TransactionTypeName {\n  switch (transactionType) {\n    case TransactionType.Mint:\n      return TransactionTypeName.Mint;\n    case TransactionType.Create:\n      return TransactionTypeName.Create;\n    case TransactionType.Script:\n      return TransactionTypeName.Script;\n    case TransactionType.Blob:\n      return TransactionTypeName.Blob;\n    case TransactionType.Upgrade:\n      return TransactionTypeName.Upgrade;\n    case TransactionType.Upload:\n      return TransactionTypeName.Upload;\n    default:\n      throw new FuelError(\n        ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n        `Unsupported transaction type: ${transactionType}.`\n      );\n  }\n}\n\n/** @hidden */\nexport function isType(transactionType: TransactionType, type: TransactionTypeName) {\n  const txType = getTransactionTypeName(transactionType);\n\n  return txType === type;\n}\n\n/** @hidden */\nexport function isTypeMint(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Mint);\n}\n\n/** @hidden */\nexport function isTypeCreate(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Create);\n}\n\n/** @hidden */\nexport function isTypeScript(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Script);\n}\n\n/** @hidden */\nexport function isTypeUpgrade(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Upgrade);\n}\n\n/** @hidden */\nexport function isTypeUpload(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Upload);\n}\n\n/** @hidden */\nexport function isTypeBlob(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Blob);\n}\n\n/** @hidden */\nexport function hasSameAssetId(a: OperationCoin) {\n  return (b: OperationCoin) => a.assetId === b.assetId;\n}\n\n/** @hidden */\nexport function getReceiptsCall(receipts: TransactionResultReceipt[]) {\n  return getReceiptsByType<TransactionResultCallReceipt>(receipts, ReceiptType.Call);\n}\n\n/** @hidden */\nexport function getReceiptsMessageOut(receipts: TransactionResultReceipt[]) {\n  return getReceiptsByType<TransactionResultMessageOutReceipt>(receipts, ReceiptType.MessageOut);\n}\n\n/** @hidden */\nfunction mergeAssets(op1: Operation, op2: Operation): OperationCoin[] {\n  const assets1 = op1.assetsSent || [];\n  const assets2 = op2.assetsSent || [];\n\n  const assetMap = new Map<string, OperationCoin>();\n\n  // Merge assets from op1\n  assets1.forEach((asset) => {\n    assetMap.set(asset.assetId, { ...asset });\n  });\n\n  // Merge assets from op2, adding to existing assets or creating new ones\n  assets2.forEach((asset) => {\n    const existingAsset = assetMap.get(asset.assetId);\n    if (existingAsset) {\n      existingAsset.amount = bn(existingAsset.amount).add(asset.amount);\n    } else {\n      assetMap.set(asset.assetId, { ...asset });\n    }\n  });\n\n  return Array.from(assetMap.values());\n}\n\n/** @hidden */\nfunction isSameOperation(a: Operation, b: Operation) {\n  return (\n    a.name === b.name &&\n    a.from?.address === b.from?.address &&\n    a.to?.address === b.to?.address &&\n    a.from?.type === b.from?.type &&\n    a.to?.type === b.to?.type\n  );\n}\n\n/** @hidden */\nfunction mergeAssetsSent(existing: Operation, toAdd: Operation): Operation['assetsSent'] {\n  if (!toAdd.assetsSent?.length) {\n    return existing.assetsSent;\n  }\n\n  return existing.assetsSent?.length ? mergeAssets(existing, toAdd) : toAdd.assetsSent;\n}\n\n/** @hidden */\nfunction mergeCalls(existing: Operation, toAdd: Operation): Operation['calls'] {\n  if (!toAdd.calls?.length) {\n    return existing.calls;\n  }\n\n  return [...(existing.calls || []), ...toAdd.calls];\n}\n\n/** @hidden */\nfunction mergeOperations(existing: Operation, toAdd: Operation): Operation {\n  return {\n    ...existing,\n    assetsSent: mergeAssetsSent(existing, toAdd),\n    calls: mergeCalls(existing, toAdd),\n    receipts: [\n      ...(existing.receipts || []),\n      ...(toAdd.receipts?.filter((r) => !existing.receipts?.some((er) => er === r)) || []),\n    ],\n  };\n}\n\n/** @hidden */\nexport function addOperation(operations: Operation[], toAdd: Operation): Operation[] {\n  const existingIndex = operations.findIndex((op) => isSameOperation(op, toAdd));\n\n  if (existingIndex === -1) {\n    return [...operations, toAdd];\n  }\n\n  return operations.map((op, index) => (index === existingIndex ? mergeOperations(op, toAdd) : op));\n}\n\n/** @hidden */\nexport function getReceiptsTransferOut(receipts: TransactionResultReceipt[]) {\n  return getReceiptsByType<TransactionResultTransferOutReceipt>(receipts, ReceiptType.TransferOut);\n}\n\n/**\n * Creates withdrawal operations from Fuel to Ethereum based on message out receipts\n *\n * @param inputs - Transaction inputs containing account information\n * @param receipts - Transaction receipts containing withdrawal details\n * @param baseAssetId - The ID of the asset being withdrawn\n * @returns Array of withdrawal operations with sender, recipient, and asset id.\n */\nexport function getWithdrawFromFuelOperations({\n  inputs,\n  receipts,\n  baseAssetId,\n}: InputParam & ReceiptParam & { baseAssetId: string }): Operation[] {\n  const messageOutReceipts = getReceiptsMessageOut(receipts);\n\n  const withdrawFromFuelOperations = messageOutReceipts.reduce(\n    (prevWithdrawFromFuelOps, receipt) => {\n      const input = getInputFromAssetId(inputs, baseAssetId, true);\n      if (input) {\n        const inputAddress = getInputAccountAddress(input);\n        const newWithdrawFromFuelOps = addOperation(prevWithdrawFromFuelOps, {\n          name: OperationName.withdrawFromFuel,\n          from: {\n            type: AddressType.account,\n            address: inputAddress,\n          },\n          to: {\n            type: AddressType.account,\n            address: receipt.recipient.toString(),\n            chain: ChainName.ethereum,\n          },\n          assetsSent: [\n            {\n              amount: receipt.amount,\n              assetId: baseAssetId,\n            },\n          ],\n          receipts: [receipt],\n        });\n\n        return newWithdrawFromFuelOps;\n      }\n\n      return prevWithdrawFromFuelOps;\n    },\n    [] as Operation[]\n  );\n\n  return withdrawFromFuelOperations;\n}\n\n/** @hidden */\nfunction getContractCalls(\n  contractInput: InputContract,\n  abiMap: AbiMap | undefined,\n  _receipt: TransactionResultCallReceipt,\n  _rawPayload: string,\n  _maxInputs: BN\n): FunctionCall[] {\n  const abi = abiMap?.[contractInput.contractID];\n  if (!abi) {\n    return [];\n  }\n\n  // Until we can successfully decode all operations, including multicall we\n  // will just return an empty. This should then be reintroduced in\n  // https://github.com/FuelLabs/fuels-ts/issues/3733\n  return [];\n  // return [ getFunctionCall({ abi, receipt, rawPayload, maxInputs }) ];\n}\n\n/** @hidden */\nfunction getAssetsSent(receipt: TransactionResultCallReceipt): OperationCoin[] | undefined {\n  return receipt.amount?.isZero()\n    ? undefined\n    : [\n        {\n          amount: receipt.amount,\n          assetId: receipt.assetId,\n        },\n      ];\n}\n\n/** @hidden */\nfunction processCallReceipt(\n  receipt: TransactionResultCallReceipt,\n  contractInput: InputContract,\n  inputs: Input[],\n  abiMap: AbiMap | undefined,\n  rawPayload: string,\n  maxInputs: BN,\n  baseAssetId: string\n): Operation[] {\n  const assetId = receipt.assetId === ZeroBytes32 ? baseAssetId : receipt.assetId;\n  const input = getInputFromAssetId(inputs, assetId, assetId === baseAssetId);\n  if (!input) {\n    return [];\n  }\n\n  const inputAddress = getInputAccountAddress(input);\n  const calls = getContractCalls(contractInput, abiMap, receipt, rawPayload, maxInputs);\n\n  return [\n    {\n      name: OperationName.contractCall,\n      from: {\n        type: AddressType.account,\n        address: inputAddress,\n      },\n      to: {\n        type: AddressType.contract,\n        address: receipt.to,\n      },\n      assetsSent: getAssetsSent(receipt),\n      calls,\n      receipts: [receipt],\n    },\n  ];\n}\n\n/** @hidden */\nexport function getContractCallOperations({\n  inputs,\n  outputs,\n  receipts,\n  abiMap,\n  rawPayload,\n  maxInputs,\n  baseAssetId,\n}: InputOutputParam &\n  ReceiptParam &\n  Pick<GetOperationParams, 'abiMap' | 'maxInputs' | 'baseAssetId'> &\n  RawPayloadParam): Operation[] {\n  const contractCallReceipts = getReceiptsCall(receipts);\n  const contractOutputs = getOutputsContract(outputs);\n\n  return contractOutputs.flatMap((output) => {\n    const contractInput = getInputContractFromIndex(inputs, output.inputIndex);\n    if (!contractInput) {\n      return [];\n    }\n\n    return contractCallReceipts\n      .filter((receipt) => receipt.to === contractInput.contractID)\n      .flatMap((receipt) =>\n        processCallReceipt(\n          receipt,\n          contractInput,\n          inputs,\n          abiMap,\n          rawPayload as string,\n          maxInputs,\n          baseAssetId\n        )\n      );\n  });\n}\n\n/**\n * Extracts a transfer operation from a transaction receipt, determining the addresses and types\n * of the sender and receiver, along with the transferred asset details.\n *\n * @param receipt - The transaction receipt containing transfer information\n * @param contractInputs - Array of contract inputs to determine address types\n * @param changeOutputs - Array of change outputs to resolve zero addresses\n * @returns A transfer operation object with sender, receiver and asset details\n */\nfunction extractTransferOperationFromReceipt(\n  receipt: TransactionResultTransferReceipt | TransactionResultTransferOutReceipt,\n  contractInputs: InputContract[],\n  changeOutputs: OutputChange[]\n) {\n  const { to: toAddress, assetId, amount } = receipt;\n  let { id: fromAddress } = receipt;\n\n  const toType = contractInputs.some((input) => input.contractID === toAddress)\n    ? AddressType.contract\n    : AddressType.account;\n\n  if (ZeroBytes32 === fromAddress) {\n    const change = changeOutputs.find((output) => output.assetId === assetId);\n\n    fromAddress = change?.to || fromAddress;\n  }\n\n  const fromType = contractInputs.some((input) => input.contractID === fromAddress)\n    ? AddressType.contract\n    : AddressType.account;\n\n  return {\n    name: OperationName.transfer,\n    from: {\n      type: fromType,\n      address: fromAddress,\n    },\n    to: {\n      type: toType,\n      address: toAddress,\n    },\n    assetsSent: [\n      {\n        assetId: assetId.toString(),\n        amount,\n      },\n    ],\n    receipts: [receipt],\n  };\n}\n\n/** @hidden */\nexport function getTransferOperations({\n  inputs,\n  outputs,\n  receipts,\n  baseAssetId,\n}: GetTransferOperationsParams): Operation[] {\n  let operations: Operation[] = [];\n\n  const coinOutputs = getOutputsCoin(outputs);\n  const contractInputs = getInputsContract(inputs);\n  const changeOutputs = getOutputsChange(outputs);\n\n  const aggregated = aggregateInputsAmountsByAssetAndOwner(inputs, baseAssetId);\n\n  /**\n   * Extracting transfer operations between wallets, as they do not produce receipts\n   */\n  coinOutputs.forEach(({ amount, assetId, to }) => {\n    const txPayers = aggregated.get(assetId) || new Map<string, BN>();\n    let selectedPayer: string | undefined;\n    let fallbackPayer: string | undefined;\n\n    for (const [address, payedAmount] of txPayers) {\n      if (!fallbackPayer) {\n        fallbackPayer = address; // Set the first payer as a fallback\n      }\n\n      if (payedAmount.gte(amount)) {\n        selectedPayer = address;\n        break; // Stop looping once a suitable payer is found\n      }\n    }\n\n    // If no suitable payer is found, use the fallback payer\n    selectedPayer = selectedPayer || fallbackPayer;\n\n    if (selectedPayer) {\n      operations = addOperation(operations, {\n        name: OperationName.transfer,\n        from: {\n          type: AddressType.account,\n          address: selectedPayer,\n        },\n        to: {\n          type: AddressType.account,\n          address: to,\n        },\n        assetsSent: [{ assetId, amount }],\n      });\n    }\n  });\n\n  /**\n   * `Transfer` receipts are produced from transfers:\n   * - Wallet to Contract\n   * - Contract to Contract\n   */\n  const transferReceipts = getReceiptsByType<TransactionResultTransferReceipt>(\n    receipts,\n    ReceiptType.Transfer\n  );\n\n  /**\n   * `TransferOut` receipts are produced from transfer:\n   * - Contract to Wallet\n   */\n  const transferOutReceipts = getReceiptsByType<TransactionResultTransferOutReceipt>(\n    receipts,\n    ReceiptType.TransferOut\n  );\n\n  [...transferReceipts, ...transferOutReceipts].forEach((receipt) => {\n    const operation = extractTransferOperationFromReceipt(receipt, contractInputs, changeOutputs);\n\n    operations = addOperation(operations, operation);\n  });\n\n  return operations;\n}\n\n/** @hidden */\nexport function getPayProducerOperations(outputs: Output[]): Operation[] {\n  const coinOutputs = getOutputsCoin(outputs);\n  const payProducerOperations = coinOutputs.reduce((prev, output) => {\n    const operations = addOperation(prev, {\n      name: OperationName.payBlockProducer,\n      from: {\n        type: AddressType.account,\n        address: 'Network',\n      },\n      to: {\n        type: AddressType.account,\n        address: output.to.toString(),\n      },\n      assetsSent: [\n        {\n          assetId: output.assetId.toString(),\n          amount: output.amount,\n        },\n      ],\n    });\n\n    return operations;\n  }, [] as Operation[]);\n\n  return payProducerOperations;\n}\n\n/** @hidden */\nexport function getContractCreatedOperations({ inputs, outputs }: InputOutputParam): Operation[] {\n  const contractCreatedOutputs = getOutputsContractCreated(outputs);\n  const input = getInputsCoinAndMessage(inputs)[0];\n  const fromAddress = getInputAccountAddress(input);\n  const contractCreatedOperations = contractCreatedOutputs.reduce((prev, contractCreatedOutput) => {\n    const operations = addOperation(prev, {\n      name: OperationName.contractCreated,\n      from: {\n        type: AddressType.account,\n        address: fromAddress,\n      },\n      to: {\n        type: AddressType.contract,\n        address: contractCreatedOutput?.contractId || '',\n      },\n    });\n\n    return operations;\n  }, [] as Operation[]);\n\n  return contractCreatedOperations;\n}\n\n/** @hidden */\nexport function getOperations({\n  transactionType,\n  inputs,\n  outputs,\n  receipts,\n  abiMap,\n  rawPayload,\n  maxInputs,\n  baseAssetId,\n}: GetOperationParams): Operation[] {\n  if (isTypeCreate(transactionType)) {\n    return [...getContractCreatedOperations({ inputs, outputs })];\n  }\n\n  if (isTypeScript(transactionType)) {\n    return [\n      ...getTransferOperations({ inputs, outputs, receipts, baseAssetId }),\n      ...getContractCallOperations({\n        inputs,\n        outputs,\n        receipts,\n        abiMap,\n        rawPayload,\n        maxInputs,\n        baseAssetId,\n      }),\n      ...getWithdrawFromFuelOperations({ inputs, receipts, baseAssetId }),\n    ];\n  }\n  // at this point we are sure it's a mint transaction\n  return [...getPayProducerOperations(outputs)];\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { BN } from '@fuel-ts/math';\nimport type { Input, InputCoin, InputContract, InputMessage } from '@fuel-ts/transactions';\nimport { InputType } from '@fuel-ts/transactions';\n\n/** @hidden */\nexport function getInputsByTypes<T = Input>(inputs: Input[], types: Array<InputType>) {\n  return inputs.filter((i) => types.includes(i.type)) as T[];\n}\n\n/** @hidden */\nexport function getInputsByType<T = Input>(inputs: Input[], type: InputType) {\n  return inputs.filter((i) => i.type === type) as T[];\n}\n\n/** @hidden */\nexport function getInputsCoin(inputs: Input[]): InputCoin[] {\n  return getInputsByType<InputCoin>(inputs, InputType.Coin);\n}\n\n/** @hidden */\nexport function getInputsMessage(inputs: Input[]) {\n  return getInputsByType<InputMessage>(inputs, InputType.Message);\n}\n\n/** @hidden */\nexport function getInputsCoinAndMessage(inputs: Input[]) {\n  return getInputsByTypes<InputCoin | InputMessage>(inputs, [InputType.Coin, InputType.Message]);\n}\n\n/** @hidden */\nexport function isInputCoin(input: Input): input is InputCoin {\n  return input.type === InputType.Coin;\n}\n\n/** @hidden */\nexport function getInputsContract(inputs: Input[]) {\n  return getInputsByType<InputContract>(inputs, InputType.Contract);\n}\n\n/** @hidden */\nfunction findCoinInput(inputs: Input[], assetId: string): InputCoin | undefined {\n  const coinInputs = getInputsCoin(inputs);\n  return coinInputs.find((i) => i.assetId === assetId);\n}\n\n/** @hidden */\nexport function aggregateInputsAmountsByAssetAndOwner(\n  inputs: Input[],\n  baseAssetId: string\n): Map<string, Map<string, BN>> {\n  const aggregated = new Map<string, Map<string, BN>>();\n\n  getInputsCoinAndMessage(inputs).forEach((input) => {\n    const assetId = isInputCoin(input) ? input.assetId : baseAssetId;\n    const owner = isInputCoin(input) ? input.owner : input.recipient;\n\n    // Ensure that the map for the assetId exists\n    let ownersMap = aggregated.get(assetId);\n    if (!ownersMap) {\n      ownersMap = new Map<string, BN>();\n      aggregated.set(assetId, ownersMap);\n    }\n\n    // Ensure that the map for the owner exists\n    let ownerBalance = ownersMap.get(owner);\n    if (!ownerBalance) {\n      ownerBalance = new BN(0);\n      ownersMap.set(owner, ownerBalance);\n    }\n\n    // Update the balance\n    ownersMap.set(owner, ownerBalance.add(input.amount));\n  });\n\n  return aggregated;\n}\n\n/** @hidden */\nfunction findMessageInput(inputs: Input[]): InputMessage | undefined {\n  return getInputsMessage(inputs)?.[0];\n}\n/** @hidden */\nexport function getInputFromAssetId(\n  inputs: Input[],\n  assetId: string,\n  isBaseAsset = false\n): InputCoin | InputMessage | undefined {\n  const coinInput = findCoinInput(inputs, assetId);\n  if (coinInput) {\n    return coinInput;\n  }\n\n  if (isBaseAsset) {\n    return findMessageInput(inputs);\n  }\n\n  // #TODO: we should throw an error here if we are unable to return a valid input\n  return undefined;\n}\n\n/** @hidden */\nexport function getInputContractFromIndex(\n  inputs: Input[],\n  inputIndex: number\n): InputContract | undefined {\n  if (inputIndex == null) {\n    return undefined;\n  }\n\n  const contractInput = inputs?.[inputIndex];\n\n  if (!contractInput) {\n    return undefined;\n  }\n  if (contractInput.type !== InputType.Contract) {\n    throw new FuelError(\n      ErrorCode.INVALID_TRANSACTION_INPUT,\n      `Contract input should be of type 'contract'.`\n    );\n  }\n\n  return contractInput as InputContract;\n}\n\n/** @hidden */\nexport function getInputAccountAddress(input: Input) {\n  if (input.type === InputType.Coin) {\n    return input.owner.toString();\n  }\n\n  if (input.type === InputType.Message) {\n    return input.recipient.toString();\n  }\n\n  return '';\n}\n", "import type {\n  Output,\n  OutputChange,\n  OutputCoin,\n  OutputContract,\n  OutputContractCreated,\n  OutputVariable,\n} from '@fuel-ts/transactions';\nimport { OutputType } from '@fuel-ts/transactions';\n\n/** @hidden */\nexport function getOutputsByType<T = Output>(outputs: Output[], type: OutputType) {\n  return outputs.filter((o) => o.type === type) as T[];\n}\n\n/** @hidden */\nexport function getOutputsContractCreated(outputs: Output[]) {\n  return getOutputsByType<OutputContractCreated>(outputs, OutputType.ContractCreated);\n}\n\n/** @hidden */\nexport function getOutputsCoin(outputs: Output[]) {\n  return getOutputsByType<OutputCoin>(outputs, OutputType.Coin);\n}\n\n/** @hidden */\nexport function getOutputsChange(outputs: Output[]) {\n  return getOutputsByType<OutputChange>(outputs, OutputType.Change);\n}\n\n/** @hidden */\nexport function getOutputsContract(outputs: Output[]) {\n  return getOutputsByType<OutputContract>(outputs, OutputType.Contract);\n}\n\n/** @hidden */\nexport function getOutputsVariable(outputs: Output[]) {\n  return getOutputsByType<OutputVariable>(outputs, OutputType.Variable);\n}\n", "import type { JsonAbi } from '@fuel-ts/abi-coder';\nimport type { B256Address } from '@fuel-ts/address';\nimport type { BN, BNInput } from '@fuel-ts/math';\nimport type { Input, Output, Transaction, TransactionType } from '@fuel-ts/transactions';\n\nimport type { GqlSuccessStatusFragment } from '../__generated__/operations';\nimport type { TransactionReceiptJson } from '../provider';\nimport type { TransactionResultReceipt } from '../transaction-response';\n\nexport type SubmittedStatus = {\n  type: 'SubmittedStatus';\n  time: string;\n};\n\nexport type SuccessStatus = {\n  type: 'SuccessStatus';\n  time: string;\n  programState?: GqlSuccessStatusFragment['programState'];\n  block?: {\n    id: string;\n  };\n  receipts: TransactionReceiptJson[];\n  totalGas: string;\n  totalFee: string;\n};\n\nexport type FailureStatus = {\n  type: 'FailureStatus';\n  time: string;\n  reason: string;\n  block?: {\n    id: string;\n  };\n  receipts: TransactionReceiptJson[];\n  totalGas: string;\n  totalFee: string;\n};\n\nexport type SqueezedOutStatus = {\n  type: 'SqueezedOutStatus';\n  reason: string;\n};\n\nexport type GraphqlTransactionStatus =\n  | SubmittedStatus\n  | SuccessStatus\n  | FailureStatus\n  | SqueezedOutStatus\n  | null;\n\nexport type GqlTransaction = {\n  id: string;\n  rawPayload: string;\n  status?: GraphqlTransactionStatus;\n};\n\nexport type Reason = FailureStatus['reason'];\nexport type ProgramState = SuccessStatus['programState'];\nexport type Time = SubmittedStatus['time'] | SuccessStatus['time'] | FailureStatus['time'];\nexport type BlockId = string;\n\n/**\n * @hidden\n */\nexport enum TransactionTypeName {\n  Create = 'Create',\n  Mint = 'Mint',\n  Script = 'Script',\n  Upgrade = 'Upgrade',\n  Upload = 'Upload',\n  Blob = 'Blob',\n}\n\n/**\n * @hidden\n */\nexport enum TransactionStatus {\n  submitted = 'submitted',\n  success = 'success',\n  squeezedout = 'squeezedout',\n  failure = 'failure',\n}\n\n/**\n * @hidden\n */\nexport type GqlTransactionStatusesNames =\n  | 'FailureStatus'\n  | 'SubmittedStatus'\n  | 'SuccessStatus'\n  | 'SqueezedOutStatus';\n\n/**\n * @hidden\n */\nexport enum OperationName {\n  payBlockProducer = 'Pay network fee to block producer',\n  contractCreated = 'Contract created',\n  transfer = 'Transfer asset',\n  contractCall = 'Contract call',\n  receive = 'Receive asset',\n  withdrawFromFuel = 'Withdraw from Fuel',\n}\n\nexport type OperationCoin = {\n  assetId: string;\n  amount: BNInput;\n};\n\nexport type OperationFunctionCall = {\n  functionSignature: string;\n  functionName: string;\n  argumentsProvided?: Record<string, unknown>;\n} & Partial<OperationCoin>;\n\nexport type Operation = {\n  name?: OperationName;\n  from?: OperationTransactionAddress;\n  to?: OperationTransactionAddress;\n  assetsSent?: Array<OperationCoin>;\n  calls?: Array<OperationFunctionCall>;\n  receipts?: TransactionResultReceipt[];\n};\n\n/**\n * @hidden\n */\nexport enum AddressType {\n  contract,\n  account,\n}\n\n/**\n * @hidden\n */\nexport enum ChainName {\n  ethereum = 'ethereum',\n  fuel = 'fuel',\n}\n\nexport type OperationTransactionAddress = {\n  address: string;\n  type: AddressType;\n  chain?: ChainName;\n};\n\nexport type InputParam = {\n  inputs: Input[];\n};\n\nexport type OutputParam = {\n  outputs: Output[];\n};\n\nexport type ReceiptParam = {\n  receipts: TransactionResultReceipt[];\n};\n\nexport type AbiMap = Record<string, JsonAbi>;\n\nexport type RawPayloadParam = {\n  rawPayload?: string;\n};\n\nexport type InputOutputParam = InputParam & OutputParam;\n\nexport interface GetTransferOperationsParams extends InputOutputParam {\n  receipts: TransactionResultReceipt[];\n  baseAssetId: string;\n}\n\nexport type GetOperationParams = {\n  transactionType: TransactionType;\n  abiMap?: AbiMap;\n  maxInputs: BN;\n  baseAssetId: string;\n} & InputOutputParam &\n  ReceiptParam &\n  RawPayloadParam;\n\nexport interface MintedAsset {\n  subId: B256Address;\n  contractId: B256Address;\n  assetId: B256Address;\n  amount: BN;\n}\n\nexport type BurnedAsset = MintedAsset;\n\nexport type TransactionSummary<TTransactionType = void> = {\n  id: string;\n  time?: string;\n  operations: Operation[];\n  gasUsed: BN;\n  tip: BN;\n  fee: BN;\n  type: TransactionTypeName;\n  blockId?: BlockId;\n  status?: TransactionStatus;\n  isTypeMint: boolean;\n  isTypeCreate: boolean;\n  isTypeScript: boolean;\n  isTypeUpgrade: boolean;\n  isTypeUpload: boolean;\n  isTypeBlob: boolean;\n  isStatusPending: boolean;\n  isStatusSuccess: boolean;\n  isStatusFailure: boolean;\n  mintedAssets: MintedAsset[];\n  burnedAssets: BurnedAsset[];\n  date?: Date;\n  receipts: TransactionResultReceipt[];\n  transaction: Transaction<TTransactionType>;\n};\n", "import { ReceiptType } from '@fuel-ts/transactions';\n\nimport type { TransactionReceiptJson } from '../provider';\nimport type { TransactionResultReceipt } from '../transaction-response';\nimport { deserializeReceipt } from '../utils/serialization';\n\nimport type { BurnedAsset, MintedAsset } from './types';\n\n/** @deprecated Use `deserializeReceipt` instead. */\nexport const processGqlReceipt = (gqlReceipt: TransactionReceiptJson): TransactionResultReceipt =>\n  deserializeReceipt(gqlReceipt);\n\nexport const extractMintedAssetsFromReceipts = (\n  receipts: Array<TransactionResultReceipt>\n): MintedAsset[] => {\n  const mintedAssets: MintedAsset[] = [];\n\n  receipts.forEach((receipt) => {\n    if (receipt.type === ReceiptType.Mint) {\n      mintedAssets.push({\n        subId: receipt.subId,\n        contractId: receipt.contractId,\n        assetId: receipt.assetId,\n        amount: receipt.val,\n      });\n    }\n  });\n\n  return mintedAssets;\n};\n\nexport const extractBurnedAssetsFromReceipts = (\n  receipts: Array<TransactionResultReceipt>\n): BurnedAsset[] => {\n  const burnedAssets: BurnedAsset[] = [];\n\n  receipts.forEach((receipt) => {\n    if (receipt.type === ReceiptType.Burn) {\n      burnedAssets.push({\n        subId: receipt.subId,\n        contractId: receipt.contractId,\n        assetId: receipt.assetId,\n        amount: receipt.val,\n      });\n    }\n  });\n\n  return burnedAssets;\n};\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\n\nimport { TransactionStatus } from './types';\nimport type {\n  BlockId,\n  GqlTransactionStatusesNames,\n  GraphqlTransactionStatus,\n  Time,\n  TransactionSummary,\n} from './types';\n\n/** @hidden */\nexport const getTransactionStatusName = (gqlStatus: GqlTransactionStatusesNames) => {\n  switch (gqlStatus) {\n    case 'FailureStatus':\n      return TransactionStatus.failure;\n    case 'SuccessStatus':\n      return TransactionStatus.success;\n    case 'SubmittedStatus':\n      return TransactionStatus.submitted;\n    case 'SqueezedOutStatus':\n      return TransactionStatus.squeezedout;\n    default:\n      throw new FuelError(\n        ErrorCode.INVALID_TRANSACTION_STATUS,\n        `Invalid transaction status: ${gqlStatus}.`\n      );\n  }\n};\n\ntype IProcessGraphqlStatusResponse = Pick<\n  TransactionSummary,\n  'time' | 'blockId' | 'isStatusPending' | 'isStatusSuccess' | 'isStatusFailure' | 'status'\n> & { totalFee?: BN; totalGas?: BN };\n\n/** @hidden */\nexport const processGraphqlStatus = (gqlTransactionStatus?: GraphqlTransactionStatus) => {\n  let time: Time | undefined;\n  let blockId: BlockId | undefined;\n  let status: TransactionStatus | undefined;\n  let totalFee: BN | undefined;\n  let totalGas: BN | undefined;\n\n  let isStatusFailure = false;\n  let isStatusSuccess = false;\n  let isStatusPending = false;\n\n  if (gqlTransactionStatus?.type) {\n    status = getTransactionStatusName(gqlTransactionStatus.type);\n\n    switch (gqlTransactionStatus.type) {\n      case 'SuccessStatus':\n        time = gqlTransactionStatus.time;\n        blockId = gqlTransactionStatus.block?.id;\n        isStatusSuccess = true;\n        totalFee = bn(gqlTransactionStatus.totalFee);\n        totalGas = bn(gqlTransactionStatus.totalGas);\n        break;\n\n      case 'FailureStatus':\n        time = gqlTransactionStatus.time;\n        blockId = gqlTransactionStatus.block?.id;\n        isStatusFailure = true;\n        totalFee = bn(gqlTransactionStatus.totalFee);\n        totalGas = bn(gqlTransactionStatus.totalGas);\n        break;\n\n      case 'SubmittedStatus':\n        time = gqlTransactionStatus.time;\n        isStatusPending = true;\n        break;\n      default:\n    }\n  }\n\n  const processedGraphqlStatus: IProcessGraphqlStatusResponse = {\n    time,\n    blockId,\n    status,\n    totalFee,\n    totalGas,\n    isStatusFailure,\n    isStatusSuccess,\n    isStatusPending,\n  };\n\n  return processedGraphqlStatus;\n};\n\n/**\n * Returns the total fee from the transaction status.\n *\n * @param status - The transaction status.\n * @returns The total fee from the transaction status or undefined.\n */\nexport const getTotalFeeFromStatus = (status?: GraphqlTransactionStatus): BN | undefined =>\n  status && 'totalFee' in status ? bn(status.totalFee) : undefined;\n", "import type { JsonAbi } from '@fuel-ts/abi-coder';\nimport { Interface, BigNumberCoder } from '@fuel-ts/abi-coder';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ReceiptType } from '@fuel-ts/transactions';\n\nimport type {\n  TransactionResultCallReceipt,\n  TransactionResultReceipt,\n} from './transaction-response';\n\nexport interface DecodedLogs<T = unknown> {\n  logs: T[];\n  groupedLogs: Record<string, T[]>;\n}\n\n/**\n * @hidden\n *\n * This helper decodes logs from transaction receipts.\n * It loops through all receipts and decodes two types of logs:\n * - ReceiptType.LogData\n * - ReceiptType.Log\n *\n * The \"mainAbi\" parameter represents the ABI of the main contract used to create the transaction\n * or the ABI from a script used within a \"BaseInvocationScope\" context.\n * The \"externalAbis\" parameter is a record of contract ABIs that are also part of the transaction.\n * These ABIs were added using `contract.addContracts` or through a multi-call with `contract.multiCall`.\n *\n * @param receipts - The array of transaction result receipts.\n * @param mainAbi - The ABI of the script or main contract.\n * @param externalAbis - The record of external contract ABIs.\n * @returns An array of decoded logs from Sway projects.\n */\nexport function getAllDecodedLogs<T = unknown>(opts: {\n  receipts: Array<TransactionResultReceipt>;\n  mainAbi: JsonAbi;\n  externalAbis?: Record<string, JsonAbi>;\n}): DecodedLogs<T> {\n  const { receipts, mainAbi, externalAbis = {} } = opts;\n\n  let mainContract = '';\n  if (mainAbi.programType === 'contract') {\n    const firstCallReceipt = receipts.find(\n      (r) => r.type === ReceiptType.Call && r.id === ZeroBytes32\n    ) as TransactionResultCallReceipt;\n\n    mainContract = firstCallReceipt.to;\n  }\n\n  return receipts.reduce(\n    ({ logs, groupedLogs }, receipt) => {\n      if (receipt.type === ReceiptType.LogData || receipt.type === ReceiptType.Log) {\n        const isLogFromMainAbi = receipt.id === ZeroBytes32 || mainContract === receipt.id;\n        const isDecodable = isLogFromMainAbi || externalAbis[receipt.id];\n\n        if (isDecodable) {\n          const interfaceToUse = isLogFromMainAbi\n            ? new Interface(mainAbi)\n            : new Interface(externalAbis[receipt.id]);\n\n          const data =\n            receipt.type === ReceiptType.Log\n              ? new BigNumberCoder('u64').encode(receipt.ra)\n              : receipt.data;\n\n          const [decodedLog] = interfaceToUse.decodeLog(data, receipt.rb.toString());\n          logs.push(decodedLog);\n          // eslint-disable-next-line no-param-reassign\n          groupedLogs[receipt.id] = [...(groupedLogs[receipt.id] || []), decodedLog];\n        }\n      }\n\n      return { logs, groupedLogs };\n    },\n    { logs: [], groupedLogs: {} } as DecodedLogs<T>\n  );\n}\n", "import type { JsonAbi } from '@fuel-ts/abi-coder';\nimport { Interface, BigNumberCoder } from '@fuel-ts/abi-coder';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ReceiptType } from '@fuel-ts/transactions';\n\nimport type {\n  TransactionResultCallReceipt,\n  TransactionResultReceipt,\n} from './transaction-response';\n\n/**\n * @hidden\n *\n * This helper decodes logs from transaction receipts.\n * It loops through all receipts and decodes two types of logs:\n * - ReceiptType.LogData\n * - ReceiptType.Log\n *\n * The \"mainAbi\" parameter represents the ABI of the main contract used to create the transaction\n * or the ABI from a script used within a \"BaseInvocationScope\" context.\n * The \"externalAbis\" parameter is a record of contract ABIs that are also part of the transaction.\n * These ABIs were added using `contract.addContracts` or through a multi-call with `contract.multiCall`.\n *\n * @param receipts - The array of transaction result receipts.\n * @param mainAbi - The ABI of the script or main contract.\n * @param externalAbis - The record of external contract ABIs.\n * @returns An array of decoded logs from Sway projects.\n *\n * @deprecated Use `getAllDecodedLogs` instead.\n */\nexport function getDecodedLogs<T = unknown>(\n  receipts: Array<TransactionResultReceipt>,\n  mainAbi: JsonAbi,\n  externalAbis: Record<string, JsonAbi> = {}\n): T[] {\n  let mainContract = '';\n  if (mainAbi.programType === 'contract') {\n    const firstCallReceipt = receipts.find(\n      (r) => r.type === ReceiptType.Call && r.id === ZeroBytes32\n    ) as TransactionResultCallReceipt;\n\n    mainContract = firstCallReceipt.to;\n  }\n\n  return receipts.reduce((logs: T[], receipt) => {\n    if (receipt.type === ReceiptType.LogData || receipt.type === ReceiptType.Log) {\n      const isLogFromMainAbi = receipt.id === ZeroBytes32 || mainContract === receipt.id;\n      const isDecodable = isLogFromMainAbi || externalAbis[receipt.id];\n\n      if (isDecodable) {\n        const interfaceToUse = isLogFromMainAbi\n          ? new Interface(mainAbi)\n          : new Interface(externalAbis[receipt.id]);\n\n        const data =\n          receipt.type === ReceiptType.Log\n            ? new BigNumberCoder('u64').encode(receipt.ra)\n            : receipt.data;\n\n        const [decodedLog] = interfaceToUse.decodeLog(data, receipt.rb.toString());\n        logs.push(decodedLog);\n      }\n    }\n\n    return logs;\n  }, []);\n}\n", "import { sleep } from '@fuel-ts/utils';\n\nimport type { ProviderOptions } from '../provider';\n\ntype Backoff = 'linear' | 'exponential' | 'fixed';\n\n/**\n * Retry options scheme\n */\nexport type RetryOptions = {\n  /**\n   * Amount of attempts to retry before failing the call.\n   */\n  maxRetries: number;\n  /**\n   * Backoff strategy to use when retrying. Default is exponential.\n   */\n  backoff?: Backoff;\n  /**\n   * Starting delay for backoff strategy. Default is 150ms.\n   */\n  baseDelay?: number;\n};\n\n/**\n * Calculate the delay for the next retry attempt\n * @param options - Retry options configuration\n * @param retryAttemptNum - 1-based, tells which retry attempt is this\n * @returns Next wait delay\n */\nexport function getWaitDelay(options: RetryOptions, retryAttemptNum: number) {\n  const duration = options.baseDelay ?? 150;\n\n  switch (options.backoff) {\n    case 'linear':\n      return duration * retryAttemptNum;\n    case 'fixed':\n      return duration;\n    case 'exponential':\n    default:\n      return 2 ** (retryAttemptNum - 1) * duration;\n  }\n}\n\n/**\n * Returns a wrapped fetch function that will auto-execute itself in case of errors, until it succeeds\n * @param fetchFn - Function to be auto-retried\n * @param options - Retry options configuration\n * @param retryAttemptNum - ZERO=first call, ONE=first retry, TWO=second retry, etc.\n * @returns Whatever is the output of the `fetchFn` function\n */\nexport function autoRetryFetch(\n  fetchFn: NonNullable<ProviderOptions['fetch']>,\n  options?: RetryOptions,\n  retryAttemptNum: number = 0\n): NonNullable<ProviderOptions['fetch']> {\n  if (options === undefined) {\n    return fetchFn;\n  }\n\n  return async (...args) => {\n    try {\n      return await fetchFn(...args);\n    } catch (_error: unknown) {\n      const error = _error as Error & { cause?: { code: string } };\n\n      /**\n       * So far, we are auto-retrying only for `ECONNREFUSED` error.\n       * TODO: Investigate if we should consider more errors.\n       */\n      if (error.cause?.code !== 'ECONNREFUSED') {\n        throw error;\n      }\n      const retryNum = retryAttemptNum + 1;\n\n      if (retryNum > options.maxRetries) {\n        throw error;\n      }\n\n      const delay = getWaitDelay(options, retryNum);\n\n      await sleep(delay);\n\n      return autoRetryFetch(fetchFn, options, retryNum)(...args);\n    }\n  };\n}\n", "type ExcludeResourcesString = {\n  utxos: string[];\n  messages: string[];\n};\n\nexport const adjustResourcesToExclude = (params: {\n  userInput: ExcludeResourcesString;\n  cached: ExcludeResourcesString;\n  maxInputs: number;\n}) => {\n  const { userInput, cached, maxInputs } = params;\n\n  const final = { ...userInput };\n\n  let total = final.utxos.length + final.messages.length;\n  if (total >= maxInputs) {\n    return final;\n  }\n\n  final.utxos = [...final.utxos, ...cached.utxos.slice(0, maxInputs - total)];\n\n  total = final.utxos.length + final.messages.length;\n\n  if (total < maxInputs) {\n    final.messages = [...final.messages, ...cached.messages.slice(0, maxInputs - total)];\n  }\n\n  return final;\n};\n", "import { FuelError, ErrorCode } from '@fuel-ts/errors';\n\nimport type { CursorPaginationArgs } from '../provider';\n\n/**\n * @hidden\n */\nexport const validatePaginationArgs = (params: {\n  inputArgs?: CursorPaginationArgs;\n  paginationLimit: number;\n}): CursorPaginationArgs => {\n  const { paginationLimit, inputArgs = {} } = params;\n  const { first, last, after, before } = inputArgs;\n\n  if (after && before) {\n    throw new FuelError(\n      ErrorCode.INVALID_INPUT_PARAMETERS,\n      'Pagination arguments \"after\" and \"before\" cannot be used together'\n    );\n  }\n\n  if ((first || 0) > paginationLimit || (last || 0) > paginationLimit) {\n    throw new FuelError(\n      ErrorCode.INVALID_INPUT_PARAMETERS,\n      `Pagination limit for this query cannot exceed ${paginationLimit} items`\n    );\n  }\n\n  if (first && before) {\n    throw new FuelError(\n      ErrorCode.INVALID_INPUT_PARAMETERS,\n      'The use of pagination argument \"first\" with \"before\" is not supported'\n    );\n  }\n\n  if (last && after) {\n    throw new FuelError(\n      ErrorCode.INVALID_INPUT_PARAMETERS,\n      'The use of pagination argument \"last\" with \"after\" is not supported'\n    );\n  }\n\n  // If neither first nor last is provided, set a default first value\n  if (!first && !last) {\n    inputArgs.first = paginationLimit;\n  }\n\n  return inputArgs;\n};\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport { TransactionCoder } from '@fuel-ts/transactions';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport type { GqlGetTransactionsByOwnerQueryVariables } from '../__generated__/operations';\nimport { TRANSACTIONS_PAGE_SIZE_LIMIT } from '../provider';\nimport type Provider from '../provider';\nimport type { TransactionReceiptJson, PageInfo } from '../provider';\nimport type { TransactionRequest } from '../transaction-request';\nimport type { TransactionResult } from '../transaction-response';\nimport { deserializeReceipt } from '../utils/serialization';\nimport { validatePaginationArgs } from '../utils/validate-pagination-args';\n\nimport { assembleTransactionSummary } from './assemble-transaction-summary';\nimport { getTotalFeeFromStatus } from './status';\nimport type { AbiMap, TransactionSummary } from './types';\n/** @hidden */\nexport interface GetTransactionSummaryParams {\n  id: string;\n  provider: Provider;\n  abiMap?: AbiMap;\n}\n\nexport async function getTransactionSummary<TTransactionType = void>(\n  params: GetTransactionSummaryParams\n): Promise<TransactionResult> {\n  const { id, provider, abiMap } = params;\n\n  const { transaction: gqlTransaction } = await provider.operations.getTransactionWithReceipts({\n    transactionId: id,\n  });\n\n  if (!gqlTransaction) {\n    throw new FuelError(\n      ErrorCode.TRANSACTION_NOT_FOUND,\n      `Transaction not found for given id: ${id}.`\n    );\n  }\n\n  const [decodedTransaction] = new TransactionCoder().decode(\n    arrayify(gqlTransaction.rawPayload),\n    0\n  );\n\n  let txReceipts: TransactionReceiptJson[] = [];\n\n  if (gqlTransaction?.status && 'receipts' in gqlTransaction.status) {\n    txReceipts = gqlTransaction.status.receipts;\n  }\n\n  const receipts = txReceipts.map(deserializeReceipt);\n\n  const {\n    consensusParameters: {\n      feeParameters: { gasPerByte, gasPriceFactor },\n      txParameters: { maxInputs, maxGasPerTx },\n      gasCosts,\n    },\n  } = await provider.getChain();\n\n  // If we have the total fee, we do not need to refetch the gas price\n  const totalFee = getTotalFeeFromStatus(gqlTransaction.status);\n  const gasPrice = totalFee ? bn(0) : await provider.getLatestGasPrice();\n\n  const baseAssetId = await provider.getBaseAssetId();\n\n  const transactionInfo = assembleTransactionSummary<TTransactionType>({\n    id: gqlTransaction.id,\n    receipts,\n    transaction: decodedTransaction,\n    transactionBytes: arrayify(gqlTransaction.rawPayload),\n    gqlTransactionStatus: gqlTransaction.status,\n    gasPerByte: bn(gasPerByte),\n    gasPriceFactor: bn(gasPriceFactor),\n    abiMap,\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId,\n  });\n\n  return {\n    ...transactionInfo,\n  };\n}\n\nexport interface GetTransactionSummaryFromRequestParams {\n  transactionRequest: TransactionRequest;\n  provider: Provider;\n  abiMap?: AbiMap;\n}\n\n/** @hidden */\nexport async function getTransactionSummaryFromRequest<TTransactionType = void>(\n  params: GetTransactionSummaryFromRequestParams\n): Promise<TransactionSummary<TTransactionType>> {\n  const { provider, transactionRequest, abiMap } = params;\n\n  const { receipts } = await provider.dryRun(transactionRequest);\n\n  const { gasPerByte, gasPriceFactor, gasCosts, maxGasPerTx } = await provider.getGasConfig();\n  const maxInputs = (await provider.getChain()).consensusParameters.txParameters.maxInputs;\n\n  const transaction = transactionRequest.toTransaction();\n  const transactionBytes = transactionRequest.toTransactionBytes();\n\n  const gasPrice = await provider.getLatestGasPrice();\n  const baseAssetId = await provider.getBaseAssetId();\n\n  const transactionSummary = assembleTransactionSummary<TTransactionType>({\n    id: transactionRequest.getTransactionId(await provider.getChainId()),\n    receipts,\n    transaction,\n    transactionBytes,\n    abiMap,\n    gasPerByte,\n    gasPriceFactor,\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId,\n  });\n\n  return transactionSummary;\n}\n\nexport interface GetTransactionsSummariesParams {\n  provider: Provider;\n  filters: GqlGetTransactionsByOwnerQueryVariables;\n  abiMap?: AbiMap;\n}\n\nexport interface GetTransactionsSummariesReturns {\n  transactions: TransactionResult[];\n  pageInfo: PageInfo;\n}\n\n/**\n * Gets transaction summaries for a given owner/address.\n *\n * @param params - The filters to apply to the query.\n * @returns The transaction summaries.\n */\nexport async function getTransactionsSummaries(\n  params: GetTransactionsSummariesParams\n): Promise<GetTransactionsSummariesReturns> {\n  const { filters, provider, abiMap } = params;\n\n  const { owner, ...inputArgs } = filters;\n\n  const validPaginationParams = validatePaginationArgs({\n    inputArgs,\n    paginationLimit: TRANSACTIONS_PAGE_SIZE_LIMIT,\n  });\n\n  const { transactionsByOwner } = await provider.operations.getTransactionsByOwner({\n    ...validPaginationParams,\n    owner,\n  });\n\n  const { edges, pageInfo } = transactionsByOwner;\n\n  const {\n    consensusParameters: {\n      feeParameters: { gasPerByte, gasPriceFactor },\n      txParameters: { maxInputs, maxGasPerTx },\n      gasCosts,\n    },\n  } = await provider.getChain();\n\n  const gasPrice = await provider.getLatestGasPrice();\n  const baseAssetId = await provider.getBaseAssetId();\n\n  const transactions = edges.map((edge) => {\n    const { node: gqlTransaction } = edge;\n\n    const { id, rawPayload, status } = gqlTransaction;\n\n    const [decodedTransaction] = new TransactionCoder().decode(arrayify(rawPayload), 0);\n\n    let txReceipts: TransactionReceiptJson[] = [];\n\n    if (gqlTransaction?.status && 'receipts' in gqlTransaction.status) {\n      txReceipts = gqlTransaction.status.receipts;\n    }\n\n    const receipts = txReceipts.map(deserializeReceipt);\n\n    const transactionSummary = assembleTransactionSummary({\n      id,\n      receipts,\n      transaction: decodedTransaction,\n      transactionBytes: arrayify(rawPayload),\n      gqlTransactionStatus: status,\n      abiMap,\n      gasPerByte,\n      gasPriceFactor,\n      maxInputs,\n      gasCosts,\n      maxGasPerTx,\n      gasPrice,\n      baseAssetId,\n    });\n\n    const output: TransactionResult = {\n      ...transactionSummary,\n    };\n\n    return output;\n  });\n\n  return {\n    transactions,\n    pageInfo,\n  };\n}\n", "import { bn } from '@fuel-ts/math';\nimport { TransactionCoder } from '@fuel-ts/transactions';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport type { Provider } from '../..';\nimport { deserializeReceipt, type TransactionSummaryJson } from '../utils/serialization';\n\nimport { assembleTransactionSummary } from './assemble-transaction-summary';\n\nexport const assembleTransactionSummaryFromJson = async (opts: {\n  provider: Provider;\n  transactionSummary: TransactionSummaryJson;\n}) => {\n  const { provider, transactionSummary } = opts;\n  const { id, transactionBytes, gasPrice, receipts } = transactionSummary;\n\n  const {\n    consensusParameters: {\n      baseAssetId,\n      txParameters: { maxInputs, maxGasPerTx },\n      feeParameters: { gasPriceFactor, gasPerByte },\n      gasCosts,\n    },\n  } = await provider.getChain();\n\n  const deserializedTransactionBytes = arrayify(transactionBytes);\n  const [transaction] = new TransactionCoder().decode(deserializedTransactionBytes, 0);\n\n  return assembleTransactionSummary({\n    id,\n    transaction,\n    transactionBytes: deserializedTransactionBytes,\n    receipts: receipts.map(deserializeReceipt),\n    gasPrice: bn(gasPrice),\n\n    // From chain\n    baseAssetId,\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPerByte,\n    gasPriceFactor,\n  });\n};\n", "import type { BN } from '@fuel-ts/math';\n\nimport type { CoinQuantity } from '../coin-quantity';\n\nexport const mergeQuantities = (...coinQuantities: CoinQuantity[][]): CoinQuantity[] => {\n  const resultMap: { [key: string]: BN } = {};\n\n  function addToMap({ amount, assetId }: CoinQuantity) {\n    if (resultMap[assetId]) {\n      resultMap[assetId] = resultMap[assetId].add(amount);\n    } else {\n      resultMap[assetId] = amount;\n    }\n  }\n\n  coinQuantities.forEach((arr) => arr.forEach(addToMap));\n\n  // Convert the resultMap back to an array\n  return Object.entries(resultMap).map(([assetId, amount]) => ({ assetId, amount }));\n};\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { Address } from '@fuel-ts/address';\n\nexport abstract class AbstractAccount {\n  abstract address: Address;\n  abstract provider: unknown;\n  abstract getResourcesToSpend(quantities: any[], options?: any): any;\n  abstract sendTransaction(transactionRequest: any, options?: any): any;\n  abstract simulateTransaction(transactionRequest: any, options?: any): any;\n  abstract getTransactionCost(transactionRequest: any, options?: any): Promise<any>;\n  abstract fund(transactionRequest: any, txCost: any): Promise<any>;\n}\n", "import { ASSET_ID_LEN, BigNumberCoder, CONTRACT_ID_LEN, WORD_SIZE } from '@fuel-ts/abi-coder';\nimport { Address } from '@fuel-ts/address';\nimport type { BN } from '@fuel-ts/math';\nimport { arrayify, concat } from '@fuel-ts/utils';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport * as asm from '@fuels/vm-asm';\n\ninterface AssembleTransferToContractParams {\n  contractId: string;\n  assetId: BytesLike;\n  amount: BN;\n}\n\nexport const formatTransferToContractScriptData = (\n  transferParams: Array<AssembleTransferToContractParams>\n) => {\n  const numberCoder = new BigNumberCoder('u64');\n  return transferParams.reduce((acc, transferParam) => {\n    const { assetId, amount, contractId } = transferParam;\n    const encoded = numberCoder.encode(amount);\n    const scriptData = concat([new Address(contractId).toBytes(), encoded, arrayify(assetId)]);\n    return concat([acc, scriptData]);\n  }, new Uint8Array());\n};\n\nexport const assembleTransferToContractScript = async (\n  transferParams: Array<AssembleTransferToContractParams>\n) => {\n  const scriptData = formatTransferToContractScriptData(transferParams);\n\n  // @ts-expect-error method reference missing in DTS\n  await asm.initWasm();\n\n  let script = new Uint8Array();\n\n  transferParams.forEach((_, i) => {\n    const offset = (CONTRACT_ID_LEN + WORD_SIZE + ASSET_ID_LEN) * i;\n\n    script = concat([\n      script,\n      // Load ScriptData into register 0x10.\n      asm.gtf(0x10, 0x0, asm.GTFArgs.ScriptData).to_bytes(),\n      // Add the offset to 0x10 so it will point to the current contract ID, store in 0x11.\n      asm.addi(0x11, 0x10, offset).to_bytes(),\n      // Add CONTRACT_ID_LEN to 0x11 to point to the amount in the ScriptData, store in 0x12.\n      asm.addi(0x12, 0x11, CONTRACT_ID_LEN).to_bytes(),\n      // Load word to the amount at 0x12 into register 0x13.\n      asm.lw(0x13, 0x12, 0x0).to_bytes(),\n      // Add WORD_SIZE to 0x12 to point to the asset ID in the ScriptData, store in 0x14.\n      asm.addi(0x14, 0x12, WORD_SIZE).to_bytes(),\n      // Perform the transfer using contract ID in 0x11, amount in 0x13, and asset ID in 0x14.\n      asm.tr(0x11, 0x13, 0x14).to_bytes(),\n    ]);\n  });\n\n  // Add return instruction at the end of the script\n  script = concat([script, asm.ret(0x1).to_bytes()]);\n\n  return { script, scriptData };\n};\n", "import type { HashableMessage } from '@fuel-ts/hasher';\nimport { hashMessage } from '@fuel-ts/hasher';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify } from '@fuel-ts/utils';\n\nimport { Account } from '../account';\nimport { transactionRequestify, validateTransactionForAssetBurn } from '../providers';\nimport type {\n  TransactionRequestLike,\n  CallResult,\n  Provider,\n  ProviderSendTxParams,\n  EstimateTransactionParams,\n  TransactionRequest,\n  TransactionResponse,\n} from '../providers';\nimport { Signer } from '../signer';\n\nimport { encryptKeystoreWallet } from './keystore-wallet';\n\n/**\n * `BaseWalletUnlocked` provides the base functionalities for an unlocked wallet.\n */\nexport class BaseWalletUnlocked extends Account {\n  /**\n   * Default HDWallet path.\n   */\n  static defaultPath = \"m/44'/1179993420'/0'/0/0\";\n\n  /**\n   * A function that returns the wallet's signer.\n   */\n  signer: () => Signer;\n\n  /**\n   * Creates a new BaseWalletUnlocked instance.\n   *\n   * @param privateKey - The private key of the wallet.\n   * @param provider - A Provider instance (optional).\n   */\n  constructor(privateKey: BytesLike, provider?: Provider) {\n    const signer = new Signer(privateKey);\n    super(signer.address, provider);\n    this.signer = () => signer;\n  }\n\n  /**\n   * Gets the private key of the wallet.\n   *\n   * @returns The private key of the wallet.\n   */\n  get privateKey(): string {\n    return this.signer().privateKey;\n  }\n\n  /**\n   * Gets the public key of the wallet.\n   *\n   * @returns\n   */\n  get publicKey(): string {\n    return this.signer().publicKey;\n  }\n\n  /**\n   * Signs a message with the wallet's private key.\n   *\n   * @param message - The message to sign.\n   * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.\n   */\n  override async signMessage(message: HashableMessage): Promise<string> {\n    const signedMessage = await this.signer().sign(hashMessage(message));\n    return hexlify(signedMessage);\n  }\n\n  /**\n   * Signs a transaction with the wallet's private key.\n   *\n   * @param transactionRequestLike - The transaction request to sign.\n   * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.\n   */\n  override async signTransaction(transactionRequestLike: TransactionRequestLike): Promise<string> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    const chainId = await this.provider.getChainId();\n    const hashedTransaction = transactionRequest.getTransactionId(chainId);\n    const signature = await this.signer().sign(hashedTransaction);\n    return hexlify(signature);\n  }\n\n  /**\n   * Populates a transaction with the witnesses signature.\n   *\n   * @param transactionRequestLike - The transaction request to populate.\n   * @returns The populated transaction request.\n   */\n  async populateTransactionWitnessesSignature<T extends TransactionRequest>(\n    transactionRequestLike: TransactionRequestLike\n  ) {\n    const transactionRequest = transactionRequestify(transactionRequestLike) as T;\n    const signedTransaction = await this.signTransaction(transactionRequest);\n\n    transactionRequest.updateWitnessByOwner(this.address, signedTransaction);\n\n    return transactionRequest;\n  }\n\n  /**\n   * Populates the witness signature for a transaction and sends it to the network using `provider.sendTransaction`.\n   *\n   * @param transactionRequestLike - The transaction request to send.\n   * @param estimateTxDependencies - Whether to estimate the transaction dependencies.\n   * @returns A promise that resolves to the TransactionResponse object.\n   */\n  override async sendTransaction(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = false, enableAssetBurn }: ProviderSendTxParams = {}\n  ): Promise<TransactionResponse> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    validateTransactionForAssetBurn(\n      await this.provider.getBaseAssetId(),\n      transactionRequest,\n      enableAssetBurn\n    );\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.sendTransaction(\n      await this.populateTransactionWitnessesSignature(transactionRequest),\n      { estimateTxDependencies: false, enableAssetBurn }\n    );\n  }\n\n  /**\n   * Populates the witness signature for a transaction and sends a call to the network using `provider.dryRun`.\n   *\n   * @param transactionRequestLike - The transaction request to simulate.\n   * @returns A promise that resolves to the CallResult object.\n   */\n  override async simulateTransaction(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = true }: EstimateTransactionParams = {}\n  ): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.dryRun(\n      await this.populateTransactionWitnessesSignature(transactionRequest),\n      {\n        utxoValidation: true,\n        estimateTxDependencies: false,\n      }\n    );\n  }\n\n  /**\n   * Encrypts an unlocked wallet with a password.\n   *\n   * @param password - the password to encrypt the wallet with.\n   * @returns - the encrypted wallet.\n   */\n  async encrypt(password: string): Promise<string> {\n    return encryptKeystoreWallet(this.privateKey, this.address, password);\n  }\n}\n", "import { Address } from '@fuel-ts/address';\nimport { randomBytes } from '@fuel-ts/crypto';\nimport { hash } from '@fuel-ts/hasher';\nimport { toBytes } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify, concat, arrayify } from '@fuel-ts/utils';\nimport { secp256k1 } from '@noble/curves/secp256k1';\n\nexport class Signer {\n  readonly address: Address;\n\n  readonly publicKey: string;\n\n  readonly compressedPublicKey: string;\n\n  readonly privateKey: string;\n\n  /**\n   * Create a Signer instance from a given private key\n   *\n   * @param privateKey - The private key to use for signing\n   * @returns A new Signer instance\n   */\n  constructor(privateKey: BytesLike) {\n    // A lot of common tools do not prefix private keys with a 0x\n    if (typeof privateKey === 'string') {\n      if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n        // eslint-disable-next-line no-param-reassign\n        privateKey = `0x${privateKey}`;\n      }\n    }\n    // Convert to byte array, normalize private key input allowing it to be BytesLike\n    // like remove 0x prefix and accept array of bytes\n    const privateKeyBytes = toBytes(privateKey, 32);\n\n    this.privateKey = hexlify(privateKeyBytes);\n\n    // Slice(1) removes the encoding scheme from the public key\n    this.publicKey = hexlify(secp256k1.getPublicKey(privateKeyBytes, false).slice(1));\n    this.compressedPublicKey = hexlify(secp256k1.getPublicKey(privateKeyBytes, true));\n    this.address = new Address(this.publicKey);\n  }\n\n  /**\n   * Sign data using the Signer instance\n   *\n   * Signature is a 64 byte array of the concatenated r and s values with the compressed recoveryParam byte.\n   * @ignore\n   * [Read more](FuelLabs/fuel-specs/specs/protocol/cryptographic_primitives.md#public-key-cryptography)\n   *\n   * @param data - The data to be sign\n   * @returns hashed signature\n   */\n  sign(data: BytesLike) {\n    const signature = secp256k1.sign(arrayify(data), arrayify(this.privateKey));\n\n    const r = toBytes(`0x${signature.r.toString(16)}`, 32);\n    const s = toBytes(`0x${signature.s.toString(16)}`, 32);\n\n    // add recoveryParam to first s byte\n    s[0] |= (signature.recovery || 0) << 7;\n\n    return hexlify(concat([r, s]));\n  }\n\n  /**\n   * Add point on the current elliptic curve\n   *\n   * @param point - Point to add on the curve\n   * @returns compressed point on the curve\n   */\n  addPoint(point: BytesLike) {\n    const p0 = secp256k1.ProjectivePoint.fromHex(arrayify(this.compressedPublicKey));\n    const p1 = secp256k1.ProjectivePoint.fromHex(arrayify(point));\n    const result = p0.add(p1);\n    return `0x${result.toHex(true)}`;\n  }\n\n  /**\n   * Recover the public key from a signature performed with [`sign`](#sign).\n   *\n   * @param data - Data\n   * @param signature - hashed signature\n   * @returns public key from signature from the\n   */\n  static recoverPublicKey(data: BytesLike, signature: BytesLike): string {\n    const signedMessageBytes = arrayify(signature);\n    const r = signedMessageBytes.slice(0, 32);\n    const s = signedMessageBytes.slice(32, 64);\n    const recoveryParam = (s[0] & 0x80) >> 7;\n\n    // remove recoveryParam from s first byte\n    s[0] &= 0x7f;\n\n    const sig = new secp256k1.Signature(BigInt(hexlify(r)), BigInt(hexlify(s))).addRecoveryBit(\n      recoveryParam\n    );\n\n    const publicKey = sig.recoverPublicKey(arrayify(data)).toRawBytes(false).slice(1);\n    return hexlify(publicKey);\n  }\n\n  /**\n   * Recover the address from a signature performed with [`sign`](#sign).\n   *\n   * @param data - Data\n   * @param signature - Signature\n   * @returns Address from signature\n   */\n  static recoverAddress(data: BytesLike, signature: BytesLike): Address {\n    return new Address(Signer.recoverPublicKey(data, signature));\n  }\n\n  /**\n   * Generate a random privateKey\n   *\n   * @param entropy - Adds extra entropy to generate the privateKey\n   * @returns random 32-byte hashed\n   */\n  static generatePrivateKey(entropy?: BytesLike) {\n    return entropy ? hash(concat([randomBytes(32), arrayify(entropy)])) : randomBytes(32);\n  }\n\n  /**\n   * Extended publicKey from a compact publicKey\n   *\n   * @param publicKey - Compact publicKey\n   * @returns extended publicKey\n   */\n  static extendPublicKey(publicKey: BytesLike) {\n    const point = secp256k1.ProjectivePoint.fromHex(arrayify(publicKey));\n    return hexlify(point.toRawBytes(false).slice(1));\n  }\n}\n", "import type { AddressInput } from '@fuel-ts/address';\nimport { Address } from '@fuel-ts/address';\nimport {\n  bufferFromString,\n  keccak256,\n  randomBytes,\n  scrypt,\n  stringFromBuffer,\n  decryptJsonWalletData,\n  encryptJsonWalletData,\n  randomUUID,\n} from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { hexlify } from '@fuel-ts/utils';\n\nexport type KeystoreWallet = {\n  id: string;\n  version: number;\n  address: string;\n  crypto: KeystoreCrypto;\n};\n\ntype KeystoreCrypto = {\n  cipher: 'aes-128-ctr';\n  cipherparams: { iv: string };\n  ciphertext: string;\n  kdf: 'scrypt';\n  mac: string;\n  kdfparams: KDFParams;\n};\n\ntype KDFParams = {\n  dklen: number;\n  n: number;\n  p: number;\n  r: number;\n  salt: string;\n};\n\n// Same values used in the Rust SDK\nexport const DEFAULT_KDF_PARAMS_LOG_N = 13;\nexport const DEFAULT_KDF_PARAMS_R = 8;\nexport const DEFAULT_KDF_PARAMS_P = 1;\nexport const DEFAULT_KEY_SIZE = 32;\nexport const DEFAULT_IV_SIZE = 16;\n\n/**\n * Removes the '0x' prefix from a hexadecimal string.\n * If the prefix does not exist, it returns the original string.\n */\nexport const removeHexPrefix = (hexString: string) => {\n  if (/^0x/.test(hexString)) {\n    return hexString.slice(2);\n  }\n\n  return hexString;\n};\n\nexport async function encryptKeystoreWallet(\n  privateKey: string,\n  address: AddressInput,\n  password: string\n): Promise<string> {\n  // Convert the hexlified private key string to a Buffer.\n  const privateKeyBuffer = bufferFromString(removeHexPrefix(privateKey), 'hex');\n  const ownerAddress = new Address(address);\n  // Generate a random salt.\n  const salt = randomBytes(DEFAULT_KEY_SIZE);\n\n  const key = scrypt({\n    password: bufferFromString(password),\n    salt,\n    dklen: DEFAULT_KEY_SIZE,\n    n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,\n    r: DEFAULT_KDF_PARAMS_R,\n    p: DEFAULT_KDF_PARAMS_P,\n  });\n\n  // Encrypt the private key using AES-128-CTR.\n  const iv = randomBytes(DEFAULT_IV_SIZE);\n\n  const ciphertext = await encryptJsonWalletData(privateKeyBuffer, key, iv);\n\n  const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertext]);\n\n  // Calculate the MAC.\n  const macHashUint8Array = keccak256(data);\n\n  const mac = stringFromBuffer(macHashUint8Array, 'hex');\n\n  // Construct keystore.\n  const keystore: KeystoreWallet = {\n    id: randomUUID(),\n    version: 3,\n    address: removeHexPrefix(ownerAddress.toHexString()),\n    crypto: {\n      cipher: 'aes-128-ctr',\n      mac,\n      cipherparams: { iv: stringFromBuffer(iv, 'hex') },\n      ciphertext: stringFromBuffer(ciphertext, 'hex'),\n      kdf: 'scrypt',\n      kdfparams: {\n        dklen: DEFAULT_KEY_SIZE,\n        n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,\n        p: DEFAULT_KDF_PARAMS_P,\n        r: DEFAULT_KDF_PARAMS_R,\n        salt: stringFromBuffer(salt, 'hex'),\n      },\n    },\n  };\n\n  return JSON.stringify(keystore);\n}\n\nexport async function decryptKeystoreWallet(jsonWallet: string, password: string): Promise<string> {\n  const keystoreWallet = JSON.parse(jsonWallet) as KeystoreWallet;\n\n  // Extract the parameters needed for decryption.\n  const {\n    crypto: {\n      mac,\n      ciphertext,\n      cipherparams: { iv },\n      kdfparams: { dklen, n, r, p, salt },\n    },\n  } = keystoreWallet;\n\n  const ciphertextBuffer = bufferFromString(ciphertext, 'hex');\n  const ivBuffer = bufferFromString(iv, 'hex');\n  const saltBuffer = bufferFromString(salt, 'hex');\n\n  const passwordBuffer = bufferFromString(password);\n\n  const key = scrypt({\n    password: passwordBuffer,\n    salt: saltBuffer,\n    n,\n    p,\n    r,\n    dklen,\n  });\n\n  // Verify the MAC. It should be the Keccak-256 hash of the concatenation of the second half of the derived key and the ciphertext.\n  const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertextBuffer]);\n\n  const macHashUint8Array = keccak256(data);\n\n  const macHash = stringFromBuffer(macHashUint8Array, 'hex');\n\n  if (mac !== macHash) {\n    throw new FuelError(\n      ErrorCode.INVALID_PASSWORD,\n      'Failed to decrypt the keystore wallet, the provided password is incorrect.'\n    );\n  }\n\n  // Decrypt the private key.\n  const buffer = await decryptJsonWalletData(ciphertextBuffer, key, ivBuffer);\n\n  const privateKey = hexlify(buffer);\n\n  return privateKey;\n}\n", "import { computeHmac, ripemd160 } from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { sha256 } from '@fuel-ts/hasher';\nimport { bn, toBytes, toHex } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify, concat, dataSlice, encodeBase58, decodeBase58 } from '@fuel-ts/utils';\n\nimport { Mnemonic } from '../mnemonic';\nimport { Signer } from '../signer';\n\n// \"Bitcoin seed\"\nconst HARDENED_INDEX = 0x80000000;\n\n// 4 byte: version bytes (mainnet: 0x0488B21E public, 0x0488ADE4 private; testnet: 0x043587CF public, 0x04358394 private)\nconst MainnetPRV = hexlify('0x0488ade4');\nconst MainnetPUB = hexlify('0x0488b21e');\nconst TestnetPRV = hexlify('0x04358394');\nconst TestnetPUB = hexlify('0x043587cf');\n\nfunction base58check(data: Uint8Array): string {\n  return encodeBase58(concat([data, dataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nfunction getExtendedKeyPrefix(isPublic: boolean = false, testnet: boolean = false) {\n  if (isPublic) {\n    return testnet ? TestnetPUB : MainnetPUB;\n  }\n  return testnet ? TestnetPRV : MainnetPRV;\n}\n\nfunction isPublicExtendedKey(extendedKey: Uint8Array) {\n  return [MainnetPUB, TestnetPUB].includes(hexlify(extendedKey.slice(0, 4)));\n}\n\nfunction isValidExtendedKey(extendedKey: Uint8Array) {\n  return [MainnetPRV, TestnetPRV, MainnetPUB, TestnetPUB].includes(\n    hexlify(extendedKey.slice(0, 4))\n  );\n}\n\nfunction parsePath(path: string, depth: number = 0) {\n  const components = path.split('/');\n\n  if (components.length === 0 || (components[0] === 'm' && depth !== 0)) {\n    throw new FuelError(ErrorCode.HD_WALLET_ERROR, `invalid path - ${path}`);\n  }\n\n  if (components[0] === 'm') {\n    components.shift();\n  }\n\n  return components.map((p) =>\n    ~p.indexOf(`'`) ? parseInt(p, 10) + HARDENED_INDEX : parseInt(p, 10)\n  );\n}\n\ntype HDWalletConfig = {\n  privateKey?: BytesLike;\n  publicKey?: BytesLike;\n  chainCode: BytesLike;\n  depth?: number;\n  index?: number;\n  parentFingerprint?: string;\n};\n\nclass HDWallet {\n  depth: number = 0;\n  index: number = 0;\n  fingerprint: string = hexlify('0x00000000');\n  parentFingerprint: string = hexlify('0x00000000');\n  privateKey?: string;\n  publicKey: string;\n  chainCode: BytesLike;\n\n  /**\n   * HDWallet is a implementation of the BIP-0044 and BIP-0032, Multi-Account Hierarchy for Deterministic Wallets\n   *\n   * @param config - Wallet configurations\n   */\n  constructor(config: HDWalletConfig) {\n    // TODO: set some asserts here\n\n    if (config.privateKey) {\n      const signer = new Signer(config.privateKey);\n      this.publicKey = hexlify(signer.compressedPublicKey);\n      this.privateKey = hexlify(config.privateKey);\n    } else {\n      if (!config.publicKey) {\n        throw new FuelError(\n          ErrorCode.HD_WALLET_ERROR,\n          'Both public and private Key cannot be missing. At least one should be provided.'\n        );\n      }\n      this.publicKey = hexlify(config.publicKey);\n    }\n\n    this.parentFingerprint = config.parentFingerprint || this.parentFingerprint;\n    this.fingerprint = dataSlice(ripemd160(sha256(this.publicKey)), 0, 4);\n    this.depth = config.depth || this.depth;\n    this.index = config.index || this.index;\n    this.chainCode = config.chainCode;\n  }\n\n  get extendedKey() {\n    return this.toExtendedKey();\n  }\n\n  /**\n   * Derive the current HDWallet instance navigating only on the index.\n   * `Ex.: m/44'/0 -> Ex.: m/44'/1 -> m/44'/2`. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   *\n   * @param index - Index of the child HDWallet.\n   * @returns A new instance of HDWallet on the derived index\n   */\n  deriveIndex(index: number) {\n    const privateKey = this.privateKey && arrayify(this.privateKey);\n    const publicKey = arrayify(this.publicKey);\n    const chainCode = arrayify(this.chainCode);\n    const data = new Uint8Array(37);\n\n    if (index & HARDENED_INDEX) {\n      if (!privateKey) {\n        throw new FuelError(\n          ErrorCode.HD_WALLET_ERROR,\n          'Cannot derive a hardened index without a private Key.'\n        );\n      }\n\n      // 33 bytes: 0x00 || private key\n      data.set(privateKey, 1);\n    } else {\n      data.set(arrayify(this.publicKey));\n    }\n\n    // child number: ser32(i)\n    data.set(toBytes(index, 4), 33);\n\n    const bytes = arrayify(computeHmac('sha512', chainCode, data));\n    const IL = bytes.slice(0, 32);\n    const IR = bytes.slice(32);\n\n    if (privateKey) {\n      const N = '0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141';\n      // Child key ki is parse256(IL) + kpar (mod n).\n      const ki = bn(IL).add(privateKey).mod(N).toBytes(32);\n\n      return new HDWallet({\n        privateKey: ki,\n        chainCode: IR,\n        index,\n        depth: this.depth + 1,\n        parentFingerprint: this.fingerprint,\n      });\n    }\n\n    const signer = new Signer(hexlify(IL));\n    const Ki = signer.addPoint(publicKey);\n\n    return new HDWallet({\n      publicKey: Ki,\n      chainCode: IR,\n      index,\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint,\n    });\n  }\n\n  /**\n   * Derive the current HDWallet instance to the path. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   *\n   * @param path - The string representation of the child HDWallet. `Ex.: m/44'/0'/0'/0/0`\n   * @returns A new instance of HDWallet on the derived path\n   */\n  derivePath(path: string) {\n    const paths = parsePath(path, this.depth);\n\n    return paths.reduce((hdwallet, index) => hdwallet.deriveIndex(index), <HDWallet>this);\n  }\n\n  /**\n   * Get the extendKey as defined on BIP-32 from the provided seed\n   *\n   * @param isPublic - enable to export public extendedKey, it not required when HDWallet didn't have the privateKey.\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns BIP-32 extended private key\n   */\n  toExtendedKey(isPublic: boolean = false, testnet: boolean = false): string {\n    if (this.depth >= 256) {\n      throw new FuelError(\n        ErrorCode.HD_WALLET_ERROR,\n        `Exceeded max depth of 255. Current depth: ${this.depth}.`\n      );\n    }\n    const prefix = getExtendedKeyPrefix(this.privateKey == null || isPublic, testnet);\n    const depth = hexlify(Uint8Array.from([this.depth]));\n    const parentFingerprint = this.parentFingerprint;\n    const index = toHex(this.index, 4);\n    // last 32 bites from the key\n    const chainCode = this.chainCode;\n    // first 32 bites from the key\n    const key =\n      this.privateKey != null && !isPublic ? concat(['0x00', this.privateKey]) : this.publicKey;\n    const extendedKey = arrayify(concat([prefix, depth, parentFingerprint, index, chainCode, key]));\n\n    return base58check(extendedKey);\n  }\n\n  /**\n   * Create HDWallet instance from seed\n   *\n   * @param seed - Seed\n   * @returns A new instance of HDWallet\n   */\n  static fromSeed(seed: string) {\n    const masterKey = Mnemonic.masterKeysFromSeed(seed);\n\n    return new HDWallet({\n      chainCode: arrayify(masterKey.slice(32)),\n      privateKey: arrayify(masterKey.slice(0, 32)),\n    });\n  }\n\n  static fromExtendedKey(extendedKey: string) {\n    const decoded = hexlify(toBytes(decodeBase58(extendedKey)));\n    const bytes = arrayify(decoded);\n    const validChecksum = base58check(bytes.slice(0, 78)) === extendedKey;\n\n    if (bytes.length !== 82 || !isValidExtendedKey(bytes)) {\n      throw new FuelError(ErrorCode.HD_WALLET_ERROR, 'Provided key is not a valid extended key.');\n    }\n    if (!validChecksum) {\n      throw new FuelError(ErrorCode.HD_WALLET_ERROR, 'Provided key has an invalid checksum.');\n    }\n\n    const depth = bytes[4];\n    const parentFingerprint = hexlify(bytes.slice(5, 9));\n    const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n    const chainCode = hexlify(bytes.slice(13, 45));\n    const key = bytes.slice(45, 78);\n\n    if ((depth === 0 && parentFingerprint !== '0x00000000') || (depth === 0 && index !== 0)) {\n      throw new FuelError(\n        ErrorCode.HD_WALLET_ERROR,\n        'Inconsistency detected: Depth is zero but fingerprint/index is non-zero.'\n      );\n    }\n\n    if (isPublicExtendedKey(bytes)) {\n      if (key[0] !== 3) {\n        throw new FuelError(ErrorCode.HD_WALLET_ERROR, 'Invalid public extended key.');\n      }\n\n      return new HDWallet({\n        publicKey: key,\n        chainCode,\n        index,\n        depth,\n        parentFingerprint,\n      });\n    }\n\n    if (key[0] !== 0) {\n      throw new FuelError(ErrorCode.HD_WALLET_ERROR, 'Invalid private extended key.');\n    }\n\n    return new HDWallet({\n      privateKey: key.slice(1),\n      chainCode,\n      index,\n      depth,\n      parentFingerprint,\n    });\n  }\n}\n\nexport default HDWallet;\n", "import { randomBytes, pbkdf2, computeHmac } from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { sha256 } from '@fuel-ts/hasher';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify, concat, dataSlice, encodeBase58, toUtf8Bytes } from '@fuel-ts/utils';\n\nimport { english } from '../wordlists';\n\nimport type { MnemonicPhrase } from './utils';\nimport { entropyToMnemonicIndices, getWords, getPhrase, mnemonicWordsToEntropy } from './utils';\n\n//\n// Constants\n//\n// \"Bitcoin seed\"\nconst MasterSecret = toUtf8Bytes('Bitcoin seed');\n// 4 byte: version bytes (mainnet: 0x0488B21E public, 0x0488ADE4 private; testnet: 0x043587CF public, 0x04358394 private)\nconst MainnetPRV = '0x0488ade4';\nconst TestnetPRV = '0x04358394';\nexport const MNEMONIC_SIZES = [12, 15, 18, 21, 24];\n\nfunction assertWordList(wordlist: Array<string>) {\n  if (wordlist.length !== 2048) {\n    throw new FuelError(\n      ErrorCode.INVALID_WORD_LIST,\n      `Expected word list length of 2048, but got ${wordlist.length}.`\n    );\n  }\n}\n\nfunction assertEntropy(entropy: BytesLike) {\n  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {\n    throw new FuelError(\n      ErrorCode.INVALID_ENTROPY,\n      `Entropy should be between 16 and 32 bytes and a multiple of 4, but got ${entropy.length} bytes.`\n    );\n  }\n}\n\nfunction assertMnemonic(words: Array<string>) {\n  if (!MNEMONIC_SIZES.includes(words.length)) {\n    const errorMsg = `Invalid mnemonic size. Expected one of [${MNEMONIC_SIZES.join(\n      ', '\n    )}] words, but got ${words.length}.`;\n\n    throw new FuelError(ErrorCode.INVALID_MNEMONIC, errorMsg);\n  }\n}\n\nclass Mnemonic {\n  wordlist: Array<string>;\n\n  /**\n   *\n   * @param wordlist - Provide a wordlist with the list of words used to generate the mnemonic phrase. The default value is the English list.\n   * @returns Mnemonic instance\n   */\n  constructor(wordlist: Array<string> = english) {\n    this.wordlist = wordlist;\n\n    assertWordList(this.wordlist);\n  }\n\n  /**\n   *\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @returns Entropy hash\n   */\n  mnemonicToEntropy(phrase: MnemonicPhrase) {\n    return Mnemonic.mnemonicToEntropy(phrase, this.wordlist);\n  }\n\n  /**\n   *\n   * @param entropy - Entropy source to the mnemonic phrase.\n   * @returns Mnemonic phrase\n   */\n  entropyToMnemonic(entropy: BytesLike) {\n    return Mnemonic.entropyToMnemonic(entropy, this.wordlist);\n  }\n\n  /**\n   *\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param wordlist - Provide a wordlist with the list of words used to generate the mnemonic phrase. The default value is the English list.\n   * @returns Mnemonic phrase\n   */\n  static mnemonicToEntropy(phrase: MnemonicPhrase, wordlist: Array<string> = english): string {\n    const words = getWords(phrase);\n\n    assertMnemonic(words);\n\n    return hexlify(mnemonicWordsToEntropy(words, wordlist));\n  }\n\n  /**\n   * @param entropy - Entropy source to the mnemonic phrase.\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static entropyToMnemonic(entropy: BytesLike, wordlist: Array<string> = english): string {\n    const entropyBytes = arrayify(entropy);\n\n    assertWordList(wordlist);\n    assertEntropy(entropyBytes);\n\n    return entropyToMnemonicIndices(entropyBytes)\n      .map((i) => wordlist[i])\n      .join(' ');\n  }\n\n  /**\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param passphrase - Add additional security to protect the generated seed with a memorized passphrase. `Note: if the owner forgot the passphrase, all wallets and accounts derive from the phrase will be lost.`\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static mnemonicToSeed(phrase: MnemonicPhrase, passphrase: BytesLike = '') {\n    assertMnemonic(getWords(phrase));\n\n    const phraseBytes = toUtf8Bytes(getPhrase(phrase));\n    const salt = toUtf8Bytes(`mnemonic${passphrase}`);\n\n    return pbkdf2(phraseBytes, salt, 2048, 64, 'sha512');\n  }\n\n  /**\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param passphrase - Add additional security to protect the generated seed with a memorized passphrase. `Note: if the owner forgot the passphrase, all wallets and accounts derive from the phrase will be lost.`\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static mnemonicToMasterKeys(phrase: MnemonicPhrase, passphrase: BytesLike = '') {\n    const seed = Mnemonic.mnemonicToSeed(phrase, passphrase);\n    return Mnemonic.masterKeysFromSeed(seed);\n  }\n\n  /**\n   * Validates if given mnemonic is  valid\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @returns true if phrase is a valid mnemonic\n   */\n  static isMnemonicValid(phrase: string) {\n    const words = getWords(phrase);\n\n    let i: number = 0;\n\n    try {\n      assertMnemonic(words);\n    } catch {\n      return false;\n    }\n\n    while (i < words.length) {\n      if (Mnemonic.binarySearch(words[i]) === false) {\n        return false;\n      }\n      i += 1;\n    }\n\n    return true;\n  }\n\n  static binarySearch(target: string): boolean {\n    const words = english;\n    let left: number = 0;\n    let right: number = words.length - 1;\n\n    while (left <= right) {\n      const mid: number = Math.floor((left + right) / 2);\n\n      if (words[mid] === target) {\n        return true;\n      }\n      if (target < words[mid]) {\n        right = mid - 1;\n      } else {\n        left = mid + 1;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param seed - BIP39 seed\n   * @param testnet - Inform if should use testnet or mainnet prefix, the default value is true (`mainnet`).\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static masterKeysFromSeed(seed: string): Uint8Array {\n    const seedArray = arrayify(seed);\n\n    if (seedArray.length < 16 || seedArray.length > 64) {\n      throw new FuelError(\n        ErrorCode.INVALID_SEED,\n        `Seed length should be between 16 and 64 bytes, but received ${seedArray.length} bytes.`\n      );\n    }\n\n    return arrayify(computeHmac('sha512', MasterSecret, seedArray));\n  }\n\n  /**\n   * Get the extendKey as defined on BIP-32 from the provided seed\n   *\n   * @param seed - BIP39 seed\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns BIP-32 extended private key\n   */\n  static seedToExtendedKey(seed: string, testnet: boolean = false): string {\n    const masterKey = Mnemonic.masterKeysFromSeed(seed);\n    const prefix = arrayify(testnet ? TestnetPRV : MainnetPRV);\n    const depth = '0x00';\n    const fingerprint = '0x00000000';\n    const index = '0x00000000';\n    // last 32 bites from the key\n    const chainCode = masterKey.slice(32);\n    // first 32 bites from the key\n    const privateKey = masterKey.slice(0, 32);\n    const extendedKey = concat([\n      prefix,\n      depth,\n      fingerprint,\n      index,\n      chainCode,\n      concat(['0x00', privateKey]),\n    ]);\n    const checksum = dataSlice(sha256(sha256(extendedKey)), 0, 4);\n\n    return encodeBase58(concat([extendedKey, checksum]));\n  }\n\n  /**\n   *  Create a new mnemonic using a randomly generated number as entropy.\n   *  As defined in BIP39, the entropy must be a multiple of 32 bits, and its size must be between 128 and 256 bits.\n   *  Therefore, the possible values for `strength` are 128, 160, 192, 224, and 256.\n   *  If not provided, the default entropy length will be set to 256 bits.\n   *  The return is a list of words that encodes the generated entropy.\n   *\n   *\n   * @param size - Number of bytes used as an entropy\n   * @param extraEntropy - Optional extra entropy to increase randomness\n   * @returns A randomly generated mnemonic\n   */\n  static generate(size: number = 32, extraEntropy: BytesLike = '') {\n    const entropy = extraEntropy\n      ? sha256(concat([randomBytes(size), arrayify(extraEntropy)]))\n      : randomBytes(size);\n    return Mnemonic.entropyToMnemonic(entropy);\n  }\n}\n\nexport default Mnemonic;\n", "export const english = [\n  'abandon',\n  'ability',\n  'able',\n  'about',\n  'above',\n  'absent',\n  'absorb',\n  'abstract',\n  'absurd',\n  'abuse',\n  'access',\n  'accident',\n  'account',\n  'accuse',\n  'achieve',\n  'acid',\n  'acoustic',\n  'acquire',\n  'across',\n  'act',\n  'action',\n  'actor',\n  'actress',\n  'actual',\n  'adapt',\n  'add',\n  'addict',\n  'address',\n  'adjust',\n  'admit',\n  'adult',\n  'advance',\n  'advice',\n  'aerobic',\n  'affair',\n  'afford',\n  'afraid',\n  'again',\n  'age',\n  'agent',\n  'agree',\n  'ahead',\n  'aim',\n  'air',\n  'airport',\n  'aisle',\n  'alarm',\n  'album',\n  'alcohol',\n  'alert',\n  'alien',\n  'all',\n  'alley',\n  'allow',\n  'almost',\n  'alone',\n  'alpha',\n  'already',\n  'also',\n  'alter',\n  'always',\n  'amateur',\n  'amazing',\n  'among',\n  'amount',\n  'amused',\n  'analyst',\n  'anchor',\n  'ancient',\n  'anger',\n  'angle',\n  'angry',\n  'animal',\n  'ankle',\n  'announce',\n  'annual',\n  'another',\n  'answer',\n  'antenna',\n  'antique',\n  'anxiety',\n  'any',\n  'apart',\n  'apology',\n  'appear',\n  'apple',\n  'approve',\n  'april',\n  'arch',\n  'arctic',\n  'area',\n  'arena',\n  'argue',\n  'arm',\n  'armed',\n  'armor',\n  'army',\n  'around',\n  'arrange',\n  'arrest',\n  'arrive',\n  'arrow',\n  'art',\n  'artefact',\n  'artist',\n  'artwork',\n  'ask',\n  'aspect',\n  'assault',\n  'asset',\n  'assist',\n  'assume',\n  'asthma',\n  'athlete',\n  'atom',\n  'attack',\n  'attend',\n  'attitude',\n  'attract',\n  'auction',\n  'audit',\n  'august',\n  'aunt',\n  'author',\n  'auto',\n  'autumn',\n  'average',\n  'avocado',\n  'avoid',\n  'awake',\n  'aware',\n  'away',\n  'awesome',\n  'awful',\n  'awkward',\n  'axis',\n  'baby',\n  'bachelor',\n  'bacon',\n  'badge',\n  'bag',\n  'balance',\n  'balcony',\n  'ball',\n  'bamboo',\n  'banana',\n  'banner',\n  'bar',\n  'barely',\n  'bargain',\n  'barrel',\n  'base',\n  'basic',\n  'basket',\n  'battle',\n  'beach',\n  'bean',\n  'beauty',\n  'because',\n  'become',\n  'beef',\n  'before',\n  'begin',\n  'behave',\n  'behind',\n  'believe',\n  'below',\n  'belt',\n  'bench',\n  'benefit',\n  'best',\n  'betray',\n  'better',\n  'between',\n  'beyond',\n  'bicycle',\n  'bid',\n  'bike',\n  'bind',\n  'biology',\n  'bird',\n  'birth',\n  'bitter',\n  'black',\n  'blade',\n  'blame',\n  'blanket',\n  'blast',\n  'bleak',\n  'bless',\n  'blind',\n  'blood',\n  'blossom',\n  'blouse',\n  'blue',\n  'blur',\n  'blush',\n  'board',\n  'boat',\n  'body',\n  'boil',\n  'bomb',\n  'bone',\n  'bonus',\n  'book',\n  'boost',\n  'border',\n  'boring',\n  'borrow',\n  'boss',\n  'bottom',\n  'bounce',\n  'box',\n  'boy',\n  'bracket',\n  'brain',\n  'brand',\n  'brass',\n  'brave',\n  'bread',\n  'breeze',\n  'brick',\n  'bridge',\n  'brief',\n  'bright',\n  'bring',\n  'brisk',\n  'broccoli',\n  'broken',\n  'bronze',\n  'broom',\n  'brother',\n  'brown',\n  'brush',\n  'bubble',\n  'buddy',\n  'budget',\n  'buffalo',\n  'build',\n  'bulb',\n  'bulk',\n  'bullet',\n  'bundle',\n  'bunker',\n  'burden',\n  'burger',\n  'burst',\n  'bus',\n  'business',\n  'busy',\n  'butter',\n  'buyer',\n  'buzz',\n  'cabbage',\n  'cabin',\n  'cable',\n  'cactus',\n  'cage',\n  'cake',\n  'call',\n  'calm',\n  'camera',\n  'camp',\n  'can',\n  'canal',\n  'cancel',\n  'candy',\n  'cannon',\n  'canoe',\n  'canvas',\n  'canyon',\n  'capable',\n  'capital',\n  'captain',\n  'car',\n  'carbon',\n  'card',\n  'cargo',\n  'carpet',\n  'carry',\n  'cart',\n  'case',\n  'cash',\n  'casino',\n  'castle',\n  'casual',\n  'cat',\n  'catalog',\n  'catch',\n  'category',\n  'cattle',\n  'caught',\n  'cause',\n  'caution',\n  'cave',\n  'ceiling',\n  'celery',\n  'cement',\n  'census',\n  'century',\n  'cereal',\n  'certain',\n  'chair',\n  'chalk',\n  'champion',\n  'change',\n  'chaos',\n  'chapter',\n  'charge',\n  'chase',\n  'chat',\n  'cheap',\n  'check',\n  'cheese',\n  'chef',\n  'cherry',\n  'chest',\n  'chicken',\n  'chief',\n  'child',\n  'chimney',\n  'choice',\n  'choose',\n  'chronic',\n  'chuckle',\n  'chunk',\n  'churn',\n  'cigar',\n  'cinnamon',\n  'circle',\n  'citizen',\n  'city',\n  'civil',\n  'claim',\n  'clap',\n  'clarify',\n  'claw',\n  'clay',\n  'clean',\n  'clerk',\n  'clever',\n  'click',\n  'client',\n  'cliff',\n  'climb',\n  'clinic',\n  'clip',\n  'clock',\n  'clog',\n  'close',\n  'cloth',\n  'cloud',\n  'clown',\n  'club',\n  'clump',\n  'cluster',\n  'clutch',\n  'coach',\n  'coast',\n  'coconut',\n  'code',\n  'coffee',\n  'coil',\n  'coin',\n  'collect',\n  'color',\n  'column',\n  'combine',\n  'come',\n  'comfort',\n  'comic',\n  'common',\n  'company',\n  'concert',\n  'conduct',\n  'confirm',\n  'congress',\n  'connect',\n  'consider',\n  'control',\n  'convince',\n  'cook',\n  'cool',\n  'copper',\n  'copy',\n  'coral',\n  'core',\n  'corn',\n  'correct',\n  'cost',\n  'cotton',\n  'couch',\n  'country',\n  'couple',\n  'course',\n  'cousin',\n  'cover',\n  'coyote',\n  'crack',\n  'cradle',\n  'craft',\n  'cram',\n  'crane',\n  'crash',\n  'crater',\n  'crawl',\n  'crazy',\n  'cream',\n  'credit',\n  'creek',\n  'crew',\n  'cricket',\n  'crime',\n  'crisp',\n  'critic',\n  'crop',\n  'cross',\n  'crouch',\n  'crowd',\n  'crucial',\n  'cruel',\n  'cruise',\n  'crumble',\n  'crunch',\n  'crush',\n  'cry',\n  'crystal',\n  'cube',\n  'culture',\n  'cup',\n  'cupboard',\n  'curious',\n  'current',\n  'curtain',\n  'curve',\n  'cushion',\n  'custom',\n  'cute',\n  'cycle',\n  'dad',\n  'damage',\n  'damp',\n  'dance',\n  'danger',\n  'daring',\n  'dash',\n  'daughter',\n  'dawn',\n  'day',\n  'deal',\n  'debate',\n  'debris',\n  'decade',\n  'december',\n  'decide',\n  'decline',\n  'decorate',\n  'decrease',\n  'deer',\n  'defense',\n  'define',\n  'defy',\n  'degree',\n  'delay',\n  'deliver',\n  'demand',\n  'demise',\n  'denial',\n  'dentist',\n  'deny',\n  'depart',\n  'depend',\n  'deposit',\n  'depth',\n  'deputy',\n  'derive',\n  'describe',\n  'desert',\n  'design',\n  'desk',\n  'despair',\n  'destroy',\n  'detail',\n  'detect',\n  'develop',\n  'device',\n  'devote',\n  'diagram',\n  'dial',\n  'diamond',\n  'diary',\n  'dice',\n  'diesel',\n  'diet',\n  'differ',\n  'digital',\n  'dignity',\n  'dilemma',\n  'dinner',\n  'dinosaur',\n  'direct',\n  'dirt',\n  'disagree',\n  'discover',\n  'disease',\n  'dish',\n  'dismiss',\n  'disorder',\n  'display',\n  'distance',\n  'divert',\n  'divide',\n  'divorce',\n  'dizzy',\n  'doctor',\n  'document',\n  'dog',\n  'doll',\n  'dolphin',\n  'domain',\n  'donate',\n  'donkey',\n  'donor',\n  'door',\n  'dose',\n  'double',\n  'dove',\n  'draft',\n  'dragon',\n  'drama',\n  'drastic',\n  'draw',\n  'dream',\n  'dress',\n  'drift',\n  'drill',\n  'drink',\n  'drip',\n  'drive',\n  'drop',\n  'drum',\n  'dry',\n  'duck',\n  'dumb',\n  'dune',\n  'during',\n  'dust',\n  'dutch',\n  'duty',\n  'dwarf',\n  'dynamic',\n  'eager',\n  'eagle',\n  'early',\n  'earn',\n  'earth',\n  'easily',\n  'east',\n  'easy',\n  'echo',\n  'ecology',\n  'economy',\n  'edge',\n  'edit',\n  'educate',\n  'effort',\n  'egg',\n  'eight',\n  'either',\n  'elbow',\n  'elder',\n  'electric',\n  'elegant',\n  'element',\n  'elephant',\n  'elevator',\n  'elite',\n  'else',\n  'embark',\n  'embody',\n  'embrace',\n  'emerge',\n  'emotion',\n  'employ',\n  'empower',\n  'empty',\n  'enable',\n  'enact',\n  'end',\n  'endless',\n  'endorse',\n  'enemy',\n  'energy',\n  'enforce',\n  'engage',\n  'engine',\n  'enhance',\n  'enjoy',\n  'enlist',\n  'enough',\n  'enrich',\n  'enroll',\n  'ensure',\n  'enter',\n  'entire',\n  'entry',\n  'envelope',\n  'episode',\n  'equal',\n  'equip',\n  'era',\n  'erase',\n  'erode',\n  'erosion',\n  'error',\n  'erupt',\n  'escape',\n  'essay',\n  'essence',\n  'estate',\n  'eternal',\n  'ethics',\n  'evidence',\n  'evil',\n  'evoke',\n  'evolve',\n  'exact',\n  'example',\n  'excess',\n  'exchange',\n  'excite',\n  'exclude',\n  'excuse',\n  'execute',\n  'exercise',\n  'exhaust',\n  'exhibit',\n  'exile',\n  'exist',\n  'exit',\n  'exotic',\n  'expand',\n  'expect',\n  'expire',\n  'explain',\n  'expose',\n  'express',\n  'extend',\n  'extra',\n  'eye',\n  'eyebrow',\n  'fabric',\n  'face',\n  'faculty',\n  'fade',\n  'faint',\n  'faith',\n  'fall',\n  'false',\n  'fame',\n  'family',\n  'famous',\n  'fan',\n  'fancy',\n  'fantasy',\n  'farm',\n  'fashion',\n  'fat',\n  'fatal',\n  'father',\n  'fatigue',\n  'fault',\n  'favorite',\n  'feature',\n  'february',\n  'federal',\n  'fee',\n  'feed',\n  'feel',\n  'female',\n  'fence',\n  'festival',\n  'fetch',\n  'fever',\n  'few',\n  'fiber',\n  'fiction',\n  'field',\n  'figure',\n  'file',\n  'film',\n  'filter',\n  'final',\n  'find',\n  'fine',\n  'finger',\n  'finish',\n  'fire',\n  'firm',\n  'first',\n  'fiscal',\n  'fish',\n  'fit',\n  'fitness',\n  'fix',\n  'flag',\n  'flame',\n  'flash',\n  'flat',\n  'flavor',\n  'flee',\n  'flight',\n  'flip',\n  'float',\n  'flock',\n  'floor',\n  'flower',\n  'fluid',\n  'flush',\n  'fly',\n  'foam',\n  'focus',\n  'fog',\n  'foil',\n  'fold',\n  'follow',\n  'food',\n  'foot',\n  'force',\n  'forest',\n  'forget',\n  'fork',\n  'fortune',\n  'forum',\n  'forward',\n  'fossil',\n  'foster',\n  'found',\n  'fox',\n  'fragile',\n  'frame',\n  'frequent',\n  'fresh',\n  'friend',\n  'fringe',\n  'frog',\n  'front',\n  'frost',\n  'frown',\n  'frozen',\n  'fruit',\n  'fuel',\n  'fun',\n  'funny',\n  'furnace',\n  'fury',\n  'future',\n  'gadget',\n  'gain',\n  'galaxy',\n  'gallery',\n  'game',\n  'gap',\n  'garage',\n  'garbage',\n  'garden',\n  'garlic',\n  'garment',\n  'gas',\n  'gasp',\n  'gate',\n  'gather',\n  'gauge',\n  'gaze',\n  'general',\n  'genius',\n  'genre',\n  'gentle',\n  'genuine',\n  'gesture',\n  'ghost',\n  'giant',\n  'gift',\n  'giggle',\n  'ginger',\n  'giraffe',\n  'girl',\n  'give',\n  'glad',\n  'glance',\n  'glare',\n  'glass',\n  'glide',\n  'glimpse',\n  'globe',\n  'gloom',\n  'glory',\n  'glove',\n  'glow',\n  'glue',\n  'goat',\n  'goddess',\n  'gold',\n  'good',\n  'goose',\n  'gorilla',\n  'gospel',\n  'gossip',\n  'govern',\n  'gown',\n  'grab',\n  'grace',\n  'grain',\n  'grant',\n  'grape',\n  'grass',\n  'gravity',\n  'great',\n  'green',\n  'grid',\n  'grief',\n  'grit',\n  'grocery',\n  'group',\n  'grow',\n  'grunt',\n  'guard',\n  'guess',\n  'guide',\n  'guilt',\n  'guitar',\n  'gun',\n  'gym',\n  'habit',\n  'hair',\n  'half',\n  'hammer',\n  'hamster',\n  'hand',\n  'happy',\n  'harbor',\n  'hard',\n  'harsh',\n  'harvest',\n  'hat',\n  'have',\n  'hawk',\n  'hazard',\n  'head',\n  'health',\n  'heart',\n  'heavy',\n  'hedgehog',\n  'height',\n  'hello',\n  'helmet',\n  'help',\n  'hen',\n  'hero',\n  'hidden',\n  'high',\n  'hill',\n  'hint',\n  'hip',\n  'hire',\n  'history',\n  'hobby',\n  'hockey',\n  'hold',\n  'hole',\n  'holiday',\n  'hollow',\n  'home',\n  'honey',\n  'hood',\n  'hope',\n  'horn',\n  'horror',\n  'horse',\n  'hospital',\n  'host',\n  'hotel',\n  'hour',\n  'hover',\n  'hub',\n  'huge',\n  'human',\n  'humble',\n  'humor',\n  'hundred',\n  'hungry',\n  'hunt',\n  'hurdle',\n  'hurry',\n  'hurt',\n  'husband',\n  'hybrid',\n  'ice',\n  'icon',\n  'idea',\n  'identify',\n  'idle',\n  'ignore',\n  'ill',\n  'illegal',\n  'illness',\n  'image',\n  'imitate',\n  'immense',\n  'immune',\n  'impact',\n  'impose',\n  'improve',\n  'impulse',\n  'inch',\n  'include',\n  'income',\n  'increase',\n  'index',\n  'indicate',\n  'indoor',\n  'industry',\n  'infant',\n  'inflict',\n  'inform',\n  'inhale',\n  'inherit',\n  'initial',\n  'inject',\n  'injury',\n  'inmate',\n  'inner',\n  'innocent',\n  'input',\n  'inquiry',\n  'insane',\n  'insect',\n  'inside',\n  'inspire',\n  'install',\n  'intact',\n  'interest',\n  'into',\n  'invest',\n  'invite',\n  'involve',\n  'iron',\n  'island',\n  'isolate',\n  'issue',\n  'item',\n  'ivory',\n  'jacket',\n  'jaguar',\n  'jar',\n  'jazz',\n  'jealous',\n  'jeans',\n  'jelly',\n  'jewel',\n  'job',\n  'join',\n  'joke',\n  'journey',\n  'joy',\n  'judge',\n  'juice',\n  'jump',\n  'jungle',\n  'junior',\n  'junk',\n  'just',\n  'kangaroo',\n  'keen',\n  'keep',\n  'ketchup',\n  'key',\n  'kick',\n  'kid',\n  'kidney',\n  'kind',\n  'kingdom',\n  'kiss',\n  'kit',\n  'kitchen',\n  'kite',\n  'kitten',\n  'kiwi',\n  'knee',\n  'knife',\n  'knock',\n  'know',\n  'lab',\n  'label',\n  'labor',\n  'ladder',\n  'lady',\n  'lake',\n  'lamp',\n  'language',\n  'laptop',\n  'large',\n  'later',\n  'latin',\n  'laugh',\n  'laundry',\n  'lava',\n  'law',\n  'lawn',\n  'lawsuit',\n  'layer',\n  'lazy',\n  'leader',\n  'leaf',\n  'learn',\n  'leave',\n  'lecture',\n  'left',\n  'leg',\n  'legal',\n  'legend',\n  'leisure',\n  'lemon',\n  'lend',\n  'length',\n  'lens',\n  'leopard',\n  'lesson',\n  'letter',\n  'level',\n  'liar',\n  'liberty',\n  'library',\n  'license',\n  'life',\n  'lift',\n  'light',\n  'like',\n  'limb',\n  'limit',\n  'link',\n  'lion',\n  'liquid',\n  'list',\n  'little',\n  'live',\n  'lizard',\n  'load',\n  'loan',\n  'lobster',\n  'local',\n  'lock',\n  'logic',\n  'lonely',\n  'long',\n  'loop',\n  'lottery',\n  'loud',\n  'lounge',\n  'love',\n  'loyal',\n  'lucky',\n  'luggage',\n  'lumber',\n  'lunar',\n  'lunch',\n  'luxury',\n  'lyrics',\n  'machine',\n  'mad',\n  'magic',\n  'magnet',\n  'maid',\n  'mail',\n  'main',\n  'major',\n  'make',\n  'mammal',\n  'man',\n  'manage',\n  'mandate',\n  'mango',\n  'mansion',\n  'manual',\n  'maple',\n  'marble',\n  'march',\n  'margin',\n  'marine',\n  'market',\n  'marriage',\n  'mask',\n  'mass',\n  'master',\n  'match',\n  'material',\n  'math',\n  'matrix',\n  'matter',\n  'maximum',\n  'maze',\n  'meadow',\n  'mean',\n  'measure',\n  'meat',\n  'mechanic',\n  'medal',\n  'media',\n  'melody',\n  'melt',\n  'member',\n  'memory',\n  'mention',\n  'menu',\n  'mercy',\n  'merge',\n  'merit',\n  'merry',\n  'mesh',\n  'message',\n  'metal',\n  'method',\n  'middle',\n  'midnight',\n  'milk',\n  'million',\n  'mimic',\n  'mind',\n  'minimum',\n  'minor',\n  'minute',\n  'miracle',\n  'mirror',\n  'misery',\n  'miss',\n  'mistake',\n  'mix',\n  'mixed',\n  'mixture',\n  'mobile',\n  'model',\n  'modify',\n  'mom',\n  'moment',\n  'monitor',\n  'monkey',\n  'monster',\n  'month',\n  'moon',\n  'moral',\n  'more',\n  'morning',\n  'mosquito',\n  'mother',\n  'motion',\n  'motor',\n  'mountain',\n  'mouse',\n  'move',\n  'movie',\n  'much',\n  'muffin',\n  'mule',\n  'multiply',\n  'muscle',\n  'museum',\n  'mushroom',\n  'music',\n  'must',\n  'mutual',\n  'myself',\n  'mystery',\n  'myth',\n  'naive',\n  'name',\n  'napkin',\n  'narrow',\n  'nasty',\n  'nation',\n  'nature',\n  'near',\n  'neck',\n  'need',\n  'negative',\n  'neglect',\n  'neither',\n  'nephew',\n  'nerve',\n  'nest',\n  'net',\n  'network',\n  'neutral',\n  'never',\n  'news',\n  'next',\n  'nice',\n  'night',\n  'noble',\n  'noise',\n  'nominee',\n  'noodle',\n  'normal',\n  'north',\n  'nose',\n  'notable',\n  'note',\n  'nothing',\n  'notice',\n  'novel',\n  'now',\n  'nuclear',\n  'number',\n  'nurse',\n  'nut',\n  'oak',\n  'obey',\n  'object',\n  'oblige',\n  'obscure',\n  'observe',\n  'obtain',\n  'obvious',\n  'occur',\n  'ocean',\n  'october',\n  'odor',\n  'off',\n  'offer',\n  'office',\n  'often',\n  'oil',\n  'okay',\n  'old',\n  'olive',\n  'olympic',\n  'omit',\n  'once',\n  'one',\n  'onion',\n  'online',\n  'only',\n  'open',\n  'opera',\n  'opinion',\n  'oppose',\n  'option',\n  'orange',\n  'orbit',\n  'orchard',\n  'order',\n  'ordinary',\n  'organ',\n  'orient',\n  'original',\n  'orphan',\n  'ostrich',\n  'other',\n  'outdoor',\n  'outer',\n  'output',\n  'outside',\n  'oval',\n  'oven',\n  'over',\n  'own',\n  'owner',\n  'oxygen',\n  'oyster',\n  'ozone',\n  'pact',\n  'paddle',\n  'page',\n  'pair',\n  'palace',\n  'palm',\n  'panda',\n  'panel',\n  'panic',\n  'panther',\n  'paper',\n  'parade',\n  'parent',\n  'park',\n  'parrot',\n  'party',\n  'pass',\n  'patch',\n  'path',\n  'patient',\n  'patrol',\n  'pattern',\n  'pause',\n  'pave',\n  'payment',\n  'peace',\n  'peanut',\n  'pear',\n  'peasant',\n  'pelican',\n  'pen',\n  'penalty',\n  'pencil',\n  'people',\n  'pepper',\n  'perfect',\n  'permit',\n  'person',\n  'pet',\n  'phone',\n  'photo',\n  'phrase',\n  'physical',\n  'piano',\n  'picnic',\n  'picture',\n  'piece',\n  'pig',\n  'pigeon',\n  'pill',\n  'pilot',\n  'pink',\n  'pioneer',\n  'pipe',\n  'pistol',\n  'pitch',\n  'pizza',\n  'place',\n  'planet',\n  'plastic',\n  'plate',\n  'play',\n  'please',\n  'pledge',\n  'pluck',\n  'plug',\n  'plunge',\n  'poem',\n  'poet',\n  'point',\n  'polar',\n  'pole',\n  'police',\n  'pond',\n  'pony',\n  'pool',\n  'popular',\n  'portion',\n  'position',\n  'possible',\n  'post',\n  'potato',\n  'pottery',\n  'poverty',\n  'powder',\n  'power',\n  'practice',\n  'praise',\n  'predict',\n  'prefer',\n  'prepare',\n  'present',\n  'pretty',\n  'prevent',\n  'price',\n  'pride',\n  'primary',\n  'print',\n  'priority',\n  'prison',\n  'private',\n  'prize',\n  'problem',\n  'process',\n  'produce',\n  'profit',\n  'program',\n  'project',\n  'promote',\n  'proof',\n  'property',\n  'prosper',\n  'protect',\n  'proud',\n  'provide',\n  'public',\n  'pudding',\n  'pull',\n  'pulp',\n  'pulse',\n  'pumpkin',\n  'punch',\n  'pupil',\n  'puppy',\n  'purchase',\n  'purity',\n  'purpose',\n  'purse',\n  'push',\n  'put',\n  'puzzle',\n  'pyramid',\n  'quality',\n  'quantum',\n  'quarter',\n  'question',\n  'quick',\n  'quit',\n  'quiz',\n  'quote',\n  'rabbit',\n  'raccoon',\n  'race',\n  'rack',\n  'radar',\n  'radio',\n  'rail',\n  'rain',\n  'raise',\n  'rally',\n  'ramp',\n  'ranch',\n  'random',\n  'range',\n  'rapid',\n  'rare',\n  'rate',\n  'rather',\n  'raven',\n  'raw',\n  'razor',\n  'ready',\n  'real',\n  'reason',\n  'rebel',\n  'rebuild',\n  'recall',\n  'receive',\n  'recipe',\n  'record',\n  'recycle',\n  'reduce',\n  'reflect',\n  'reform',\n  'refuse',\n  'region',\n  'regret',\n  'regular',\n  'reject',\n  'relax',\n  'release',\n  'relief',\n  'rely',\n  'remain',\n  'remember',\n  'remind',\n  'remove',\n  'render',\n  'renew',\n  'rent',\n  'reopen',\n  'repair',\n  'repeat',\n  'replace',\n  'report',\n  'require',\n  'rescue',\n  'resemble',\n  'resist',\n  'resource',\n  'response',\n  'result',\n  'retire',\n  'retreat',\n  'return',\n  'reunion',\n  'reveal',\n  'review',\n  'reward',\n  'rhythm',\n  'rib',\n  'ribbon',\n  'rice',\n  'rich',\n  'ride',\n  'ridge',\n  'rifle',\n  'right',\n  'rigid',\n  'ring',\n  'riot',\n  'ripple',\n  'risk',\n  'ritual',\n  'rival',\n  'river',\n  'road',\n  'roast',\n  'robot',\n  'robust',\n  'rocket',\n  'romance',\n  'roof',\n  'rookie',\n  'room',\n  'rose',\n  'rotate',\n  'rough',\n  'round',\n  'route',\n  'royal',\n  'rubber',\n  'rude',\n  'rug',\n  'rule',\n  'run',\n  'runway',\n  'rural',\n  'sad',\n  'saddle',\n  'sadness',\n  'safe',\n  'sail',\n  'salad',\n  'salmon',\n  'salon',\n  'salt',\n  'salute',\n  'same',\n  'sample',\n  'sand',\n  'satisfy',\n  'satoshi',\n  'sauce',\n  'sausage',\n  'save',\n  'say',\n  'scale',\n  'scan',\n  'scare',\n  'scatter',\n  'scene',\n  'scheme',\n  'school',\n  'science',\n  'scissors',\n  'scorpion',\n  'scout',\n  'scrap',\n  'screen',\n  'script',\n  'scrub',\n  'sea',\n  'search',\n  'season',\n  'seat',\n  'second',\n  'secret',\n  'section',\n  'security',\n  'seed',\n  'seek',\n  'segment',\n  'select',\n  'sell',\n  'seminar',\n  'senior',\n  'sense',\n  'sentence',\n  'series',\n  'service',\n  'session',\n  'settle',\n  'setup',\n  'seven',\n  'shadow',\n  'shaft',\n  'shallow',\n  'share',\n  'shed',\n  'shell',\n  'sheriff',\n  'shield',\n  'shift',\n  'shine',\n  'ship',\n  'shiver',\n  'shock',\n  'shoe',\n  'shoot',\n  'shop',\n  'short',\n  'shoulder',\n  'shove',\n  'shrimp',\n  'shrug',\n  'shuffle',\n  'shy',\n  'sibling',\n  'sick',\n  'side',\n  'siege',\n  'sight',\n  'sign',\n  'silent',\n  'silk',\n  'silly',\n  'silver',\n  'similar',\n  'simple',\n  'since',\n  'sing',\n  'siren',\n  'sister',\n  'situate',\n  'six',\n  'size',\n  'skate',\n  'sketch',\n  'ski',\n  'skill',\n  'skin',\n  'skirt',\n  'skull',\n  'slab',\n  'slam',\n  'sleep',\n  'slender',\n  'slice',\n  'slide',\n  'slight',\n  'slim',\n  'slogan',\n  'slot',\n  'slow',\n  'slush',\n  'small',\n  'smart',\n  'smile',\n  'smoke',\n  'smooth',\n  'snack',\n  'snake',\n  'snap',\n  'sniff',\n  'snow',\n  'soap',\n  'soccer',\n  'social',\n  'sock',\n  'soda',\n  'soft',\n  'solar',\n  'soldier',\n  'solid',\n  'solution',\n  'solve',\n  'someone',\n  'song',\n  'soon',\n  'sorry',\n  'sort',\n  'soul',\n  'sound',\n  'soup',\n  'source',\n  'south',\n  'space',\n  'spare',\n  'spatial',\n  'spawn',\n  'speak',\n  'special',\n  'speed',\n  'spell',\n  'spend',\n  'sphere',\n  'spice',\n  'spider',\n  'spike',\n  'spin',\n  'spirit',\n  'split',\n  'spoil',\n  'sponsor',\n  'spoon',\n  'sport',\n  'spot',\n  'spray',\n  'spread',\n  'spring',\n  'spy',\n  'square',\n  'squeeze',\n  'squirrel',\n  'stable',\n  'stadium',\n  'staff',\n  'stage',\n  'stairs',\n  'stamp',\n  'stand',\n  'start',\n  'state',\n  'stay',\n  'steak',\n  'steel',\n  'stem',\n  'step',\n  'stereo',\n  'stick',\n  'still',\n  'sting',\n  'stock',\n  'stomach',\n  'stone',\n  'stool',\n  'story',\n  'stove',\n  'strategy',\n  'street',\n  'strike',\n  'strong',\n  'struggle',\n  'student',\n  'stuff',\n  'stumble',\n  'style',\n  'subject',\n  'submit',\n  'subway',\n  'success',\n  'such',\n  'sudden',\n  'suffer',\n  'sugar',\n  'suggest',\n  'suit',\n  'summer',\n  'sun',\n  'sunny',\n  'sunset',\n  'super',\n  'supply',\n  'supreme',\n  'sure',\n  'surface',\n  'surge',\n  'surprise',\n  'surround',\n  'survey',\n  'suspect',\n  'sustain',\n  'swallow',\n  'swamp',\n  'swap',\n  'swarm',\n  'swear',\n  'sweet',\n  'swift',\n  'swim',\n  'swing',\n  'switch',\n  'sword',\n  'symbol',\n  'symptom',\n  'syrup',\n  'system',\n  'table',\n  'tackle',\n  'tag',\n  'tail',\n  'talent',\n  'talk',\n  'tank',\n  'tape',\n  'target',\n  'task',\n  'taste',\n  'tattoo',\n  'taxi',\n  'teach',\n  'team',\n  'tell',\n  'ten',\n  'tenant',\n  'tennis',\n  'tent',\n  'term',\n  'test',\n  'text',\n  'thank',\n  'that',\n  'theme',\n  'then',\n  'theory',\n  'there',\n  'they',\n  'thing',\n  'this',\n  'thought',\n  'three',\n  'thrive',\n  'throw',\n  'thumb',\n  'thunder',\n  'ticket',\n  'tide',\n  'tiger',\n  'tilt',\n  'timber',\n  'time',\n  'tiny',\n  'tip',\n  'tired',\n  'tissue',\n  'title',\n  'toast',\n  'tobacco',\n  'today',\n  'toddler',\n  'toe',\n  'together',\n  'toilet',\n  'token',\n  'tomato',\n  'tomorrow',\n  'tone',\n  'tongue',\n  'tonight',\n  'tool',\n  'tooth',\n  'top',\n  'topic',\n  'topple',\n  'torch',\n  'tornado',\n  'tortoise',\n  'toss',\n  'total',\n  'tourist',\n  'toward',\n  'tower',\n  'town',\n  'toy',\n  'track',\n  'trade',\n  'traffic',\n  'tragic',\n  'train',\n  'transfer',\n  'trap',\n  'trash',\n  'travel',\n  'tray',\n  'treat',\n  'tree',\n  'trend',\n  'trial',\n  'tribe',\n  'trick',\n  'trigger',\n  'trim',\n  'trip',\n  'trophy',\n  'trouble',\n  'truck',\n  'true',\n  'truly',\n  'trumpet',\n  'trust',\n  'truth',\n  'try',\n  'tube',\n  'tuition',\n  'tumble',\n  'tuna',\n  'tunnel',\n  'turkey',\n  'turn',\n  'turtle',\n  'twelve',\n  'twenty',\n  'twice',\n  'twin',\n  'twist',\n  'two',\n  'type',\n  'typical',\n  'ugly',\n  'umbrella',\n  'unable',\n  'unaware',\n  'uncle',\n  'uncover',\n  'under',\n  'undo',\n  'unfair',\n  'unfold',\n  'unhappy',\n  'uniform',\n  'unique',\n  'unit',\n  'universe',\n  'unknown',\n  'unlock',\n  'until',\n  'unusual',\n  'unveil',\n  'update',\n  'upgrade',\n  'uphold',\n  'upon',\n  'upper',\n  'upset',\n  'urban',\n  'urge',\n  'usage',\n  'use',\n  'used',\n  'useful',\n  'useless',\n  'usual',\n  'utility',\n  'vacant',\n  'vacuum',\n  'vague',\n  'valid',\n  'valley',\n  'valve',\n  'van',\n  'vanish',\n  'vapor',\n  'various',\n  'vast',\n  'vault',\n  'vehicle',\n  'velvet',\n  'vendor',\n  'venture',\n  'venue',\n  'verb',\n  'verify',\n  'version',\n  'very',\n  'vessel',\n  'veteran',\n  'viable',\n  'vibrant',\n  'vicious',\n  'victory',\n  'video',\n  'view',\n  'village',\n  'vintage',\n  'violin',\n  'virtual',\n  'virus',\n  'visa',\n  'visit',\n  'visual',\n  'vital',\n  'vivid',\n  'vocal',\n  'voice',\n  'void',\n  'volcano',\n  'volume',\n  'vote',\n  'voyage',\n  'wage',\n  'wagon',\n  'wait',\n  'walk',\n  'wall',\n  'walnut',\n  'want',\n  'warfare',\n  'warm',\n  'warrior',\n  'wash',\n  'wasp',\n  'waste',\n  'water',\n  'wave',\n  'way',\n  'wealth',\n  'weapon',\n  'wear',\n  'weasel',\n  'weather',\n  'web',\n  'wedding',\n  'weekend',\n  'weird',\n  'welcome',\n  'west',\n  'wet',\n  'whale',\n  'what',\n  'wheat',\n  'wheel',\n  'when',\n  'where',\n  'whip',\n  'whisper',\n  'wide',\n  'width',\n  'wife',\n  'wild',\n  'will',\n  'win',\n  'window',\n  'wine',\n  'wing',\n  'wink',\n  'winner',\n  'winter',\n  'wire',\n  'wisdom',\n  'wise',\n  'wish',\n  'witness',\n  'wolf',\n  'woman',\n  'wonder',\n  'wood',\n  'wool',\n  'word',\n  'work',\n  'world',\n  'worry',\n  'worth',\n  'wrap',\n  'wreck',\n  'wrestle',\n  'wrist',\n  'write',\n  'wrong',\n  'yard',\n  'year',\n  'yellow',\n  'you',\n  'young',\n  'youth',\n  'zebra',\n  'zero',\n  'zone',\n  'zoo',\n];\n", "export { english } from './words/english';\n\nexport enum Language {\n  'english' = 'english',\n}\n", "import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { sha256 } from '@fuel-ts/hasher';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify } from '@fuel-ts/utils';\n\n/* Mnemonic phrase composed by words from the provided wordlist it can be a text or a array of words */\nexport type MnemonicPhrase = string | Array<string>;\n\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits: number): number {\n  return (1 << bits) - 1;\n}\n\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits: number): number {\n  return ((1 << bits) - 1) << (8 - bits);\n}\n\nexport function getWords(mnemonic: MnemonicPhrase): Array<string> {\n  if (!Array.isArray(mnemonic)) {\n    return mnemonic.split(/\\s+/);\n  }\n  return mnemonic;\n}\n\nexport function getPhrase(mnemonic: MnemonicPhrase): string {\n  if (Array.isArray(mnemonic)) {\n    return mnemonic.join(' ');\n  }\n  return mnemonic;\n}\n\nexport function entropyToMnemonicIndices(entropy: Uint8Array): Array<number> {\n  const indices: Array<number> = [0];\n\n  let remainingBits = 11;\n  for (let i = 0; i < entropy.length; i += 1) {\n    if (remainingBits > 8) {\n      indices[indices.length - 1] <<= 8;\n      indices[indices.length - 1] |= entropy[i];\n\n      remainingBits -= 8;\n      // This byte will complete an 11-bit index\n    } else {\n      indices[indices.length - 1] <<= remainingBits;\n      indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n\n      // Start the next word\n      indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n\n      remainingBits += 3;\n    }\n  }\n\n  // Compute the checksum bits\n  const checksumBits = entropy.length / 4;\n  const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);\n\n  // Shift the checksum into the word indices\n  indices[indices.length - 1] <<= checksumBits;\n  indices[indices.length - 1] |= checksum >> (8 - checksumBits);\n\n  return indices;\n}\n\nexport function mnemonicWordsToEntropy(words: Array<string>, wordlist: Array<string>): BytesLike {\n  const size = Math.ceil((11 * words.length) / 8);\n  const entropy = arrayify(new Uint8Array(size));\n\n  let offset = 0;\n  for (let i = 0; i < words.length; i += 1) {\n    const index = wordlist.indexOf(words[i].normalize('NFKD'));\n    if (index === -1) {\n      throw new FuelError(\n        ErrorCode.INVALID_MNEMONIC,\n        `Invalid mnemonic: the word '${words[i]}' is not found in the provided wordlist.`\n      );\n    }\n\n    for (let bit = 0; bit < 11; bit += 1) {\n      if (index & (1 << (10 - bit))) {\n        entropy[offset >> 3] |= 1 << (7 - (offset % 8));\n      }\n      offset += 1;\n    }\n  }\n  const entropyBits = (32 * words.length) / 3;\n  const checksumBits = words.length / 3;\n  const checksumMask = getUpperMask(checksumBits);\n  const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n\n  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n    throw new FuelError(\n      ErrorCode.INVALID_CHECKSUM,\n      'Checksum validation failed for the provided mnemonic.'\n    );\n  }\n\n  return entropy.slice(0, entropyBits / 8);\n}\n", "//\n// Because WalletLocked and WalletUnlocked has a cycle dependency\n// it's not possible to split the two classes in different files\n//\n/* eslint-disable max-classes-per-file */\nimport type { BytesLike } from '@fuel-ts/utils';\n\nimport { Account } from '../account';\nimport { HDWallet } from '../hdwallet';\nimport { Mnemonic } from '../mnemonic';\nimport type { Provider } from '../providers';\nimport { Signer } from '../signer';\n\nimport { BaseWalletUnlocked } from './base-wallet-unlocked';\nimport { decryptKeystoreWallet } from './keystore-wallet';\n\nexport interface GenerateOptions {\n  /** Additional entropy for the random bytes */\n  entropy?: BytesLike;\n  provider?: Provider;\n}\n\n/**\n * `WalletLocked` provides the functionalities for a locked  wallet.\n */\nexport class WalletLocked extends Account {\n  /**\n   * Unlocks the wallet using the provided private key and returns an instance of WalletUnlocked.\n   *\n   * @param privateKey - The private key used to unlock the wallet.\n   * @returns An instance of WalletUnlocked.\n   */\n  unlock(privateKey: BytesLike): WalletUnlocked {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return new WalletUnlocked(privateKey, this._provider);\n  }\n}\n\n/**\n * `WalletUnlocked` provides the functionalities for an unlocked wallet.\n */\nexport class WalletUnlocked extends BaseWalletUnlocked {\n  /**\n   * Locks the wallet and returns an instance of WalletLocked.\n   *\n   * @returns An instance of WalletLocked.\n   */\n  lock(): WalletLocked {\n    this.signer = () => new Signer('0x00');\n    return new WalletLocked(this.address, this._provider);\n  }\n\n  /**\n   * Generate a new Wallet Unlocked with a random key pair.\n   *\n   * @param generateOptions - Options to customize the generation process (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static generate(generateOptions?: GenerateOptions): WalletUnlocked {\n    const privateKey = Signer.generatePrivateKey(generateOptions?.entropy);\n\n    return new WalletUnlocked(privateKey, generateOptions?.provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from a seed.\n   *\n   * @param seed - The seed phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromSeed(seed: string, path?: string, provider?: Provider): WalletUnlocked {\n    const hdWallet = HDWallet.fromSeed(seed);\n    const childWallet = hdWallet.derivePath(path || WalletUnlocked.defaultPath);\n\n    return new WalletUnlocked(<string>childWallet.privateKey, provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from a mnemonic phrase.\n   *\n   * @param mnemonic - The mnemonic phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @param passphrase - The passphrase for the mnemonic (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromMnemonic(\n    mnemonic: string,\n    path?: string,\n    passphrase?: BytesLike,\n    provider?: Provider\n  ): WalletUnlocked {\n    const seed = Mnemonic.mnemonicToSeed(mnemonic, passphrase);\n    const hdWallet = HDWallet.fromSeed(seed);\n    const childWallet = hdWallet.derivePath(path || WalletUnlocked.defaultPath);\n\n    return new WalletUnlocked(<string>childWallet.privateKey, provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from an extended key.\n   *\n   * @param extendedKey - The extended key.\n   * @param provider - A Provider instance (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromExtendedKey(extendedKey: string, provider?: Provider): WalletUnlocked {\n    const hdWallet = HDWallet.fromExtendedKey(extendedKey);\n\n    return new WalletUnlocked(<string>hdWallet.privateKey, provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from an encrypted JSON.\n   *\n   * @param jsonWallet - The encrypted JSON keystore.\n   * @param password - The password to decrypt the JSON.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static async fromEncryptedJson(\n    jsonWallet: string,\n    password: string,\n    provider?: Provider\n  ): Promise<WalletUnlocked> {\n    const privateKey = await decryptKeystoreWallet(jsonWallet, password);\n\n    return new WalletUnlocked(privateKey, provider);\n  }\n}\n", "import type { Address } from '@fuel-ts/address';\nimport type { BytesLike } from '@fuel-ts/utils';\n\nimport type { Provider } from '../providers';\n\nimport { WalletLocked, WalletUnlocked } from './wallets';\n\n/**\n * `Wallet` provides methods to create locked and unlocked wallet instances.\n */\nexport class Wallet {\n  /**\n   * Creates a locked wallet instance from an address and a provider.\n   *\n   * @param address - The address of the wallet.\n   * @param provider - A Provider instance (optional).\n   * @returns A locked wallet instance.\n   */\n  static fromAddress(address: string | Address, provider?: Provider): WalletLocked {\n    return new WalletLocked(address, provider);\n  }\n\n  /**\n   * Creates an unlocked wallet instance from a private key and a provider.\n   *\n   * @param privateKey - The private key of the wallet.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromPrivateKey(privateKey: BytesLike, provider?: Provider) {\n    return new WalletUnlocked(privateKey, provider);\n  }\n\n  /**\n   * Generate a new Wallet Unlocked with a random key pair.\n   *\n   * @param generateOptions - Options to customize the generation process (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static generate = WalletUnlocked.generate;\n\n  /**\n   * Create a Wallet Unlocked from a seed.\n   *\n   * @param seed - The seed phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromSeed = WalletUnlocked.fromSeed;\n\n  /**\n   * Create a Wallet Unlocked from a mnemonic phrase.\n   *\n   * @param mnemonic - The mnemonic phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @param passphrase - The passphrase for the mnemonic (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromMnemonic = WalletUnlocked.fromMnemonic;\n\n  /**\n   * Create a Wallet Unlocked from an extended key.\n   *\n   * @param extendedKey - The extended key.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromExtendedKey = WalletUnlocked.fromExtendedKey;\n\n  /**\n   * Create a Wallet Unlocked from an encrypted JSON.\n   *\n   * @param jsonWallet - The encrypted JSON keystore.\n   * @param password - The password to decrypt the JSON.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromEncryptedJson = WalletUnlocked.fromEncryptedJson;\n}\n", "import type { AddressInput } from '@fuel-ts/address';\nimport { Address } from '@fuel-ts/address';\nimport type { Keystore } from '@fuel-ts/crypto';\nimport { encrypt, decrypt } from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { EventEmitter } from 'events';\n\nimport type { WalletUnlocked } from '../wallet';\n\nimport { MemoryStorage } from './storages/memory-storage';\nimport type {\n  StorageAbstract,\n  WalletManagerAccount,\n  VaultConfig,\n  VaultsState,\n  WalletManagerOptions,\n  WalletManagerState,\n  Vault,\n} from './types';\nimport { MnemonicVault } from './vaults/mnemonic-vault';\nimport { PrivateKeyVault } from './vaults/privatekey-vault';\n\nconst ERROR_MESSAGES = {\n  invalid_vault_type: 'The provided Vault type is invalid.',\n  address_not_found: 'No private key found for address the specified wallet address.',\n  vault_not_found: 'The specified vault was not found.',\n  wallet_not_unlocked: 'The wallet is currently locked.',\n  passphrase_not_match: 'The provided passphrase did not match the expected value.',\n};\n\n/**\n * Generic assert function to avoid undesirable errors\n */\nfunction assert(condition: unknown, message: string): asserts condition {\n  if (!condition) {\n    throw new FuelError(ErrorCode.WALLET_MANAGER_ERROR, message);\n  }\n}\n\n/**\n * WalletManager is a upper package to manage multiple vaults like mnemonic and privateKeys.\n *\n * - VaultTypes can be add to `WalletManager.Vaults` enabling to add custom Vault types.\n * - Storage can be instantiate when initializing enabling custom storage types.\n */\nexport class WalletManager extends EventEmitter {\n  /**\n   * Vaults\n   *\n   * Vaults are responsible to store secret keys and return an `Wallet` instance,\n   * to interact with the network.\n   *\n   * Each vault has access to its own state\n   *\n   */\n  static Vaults = [MnemonicVault, PrivateKeyVault];\n  /**\n   * Storage\n   *\n   * Persistent encrypted data. `The default storage works only on memory`.\n   */\n  readonly storage: StorageAbstract = new MemoryStorage();\n  /* Key name passed to the storage */\n  readonly STORAGE_KEY: string = 'WalletManager';\n\n  // `This variables are only accessible from inside the class`\n  #vaults: VaultsState = [];\n  #passphrase = '';\n  #isLocked: boolean = true;\n\n  constructor(options?: WalletManagerOptions) {\n    super();\n    this.storage = options?.storage || this.storage;\n  }\n\n  get isLocked(): boolean {\n    return this.#isLocked;\n  }\n\n  /**\n   * Return the vault serialized object containing all the privateKeys,\n   * the format of the return depends on the Vault type.\n   */\n  exportVault<T extends Vault>(vaultId: number): ReturnType<T['serialize']> {\n    assert(!this.#isLocked, ERROR_MESSAGES.wallet_not_unlocked);\n    const vaultState = this.#vaults.find((_, idx) => idx === vaultId);\n    assert(vaultState, ERROR_MESSAGES.vault_not_found);\n    return vaultState.vault.serialize() as ReturnType<T['serialize']>;\n  }\n\n  /**\n   * List all vaults on the Wallet Manager, this function not return secret's\n   */\n  getVaults(): Array<{ title?: string; type: string; vaultId: number }> {\n    return this.#vaults.map((v, idx) => ({\n      title: v.title,\n      type: v.type,\n      vaultId: idx,\n    }));\n  }\n\n  /**\n   * List all accounts on the Wallet Manager not vault information is revealed\n   */\n  getAccounts(): Array<WalletManagerAccount> {\n    // Return all WalletManagerAccounts from vaults\n    return this.#vaults.flatMap<WalletManagerAccount>((vaultState, vaultId) =>\n      vaultState.vault.getAccounts().map((account) => ({ ...account, vaultId }))\n    );\n  }\n\n  /**\n   * Create a Wallet instance for the specific account\n   */\n  getWallet(address: AddressInput): WalletUnlocked {\n    const ownerAddress = new Address(address);\n    const vaultState = this.#vaults.find((vs) =>\n      vs.vault.getAccounts().find((a) => a.address.equals(ownerAddress))\n    );\n    assert(vaultState, ERROR_MESSAGES.address_not_found);\n\n    return vaultState.vault.getWallet(ownerAddress);\n  }\n\n  /**\n   * Export specific account privateKey\n   */\n  exportPrivateKey(address: AddressInput) {\n    const ownerAddress = new Address(address);\n    assert(!this.#isLocked, ERROR_MESSAGES.wallet_not_unlocked);\n    const vaultState = this.#vaults.find((vs) =>\n      vs.vault.getAccounts().find((a) => a.address.equals(ownerAddress))\n    );\n    assert(vaultState, ERROR_MESSAGES.address_not_found);\n\n    return vaultState.vault.exportAccount(ownerAddress);\n  }\n\n  /**\n   * Add account to a selected vault or on the first vault as default.\n   * If not vaults are adds it will return error\n   */\n  async addAccount(options?: { vaultId: number }) {\n    // Make sure before add new vault state is fully loaded\n    await this.loadState();\n    // Get vault instance\n    const vaultState = this.#vaults[options?.vaultId || 0];\n    await assert(vaultState, ERROR_MESSAGES.vault_not_found);\n    // Add account on vault\n    const account = vaultState.vault.addAccount();\n    // Save the accounts state\n    await this.saveState();\n    // Return account\n    return account;\n  }\n\n  /**\n   * Remove vault by index, by remove the vault you also remove all accounts\n   * created by the vault.\n   */\n  async removeVault(index: number) {\n    this.#vaults.splice(index, 1);\n    await this.saveState();\n  }\n\n  /**\n   * Add Vault, the `vaultConfig.type` will look for the Vaults supported if\n   * didn't found it will throw.\n   */\n  async addVault(vaultConfig: VaultConfig) {\n    // Make sure before add new vault state is fully loaded\n    await this.loadState();\n    // Check if vault is supported\n    const Vault = this.getVaultClass(vaultConfig.type);\n    // create Vault instance\n    const vault = new Vault(vaultConfig);\n    // Push vaults to state\n    this.#vaults = this.#vaults.concat({\n      title: vaultConfig.title,\n      type: vaultConfig.type,\n      vault,\n    });\n    // Persist data on storage\n    await this.saveState();\n  }\n\n  /**\n   * Lock wallet. It removes passphrase from class instance, encrypt and hide all address and\n   * secrets.\n   */\n  lock() {\n    this.#isLocked = true;\n    // Clean state vaults from state\n    this.#vaults = [];\n    // Clean password from state\n    this.#passphrase = '';\n    // Emit event that wallet is locked\n    this.emit('lock');\n  }\n\n  /**\n   * Unlock wallet. It sets passphrase on WalletManger instance load all address from configured vaults.\n   * Vaults with secrets are not unlocked or instantiated on this moment.\n   */\n  async unlock(passphrase: string) {\n    // Set password on state\n    this.#passphrase = passphrase;\n    // Set locked state to false\n    this.#isLocked = false;\n    // Try to load state with passphrase\n    try {\n      // Load state with passphrase\n      await this.loadState();\n      // Emit event that wallet is unlocked\n      this.emit('unlock');\n    } catch (err) {\n      // If passphrase is wrong lock wallet\n      await this.lock();\n      // Forward error\n      throw err;\n    }\n  }\n\n  /**\n   * Update WalletManager encryption passphrase\n   */\n  async updatePassphrase(oldpass: string, newpass: string) {\n    const isLocked = this.#isLocked;\n    // Unlock wallet to decrypt data\n    await this.unlock(oldpass);\n    // Set new password on state\n    this.#passphrase = newpass;\n    // Persist data on storage\n    await this.saveState();\n    // Load state with new password\n    await this.loadState();\n    // If wallet was locked, lock the wallet again\n    if (isLocked) {\n      await this.lock();\n    }\n  }\n\n  /**\n   * Retrieve and decrypt WalletManager state from storage\n   */\n  async loadState() {\n    await assert(!this.#isLocked, ERROR_MESSAGES.wallet_not_unlocked);\n\n    const data = await this.storage.getItem(this.STORAGE_KEY);\n    if (data) {\n      const state = await decrypt<WalletManagerState>(this.#passphrase, <Keystore>JSON.parse(data));\n      this.#vaults = this.#deserializeVaults(state.vaults);\n    }\n  }\n\n  /**\n   * Store encrypted WalletManager state on storage\n   */\n  private async saveState() {\n    await assert(!this.#isLocked, ERROR_MESSAGES.wallet_not_unlocked);\n\n    const encryptedData = await encrypt(this.#passphrase, {\n      vaults: this.#serializeVaults(this.#vaults),\n    });\n    await this.storage.setItem(this.STORAGE_KEY, JSON.stringify(encryptedData));\n    this.emit('update');\n  }\n\n  /**\n   * Serialize all vaults to store\n   *\n   * `This is only accessible from inside the class`\n   */\n  #serializeVaults(vaults: VaultsState) {\n    return vaults.map(({ title, type, vault }) => ({\n      title,\n      type,\n      data: vault.serialize(),\n    }));\n  }\n\n  /**\n   * Deserialize all vaults to state\n   *\n   * `This is only accessible from inside the class`\n   */\n  #deserializeVaults(vaults: VaultsState) {\n    return vaults.map(({ title, type, data: vaultConfig }) => {\n      const VaultClass = this.getVaultClass(type);\n      return {\n        title,\n        type,\n        vault: new VaultClass(<VaultConfig>vaultConfig),\n      };\n    });\n  }\n\n  /**\n   * Return a instantiable Class reference from `WalletManager.Vaults` supported list.\n   */\n  private getVaultClass(type: string) {\n    const VaultClass = WalletManager.Vaults.find((v) => v.type === type);\n\n    assert(VaultClass, ERROR_MESSAGES.invalid_vault_type);\n\n    return VaultClass;\n  }\n}\n", "import type { StorageAbstract } from '../types';\n\nexport class MemoryStorage implements StorageAbstract {\n  storage = new Map<string, unknown>();\n\n  async getItem<T>(key: string): Promise<T | null> {\n    const item = await this.storage.get(key);\n    return item as T | null;\n  }\n\n  async setItem(key: string, value: string) {\n    await this.storage.set(key, value);\n  }\n\n  async removeItem(key: string) {\n    await this.storage.delete(key);\n  }\n\n  async clear() {\n    await this.storage.clear();\n  }\n}\n", "import type { AddressInput } from '@fuel-ts/address';\nimport { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport { Mnemonic } from '../../mnemonic';\nimport type { WalletUnlocked } from '../../wallet';\nimport { Wallet } from '../../wallet';\nimport type { Vault } from '../types';\n\nexport interface MnemonicVaultOptions {\n  secret?: string;\n  rootPath?: string;\n  numberOfAccounts?: number | null;\n}\n\nexport class MnemonicVault implements Vault<MnemonicVaultOptions> {\n  static readonly type = 'mnemonic';\n  readonly #secret: string;\n\n  pathKey = '{}';\n  rootPath: string = `m/44'/1179993420'/${this.pathKey}'/0/0`;\n  numberOfAccounts: number = 0;\n\n  constructor(options: MnemonicVaultOptions) {\n    this.#secret = options.secret || Mnemonic.generate();\n    this.rootPath = options.rootPath || this.rootPath;\n    // On creating the vault also adds one account\n    this.numberOfAccounts = options.numberOfAccounts || 1;\n  }\n\n  getDerivePath(index: number) {\n    if (this.rootPath.includes(this.pathKey)) {\n      return this.rootPath.replace(this.pathKey, String(index));\n    }\n    return `${this.rootPath}/${index}`;\n  }\n\n  serialize(): MnemonicVaultOptions {\n    return {\n      secret: this.#secret,\n      rootPath: this.rootPath,\n      numberOfAccounts: this.numberOfAccounts,\n    };\n  }\n\n  getAccounts() {\n    const accounts = [];\n    let numberOfAccounts = 0;\n\n    // Create all accounts to current vault\n    do {\n      const wallet = Wallet.fromMnemonic(this.#secret, this.getDerivePath(numberOfAccounts));\n      accounts.push({\n        publicKey: wallet.publicKey,\n        address: wallet.address,\n      });\n      numberOfAccounts += 1;\n    } while (numberOfAccounts < this.numberOfAccounts);\n\n    return accounts;\n  }\n\n  addAccount() {\n    this.numberOfAccounts += 1;\n    const wallet = Wallet.fromMnemonic(this.#secret, this.getDerivePath(this.numberOfAccounts - 1));\n\n    return {\n      publicKey: wallet.publicKey,\n      address: wallet.address,\n    };\n  }\n\n  exportAccount(address: AddressInput): string {\n    let numberOfAccounts = 0;\n    const ownerAddress = new Address(address);\n    // Look for the account that has the same address\n    do {\n      const wallet = Wallet.fromMnemonic(this.#secret, this.getDerivePath(numberOfAccounts));\n      if (wallet.address.equals(ownerAddress)) {\n        return wallet.privateKey;\n      }\n      numberOfAccounts += 1;\n    } while (numberOfAccounts < this.numberOfAccounts);\n\n    throw new FuelError(\n      ErrorCode.WALLET_MANAGER_ERROR,\n      `Account with address '${address}' not found in derived wallets.`\n    );\n  }\n\n  getWallet(address: AddressInput): WalletUnlocked {\n    const privateKey = this.exportAccount(address);\n    return Wallet.fromPrivateKey(privateKey);\n  }\n}\n", "import type { AddressInput } from '@fuel-ts/address';\nimport { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport type { WalletUnlocked } from '../../wallet';\nimport { Wallet } from '../../wallet';\nimport type { WalletManagerAccount, Vault } from '../types';\n\nexport interface PkVaultOptions {\n  secret?: string;\n  accounts?: Array<string>;\n}\n\nexport class PrivateKeyVault implements Vault<PkVaultOptions> {\n  static readonly type = 'privateKey';\n\n  #privateKeys: Array<string> = [];\n\n  /**\n   * If privateKey vault is initialized with a secretKey, it creates\n   * one account with the fallowing secret\n   */\n  constructor(options: PkVaultOptions = {}) {\n    if (options.secret) {\n      this.#privateKeys = [options.secret];\n    } else {\n      this.#privateKeys = options.accounts || [Wallet.generate().privateKey];\n    }\n  }\n\n  serialize(): PkVaultOptions {\n    return {\n      accounts: this.#privateKeys,\n    };\n  }\n\n  getPublicAccount(privateKey: string) {\n    const wallet = Wallet.fromPrivateKey(privateKey);\n    return {\n      address: wallet.address,\n      publicKey: wallet.publicKey,\n    };\n  }\n\n  getAccounts(): WalletManagerAccount[] {\n    return this.#privateKeys.map((pk) => this.getPublicAccount(pk));\n  }\n\n  addAccount() {\n    const wallet = Wallet.generate();\n\n    this.#privateKeys.push(wallet.privateKey);\n\n    return this.getPublicAccount(wallet.privateKey);\n  }\n\n  exportAccount(address: AddressInput): string {\n    const ownerAddress = new Address(address);\n    const privateKey = this.#privateKeys.find((pk) =>\n      Wallet.fromPrivateKey(pk).address.equals(ownerAddress)\n    );\n\n    if (!privateKey) {\n      throw new FuelError(\n        ErrorCode.WALLET_MANAGER_ERROR,\n        `No private key found for address '${address}'.`\n      );\n    }\n\n    return privateKey;\n  }\n\n  getWallet(address: string | Address): WalletUnlocked {\n    const privateKey = this.exportAccount(address);\n    return Wallet.fromPrivateKey(privateKey);\n  }\n}\n", "/* eslint-disable max-classes-per-file */\nimport type { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport type { WalletUnlocked } from '../wallet';\n\nexport type WalletManagerAccount = {\n  address: Address;\n  publicKey: string;\n  vaultId?: number;\n};\n\nexport type WalletManagerOptions = {\n  storage: StorageAbstract;\n};\n\nexport type VaultConfig = {\n  type: string;\n  title?: string;\n  secret?: string;\n};\n\nexport type VaultsState = Array<{\n  type: string;\n  title?: string;\n  data?: VaultConfig;\n  vault: Vault;\n}>;\n\nexport interface WalletManagerState {\n  vaults: VaultsState;\n}\n\nexport abstract class Vault<TOptions = { secret?: string }> {\n  static readonly type: string;\n\n  constructor(_options: TOptions) {\n    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, 'Not implemented.');\n  }\n\n  serialize(): TOptions {\n    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, 'Not implemented.');\n  }\n\n  getAccounts(): WalletManagerAccount[] {\n    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, 'Not implemented.');\n  }\n\n  addAccount(): WalletManagerAccount {\n    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, 'Not implemented.');\n  }\n\n  exportAccount(_address: Address): string {\n    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, 'Not implemented.');\n  }\n\n  getWallet(_address: Address): WalletUnlocked {\n    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, 'Not implemented.');\n  }\n}\n\nexport abstract class StorageAbstract {\n  abstract setItem(key: string, value: string): Promise<void>;\n  abstract getItem(key: string): Promise<string | null | undefined>;\n  abstract removeItem(key: string): Promise<void>;\n  abstract clear(): Promise<void>;\n}\n", "import type { JsonAbi, InputValue } from '@fuel-ts/abi-coder';\nimport { Interface } from '@fuel-ts/abi-coder';\nimport { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\n\nimport type { FakeResources } from '../account';\nimport { Account } from '../account';\nimport {\n  transactionRequestify,\n  isRequestInputResource,\n  isRequestInputResourceFromOwner,\n  isRequestInputCoinOrMessage,\n} from '../providers';\nimport type {\n  CallResult,\n  CoinQuantityLike,\n  ExcludeResourcesOption,\n  Provider,\n  Resource,\n  TransactionRequest,\n  TransactionRequestLike,\n  TransactionResponse,\n} from '../providers';\nimport { deployScriptOrPredicate } from '../utils/deployScriptOrPredicate';\n\nimport { getPredicateRoot } from './utils';\n\nexport type PredicateParams<\n  TData extends InputValue[] = InputValue[],\n  TConfigurables extends { [name: string]: unknown } | undefined = { [name: string]: unknown },\n> = {\n  bytecode: BytesLike;\n  provider: Provider;\n  abi: JsonAbi;\n  data?: TData;\n  configurableConstants?: TConfigurables;\n};\n\n/**\n * `Predicate` provides methods to populate transaction data with predicate information and sending transactions with them.\n */\nexport class Predicate<\n  TData extends InputValue[] = InputValue[],\n  TConfigurables extends { [name: string]: unknown } | undefined = { [name: string]: unknown },\n> extends Account {\n  bytes: Uint8Array;\n  predicateData: TData = [] as unknown as TData;\n  interface: Interface;\n  initialBytecode: Uint8Array;\n  configurableConstants: TConfigurables | undefined;\n  /**\n   * Creates an instance of the Predicate class.\n   *\n   * @param bytecode - The bytecode of the predicate.\n   * @param abi - The JSON ABI of the predicate.\n   * @param provider - The provider used to interact with the blockchain.\n   * @param data - The predicate input data (optional).\n   * @param configurableConstants - Optional configurable constants for the predicate.\n   */\n  constructor({\n    bytecode,\n    abi,\n    provider,\n    data,\n    configurableConstants,\n  }: PredicateParams<TData, TConfigurables>) {\n    const { predicateBytes, predicateInterface } = Predicate.processPredicateData(\n      bytecode,\n      abi,\n      configurableConstants\n    );\n    const address = new Address(getPredicateRoot(predicateBytes));\n    super(address, provider);\n\n    this.initialBytecode = arrayify(bytecode);\n    this.bytes = predicateBytes;\n    this.interface = predicateInterface;\n    this.configurableConstants = configurableConstants;\n    if (data !== undefined && data.length > 0) {\n      this.predicateData = data;\n    }\n  }\n\n  /**\n   * Populates the transaction data with predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns The transaction request with predicate data.\n   */\n  populateTransactionPredicateData<T extends TransactionRequest>(\n    transactionRequestLike: TransactionRequestLike\n  ) {\n    const request = transactionRequestify(transactionRequestLike) as T;\n\n    const placeholderIndex = this.getIndexFromPlaceholderWitness(request);\n\n    if (placeholderIndex !== -1) {\n      request.removeWitness(placeholderIndex);\n    }\n\n    request.inputs.filter(isRequestInputCoinOrMessage).forEach((input) => {\n      if (isRequestInputResourceFromOwner(input, this.address)) {\n        // eslint-disable-next-line no-param-reassign\n        input.predicate = hexlify(this.bytes);\n        // eslint-disable-next-line no-param-reassign\n        input.predicateData = hexlify(this.getPredicateData());\n        // eslint-disable-next-line no-param-reassign\n        input.witnessIndex = 0;\n      }\n    });\n\n    return request;\n  }\n\n  /**\n   * Sends a transaction with the populated predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns A promise that resolves to the transaction response.\n   */\n  override sendTransaction(\n    transactionRequestLike: TransactionRequestLike\n  ): Promise<TransactionResponse> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n\n    return super.sendTransaction(transactionRequest, { estimateTxDependencies: false });\n  }\n\n  /**\n   * Simulates a transaction with the populated predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns A promise that resolves to the call result.\n   */\n  override simulateTransaction(\n    transactionRequestLike: TransactionRequestLike\n  ): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    return super.simulateTransaction(transactionRequest, { estimateTxDependencies: false });\n  }\n\n  private getPredicateData(): Uint8Array {\n    if (!this.predicateData.length) {\n      return new Uint8Array();\n    }\n\n    const mainFn = this.interface?.functions.main;\n    return mainFn?.encodeArguments(this.predicateData) || new Uint8Array();\n  }\n\n  /**\n   * Creates a new Predicate instance from an existing Predicate instance.\n   * @param overrides - The data and configurable constants to override.\n   * @returns A new Predicate instance with the same bytecode, ABI and provider but with the ability to set the data and configurable constants.\n   */\n  toNewInstance(\n    overrides: Pick<PredicateParams<TData, TConfigurables>, 'data' | 'configurableConstants'> = {}\n  ) {\n    return new Predicate<TData, TConfigurables>({\n      bytecode: this.initialBytecode,\n      abi: this.interface.jsonAbi,\n      provider: this.provider,\n      data: overrides.data ?? this.predicateData,\n      configurableConstants: overrides.configurableConstants ?? this.configurableConstants,\n    });\n  }\n\n  /**\n   * Processes the predicate data and returns the altered bytecode and interface.\n   *\n   * @param bytes - The bytes of the predicate.\n   * @param jsonAbi - The JSON ABI of the predicate.\n   * @param configurableConstants - Optional configurable constants for the predicate.\n   * @returns An object containing the new predicate bytes and interface.\n   */\n  private static processPredicateData(\n    bytes: BytesLike,\n    jsonAbi: JsonAbi,\n    configurableConstants?: { [name: string]: unknown }\n  ) {\n    let predicateBytes = arrayify(bytes);\n    const abiInterface: Interface = new Interface(jsonAbi);\n\n    if (abiInterface.functions.main === undefined) {\n      throw new FuelError(\n        ErrorCode.ABI_MAIN_METHOD_MISSING,\n        'Cannot use ABI without \"main\" function.'\n      );\n    }\n\n    if (configurableConstants && Object.keys(configurableConstants).length) {\n      predicateBytes = Predicate.setConfigurableConstants(\n        predicateBytes,\n        configurableConstants,\n        abiInterface\n      );\n    }\n\n    return {\n      predicateBytes,\n      predicateInterface: abiInterface,\n    };\n  }\n\n  /**\n   * Retrieves resources satisfying the spend query for the account.\n   *\n   * @param quantities - IDs of coins to exclude.\n   * @param excludedIds - IDs of resources to be excluded from the query.\n   * @returns A promise that resolves to an array of Resources.\n   */\n  override async getResourcesToSpend(\n    quantities: CoinQuantityLike[] /** IDs of coins to exclude */,\n    excludedIds?: ExcludeResourcesOption\n  ): Promise<Resource[]> {\n    const resources = await this.provider.getResourcesToSpend(\n      this.address,\n      quantities,\n      excludedIds\n    );\n    return resources.map((resource) => ({\n      ...resource,\n      predicate: hexlify(this.bytes),\n      predicateData: hexlify(this.getPredicateData()),\n    }));\n  }\n\n  /**\n   * Generates an array of fake resources based on the provided coins.\n   *\n   * @param coins - An array of `FakeResources` objects representing the coins.\n   * @returns An array of `Resource` objects with generated properties.\n   */\n  override generateFakeResources(coins: FakeResources[]): Array<Resource> {\n    return super.generateFakeResources(coins).map((coin) => ({\n      ...coin,\n      predicate: hexlify(this.bytes),\n      predicateData: hexlify(this.getPredicateData()),\n    }));\n  }\n\n  /**\n   * Sets the configurable constants for the predicate.\n   *\n   * @param bytes - The bytes of the predicate.\n   * @param configurableConstants - Configurable constants to be set.\n   * @param abiInterface - The ABI interface of the predicate.\n   * @returns The mutated bytes with the configurable constants set.\n   */\n  private static setConfigurableConstants(\n    bytes: Uint8Array,\n    configurableConstants: { [name: string]: unknown },\n    abiInterface: Interface\n  ) {\n    const mutatedBytes = bytes;\n\n    try {\n      if (Object.keys(abiInterface.configurables).length === 0) {\n        throw new FuelError(\n          ErrorCode.INVALID_CONFIGURABLE_CONSTANTS,\n          'Predicate has no configurable constants to be set'\n        );\n      }\n\n      Object.entries(configurableConstants).forEach(([key, value]) => {\n        if (!abiInterface?.configurables[key]) {\n          throw new FuelError(\n            ErrorCode.CONFIGURABLE_NOT_FOUND,\n            `No configurable constant named '${key}' found in the Predicate`\n          );\n        }\n\n        const { offset } = abiInterface.configurables[key];\n\n        const encoded = abiInterface.encodeConfigurable(key, value as InputValue);\n\n        mutatedBytes.set(encoded, offset);\n      });\n    } catch (err) {\n      throw new FuelError(\n        ErrorCode.INVALID_CONFIGURABLE_CONSTANTS,\n        `Error setting configurable constants: ${(<Error>err).message}.`\n      );\n    }\n\n    return mutatedBytes;\n  }\n\n  /**\n   * Returns the index of the witness placeholder that was added to this predicate.\n   * If no witness placeholder was added, it returns -1.\n   * @param request - The transaction request.\n   * @returns The index of the witness placeholder, or -1 if there is no witness placeholder.\n   */\n  private getIndexFromPlaceholderWitness(request: TransactionRequest): number {\n    const predicateInputs = request.inputs\n      .filter(isRequestInputResource)\n      .filter((input) => isRequestInputResourceFromOwner(input, this.address));\n\n    let index = -1;\n\n    const hasEmptyPredicateInputs = predicateInputs.find((input) => !input.predicate);\n\n    if (hasEmptyPredicateInputs) {\n      index = hasEmptyPredicateInputs.witnessIndex;\n\n      const allInputsAreEmpty = predicateInputs.every((input) => !input.predicate);\n\n      if (!allInputsAreEmpty) {\n        /**\n         * If at least one resource was added as a predicate resource, we need to check if it was the\n         * first one. If that is the case, we don't need to remove the witness placeholder\n         * as this was added with the \"witnessIndex\" as 0 and without a placeholder witness. Later if\n         * any resource without a predicate is added, it will have the same witnessIndex because it has the\n         * same owner.\n         */\n        const wasFilledInputAddedFirst = !!predicateInputs[0]?.predicate;\n\n        if (wasFilledInputAddedFirst) {\n          index = -1;\n        }\n      }\n    }\n\n    return index;\n  }\n\n  /**\n   *\n   * @param account - The account used to pay the deployment costs.\n   * @returns The _blobId_ and a _waitForResult_ callback that returns the deployed predicate\n   * once the blob deployment transaction finishes.\n   *\n   * The returned loader predicate will have the same configurable constants\n   * as the original predicate which was used to generate the loader predicate.\n   */\n  async deploy<T = this>(account: Account) {\n    return deployScriptOrPredicate<T>({\n      deployer: account,\n      abi: this.interface.jsonAbi,\n      bytecode: this.bytes,\n      loaderInstanceCallback: (loaderBytecode, newAbi) =>\n        new Predicate({\n          bytecode: loaderBytecode,\n          abi: newAbi,\n          provider: this.provider,\n          data: this.predicateData,\n        }) as T,\n    });\n  }\n}\n", "import type { JsonAbi } from '@fuel-ts/abi-coder';\nimport { FuelError, ErrorCode } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport type { Account } from '../account';\nimport { BlobTransactionRequest, calculateGasFee, TransactionStatus } from '../providers';\n\nimport {\n  getBytecodeConfigurableOffset,\n  getBytecodeId,\n  getPredicateScriptLoaderInstructions,\n} from './predicate-script-loader-instructions';\n\nasync function fundBlobTx(deployer: Account, blobTxRequest: BlobTransactionRequest) {\n  // Check the account can afford to deploy all chunks and loader\n  let totalCost = bn(0);\n  const chainInfo = await deployer.provider.getChain();\n  const gasPrice = await deployer.provider.estimateGasPrice(10);\n  const priceFactor = chainInfo.consensusParameters.feeParameters.gasPriceFactor;\n\n  const minGas = blobTxRequest.calculateMinGas(chainInfo);\n\n  const minFee = calculateGasFee({\n    gasPrice,\n    gas: minGas,\n    priceFactor,\n    tip: blobTxRequest.tip,\n  }).add(1);\n\n  totalCost = totalCost.add(minFee);\n\n  if (totalCost.gt(await deployer.getBalance())) {\n    throw new FuelError(ErrorCode.FUNDS_TOO_LOW, 'Insufficient balance to deploy predicate.');\n  }\n\n  const txCost = await deployer.getTransactionCost(blobTxRequest);\n  // eslint-disable-next-line no-param-reassign\n  blobTxRequest.maxFee = txCost.maxFee;\n  return deployer.fund(blobTxRequest, txCost);\n}\n\nfunction adjustConfigurableOffsets(jsonAbi: JsonAbi, configurableOffsetDiff: number) {\n  const { configurables: readOnlyConfigurables } = jsonAbi;\n  const configurables: JsonAbi['configurables'] = [];\n  readOnlyConfigurables.forEach((config) => {\n    // @ts-expect-error shut up the read-only thing\n    configurables.push({ ...config, offset: config.offset - configurableOffsetDiff });\n  });\n  return { ...jsonAbi, configurables } as JsonAbi;\n}\n\ninterface Deployer<T> {\n  deployer: Account;\n  bytecode: Uint8Array;\n  abi: JsonAbi;\n  loaderInstanceCallback: (loaderBytecode: Uint8Array, newAbi: JsonAbi) => T;\n}\n\nexport async function deployScriptOrPredicate<T>({\n  deployer,\n  bytecode,\n  abi,\n  loaderInstanceCallback,\n}: Deployer<T>) {\n  const blobId = getBytecodeId(arrayify(bytecode));\n\n  const configurableOffset = getBytecodeConfigurableOffset(arrayify(bytecode));\n  const byteCodeWithoutConfigurableSection = bytecode.slice(0, configurableOffset);\n\n  const blobTxRequest = new BlobTransactionRequest({\n    blobId,\n    witnessIndex: 0,\n    witnesses: [byteCodeWithoutConfigurableSection],\n  });\n\n  const { loaderBytecode, blobOffset } = getPredicateScriptLoaderInstructions(\n    arrayify(bytecode),\n    arrayify(blobId)\n  );\n\n  const newConfigurableOffsetDiff = byteCodeWithoutConfigurableSection.length - (blobOffset || 0);\n  const newAbi = adjustConfigurableOffsets(abi, newConfigurableOffsetDiff);\n\n  const blobExists = (await deployer.provider.getBlobs([blobId])).length > 0;\n\n  const loaderInstance = loaderInstanceCallback(loaderBytecode, newAbi);\n  if (blobExists) {\n    return {\n      waitForResult: () => Promise.resolve(loaderInstance),\n      blobId,\n    };\n  }\n\n  const fundedBlobRequest = await fundBlobTx(deployer, blobTxRequest);\n\n  // Transaction id is unset until we have funded the create tx, which is dependent on the blob tx\n  const waitForResult = async () => {\n    try {\n      const blobTx = await deployer.sendTransaction(fundedBlobRequest);\n      const result = await blobTx.waitForResult();\n\n      if (result.status !== TransactionStatus.success) {\n        throw new Error();\n      }\n    } catch (err: unknown) {\n      throw new FuelError(ErrorCode.TRANSACTION_FAILED, 'Failed to deploy predicate chunk');\n    }\n\n    return loaderInstance;\n  };\n\n  return {\n    waitForResult,\n    blobId,\n  };\n}\n", "import { BigNumberCoder } from '@fuel-ts/abi-coder';\nimport { sha256 } from '@fuel-ts/hasher';\nimport { concat } from '@fuel-ts/utils';\nimport * as asm from '@fuels/vm-asm';\n\nconst BLOB_ID_SIZE = 32;\nconst REG_ADDRESS_OF_DATA_AFTER_CODE = 0x10;\nconst REG_START_OF_LOADED_CODE = 0x11;\nconst REG_GENERAL_USE = 0x12;\nconst WORD_SIZE = 8; // size in bytes\n\nexport const DATA_OFFSET_INDEX = 8;\nexport const CONFIGURABLE_OFFSET_INDEX = 16;\n\n/**\n * Get the offset of the data section in the bytecode\n *\n * @param bytecode - The bytecode to get the offset from\n * @returns The offset of the data section\n */\nexport function getBytecodeDataOffset(bytecode: Uint8Array): number {\n  const [offset] = new BigNumberCoder('u64').decode(bytecode, DATA_OFFSET_INDEX);\n  return offset.toNumber();\n}\n\n/**\n * Get the offset of the configurable section in the bytecode\n *\n * @param bytecode - The bytecode to get the offset from\n * @returns The offset of the configurable section\n */\nexport function getBytecodeConfigurableOffset(bytecode: Uint8Array): number {\n  const [offset] = new BigNumberCoder('u64').decode(bytecode, CONFIGURABLE_OFFSET_INDEX);\n  return offset.toNumber();\n}\n\n/**\n * Takes bytecode and generates it's associated bytecode ID.\n *\n * The bytecode ID is a hash of the bytecode when sliced at the configurable offset. This\n * superseded legacy blob IDs when uploading blobs for scripts and predicates so that\n * the bytecode ID is equal to the legacy blob ID. Therefore blobs can be used for ABI verification.\n *\n * @param bytecode - The bytecode to get the id from\n * @returns The id of the bytecode\n */\nexport function getBytecodeId(bytecode: Uint8Array): string {\n  const configurableOffset = getBytecodeConfigurableOffset(bytecode);\n  const byteCodeWithoutConfigurableSection = bytecode.slice(0, configurableOffset);\n\n  return sha256(byteCodeWithoutConfigurableSection);\n}\n\n/**\n * Takes bytecode and generates it's associated legacy blob ID.\n *\n * The legacy blob ID is a hash of the bytecode when sliced at the data section offset.\n *\n * @param bytecode - The bytecode to get the id from\n * @returns The id of the bytecode\n */\nexport function getLegacyBlobId(bytecode: Uint8Array): string {\n  const dataOffset = getBytecodeDataOffset(bytecode);\n  const byteCodeWithoutDataSection = bytecode.slice(0, dataOffset);\n\n  return sha256(byteCodeWithoutDataSection);\n}\n\nexport function getPredicateScriptLoaderInstructions(\n  originalBinary: Uint8Array,\n  blobId: Uint8Array\n) {\n  // The final code is going to have this structure:\n  // 1. loader instructions\n  // 2. blob id\n  // 3. length_of_data_section\n  // 4. the data_section (updated with configurables as needed)\n\n  const { RegId, Instruction } = asm;\n\n  const REG_PC = RegId.pc().to_u8();\n  const REG_SP = RegId.sp().to_u8();\n  const REG_IS = RegId.is().to_u8();\n\n  const getInstructions = (numOfInstructions: number) => [\n    // 1. Load the blob content into memory\n    // Find the start of the hardcoded blob ID, which is located after the loader code ends.\n    asm.move_(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_PC),\n    // hold the address of the blob ID.\n    asm.addi(\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      numOfInstructions * Instruction.size()\n    ),\n    // The code is going to be loaded from the current value of SP onwards, save\n    // the location into REG_START_OF_LOADED_CODE so we can jump into it at the end.\n    asm.move_(REG_START_OF_LOADED_CODE, REG_SP),\n    // REG_GENERAL_USE to hold the size of the blob.\n    asm.bsiz(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE),\n    // Push the blob contents onto the stack.\n    asm.ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 1),\n    // Move on to the data section length\n    asm.addi(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_ADDRESS_OF_DATA_AFTER_CODE, BLOB_ID_SIZE),\n    // load the size of the data section into REG_GENERAL_USE\n    asm.lw(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE, 0),\n    // after we have read the length of the data section, we move the pointer to the actual\n    // data by skipping WORD_SIZE bytes.\n    asm.addi(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_ADDRESS_OF_DATA_AFTER_CODE, WORD_SIZE),\n    // load the data section of the executable\n    asm.ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 2),\n    // Jump into the memory where the contract is loaded.\n    // What follows is called _jmp_mem by the sway compiler.\n    // Subtract the address contained in IS because jmp will add it back.\n    asm.sub(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, REG_IS),\n    // jmp will multiply by 4, so we need to divide to cancel that out.\n    asm.divi(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, 4),\n    // Jump to the start of the contract we loaded.\n    asm.jmp(REG_START_OF_LOADED_CODE),\n  ];\n\n  const getInstructionsNoDataSection = (numOfInstructions: number) => [\n    // 1. Load the blob content into memory\n    // Find the start of the hardcoded blob ID, which is located after the loader code ends.\n    // 1. Load the blob content into memory\n    // Find the start of the hardcoded blob ID, which is located after the loader code ends.\n    asm.move_(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_PC),\n    // hold the address of the blob ID.\n    asm.addi(\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      numOfInstructions * Instruction.size()\n    ),\n    // The code is going to be loaded from the current value of SP onwards, save\n    // the location into REG_START_OF_LOADED_CODE so we can jump into it at the end.\n    asm.move_(REG_START_OF_LOADED_CODE, REG_SP),\n    // REG_GENERAL_USE to hold the size of the blob.\n    asm.bsiz(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE),\n    // Push the blob contents onto the stack.\n    asm.ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 1),\n    // Jump into the memory where the contract is loaded.\n    // What follows is called _jmp_mem by the sway compiler.\n    // Subtract the address contained in IS because jmp will add it back.\n    asm.sub(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, REG_IS),\n    // jmp will multiply by 4, so we need to divide to cancel that out.\n    asm.divi(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, 4),\n    // Jump to the start of the contract we loaded.\n    asm.jmp(REG_START_OF_LOADED_CODE),\n  ];\n\n  const offset = getBytecodeConfigurableOffset(originalBinary);\n\n  // if the binary length is smaller than the offset\n  if (originalBinary.length < offset) {\n    throw new Error(\n      `Data section offset is out of bounds, offset: ${offset}, binary length: ${originalBinary.length}`\n    );\n  }\n\n  // Extract the configurable section from the binary (slice from the configurable offset onwards)\n  const configurableSection = originalBinary.slice(offset);\n\n  // Check if the configurable section is non-empty\n  if (configurableSection.length > 0) {\n    // Get the number of instructions (assuming it won't exceed u16::MAX)\n    const numOfInstructions = getInstructions(0).length;\n    if (numOfInstructions > 65535) {\n      throw new Error('Too many instructions, exceeding u16::MAX.');\n    }\n\n    // Convert instructions to bytes\n    const instructionBytes = new Uint8Array(\n      getInstructions(numOfInstructions).flatMap((instruction) =>\n        Array.from(instruction.to_bytes())\n      )\n    );\n\n    // Convert blobId to bytes\n    const blobBytes = new Uint8Array(blobId);\n\n    // Convert data section length to big-endian 8-byte array\n    const dataSectionLenBytes = new Uint8Array(8);\n    const dataView = new DataView(dataSectionLenBytes.buffer);\n    dataView.setBigUint64(0, BigInt(configurableSection.length), false); // false for big-endian\n\n    // Combine the instruction bytes, blob bytes, data section length, and the data section\n    const loaderBytecode = new Uint8Array([\n      ...instructionBytes,\n      ...blobBytes,\n      ...dataSectionLenBytes,\n    ]);\n\n    return {\n      loaderBytecode: concat([loaderBytecode, configurableSection]),\n      blobOffset: loaderBytecode.length,\n    };\n  }\n  // Handle case where there is no configurable section\n  const numOfInstructions = getInstructionsNoDataSection(0).length;\n  if (numOfInstructions > 65535) {\n    throw new Error('Too many instructions, exceeding u16::MAX.');\n  }\n\n  // Convert instructions to bytes\n  const instructionBytes = new Uint8Array(\n    getInstructionsNoDataSection(numOfInstructions).flatMap((instruction) =>\n      Array.from(instruction.to_bytes())\n    )\n  );\n\n  // Convert blobId to bytes\n  const blobBytes = new Uint8Array(blobId);\n\n  // Combine the instruction bytes and blob bytes\n  const loaderBytecode = new Uint8Array([...instructionBytes, ...blobBytes]);\n\n  return { loaderBytecode };\n}\n", "import { hash } from '@fuel-ts/hasher';\nimport { calcRoot } from '@fuel-ts/merkle';\nimport { chunkAndPadBytes, hexlify, concat, arrayify } from '@fuel-ts/utils';\nimport type { BytesLike } from '@fuel-ts/utils';\n\n/**\n * @hidden\n *\n * Calculates the predicate root for a given bytecode and chain ID.\n *\n * @param bytecode - The bytecode represented as a BytesLike object.\n * @param chainId - The ID of the chain associated with the bytecode.\n * @returns The predicate root as a string.\n */\nexport const getPredicateRoot = (bytecode: BytesLike): string => {\n  const chunkSize = 16 * 1024;\n  const bytes = arrayify(bytecode);\n  const chunks = chunkAndPadBytes(bytes, chunkSize);\n  const codeRoot = calcRoot(chunks.map((c) => hexlify(c)));\n\n  const predicateRoot = hash(concat(['0x4655454C', codeRoot]));\n  return predicateRoot;\n};\n", "import type { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport { Account } from '../account';\nimport { Provider } from '../providers';\nimport type { StorageAbstract } from '../wallet-manager';\n\nimport { FuelConnector } from './fuel-connector';\nimport {\n  FuelConnectorMethods,\n  FuelConnectorEventTypes,\n  FuelConnectorEventType,\n  LocalStorage,\n} from './types';\nimport type { Network, FuelConnectorEventsType, TargetObject } from './types';\nimport type { CacheFor } from './utils';\nimport { cacheFor, deferPromise, withTimeout } from './utils';\n\n// This is the time to wait for the connector\n// to be available before returning false for hasConnector.\nconst HAS_CONNECTOR_TIMEOUT = 2_000;\n// The time to cache the ping result, as is not\n// expected to change the availability of the connector to\n// change too often we can safely cache the result for 5 seconds\n// at minimum.\nconst PING_CACHE_TIME = 5_000;\n\nconst { warn } = console;\n\nexport type FuelConfig = {\n  connectors?: Array<FuelConnector>;\n  storage?: StorageAbstract | null;\n  targetObject?: TargetObject;\n};\n\nexport type FuelConnectorSelectOptions = {\n  emitEvents?: boolean;\n};\n\nexport type Status = {\n  installed: boolean;\n  connected: boolean;\n};\n\ninterface FuelSdk {\n  // #region connector-manager-method-connectors\n  connectors: () => Promise<Array<FuelConnector>>;\n  // #endregion connector-manager-method-connectors\n  // #region connector-manager-method-getConnector\n  getConnector: (connector: FuelConnector | string) => FuelConnector | null;\n  // #endregion connector-manager-method-getConnector\n  // #region connector-manager-method-hasConnector\n  hasConnector(): Promise<boolean>;\n  // #endregion connector-manager-method-hasConnector\n  // #region connector-manager-method-selectConnector\n  selectConnector(connectorName: string, options: FuelConnectorSelectOptions): Promise<boolean>;\n  // #endregion connector-manager-method-selectConnector\n  // #region connector-manager-method-currentConnector\n  currentConnector(): FuelConnector | null | undefined;\n  // #endregion connector-manager-method-currentConnector\n  // #region connector-manager-method-hasWallet\n  hasWallet(): Promise<boolean>;\n  // #endregion connector-manager-method-hasWallet\n  // #region connector-manager-method-getWallet\n  getWallet(address: string | Address, providerOrNetwork?: Provider | Network): Promise<Account>;\n  // #endregion connector-manager-method-getWallet\n  // #region connector-manager-method-unsubscribe\n  unsubscribe(): void;\n  // #endregion connector-manager-method-unsubscribe\n  // #region connector-manager-method-clean\n  clean(): Promise<void>;\n  // #endregion connector-manager-method-clean\n  // #region connector-manager-method-destroy\n  destroy(): Promise<void>;\n  // #endregion connector-manager-method-destroy\n}\n\nexport class Fuel extends FuelConnector implements FuelSdk {\n  static STORAGE_KEY = 'fuel-current-connector';\n  static defaultConfig: FuelConfig = {};\n  private _storage?: StorageAbstract | null = null;\n  private _connectors: Array<FuelConnector> = [];\n  private _targetObject: TargetObject | null = null;\n  private _unsubscribes: Array<() => void> = [];\n  private _targetUnsubscribe = () => {};\n  private _pingCache: CacheFor = {};\n  private _currentConnector?: FuelConnector | null;\n  private _initializationPromise: Promise<void> | null = null;\n\n  constructor(config: FuelConfig = Fuel.defaultConfig) {\n    super();\n    // Increase the limit of listeners\n    this.setMaxListeners(1_000);\n    // Set all connectors\n    this._connectors = config.connectors ?? [];\n    // Set the target object to listen for global events\n    this._targetObject = this.getTargetObject(config.targetObject);\n    // Set default storage\n    this._storage = config.storage === undefined ? this.getStorage() : config.storage;\n    // Setup all methods\n    this.setupMethods();\n    this._initializationPromise = this.initialize();\n  }\n\n  private async initialize(): Promise<void> {\n    try {\n      const connectResponse = this.setDefaultConnector();\n      this._targetUnsubscribe = this.setupConnectorListener();\n      await connectResponse;\n    } catch (error) {\n      throw new FuelError(ErrorCode.INVALID_PROVIDER, 'Error initializing Fuel Connector');\n    }\n  }\n\n  public async init(): Promise<Fuel> {\n    await this._initializationPromise;\n    return this;\n  }\n\n  /**\n   * Return the target object to listen for global events.\n   */\n  private getTargetObject(targetObject?: TargetObject): TargetObject | null {\n    if (targetObject) {\n      return targetObject;\n    }\n    if (typeof window !== 'undefined') {\n      return window;\n    }\n    if (typeof document !== 'undefined') {\n      return document;\n    }\n    return null;\n  }\n\n  /**\n   * Return the storage used.\n   */\n  private getStorage(): StorageAbstract | undefined {\n    if (typeof window !== 'undefined') {\n      return new LocalStorage(window.localStorage);\n    }\n    return undefined;\n  }\n\n  /**\n   * Setup the default connector from the storage.\n   */\n  private async setDefaultConnector(): Promise<boolean | undefined> {\n    const connectorName =\n      (await this._storage?.getItem(Fuel.STORAGE_KEY)) || this._connectors[0]?.name;\n    if (connectorName) {\n      // Setup all events for the current connector\n      return this.selectConnector(connectorName, {\n        emitEvents: false,\n      });\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Start listener for all the events of the current\n   * connector and emit them to the Fuel instance\n   */\n  private setupConnectorEvents(events: string[]): void {\n    if (!this._currentConnector) {\n      return;\n    }\n    const currentConnector = this._currentConnector;\n    this._unsubscribes.map((unSub) => unSub());\n    this._unsubscribes = events.map((event) => {\n      const handler = (...args: unknown[]) => this.emit(event, ...args);\n      currentConnector.on(event as FuelConnectorEventsType, handler);\n      return () => currentConnector.off(event, handler);\n    });\n  }\n\n  /**\n   * Call method from the current connector.\n   */\n  private async callMethod(method: string, ...args: unknown[]) {\n    const hasConnector = await this.hasConnector();\n    await this.pingConnector();\n    if (!this._currentConnector || !hasConnector) {\n      throw new FuelError(\n        ErrorCode.MISSING_CONNECTOR,\n        `No connector selected for calling ${method}. Use hasConnector before executing other methods.`\n      );\n    }\n    if (typeof this._currentConnector[method as keyof FuelConnector] === 'function') {\n      return (this._currentConnector[method as keyof FuelConnector] as CallableFunction)(...args);\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Create a method for each method proxy that is available on the Common interface\n   * and call the method from the current connector.\n   */\n  private setupMethods(): void {\n    Object.values(FuelConnectorMethods).forEach((method) => {\n      this[method] = async (...args: unknown[]) => this.callMethod(method, ...args);\n    });\n  }\n\n  /**\n   * Fetch the status of a connector and set the installed and connected\n   * status.\n   */\n  private async fetchConnectorStatus(\n    connector: FuelConnector & { _latestUpdate?: number }\n  ): Promise<Status> {\n    // Control fetch status to avoid rewriting the status\n    // on late responses in this way even if a response is\n    // late we can avoid rewriting the status of the connector\n    const requestTimestamp = Date.now();\n    const [isConnected, ping] = await Promise.allSettled([\n      withTimeout(connector.isConnected()),\n      withTimeout(this.pingConnector(connector)),\n    ]);\n    // If the requestTimestamp is greater than the latest update\n    // we can ignore the response as is treated as stale.\n    const isStale = requestTimestamp < (connector._latestUpdate || 0);\n    if (!isStale) {\n      // eslint-disable-next-line no-param-reassign\n      connector._latestUpdate = Date.now();\n      // eslint-disable-next-line no-param-reassign\n      connector.installed = ping.status === 'fulfilled' && ping.value;\n      // eslint-disable-next-line no-param-reassign\n      connector.connected = isConnected.status === 'fulfilled' && isConnected.value;\n    }\n    return {\n      installed: connector.installed,\n      connected: connector.connected,\n    };\n  }\n\n  /**\n   * Fetch the status of all connectors and set the installed and connected\n   * status.\n   */\n  private async fetchConnectorsStatus(): Promise<Status[]> {\n    return Promise.all(\n      this._connectors.map(async (connector) => this.fetchConnectorStatus(connector))\n    );\n  }\n\n  /**\n   * Fetch the status of a connector and set the installed and connected\n   * status. If no connector is provided it will ping the current connector.\n   */\n  private async pingConnector(connector?: FuelConnector) {\n    const curConnector = connector || this._currentConnector;\n    if (!curConnector) {\n      return false;\n    }\n    // If finds a ping in the cache and the value is true\n    // return from cache\n    try {\n      return await cacheFor(async () => withTimeout(curConnector.ping()), {\n        key: curConnector.name,\n        cache: this._pingCache,\n        cacheTime: PING_CACHE_TIME,\n      })();\n    } catch {\n      throw new FuelError(ErrorCode.INVALID_PROVIDER, 'Current connector is not available.');\n    }\n  }\n\n  /**\n   * Setup a listener for the FuelConnector event and add the connector\n   * to the list of new connectors.\n   */\n  private setupConnectorListener = () => {\n    const { _targetObject: targetObject } = this;\n    const eventName = FuelConnectorEventType;\n    if (targetObject?.on) {\n      targetObject.on(eventName, this.addConnector);\n      return () => {\n        targetObject.off?.(eventName, this.addConnector);\n      };\n    }\n    if (targetObject?.addEventListener) {\n      const handler = (e: CustomEvent<FuelConnector>) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.addConnector(e.detail);\n      };\n      targetObject.addEventListener(eventName, handler);\n      return () => {\n        targetObject.removeEventListener?.(eventName, handler);\n      };\n    }\n    return () => {};\n  };\n\n  /**\n   * Add a new connector to the list of connectors.\n   */\n  private addConnector = async (connector: FuelConnector): Promise<void> => {\n    if (!this.getConnector(connector)) {\n      this._connectors.push(connector);\n    }\n    // Fetch the status of the new connector\n    await this.fetchConnectorStatus(connector);\n    // Emit connectors events once the connector list changes\n    this.emit(this.events.connectors, this._connectors);\n    // If the current connector is not set\n    if (!this._currentConnector) {\n      // set the new connector as currentConnector\n      await this.selectConnector(connector.name, {\n        emitEvents: false,\n      });\n    }\n  };\n\n  private triggerConnectorEvents = async () => {\n    const [isConnected, networks, currentNetwork] = await Promise.all([\n      this.isConnected(),\n      this.networks(),\n      this.currentNetwork(),\n    ]);\n    this.emit(this.events.connection, isConnected);\n    this.emit(this.events.networks, networks);\n    this.emit(this.events.currentNetwork, currentNetwork);\n    if (isConnected) {\n      const [accounts, currentAccount] = await Promise.all([\n        this.accounts(),\n        this.currentAccount(),\n      ]);\n      this.emit(this.events.accounts, accounts);\n      this.emit(this.events.currentAccount, currentAccount);\n    }\n  };\n\n  /**\n   * Get a connector from the list of connectors.\n   */\n  getConnector = (connector: FuelConnector | string): FuelConnector | null =>\n    this._connectors.find((c) => {\n      const connectorName = typeof connector === 'string' ? connector : connector.name;\n      return c.name === connectorName || c === connector;\n    }) || null;\n\n  /**\n   * Return the list of connectors with the status of installed and connected.\n   */\n  async connectors(): Promise<Array<FuelConnector>> {\n    await this.fetchConnectorsStatus();\n    return this._connectors;\n  }\n\n  /**\n   * Set the current connector to be used.\n   */\n  async selectConnector(\n    connectorName: string,\n    options: FuelConnectorSelectOptions = {\n      emitEvents: true,\n    }\n  ): Promise<boolean> {\n    const connector = this.getConnector(connectorName);\n    if (!connector) {\n      return false;\n    }\n    if (this._currentConnector?.name === connectorName) {\n      return true;\n    }\n    const { installed } = await this.fetchConnectorStatus(connector);\n    if (installed) {\n      this._currentConnector = connector;\n      this.emit(this.events.currentConnector, connector);\n      this.setupConnectorEvents(Object.values(FuelConnectorEventTypes));\n      await this._storage?.setItem(Fuel.STORAGE_KEY, connector.name);\n      // If emitEvents is true we query all the data from the connector\n      // and emit the events to the Fuel instance allowing the application to\n      // react to changes in the connector state.\n      if (options.emitEvents) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.triggerConnectorEvents();\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Return the current selected connector.\n   */\n  currentConnector(): FuelConnector | null | undefined {\n    return this._currentConnector;\n  }\n\n  /**\n   * Return true if any connector is available.\n   */\n  async hasConnector(): Promise<boolean> {\n    // If there is a current connector return true\n    // as the connector is ready\n    if (this._currentConnector) {\n      return true;\n    }\n    // If there is no current connector\n    // wait for the current connector to be set\n    // for 1 second and return false if is not set\n    const defer = deferPromise<boolean>();\n    this.once(this.events.currentConnector, () => {\n      defer.resolve(true);\n    });\n    // As the max ping time is 1 second we wait for 2 seconds\n    // to allow applications to react to the current connector\n    return withTimeout(defer.promise, HAS_CONNECTOR_TIMEOUT)\n      .then(() => true)\n      .catch(() => false);\n  }\n\n  async hasWallet(): Promise<boolean> {\n    return this.hasConnector();\n  }\n\n  /**\n   * Return a Fuel Provider instance with extends features to work with\n   * connectors.\n   *\n   * @deprecated getProvider is deprecated and is going to be removed in the future, use getWallet instead.\n   */\n  async getProvider(providerOrNetwork?: Provider | Network): Promise<Provider> {\n    warn(\n      'getProvider is deprecated and is going to be removed in the future, use getWallet instead.'\n    );\n    return this._getProvider(providerOrNetwork);\n  }\n\n  /**\n   * Return a Fuel Provider instance with extends features to work with\n   * connectors.\n   */\n  private async _getProvider(providerOrNetwork?: Provider | Network): Promise<Provider> {\n    // Decide which provider to use based on the providerOrNetwork\n    let provider: Provider;\n    // If provider is a valid instance of a Provider use it\n    if (providerOrNetwork && 'getTransactionResponse' in providerOrNetwork) {\n      provider = providerOrNetwork;\n      // If the provided param is a valid network use it\n    } else if (providerOrNetwork && 'chainId' in providerOrNetwork && 'url' in providerOrNetwork) {\n      provider = new Provider(providerOrNetwork.url);\n      // If nor provider or network is provided use the current network\n    } else if (!providerOrNetwork) {\n      const currentNetwork = await this.currentNetwork();\n      provider = new Provider(currentNetwork.url);\n      // If a provider or network was informed but is not valid\n      // throw an error\n    } else {\n      throw new FuelError(ErrorCode.INVALID_PROVIDER, 'Provider is not valid.');\n    }\n    return provider;\n  }\n\n  /**\n   * Return a Fuel Wallet Locked instance with extends features to work with\n   * connectors.\n   */\n  async getWallet(\n    address: string | Address,\n    providerOrNetwork?: Provider | Network\n  ): Promise<Account> {\n    const provider = await this._getProvider(providerOrNetwork);\n    return new Account(address, provider, this);\n  }\n\n  /**\n   * Remove all open listeners this is useful when you want to\n   * remove the Fuel instance and avoid memory leaks.\n   */\n  unsubscribe(): void {\n    // Unsubscribe from all events\n    this._unsubscribes.map((unSub) => unSub());\n    this._targetUnsubscribe();\n    // Remove all listeners from fuel instance\n    this.removeAllListeners();\n  }\n\n  /**\n   * Clean all the data from the storage.\n   */\n  async clean(): Promise<void> {\n    await this._storage?.removeItem(Fuel.STORAGE_KEY);\n  }\n\n  /**\n   * Removes all listeners and cleans the storage.\n   */\n  async destroy(): Promise<void> {\n    this.unsubscribe();\n    await this.clean();\n  }\n}\n", "/* eslint-disable @typescript-eslint/require-await */\nimport { FuelError } from '@fuel-ts/errors';\nimport type { HashableMessage } from '@fuel-ts/hasher';\nimport { EventEmitter } from 'events';\n\nimport type { Asset } from '../assets/types';\nimport type { TransactionRequestLike, TransactionResponse } from '../providers';\n\nimport { FuelConnectorEventTypes } from './types';\nimport type {\n  FuelConnectorEvents,\n  ConnectorMetadata,\n  FuelABI,\n  Network,\n  FuelEventArg,\n  Version,\n  SelectNetworkArguments,\n  FuelConnectorSendTxParams,\n} from './types';\n\ninterface Connector {\n  // #region fuel-connector-method-ping\n  ping(): Promise<boolean>;\n  // #endregion fuel-connector-method-ping\n  // #region fuel-connector-method-version\n  version(): Promise<Version>;\n  // #endregion fuel-connector-method-version\n  // #region fuel-connector-method-isConnected\n  isConnected(): Promise<boolean>;\n  // #endregion fuel-connector-method-isConnected\n  // #region fuel-connector-method-accounts\n  accounts(): Promise<Array<string>>;\n  // #endregion fuel-connector-method-accounts\n  // #region fuel-connector-method-connect\n  connect(): Promise<boolean>;\n  // #endregion fuel-connector-method-connect\n  // #region fuel-connector-method-disconnect\n  disconnect(): Promise<boolean>;\n  // #endregion fuel-connector-method-disconnect\n  // #region fuel-connector-method-signMessage\n  signMessage(address: string, message: HashableMessage): Promise<string>;\n  // #endregion fuel-connector-method-signMessage\n  // #region fuel-connector-method-signTransaction\n  signTransaction(address: string, transaction: TransactionRequestLike): Promise<string>;\n  // #endregion fuel-connector-method-signTransaction\n  // #region fuel-connector-method-sendTransaction\n  sendTransaction(\n    address: string,\n    transaction: TransactionRequestLike,\n    params?: FuelConnectorSendTxParams\n  ): Promise<string | TransactionResponse>;\n  // #endregion fuel-connector-method-sendTransaction\n  // #region fuel-connector-method-currentAccount\n  currentAccount(): Promise<string | null>;\n  // #endregion fuel-connector-method-currentAccount\n  // #region fuel-connector-method-addAssets\n  addAssets(assets: Array<Asset>): Promise<boolean>;\n  // #endregion fuel-connector-method-addAssets\n  // #region fuel-connector-method-addAsset\n  addAsset(asset: Asset): Promise<boolean>;\n  // #endregion fuel-connector-method-addAsset\n  // #region fuel-connector-method-assets\n  assets(): Promise<Array<Asset>>;\n  // #endregion fuel-connector-method-assets\n  // #region fuel-connector-method-addNetwork\n  addNetwork(networkUrl: string): Promise<boolean>;\n  // #endregion fuel-connector-method-addNetwork\n  // #region fuel-connector-method-selectNetwork\n  selectNetwork(network: SelectNetworkArguments): Promise<boolean>;\n  // #endregion fuel-connector-method-selectNetwork\n  // #region fuel-connector-method-networks\n  networks(): Promise<Array<Network>>;\n  // #endregion fuel-connector-method-networks\n  // #region fuel-connector-method-currentNetwork\n  currentNetwork(): Promise<Network>;\n  // #endregion fuel-connector-method-currentNetwork\n  // #region fuel-connector-method-addABI\n  addABI(contractId: string, abi: FuelABI): Promise<boolean>;\n  // #endregion fuel-connector-method-addABI\n  // #region fuel-connector-method-getABI\n  getABI(contractId: string): Promise<FuelABI | null>;\n  // #endregion fuel-connector-method-getABI\n  // #region fuel-connector-method-hasABI\n  hasABI(contractId: string): Promise<boolean>;\n  // #endregion fuel-connector-method-hasABI\n}\n\n/**\n * @name FuelConnector\n *\n * Wallet Connector is a interface that represents a Wallet Connector and all the methods\n * that should be implemented to be compatible with the Fuel SDK.\n */\nexport abstract class FuelConnector extends EventEmitter implements Connector {\n  name: string = '';\n  metadata: ConnectorMetadata = {} as ConnectorMetadata;\n  connected: boolean = false;\n  installed: boolean = false;\n  external: boolean = true;\n  events = FuelConnectorEventTypes;\n\n  /**\n   * Should return true if the connector is loaded\n   * in less then one second.\n   *\n   * @returns Always true.\n   */\n  async ping(): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return the current version of the connector\n   * and the network version that is compatible.\n   *\n   * @returns boolean - connection status.\n   */\n  async version(): Promise<Version> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return true if the connector is connected\n   * to any of the accounts available.\n   *\n   * @returns The connection status.\n   */\n  async isConnected(): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return all the accounts authorized for the\n   * current connection.\n   *\n   * @returns The accounts addresses strings\n   */\n  async accounts(): Promise<Array<string>> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should start the connection process and return\n   * true if the account authorize the connection.\n   *\n   * and return false if the user reject the connection.\n   *\n   * @emits accounts\n   * @returns boolean - connection status.\n   */\n  async connect(): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should disconnect the current connection and\n   * return false if the disconnection was successful.\n   *\n   * @emits assets connection\n   * @returns The connection status.\n   */\n  async disconnect(): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should start the sign message process and return\n   * the signed message.\n   *\n   * @param address - The address to sign the message\n   * @param message - The message to sign all text will be treated as text utf-8\n   *\n   * @returns Message signature\n   */\n  async signMessage(_address: string, _message: HashableMessage): Promise<string> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should start the sign transaction process and return\n   * the signed transaction.\n   *\n   * @param address - The address to sign the transaction\n   * @param transaction - The transaction to sign\n   *\n   * @returns Transaction signature\n   */\n  async signTransaction(_address: string, _transaction: TransactionRequestLike): Promise<string> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should start the send transaction process and return\n   * the transaction id submitted to the network.\n   *\n   * If the network is not available for the connection\n   * it should throw an error to avoid the transaction\n   * to be sent to the wrong network and lost.\n   *\n   * @param address - The address to sign the transaction\n   * @param transaction - The transaction to send\n   * @param params - Optional parameters to send the transaction\n   * @returns The transaction id or transaction response\n   */\n  async sendTransaction(\n    _address: string,\n    _transaction: TransactionRequestLike,\n    _params?: FuelConnectorSendTxParams\n  ): Promise<string | TransactionResponse> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return the current account selected inside the connector, if the account\n   * is authorized for the connection.\n   *\n   * If the account is not authorized it should return null.\n   *\n   * @returns The current account selected otherwise null.\n   */\n  async currentAccount(): Promise<string | null> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should add the assets metadata to the connector and return true if the asset\n   * was added successfully.\n   *\n   * If the asset already exists it should throw an error.\n   *\n   * @emits assets\n   * @param assets - The assets to add the metadata to the connection.\n   * @throws Error if the asset already exists\n   * @returns True if the asset was added successfully\n   */\n  async addAssets(_assets: Array<Asset>): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should add the asset metadata to the connector and return true if the asset\n   * was added successfully.\n   *\n   * If the asset already exists it should throw an error.\n   *\n   * @emits assets\n   * @param asset - The asset to add the metadata to the connection.\n   * @throws Error if the asset already exists\n   * @returns True if the asset was added successfully\n   */\n  async addAsset(_asset: Asset): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return all the assets added to the connector. If a connection is already established.\n   *\n   * @returns Array of assets metadata from the connector vinculated to the all accounts from a specific Wallet.\n   */\n  async assets(): Promise<Array<Asset>> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should start the add network process and return true if the network was added successfully.\n   *\n   * @emits networks\n   * @throws Error if the network already exists\n   * @param networkUrl - The URL of the network to be added.\n   * @returns Return true if the network was added successfully\n   */\n  async addNetwork(_networkUrl: string): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should start the select network process and return true if the network has change successfully.\n   *\n   * @emits networks\n   * @throws Error if the network already exists\n   * @param network - The network to be selected.\n   * @returns Return true if the network was added successfully\n   */\n  async selectNetwork(_network: SelectNetworkArguments): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return all the networks available from the connector. If the connection is already established.\n   *\n   * @returns Return all the networks added to the connector.\n   */\n  async networks(): Promise<Array<Network>> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return the current network selected inside the connector. Even if the connection is not established.\n   *\n   * @returns Return the current network selected inside the connector.\n   */\n  async currentNetwork(): Promise<Network> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should add the ABI to the connector and return true if the ABI was added successfully.\n   *\n   * @param contractId - The contract id to add the ABI.\n   * @param abi - The JSON ABI that represents a contract.\n   * @returns Return true if the ABI was added successfully.\n   */\n  async addABI(_contractId: string, _abi: FuelABI): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return the ABI from the connector vinculated to the all accounts from a specific Wallet.\n   *\n   * @param id - The contract id to get the ABI.\n   * @returns The ABI if it exists, otherwise return null.\n   */\n  async getABI(_id: string): Promise<FuelABI | null> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return true if the abi exists in the connector vinculated to the all accounts from a specific Wallet.\n   *\n   * @param id - The contract id to get the abi\n   * @returns Returns true if the abi exists or false if not.\n   */\n  async hasABI(_id: string): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Event listener for the connector.\n   *\n   * @param eventName - The event name to listen\n   * @param listener - The listener function\n   */\n  override on<E extends FuelConnectorEvents['type'], D extends FuelEventArg<E>>(\n    eventName: E,\n    listener: (data: D) => void\n  ): this {\n    super.on(eventName, listener);\n    return this;\n  }\n}\n", "export enum FuelConnectorMethods {\n  // General methods\n  ping = 'ping',\n  version = 'version',\n  // Connection methods\n  connect = 'connect',\n  disconnect = 'disconnect',\n  isConnected = 'isConnected',\n  // Account methods\n  accounts = 'accounts',\n  currentAccount = 'currentAccount',\n  // Signature methods\n  signMessage = 'signMessage',\n  sendTransaction = 'sendTransaction',\n  // Assets metadata methods\n  assets = 'assets',\n  addAsset = 'addAsset',\n  addAssets = 'addAssets',\n  // Network methods\n  networks = 'networks',\n  currentNetwork = 'currentNetwork',\n  addNetwork = 'addNetwork',\n  selectNetwork = 'selectNetwork',\n  // ABI methods\n  addABI = 'addABI',\n  getABI = 'getABI',\n  hasABI = 'hasABI',\n}\n\nexport enum FuelConnectorEventTypes {\n  connectors = 'connectors',\n  currentConnector = 'currentConnector',\n  connection = 'connection',\n  accounts = 'accounts',\n  currentAccount = 'currentAccount',\n  networks = 'networks',\n  currentNetwork = 'currentNetwork',\n  assets = 'assets',\n  abis = 'abis',\n}\n\nexport const FuelConnectorEventType = 'FuelConnector';\n", "/* eslint-disable @typescript-eslint/require-await */\nimport type { StorageAbstract } from '../../wallet-manager';\n\nexport class LocalStorage implements StorageAbstract {\n  private storage: Storage;\n\n  constructor(localStorage: Storage) {\n    this.storage = localStorage;\n  }\n\n  async setItem(key: string, value: string): Promise<void> {\n    this.storage.setItem(key, value);\n  }\n\n  async getItem(key: string): Promise<string | null | undefined> {\n    return this.storage.getItem(key);\n  }\n\n  async removeItem(key: string): Promise<void> {\n    this.storage.removeItem(key);\n  }\n\n  async clear(): Promise<void> {\n    this.storage.clear();\n  }\n}\n", "/* eslint-disable no-param-reassign */\n\nexport type CacheFor = {\n  [key: string]: {\n    timeout: number;\n    value: unknown;\n  } | null;\n};\n\ntype CacheForOptions = {\n  key: string;\n  cache: CacheFor;\n  cacheTime: number;\n};\n\nexport function cacheFor<F extends (...args: unknown[]) => Promise<unknown>>(\n  fn: F,\n  { cache, cacheTime, key }: CacheForOptions\n): F {\n  return (async (...args: unknown[]) => {\n    if (cache[key] && cache[key]?.value) {\n      return cache[key]?.value as ReturnType<F>;\n    }\n    clearTimeout(cache[key]?.timeout);\n    const result = await fn(...args);\n\n    // Create cache auto clean\n\n    cache[key] = {\n      timeout: Number(\n        setTimeout(() => {\n          cache[key] = null;\n        }, cacheTime)\n      ),\n      value: result,\n    };\n\n    return result;\n  }) as F;\n}\n", "import type { FuelConnector } from '../fuel-connector';\nimport { FuelConnectorEventType } from '../types';\n\n/**\n * Fuel Connector Event is a custom event that can be used by the connector to\n * inform the Fuel Connector Manager that a new connector is available.\n */\nexport function dispatchFuelConnectorEvent(connector: FuelConnector) {\n  window.dispatchEvent(\n    new CustomEvent(FuelConnectorEventType, {\n      detail: connector,\n    })\n  );\n}\n", "import { FuelError } from '@fuel-ts/errors';\n\n// eslint-disable-next-line eslint-comments/disable-enable-pair\n/* eslint-disable  @typescript-eslint/no-explicit-any */\nexport type DeferPromise<R = unknown> = {\n  promise: Promise<R>;\n  resolve: (value: R) => void;\n  reject: (error: unknown) => void;\n};\n\nexport function deferPromise<R = unknown>() {\n  const defer: DeferPromise<R> = {} as any;\n\n  defer.promise = new Promise((resolve, reject) => {\n    defer.reject = reject;\n    defer.resolve = resolve;\n  });\n\n  return defer;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function withTimeout<F extends Promise<unknown>, RT = Awaited<F>>(\n  promise: F,\n  timeout: number = 1050\n): Promise<RT> {\n  const timeoutPromise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new FuelError(FuelError.CODES.TIMEOUT_EXCEEDED, 'Promise timed out'));\n    }, timeout);\n  });\n  return Promise.race([timeoutPromise, promise]) as any;\n}\n", "// A set of useful helper methods for testing binary Merkle trees.\nimport { hash } from '@fuel-ts/hasher';\n\nimport { EMPTY } from '../common';\n\nimport Node from './types/node';\n\n/**\n * Slice off the '0x' on each argument to simulate abi.encodePacked\n */\nexport function hashLeaf(data: string): string {\n  return hash('0x00'.concat(data.slice(2)));\n}\n\n/**\n * Slice off the '0x' on each argument to simulate abi.encodePacked\n * hash(prefix +  left + right)\n */\nexport function hashNode(left: string, right: string): string {\n  return hash('0x01'.concat(left.slice(2)).concat(right.slice(2)));\n}\n\n/**\n * Construct tree\n */\nexport function constructTree(data: string[]): Node[] {\n  const nodes = [];\n  for (let i = 0; i < data.length; i += 1) {\n    const hashed = hashLeaf(data[i]);\n    const leaf = new Node(-1, -1, -1, hashed, data[i]);\n    leaf.index = i;\n    nodes.push(leaf);\n  }\n\n  const nodesList = [...nodes];\n  let pNodes = [...nodes];\n\n  let size = (nodes.length + 1) >> 1;\n  let odd = nodes.length & 1;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let i = 0;\n    for (; i < size - odd; i += 1) {\n      const j = i << 1;\n      const hashed = hashNode(pNodes[j].hash, pNodes[j + 1].hash);\n      nodes[i] = new Node(pNodes[j].index, pNodes[j + 1].index, -1, hashed, '');\n      const nextIndex = nodesList.length;\n      nodes[i].index = nextIndex;\n\n      nodesList[pNodes[j].index].parent = nextIndex;\n      nodesList[pNodes[j + 1].index].parent = nextIndex;\n      nodesList.push(nodes[i]);\n    }\n\n    if (size === 1) {\n      break;\n    }\n\n    if (odd === 1) {\n      nodes[i] = pNodes[i << 1];\n    }\n\n    odd = size & 1;\n    size = (size + 1) >> 1;\n    pNodes = [...nodes];\n  }\n  return nodesList;\n}\n\n/**\n * Compute the merkle root\n */\nexport function calcRoot(data: string[]): string {\n  if (!data.length) {\n    return EMPTY;\n  }\n  const nodes = [];\n  for (let i = 0; i < data.length; i += 1) {\n    const hashed = hashLeaf(data[i]);\n    nodes.push(new Node(-1, -1, -1, hashed, data[i]));\n  }\n  let pNodes = nodes;\n  let size = (nodes.length + 1) >> 1;\n  let odd = nodes.length & 1;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let i = 0;\n    for (; i < size - odd; i += 1) {\n      const j = i << 1;\n      const hashed = hashNode(pNodes[j].hash, pNodes[j + 1].hash);\n      nodes[i] = new Node(pNodes[j].index, pNodes[j + 1].index, -1, hashed, '');\n    }\n    if (odd === 1) {\n      nodes[i] = pNodes[i << 1];\n    }\n    if (size === 1) {\n      break;\n    }\n    odd = size & 1;\n    size = (size + 1) >> 1;\n    pNodes = nodes;\n  }\n  return nodes[0].hash;\n}\n\n/**\n * Get proof for the leaf\n */\nexport function getProof(nodes: Node[], id: number): string[] {\n  const proof: string[] = [];\n  for (let prev = id, cur = nodes[id].parent; cur !== -1; prev = cur, cur = nodes[cur].parent) {\n    if (nodes[cur].left === prev) {\n      proof.push(nodes[nodes[cur].right].hash);\n    } else {\n      proof.push(nodes[nodes[cur].left].hash);\n    }\n  }\n  return proof;\n}\n", "/// @dev The Fuel testing Merkle trees.\n/// A set of useful helper methods for testing and deploying Merkle trees.\n\nexport const EMPTY = '0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';\nexport const ZERO = '0x0000000000000000000000000000000000000000000000000000000000000000';\nexport const MAX_HEIGHT = 256;\n", "class Node {\n  left: number;\n  right: number;\n  parent: number;\n  hash: string;\n  data: string;\n  index: number;\n\n  constructor(\n    left: number,\n    right: number,\n    parent: number,\n    hash: string,\n    data: string,\n    index: number = 0\n  ) {\n    this.left = left;\n    this.right = right;\n    this.parent = parent;\n    this.hash = hash;\n    this.data = data;\n    this.index = index;\n  }\n}\n\nexport default Node;\n", "/// @dev The Fuel testing Merkle trees.\n/// A set of useful helper methods for testing and deploying Merkle trees.\nimport { hash } from '@fuel-ts/hasher';\n\nimport { compactProof } from './proofs';\nimport { isLeaf, hashLeaf, hashNode, parseLeaf, parseNode } from './treeHasher';\nimport type SparseCompactMerkleProof from './types/sparseCompactMerkleProof';\nimport SparseMerkleProof from './types/sparseMerkleProof';\nimport type { MapStore } from './utils';\nimport { ZERO, MAX_HEIGHT, getBitAtFromMSB, reverseSideNodes, countCommonPrefix } from './utils';\n\nexport class SparseMerkleTree {\n  ms: MapStore;\n\n  root: string;\n\n  constructor() {\n    const ms: MapStore = {};\n    this.ms = ms;\n    this.root = ZERO;\n    this.ms[this.root] = ZERO;\n  }\n\n  get(key: string): string {\n    return this.ms[key];\n  }\n\n  set(key: string, value: string): void {\n    this.ms[key] = value;\n  }\n\n  setRoot(root: string): void {\n    this.root = root;\n  }\n\n  sideNodesForRoot(key: string, root: string): [string[], string, string, string] {\n    const sideNodes: string[] = [];\n\n    // If the root is a placeholder, there are no sidenodes to return.\n    // The data is nil, and the sibling is nil\n    if (root === ZERO) {\n      return [sideNodes, ZERO, '', ''];\n    }\n\n    let currentData = this.get(root);\n\n    // If the root is a leaf, there are also no sidenodes to return.\n    // The data is the leaf data, and the sibling is nil\n    if (isLeaf(currentData)) {\n      return [sideNodes, root, currentData, ''];\n    }\n\n    let leftNode;\n    let rightNode;\n    let nodeHash = '';\n    let sideNode = '';\n\n    for (let i = 0; i < MAX_HEIGHT; i += 1) {\n      [leftNode, rightNode] = parseNode(currentData);\n\n      if (getBitAtFromMSB(key, i) === 1) {\n        sideNode = leftNode;\n        nodeHash = rightNode;\n      } else {\n        sideNode = rightNode;\n        nodeHash = leftNode;\n      }\n\n      sideNodes.push(sideNode);\n\n      // If the node is a placeholder, we've reached the end.\n      if (nodeHash === ZERO) {\n        currentData = '';\n        break;\n      }\n\n      currentData = this.get(nodeHash);\n\n      // If the node is a leaf, we've reached the end.\n      if (isLeaf(currentData)) {\n        break;\n      }\n    }\n\n    const siblingData = this.get(sideNode);\n\n    return [reverseSideNodes(sideNodes), nodeHash, currentData, siblingData];\n  }\n\n  deleteWithSideNodes(\n    key: string,\n    sideNodes: string[],\n    oldLeafHash: string,\n    oldLeafData: string\n  ): string {\n    // If value already zero, deletion changes nothing. Just return current root\n\n    if (oldLeafHash === ZERO) {\n      return this.root;\n    }\n\n    // If key is already empty (different key found in its place), deletion changed nothing. Just return current root\n    const [actualPath] = parseLeaf(oldLeafData);\n\n    if (actualPath !== key) {\n      return this.root;\n    }\n\n    let currentHash = '';\n    let currentData = '';\n    let sideNode = '';\n    let sideNodeValue = '';\n    let nonPlaceholderReached = false;\n\n    for (let i = 0; i < sideNodes.length; i += 1) {\n      if (sideNodes[i] === '') {\n        continue;\n      }\n\n      sideNode = sideNodes[i];\n\n      if (currentData === '') {\n        sideNodeValue = this.get(sideNode);\n\n        if (isLeaf(sideNodeValue)) {\n          // This is the leaf sibling that needs to be percolated up the tree.\n          currentHash = sideNode;\n          currentData = sideNode;\n          continue;\n        } else {\n          // This is the node sibling that needs to be left in its place.\n          currentData = ZERO;\n          nonPlaceholderReached = true;\n        }\n      }\n\n      if (!nonPlaceholderReached && sideNode === ZERO) {\n        // We found another placeholder sibling node, keep going up the\n        // tree until we find the first sibling that is not a placeholder.\n        continue;\n      } else if (!nonPlaceholderReached) {\n        // We found the first sibling node that is not a placeholder, it is\n        // time to insert our leaf sibling node here.\n        nonPlaceholderReached = true;\n      }\n\n      if (getBitAtFromMSB(key, sideNodes.length - 1 - i) === 1) {\n        [currentHash, currentData] = hashNode(sideNode, currentData);\n      } else {\n        [currentHash, currentData] = hashNode(currentData, sideNode);\n      }\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n\n    // The tree is empty; return placeholder value as root.\n    // How can currentHash be '' / nil if it's a hash ?\n    if (currentHash === '') {\n      currentHash = ZERO;\n    }\n\n    return currentHash;\n  }\n\n  updateWithSideNodes(\n    key: string,\n    value: string,\n    sideNodes: string[],\n    oldLeafHash: string,\n    oldLeafData: string\n  ): string {\n    let currentHash;\n    let currentData;\n\n    this.set(hash(value), value);\n\n    [currentHash, currentData] = hashLeaf(key, value);\n    this.set(currentHash, currentData);\n\n    currentData = currentHash;\n\n    // If the leaf node that sibling nodes lead to has a different actual path\n    // than the leaf node being updated, we need to create an intermediate node\n    // with this leaf node and the new leaf node as children.\n    //\n    // First, get the number of bits that the paths of the two leaf nodes share\n    // in common as a prefix.\n\n    let commonPrefixCount;\n\n    if (oldLeafHash === ZERO) {\n      commonPrefixCount = MAX_HEIGHT;\n    } else {\n      const [actualPath] = parseLeaf(oldLeafData);\n      commonPrefixCount = countCommonPrefix(key, actualPath);\n    }\n\n    if (commonPrefixCount !== MAX_HEIGHT) {\n      if (getBitAtFromMSB(key, commonPrefixCount) === 1) {\n        [currentHash, currentData] = hashNode(oldLeafHash, currentData);\n      } else {\n        [currentHash, currentData] = hashNode(currentData, oldLeafHash);\n      }\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n\n    for (let i = 0; i < MAX_HEIGHT; i += 1) {\n      let sideNode;\n      const offsetOfSideNodes = MAX_HEIGHT - sideNodes.length;\n\n      // If there are no sidenodes at this height, but the number of\n      // bits that the paths of the two leaf nodes share in common is\n      // greater than this height, then we need to build up the tree\n      // to this height with placeholder values at siblings.\n\n      if (i - offsetOfSideNodes < 0 || sideNodes[i - offsetOfSideNodes] === '') {\n        if (commonPrefixCount !== MAX_HEIGHT && commonPrefixCount > MAX_HEIGHT - 1 - i) {\n          sideNode = ZERO;\n        } else {\n          continue;\n        }\n      } else {\n        sideNode = sideNodes[i - offsetOfSideNodes];\n      }\n\n      if (getBitAtFromMSB(key, MAX_HEIGHT - 1 - i) === 1) {\n        [currentHash, currentData] = hashNode(sideNode, currentData);\n      } else {\n        [currentHash, currentData] = hashNode(currentData, sideNode);\n      }\n\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n\n    return currentHash;\n  }\n\n  update(key: string, value: string): void {\n    const [sideNodes, oldLeafHash, oldLeafData] = this.sideNodesForRoot(key, this.root);\n    const newRoot = this.updateWithSideNodes(key, value, sideNodes, oldLeafHash, oldLeafData);\n    this.setRoot(newRoot);\n  }\n\n  delete(key: string): void {\n    const [sideNodes, oldLeafHash, oldLeafData] = this.sideNodesForRoot(key, this.root);\n    const newRoot = this.deleteWithSideNodes(key, sideNodes, oldLeafHash, oldLeafData);\n    this.setRoot(newRoot);\n  }\n\n  prove(key: string): SparseMerkleProof {\n    const [sideNodes, leafHash, leafData, siblingData] = this.sideNodesForRoot(key, this.root);\n\n    const nonEmptySideNodes: string[] = [];\n\n    for (let i = 0; i < sideNodes.length; i += 1) {\n      if (sideNodes[i] !== '') {\n        nonEmptySideNodes.push(sideNodes[i]);\n      }\n    }\n\n    // Deal with non-membership proofs. If the leaf hash is the placeholder\n    // value, we do not need to add anything else to the proof.\n    let nonMembershipLeafData = '';\n    if (leafHash !== ZERO) {\n      const [actualPath] = parseLeaf(leafData);\n      if (actualPath !== key) {\n        // This is a non-membership proof that involves showing a different leaf.\n        // Add the leaf data to the proof.\n        nonMembershipLeafData = leafData;\n      }\n    }\n\n    const proof = new SparseMerkleProof(nonEmptySideNodes, nonMembershipLeafData, siblingData);\n    return proof;\n  }\n\n  proveCompacted(key: string): SparseCompactMerkleProof {\n    const proof = this.prove(key);\n    const compactedProof = compactProof(proof);\n    return compactedProof;\n  }\n}\n", "import { hash } from '@fuel-ts/hasher';\n\nimport { hashLeaf, hashNode, parseLeaf } from './treeHasher';\nimport SparseCompactMerkleProof from './types/sparseCompactMerkleProof';\nimport SparseMerkleProof from './types/sparseMerkleProof';\nimport { getBitAtFromMSB, ZERO } from './utils';\n\n/**\n * Verify a merkle proof\n */\nexport function verifyProof(\n  proof: SparseMerkleProof,\n  root: string,\n  key: string,\n  value: string\n): [boolean, string[][]] {\n  const updates: string[][] = [[]];\n\n  // Detemine what the leaf hash should be\n  let currentHash;\n  let currentData;\n  let actualPath;\n  let valueHash;\n\n  if (value === ZERO) {\n    // Non-membership proof\n    if (proof.NonMembershipLeafData === '') {\n      currentHash = ZERO;\n    } else {\n      // leaf is an unrelated leaf\n      [actualPath, valueHash] = parseLeaf(proof.NonMembershipLeafData);\n      if (actualPath === key) {\n        // Leaf does exist : non-membership proof failed\n        return [false, []];\n      }\n      [currentHash, currentData] = hashLeaf(actualPath, valueHash);\n      updates.push([currentHash, currentData]);\n    }\n  } else {\n    // Membership proof\n    valueHash = hash(value);\n    updates.push([valueHash, value]);\n\n    [currentHash, currentData] = hashLeaf(key, value);\n    updates.push([currentHash, currentData]);\n  }\n\n  // Recompute root\n  for (let i = 0; i < proof.SideNodes.length; i += 1) {\n    const node = proof.SideNodes[i];\n\n    if (getBitAtFromMSB(key, proof.SideNodes.length - 1 - i) === 1) {\n      [currentHash, currentData] = hashNode(node, currentHash);\n    } else {\n      [currentHash, currentData] = hashNode(currentHash, node);\n    }\n\n    updates.push([currentHash, currentData]);\n  }\n\n  return [currentHash === root, updates];\n}\n\n/**\n * Compact a Sparse Merkle Proof using a bitmask\n */\nexport function compactProof(proof: SparseMerkleProof): SparseCompactMerkleProof {\n  const bitMask: number[] = [];\n  const compactedSideNodes: string[] = [];\n  let node;\n\n  for (let i = 0; i < proof.SideNodes.length; i += 1) {\n    node = proof.SideNodes[i];\n    if (node === ZERO) {\n      bitMask.push(0);\n    } else {\n      compactedSideNodes.push(node);\n      bitMask.push(1);\n    }\n  }\n  const compactedProof = new SparseCompactMerkleProof(\n    compactedSideNodes,\n    proof.NonMembershipLeafData,\n    bitMask,\n    proof.SideNodes.length,\n    proof.SiblingData\n  );\n  return compactedProof;\n}\n\n/**\n * Decompact a Sparse Merkle Proof\n */\nexport function decompactProof(proof: SparseCompactMerkleProof): SparseMerkleProof {\n  const decompactedSideNodes: string[] = [];\n  let position = 0;\n\n  for (let i = 0; i < proof.NumSideNodes; i += 1) {\n    if (proof.BitMask[i] === 0) {\n      decompactedSideNodes[i] = ZERO;\n    } else {\n      decompactedSideNodes[i] = proof.SideNodes[position];\n      position += 1;\n    }\n  }\n  const decompactedProof = new SparseMerkleProof(\n    decompactedSideNodes,\n    proof.NonMembershipLeafData,\n    proof.SiblingData\n  );\n\n  return decompactedProof;\n}\n", "import { hash } from '@fuel-ts/hasher';\n\nexport const leafPrefix = '0x00';\nexport const nodePrefix = '0x01';\n\n/**\n * Slice off the '0x' on each argument to simulate abi.encode\n * prefix + key + hash(data)\n */\nexport function hashLeaf(key: string, data: string): [string, string] {\n  const value = '0x00'.concat(key.slice(2)).concat(hash(data).slice(2));\n  return [hash(value), value];\n}\n\n/**\n * Slice off the '0x' on each argument to simulate abi.encodePacked\n * prefix + key + hash(data)\n */\nexport function hashNode(left: string, right: string): [string, string] {\n  const value = '0x01'.concat(left.slice(2)).concat(right.slice(2));\n  return [hash(value), value];\n}\n\n/**\n * Parse a leaf\n */\nexport function parseLeaf(data: string): [string, string] {\n  const len = nodePrefix.length;\n  return ['0x'.concat(data.slice(len, len + 64)), '0x'.concat(data.slice(len + 64))];\n}\n\n/**\n * Parse a nodes\n */\nexport function parseNode(data: string): [string, string] {\n  const len = nodePrefix.length;\n  return ['0x'.concat(data.slice(len, len + 64)), '0x'.concat(data.slice(len + 64))];\n}\n\n/**\n * Check if data is a leaf by checking prefix\n */\nexport function isLeaf(data: string): boolean {\n  return data.slice(0, 4) === leafPrefix;\n}\n", "class SparseCompactMerkleProof {\n  SideNodes: string[];\n  NonMembershipLeafData: string;\n  BitMask: number[];\n  NumSideNodes: number;\n  SiblingData: string;\n\n  constructor(\n    SideNodes: string[],\n    NonMembershipLeafData: string,\n    Bitmask: number[],\n    NumSideNodes: number,\n    SiblingData: string\n  ) {\n    this.SideNodes = SideNodes;\n    this.NonMembershipLeafData = NonMembershipLeafData;\n    this.BitMask = Bitmask;\n    this.NumSideNodes = NumSideNodes;\n    this.SiblingData = SiblingData;\n  }\n}\n\nexport default SparseCompactMerkleProof;\n", "// Sparse Merkle proof\nclass SparseMerkleProof {\n  SideNodes: string[];\n  NonMembershipLeafData: string;\n  SiblingData: string;\n\n  constructor(sideNodes: string[], NonMembershipLeafData: string, SiblingData: string) {\n    this.SideNodes = sideNodes;\n    this.NonMembershipLeafData = NonMembershipLeafData;\n    this.SiblingData = SiblingData;\n  }\n}\n\nexport default SparseMerkleProof;\n", "export const ZERO = '0x0000000000000000000000000000000000000000000000000000000000000000';\nexport const EMPTY = '0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';\nexport const MAX_HEIGHT = 256;\n\nexport interface MapStore {\n  [key: string]: string;\n}\n\n/**\n * Gets the bit at an offset from the most significant bit\n */\nexport function getBitAtFromMSB(data: string, position: number): number {\n  // if int(data[position / 8]) & (1 << (8 - 1 - uint(position) % 8)) > 0\n\n  // Slice off '0x'\n  const slicedData = data.slice(2);\n  // Get byte that contains the specified position\n  const byte = '0x'.concat(\n    slicedData.slice(Math.floor(position / 8) * 2, Math.floor(position / 8) * 2 + 2)\n  );\n  // Get bits from specified position within that byte\n  const bits = Number(byte) & (1 << (8 - 1 - (position % 8)));\n\n  // Bit at position = 0 IFF bits > 0.\n  if (bits > 0) {\n    return 1;\n  }\n  return 0;\n}\n/**\n * Reverse the nodes position\n */\nexport function reverseSideNodes(sideNodes: string[]): string[] {\n  let left = 0;\n  let right = sideNodes.length - 1;\n  const reversedSideNodes: string[] = sideNodes;\n\n  while (left < right) {\n    [reversedSideNodes[left], reversedSideNodes[right]] = [\n      reversedSideNodes[right],\n      reversedSideNodes[left],\n    ];\n    left += 1;\n    right -= 1;\n  }\n\n  return reversedSideNodes;\n}\n\n/**\n * Counts the common bit at at an offset from the most significant bit\n * between two inputs\n */\nexport function countCommonPrefix(data1: string, data2: string): number {\n  let count = 0;\n  for (let i = 0; i < MAX_HEIGHT; i += 1) {\n    if (getBitAtFromMSB(data1, i) === getBitAtFromMSB(data2, i)) {\n      count += 1;\n    } else {\n      break;\n    }\n  }\n  return count;\n}\n", "/* eslint-disable max-classes-per-file */\nimport type { FunctionFragment, JsonAbi, Interface } from '@fuel-ts/abi-coder';\nimport type {\n  CallResult,\n  CoinQuantity,\n  CoinQuantityLike,\n  TransactionResponse,\n  TransactionResult,\n  TransactionType,\n  AbstractAccount,\n  Provider,\n  DecodedLogs,\n} from '@fuel-ts/account';\nimport type { Address, WithContractId } from '@fuel-ts/address';\nimport type { BN, BigNumberish } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\n\nimport type { FunctionInvocationScope } from './functions/invocation-scope';\n\n/**\n * @hidden\n */\nexport abstract class AbstractProgram {\n  abstract account: AbstractAccount | null;\n  abstract interface: Pick<Interface, 'jsonAbi'>;\n  abstract provider: Pick<Provider, 'sendTransaction' | 'getTransactionCost'> | null;\n}\n\nexport abstract class AbstractContract extends AbstractProgram implements WithContractId {\n  abstract id: Address;\n}\n\n/**\n * Represents a contract call.\n */\nexport type ContractCall = {\n  contractId: Address;\n  data: BytesLike;\n  fnSelectorBytes: Uint8Array;\n  amount?: BigNumberish;\n  assetId?: BytesLike;\n  gas?: BigNumberish;\n  externalContractsAbis?: Record<string, JsonAbi>;\n};\n\n/**\n * Represents call parameters for a contract call.\n */\nexport type CallParams = Partial<{\n  forward: CoinQuantityLike;\n  gasLimit: BigNumberish;\n}>;\n\n/**\n * Represents transaction parameters for a contract call.\n */\nexport type TxParams = Partial<{\n  tip: BigNumberish;\n  gasLimit: BigNumberish;\n  maturity?: number;\n  expiration?: number;\n  maxFee?: BigNumberish;\n  witnessLimit?: BigNumberish;\n  variableOutputs: number;\n}>;\n\n/**\n * Represents configuration for calling a contract function.\n *\n * @template T - Type of the function's arguments.\n */\nexport type CallConfig<T = unknown> = {\n  func: FunctionFragment;\n  program: AbstractProgram;\n  callParameters?: CallParams;\n  txParameters?: TxParams;\n  forward?: CoinQuantity;\n  externalAbis: Record<string, JsonAbi>;\n  args: T;\n};\n\n/**\n * Represents a function that can be invoked.\n *\n * @template TArgs - Type of the function's arguments.\n * @template TReturn - Type of the function's return value.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface InvokeFunction<TArgs extends Array<any> = Array<any>, TReturn = any> {\n  (...args: TArgs): FunctionInvocationScope<TArgs, TReturn>;\n  /**\n   * Checks if the function is read-only i.e. it only reads from storage, does not write to it.\n   *\n   * @returns True if the function is read-only or pure, false otherwise.\n   */\n  isReadOnly: () => boolean;\n}\n\n/**\n * Represents a collection of functions that can be invoked.\n */\nexport interface InvokeFunctions {\n  [key: string]: InvokeFunction;\n}\n\n/**\n * Represents a like object of InvocationScope with a method to get its call configuration.\n * @template T - Type of the function's arguments.\n */\nexport type InvocationScopeLike<T = unknown> = {\n  /**\n   * Get the call configuration for this invocation scope.\n   * @returns \\{CallConfig<T>\\} The call configuration.\n   */\n  getCallConfig(): CallConfig<T>;\n};\n\n/**\n * Represents options for calculating the transaction cost.\n */\nexport type TransactionCostOptions = Partial<{\n  fundTransaction: boolean;\n}>;\n\nexport type FunctionResult<TReturn> = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  readonly logs: DecodedLogs<any>['logs'];\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  readonly groupedLogs: DecodedLogs<any>['groupedLogs'];\n  readonly value: TReturn;\n  readonly gasUsed: BN;\n  readonly program: AbstractProgram;\n  readonly isMultiCall: boolean;\n  readonly transactionId: string;\n  readonly functionScopes: Array<InvocationScopeLike>;\n  readonly transactionResponse: TransactionResponse;\n  readonly transactionResult: TransactionResult<TransactionType.Script>;\n};\n\nexport type DryRunResult<TReturn> = {\n  readonly gasUsed: BN;\n  readonly value: TReturn;\n  readonly isMultiCall: boolean;\n  readonly callResult: CallResult;\n  readonly functionScopes: Array<InvocationScopeLike>;\n};\n", "import { getAllDecodedLogs, getDecodedLogs } from '@fuel-ts/account';\nimport type { TransactionResultReceipt, JsonAbisFromAllCalls, DecodedLogs } from '@fuel-ts/account';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport type { AbstractContract, CallConfig, InvocationScopeLike } from './types';\n\n/**\n * @hidden\n *\n * Generic assert function to avoid undesirable errors\n */\nexport function assert(condition: unknown, message: string): asserts condition {\n  if (!condition) {\n    throw new FuelError(ErrorCode.TRANSACTION_ERROR, message);\n  }\n}\n\n/**\n * @hidden\n *\n * Gets the ABI from an array of InvocationScopeLike.\n */\nexport function getAbisFromAllCalls(\n  functionScopes: Array<InvocationScopeLike>\n): JsonAbisFromAllCalls {\n  return functionScopes.reduce((acc, funcScope, i) => {\n    const { program, externalAbis } = funcScope.getCallConfig();\n\n    if (i === 0) {\n      acc.main = program.interface.jsonAbi;\n      acc.otherContractsAbis = {};\n    } else {\n      acc.otherContractsAbis[(<AbstractContract>program).id.toB256()] = program.interface.jsonAbi;\n    }\n\n    acc.otherContractsAbis = { ...acc.otherContractsAbis, ...externalAbis };\n\n    return acc;\n  }, {} as JsonAbisFromAllCalls);\n}\n\n/**\n * @hidden\n * @deprecated Use `getAllResultLogs` instead.\n */\nexport const getResultLogs = (\n  receipts: TransactionResultReceipt[],\n  mainCallConfig: CallConfig | undefined,\n  functionScopes: Array<InvocationScopeLike>\n) => {\n  if (!mainCallConfig) {\n    return [];\n  }\n  const { main, otherContractsAbis } = getAbisFromAllCalls(functionScopes);\n  return getDecodedLogs(receipts, main, otherContractsAbis);\n};\n\n/** @hidden */\nexport const getAllResultLogs = (opts: {\n  receipts: TransactionResultReceipt[];\n  mainCallConfig: CallConfig | undefined;\n  functionScopes: Array<InvocationScopeLike>;\n}): DecodedLogs => {\n  const { receipts, mainCallConfig, functionScopes } = opts;\n\n  if (!mainCallConfig) {\n    return { logs: [], groupedLogs: {} };\n  }\n  const { main, otherContractsAbis } = getAbisFromAllCalls(functionScopes);\n  return getAllDecodedLogs({ receipts, mainAbi: main, externalAbis: otherContractsAbis });\n};\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { FunctionFragment } from '@fuel-ts/abi-coder';\nimport type { CoinQuantity } from '@fuel-ts/account';\nimport { coinQuantityfy } from '@fuel-ts/account';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport type { AbstractProgram, CallConfig, CallParams } from '../types';\n\nimport { BaseInvocationScope } from './base-invocation-scope';\n\n/**\n * Represents a scope for invoking a function.\n *\n * @template TArgs - The type of the function arguments.\n * @template TReturn - The type of the return value.\n */\nexport class FunctionInvocationScope<\n  TArgs extends Array<any> = Array<any>,\n  TReturn = any,\n> extends BaseInvocationScope<TReturn> {\n  protected func: FunctionFragment;\n  private callParameters?: CallParams;\n  private forward?: CoinQuantity;\n  protected args: TArgs;\n\n  /**\n   * Constructs an instance of FunctionInvocationScope.\n   *\n   * @param program - The program.\n   * @param func - The function fragment.\n   * @param args - The arguments.\n   */\n  constructor(program: AbstractProgram, func: FunctionFragment, args: TArgs) {\n    super(program, false);\n    this.func = func;\n    this.args = args || [];\n    this.setArguments(...args);\n    super.addCall(this);\n  }\n\n  /**\n   * Gets the call configuration.\n   *\n   * @returns The call configuration.\n   */\n  getCallConfig(): CallConfig<TArgs> {\n    return {\n      func: this.func,\n      program: this.program,\n      callParameters: this.callParameters,\n      txParameters: this.txParameters,\n      forward: this.forward,\n      args: this.args,\n      externalAbis: this.externalAbis,\n    };\n  }\n\n  /**\n   * Sets the arguments for the function invocation.\n   *\n   * @param args - The arguments.\n   * @returns The instance of FunctionInvocationScope.\n   */\n  setArguments(...args: TArgs) {\n    this.args = args || [];\n    return this;\n  }\n\n  /**\n   * Sets the call parameters for the function invocation.\n   *\n   * @param callParams - The call parameters.\n   * @returns The instance of FunctionInvocationScope.\n   * @throws If the function is not payable and forward is set.\n   */\n  callParams(callParams: CallParams) {\n    if (!this.hasCallParamsGasLimit && callParams?.gasLimit !== undefined) {\n      this.hasCallParamsGasLimit = true;\n    }\n    this.callParameters = callParams;\n\n    if (callParams?.forward) {\n      if (!this.func.attributes.find((attr) => attr.name === 'payable')) {\n        throw new FuelError(\n          ErrorCode.TRANSACTION_ERROR,\n          `The target function ${this.func.name} cannot accept forwarded funds as it's not marked as 'payable'.`\n        );\n      }\n\n      this.forward = coinQuantityfy(callParams.forward);\n    }\n\n    // Update transaction script with new forward params\n    this.setArguments(...this.args);\n\n    // Update required coins\n    this.updateRequiredCoins();\n\n    return this;\n  }\n}\n", "/* eslint-disable no-param-reassign */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { InputValue, JsonAbi } from '@fuel-ts/abi-coder';\nimport type {\n  Provider,\n  CoinQuantity,\n  CallResult,\n  Account,\n  TransferParams,\n  TransactionResponse,\n  TransactionCost,\n  AbstractAccount,\n} from '@fuel-ts/account';\nimport { ScriptTransactionRequest, Wallet } from '@fuel-ts/account';\nimport { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport { TransactionType } from '@fuel-ts/transactions';\nimport { isDefined } from '@fuel-ts/utils';\nimport * as asm from '@fuels/vm-asm';\nimport { clone } from 'ramda';\n\nimport { getContractCallScript } from '../contract-call-script';\nimport { buildDryRunResult, buildFunctionResult } from '../response';\nimport type {\n  ContractCall,\n  InvocationScopeLike,\n  TxParams,\n  FunctionResult,\n  DryRunResult,\n  AbstractContract,\n  AbstractProgram,\n} from '../types';\nimport { assert, getAbisFromAllCalls } from '../utils';\n\n/**\n * Creates a contract call object based on the provided invocation scope.\n *\n * @param funcScope - The invocation scope containing the necessary information for the contract call.\n * @returns The contract call object.\n */\nfunction createContractCall(funcScope: InvocationScopeLike): ContractCall {\n  const { program, args, forward, func, callParameters, externalAbis } = funcScope.getCallConfig();\n  const data = func.encodeArguments(args as Array<InputValue>);\n\n  return {\n    contractId: (program as AbstractContract).id,\n    fnSelectorBytes: func.selectorBytes,\n    data,\n    assetId: forward?.assetId,\n    amount: forward?.amount,\n    gas: callParameters?.gasLimit,\n    externalContractsAbis: externalAbis,\n  };\n}\n\n/**\n * Base class for managing invocation scopes and preparing transactions.\n */\nexport class BaseInvocationScope<TReturn = any> {\n  protected transactionRequest: ScriptTransactionRequest;\n  protected program: AbstractProgram;\n  protected functionInvocationScopes: Array<InvocationScopeLike> = [];\n  protected txParameters?: TxParams;\n  protected requiredCoins: CoinQuantity[] = [];\n  protected isMultiCall: boolean = false;\n  protected hasCallParamsGasLimit: boolean = false; // flag to check if any of the callParams has gasLimit set\n  protected externalAbis: Record<string, JsonAbi> = {};\n  private addSignersCallback?: (\n    txRequest: ScriptTransactionRequest\n  ) => Promise<ScriptTransactionRequest>;\n\n  /**\n   * Constructs an instance of BaseInvocationScope.\n   *\n   * @param program - The abstract program to be invoked.\n   * @param isMultiCall - A flag indicating whether the invocation is a multi-call.\n   */\n  constructor(program: AbstractProgram, isMultiCall: boolean) {\n    this.program = program;\n    this.isMultiCall = isMultiCall;\n    this.transactionRequest = new ScriptTransactionRequest();\n  }\n\n  /**\n   * Getter for the contract calls.\n   *\n   * @returns An array of contract calls.\n   */\n  protected get calls() {\n    return this.functionInvocationScopes.map((funcScope) => createContractCall(funcScope));\n  }\n\n  /**\n   * Updates the script request with the current contract calls.\n   */\n  protected async updateScriptRequest() {\n    const provider = this.getProvider();\n    const {\n      consensusParameters: {\n        txParameters: { maxInputs },\n      },\n    } = await provider.getChain();\n    const contractCallScript = getContractCallScript(this.functionInvocationScopes, maxInputs);\n    this.transactionRequest.setScript(contractCallScript, this.calls);\n  }\n\n  /**\n   * Updates the transaction request with the current input/output.\n   */\n  protected updateContractInputAndOutput() {\n    const calls = this.calls;\n    calls.forEach((c) => {\n      if (c.contractId) {\n        this.transactionRequest.addContractInputAndOutput(c.contractId);\n      }\n      if (c.externalContractsAbis) {\n        Object.keys(c.externalContractsAbis).forEach((contractId) =>\n          this.transactionRequest.addContractInputAndOutput(new Address(contractId))\n        );\n      }\n    });\n  }\n\n  /**\n   * Gets the required coins for the transaction.\n   *\n   * @returns An array of required coin quantities.\n   */\n  protected getRequiredCoins(): Array<CoinQuantity> {\n    const forwardingAssets = this.calls\n      .map((call) => ({\n        assetId: String(call.assetId),\n        amount: bn(call.amount || 0),\n      }))\n      .filter(({ assetId, amount }) => assetId && !bn(amount).isZero());\n    return forwardingAssets;\n  }\n\n  /**\n   * Updates the required coins for the transaction.\n   */\n  protected updateRequiredCoins() {\n    const assets = this.getRequiredCoins();\n    const reduceForwardCoins = (\n      requiredCoins: Map<any, CoinQuantity>,\n      { assetId, amount }: CoinQuantity\n    ) => {\n      const currentAmount = requiredCoins.get(assetId)?.amount || bn(0);\n\n      return requiredCoins.set(assetId, {\n        assetId: String(assetId),\n        amount: currentAmount.add(amount),\n      });\n    };\n    this.requiredCoins = Array.from(\n      assets.reduce(reduceForwardCoins, new Map<any, CoinQuantity>()).values()\n    );\n  }\n\n  /**\n   * Adds a single call to the invocation scope.\n   *\n   * @param funcScope - The function scope to add.\n   * @returns The current instance of the class.\n   */\n  protected addCall(funcScope: InvocationScopeLike) {\n    this.addCalls([funcScope]);\n    return this;\n  }\n\n  /**\n   * Adds multiple calls to the invocation scope.\n   *\n   * @param funcScopes - An array of function scopes to add.\n   * @returns The current instance of the class.\n   */\n  protected addCalls(funcScopes: Array<InvocationScopeLike>) {\n    this.functionInvocationScopes.push(...funcScopes);\n    this.updateContractInputAndOutput();\n    this.updateRequiredCoins();\n    return this;\n  }\n\n  /**\n   * Prepares the transaction by updating the script request, required coins, and checking the gas limit.\n   */\n  protected async prepareTransaction() {\n    // @ts-expect-error Property 'initWasm' does exist on type and is defined\n    await asm.initWasm();\n\n    // Update request scripts before call\n    await this.updateScriptRequest();\n\n    // Update required coins before call\n    this.updateRequiredCoins();\n\n    // Check if gasLimit is less than the\n    // sum of all call gasLimits\n    this.checkGasLimitTotal();\n\n    if (this.transactionRequest.type === TransactionType.Script) {\n      this.transactionRequest.abis = getAbisFromAllCalls(this.functionInvocationScopes);\n    }\n  }\n\n  /**\n   * Checks if the total gas limit is within the acceptable range.\n   */\n  protected checkGasLimitTotal() {\n    const gasLimitOnCalls = this.calls.reduce((total, call) => total.add(call.gas || 0), bn(0));\n\n    if (this.transactionRequest.gasLimit.eq(0)) {\n      this.transactionRequest.gasLimit = gasLimitOnCalls;\n    } else if (gasLimitOnCalls.gt(this.transactionRequest.gasLimit)) {\n      throw new FuelError(\n        ErrorCode.TRANSACTION_ERROR,\n        \"Transaction's gasLimit must be equal to or greater than the combined forwarded gas of all calls.\"\n      );\n    }\n  }\n\n  /**\n   * Gets the transaction cost for dry running the transaction.\n   *\n   * @returns The transaction cost details.\n   */\n  async getTransactionCost(): Promise<TransactionCost> {\n    const request = clone(await this.getTransactionRequest());\n    const account: AbstractAccount =\n      this.program.account ?? Wallet.generate({ provider: this.getProvider() });\n    return account.getTransactionCost(request, {\n      quantities: this.getRequiredCoins(),\n      signatureCallback: this.addSignersCallback,\n    });\n  }\n\n  /**\n   * Costs and funds the underlying transaction request.\n   *\n   * @returns The invocation scope as a funded transaction request.\n   */\n  async fundWithRequiredCoins(): Promise<ScriptTransactionRequest> {\n    let transactionRequest = await this.getTransactionRequest();\n    transactionRequest = clone(transactionRequest);\n\n    const txCost = await this.getTransactionCost();\n    const { gasUsed, missingContractIds, outputVariables, maxFee } = txCost;\n    this.setDefaultTxParams(transactionRequest, gasUsed, maxFee);\n\n    // Adding missing contract ids\n    missingContractIds.forEach((contractId) => {\n      transactionRequest.addContractInputAndOutput(new Address(contractId));\n    });\n\n    // Adding required number of OutputVariables\n    transactionRequest.addVariableOutputs(outputVariables);\n\n    await this.program.account?.fund(transactionRequest, txCost);\n\n    if (this.addSignersCallback) {\n      await this.addSignersCallback(transactionRequest);\n    }\n    return transactionRequest;\n  }\n\n  /**\n   * Sets the transaction parameters.\n   *\n   * @param txParams - The transaction parameters to set.\n   * @returns The current instance of the class.\n   */\n  txParams(txParams: TxParams) {\n    this.txParameters = txParams;\n    const request = this.transactionRequest;\n\n    request.tip = bn(txParams.tip || request.tip);\n    request.gasLimit = bn(txParams.gasLimit || request.gasLimit);\n    request.maxFee = txParams.maxFee ? bn(txParams.maxFee) : request.maxFee;\n    request.witnessLimit = txParams.witnessLimit ? bn(txParams.witnessLimit) : request.witnessLimit;\n    request.maturity = txParams.maturity || request.maturity;\n    request.expiration = txParams.expiration || request.expiration;\n\n    request.addVariableOutputs(this.txParameters?.variableOutputs || 0);\n\n    return this;\n  }\n\n  /**\n   * Adds contracts to the invocation scope.\n   *\n   * @param contracts - An array of contracts to add.\n   * @returns The current instance of the class.\n   */\n  addContracts(contracts: Array<AbstractContract | string>) {\n    contracts.forEach((contract) => {\n      if (typeof contract === 'string') {\n        this.transactionRequest.addContractInputAndOutput(new Address(contract));\n      } else {\n        this.transactionRequest.addContractInputAndOutput(contract.id);\n        this.externalAbis[contract.id.toB256()] = contract.interface.jsonAbi;\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Adds an asset transfer to an Account on the contract call transaction request.\n   *\n   * @param transferParams - The object representing the transfer to be made.\n   * @returns The current instance of the class.\n   */\n  addTransfer(transferParams: TransferParams) {\n    const { amount, destination, assetId } = transferParams;\n    this.transactionRequest = this.transactionRequest.addCoinOutput(\n      new Address(destination),\n      amount,\n      assetId\n    );\n\n    return this;\n  }\n\n  /**\n   * Adds multiple transfers to the contract call transaction request.\n   *\n   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.\n   * @returns The current instance of the class.\n   */\n  addBatchTransfer(transferParams: TransferParams[]) {\n    transferParams.forEach(({ destination, amount, assetId }) => {\n      this.transactionRequest = this.transactionRequest.addCoinOutput(\n        new Address(destination),\n        amount,\n        assetId\n      );\n    });\n\n    return this;\n  }\n\n  addSigners(signers: Account | Account[]) {\n    this.addSignersCallback = (transactionRequest) =>\n      transactionRequest.addAccountWitnesses(signers);\n\n    return this;\n  }\n\n  /**\n   * Prepares and returns the transaction request object.\n   *\n   * @returns The prepared transaction request.\n   */\n  async getTransactionRequest(): Promise<ScriptTransactionRequest> {\n    await this.prepareTransaction();\n    return this.transactionRequest;\n  }\n\n  /**\n   * Submits the contract call transaction and returns a promise that resolves to an object\n   * containing the transaction ID and a function to wait for the result. The promise will resolve\n   * as soon as the transaction is submitted to the node.\n   *\n   * @returns A promise that resolves to an object containing:\n   * - `transactionId`: The ID of the submitted transaction.\n   * - `waitForResult`: A function that waits for the transaction result.\n   * @template T - The type of the return value.\n   */\n  async call<T = TReturn>(): Promise<{\n    transactionId: string;\n    waitForResult: () => Promise<FunctionResult<T>>;\n  }> {\n    assert(this.program.account, 'Wallet is required!');\n\n    const transactionRequest = await this.fundWithRequiredCoins();\n\n    const response = (await this.program.account.sendTransaction(transactionRequest, {\n      estimateTxDependencies: false,\n    })) as TransactionResponse;\n\n    const transactionId = response.id;\n\n    return {\n      transactionId,\n      waitForResult: async () =>\n        buildFunctionResult<T>({\n          funcScope: this.functionInvocationScopes,\n          isMultiCall: this.isMultiCall,\n          program: this.program,\n          transactionResponse: response,\n        }),\n    };\n  }\n\n  /**\n   * Simulates a transaction.\n   *\n   * @returns The result of the invocation call.\n   */\n  async simulate<T = TReturn>(): Promise<DryRunResult<T>> {\n    assert(this.program.account, 'Wallet is required!');\n\n    if (!('populateTransactionWitnessesSignature' in this.program.account)) {\n      throw new FuelError(\n        ErrorCode.ABI_MAIN_METHOD_MISSING,\n        'An unlocked wallet is required to simulate a contract call.'\n      );\n    }\n    const transactionRequest = await this.fundWithRequiredCoins();\n\n    const callResult = await this.program.account.simulateTransaction(transactionRequest, {\n      estimateTxDependencies: false,\n    });\n\n    return buildDryRunResult<T>({\n      funcScopes: this.functionInvocationScopes,\n      callResult,\n      isMultiCall: this.isMultiCall,\n    });\n  }\n\n  /**\n   * Executes a transaction in dry run mode.\n   *\n   * @returns The result of the invocation call.\n   */\n  async dryRun<T = TReturn>(): Promise<DryRunResult<T>> {\n    const { receipts } = await this.getTransactionCost();\n\n    const callResult: CallResult = {\n      receipts,\n    };\n\n    return buildDryRunResult<T>({\n      funcScopes: this.functionInvocationScopes,\n      callResult,\n      isMultiCall: this.isMultiCall,\n    });\n  }\n\n  async get<T = TReturn>(): Promise<DryRunResult<T>> {\n    const { receipts } = await this.getTransactionCost();\n\n    const callResult: CallResult = {\n      receipts,\n    };\n\n    return buildDryRunResult<T>({\n      funcScopes: this.functionInvocationScopes,\n      callResult,\n      isMultiCall: this.isMultiCall,\n    });\n  }\n\n  getProvider(): Provider {\n    const provider = <Provider>this.program.provider;\n\n    return provider;\n  }\n\n  /**\n   * Obtains the ID of a transaction.\n   *\n   * @param chainId - the chainId to use to hash the transaction with\n   * @returns the ID of the transaction.\n   */\n  async getTransactionId(chainId?: number): Promise<string> {\n    const chainIdToHash = chainId ?? (await this.getProvider().getChainId());\n\n    const transactionRequest = await this.getTransactionRequest();\n    return transactionRequest.getTransactionId(chainIdToHash);\n  }\n\n  /**\n   * In case the gasLimit is *not* set by the user, this method sets a default value.\n   */\n  private setDefaultTxParams(\n    transactionRequest: ScriptTransactionRequest,\n    gasUsed: BN,\n    maxFee: BN\n  ) {\n    const gasLimitSpecified = isDefined(this.txParameters?.gasLimit) || this.hasCallParamsGasLimit;\n    const maxFeeSpecified = isDefined(this.txParameters?.maxFee);\n\n    const { gasLimit: setGasLimit, maxFee: setMaxFee } = transactionRequest;\n\n    if (!gasLimitSpecified) {\n      transactionRequest.gasLimit = gasUsed;\n    } else if (setGasLimit.lt(gasUsed)) {\n      throw new FuelError(\n        ErrorCode.GAS_LIMIT_TOO_LOW,\n        `Gas limit '${setGasLimit}' is lower than the required: '${gasUsed}'.`\n      );\n    }\n\n    if (!maxFeeSpecified) {\n      transactionRequest.maxFee = maxFee;\n    } else if (maxFee.gt(setMaxFee)) {\n      throw new FuelError(\n        ErrorCode.MAX_FEE_TOO_LOW,\n        `Max fee '${setMaxFee}' is lower than the required: '${maxFee}'.`\n      );\n    }\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  WORD_SIZE,\n  B256Coder,\n  ASSET_ID_LEN,\n  BigNumberCoder,\n  CONTRACT_ID_LEN,\n} from '@fuel-ts/abi-coder';\nimport type {\n  CallResult,\n  DecodedLogs,\n  TransactionResultCallReceipt,\n  TransactionResultReturnDataReceipt,\n  TransactionResultReturnReceipt,\n} from '@fuel-ts/account';\nimport type { Address } from '@fuel-ts/address';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { bn, toNumber } from '@fuel-ts/math';\nimport { ReceiptType } from '@fuel-ts/transactions';\nimport { concat, arrayify } from '@fuel-ts/utils';\nimport * as asm from '@fuels/vm-asm';\n\nimport { InstructionSet } from './instruction-set';\nimport type { EncodedScriptCall, ScriptResult } from './script-request';\nimport { decodeCallResult, ScriptRequest, calculateScriptDataBaseOffset } from './script-request';\nimport type { ContractCall, InvocationScopeLike } from './types';\n\ntype CallOpcodeParamsOffset = {\n  callDataOffset: number;\n  gasForwardedOffset: number;\n  amountOffset: number;\n  assetIdOffset: number;\n};\n\nconst DEFAULT_OPCODE_PARAMS: CallOpcodeParamsOffset = {\n  assetIdOffset: 0,\n  amountOffset: 0,\n  gasForwardedOffset: 0,\n  callDataOffset: 0,\n};\n\n// During a script execution, this script's contract id is the **null** contract id\nconst SCRIPT_WRAPPER_CONTRACT_ID = ZeroBytes32;\n\n// Returns the VM instructions for calling a contract method\n// We use the [`Opcode`] to call a contract: [`CALL`](Opcode::CALL)\n// pointing at the following registers:\n//\n// 0x10 Script data offset\n// 0x11 Coin amount\n// 0x12 Asset ID\n// 0x13 Gas forwarded\n//\n// These are arbitrary non-reserved registers, no special meaning\nconst getSingleCallInstructions = ({\n  callDataOffset,\n  gasForwardedOffset,\n  amountOffset,\n  assetIdOffset,\n}: CallOpcodeParamsOffset): InstructionSet => {\n  const inst = new InstructionSet(\n    asm.movi(0x10, callDataOffset),\n    asm.movi(0x11, amountOffset),\n    asm.lw(0x11, 0x11, 0),\n    asm.movi(0x12, assetIdOffset)\n  );\n\n  if (gasForwardedOffset) {\n    inst.push(\n      asm.movi(0x13, gasForwardedOffset),\n      asm.lw(0x13, 0x13, 0),\n      asm.call(0x10, 0x11, 0x12, 0x13)\n    );\n  } else {\n    inst.push(asm.call(0x10, 0x11, 0x12, asm.RegId.cgas().to_u8()));\n  }\n\n  return inst;\n};\n// Given a list of contract calls, create the actual opcodes used to call the contract\nfunction getInstructions(offsets: CallOpcodeParamsOffset[]): Uint8Array {\n  if (!offsets.length) {\n    return new Uint8Array();\n  }\n\n  const multiCallInstructions = new InstructionSet();\n  for (let i = 0; i < offsets.length; i += 1) {\n    multiCallInstructions.extend(getSingleCallInstructions(offsets[i]).entries());\n  }\n\n  multiCallInstructions.push(asm.ret(0x01));\n  return multiCallInstructions.toBytes();\n}\n\ntype ReturnReceipt = TransactionResultReturnReceipt | TransactionResultReturnDataReceipt;\n\nconst isReturnType = (type: ReturnReceipt['type']) =>\n  type === ReceiptType.Return || type === ReceiptType.ReturnData;\n\nconst getMainCallReceipt = (\n  receipts: TransactionResultCallReceipt[],\n  contractId: string\n): TransactionResultCallReceipt | undefined =>\n  receipts.find(\n    ({ type, id, to }) =>\n      type === ReceiptType.Call && id === SCRIPT_WRAPPER_CONTRACT_ID && to === contractId\n  );\n\nconst scriptResultDecoder = (contractId: Address) => (result: ScriptResult) => {\n  if (toNumber(result.code) !== 0) {\n    throw new FuelError(ErrorCode.SCRIPT_REVERTED, `Transaction reverted.`);\n  }\n\n  const mainCallResult = getMainCallReceipt(\n    result.receipts as TransactionResultCallReceipt[],\n    contractId.toB256()\n  );\n  const mainCallInstructionStart = bn(mainCallResult?.is);\n\n  const receipts = result.receipts as ReturnReceipt[];\n  return receipts\n    .filter(({ type }) => isReturnType(type))\n    .flatMap((receipt: ReturnReceipt) => {\n      if (!mainCallInstructionStart.eq(bn(receipt.is))) {\n        return [];\n      }\n      if (receipt.type === ReceiptType.Return) {\n        return [new BigNumberCoder('u64').encode((receipt as TransactionResultReturnReceipt).val)];\n      }\n      if (receipt.type === ReceiptType.ReturnData) {\n        const encodedScriptReturn = arrayify(receipt.data);\n\n        return [encodedScriptReturn];\n      }\n\n      return [new Uint8Array()];\n    });\n};\n\nexport const decodeContractCallScriptResult = (\n  callResult: CallResult,\n  contractId: Address,\n  logs: DecodedLogs<any>['logs'] = [],\n  groupedLogs: DecodedLogs<any>['groupedLogs'] = {}\n): Uint8Array[] => decodeCallResult(callResult, scriptResultDecoder(contractId), logs, groupedLogs);\n\nconst getCallInstructionsLength = (contractCalls: ContractCall[]): number =>\n  contractCalls.reduce(\n    (sum, call) => {\n      const offset: CallOpcodeParamsOffset = { ...DEFAULT_OPCODE_PARAMS };\n      if (call.gas) {\n        offset.gasForwardedOffset = 1;\n      }\n\n      return sum + getSingleCallInstructions(offset).byteLength();\n    },\n    asm.Instruction.size() // placeholder for single RET instruction which is added later\n  );\n\nexport const getContractCallScript = (\n  functionScopes: InvocationScopeLike[],\n  maxInputs: BN\n): ScriptRequest<ContractCall[], Uint8Array[]> =>\n  new ScriptRequest<ContractCall[], Uint8Array[]>(\n    // Script to call the contract, start with stub size matching length of calls\n    getInstructions(new Array(functionScopes.length).fill(DEFAULT_OPCODE_PARAMS)),\n    (contractCalls): EncodedScriptCall => {\n      const TOTAL_CALLS = contractCalls.length;\n\n      if (TOTAL_CALLS === 0) {\n        return { data: new Uint8Array(), script: new Uint8Array() };\n      }\n\n      // Get total data offset AFTER all scripts\n      const callInstructionsLength = getCallInstructionsLength(contractCalls);\n\n      // Pad length\n      const paddingLength = (8 - (callInstructionsLength % 8)) % 8;\n      const paddedInstructionsLength = callInstructionsLength + paddingLength;\n\n      // Base offset\n      const dataOffset =\n        calculateScriptDataBaseOffset(maxInputs.toNumber()) + paddedInstructionsLength;\n\n      // The data for each call is ordered into segments\n      const paramOffsets: CallOpcodeParamsOffset[] = [];\n      // the data about the contract output\n      let segmentOffset = dataOffset;\n\n      const scriptData: Uint8Array[] = [];\n      for (let i = 0; i < TOTAL_CALLS; i += 1) {\n        const call = contractCalls[i];\n\n        const amountOffset = segmentOffset;\n        const assetIdOffset = amountOffset + WORD_SIZE;\n        const callDataOffset = assetIdOffset + ASSET_ID_LEN;\n        const encodedSelectorOffset = callDataOffset + CONTRACT_ID_LEN + WORD_SIZE + WORD_SIZE;\n        const encodedArgsOffset = encodedSelectorOffset + call.fnSelectorBytes.byteLength;\n        const encodedArgs = arrayify(call.data);\n        let gasForwardedOffset = 0;\n\n        // 1. Amount\n        scriptData.push(new BigNumberCoder('u64').encode(call.amount || 0));\n        // 2. Asset ID\n        scriptData.push(new B256Coder().encode(call.assetId?.toString() || ZeroBytes32));\n        // 3. Contract ID\n        scriptData.push(call.contractId.toBytes());\n        // 4. Function selector offset\n        scriptData.push(new BigNumberCoder('u64').encode(encodedSelectorOffset));\n        // 5. Encoded argument offset\n        scriptData.push(new BigNumberCoder('u64').encode(encodedArgsOffset));\n        // 6. Encoded function selector\n        scriptData.push(call.fnSelectorBytes);\n        // 7. Encoded arguments\n        scriptData.push(encodedArgs);\n\n        // 8. Gas to be forwarded\n        if (call.gas) {\n          scriptData.push(new BigNumberCoder('u64').encode(call.gas));\n          gasForwardedOffset = encodedArgsOffset + encodedArgs.byteLength;\n        }\n\n        const callParamOffsets: CallOpcodeParamsOffset = {\n          amountOffset,\n          assetIdOffset,\n          gasForwardedOffset,\n          callDataOffset,\n        };\n\n        // store param offsets for asm instructions later\n        paramOffsets.push(callParamOffsets);\n        segmentOffset = dataOffset + concat(scriptData).byteLength;\n      }\n\n      // get asm instructions\n      const script = getInstructions(paramOffsets);\n      const finalScriptData = concat(scriptData);\n      return { data: finalScriptData, script };\n    },\n    () => [new Uint8Array()]\n  );\n", "import { concat, hexlify } from '@fuel-ts/utils';\nimport type * as asm from '@fuels/vm-asm';\n\n/**\n * A wrapper around fuel-asm to make dynamic instructions and convert to different formats\n */\nexport class InstructionSet {\n  #operations: asm.Instruction[];\n\n  constructor(...args: asm.Instruction[]) {\n    this.#operations = args || [];\n  }\n\n  entries(): asm.Instruction[] {\n    return this.#operations;\n  }\n\n  push(...args: asm.Instruction[]) {\n    this.#operations.push(...args);\n  }\n\n  concat(ops: asm.Instruction[]): asm.Instruction[] {\n    return this.#operations.concat(ops);\n  }\n\n  extend(ops: asm.Instruction[]) {\n    this.#operations.push(...ops);\n  }\n\n  toBytes(): Uint8Array {\n    return concat(\n      this.#operations.reduce((instructions, line) => {\n        instructions.push(line.to_bytes());\n        return instructions;\n      }, [] as Uint8Array[])\n    );\n  }\n\n  toHex(): string {\n    return hexlify(this.toBytes());\n  }\n\n  toString() {\n    return `Program:\\n${JSON.stringify(this.#operations, null, 2)}`;\n  }\n\n  byteLength() {\n    return this.toBytes().byteLength;\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  ASSET_ID_LEN,\n  CONTRACT_ID_LEN,\n  SCRIPT_FIXED_SIZE,\n  WORD_SIZE,\n  calculateVmTxMemory,\n} from '@fuel-ts/abi-coder';\nimport type {\n  TransactionResultReturnDataReceipt,\n  TransactionResultRevertReceipt,\n  CallResult,\n  TransactionResultReceipt,\n  TransactionResultReturnReceipt,\n  TransactionResultScriptResultReceipt,\n  DryRunFailureStatusFragment,\n  DecodedLogs,\n} from '@fuel-ts/account';\nimport { extractTxError } from '@fuel-ts/account';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport type { ReceiptScriptResult } from '@fuel-ts/transactions';\nimport { ReceiptType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport type { CallConfig } from './types';\n\nexport const calculateScriptDataBaseOffset = (maxInputs: number) =>\n  SCRIPT_FIXED_SIZE + calculateVmTxMemory({ maxInputs });\nexport const POINTER_DATA_OFFSET =\n  WORD_SIZE + ASSET_ID_LEN + CONTRACT_ID_LEN + WORD_SIZE + WORD_SIZE;\n/**\n * Represents a script result, containing information about the script execution.\n */\nexport type ScriptResult = {\n  code: BN;\n  gasUsed: BN;\n  receipts: TransactionResultReceipt[];\n  scriptResultReceipt: TransactionResultScriptResultReceipt;\n  returnReceipt:\n    | TransactionResultReturnReceipt\n    | TransactionResultReturnDataReceipt\n    | TransactionResultRevertReceipt;\n  callResult: CallResult;\n};\n\n/**\n * Converts a CallResult to a ScriptResult by extracting relevant information.\n *\n * @param callResult - The CallResult from the script call.\n * @returns The converted ScriptResult.\n */\nfunction callResultToScriptResult(callResult: CallResult): ScriptResult {\n  const receipts = [...callResult.receipts];\n\n  let scriptResultReceipt: ReceiptScriptResult | undefined;\n  let returnReceipt:\n    | TransactionResultReturnReceipt\n    | TransactionResultReturnDataReceipt\n    | TransactionResultRevertReceipt\n    | undefined;\n\n  receipts.forEach((receipt) => {\n    if (receipt.type === ReceiptType.ScriptResult) {\n      scriptResultReceipt = receipt;\n    } else if (\n      receipt.type === ReceiptType.Return ||\n      receipt.type === ReceiptType.ReturnData ||\n      receipt.type === ReceiptType.Revert\n    ) {\n      returnReceipt = receipt;\n    }\n  });\n\n  if (!scriptResultReceipt || !returnReceipt) {\n    throw new FuelError(ErrorCode.SCRIPT_REVERTED, `Transaction reverted.`);\n  }\n\n  const scriptResult: ScriptResult = {\n    code: scriptResultReceipt.result,\n    gasUsed: scriptResultReceipt.gasUsed,\n    receipts,\n    scriptResultReceipt,\n    returnReceipt,\n    callResult,\n  };\n\n  return scriptResult;\n}\n\n/**\n * Decodes a CallResult using the provided decoder function.\n *\n * @param callResult - The CallResult to decode.\n * @param decoder - The decoding function to apply on the ScriptResult.\n * @param logs - Optional logs associated with the decoding.\n * @returns The decoded result.\n * @throws Throws an error if decoding fails.\n */\nexport function decodeCallResult<TResult>(\n  callResult: CallResult,\n  decoder: (scriptResult: ScriptResult) => TResult,\n  logs: DecodedLogs['logs'] = [],\n  groupedLogs: DecodedLogs['groupedLogs'] = {}\n): TResult {\n  try {\n    const scriptResult = callResultToScriptResult(callResult);\n    return decoder(scriptResult);\n  } catch (error) {\n    if ((<FuelError>error).code === ErrorCode.SCRIPT_REVERTED) {\n      const statusReason = (<DryRunFailureStatusFragment>callResult?.dryRunStatus)?.reason;\n      throw extractTxError({\n        logs,\n        groupedLogs,\n        receipts: callResult.receipts,\n        statusReason,\n      });\n    }\n\n    throw error;\n  }\n}\n\n/**\n * Converts a CallResult to an invocation result based on the provided call configuration.\n *\n * @param callResult - The CallResult from the script call.\n * @param call - The call configuration.\n * @param logs - Optional logs associated with the decoding.\n * @returns The decoded invocation result.\n */\nexport function callResultToInvocationResult<TReturn>(\n  callResult: CallResult,\n  call: CallConfig,\n  logs?: DecodedLogs<unknown>['logs'],\n  groupedLogs?: DecodedLogs<unknown>['groupedLogs']\n): TReturn {\n  return decodeCallResult(\n    callResult,\n    (scriptResult: ScriptResult) => {\n      if (scriptResult.returnReceipt.type === ReceiptType.Revert) {\n        throw new FuelError(\n          ErrorCode.SCRIPT_REVERTED,\n          `Script Reverted. Logs: ${JSON.stringify(logs)}`\n        );\n      }\n\n      if (\n        scriptResult.returnReceipt.type !== ReceiptType.Return &&\n        scriptResult.returnReceipt.type !== ReceiptType.ReturnData\n      ) {\n        const { type } = scriptResult.returnReceipt;\n        throw new FuelError(\n          ErrorCode.SCRIPT_REVERTED,\n          `Script Return Type [${type}] Invalid. Logs: ${JSON.stringify({\n            logs,\n            groupedLogs,\n            receipt: scriptResult.returnReceipt,\n          })}`\n        );\n      }\n\n      let value;\n      if (scriptResult.returnReceipt.type === ReceiptType.Return) {\n        value = scriptResult.returnReceipt.val;\n      }\n      if (scriptResult.returnReceipt.type === ReceiptType.ReturnData) {\n        const decoded = call.func.decodeOutput(scriptResult.returnReceipt.data);\n        value = decoded[0];\n      }\n\n      return value as TReturn;\n    },\n    logs\n  );\n}\n\nexport type EncodedScriptCall = Uint8Array | { data: Uint8Array; script: Uint8Array };\n\n/**\n * `ScriptRequest` provides functionality to encode and decode script data and results.\n *\n * @template TData - Type of the script data.\n * @template TResult - Type of the script result.\n */\nexport class ScriptRequest<TData = void, TResult = void> {\n  /**\n   * The bytes of the script.\n   */\n  bytes: Uint8Array;\n\n  /**\n   * A function to encode the script data.\n   */\n  scriptDataEncoder: (data: TData) => EncodedScriptCall;\n\n  /**\n   * A function to decode the script result.\n   */\n  scriptResultDecoder: (scriptResult: ScriptResult) => TResult;\n\n  /**\n   * Creates an instance of the ScriptRequest class.\n   *\n   * @param bytes - The bytes of the script.\n   * @param scriptDataEncoder - The script data encoder function.\n   * @param scriptResultDecoder - The script result decoder function.\n   */\n  constructor(\n    bytes: BytesLike,\n    scriptDataEncoder: (data: TData) => EncodedScriptCall,\n    scriptResultDecoder: (scriptResult: ScriptResult) => TResult\n  ) {\n    this.bytes = arrayify(bytes);\n    this.scriptDataEncoder = scriptDataEncoder;\n    this.scriptResultDecoder = scriptResultDecoder;\n  }\n\n  /**\n   * Gets the script data offset for the given bytes.\n   *\n   * @param byteLength - The byte length of the script.\n   * @param maxInputs - The maxInputs value from the chain's consensus params.\n   * @returns The script data offset.\n   */\n  static getScriptDataOffsetWithScriptBytes(byteLength: number, maxInputs: number): number {\n    const scriptDataBaseOffset = calculateVmTxMemory({ maxInputs }) + SCRIPT_FIXED_SIZE;\n    return scriptDataBaseOffset + byteLength;\n  }\n\n  /**\n   * Gets the script data offset.\n   *\n   * @param maxInputs - The maxInputs value from the chain's consensus params.\n   * @returns The script data offset.\n   */\n  getScriptDataOffset(maxInputs: number) {\n    return ScriptRequest.getScriptDataOffsetWithScriptBytes(this.bytes.length, maxInputs);\n  }\n\n  /**\n   * Encodes the data for a script call.\n   *\n   * @param data - The script data.\n   * @returns The encoded data.\n   */\n  encodeScriptData(data: TData): Uint8Array {\n    const callScript = this.scriptDataEncoder(data);\n    // if Uint8Array\n    if (ArrayBuffer.isView(callScript)) {\n      return callScript;\n    }\n\n    // object\n    this.bytes = arrayify(callScript.script);\n    return callScript.data;\n  }\n\n  /**\n   * Decodes the result of a script call.\n   *\n   * @param callResult - The CallResult from the script call.\n   * @param logs - Optional logs associated with the decoding.\n   * @returns The decoded result.\n   */\n  decodeCallResult(callResult: CallResult, logs: Array<any> = []): TResult {\n    return decodeCallResult(callResult, this.scriptResultDecoder, logs);\n  }\n}\n", "import type {\n  TransactionResultReceipt,\n  TransactionResponse,\n  TransactionResult,\n  CallResult,\n  DecodedLogs,\n} from '@fuel-ts/account';\nimport { getGasUsedFromReceipts } from '@fuel-ts/account';\nimport type { TransactionType } from '@fuel-ts/transactions';\n\nimport { decodeContractCallScriptResult } from './contract-call-script';\nimport { callResultToInvocationResult } from './script-request';\nimport type {\n  AbstractContract,\n  AbstractProgram,\n  InvocationScopeLike,\n  FunctionResult,\n  DryRunResult,\n} from './types';\nimport { getAllResultLogs } from './utils';\n\n/** @hidden */\nexport const extractInvocationResult = <T>(\n  functionScopes: Array<InvocationScopeLike>,\n  receipts: TransactionResultReceipt[],\n  isMultiCall: boolean,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  logs: DecodedLogs<any>['logs'],\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  groupedLogs: DecodedLogs<any>['groupedLogs'] = {}\n) => {\n  const mainCallConfig = functionScopes[0]?.getCallConfig();\n\n  if (functionScopes.length === 1 && mainCallConfig && 'bytes' in mainCallConfig.program) {\n    return callResultToInvocationResult<T>({ receipts }, mainCallConfig, logs, groupedLogs);\n  }\n  const encodedResults = decodeContractCallScriptResult(\n    { receipts },\n    (mainCallConfig?.program as AbstractContract).id,\n    logs,\n    groupedLogs\n  );\n\n  const decodedResults = encodedResults.map((encodedResult, i) => {\n    const { func } = functionScopes[i].getCallConfig();\n    return func.decodeOutput(encodedResult)?.[0];\n  });\n\n  return (isMultiCall ? decodedResults : decodedResults?.[0]) as T;\n};\n\ntype BuiltFunctionResultParams = {\n  funcScope: InvocationScopeLike | Array<InvocationScopeLike>;\n  transactionResponse: TransactionResponse;\n  isMultiCall: boolean;\n  program: AbstractProgram;\n};\n\n/** @hidden */\nexport const buildFunctionResult = async <T>(\n  params: BuiltFunctionResultParams\n): Promise<FunctionResult<T>> => {\n  const { funcScope, isMultiCall, program, transactionResponse } = params;\n\n  const txResult = await transactionResponse.waitForResult();\n\n  const { receipts } = txResult;\n\n  const functionScopes = Array.isArray(funcScope) ? funcScope : [funcScope];\n  const mainCallConfig = functionScopes[0]?.getCallConfig();\n\n  const { logs, groupedLogs } = getAllResultLogs({ receipts, mainCallConfig, functionScopes });\n  const value = extractInvocationResult<T>(\n    functionScopes,\n    receipts,\n    isMultiCall,\n    logs,\n    groupedLogs\n  );\n  const gasUsed = getGasUsedFromReceipts(receipts);\n\n  const submitResult: FunctionResult<T> = {\n    isMultiCall,\n    functionScopes,\n    value,\n    program,\n    transactionResult: txResult as TransactionResult<TransactionType.Script>,\n    transactionResponse,\n    transactionId: transactionResponse.id,\n    logs,\n    groupedLogs,\n    gasUsed,\n  };\n\n  return submitResult;\n};\n\ntype BuiltDryRunResultParams = {\n  funcScopes: InvocationScopeLike | Array<InvocationScopeLike>;\n  callResult: CallResult;\n  isMultiCall: boolean;\n};\n\n/** @hidden * */\nexport const buildDryRunResult = <T>(params: BuiltDryRunResultParams): DryRunResult<T> => {\n  const { funcScopes, callResult, isMultiCall } = params;\n  const { receipts } = callResult;\n  const functionScopes = Array.isArray(funcScopes) ? funcScopes : [funcScopes];\n  const mainCallConfig = functionScopes[0]?.getCallConfig();\n\n  const { logs, groupedLogs } = getAllResultLogs({ receipts, mainCallConfig, functionScopes });\n  const value = extractInvocationResult<T>(\n    functionScopes,\n    receipts,\n    isMultiCall,\n    logs,\n    groupedLogs\n  );\n  const gasUsed = getGasUsedFromReceipts(receipts);\n\n  const submitResult: DryRunResult<T> = {\n    functionScopes,\n    callResult,\n    isMultiCall,\n    gasUsed,\n    value,\n  };\n\n  return submitResult;\n};\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { AbstractContract } from '../types';\n\nimport { BaseInvocationScope } from './base-invocation-scope';\nimport type { FunctionInvocationScope } from './invocation-scope';\n\n/**\n * Represents a scope for invoking multiple calls.\n *\n * @template TReturn - The type of the return value.\n */\nexport class MultiCallInvocationScope<TReturn = any> extends BaseInvocationScope<TReturn> {\n  /**\n   * Constructs an instance of MultiCallInvocationScope.\n   *\n   * @param contract - The contract.\n   * @param funcScopes - An array of function invocation scopes.\n   */\n  constructor(contract: AbstractContract, funcScopes: Array<FunctionInvocationScope>) {\n    super(contract, true);\n    this.addCalls(funcScopes);\n  }\n\n  /**\n   * Adds a single function invocation scope to the multi-call invocation scope.\n   *\n   * @param funcScope - The function invocation scope.\n   * @returns The instance of MultiCallInvocationScope.\n   */\n  override addCall(funcScope: FunctionInvocationScope) {\n    return super.addCalls([funcScope]);\n  }\n\n  /**\n   * Adds multiple function invocation scopes to the multi-call invocation scope.\n   *\n   * @param funcScopes - An array of function invocation scopes.\n   * @returns The instance of MultiCallInvocationScope.\n   */\n  override addCalls(funcScopes: Array<FunctionInvocationScope>) {\n    return super.addCalls(funcScopes);\n  }\n}\n", "import type { FunctionFragment, JsonAbi } from '@fuel-ts/abi-coder';\nimport { Interface } from '@fuel-ts/abi-coder';\nimport type { Account, Provider } from '@fuel-ts/account';\nimport type { AddressInput } from '@fuel-ts/address';\nimport { Address } from '@fuel-ts/address';\nimport type { BytesLike } from '@fuel-ts/utils';\n\nimport { FunctionInvocationScope } from './functions/invocation-scope';\nimport { MultiCallInvocationScope } from './functions/multicall-scope';\nimport type { AbstractContract, InvokeFunction, InvokeFunctions } from './types';\n\n/**\n * `Contract` provides a way to interact with the contract program type.\n */\nexport default class Contract implements AbstractContract {\n  /**\n   * The unique contract identifier.\n   */\n  id!: Address;\n\n  /**\n   * The provider for interacting with the contract.\n   */\n  provider!: Provider;\n\n  /**\n   * The contract's ABI interface.\n   */\n  interface!: Interface;\n\n  /**\n   * The account associated with the contract, if available.\n   */\n  account!: Account | null;\n\n  /**\n   * A collection of functions available on the contract.\n   */\n  functions: InvokeFunctions = {};\n\n  /**\n   * Creates an instance of the Contract class.\n   *\n   * @param id - The contract's address.\n   * @param abi - The contract's ABI (JSON ABI or Interface instance).\n   * @param accountOrProvider - The account or provider for interaction.\n   */\n  constructor(id: AddressInput, abi: JsonAbi | Interface, accountOrProvider: Account | Provider) {\n    this.interface = abi instanceof Interface ? abi : new Interface(abi);\n    this.id = new Address(id);\n\n    /**\n      Instead of using `instanceof` to compare classes, we instead check\n      if `accountOrProvider` have a `provider` property inside. If yes,\n      than we assume it's a Wallet.\n\n      This approach is safer than using `instanceof` because it\n      there might be different versions and bundles of the library.\n\n      The same is done at:\n        - ./contract-factory.ts\n\n      @see ContractFactory\n    */\n    if (accountOrProvider && 'provider' in accountOrProvider) {\n      this.provider = accountOrProvider.provider;\n      this.account = accountOrProvider;\n    } else {\n      this.provider = accountOrProvider;\n      this.account = null;\n    }\n\n    Object.keys(this.interface.functions).forEach((name) => {\n      const fragment = this.interface.getFunction(name);\n      Object.defineProperty(this.functions, fragment.name, {\n        value: this.buildFunction(fragment),\n        writable: false,\n      });\n    });\n  }\n\n  /**\n   * Build a function invocation scope for the provided function fragment.\n   *\n   * @param func - The function fragment to build a scope for.\n   * @returns A function that creates a FunctionInvocationScope.\n   */\n  buildFunction(func: FunctionFragment) {\n    return (() => {\n      const funcInvocationScopeCreator = (...args: Array<unknown>) =>\n        new FunctionInvocationScope(this, func, args);\n\n      Object.defineProperty(funcInvocationScopeCreator, 'isReadOnly', {\n        value: () => func.isReadOnly(),\n        writable: false,\n      });\n\n      return funcInvocationScopeCreator;\n    })() as InvokeFunction;\n  }\n\n  /**\n   * Create a multi-call invocation scope for the provided function invocation scopes.\n   *\n   * @param calls - An array of FunctionInvocationScopes to execute in a batch.\n   * @returns A MultiCallInvocationScope instance.\n   */\n  multiCall(calls: Array<FunctionInvocationScope>) {\n    return new MultiCallInvocationScope(this, calls);\n  }\n\n  /**\n   * Get the balance for a given asset ID for this contract.\n   *\n   * @param assetId - The specified asset ID.\n   * @returns The balance of the contract for the specified asset.\n   */\n  getBalance(assetId: BytesLike) {\n    return this.provider.getContractBalance(this.id, assetId);\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Interface } from '@fuel-ts/abi-coder';\nimport type { InputValue, JsonAbi } from '@fuel-ts/abi-coder';\nimport { deployScriptOrPredicate, type Account, type Provider } from '@fuel-ts/account';\nimport { FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport type { ScriptRequest } from '@fuel-ts/program';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport { ScriptInvocationScope } from './script-invocation-scope';\nimport { AbstractScript } from './types';\n\n/**\n * Represents the result of a script execution.\n */\ntype Result<T> = {\n  value: T | BN | undefined;\n  logs: unknown[];\n};\n\n/**\n * Represents a function that can be invoked within a script.\n */\ntype InvokeMain<TArgs extends Array<any> = Array<any>, TReturn = any> = (\n  ...args: TArgs\n) => ScriptInvocationScope<TArgs, TReturn>;\n\n/**\n * `Script` provides a typed interface for interacting with the script program type.\n */\nexport class Script<TInput extends Array<any>, TOutput> extends AbstractScript {\n  /**\n   * The compiled bytecode of the script.\n   */\n  bytes: Uint8Array;\n\n  /**\n   * The ABI interface for the script.\n   */\n  interface: Interface;\n\n  /**\n   * The account associated with the script.\n   */\n  account: Account;\n\n  /**\n   * The script request object.\n   */\n  script!: ScriptRequest<InputValue<void>[], Result<TOutput>>;\n\n  /**\n   * The provider used for interacting with the network.\n   */\n  provider: Provider;\n\n  /**\n   * Functions that can be invoked within the script.\n   */\n  functions: { main: InvokeMain<TInput, TOutput> };\n\n  /**\n   * Create a new instance of the Script class.\n   *\n   * @param bytecode - The compiled bytecode of the script.\n   * @param abi - The ABI interface for the script.\n   * @param account - The account associated with the script.\n   */\n  constructor(bytecode: BytesLike, abi: JsonAbi, account: Account) {\n    super();\n    this.bytes = arrayify(bytecode);\n    this.interface = new Interface(abi);\n\n    this.provider = account.provider;\n    this.account = account;\n\n    this.functions = {\n      main: (...args: TInput) =>\n        new ScriptInvocationScope(this, this.interface.getFunction('main'), args),\n    };\n  }\n\n  /**\n   * Set the configurable constants of the script.\n   *\n   * @param configurables - An object containing the configurable constants and their values.\n   * @throws Will throw an error if the script has no configurable constants to be set or if an invalid constant is provided.\n   * @returns This instance of the `Script`.\n   */\n  setConfigurableConstants(configurables: { [name: string]: unknown }) {\n    try {\n      if (!Object.keys(this.interface.configurables).length) {\n        throw new FuelError(\n          FuelError.CODES.INVALID_CONFIGURABLE_CONSTANTS,\n          `The script does not have configurable constants to be set`\n        );\n      }\n\n      Object.entries(configurables).forEach(([key, value]) => {\n        if (!this.interface.configurables[key]) {\n          throw new FuelError(\n            FuelError.CODES.CONFIGURABLE_NOT_FOUND,\n            `The script does not have a configurable constant named: '${key}'`\n          );\n        }\n\n        const { offset } = this.interface.configurables[key];\n\n        const encoded = this.interface.encodeConfigurable(key, value as InputValue);\n\n        this.bytes.set(encoded, offset);\n      });\n    } catch (err) {\n      throw new FuelError(\n        FuelError.CODES.INVALID_CONFIGURABLE_CONSTANTS,\n        `Error setting configurable constants: ${(<Error>err).message}.`\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   * @param account - The account used to pay the deployment costs.\n   * @returns The _blobId_ and a _waitForResult_ callback that returns the deployed predicate\n   * once the blob deployment transaction finishes.\n   *\n   * The returned loader script will have the same configurable constants\n   * as the original script which was used to generate the loader script.\n   */\n  deploy<T = this>(account: Account) {\n    return deployScriptOrPredicate<T>({\n      deployer: account,\n      abi: this.interface.jsonAbi,\n      bytecode: this.bytes,\n      loaderInstanceCallback: (loaderBytecode, newAbi) =>\n        new Script(loaderBytecode, newAbi, this.account) as T,\n    });\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { Provider } from '@fuel-ts/account';\nimport { FuelError } from '@fuel-ts/errors';\nimport { ScriptRequest, FunctionInvocationScope } from '@fuel-ts/program';\n\nimport type { AbstractScript } from './types';\n\nexport class ScriptInvocationScope<\n  TArgs extends Array<any> = Array<any>,\n  TReturn = any,\n> extends FunctionInvocationScope<TArgs, TReturn> {\n  scriptRequest!: ScriptRequest<TArgs, TReturn>;\n\n  protected override async updateScriptRequest() {\n    if (!this.scriptRequest) {\n      await this.buildScriptRequest();\n    }\n\n    this.transactionRequest.setScript(this.scriptRequest, this.args);\n  }\n\n  private async buildScriptRequest() {\n    const programBytes = (this.program as AbstractScript).bytes;\n    const chainInfoCache = await (this.program.provider as Provider).getChain();\n\n    // TODO: Remove this error since it is already handled on Provider class\n    if (!chainInfoCache) {\n      throw new FuelError(\n        FuelError.CODES.CHAIN_INFO_CACHE_EMPTY,\n        'Provider chain info cache is empty. Please make sure to initialize the `Provider` properly by running `new Provider()`'\n      );\n    }\n\n    this.scriptRequest = new ScriptRequest(\n      programBytes,\n      (args: TArgs) => this.func.encodeArguments(args),\n      () => [] as unknown as TReturn\n    );\n  }\n}\n", "import { AbstractProgram } from '@fuel-ts/program';\n\n/**\n * @hidden\n */\nexport abstract class AbstractScript extends AbstractProgram {\n  abstract bytes: Uint8Array;\n}\n", "import { ScriptRequest } from '@fuel-ts/program';\n\n/**\n * @hidden\n *\n * A script that just returns zero\n *\n * Accepts nothing\n * Returns nothing\n *\n * Used for coin transfer transactions\n */\nexport const returnZeroScript = new ScriptRequest(\n  /*\n    Opcode::RET(REG_ZERO)\n    Opcode::NOOP\n  */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  '0x24000000',\n  () => new Uint8Array(0),\n  () => undefined\n);\n", "import { Interface, WORD_SIZE } from '@fuel-ts/abi-coder';\nimport type { JsonAbi, InputValue } from '@fuel-ts/abi-coder';\nimport type {\n  Account,\n  CreateTransactionRequestLike,\n  Provider,\n  TransactionRequest,\n  TransactionResult,\n  TransactionType,\n} from '@fuel-ts/account';\nimport {\n  CreateTransactionRequest,\n  BlobTransactionRequest,\n  TransactionStatus,\n  calculateGasFee,\n} from '@fuel-ts/account';\nimport { randomBytes } from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { hash } from '@fuel-ts/hasher';\nimport { bn } from '@fuel-ts/math';\nimport { Contract } from '@fuel-ts/program';\nimport type { StorageSlot } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, isDefined } from '@fuel-ts/utils';\n\nimport { getLoaderInstructions, getContractChunks } from './loader';\nimport { getContractId, getContractStorageRoot, hexlifyWithPrefix } from './util';\n\n/** Amount of percentage override for chunk sizes in blob transactions */\nconst CHUNK_SIZE_MULTIPLIER = 0.95;\n\n/**\n * Options for deploying a contract.\n */\nexport type DeployContractOptions = {\n  salt?: BytesLike;\n  storageSlots?: StorageSlot[];\n  stateRoot?: BytesLike;\n  configurableConstants?: { [name: string]: unknown };\n  chunkSizeMultiplier?: number;\n} & CreateTransactionRequestLike;\n\nexport type DeployContractResult<TContract extends Contract = Contract> = {\n  contractId: string;\n  waitForTransactionId: () => Promise<string>;\n  waitForResult: () => Promise<{\n    contract: TContract;\n    transactionResult: TransactionResult<TransactionType.Create>;\n  }>;\n};\n\n/**\n * `ContractFactory` provides utilities for deploying and configuring contracts.\n */\nexport default class ContractFactory<TContract extends Contract = Contract> {\n  bytecode: BytesLike;\n  interface: Interface;\n  provider!: Provider | null;\n  account!: Account | null;\n  storageSlots: StorageSlot[];\n\n  /**\n   * Create a ContractFactory instance.\n   *\n   * @param bytecode - The bytecode of the contract.\n   * @param abi - The contract's ABI (Application Binary Interface).\n   * @param accountOrProvider - An account or provider to be associated with the factory.\n   */\n  constructor(\n    bytecode: BytesLike,\n    abi: JsonAbi | Interface,\n    accountOrProvider: Account | Provider | null = null,\n    storageSlots: StorageSlot[] = []\n  ) {\n    // Force the bytecode to be a byte array\n    this.bytecode = arrayify(bytecode);\n\n    if (abi instanceof Interface) {\n      this.interface = abi;\n    } else {\n      this.interface = new Interface(abi);\n    }\n\n    /**\n     Instead of using `instanceof` to compare classes, we instead check\n      if `accountOrProvider` has a `provider` property inside. If yes,\n      than we assume it's a Wallet.\n\n      This approach is safer than using `instanceof` because it\n      there might be different versions and bundles of the library.\n\n      The same is done at:\n      - ./contract.ts\n\n      @see Contract\n      */\n    if (accountOrProvider && 'provider' in accountOrProvider) {\n      this.provider = accountOrProvider.provider;\n      this.account = accountOrProvider;\n    } else {\n      this.provider = accountOrProvider;\n      this.account = null;\n    }\n\n    this.storageSlots = storageSlots;\n  }\n\n  /**\n   * Connect the factory to a provider.\n   *\n   * @param provider - The provider to be associated with the factory.\n   * @returns A new ContractFactory instance.\n   */\n  connect(provider: Provider) {\n    return new ContractFactory(this.bytecode, this.interface, provider);\n  }\n\n  /**\n   * Create a transaction request to deploy a contract with the specified options.\n   *\n   * @param deployOptions - Options for deploying the contract.\n   * @returns The CreateTransactionRequest object for deploying the contract.\n   */\n  createTransactionRequest(deployOptions?: DeployContractOptions & { bytecode?: BytesLike }) {\n    const storageSlots = (deployOptions?.storageSlots ?? [])\n      .concat(this.storageSlots)\n      .map(({ key, value }) => ({\n        key: hexlifyWithPrefix(key),\n        value: hexlifyWithPrefix(value),\n      }))\n      .filter((el, index, self) => self.findIndex((s) => s.key === el.key) === index)\n      .sort(({ key: keyA }, { key: keyB }) => keyA.localeCompare(keyB));\n\n    const options = {\n      salt: randomBytes(32),\n      ...(deployOptions ?? {}),\n      storageSlots,\n    };\n\n    if (!this.provider) {\n      throw new FuelError(\n        ErrorCode.MISSING_PROVIDER,\n        'Cannot create transaction request without provider'\n      );\n    }\n\n    const bytecode = deployOptions?.bytecode || this.bytecode;\n    const stateRoot = options.stateRoot || getContractStorageRoot(options.storageSlots);\n    const contractId = getContractId(bytecode, options.salt, stateRoot);\n    const transactionRequest = new CreateTransactionRequest({\n      bytecodeWitnessIndex: 0,\n      witnesses: [bytecode],\n      ...options,\n    });\n    transactionRequest.addContractCreatedOutput(contractId, stateRoot);\n\n    return {\n      contractId,\n      transactionRequest,\n    };\n  }\n\n  /**\n   * Takes a transaction request, estimates it and funds it.\n   *\n   * @param request - the request to fund.\n   * @param options - options for funding the request.\n   * @returns a funded transaction request.\n   */\n  private async fundTransactionRequest(\n    request: TransactionRequest,\n    options: DeployContractOptions = {}\n  ) {\n    const account = this.getAccount();\n    const { maxFee: setMaxFee } = options;\n\n    const txCost = await account.getTransactionCost(request);\n\n    if (isDefined(setMaxFee)) {\n      if (txCost.maxFee.gt(setMaxFee)) {\n        throw new FuelError(\n          ErrorCode.MAX_FEE_TOO_LOW,\n          `Max fee '${options.maxFee}' is lower than the required: '${txCost.maxFee}'.`\n        );\n      }\n    } else {\n      request.maxFee = txCost.maxFee;\n    }\n\n    await account.fund(request, txCost);\n\n    return request;\n  }\n\n  /**\n   * Deploy a contract of any length with the specified options.\n   *\n   * @param deployOptions - Options for deploying the contract.\n   * @returns A promise that resolves to the deployed contract instance.\n   */\n  async deploy<T extends Contract = TContract>(\n    deployOptions: DeployContractOptions = {}\n  ): Promise<DeployContractResult<T>> {\n    const account = this.getAccount();\n    const { consensusParameters } = await account.provider.getChain();\n    const maxContractSize = consensusParameters.contractParameters.contractMaxSize.toNumber();\n\n    return this.bytecode.length > maxContractSize\n      ? this.deployAsBlobTx(deployOptions)\n      : this.deployAsCreateTx<T>(deployOptions);\n  }\n\n  /**\n   * Deploy a contract with the specified options.\n   *\n   * @param deployOptions - Options for deploying the contract.\n   * @returns A promise that resolves to the deployed contract instance.\n   */\n  async deployAsCreateTx<T extends Contract = TContract>(\n    deployOptions: DeployContractOptions = {}\n  ): Promise<DeployContractResult<T>> {\n    const account = this.getAccount();\n    const { consensusParameters } = await account.provider.getChain();\n    const maxContractSize = consensusParameters.contractParameters.contractMaxSize.toNumber();\n\n    if (this.bytecode.length > maxContractSize) {\n      throw new FuelError(\n        ErrorCode.CONTRACT_SIZE_EXCEEDS_LIMIT,\n        'Contract bytecode is too large. Please use `deployAsBlobTx` instead.'\n      );\n    }\n\n    const { contractId, transactionRequest } = await this.prepareDeploy(deployOptions);\n\n    const transactionResponse = await account.sendTransaction(transactionRequest);\n\n    const waitForResult = async () => {\n      const transactionResult = await transactionResponse.waitForResult<TransactionType.Create>();\n      const contract = new Contract(contractId, this.interface, account) as T;\n\n      return { contract, transactionResult };\n    };\n\n    return {\n      contractId,\n      waitForTransactionId: () => Promise.resolve(transactionResponse.id),\n      waitForResult,\n    };\n  }\n\n  /**\n   * Chunks and deploys a contract via a loader contract. Suitable for deploying contracts larger than the max contract size.\n   *\n   * @param deployOptions - Options for deploying the contract.\n   * @returns A promise that resolves to the deployed contract instance.\n   */\n  async deployAsBlobTx<T extends Contract = TContract>(\n    deployOptions: DeployContractOptions = {\n      chunkSizeMultiplier: CHUNK_SIZE_MULTIPLIER,\n    }\n  ): Promise<DeployContractResult<T>> {\n    const account = this.getAccount();\n    const { configurableConstants, chunkSizeMultiplier } = deployOptions;\n    if (configurableConstants) {\n      this.setConfigurableConstants(configurableConstants);\n    }\n\n    // Generate the chunks based on the maximum chunk size and create blob txs\n    const chunkSize = await this.getMaxChunkSize(deployOptions, chunkSizeMultiplier);\n    const chunks = getContractChunks(arrayify(this.bytecode), chunkSize).map((c) => {\n      const transactionRequest = this.blobTransactionRequest({\n        ...deployOptions,\n        bytecode: c.bytecode,\n      });\n      return {\n        ...c,\n        transactionRequest,\n        blobId: transactionRequest.blobId,\n      };\n    });\n\n    // Generate the associated create tx for the loader contract\n    const blobIds = chunks.map(({ blobId }) => blobId);\n    const loaderBytecode = getLoaderInstructions(blobIds);\n    const { contractId, transactionRequest: createRequest } = this.createTransactionRequest({\n      bytecode: loaderBytecode,\n      ...deployOptions,\n    });\n\n    // BlobIDs only need to be uploaded once and we can check if they exist on chain\n    const uniqueBlobIds = [...new Set(blobIds)];\n    const uploadedBlobIds = await account.provider.getBlobs(uniqueBlobIds);\n    const blobIdsToUpload = uniqueBlobIds.filter((id) => !uploadedBlobIds.includes(id));\n\n    // Check the account can afford to deploy all chunks and loader\n    let totalCost = bn(0);\n    const chainInfo = await account.provider.getChain();\n    const gasPrice = await account.provider.estimateGasPrice(10);\n    const priceFactor = chainInfo.consensusParameters.feeParameters.gasPriceFactor;\n\n    for (const { transactionRequest, blobId } of chunks) {\n      if (blobIdsToUpload.includes(blobId)) {\n        const minGas = transactionRequest.calculateMinGas(chainInfo);\n        const minFee = calculateGasFee({\n          gasPrice,\n          gas: minGas,\n          priceFactor,\n          tip: transactionRequest.tip,\n        }).add(1);\n\n        totalCost = totalCost.add(minFee);\n      }\n      const createMinGas = createRequest.calculateMinGas(chainInfo);\n      const createMinFee = calculateGasFee({\n        gasPrice,\n        gas: createMinGas,\n        priceFactor,\n        tip: createRequest.tip,\n      }).add(1);\n      totalCost = totalCost.add(createMinFee);\n    }\n    if (totalCost.gt(await account.getBalance())) {\n      throw new FuelError(ErrorCode.FUNDS_TOO_LOW, 'Insufficient balance to deploy contract.');\n    }\n\n    // Transaction id is unset until we have funded the create tx, which is dependent on the blob txs\n    let txIdResolver: (value: string | PromiseLike<string>) => void;\n    const txIdPromise = new Promise<string>((resolve) => {\n      txIdResolver = resolve;\n    });\n\n    const waitForResult = async () => {\n      // Upload the blob if it hasn't been uploaded yet. Duplicate blob IDs will fail gracefully.\n      const uploadedBlobs: string[] = [];\n      // Deploy the chunks as blob txs\n      for (const { blobId, transactionRequest } of chunks) {\n        if (!uploadedBlobs.includes(blobId) && blobIdsToUpload.includes(blobId)) {\n          const fundedBlobRequest = await this.fundTransactionRequest(\n            transactionRequest,\n            deployOptions\n          );\n\n          let result: TransactionResult<TransactionType.Blob>;\n\n          try {\n            const blobTx = await account.sendTransaction(fundedBlobRequest);\n            result = await blobTx.waitForResult();\n          } catch (err: unknown) {\n            // Core will throw for blobs that have already been uploaded, but the blobId\n            // is still valid so we can use this for the loader contract\n            if ((<Error>err).message.indexOf(`BlobId is already taken ${blobId}`) > -1) {\n              uploadedBlobs.push(blobId);\n              continue;\n            }\n\n            throw new FuelError(ErrorCode.TRANSACTION_FAILED, 'Failed to deploy contract chunk');\n          }\n\n          if (!result.status || result.status !== TransactionStatus.success) {\n            throw new FuelError(ErrorCode.TRANSACTION_FAILED, 'Failed to deploy contract chunk');\n          }\n\n          uploadedBlobs.push(blobId);\n        }\n      }\n\n      await this.fundTransactionRequest(createRequest, deployOptions);\n      txIdResolver(createRequest.getTransactionId(await account.provider.getChainId()));\n      const transactionResponse = await account.sendTransaction(createRequest);\n      const transactionResult = await transactionResponse.waitForResult<TransactionType.Create>();\n      const contract = new Contract(contractId, this.interface, account) as T;\n\n      return { contract, transactionResult };\n    };\n\n    const waitForTransactionId = () => txIdPromise;\n\n    return { waitForResult, contractId, waitForTransactionId };\n  }\n\n  /**\n   * Set configurable constants of the contract with the specified values.\n   *\n   * @param configurableConstants - An object containing configurable names and their values.\n   */\n  setConfigurableConstants(configurableConstants: { [name: string]: unknown }) {\n    try {\n      const hasConfigurable = Object.keys(this.interface.configurables).length;\n\n      if (!hasConfigurable) {\n        throw new FuelError(\n          ErrorCode.CONFIGURABLE_NOT_FOUND,\n          'Contract does not have configurables to be set'\n        );\n      }\n\n      Object.entries(configurableConstants).forEach(([key, value]) => {\n        if (!this.interface.configurables[key]) {\n          throw new FuelError(\n            ErrorCode.CONFIGURABLE_NOT_FOUND,\n            `Contract does not have a configurable named: '${key}'`\n          );\n        }\n\n        const { offset } = this.interface.configurables[key];\n\n        const encoded = this.interface.encodeConfigurable(key, value as InputValue);\n\n        const bytes = arrayify(this.bytecode);\n\n        bytes.set(encoded, offset);\n\n        this.bytecode = bytes;\n      });\n    } catch (err) {\n      throw new FuelError(\n        ErrorCode.INVALID_CONFIGURABLE_CONSTANTS,\n        `Error setting configurable constants on contract: ${(<Error>err).message}.`\n      );\n    }\n  }\n\n  private getAccount(): Account {\n    if (!this.account) {\n      throw new FuelError(ErrorCode.ACCOUNT_REQUIRED, 'Account not assigned to contract.');\n    }\n    return this.account;\n  }\n\n  private async prepareDeploy(deployOptions: DeployContractOptions) {\n    const { configurableConstants } = deployOptions;\n\n    if (configurableConstants) {\n      this.setConfigurableConstants(configurableConstants);\n    }\n\n    const { contractId, transactionRequest } = this.createTransactionRequest(deployOptions);\n\n    await this.fundTransactionRequest(transactionRequest, deployOptions);\n\n    return {\n      contractId,\n      transactionRequest,\n    };\n  }\n\n  /**\n   * Create a blob transaction request, used for deploying contract chunks.\n   *\n   * @param options - options for creating a blob transaction request.\n   * @returns a populated BlobTransactionRequest.\n   */\n  private blobTransactionRequest(options: { bytecode: BytesLike } & DeployContractOptions) {\n    const { bytecode } = options;\n    return new BlobTransactionRequest({\n      blobId: hash(bytecode),\n      witnessIndex: 0,\n      witnesses: [bytecode],\n      ...options,\n    });\n  }\n\n  /**\n   * Get the maximum chunk size for deploying a contract by chunks.\n   */\n  private async getMaxChunkSize(\n    deployOptions: DeployContractOptions,\n    chunkSizeMultiplier: number = CHUNK_SIZE_MULTIPLIER\n  ) {\n    if (chunkSizeMultiplier < 0 || chunkSizeMultiplier > 1) {\n      throw new FuelError(\n        ErrorCode.INVALID_CHUNK_SIZE_MULTIPLIER,\n        'Chunk size multiplier must be between 0 and 1'\n      );\n    }\n\n    const account = this.getAccount();\n    const { consensusParameters } = await account.provider.getChain();\n    const contractSizeLimit = consensusParameters.contractParameters.contractMaxSize.toNumber();\n    const transactionSizeLimit = consensusParameters.txParameters.maxSize.toNumber();\n    const maxLimit = 64000;\n    const chainLimit =\n      transactionSizeLimit < contractSizeLimit ? transactionSizeLimit : contractSizeLimit;\n    const sizeLimit = chainLimit < maxLimit ? chainLimit : maxLimit;\n\n    // Get an estimate base tx length\n\n    const blobTx = this.blobTransactionRequest({\n      ...deployOptions,\n      bytecode: randomBytes(32),\n    }).addResources(\n      account.generateFakeResources([\n        { assetId: await account.provider.getBaseAssetId(), amount: bn(1) },\n      ])\n    );\n    // Given above, calculate the maximum chunk size\n    const maxChunkSize = (sizeLimit - blobTx.byteLength() - WORD_SIZE) * chunkSizeMultiplier;\n\n    // Ensure chunksize is byte aligned\n    return Math.round(maxChunkSize / WORD_SIZE) * WORD_SIZE;\n  }\n}\n", "import { BYTES_32 } from '@fuel-ts/abi-coder';\nimport { InstructionSet } from '@fuel-ts/program';\nimport { arrayify, concat } from '@fuel-ts/utils';\nimport * as asm from '@fuels/vm-asm';\n\nexport const getLoaderInstructions = (blobIds: string[]): Uint8Array => {\n  const { RegId, Instruction } = asm;\n\n  const numberOfInstructions = 12;\n  const numberOfBlobs = blobIds.length;\n  const blobIdSize = BYTES_32;\n\n  // Bytes for the Blob Ids\n  const blobIdBytes = concat(blobIds.map((b) => arrayify(b)));\n\n  // Reference: https://github.com/FuelLabs/fuels-rs/blob/master/packages/fuels-programs/src/contract/loader.rs\n  // There are 2 main steps:\n  // 1. Load the blob contents into memory\n  // 2. Jump to the beginning of the memory where the blobs were loaded\n  // After that the execution continues normally with the loaded contract reading our\n  // prepared fn selector and jumps to the selected contract method.\n  const instructionBytes = new InstructionSet(\n    // 1. load the blob contents into memory\n    // find the start of the hardcoded blob ids, which are located after the code ends\n    asm.move_(0x10, RegId.pc().to_u8()),\n    // 0x10 to hold the address of the current blob id\n    asm.addi(0x10, 0x10, numberOfInstructions * Instruction.size()),\n    // The contract is going to be loaded from the current value of SP onwards, save\n    // the location into 0x16 so we can jump into it later on\n    asm.move_(0x16, RegId.sp().to_u8()),\n    // loop counter\n    asm.movi(0x13, numberOfBlobs),\n    // LOOP starts here\n    // 0x11 to hold the size of the current blob\n    asm.bsiz(0x11, 0x10),\n    // push the blob contents onto the stack\n    asm.ldc(0x10, 0, 0x11, 1),\n    // move on to the next blob\n    asm.addi(0x10, 0x10, blobIdSize),\n    // decrement the loop counter\n    asm.subi(0x13, 0x13, 1),\n    // Jump backwards (3+1) instructions if the counter has not reached 0\n    asm.jnzb(0x13, RegId.zero().to_u8(), 3),\n    // Jump into the memory where the contract is loaded\n    // what follows is called _jmp_mem by the sway compiler\n    // subtract the address contained in IS because jmp will add it back\n    asm.sub(0x16, 0x16, RegId.is().to_u8()),\n    // jmp will multiply by 4 so we need to divide to cancel that out\n    asm.divi(0x16, 0x16, 4),\n    // jump to the start of the contract we loaded\n    asm.jmp(0x16)\n  ).toBytes();\n\n  return concat([instructionBytes, blobIdBytes]);\n};\n", "import { WORD_SIZE } from '@fuel-ts/abi-coder';\nimport { concat } from '@fuel-ts/utils';\n\nexport const getContractChunks = (bytecode: Uint8Array, chunkSize: number) => {\n  const chunks = [];\n\n  for (let offset = 0, index = 0; offset < bytecode.length; offset += chunkSize, index++) {\n    let chunk = bytecode.slice(offset, offset + chunkSize);\n    let length = chunk.length;\n\n    // Align chunks by word size\n    if (length % WORD_SIZE !== 0) {\n      chunk = concat([chunk, new Uint8Array(chunkSize - chunk.length)]);\n      length = chunk.length;\n    }\n\n    chunks.push({ id: index, size: length, bytecode: chunk });\n  }\n\n  return chunks;\n};\n", "import { sha256 } from '@fuel-ts/hasher';\nimport { calcRoot, SparseMerkleTree } from '@fuel-ts/merkle';\nimport type { StorageSlot } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { chunkAndPadBytes, hexlify, concat, arrayify } from '@fuel-ts/utils';\n\n/**\n * Get the Merkle root of a contract's bytecode.\n *\n * @param bytecode - The bytecode of the contract.\n * @returns The Merkle root of the contract's bytecode.\n */\nexport const getContractRoot = (bytecode: BytesLike): string => {\n  const chunkSize = 16 * 1024;\n  const bytes = arrayify(bytecode);\n  const chunks = chunkAndPadBytes(bytes, chunkSize);\n\n  return calcRoot(chunks.map((c) => hexlify(c)));\n};\n\n/**\n * Get the Merkle root of a contract's storage slots.\n *\n * @param storageSlots - An array of storage slots containing key-value pairs.\n * @returns The Merkle root of the contract's storage slots.\n */\nexport const getContractStorageRoot = (storageSlots: StorageSlot[]): string => {\n  const tree = new SparseMerkleTree();\n\n  storageSlots.forEach(({ key, value }) => tree.update(sha256(key), value));\n\n  return tree.root;\n};\n\n/**\n * Get the contract ID of a contract based on its bytecode, salt,\n * and state root.\n *\n * @param bytecode - The bytecode of the contract.\n * @param salt - The salt value used for contract creation.\n * @param stateRoot - The state root of the contract.\n * @returns The contract ID of the contract.\n */\nexport const getContractId = (\n  bytecode: BytesLike,\n  salt: BytesLike,\n  stateRoot: BytesLike\n): string => {\n  const root = getContractRoot(arrayify(bytecode));\n  const contractId = sha256(concat(['0x4655454C', salt, root, stateRoot]));\n  return contractId;\n};\n\n/**\n * Ensures that a string is hexlified.\n *\n * @param value - The value to be hexlified.\n *\n * @returns The input value hexlified with prefix.\n */\nexport const hexlifyWithPrefix = (value: string) =>\n  hexlify(value.startsWith('0x') ? value : `0x${value}`);\n", "export const DEFAULT_PRECISION = 9;\nexport const DEFAULT_MIN_PRECISION = 3;\nexport const DEFAULT_DECIMAL_UNITS = 9;\n\n// Decimal units on the Fuel Network\nexport const DECIMAL_FUEL = 9;\n\n// Decimal units on the Ethereum network\nexport const DECIMAL_WEI = 18;\nexport const DECIMAL_KWEI = 15;\nexport const DECIMAL_MWEI = 12;\nexport const DECIMAL_GWEI = 9;\n", "/**\n * Devnet network URL\n */\nexport const DEVNET_NETWORK_URL = 'https://devnet.fuel.network/v1/graphql';\n\n/**\n * Testnet network URL\n */\nexport const TESTNET_NETWORK_URL = 'https://testnet.fuel.network/v1/graphql';\n", "/* Autogenerated file. Do not edit manually. */\n\n/* eslint-disable max-classes-per-file */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/consistent-type-imports */\n\n/*\n  Fuels version: 0.100.3\n*/\n\n\n\n\n\nimport { Contract as __Contract, type InvokeFunction } from '@fuel-ts/program';\nimport { Interface, type FunctionFragment, type StrSlice } from '@fuel-ts/abi-coder';\nimport { type Provider, type Account } from '@fuel-ts/account';\nimport { type StorageSlot } from '@fuel-ts/transactions';\nimport { type Address } from '@fuel-ts/address';import type { Option, Enum } from \"./common\";\n\nexport enum AccessErrorInput { NotOwner = 'NotOwner' };\nexport enum AccessErrorOutput { NotOwner = 'NotOwner' };\nexport type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;\nexport type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;\nexport enum InitializationErrorInput { CannotReinitialized = 'CannotReinitialized' };\nexport enum InitializationErrorOutput { CannotReinitialized = 'CannotReinitialized' };\nexport enum SetProxyOwnerErrorInput { CannotUninitialize = 'CannotUninitialize' };\nexport enum SetProxyOwnerErrorOutput { CannotUninitialize = 'CannotUninitialize' };\nexport type StateInput = Enum<{ Uninitialized: undefined, Initialized: IdentityInput, Revoked: undefined }>;\nexport type StateOutput = Enum<{ Uninitialized: void, Initialized: IdentityOutput, Revoked: void }>;\n\nexport type AddressInput = { bits: string };\nexport type AddressOutput = AddressInput;\nexport type ContractIdInput = { bits: string };\nexport type ContractIdOutput = ContractIdInput;\nexport type ProxyOwnerSetInput = { new_proxy_owner: StateInput };\nexport type ProxyOwnerSetOutput = { new_proxy_owner: StateOutput };\nexport type ProxyTargetSetInput = { new_target: ContractIdInput };\nexport type ProxyTargetSetOutput = { new_target: ContractIdOutput };\n\nexport type Src14OwnedProxyConfigurables = Partial<{\n  INITIAL_TARGET: Option<ContractIdInput>;\n  INITIAL_OWNER: StateInput;\n}>;\n\nconst abi = {\n  \"programType\": \"contract\",\n  \"specVersion\": \"1\",\n  \"encodingVersion\": \"1\",\n  \"concreteTypes\": [\n    {\n      \"type\": \"()\",\n      \"concreteTypeId\": \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\"\n    },\n    {\n      \"type\": \"enum standards::src5::AccessError\",\n      \"concreteTypeId\": \"3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d\",\n      \"metadataTypeId\": 1\n    },\n    {\n      \"type\": \"enum standards::src5::State\",\n      \"concreteTypeId\": \"192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c\",\n      \"metadataTypeId\": 2\n    },\n    {\n      \"type\": \"enum std::option::Option<struct std::contract_id::ContractId>\",\n      \"concreteTypeId\": \"0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8\",\n      \"metadataTypeId\": 4,\n      \"typeArguments\": [\n        \"29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54\"\n      ]\n    },\n    {\n      \"type\": \"enum sway_libs::ownership::errors::InitializationError\",\n      \"concreteTypeId\": \"1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893\",\n      \"metadataTypeId\": 5\n    },\n    {\n      \"type\": \"enum sway_libs::upgradability::errors::SetProxyOwnerError\",\n      \"concreteTypeId\": \"3c6e90ae504df6aad8b34a93ba77dc62623e00b777eecacfa034a8ac6e890c74\",\n      \"metadataTypeId\": 6\n    },\n    {\n      \"type\": \"str\",\n      \"concreteTypeId\": \"8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a\"\n    },\n    {\n      \"type\": \"struct std::contract_id::ContractId\",\n      \"concreteTypeId\": \"29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54\",\n      \"metadataTypeId\": 9\n    },\n    {\n      \"type\": \"struct sway_libs::upgradability::events::ProxyOwnerSet\",\n      \"concreteTypeId\": \"96dd838b44f99d8ccae2a7948137ab6256c48ca4abc6168abc880de07fba7247\",\n      \"metadataTypeId\": 10\n    },\n    {\n      \"type\": \"struct sway_libs::upgradability::events::ProxyTargetSet\",\n      \"concreteTypeId\": \"1ddc0adda1270a016c08ffd614f29f599b4725407c8954c8b960bdf651a9a6c8\",\n      \"metadataTypeId\": 11\n    }\n  ],\n  \"metadataTypes\": [\n    {\n      \"type\": \"b256\",\n      \"metadataTypeId\": 0\n    },\n    {\n      \"type\": \"enum standards::src5::AccessError\",\n      \"metadataTypeId\": 1,\n      \"components\": [\n        {\n          \"name\": \"NotOwner\",\n          \"typeId\": \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\"\n        }\n      ]\n    },\n    {\n      \"type\": \"enum standards::src5::State\",\n      \"metadataTypeId\": 2,\n      \"components\": [\n        {\n          \"name\": \"Uninitialized\",\n          \"typeId\": \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\"\n        },\n        {\n          \"name\": \"Initialized\",\n          \"typeId\": 3\n        },\n        {\n          \"name\": \"Revoked\",\n          \"typeId\": \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\"\n        }\n      ]\n    },\n    {\n      \"type\": \"enum std::identity::Identity\",\n      \"metadataTypeId\": 3,\n      \"components\": [\n        {\n          \"name\": \"Address\",\n          \"typeId\": 8\n        },\n        {\n          \"name\": \"ContractId\",\n          \"typeId\": 9\n        }\n      ]\n    },\n    {\n      \"type\": \"enum std::option::Option\",\n      \"metadataTypeId\": 4,\n      \"components\": [\n        {\n          \"name\": \"None\",\n          \"typeId\": \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\"\n        },\n        {\n          \"name\": \"Some\",\n          \"typeId\": 7\n        }\n      ],\n      \"typeParameters\": [\n        7\n      ]\n    },\n    {\n      \"type\": \"enum sway_libs::ownership::errors::InitializationError\",\n      \"metadataTypeId\": 5,\n      \"components\": [\n        {\n          \"name\": \"CannotReinitialized\",\n          \"typeId\": \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\"\n        }\n      ]\n    },\n    {\n      \"type\": \"enum sway_libs::upgradability::errors::SetProxyOwnerError\",\n      \"metadataTypeId\": 6,\n      \"components\": [\n        {\n          \"name\": \"CannotUninitialize\",\n          \"typeId\": \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\"\n        }\n      ]\n    },\n    {\n      \"type\": \"generic T\",\n      \"metadataTypeId\": 7\n    },\n    {\n      \"type\": \"struct std::address::Address\",\n      \"metadataTypeId\": 8,\n      \"components\": [\n        {\n          \"name\": \"bits\",\n          \"typeId\": 0\n        }\n      ]\n    },\n    {\n      \"type\": \"struct std::contract_id::ContractId\",\n      \"metadataTypeId\": 9,\n      \"components\": [\n        {\n          \"name\": \"bits\",\n          \"typeId\": 0\n        }\n      ]\n    },\n    {\n      \"type\": \"struct sway_libs::upgradability::events::ProxyOwnerSet\",\n      \"metadataTypeId\": 10,\n      \"components\": [\n        {\n          \"name\": \"new_proxy_owner\",\n          \"typeId\": 2\n        }\n      ]\n    },\n    {\n      \"type\": \"struct sway_libs::upgradability::events::ProxyTargetSet\",\n      \"metadataTypeId\": 11,\n      \"components\": [\n        {\n          \"name\": \"new_target\",\n          \"typeId\": 9\n        }\n      ]\n    }\n  ],\n  \"functions\": [\n    {\n      \"inputs\": [],\n      \"name\": \"proxy_target\",\n      \"output\": \"0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8\",\n      \"attributes\": [\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" Returns the target contract of the proxy contract.\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" # Returns\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" * [Option<ContractId>] - The new proxy contract to which all fallback calls will be passed or `None`.\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" # Number of Storage Accesses\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" * Reads: `1`\"\n          ]\n        },\n        {\n          \"name\": \"storage\",\n          \"arguments\": [\n            \"read\"\n          ]\n        }\n      ]\n    },\n    {\n      \"inputs\": [\n        {\n          \"name\": \"new_target\",\n          \"concreteTypeId\": \"29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54\"\n        }\n      ],\n      \"name\": \"set_proxy_target\",\n      \"output\": \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n      \"attributes\": [\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" Change the target contract of the proxy contract.\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" # Additional Information\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" This method can only be called by the `proxy_owner`.\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" # Arguments\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" * `new_target`: [ContractId] - The new proxy contract to which all fallback calls will be passed.\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" # Reverts\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" * When not called by `proxy_owner`.\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" # Number of Storage Accesses\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" * Reads: `1`\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" * Write: `1`\"\n          ]\n        },\n        {\n          \"name\": \"storage\",\n          \"arguments\": [\n            \"read\",\n            \"write\"\n          ]\n        }\n      ]\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"proxy_owner\",\n      \"output\": \"192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c\",\n      \"attributes\": [\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" Returns the owner of the proxy contract.\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" # Returns\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" * [State] - Represents the state of ownership for this contract.\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" # Number of Storage Accesses\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" * Reads: `1`\"\n          ]\n        },\n        {\n          \"name\": \"storage\",\n          \"arguments\": [\n            \"read\"\n          ]\n        }\n      ]\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"initialize_proxy\",\n      \"output\": \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n      \"attributes\": [\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" Initializes the proxy contract.\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" # Additional Information\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" This method sets the storage values using the values of the configurable constants `INITIAL_TARGET` and `INITIAL_OWNER`.\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" This then allows methods that write to storage to be called.\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" This method can only be called once.\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" # Reverts\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" * When `storage::SRC14.proxy_owner` is not [State::Uninitialized].\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" # Number of Storage Accesses\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" * Writes: `2`\"\n          ]\n        },\n        {\n          \"name\": \"storage\",\n          \"arguments\": [\n            \"write\"\n          ]\n        }\n      ]\n    },\n    {\n      \"inputs\": [\n        {\n          \"name\": \"new_proxy_owner\",\n          \"concreteTypeId\": \"192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c\"\n        }\n      ],\n      \"name\": \"set_proxy_owner\",\n      \"output\": \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n      \"attributes\": [\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" Changes proxy ownership to the passed State.\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" # Additional Information\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" This method can be used to transfer ownership between Identities or to revoke ownership.\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" # Arguments\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" * `new_proxy_owner`: [State] - The new state of the proxy ownership.\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" # Reverts\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" * When the sender is not the current proxy owner.\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" * When the new state of the proxy ownership is [State::Uninitialized].\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" # Number of Storage Accesses\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \"\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" * Reads: `1`\"\n          ]\n        },\n        {\n          \"name\": \"doc-comment\",\n          \"arguments\": [\n            \" * Writes: `1`\"\n          ]\n        },\n        {\n          \"name\": \"storage\",\n          \"arguments\": [\n            \"write\"\n          ]\n        }\n      ]\n    }\n  ],\n  \"loggedTypes\": [\n    {\n      \"logId\": \"4571204900286667806\",\n      \"concreteTypeId\": \"3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d\"\n    },\n    {\n      \"logId\": \"2151606668983994881\",\n      \"concreteTypeId\": \"1ddc0adda1270a016c08ffd614f29f599b4725407c8954c8b960bdf651a9a6c8\"\n    },\n    {\n      \"logId\": \"2161305517876418151\",\n      \"concreteTypeId\": \"1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893\"\n    },\n    {\n      \"logId\": \"4354576968059844266\",\n      \"concreteTypeId\": \"3c6e90ae504df6aad8b34a93ba77dc62623e00b777eecacfa034a8ac6e890c74\"\n    },\n    {\n      \"logId\": \"10870989709723147660\",\n      \"concreteTypeId\": \"96dd838b44f99d8ccae2a7948137ab6256c48ca4abc6168abc880de07fba7247\"\n    },\n    {\n      \"logId\": \"10098701174489624218\",\n      \"concreteTypeId\": \"8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a\"\n    }\n  ],\n  \"messagesTypes\": [],\n  \"configurables\": [\n    {\n      \"name\": \"INITIAL_TARGET\",\n      \"concreteTypeId\": \"0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8\",\n      \"offset\": 13368\n    },\n    {\n      \"name\": \"INITIAL_OWNER\",\n      \"concreteTypeId\": \"192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c\",\n      \"offset\": 13320\n    }\n  ]\n};\n\nconst storageSlots: StorageSlot[] = [\n  {\n    \"key\": \"7bb458adc1d118713319a5baa00a2d049dd64d2916477d2688d76970c898cd55\",\n    \"value\": \"0000000000000000000000000000000000000000000000000000000000000000\"\n  },\n  {\n    \"key\": \"7bb458adc1d118713319a5baa00a2d049dd64d2916477d2688d76970c898cd56\",\n    \"value\": \"0000000000000000000000000000000000000000000000000000000000000000\"\n  },\n  {\n    \"key\": \"bb79927b15d9259ea316f2ecb2297d6cc8851888a98278c0a2e03e1a091ea754\",\n    \"value\": \"0000000000000000000000000000000000000000000000000000000000000000\"\n  },\n  {\n    \"key\": \"bb79927b15d9259ea316f2ecb2297d6cc8851888a98278c0a2e03e1a091ea755\",\n    \"value\": \"0000000000000000000000000000000000000000000000000000000000000000\"\n  }\n]\n;\n\nexport class Src14OwnedProxyInterface extends Interface {\n  constructor() {\n    super(abi);\n  }\n\n  declare functions: {\n    proxy_target: FunctionFragment;\n    set_proxy_target: FunctionFragment;\n    proxy_owner: FunctionFragment;\n    initialize_proxy: FunctionFragment;\n    set_proxy_owner: FunctionFragment;\n  };\n}\n\nexport class Src14OwnedProxy extends __Contract {\n  static readonly abi = abi;\n  static readonly storageSlots = storageSlots;\n\n  declare interface: Src14OwnedProxyInterface;\n  declare functions: {\n    proxy_target: InvokeFunction<[], Option<ContractIdOutput>>;\n    set_proxy_target: InvokeFunction<[new_target: ContractIdInput], void>;\n    proxy_owner: InvokeFunction<[], StateOutput>;\n    initialize_proxy: InvokeFunction<[], void>;\n    set_proxy_owner: InvokeFunction<[new_proxy_owner: StateInput], void>;\n  };\n\n  constructor(\n    id: string | Address,\n    accountOrProvider: Account | Provider,\n  ) {\n    super(id, abi, accountOrProvider);\n  }\n}\n", "/* Autogenerated file. Do not edit manually. */\n\n/* eslint-disable max-classes-per-file */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/consistent-type-imports */\n\n/*\n  Fuels version: 0.100.3\n*/\n\n\n\n\n\nimport { ContractFactory as __ContractFactory, type DeployContractOptions } from '@fuel-ts/contract';\nimport { decompressBytecode } from '@fuel-ts/utils';\nimport { type Provider, type Account } from '@fuel-ts/account';import { Src14OwnedProxy } from \"./Src14OwnedProxy\";\n\nconst bytecode = decompressBytecode(\"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\");\n\nexport class Src14OwnedProxyFactory extends __ContractFactory<Src14OwnedProxy> {\n\n  static readonly bytecode = bytecode;\n\n  constructor(accountOrProvider: Account | Provider) {\n    super(\n      bytecode,\n      Src14OwnedProxy.abi,\n      accountOrProvider,\n      Src14OwnedProxy.storageSlots\n    );\n  }\n\n  static deploy (\n    wallet: Account,\n    options: DeployContractOptions = {}\n  ) {\n    const factory = new Src14OwnedProxyFactory(wallet);\n    return factory.deploy(options);\n  }\n}\n", "export { Script } from '@fuel-ts/script';\nexport * from './cli/index';\nexport * from '@fuel-ts/abi-coder';\nexport * from '@fuel-ts/address';\nexport * from '@fuel-ts/address/configs';\nexport * from '@fuel-ts/contract';\nexport * from '@fuel-ts/crypto';\nexport * from '@fuel-ts/errors';\nexport * from '@fuel-ts/hasher';\nexport * from '@fuel-ts/math';\nexport * from '@fuel-ts/math/configs';\nexport * from '@fuel-ts/program';\nexport * from '@fuel-ts/transactions';\nexport * from '@fuel-ts/utils';\nexport * from '@fuel-ts/account';\nexport * from '@fuel-ts/transactions/configs';\nexport * from '@fuel-ts/account/configs';\nexport * from '@fuel-ts/recipes';\n", "import type { UserFuelsConfig } from '../types';\n\nexport function createConfig(config: UserFuelsConfig) {\n  return config;\n}\n", "import type { JsonAbi } from '@fuel-ts/abi-coder';\nimport type { DeployContractOptions } from '@fuel-ts/contract';\n\nexport enum Commands {\n  build = 'build',\n  deploy = 'deploy',\n  dev = 'dev',\n  init = 'init',\n  versions = 'versions',\n  node = 'node',\n}\n\nexport type CommandEvent =\n  | {\n      type: Commands.build;\n      data: void;\n    }\n  | {\n      type: Commands.deploy;\n      data: DeployedData;\n    }\n  | {\n      type: Commands.dev;\n      data: void;\n    }\n  | {\n      type: Commands.init;\n      data: void;\n    }\n  | {\n      type: Commands.versions;\n      data: void;\n    }\n  | {\n      type: Commands.node;\n      data: void;\n    };\n\nexport type DeployedContract = {\n  name: string;\n  contractId: string;\n};\n\nexport type DeployedScript = {\n  path: string;\n  loaderBytecode: Uint8Array;\n  abi: JsonAbi;\n};\n\nexport type DeployedPredicate = DeployedScript & {\n  predicateRoot: string;\n};\n\nexport type DeployedData = {\n  contracts?: DeployedContract[];\n  scripts?: DeployedScript[];\n  predicates?: DeployedPredicate[];\n};\n\nexport type ContractDeployOptions = {\n  contracts: DeployedContract[];\n  contractName: string;\n  contractPath: string;\n};\n\nexport type OptionsFunction = (\n  options: ContractDeployOptions\n) => DeployContractOptions | Promise<DeployContractOptions>;\n\nexport type FuelsEventListener<CType extends Commands> = (\n  config: FuelsConfig,\n  data: Extract<CommandEvent, { type: CType }>['data']\n) => void | Promise<void>;\n\nexport type UserFuelsConfig = {\n  /** Relative directory path to Forc workspace */\n  workspace?: string;\n  /** List of relative directory paths to Sway contracts */\n  contracts?: string[];\n  /** List of relative directory paths to Sway predicates */\n  predicates?: string[];\n  /** List of relative directory paths to Sway scripts */\n  scripts?: string[];\n  /** Relative directory path for generating Typescript definitions */\n  output: string;\n\n  /**\n   * Wallet private key, used when deploying contracts.\n   * Should ideally come from env — `process.env.MY_PRIVATE_KEY`\n   */\n  privateKey?: string;\n\n  /**\n   * Contracts will be deployed using this provider.\n   * Default: http://localhost:4000/v1/graphql\n   */\n  providerUrl?: string;\n\n  /**\n   * Relative path to directory containing custom configurations for `fuel-core`, such as:\n   * - chainConfig.json\n   * - metadata.json\n   * - stateConfig.json\n   */\n  snapshotDir?: string;\n\n  /** Static of dyanmic deploy configs to be used when deploying contracts */\n  deployConfig?: DeployContractOptions | OptionsFunction;\n\n  /** If set to false, you will need to spin up a Fuel core node by yourself */\n  autoStartFuelCore?: boolean;\n\n  /** If set, will use absolute path to forc binary  */\n  forcPath?: string;\n\n  /** If set, will use absolute path to forc binary  */\n  fuelCorePath?: string;\n\n  /**\n   * Port to use when starting a `fuel-core` node\n   * Default: first free port, starting from 4000\n   */\n  fuelCorePort?: number;\n\n  /**\n   * Aditional forc build flags to be used when compiling contracts.\n   * Default: []\n   * Example:\n   *  forcBuildFlags: ['--release'];\n   */\n  forcBuildFlags?: string[];\n\n  /**\n   * Function callback, will be called after a successful build operation\n   *\n   * @param config - The loaded `fuels.config.ts`\n   */\n  onBuild?: FuelsEventListener<Commands.build>;\n\n  /**\n   * Function callback, will be called after a successful deploy operation\n   *\n   * @param config - The loaded `fuels.config.ts`\n   * @param data - the deployed contracts\n   */\n  onDeploy?: FuelsEventListener<Commands.deploy>;\n\n  /**\n   * Function callback, will be called after a successful dev operation\n   *\n   * @param config - The loaded `fuels.config.ts`\n   */\n  onDev?: FuelsEventListener<Commands.dev>;\n\n  /**\n   * Function callback, will be called after a successful Node refresh operation\n   *\n   * @param config - The loaded `fuels.config.ts`\n   */\n  onNode?: FuelsEventListener<Commands.node>;\n\n  /**\n   * Function callback, will be called in case of errors\n   * @param config - Configuration in use\n   * @param error - Original error object\n   */\n  onFailure?: (config: FuelsConfig, error: Error) => void | Promise<void>;\n};\n\nexport type FuelsConfig = UserFuelsConfig &\n  Required<\n    Pick<\n      UserFuelsConfig,\n      | 'contracts'\n      | 'predicates'\n      | 'scripts'\n      | 'deployConfig'\n      | 'autoStartFuelCore'\n      | 'forcPath'\n      | 'fuelCorePath'\n      | 'providerUrl'\n      | 'forcBuildFlags'\n    >\n  > & {\n    basePath: string;\n    configPath: string;\n    buildMode: 'debug' | 'release';\n  };\n"],
  "mappings": "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K,GAAG,IAAI,IAAI,EAAE;AACtB,UAAI,KAAK,GAAG,IAAI,IAAI,EAAE;AACtB,UAAI,KAAK,GAAG,IAAI,IAAI,EAAE;AACtB,UAAI,KAAK,GAAG,IAAI,IAAI,EAAE;AACtB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,UAAI,KAAK,GAAG,IAAI,IAAI,EAAE;AACtB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,GAAG,EAAE;AACjB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,GAAG,EAAE;AACjB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,GAAG,EAAE;AACjB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,GAAG,IAAI,IAAI,EAAE;AAClB,WAAK,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,MAAA;MACF,gBAAA;MACA,YAAA;QACE;UACA,MAAA;UACA,QACE;QAAA;QACU;UAEV,MAAA;UACF,QAAA;QACF;MACA;MACE,gBAAQ,CAAA,CAAA;IAAA;IACU;MACJ,MACZ;MAAA,gBACU;MAAA,YACR;QACF;UACF,MAAA;UACF,QACA;QACE;MACA;IACF;IACA;MACE,MAAA;MACA,gBAAA;MACA,YAAA;QACE;UACE,MAAA;UACA,QACF;QACF;MACF;IACA;IAAA;MAEE,MAAA;MACA,gBAAc;IAAA;IACZ;MACU,MACR;MAAU,gBACZ;MACF,YAAA;QACF;UACA,MAAA;UACE,QAAQ;QACR;MACA;IAAc;IACZ;MACU,MACR;MAAU,gBACZ;MACF,YAAA;QACF;UACA,MAAA;UACE,QAAQ;QACR;MACA;IAAc;IACZ;MACU,MACR;MAAU,gBACZ;MACF,YAAA;QACF;UACF,MAAA;UACA,QAAa;QACX;MACE;IAAW;IACH;MAER,MAAA;MAAc,gBACZ;MAAA,YACU;QAAA;UACK,MACX;UACF,QAAA;QACF;MAAA;IACA;EACU;EACK,WACX;IAAA;MACF,QACF,CAAA;MAAA,MACA;MAAA,QACU;MACK,YACX;QAAA;UAEJ,MAAA;UACA,WAAA,CAAA,qDAAA;QAAA;QACU;UACK,MACX;UACF,WAAA,CAAA,EAAA;QACF;QACA;UACE,MAAA;UACA,WAAA,CAAA,YAAa;QAAA;QACX;UAEJ,MAAA;UACA,WAAA,CAAA,EAAA;QAAA;QACU;UACK,MACX;UACF,WAAA;YACF;UACA;QAAA;QACU;UACK,MACX;UACF,WAAA,CAAA,EAAA;QACF;QACA;UACE,MAAA;UACA,WAAA,CAAA,+BAAa;QAAA;QACX;UAEJ,MAAA;UACA,WAAA,CAAA,EAAA;QAAA;QACU;UACK,MACX;UACF,WAAA,CAAA,eAAA;QACF;QACA;UACE,MAAA;UACA,WAAA,CAAA,MAAa;QAAA;MACX;IACF;IACF;MAEJ,QAAA;QACA;UACE,MAAU;UACR,gBACE;QAAQ;MACU;MAEtB,MAAA;MACA,QACA;MACA,YAAA;QACE;UACE,MAAA;UACA,WAAA,CAAA,oDAAa;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",
  "names": ["module", "exports", "assert", "BN", "Buffer", "num", "max", "min", "init", "mul", "mod", "pow", "move", "clone", "inspect", "toString", "toNumber", "ret", "length", "allocate", "or", "and", "xor", "add", "sub", "comb10MulTo", "o", "b2", "b4", "b8", "ws", "bits", "div", "gt", "gte", "lt", "lte", "eq", "split", "K256", "prime", "version", "ErrorCode", "__name", "_a", "BnJs", "length", "num", "div", "mod", "__name", "cb", "err", "_a", "max", "o", "l", "type", "max", "lt", "add", "o", "tr", "_a", "_b", "head", "i", "o", "td", "init", "cb", "max", "o", "init", "err", "f", "o", "fl", "cb", "Deflate", "split", "AsyncDeflate", "cb", "Inflate", "cb", "AsyncInflate", "cb", "Gzip", "cb", "f", "Gunzip", "cb", "AsyncGunzip", "cb", "Zlib", "cb", "f", "Unzlib", "cb", "AsyncUnzlib", "cb", "Decompress", "cb", "AsyncDecompress", "cb", "err", "DecodeUTF8", "cb", "_a", "EncodeUTF8", "cb", "_a", "f", "fl", "o", "ZipPassThrough", "ZipDeflate", "AsyncZipDeflate", "err", "Zip", "cb", "f", "o", "err", "_a", "_b", "UnzipPassThrough", "UnzipInflate", "AsyncUnzipInflate", "err", "Unzip", "cb", "f", "is", "add", "_a", "err", "dat", "final", "__name", "match", "FuelError", "ErrorCode", "_a", "time", "pair", "min", "crypto", "toBytes", "toBytes", "toBytes", "hash", "toBytes", "pad", "hash", "toBytes", "view", "view", "isLE", "_32n", "toBytes", "take", "length", "view", "head", "tail", "Pi", "toBytes", "take", "view", "tr", "view", "scrypt", "__name", "ripemd160", "pbkdf2", "crypto", "btoa", "length", "binary", "arrayify", "FuelError", "ErrorCode", "hash", "sha256", "sha512", "hexlify", "bufferFromString", "decrypt", "encrypt", "keyFromPassword", "randomBytes", "stringFromBuffer", "keccak256", "decryptJsonWalletData", "encryptJsonWalletData", "computeHmac", "randomUUID", "isBytes", "abytes", "aexists", "aoutput", "abytes", "min", "crypto", "createView", "rotr", "isLE", "hexes", "utf8ToBytes", "toBytes", "abytes", "Hash", "wrapConstructor", "toBytes", "setBigUint64", "view", "isLE", "_32n", "Chi", "Maj", "HashMD", "Hash", "createView", "aexists", "toBytes", "take", "aoutput", "length", "SHA256_K", "SHA256_IV", "SHA256_W", "SHA256", "HashMD", "view", "rotr", "Chi", "Maj", "SHA224", "sha256", "wrapConstructor", "sha224", "sha256", "__name", "_a", "type", "__name", "length", "FuelError", "ErrorCode", "arrayify", "bn", "toHex", "toBytes", "min", "empty", "concat", "toNumber", "toUtf8Bytes", "toUtf8String", "_hasNestedOption", "concatBytes", "abi", "o", "_b", "getCoder", "values", "f", "sha256", "log", "isBytes", "abytes", "aexists", "aoutput", "abytes", "min", "crypto", "createView", "rotr", "isLE", "hexes", "utf8ToBytes", "toBytes", "abytes", "Hash", "wrapConstructor", "toBytes", "setBigUint64", "view", "isLE", "_32n", "Chi", "Maj", "HashMD", "Hash", "createView", "aexists", "toBytes", "take", "aoutput", "length", "SHA256_K", "SHA256_IV", "SHA256_W", "SHA256", "HashMD", "view", "rotr", "Chi", "Maj", "SHA224", "sha256", "wrapConstructor", "sha224", "__name", "sha256", "_a", "arrayify", "FuelError", "hexlify", "ret", "_a", "length", "o", "__name", "InputType", "Coder", "NumberCoder", "concat", "arrayify", "sha256", "type", "FuelError", "ErrorCode", "OutputType", "B256Coder", "BigNumberCoder", "PolicyType", "ReceiptType", "StructCoder", "UpgradePurposeTypeEnum", "TransactionType", "storageSlots", "_b", "_a", "add", "set2", "length", "curryN", "length", "addIndex", "addIndex", "_b", "_a", "adjust", "XAll", "f", "all", "f", "match", "prop", "_isArguments", "contains", "keys", "prop", "type", "eq", "_a", "_b", "b", "equals", "pad", "_toISOString", "f", "length", "XFilter", "f", "reject", "recur", "keys", "toString", "max", "XMap", "f", "_xmap", "map", "prop", "pluck", "_reduce", "bind", "XWrap", "allPass", "always", "and", "XAny", "f", "any", "anyPass", "reduce_default", "ap", "reduce_default", "f", "XAperture", "append", "apply", "values", "props", "applySpec", "f", "applyTo", "f", "ascend", "curry", "ascendNatural", "prop", "isNil", "assocPath", "path", "assoc", "prop", "nAry", "binary", "type", "liftN", "lift", "both", "f", "call", "XPreservingReduced", "ret", "XFlatCat", "f", "chain", "clamp", "min", "max", "map", "copy", "type", "_ObjectMap", "clone", "collectBy", "reduce_default", "o", "tag", "comparator", "not", "f", "length", "slice", "reverse", "pipeWith", "reduce_default", "f", "composeWith", "concat", "cond", "pair", "constructN", "construct", "converge", "reduce_default", "XReduceBy", "reduceBy", "defaultTo", "descend", "descendNatural", "_Set", "set", "type", "difference", "differenceWith", "remove", "count", "prop", "prop", "dissocPath", "path", "head", "tail", "dissoc", "prop", "divide", "XDrop", "drop", "XTake", "ret", "take", "XDropLast", "dropLast", "XDropLastWhile", "dropLastWhile", "XDropRepeatsWith", "dropRepeatsWith", "eqBy", "f", "XDropWhile", "f", "dropWhile", "or", "either", "f", "type", "empty", "takeLast", "eqProps", "prop", "evolve", "type", "XFind", "f", "find", "XFindIndex", "f", "findIndex", "XFindLast", "f", "findLast", "XFindLastIndex", "f", "findLastIndex", "flip", "flow", "reduce_default", "forEach", "forEachObjIndexed", "fromPairs", "gt", "gte", "hasPath", "_path", "has", "prop", "hasIn", "prop", "ifElse", "indexOf", "innerJoin", "insert", "insertAll", "XUniqBy", "f", "set", "intersection", "length", "length", "objOf", "into", "invert", "props", "invertObj", "props", "invoker", "is", "isEmpty", "isNotEmpty", "isNotNil", "juxt", "keysIn", "prop", "lastIndexOf", "length", "lens", "update", "lensIndex", "lensPath", "lensProp", "lt", "lte", "mapAccum", "mapAccumRight", "mapObjIndexed", "match", "mathMod", "maxBy", "f", "mean", "median", "memoizeWith", "cache", "mergeAll", "mergeWithKey", "mergeDeepWithKey", "mergeDeepLeft", "mergeDeepRight", "mergeDeepWith", "mergeLeft", "mergeRight", "mergeWith", "min", "minBy", "f", "prop", "modifyPath", "path", "modify", "prop", "modulo", "length", "multiply", "f", "o", "props", "negate", "none", "nthArg", "o", "f", "of", "omit", "prop", "on", "f", "once", "otherwise", "f", "f", "over", "lens", "pair", "concat", "paths", "pathEq", "pathOr", "pathSatisfies", "pick", "pickAll", "pickBy", "test", "prop", "prepend", "useWith", "f", "XPromap", "f", "propEq", "propIs", "type", "propOr", "propSatisfies", "props", "range", "reduceRight", "times", "repeat", "replace", "tInit", "tStep", "XScan", "_xscan", "scan", "sequence", "of", "set", "lens", "sort", "comparator", "sortBy", "sortWith", "split", "splitAt", "splitEvery", "splitWhen", "splitWhenever", "subtract", "o", "length", "symmetricDifference", "symmetricDifferenceWith", "takeLastWhile", "XTakeWhile", "f", "takeWhile", "XTap", "f", "tap", "test", "andThen", "f", "toPairs", "prop", "toPairsIn", "prop", "transduce", "transpose", "traverse", "f", "of", "trim", "unapply", "unary", "uncurryN", "unfold", "pair", "XUniqWith", "unionWith", "unless", "until", "init", "valuesIn", "prop", "view", "lens", "when", "where", "prop", "whereAny", "prop", "whereEq", "without", "xor", "xprod", "zip", "zipObj", "keys", "values", "zipWith", "thunkify", "o", "match", "path", "OperationTypeNode", "DirectiveLocation", "Kind", "indent", "TokenKind", "instanceOf", "document", "type", "values", "map", "isDigit", "map", "keys", "path", "join", "type", "values", "type", "type", "type", "type", "type", "type", "type", "type", "type", "type", "type", "type", "type", "type", "type", "type", "type", "parseValue", "enumValue", "values", "type", "num", "type", "type", "values", "TypeKind", "type", "type", "_path", "type", "type2", "values2", "map", "type", "type", "type", "type", "keys", "prop", "type", "document", "groupBy", "groupBy", "groupBy", "type", "groupBy", "type", "keys", "type", "type", "memoized", "collectSubfields", "type", "BreakingChangeType", "DangerousChangeType", "document", "_a", "_b", "operationName", "err", "request", "_a", "_b", "type", "f", "e", "reject", "document", "f", "params_", "fetch", "init", "crossFetch", "url", "document", "variables", "__assign", "add", "and", "call", "eq", "gt", "lt", "not", "or", "xor", "ret", "count", "modulo", "bits", "imports", "isNode", "mod", "anumber", "isBytes", "abytes", "ahash", "aexists", "aoutput", "min", "crypto", "createView", "rotr", "isLE", "hexes", "utf8ToBytes", "toBytes", "abytes", "concatBytes", "sum", "pad", "Hash", "wrapConstructor", "toBytes", "randomBytes", "crypto", "setBigUint64", "view", "isLE", "_32n", "Chi", "Maj", "HashMD", "Hash", "createView", "aexists", "toBytes", "take", "aoutput", "length", "SHA256_K", "SHA256_IV", "SHA256_W", "SHA256", "HashMD", "view", "rotr", "Chi", "Maj", "SHA224", "sha256", "wrapConstructor", "sha224", "HMAC", "Hash", "hash", "ahash", "toBytes", "pad", "aexists", "abytes", "hmac", "abytes", "concatBytes", "isBytes", "utf8ToBytes", "_0n", "_1n", "_2n", "hexes", "num", "ch", "sum", "pad", "min", "max", "gen", "type", "map", "_0n", "_1n", "_2n", "num", "modulo", "invert", "map", "f", "num", "_0n", "_1n", "bitLen", "isLE", "_0n", "f", "_1n", "num", "invert", "length", "isLE", "num", "reduced", "_1n", "_0n", "_1n", "bits", "window", "f", "wbits", "cond2", "sum", "length", "num", "_0n", "abytes", "_1n", "_2n", "_3n", "_4n", "toBytes", "concatBytes", "tail", "isBytes", "Point", "f", "mul", "a", "sum", "modN", "invert", "head", "hash", "randomBytes", "_a", "format", "is", "o", "tv5", "c1", "c2", "hash", "hmac", "concatBytes", "randomBytes", "length", "abytes", "concatBytes", "utf8ToBytes", "count", "hash", "map", "Point", "_1n", "_2n", "_3n", "b2", "b22", "sha256", "_0n", "concatBytes", "randomBytes", "_a", "hash", "__name", "hashLeaf", "hashNode", "bits", "count", "bitMask", "import_events", "__name", "path", "paths", "assets", "last", "max", "err", "_a", "match", "FuelError", "ErrorCode", "type", "hexlify", "bn", "ZeroBytes32", "chain", "version", "cache", "arrayify", "ReceiptType", "normalize", "FAILED_TRANSFER_TO_ADDRESS_SIGNAL", "InputType", "OutputType", "difference", "_b", "UTXO_ID_LEN", "TransactionType", "clone", "concat", "TransactionCoder", "sha256", "storageSlots", "addressify", "abi", "bytecode", "request", "PolicyType", "o", "TransactionTypeName", "TransactionStatus", "OperationName", "AddressType", "ChainName", "isType", "time", "Interface", "sub", "BigNumberCoder", "isDefined", "document", "gql", "all", "gasPrice", "Address", "block", "InputMessageCoder", "DateTime", "isCoin", "requestToReestimate", "randomBytes", "hash", "scrypt2", "Language", "bits", "pbkdf22", "MainnetPRV", "TestnetPRV", "encodeBase58", "dataSlice", "ripemd1602", "toBytes", "computeHmac", "Vault", "WORD_SIZE", "RegId", "Instruction", "asm", "getInstructions", "numOfInstructions", "instructionBytes", "blobBytes", "loaderBytecode", "FuelConnectorMethods", "FuelConnectorEventTypes", "EventEmitter", "reject", "networks", "_a", "__name", "assert", "FuelError", "ErrorCode", "call", "type", "scriptResultDecoder", "ReceiptType", "arrayify", "sum", "WORD_SIZE", "ASSET_ID_LEN", "CONTRACT_ID_LEN", "concat", "bn", "assets", "request", "_b", "abi", "Address", "_a", "__name", "bytecode", "abi", "FuelError", "err", "returnZeroScript", "ScriptRequest", "__name", "RegId", "Instruction", "bytecode", "length", "concat", "arrayify", "storageSlots", "sha256", "_a", "abi", "request", "err", "WORD_SIZE", "DEFAULT_PRECISION", "DEFAULT_MIN_PRECISION", "DEFAULT_DECIMAL_UNITS", "_a", "__name", "__name", "Commands"]
}
