// src/utils.ts
import { randomBytes } from "@fuel-ts/crypto";
import { FuelError } from "@fuel-ts/errors";
import { AbstractContract, AbstractAccount } from "@fuel-ts/interfaces";
import { arrayify, hexlify } from "@fuel-ts/utils";
import { bech32m } from "bech32";
var FUEL_BECH32_HRP_PREFIX = "fuel";
function fromBech32(address) {
  return bech32m.decode(address);
}
function toBech32(address) {
  return bech32m.encode(
    FUEL_BECH32_HRP_PREFIX,
    bech32m.toWords(arrayify(hexlify(address)))
  );
}
function isBech32(address) {
  return typeof address === "string" && address.indexOf(FUEL_BECH32_HRP_PREFIX + 1) === 0 && fromBech32(address).prefix === FUEL_BECH32_HRP_PREFIX;
}
function isB256(address) {
  return address.length === 66 && /(0x)[0-9a-f]{64}$/i.test(address);
}
function isPublicKey(address) {
  return address.length === 130 && /(0x)[0-9a-f]{128}$/i.test(address);
}
function isEvmAddress(address) {
  return address.length === 42 && /(0x)[0-9a-f]{40}$/i.test(address);
}
function getBytesFromBech32(address) {
  return new Uint8Array(bech32m.fromWords(fromBech32(address).words));
}
function toB256(address) {
  if (!isBech32(address)) {
    throw new FuelError(
      FuelError.CODES.INVALID_BECH32_ADDRESS,
      `Invalid Bech32 Address: ${address}.`
    );
  }
  return hexlify(getBytesFromBech32(address));
}
function normalizeBech32(address) {
  const { words } = fromBech32(address);
  return bech32m.encode(FUEL_BECH32_HRP_PREFIX, words);
}
var addressify = (addressLike) => {
  if (addressLike instanceof AbstractAccount) {
    return addressLike.address;
  }
  if (addressLike instanceof AbstractContract) {
    return addressLike.id;
  }
  return addressLike;
};
var getRandomB256 = () => hexlify(randomBytes(32));
var clearFirst12BytesFromB256 = (b256) => {
  let bytes;
  try {
    if (!isB256(b256)) {
      throw new FuelError(
        FuelError.CODES.INVALID_BECH32_ADDRESS,
        `Invalid Bech32 Address: ${b256}.`
      );
    }
    bytes = getBytesFromBech32(toBech32(b256));
    bytes = hexlify(bytes.fill(0, 0, 12));
  } catch (error) {
    throw new FuelError(
      FuelError.CODES.PARSE_FAILED,
      `Cannot generate EVM Address B256 from: ${b256}.`
    );
  }
  return bytes;
};
var padFirst12BytesOfEvmAddress = (address) => {
  if (!isEvmAddress(address)) {
    throw new FuelError(FuelError.CODES.INVALID_EVM_ADDRESS, "Invalid EVM address format.");
  }
  return address.replace("0x", "0x000000000000000000000000");
};

// src/address.ts
import { FuelError as FuelError2 } from "@fuel-ts/errors";
import { AbstractAddress } from "@fuel-ts/interfaces";
import { arrayify as arrayify2, hexlify as hexlify2 } from "@fuel-ts/utils";
import { sha256 } from "@noble/hashes/sha256";
var Address = class extends AbstractAddress {
  // #region address-2
  /**
   * @deprecated
   * Type `Bech32Address` is now deprecated, as is this property. Use `B256` addresses instead. ([help](https://docs.fuel.network/docs/specs/abi/argument-encoding/#b256))
   */
  bech32Address;
  // #endregion address-2
  /**
   * @param address - A Bech32 address or B256 address
   */
  constructor(address) {
    super();
    if (isB256(address)) {
      this.bech32Address = toBech32(address);
    } else {
      this.bech32Address = normalizeBech32(address);
      if (!isBech32(this.bech32Address)) {
        throw new FuelError2(
          FuelError2.CODES.INVALID_BECH32_ADDRESS,
          `Invalid Bech32 Address: ${this.bech32Address}.`
        );
      }
    }
  }
  /**
   * Takes an B256 Address and returns back an checksum address.
   * The implementation follows the ERC-55 https://github.com/ethereum/ercs/blob/master/ERCS/erc-55.md.
   *
   * @returns A new `ChecksumAddress` instance
   */
  toChecksum() {
    return Address.toChecksum(this.toB256());
  }
  /**
   * Returns the `bech32Address` property
   * @deprecated
   * Type `Bech32Address` is now deprecated, as is this method. Use `B256` addresses instead. ([help](https://docs.fuel.network/docs/specs/abi/argument-encoding/#b256))
   * @returns The `bech32Address` property
   */
  toAddress() {
    return this.bech32Address;
  }
  /**
   * Converts and returns the `bech32Address` property to a 256 bit hash string
   * @returns The `bech32Address` property as a 256 bit hash string
   */
  toB256() {
    return toB256(this.bech32Address);
  }
  /**
   * Converts and returns the `bech32Address` property to a byte array
   * @returns The `bech32Address` property as a byte array
   */
  toBytes() {
    return getBytesFromBech32(this.bech32Address);
  }
  /**
   * Converts the `bech32Address` property to a 256 bit hash string
   * @returns The `bech32Address` property as a 256 bit hash string
   */
  toHexString() {
    return this.toB256();
  }
  /**
   * returns the address `checksum` as a string
   *
   * @returns The `bech32Address` property as a string
   */
  toString() {
    return this.toChecksum();
  }
  /**
   * Converts and returns the `bech32Address` property as a string
   * @returns The `bech32Address` property as a JSON string
   */
  toJSON() {
    return this.bech32Address;
  }
  /**
   * Clears the first 12 bytes of the `bech32Address` property and returns it as a `EvmAddress`
   * @returns The `bech32Address` property as an {@link EvmAddress | `EvmAddress`}
   */
  toEvmAddress() {
    const b256Address = toB256(this.bech32Address);
    return {
      bits: clearFirst12BytesFromB256(b256Address)
    };
  }
  /**
   * Wraps the B256 property and returns as an `AssetId`.
   * @returns The B256 property as an {@link AssetId | `AssetId`}
   */
  toAssetId() {
    return {
      bits: this.toB256()
    };
  }
  /**
   * Wraps the B256 address `checksum` and returns it as a string
   * @returns The B256 address `checksum` as a string
   */
  valueOf() {
    return this.toChecksum();
  }
  /**
   * Compares this the `bech32Address` property to another for direct equality
   * @param other - Another address to compare against
   * @returns The equality of the comparison
   */
  equals(other) {
    return this.bech32Address === other.bech32Address;
  }
  /**
   * Takes a Public Key, hashes it, and creates an `Address`
   *
   * @param publicKey - A wallets public key
   * @returns A new `Address` instance
   */
  static fromPublicKey(publicKey) {
    if (!isPublicKey(publicKey)) {
      throw new FuelError2(FuelError2.CODES.INVALID_PUBLIC_KEY, `Invalid Public Key: ${publicKey}.`);
    }
    const b256Address = hexlify2(sha256(arrayify2(publicKey)));
    return new Address(toBech32(b256Address));
  }
  /**
   * Takes a B256 Address and creates an `Address`
   *
   * @param b256Address - A b256 hash
   * @returns A new `Address` instance
   */
  static fromB256(b256Address) {
    if (!isB256(b256Address)) {
      throw new FuelError2(
        FuelError2.CODES.INVALID_B256_ADDRESS,
        `Invalid B256 Address: ${b256Address}.`
      );
    }
    return new Address(toBech32(b256Address));
  }
  /**
   * Creates an `Address` with a randomized `bech32Address` property
   *
   * @returns A new `Address` instance
   */
  static fromRandom() {
    return this.fromB256(getRandomB256());
  }
  /**
   * Takes an ambiguous string and attempts to create an `Address`
   *
   * @param address - An ambiguous string
   * @returns A new `Address` instance
   */
  static fromString(address) {
    return isBech32(address) ? new Address(address) : this.fromB256(address);
  }
  /**
   * Takes an ambiguous string or address and creates an `Address`
   *
   * @returns a new `Address` instance
   */
  static fromAddressOrString(address) {
    return typeof address === "string" ? this.fromString(address) : address;
  }
  /**
   * Takes a dynamic string or `AbstractAddress` and creates an `Address`
   *
   * @param addressId - A string containing Bech32, B256, or Public Key
   * @throws Error - Unknown address if the format is not recognised
   * @returns A new `Address` instance
   */
  static fromDynamicInput(address) {
    if (typeof address !== "string" && "toB256" in address) {
      return Address.fromB256(address.toB256());
    }
    if (isPublicKey(address)) {
      return Address.fromPublicKey(address);
    }
    if (isBech32(address)) {
      return new Address(address);
    }
    if (isB256(address)) {
      return Address.fromB256(address);
    }
    if (isEvmAddress(address)) {
      return Address.fromEvmAddress(address);
    }
    throw new FuelError2(
      FuelError2.CODES.PARSE_FAILED,
      `Unknown address format: only 'Bech32', 'B256', or 'Public Key (512)' are supported.`
    );
  }
  /**
   * Takes an Evm Address and returns back an `Address`
   *
   * @returns A new `Address` instance
   */
  static fromEvmAddress(evmAddress) {
    if (!isEvmAddress(evmAddress)) {
      throw new FuelError2(
        FuelError2.CODES.INVALID_EVM_ADDRESS,
        `Invalid Evm Address: ${evmAddress}.`
      );
    }
    const paddedAddress = padFirst12BytesOfEvmAddress(evmAddress);
    return new Address(toBech32(paddedAddress));
  }
  /**
   * Takes an ChecksumAddress and validates if it is a valid checksum address.
   *
   * @returns A `boolean` instance indicating if the address is valid.
   */
  static isChecksumValid(address) {
    let addressParsed = address;
    if (!address.startsWith("0x")) {
      addressParsed = `0x${address}`;
    }
    if (addressParsed.trim().length !== 66) {
      return false;
    }
    return Address.toChecksum(hexlify2(addressParsed)) === addressParsed;
  }
  /** @hidden */
  static toChecksum(address) {
    if (!isB256(address)) {
      throw new FuelError2(
        FuelError2.CODES.INVALID_B256_ADDRESS,
        `Invalid B256 Address: ${address}.`
      );
    }
    const addressHex = hexlify2(address).toLowerCase().slice(2);
    const checksum = sha256(addressHex);
    let ret = "0x";
    for (let i = 0; i < 32; ++i) {
      const byte = checksum[i];
      const ha = addressHex.charAt(i * 2);
      const hb = addressHex.charAt(i * 2 + 1);
      ret += (byte & 240) >= 128 ? ha.toUpperCase() : ha;
      ret += (byte & 15) >= 8 ? hb.toUpperCase() : hb;
    }
    return ret;
  }
};
export {
  Address,
  FUEL_BECH32_HRP_PREFIX,
  addressify,
  clearFirst12BytesFromB256,
  fromBech32,
  getBytesFromBech32,
  getRandomB256,
  isB256,
  isBech32,
  isEvmAddress,
  isPublicKey,
  normalizeBech32,
  padFirst12BytesOfEvmAddress,
  toB256,
  toBech32
};
//# sourceMappingURL=index.mjs.map