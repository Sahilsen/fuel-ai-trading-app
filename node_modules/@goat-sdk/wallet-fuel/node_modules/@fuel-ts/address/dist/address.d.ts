import { AbstractAddress } from '@fuel-ts/interfaces';
import type { Bech32Address, B256Address, EvmAddress, AssetId, ChecksumAddress } from '@fuel-ts/interfaces';
/**
 * `Address` provides a type safe wrapper for converting between different address formats
 * ands comparing them for equality.
 */
export default class Address extends AbstractAddress {
    /**
     * @deprecated
     * Type `Bech32Address` is now deprecated, as is this property. Use `B256` addresses instead. ([help](https://docs.fuel.network/docs/specs/abi/argument-encoding/#b256))
     */
    readonly bech32Address: Bech32Address;
    /**
     * @param address - A Bech32 address or B256 address
     */
    constructor(address: Bech32Address | B256Address);
    /**
     * Takes an B256 Address and returns back an checksum address.
     * The implementation follows the ERC-55 https://github.com/ethereum/ercs/blob/master/ERCS/erc-55.md.
     *
     * @returns A new `ChecksumAddress` instance
     */
    toChecksum(): ChecksumAddress;
    /**
     * Returns the `bech32Address` property
     * @deprecated
     * Type `Bech32Address` is now deprecated, as is this method. Use `B256` addresses instead. ([help](https://docs.fuel.network/docs/specs/abi/argument-encoding/#b256))
     * @returns The `bech32Address` property
     */
    toAddress(): Bech32Address;
    /**
     * Converts and returns the `bech32Address` property to a 256 bit hash string
     * @returns The `bech32Address` property as a 256 bit hash string
     */
    toB256(): B256Address;
    /**
     * Converts and returns the `bech32Address` property to a byte array
     * @returns The `bech32Address` property as a byte array
     */
    toBytes(): Uint8Array;
    /**
     * Converts the `bech32Address` property to a 256 bit hash string
     * @returns The `bech32Address` property as a 256 bit hash string
     */
    toHexString(): B256Address;
    /**
     * returns the address `checksum` as a string
     *
     * @returns The `bech32Address` property as a string
     */
    toString(): string;
    /**
     * Converts and returns the `bech32Address` property as a string
     * @returns The `bech32Address` property as a JSON string
     */
    toJSON(): string;
    /**
     * Clears the first 12 bytes of the `bech32Address` property and returns it as a `EvmAddress`
     * @returns The `bech32Address` property as an {@link EvmAddress | `EvmAddress`}
     */
    toEvmAddress(): EvmAddress;
    /**
     * Wraps the B256 property and returns as an `AssetId`.
     * @returns The B256 property as an {@link AssetId | `AssetId`}
     */
    toAssetId(): AssetId;
    /**
     * Wraps the B256 address `checksum` and returns it as a string
     * @returns The B256 address `checksum` as a string
     */
    valueOf(): string;
    /**
     * Compares this the `bech32Address` property to another for direct equality
     * @param other - Another address to compare against
     * @returns The equality of the comparison
     */
    equals(other: Address): boolean;
    /**
     * Takes a Public Key, hashes it, and creates an `Address`
     *
     * @param publicKey - A wallets public key
     * @returns A new `Address` instance
     */
    static fromPublicKey(publicKey: string): Address;
    /**
     * Takes a B256 Address and creates an `Address`
     *
     * @param b256Address - A b256 hash
     * @returns A new `Address` instance
     */
    static fromB256(b256Address: string): Address;
    /**
     * Creates an `Address` with a randomized `bech32Address` property
     *
     * @returns A new `Address` instance
     */
    static fromRandom(): Address;
    /**
     * Takes an ambiguous string and attempts to create an `Address`
     *
     * @param address - An ambiguous string
     * @returns A new `Address` instance
     */
    static fromString(address: string): Address;
    /**
     * Takes an ambiguous string or address and creates an `Address`
     *
     * @returns a new `Address` instance
     */
    static fromAddressOrString(address: string | AbstractAddress): AbstractAddress;
    /**
     * Takes a dynamic string or `AbstractAddress` and creates an `Address`
     *
     * @param addressId - A string containing Bech32, B256, or Public Key
     * @throws Error - Unknown address if the format is not recognised
     * @returns A new `Address` instance
     */
    static fromDynamicInput(address: string | AbstractAddress): Address;
    /**
     * Takes an Evm Address and returns back an `Address`
     *
     * @returns A new `Address` instance
     */
    static fromEvmAddress(evmAddress: string): Address;
    /**
     * Takes an ChecksumAddress and validates if it is a valid checksum address.
     *
     * @returns A `boolean` instance indicating if the address is valid.
     */
    static isChecksumValid(address: ChecksumAddress): boolean;
    /** @hidden */
    private static toChecksum;
}
//# sourceMappingURL=address.d.ts.map