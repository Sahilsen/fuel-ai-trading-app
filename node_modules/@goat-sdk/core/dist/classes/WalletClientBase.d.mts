import { Chain } from '../types/Chain.mjs';
import { Token } from '../types/Token.mjs';
import { ToolBase } from './ToolBase.mjs';
import 'zod';

type Signature = {
    signature: string;
};
type Balance = {
    decimals: number;
    symbol: string;
    name: string;
    value: string;
    inBaseUnits: string;
};
declare abstract class WalletClientBase {
    abstract getAddress(): string;
    abstract getChain(): Chain;
    abstract signMessage(message: string): Promise<Signature>;
    abstract balanceOf(address: string, tokenAddress?: string): Promise<Balance>;
    getTokenInfoByTicker(ticker: string): Promise<Token>;
    getCoreTools(): ToolBase[];
}

export { type Balance, type Signature, WalletClientBase };
