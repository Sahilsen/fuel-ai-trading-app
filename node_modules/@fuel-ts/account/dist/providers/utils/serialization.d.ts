import type { ChainInfo, NodeInfo, ChainInfoJson, NodeInfoJson, TransactionReceiptJson } from '../provider';
import type Provider from '../provider';
import type { TransactionResultReceipt } from '../transaction-response';
export interface ProviderCache {
    consensusParametersTimestamp?: number;
    chain: ChainInfo;
    nodeInfo: NodeInfo;
}
export interface ProviderCacheJson {
    consensusParametersTimestamp?: number;
    chain: ChainInfoJson;
    nodeInfo: NodeInfoJson;
}
export interface TransactionSummaryJson {
    id: string;
    transactionBytes: string;
    receipts: TransactionReceiptJson[];
    gasPrice: string;
}
export type TransactionSummaryJsonPartial = Omit<TransactionSummaryJson, 'id' | 'transactionBytes'>;
/** @hidden */
export declare const deserializeChain: (chain: ChainInfoJson) => ChainInfo;
/** @hidden */
export declare const serializeChain: (chain: ChainInfo) => ChainInfoJson;
/** @hidden */
export declare const deserializeNodeInfo: (nodeInfo: NodeInfoJson) => NodeInfo;
/** @hidden */
export declare const serializeNodeInfo: (nodeInfo: NodeInfo) => NodeInfoJson;
/** @hidden */
export declare const deserializeProviderCache: (cache: ProviderCacheJson) => ProviderCache;
/** @hidden */
export declare const serializeProviderCache: (provider: Provider) => Promise<ProviderCacheJson>;
/** @hidden */
export declare const deserializeReceipt: (receipt: TransactionReceiptJson) => TransactionResultReceipt;
//# sourceMappingURL=serialization.d.ts.map